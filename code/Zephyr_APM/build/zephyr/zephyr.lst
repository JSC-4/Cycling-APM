
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0001c200 <_vector_table>:
   1c200:	00 1a 02 20 ed 32 02 00 99 d6 03 00 71 32 02 00     ... .2......q2..
   1c210:	71 32 02 00 71 32 02 00 71 32 02 00 71 32 02 00     q2..q2..q2..q2..
	...
   1c22c:	35 2d 02 00 71 32 02 00 00 00 00 00 9d 2c 02 00     5-..q2.......,..
   1c23c:	71 32 02 00                                         q2..

0001c240 <_irq_vector_table>:
   1c240:	d9 2d 02 00 d9 2d 02 00 d9 2d 02 00 d9 2d 02 00     .-...-...-...-..
   1c250:	d9 2d 02 00 d9 2d 02 00 d9 2d 02 00 d9 2d 02 00     .-...-...-...-..
   1c260:	d9 2d 02 00 d9 2d 02 00 d9 2d 02 00 d9 2d 02 00     .-...-...-...-..
   1c270:	d9 2d 02 00 d9 2d 02 00 d9 2d 02 00 d9 2d 02 00     .-...-...-...-..
   1c280:	d9 2d 02 00 d9 2d 02 00 d9 2d 02 00 d9 2d 02 00     .-...-...-...-..
   1c290:	d9 2d 02 00 d9 2d 02 00 d9 2d 02 00 d9 2d 02 00     .-...-...-...-..
   1c2a0:	d9 2d 02 00 d9 2d 02 00 d9 2d 02 00 d9 2d 02 00     .-...-...-...-..
   1c2b0:	cb ec 03 00 d9 2d 02 00 d9 2d 02 00 d9 2d 02 00     .....-...-...-..
   1c2c0:	d9 2d 02 00 d9 2d 02 00 d9 2d 02 00 d9 2d 02 00     .-...-...-...-..
   1c2d0:	d9 2d 02 00 d9 2d 02 00 d9 2d 02 00 d9 2d 02 00     .-...-...-...-..
   1c2e0:	d9 2d 02 00 d9 2d 02 00 d9 2d 02 00 d9 2d 02 00     .-...-...-...-..
   1c2f0:	d9 2d 02 00 d9 2d 02 00 d9 2d 02 00 d9 2d 02 00     .-...-...-...-..
   1c300:	d9 2d 02 00 d9 2d 02 00 d9 2d 02 00 d9 2d 02 00     .-...-...-...-..
   1c310:	d9 2d 02 00 d9 2d 02 00 d9 2d 02 00 d9 2d 02 00     .-...-...-...-..
   1c320:	d9 2d 02 00 d9 2d 02 00 d9 2d 02 00 d9 2d 02 00     .-...-...-...-..
   1c330:	d9 2d 02 00 d9 2d 02 00 d9 2d 02 00 d9 2d 02 00     .-...-...-...-..
   1c340:	d9 2d 02 00                                         .-..

0001c344 <_vector_end>:
	...

0001c400 <m_firmware_info>:
   1c400:	de e6 1e 28 4c bb ce 8f 02 5b 00 00 3c 00 00 00     ...(L....[..<...
   1c410:	18 0a 03 00 01 00 00 00 00 c2 01 00 00 c2 01 00     ................
   1c420:	ff ff 02 91 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

Disassembly of section text:

0001c440 <__aeabi_drsub>:
   1c440:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1c444:	e002      	b.n	1c44c <__adddf3>
   1c446:	bf00      	nop

0001c448 <__aeabi_dsub>:
   1c448:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001c44c <__adddf3>:
   1c44c:	b530      	push	{r4, r5, lr}
   1c44e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1c452:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1c456:	ea94 0f05 	teq	r4, r5
   1c45a:	bf08      	it	eq
   1c45c:	ea90 0f02 	teqeq	r0, r2
   1c460:	bf1f      	itttt	ne
   1c462:	ea54 0c00 	orrsne.w	ip, r4, r0
   1c466:	ea55 0c02 	orrsne.w	ip, r5, r2
   1c46a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1c46e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1c472:	f000 80e2 	beq.w	1c63a <__adddf3+0x1ee>
   1c476:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1c47a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1c47e:	bfb8      	it	lt
   1c480:	426d      	neglt	r5, r5
   1c482:	dd0c      	ble.n	1c49e <__adddf3+0x52>
   1c484:	442c      	add	r4, r5
   1c486:	ea80 0202 	eor.w	r2, r0, r2
   1c48a:	ea81 0303 	eor.w	r3, r1, r3
   1c48e:	ea82 0000 	eor.w	r0, r2, r0
   1c492:	ea83 0101 	eor.w	r1, r3, r1
   1c496:	ea80 0202 	eor.w	r2, r0, r2
   1c49a:	ea81 0303 	eor.w	r3, r1, r3
   1c49e:	2d36      	cmp	r5, #54	; 0x36
   1c4a0:	bf88      	it	hi
   1c4a2:	bd30      	pophi	{r4, r5, pc}
   1c4a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1c4a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1c4ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1c4b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1c4b4:	d002      	beq.n	1c4bc <__adddf3+0x70>
   1c4b6:	4240      	negs	r0, r0
   1c4b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c4bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1c4c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1c4c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1c4c8:	d002      	beq.n	1c4d0 <__adddf3+0x84>
   1c4ca:	4252      	negs	r2, r2
   1c4cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c4d0:	ea94 0f05 	teq	r4, r5
   1c4d4:	f000 80a7 	beq.w	1c626 <__adddf3+0x1da>
   1c4d8:	f1a4 0401 	sub.w	r4, r4, #1
   1c4dc:	f1d5 0e20 	rsbs	lr, r5, #32
   1c4e0:	db0d      	blt.n	1c4fe <__adddf3+0xb2>
   1c4e2:	fa02 fc0e 	lsl.w	ip, r2, lr
   1c4e6:	fa22 f205 	lsr.w	r2, r2, r5
   1c4ea:	1880      	adds	r0, r0, r2
   1c4ec:	f141 0100 	adc.w	r1, r1, #0
   1c4f0:	fa03 f20e 	lsl.w	r2, r3, lr
   1c4f4:	1880      	adds	r0, r0, r2
   1c4f6:	fa43 f305 	asr.w	r3, r3, r5
   1c4fa:	4159      	adcs	r1, r3
   1c4fc:	e00e      	b.n	1c51c <__adddf3+0xd0>
   1c4fe:	f1a5 0520 	sub.w	r5, r5, #32
   1c502:	f10e 0e20 	add.w	lr, lr, #32
   1c506:	2a01      	cmp	r2, #1
   1c508:	fa03 fc0e 	lsl.w	ip, r3, lr
   1c50c:	bf28      	it	cs
   1c50e:	f04c 0c02 	orrcs.w	ip, ip, #2
   1c512:	fa43 f305 	asr.w	r3, r3, r5
   1c516:	18c0      	adds	r0, r0, r3
   1c518:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1c51c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c520:	d507      	bpl.n	1c532 <__adddf3+0xe6>
   1c522:	f04f 0e00 	mov.w	lr, #0
   1c526:	f1dc 0c00 	rsbs	ip, ip, #0
   1c52a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1c52e:	eb6e 0101 	sbc.w	r1, lr, r1
   1c532:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1c536:	d31b      	bcc.n	1c570 <__adddf3+0x124>
   1c538:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1c53c:	d30c      	bcc.n	1c558 <__adddf3+0x10c>
   1c53e:	0849      	lsrs	r1, r1, #1
   1c540:	ea5f 0030 	movs.w	r0, r0, rrx
   1c544:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1c548:	f104 0401 	add.w	r4, r4, #1
   1c54c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1c550:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1c554:	f080 809a 	bcs.w	1c68c <__adddf3+0x240>
   1c558:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1c55c:	bf08      	it	eq
   1c55e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1c562:	f150 0000 	adcs.w	r0, r0, #0
   1c566:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1c56a:	ea41 0105 	orr.w	r1, r1, r5
   1c56e:	bd30      	pop	{r4, r5, pc}
   1c570:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1c574:	4140      	adcs	r0, r0
   1c576:	eb41 0101 	adc.w	r1, r1, r1
   1c57a:	3c01      	subs	r4, #1
   1c57c:	bf28      	it	cs
   1c57e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   1c582:	d2e9      	bcs.n	1c558 <__adddf3+0x10c>
   1c584:	f091 0f00 	teq	r1, #0
   1c588:	bf04      	itt	eq
   1c58a:	4601      	moveq	r1, r0
   1c58c:	2000      	moveq	r0, #0
   1c58e:	fab1 f381 	clz	r3, r1
   1c592:	bf08      	it	eq
   1c594:	3320      	addeq	r3, #32
   1c596:	f1a3 030b 	sub.w	r3, r3, #11
   1c59a:	f1b3 0220 	subs.w	r2, r3, #32
   1c59e:	da0c      	bge.n	1c5ba <__adddf3+0x16e>
   1c5a0:	320c      	adds	r2, #12
   1c5a2:	dd08      	ble.n	1c5b6 <__adddf3+0x16a>
   1c5a4:	f102 0c14 	add.w	ip, r2, #20
   1c5a8:	f1c2 020c 	rsb	r2, r2, #12
   1c5ac:	fa01 f00c 	lsl.w	r0, r1, ip
   1c5b0:	fa21 f102 	lsr.w	r1, r1, r2
   1c5b4:	e00c      	b.n	1c5d0 <__adddf3+0x184>
   1c5b6:	f102 0214 	add.w	r2, r2, #20
   1c5ba:	bfd8      	it	le
   1c5bc:	f1c2 0c20 	rsble	ip, r2, #32
   1c5c0:	fa01 f102 	lsl.w	r1, r1, r2
   1c5c4:	fa20 fc0c 	lsr.w	ip, r0, ip
   1c5c8:	bfdc      	itt	le
   1c5ca:	ea41 010c 	orrle.w	r1, r1, ip
   1c5ce:	4090      	lslle	r0, r2
   1c5d0:	1ae4      	subs	r4, r4, r3
   1c5d2:	bfa2      	ittt	ge
   1c5d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1c5d8:	4329      	orrge	r1, r5
   1c5da:	bd30      	popge	{r4, r5, pc}
   1c5dc:	ea6f 0404 	mvn.w	r4, r4
   1c5e0:	3c1f      	subs	r4, #31
   1c5e2:	da1c      	bge.n	1c61e <__adddf3+0x1d2>
   1c5e4:	340c      	adds	r4, #12
   1c5e6:	dc0e      	bgt.n	1c606 <__adddf3+0x1ba>
   1c5e8:	f104 0414 	add.w	r4, r4, #20
   1c5ec:	f1c4 0220 	rsb	r2, r4, #32
   1c5f0:	fa20 f004 	lsr.w	r0, r0, r4
   1c5f4:	fa01 f302 	lsl.w	r3, r1, r2
   1c5f8:	ea40 0003 	orr.w	r0, r0, r3
   1c5fc:	fa21 f304 	lsr.w	r3, r1, r4
   1c600:	ea45 0103 	orr.w	r1, r5, r3
   1c604:	bd30      	pop	{r4, r5, pc}
   1c606:	f1c4 040c 	rsb	r4, r4, #12
   1c60a:	f1c4 0220 	rsb	r2, r4, #32
   1c60e:	fa20 f002 	lsr.w	r0, r0, r2
   1c612:	fa01 f304 	lsl.w	r3, r1, r4
   1c616:	ea40 0003 	orr.w	r0, r0, r3
   1c61a:	4629      	mov	r1, r5
   1c61c:	bd30      	pop	{r4, r5, pc}
   1c61e:	fa21 f004 	lsr.w	r0, r1, r4
   1c622:	4629      	mov	r1, r5
   1c624:	bd30      	pop	{r4, r5, pc}
   1c626:	f094 0f00 	teq	r4, #0
   1c62a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1c62e:	bf06      	itte	eq
   1c630:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1c634:	3401      	addeq	r4, #1
   1c636:	3d01      	subne	r5, #1
   1c638:	e74e      	b.n	1c4d8 <__adddf3+0x8c>
   1c63a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1c63e:	bf18      	it	ne
   1c640:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1c644:	d029      	beq.n	1c69a <__adddf3+0x24e>
   1c646:	ea94 0f05 	teq	r4, r5
   1c64a:	bf08      	it	eq
   1c64c:	ea90 0f02 	teqeq	r0, r2
   1c650:	d005      	beq.n	1c65e <__adddf3+0x212>
   1c652:	ea54 0c00 	orrs.w	ip, r4, r0
   1c656:	bf04      	itt	eq
   1c658:	4619      	moveq	r1, r3
   1c65a:	4610      	moveq	r0, r2
   1c65c:	bd30      	pop	{r4, r5, pc}
   1c65e:	ea91 0f03 	teq	r1, r3
   1c662:	bf1e      	ittt	ne
   1c664:	2100      	movne	r1, #0
   1c666:	2000      	movne	r0, #0
   1c668:	bd30      	popne	{r4, r5, pc}
   1c66a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1c66e:	d105      	bne.n	1c67c <__adddf3+0x230>
   1c670:	0040      	lsls	r0, r0, #1
   1c672:	4149      	adcs	r1, r1
   1c674:	bf28      	it	cs
   1c676:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1c67a:	bd30      	pop	{r4, r5, pc}
   1c67c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1c680:	bf3c      	itt	cc
   1c682:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1c686:	bd30      	popcc	{r4, r5, pc}
   1c688:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c68c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1c690:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1c694:	f04f 0000 	mov.w	r0, #0
   1c698:	bd30      	pop	{r4, r5, pc}
   1c69a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1c69e:	bf1a      	itte	ne
   1c6a0:	4619      	movne	r1, r3
   1c6a2:	4610      	movne	r0, r2
   1c6a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1c6a8:	bf1c      	itt	ne
   1c6aa:	460b      	movne	r3, r1
   1c6ac:	4602      	movne	r2, r0
   1c6ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1c6b2:	bf06      	itte	eq
   1c6b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1c6b8:	ea91 0f03 	teqeq	r1, r3
   1c6bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1c6c0:	bd30      	pop	{r4, r5, pc}
   1c6c2:	bf00      	nop

0001c6c4 <__aeabi_ui2d>:
   1c6c4:	f090 0f00 	teq	r0, #0
   1c6c8:	bf04      	itt	eq
   1c6ca:	2100      	moveq	r1, #0
   1c6cc:	4770      	bxeq	lr
   1c6ce:	b530      	push	{r4, r5, lr}
   1c6d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c6d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c6d8:	f04f 0500 	mov.w	r5, #0
   1c6dc:	f04f 0100 	mov.w	r1, #0
   1c6e0:	e750      	b.n	1c584 <__adddf3+0x138>
   1c6e2:	bf00      	nop

0001c6e4 <__aeabi_i2d>:
   1c6e4:	f090 0f00 	teq	r0, #0
   1c6e8:	bf04      	itt	eq
   1c6ea:	2100      	moveq	r1, #0
   1c6ec:	4770      	bxeq	lr
   1c6ee:	b530      	push	{r4, r5, lr}
   1c6f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c6f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c6f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1c6fc:	bf48      	it	mi
   1c6fe:	4240      	negmi	r0, r0
   1c700:	f04f 0100 	mov.w	r1, #0
   1c704:	e73e      	b.n	1c584 <__adddf3+0x138>
   1c706:	bf00      	nop

0001c708 <__aeabi_f2d>:
   1c708:	0042      	lsls	r2, r0, #1
   1c70a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1c70e:	ea4f 0131 	mov.w	r1, r1, rrx
   1c712:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1c716:	bf1f      	itttt	ne
   1c718:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1c71c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1c720:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1c724:	4770      	bxne	lr
   1c726:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1c72a:	bf08      	it	eq
   1c72c:	4770      	bxeq	lr
   1c72e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1c732:	bf04      	itt	eq
   1c734:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   1c738:	4770      	bxeq	lr
   1c73a:	b530      	push	{r4, r5, lr}
   1c73c:	f44f 7460 	mov.w	r4, #896	; 0x380
   1c740:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1c748:	e71c      	b.n	1c584 <__adddf3+0x138>
   1c74a:	bf00      	nop

0001c74c <__aeabi_ul2d>:
   1c74c:	ea50 0201 	orrs.w	r2, r0, r1
   1c750:	bf08      	it	eq
   1c752:	4770      	bxeq	lr
   1c754:	b530      	push	{r4, r5, lr}
   1c756:	f04f 0500 	mov.w	r5, #0
   1c75a:	e00a      	b.n	1c772 <__aeabi_l2d+0x16>

0001c75c <__aeabi_l2d>:
   1c75c:	ea50 0201 	orrs.w	r2, r0, r1
   1c760:	bf08      	it	eq
   1c762:	4770      	bxeq	lr
   1c764:	b530      	push	{r4, r5, lr}
   1c766:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1c76a:	d502      	bpl.n	1c772 <__aeabi_l2d+0x16>
   1c76c:	4240      	negs	r0, r0
   1c76e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c772:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c776:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c77a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1c77e:	f43f aed8 	beq.w	1c532 <__adddf3+0xe6>
   1c782:	f04f 0203 	mov.w	r2, #3
   1c786:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1c78a:	bf18      	it	ne
   1c78c:	3203      	addne	r2, #3
   1c78e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1c792:	bf18      	it	ne
   1c794:	3203      	addne	r2, #3
   1c796:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1c79a:	f1c2 0320 	rsb	r3, r2, #32
   1c79e:	fa00 fc03 	lsl.w	ip, r0, r3
   1c7a2:	fa20 f002 	lsr.w	r0, r0, r2
   1c7a6:	fa01 fe03 	lsl.w	lr, r1, r3
   1c7aa:	ea40 000e 	orr.w	r0, r0, lr
   1c7ae:	fa21 f102 	lsr.w	r1, r1, r2
   1c7b2:	4414      	add	r4, r2
   1c7b4:	e6bd      	b.n	1c532 <__adddf3+0xe6>
   1c7b6:	bf00      	nop

0001c7b8 <__aeabi_dmul>:
   1c7b8:	b570      	push	{r4, r5, r6, lr}
   1c7ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1c7be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1c7c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1c7c6:	bf1d      	ittte	ne
   1c7c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1c7cc:	ea94 0f0c 	teqne	r4, ip
   1c7d0:	ea95 0f0c 	teqne	r5, ip
   1c7d4:	f000 f8de 	bleq	1c994 <__aeabi_dmul+0x1dc>
   1c7d8:	442c      	add	r4, r5
   1c7da:	ea81 0603 	eor.w	r6, r1, r3
   1c7de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1c7e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1c7e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1c7ea:	bf18      	it	ne
   1c7ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1c7f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c7f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1c7f8:	d038      	beq.n	1c86c <__aeabi_dmul+0xb4>
   1c7fa:	fba0 ce02 	umull	ip, lr, r0, r2
   1c7fe:	f04f 0500 	mov.w	r5, #0
   1c802:	fbe1 e502 	umlal	lr, r5, r1, r2
   1c806:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1c80a:	fbe0 e503 	umlal	lr, r5, r0, r3
   1c80e:	f04f 0600 	mov.w	r6, #0
   1c812:	fbe1 5603 	umlal	r5, r6, r1, r3
   1c816:	f09c 0f00 	teq	ip, #0
   1c81a:	bf18      	it	ne
   1c81c:	f04e 0e01 	orrne.w	lr, lr, #1
   1c820:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1c824:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1c828:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1c82c:	d204      	bcs.n	1c838 <__aeabi_dmul+0x80>
   1c82e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1c832:	416d      	adcs	r5, r5
   1c834:	eb46 0606 	adc.w	r6, r6, r6
   1c838:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1c83c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1c840:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1c844:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1c848:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1c84c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1c850:	bf88      	it	hi
   1c852:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1c856:	d81e      	bhi.n	1c896 <__aeabi_dmul+0xde>
   1c858:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1c85c:	bf08      	it	eq
   1c85e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1c862:	f150 0000 	adcs.w	r0, r0, #0
   1c866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1c86a:	bd70      	pop	{r4, r5, r6, pc}
   1c86c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1c870:	ea46 0101 	orr.w	r1, r6, r1
   1c874:	ea40 0002 	orr.w	r0, r0, r2
   1c878:	ea81 0103 	eor.w	r1, r1, r3
   1c87c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1c880:	bfc2      	ittt	gt
   1c882:	ebd4 050c 	rsbsgt	r5, r4, ip
   1c886:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1c88a:	bd70      	popgt	{r4, r5, r6, pc}
   1c88c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c890:	f04f 0e00 	mov.w	lr, #0
   1c894:	3c01      	subs	r4, #1
   1c896:	f300 80ab 	bgt.w	1c9f0 <__aeabi_dmul+0x238>
   1c89a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1c89e:	bfde      	ittt	le
   1c8a0:	2000      	movle	r0, #0
   1c8a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1c8a6:	bd70      	pople	{r4, r5, r6, pc}
   1c8a8:	f1c4 0400 	rsb	r4, r4, #0
   1c8ac:	3c20      	subs	r4, #32
   1c8ae:	da35      	bge.n	1c91c <__aeabi_dmul+0x164>
   1c8b0:	340c      	adds	r4, #12
   1c8b2:	dc1b      	bgt.n	1c8ec <__aeabi_dmul+0x134>
   1c8b4:	f104 0414 	add.w	r4, r4, #20
   1c8b8:	f1c4 0520 	rsb	r5, r4, #32
   1c8bc:	fa00 f305 	lsl.w	r3, r0, r5
   1c8c0:	fa20 f004 	lsr.w	r0, r0, r4
   1c8c4:	fa01 f205 	lsl.w	r2, r1, r5
   1c8c8:	ea40 0002 	orr.w	r0, r0, r2
   1c8cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1c8d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1c8d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1c8d8:	fa21 f604 	lsr.w	r6, r1, r4
   1c8dc:	eb42 0106 	adc.w	r1, r2, r6
   1c8e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c8e4:	bf08      	it	eq
   1c8e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c8ea:	bd70      	pop	{r4, r5, r6, pc}
   1c8ec:	f1c4 040c 	rsb	r4, r4, #12
   1c8f0:	f1c4 0520 	rsb	r5, r4, #32
   1c8f4:	fa00 f304 	lsl.w	r3, r0, r4
   1c8f8:	fa20 f005 	lsr.w	r0, r0, r5
   1c8fc:	fa01 f204 	lsl.w	r2, r1, r4
   1c900:	ea40 0002 	orr.w	r0, r0, r2
   1c904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c908:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1c90c:	f141 0100 	adc.w	r1, r1, #0
   1c910:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c914:	bf08      	it	eq
   1c916:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c91a:	bd70      	pop	{r4, r5, r6, pc}
   1c91c:	f1c4 0520 	rsb	r5, r4, #32
   1c920:	fa00 f205 	lsl.w	r2, r0, r5
   1c924:	ea4e 0e02 	orr.w	lr, lr, r2
   1c928:	fa20 f304 	lsr.w	r3, r0, r4
   1c92c:	fa01 f205 	lsl.w	r2, r1, r5
   1c930:	ea43 0302 	orr.w	r3, r3, r2
   1c934:	fa21 f004 	lsr.w	r0, r1, r4
   1c938:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c93c:	fa21 f204 	lsr.w	r2, r1, r4
   1c940:	ea20 0002 	bic.w	r0, r0, r2
   1c944:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1c948:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c94c:	bf08      	it	eq
   1c94e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c952:	bd70      	pop	{r4, r5, r6, pc}
   1c954:	f094 0f00 	teq	r4, #0
   1c958:	d10f      	bne.n	1c97a <__aeabi_dmul+0x1c2>
   1c95a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1c95e:	0040      	lsls	r0, r0, #1
   1c960:	eb41 0101 	adc.w	r1, r1, r1
   1c964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1c968:	bf08      	it	eq
   1c96a:	3c01      	subeq	r4, #1
   1c96c:	d0f7      	beq.n	1c95e <__aeabi_dmul+0x1a6>
   1c96e:	ea41 0106 	orr.w	r1, r1, r6
   1c972:	f095 0f00 	teq	r5, #0
   1c976:	bf18      	it	ne
   1c978:	4770      	bxne	lr
   1c97a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1c97e:	0052      	lsls	r2, r2, #1
   1c980:	eb43 0303 	adc.w	r3, r3, r3
   1c984:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1c988:	bf08      	it	eq
   1c98a:	3d01      	subeq	r5, #1
   1c98c:	d0f7      	beq.n	1c97e <__aeabi_dmul+0x1c6>
   1c98e:	ea43 0306 	orr.w	r3, r3, r6
   1c992:	4770      	bx	lr
   1c994:	ea94 0f0c 	teq	r4, ip
   1c998:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1c99c:	bf18      	it	ne
   1c99e:	ea95 0f0c 	teqne	r5, ip
   1c9a2:	d00c      	beq.n	1c9be <__aeabi_dmul+0x206>
   1c9a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1c9a8:	bf18      	it	ne
   1c9aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1c9ae:	d1d1      	bne.n	1c954 <__aeabi_dmul+0x19c>
   1c9b0:	ea81 0103 	eor.w	r1, r1, r3
   1c9b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c9b8:	f04f 0000 	mov.w	r0, #0
   1c9bc:	bd70      	pop	{r4, r5, r6, pc}
   1c9be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1c9c2:	bf06      	itte	eq
   1c9c4:	4610      	moveq	r0, r2
   1c9c6:	4619      	moveq	r1, r3
   1c9c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1c9cc:	d019      	beq.n	1ca02 <__aeabi_dmul+0x24a>
   1c9ce:	ea94 0f0c 	teq	r4, ip
   1c9d2:	d102      	bne.n	1c9da <__aeabi_dmul+0x222>
   1c9d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1c9d8:	d113      	bne.n	1ca02 <__aeabi_dmul+0x24a>
   1c9da:	ea95 0f0c 	teq	r5, ip
   1c9de:	d105      	bne.n	1c9ec <__aeabi_dmul+0x234>
   1c9e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1c9e4:	bf1c      	itt	ne
   1c9e6:	4610      	movne	r0, r2
   1c9e8:	4619      	movne	r1, r3
   1c9ea:	d10a      	bne.n	1ca02 <__aeabi_dmul+0x24a>
   1c9ec:	ea81 0103 	eor.w	r1, r1, r3
   1c9f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c9f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1c9f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1c9fc:	f04f 0000 	mov.w	r0, #0
   1ca00:	bd70      	pop	{r4, r5, r6, pc}
   1ca02:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1ca06:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1ca0a:	bd70      	pop	{r4, r5, r6, pc}

0001ca0c <__aeabi_ddiv>:
   1ca0c:	b570      	push	{r4, r5, r6, lr}
   1ca0e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1ca12:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1ca16:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1ca1a:	bf1d      	ittte	ne
   1ca1c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1ca20:	ea94 0f0c 	teqne	r4, ip
   1ca24:	ea95 0f0c 	teqne	r5, ip
   1ca28:	f000 f8a7 	bleq	1cb7a <__aeabi_ddiv+0x16e>
   1ca2c:	eba4 0405 	sub.w	r4, r4, r5
   1ca30:	ea81 0e03 	eor.w	lr, r1, r3
   1ca34:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1ca38:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1ca3c:	f000 8088 	beq.w	1cb50 <__aeabi_ddiv+0x144>
   1ca40:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1ca44:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1ca48:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1ca4c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1ca50:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1ca54:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1ca58:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1ca5c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1ca60:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1ca64:	429d      	cmp	r5, r3
   1ca66:	bf08      	it	eq
   1ca68:	4296      	cmpeq	r6, r2
   1ca6a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1ca6e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1ca72:	d202      	bcs.n	1ca7a <__aeabi_ddiv+0x6e>
   1ca74:	085b      	lsrs	r3, r3, #1
   1ca76:	ea4f 0232 	mov.w	r2, r2, rrx
   1ca7a:	1ab6      	subs	r6, r6, r2
   1ca7c:	eb65 0503 	sbc.w	r5, r5, r3
   1ca80:	085b      	lsrs	r3, r3, #1
   1ca82:	ea4f 0232 	mov.w	r2, r2, rrx
   1ca86:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1ca8a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1ca8e:	ebb6 0e02 	subs.w	lr, r6, r2
   1ca92:	eb75 0e03 	sbcs.w	lr, r5, r3
   1ca96:	bf22      	ittt	cs
   1ca98:	1ab6      	subcs	r6, r6, r2
   1ca9a:	4675      	movcs	r5, lr
   1ca9c:	ea40 000c 	orrcs.w	r0, r0, ip
   1caa0:	085b      	lsrs	r3, r3, #1
   1caa2:	ea4f 0232 	mov.w	r2, r2, rrx
   1caa6:	ebb6 0e02 	subs.w	lr, r6, r2
   1caaa:	eb75 0e03 	sbcs.w	lr, r5, r3
   1caae:	bf22      	ittt	cs
   1cab0:	1ab6      	subcs	r6, r6, r2
   1cab2:	4675      	movcs	r5, lr
   1cab4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1cab8:	085b      	lsrs	r3, r3, #1
   1caba:	ea4f 0232 	mov.w	r2, r2, rrx
   1cabe:	ebb6 0e02 	subs.w	lr, r6, r2
   1cac2:	eb75 0e03 	sbcs.w	lr, r5, r3
   1cac6:	bf22      	ittt	cs
   1cac8:	1ab6      	subcs	r6, r6, r2
   1caca:	4675      	movcs	r5, lr
   1cacc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1cad0:	085b      	lsrs	r3, r3, #1
   1cad2:	ea4f 0232 	mov.w	r2, r2, rrx
   1cad6:	ebb6 0e02 	subs.w	lr, r6, r2
   1cada:	eb75 0e03 	sbcs.w	lr, r5, r3
   1cade:	bf22      	ittt	cs
   1cae0:	1ab6      	subcs	r6, r6, r2
   1cae2:	4675      	movcs	r5, lr
   1cae4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1cae8:	ea55 0e06 	orrs.w	lr, r5, r6
   1caec:	d018      	beq.n	1cb20 <__aeabi_ddiv+0x114>
   1caee:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1caf2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1caf6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1cafa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1cafe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1cb02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1cb06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1cb0a:	d1c0      	bne.n	1ca8e <__aeabi_ddiv+0x82>
   1cb0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1cb10:	d10b      	bne.n	1cb2a <__aeabi_ddiv+0x11e>
   1cb12:	ea41 0100 	orr.w	r1, r1, r0
   1cb16:	f04f 0000 	mov.w	r0, #0
   1cb1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1cb1e:	e7b6      	b.n	1ca8e <__aeabi_ddiv+0x82>
   1cb20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1cb24:	bf04      	itt	eq
   1cb26:	4301      	orreq	r1, r0
   1cb28:	2000      	moveq	r0, #0
   1cb2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1cb2e:	bf88      	it	hi
   1cb30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1cb34:	f63f aeaf 	bhi.w	1c896 <__aeabi_dmul+0xde>
   1cb38:	ebb5 0c03 	subs.w	ip, r5, r3
   1cb3c:	bf04      	itt	eq
   1cb3e:	ebb6 0c02 	subseq.w	ip, r6, r2
   1cb42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1cb46:	f150 0000 	adcs.w	r0, r0, #0
   1cb4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1cb4e:	bd70      	pop	{r4, r5, r6, pc}
   1cb50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1cb54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1cb58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1cb5c:	bfc2      	ittt	gt
   1cb5e:	ebd4 050c 	rsbsgt	r5, r4, ip
   1cb62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1cb66:	bd70      	popgt	{r4, r5, r6, pc}
   1cb68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1cb6c:	f04f 0e00 	mov.w	lr, #0
   1cb70:	3c01      	subs	r4, #1
   1cb72:	e690      	b.n	1c896 <__aeabi_dmul+0xde>
   1cb74:	ea45 0e06 	orr.w	lr, r5, r6
   1cb78:	e68d      	b.n	1c896 <__aeabi_dmul+0xde>
   1cb7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1cb7e:	ea94 0f0c 	teq	r4, ip
   1cb82:	bf08      	it	eq
   1cb84:	ea95 0f0c 	teqeq	r5, ip
   1cb88:	f43f af3b 	beq.w	1ca02 <__aeabi_dmul+0x24a>
   1cb8c:	ea94 0f0c 	teq	r4, ip
   1cb90:	d10a      	bne.n	1cba8 <__aeabi_ddiv+0x19c>
   1cb92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1cb96:	f47f af34 	bne.w	1ca02 <__aeabi_dmul+0x24a>
   1cb9a:	ea95 0f0c 	teq	r5, ip
   1cb9e:	f47f af25 	bne.w	1c9ec <__aeabi_dmul+0x234>
   1cba2:	4610      	mov	r0, r2
   1cba4:	4619      	mov	r1, r3
   1cba6:	e72c      	b.n	1ca02 <__aeabi_dmul+0x24a>
   1cba8:	ea95 0f0c 	teq	r5, ip
   1cbac:	d106      	bne.n	1cbbc <__aeabi_ddiv+0x1b0>
   1cbae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1cbb2:	f43f aefd 	beq.w	1c9b0 <__aeabi_dmul+0x1f8>
   1cbb6:	4610      	mov	r0, r2
   1cbb8:	4619      	mov	r1, r3
   1cbba:	e722      	b.n	1ca02 <__aeabi_dmul+0x24a>
   1cbbc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1cbc0:	bf18      	it	ne
   1cbc2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1cbc6:	f47f aec5 	bne.w	1c954 <__aeabi_dmul+0x19c>
   1cbca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1cbce:	f47f af0d 	bne.w	1c9ec <__aeabi_dmul+0x234>
   1cbd2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1cbd6:	f47f aeeb 	bne.w	1c9b0 <__aeabi_dmul+0x1f8>
   1cbda:	e712      	b.n	1ca02 <__aeabi_dmul+0x24a>

0001cbdc <__gedf2>:
   1cbdc:	f04f 3cff 	mov.w	ip, #4294967295
   1cbe0:	e006      	b.n	1cbf0 <__cmpdf2+0x4>
   1cbe2:	bf00      	nop

0001cbe4 <__ledf2>:
   1cbe4:	f04f 0c01 	mov.w	ip, #1
   1cbe8:	e002      	b.n	1cbf0 <__cmpdf2+0x4>
   1cbea:	bf00      	nop

0001cbec <__cmpdf2>:
   1cbec:	f04f 0c01 	mov.w	ip, #1
   1cbf0:	f84d cd04 	str.w	ip, [sp, #-4]!
   1cbf4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1cbf8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cbfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cc00:	bf18      	it	ne
   1cc02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1cc06:	d01b      	beq.n	1cc40 <__cmpdf2+0x54>
   1cc08:	b001      	add	sp, #4
   1cc0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1cc0e:	bf0c      	ite	eq
   1cc10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1cc14:	ea91 0f03 	teqne	r1, r3
   1cc18:	bf02      	ittt	eq
   1cc1a:	ea90 0f02 	teqeq	r0, r2
   1cc1e:	2000      	moveq	r0, #0
   1cc20:	4770      	bxeq	lr
   1cc22:	f110 0f00 	cmn.w	r0, #0
   1cc26:	ea91 0f03 	teq	r1, r3
   1cc2a:	bf58      	it	pl
   1cc2c:	4299      	cmppl	r1, r3
   1cc2e:	bf08      	it	eq
   1cc30:	4290      	cmpeq	r0, r2
   1cc32:	bf2c      	ite	cs
   1cc34:	17d8      	asrcs	r0, r3, #31
   1cc36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1cc3a:	f040 0001 	orr.w	r0, r0, #1
   1cc3e:	4770      	bx	lr
   1cc40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1cc44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cc48:	d102      	bne.n	1cc50 <__cmpdf2+0x64>
   1cc4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1cc4e:	d107      	bne.n	1cc60 <__cmpdf2+0x74>
   1cc50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cc54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cc58:	d1d6      	bne.n	1cc08 <__cmpdf2+0x1c>
   1cc5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1cc5e:	d0d3      	beq.n	1cc08 <__cmpdf2+0x1c>
   1cc60:	f85d 0b04 	ldr.w	r0, [sp], #4
   1cc64:	4770      	bx	lr
   1cc66:	bf00      	nop

0001cc68 <__aeabi_cdrcmple>:
   1cc68:	4684      	mov	ip, r0
   1cc6a:	4610      	mov	r0, r2
   1cc6c:	4662      	mov	r2, ip
   1cc6e:	468c      	mov	ip, r1
   1cc70:	4619      	mov	r1, r3
   1cc72:	4663      	mov	r3, ip
   1cc74:	e000      	b.n	1cc78 <__aeabi_cdcmpeq>
   1cc76:	bf00      	nop

0001cc78 <__aeabi_cdcmpeq>:
   1cc78:	b501      	push	{r0, lr}
   1cc7a:	f7ff ffb7 	bl	1cbec <__cmpdf2>
   1cc7e:	2800      	cmp	r0, #0
   1cc80:	bf48      	it	mi
   1cc82:	f110 0f00 	cmnmi.w	r0, #0
   1cc86:	bd01      	pop	{r0, pc}

0001cc88 <__aeabi_dcmpeq>:
   1cc88:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cc8c:	f7ff fff4 	bl	1cc78 <__aeabi_cdcmpeq>
   1cc90:	bf0c      	ite	eq
   1cc92:	2001      	moveq	r0, #1
   1cc94:	2000      	movne	r0, #0
   1cc96:	f85d fb08 	ldr.w	pc, [sp], #8
   1cc9a:	bf00      	nop

0001cc9c <__aeabi_dcmplt>:
   1cc9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cca0:	f7ff ffea 	bl	1cc78 <__aeabi_cdcmpeq>
   1cca4:	bf34      	ite	cc
   1cca6:	2001      	movcc	r0, #1
   1cca8:	2000      	movcs	r0, #0
   1ccaa:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccae:	bf00      	nop

0001ccb0 <__aeabi_dcmple>:
   1ccb0:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ccb4:	f7ff ffe0 	bl	1cc78 <__aeabi_cdcmpeq>
   1ccb8:	bf94      	ite	ls
   1ccba:	2001      	movls	r0, #1
   1ccbc:	2000      	movhi	r0, #0
   1ccbe:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccc2:	bf00      	nop

0001ccc4 <__aeabi_dcmpge>:
   1ccc4:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ccc8:	f7ff ffce 	bl	1cc68 <__aeabi_cdrcmple>
   1cccc:	bf94      	ite	ls
   1ccce:	2001      	movls	r0, #1
   1ccd0:	2000      	movhi	r0, #0
   1ccd2:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccd6:	bf00      	nop

0001ccd8 <__aeabi_dcmpgt>:
   1ccd8:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ccdc:	f7ff ffc4 	bl	1cc68 <__aeabi_cdrcmple>
   1cce0:	bf34      	ite	cc
   1cce2:	2001      	movcc	r0, #1
   1cce4:	2000      	movcs	r0, #0
   1cce6:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccea:	bf00      	nop

0001ccec <__aeabi_dcmpun>:
   1ccec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1ccf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1ccf4:	d102      	bne.n	1ccfc <__aeabi_dcmpun+0x10>
   1ccf6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1ccfa:	d10a      	bne.n	1cd12 <__aeabi_dcmpun+0x26>
   1ccfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cd00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cd04:	d102      	bne.n	1cd0c <__aeabi_dcmpun+0x20>
   1cd06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1cd0a:	d102      	bne.n	1cd12 <__aeabi_dcmpun+0x26>
   1cd0c:	f04f 0000 	mov.w	r0, #0
   1cd10:	4770      	bx	lr
   1cd12:	f04f 0001 	mov.w	r0, #1
   1cd16:	4770      	bx	lr

0001cd18 <__aeabi_d2iz>:
   1cd18:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1cd1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1cd20:	d215      	bcs.n	1cd4e <__aeabi_d2iz+0x36>
   1cd22:	d511      	bpl.n	1cd48 <__aeabi_d2iz+0x30>
   1cd24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1cd28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1cd2c:	d912      	bls.n	1cd54 <__aeabi_d2iz+0x3c>
   1cd2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1cd32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1cd36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1cd3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1cd3e:	fa23 f002 	lsr.w	r0, r3, r2
   1cd42:	bf18      	it	ne
   1cd44:	4240      	negne	r0, r0
   1cd46:	4770      	bx	lr
   1cd48:	f04f 0000 	mov.w	r0, #0
   1cd4c:	4770      	bx	lr
   1cd4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1cd52:	d105      	bne.n	1cd60 <__aeabi_d2iz+0x48>
   1cd54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1cd58:	bf08      	it	eq
   1cd5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1cd5e:	4770      	bx	lr
   1cd60:	f04f 0000 	mov.w	r0, #0
   1cd64:	4770      	bx	lr
   1cd66:	bf00      	nop

0001cd68 <__aeabi_d2uiz>:
   1cd68:	004a      	lsls	r2, r1, #1
   1cd6a:	d211      	bcs.n	1cd90 <__aeabi_d2uiz+0x28>
   1cd6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1cd70:	d211      	bcs.n	1cd96 <__aeabi_d2uiz+0x2e>
   1cd72:	d50d      	bpl.n	1cd90 <__aeabi_d2uiz+0x28>
   1cd74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1cd78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1cd7c:	d40e      	bmi.n	1cd9c <__aeabi_d2uiz+0x34>
   1cd7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1cd82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1cd86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1cd8a:	fa23 f002 	lsr.w	r0, r3, r2
   1cd8e:	4770      	bx	lr
   1cd90:	f04f 0000 	mov.w	r0, #0
   1cd94:	4770      	bx	lr
   1cd96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1cd9a:	d102      	bne.n	1cda2 <__aeabi_d2uiz+0x3a>
   1cd9c:	f04f 30ff 	mov.w	r0, #4294967295
   1cda0:	4770      	bx	lr
   1cda2:	f04f 0000 	mov.w	r0, #0
   1cda6:	4770      	bx	lr

0001cda8 <__aeabi_d2f>:
   1cda8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1cdac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   1cdb0:	bf24      	itt	cs
   1cdb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1cdb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   1cdba:	d90d      	bls.n	1cdd8 <__aeabi_d2f+0x30>
   1cdbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1cdc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   1cdc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   1cdc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1cdcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   1cdd0:	bf08      	it	eq
   1cdd2:	f020 0001 	biceq.w	r0, r0, #1
   1cdd6:	4770      	bx	lr
   1cdd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   1cddc:	d121      	bne.n	1ce22 <__aeabi_d2f+0x7a>
   1cdde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1cde2:	bfbc      	itt	lt
   1cde4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   1cde8:	4770      	bxlt	lr
   1cdea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1cdee:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1cdf2:	f1c2 0218 	rsb	r2, r2, #24
   1cdf6:	f1c2 0c20 	rsb	ip, r2, #32
   1cdfa:	fa10 f30c 	lsls.w	r3, r0, ip
   1cdfe:	fa20 f002 	lsr.w	r0, r0, r2
   1ce02:	bf18      	it	ne
   1ce04:	f040 0001 	orrne.w	r0, r0, #1
   1ce08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1ce0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   1ce10:	fa03 fc0c 	lsl.w	ip, r3, ip
   1ce14:	ea40 000c 	orr.w	r0, r0, ip
   1ce18:	fa23 f302 	lsr.w	r3, r3, r2
   1ce1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1ce20:	e7cc      	b.n	1cdbc <__aeabi_d2f+0x14>
   1ce22:	ea7f 5362 	mvns.w	r3, r2, asr #21
   1ce26:	d107      	bne.n	1ce38 <__aeabi_d2f+0x90>
   1ce28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   1ce2c:	bf1e      	ittt	ne
   1ce2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   1ce32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   1ce36:	4770      	bxne	lr
   1ce38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   1ce3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1ce40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1ce44:	4770      	bx	lr
   1ce46:	bf00      	nop

0001ce48 <__aeabi_ldivmod>:
   1ce48:	b97b      	cbnz	r3, 1ce6a <__aeabi_ldivmod+0x22>
   1ce4a:	b972      	cbnz	r2, 1ce6a <__aeabi_ldivmod+0x22>
   1ce4c:	2900      	cmp	r1, #0
   1ce4e:	bfbe      	ittt	lt
   1ce50:	2000      	movlt	r0, #0
   1ce52:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   1ce56:	e006      	blt.n	1ce66 <__aeabi_ldivmod+0x1e>
   1ce58:	bf08      	it	eq
   1ce5a:	2800      	cmpeq	r0, #0
   1ce5c:	bf1c      	itt	ne
   1ce5e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   1ce62:	f04f 30ff 	movne.w	r0, #4294967295
   1ce66:	f000 b875 	b.w	1cf54 <__aeabi_idiv0>
   1ce6a:	f1ad 0c08 	sub.w	ip, sp, #8
   1ce6e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1ce72:	2900      	cmp	r1, #0
   1ce74:	db09      	blt.n	1ce8a <__aeabi_ldivmod+0x42>
   1ce76:	2b00      	cmp	r3, #0
   1ce78:	db1a      	blt.n	1ceb0 <__aeabi_ldivmod+0x68>
   1ce7a:	f000 f884 	bl	1cf86 <__udivmoddi4>
   1ce7e:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ce82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ce86:	b004      	add	sp, #16
   1ce88:	4770      	bx	lr
   1ce8a:	4240      	negs	r0, r0
   1ce8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1ce90:	2b00      	cmp	r3, #0
   1ce92:	db1b      	blt.n	1cecc <__aeabi_ldivmod+0x84>
   1ce94:	f000 f877 	bl	1cf86 <__udivmoddi4>
   1ce98:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ce9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cea0:	b004      	add	sp, #16
   1cea2:	4240      	negs	r0, r0
   1cea4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1cea8:	4252      	negs	r2, r2
   1ceaa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1ceae:	4770      	bx	lr
   1ceb0:	4252      	negs	r2, r2
   1ceb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1ceb6:	f000 f866 	bl	1cf86 <__udivmoddi4>
   1ceba:	f8dd e004 	ldr.w	lr, [sp, #4]
   1cebe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cec2:	b004      	add	sp, #16
   1cec4:	4240      	negs	r0, r0
   1cec6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1ceca:	4770      	bx	lr
   1cecc:	4252      	negs	r2, r2
   1cece:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1ced2:	f000 f858 	bl	1cf86 <__udivmoddi4>
   1ced6:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ceda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cede:	b004      	add	sp, #16
   1cee0:	4252      	negs	r2, r2
   1cee2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1cee6:	4770      	bx	lr

0001cee8 <__aeabi_uldivmod>:
   1cee8:	b953      	cbnz	r3, 1cf00 <__aeabi_uldivmod+0x18>
   1ceea:	b94a      	cbnz	r2, 1cf00 <__aeabi_uldivmod+0x18>
   1ceec:	2900      	cmp	r1, #0
   1ceee:	bf08      	it	eq
   1cef0:	2800      	cmpeq	r0, #0
   1cef2:	bf1c      	itt	ne
   1cef4:	f04f 31ff 	movne.w	r1, #4294967295
   1cef8:	f04f 30ff 	movne.w	r0, #4294967295
   1cefc:	f000 b82a 	b.w	1cf54 <__aeabi_idiv0>
   1cf00:	f1ad 0c08 	sub.w	ip, sp, #8
   1cf04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1cf08:	f000 f83d 	bl	1cf86 <__udivmoddi4>
   1cf0c:	f8dd e004 	ldr.w	lr, [sp, #4]
   1cf10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cf14:	b004      	add	sp, #16
   1cf16:	4770      	bx	lr

0001cf18 <__aeabi_d2ulz>:
   1cf18:	b5d0      	push	{r4, r6, r7, lr}
   1cf1a:	2200      	movs	r2, #0
   1cf1c:	4b0b      	ldr	r3, [pc, #44]	; (1cf4c <__aeabi_d2ulz+0x34>)
   1cf1e:	4606      	mov	r6, r0
   1cf20:	460f      	mov	r7, r1
   1cf22:	f7ff fc49 	bl	1c7b8 <__aeabi_dmul>
   1cf26:	f7ff ff1f 	bl	1cd68 <__aeabi_d2uiz>
   1cf2a:	4604      	mov	r4, r0
   1cf2c:	f7ff fbca 	bl	1c6c4 <__aeabi_ui2d>
   1cf30:	2200      	movs	r2, #0
   1cf32:	4b07      	ldr	r3, [pc, #28]	; (1cf50 <__aeabi_d2ulz+0x38>)
   1cf34:	f7ff fc40 	bl	1c7b8 <__aeabi_dmul>
   1cf38:	4602      	mov	r2, r0
   1cf3a:	460b      	mov	r3, r1
   1cf3c:	4630      	mov	r0, r6
   1cf3e:	4639      	mov	r1, r7
   1cf40:	f7ff fa82 	bl	1c448 <__aeabi_dsub>
   1cf44:	f7ff ff10 	bl	1cd68 <__aeabi_d2uiz>
   1cf48:	4621      	mov	r1, r4
   1cf4a:	bdd0      	pop	{r4, r6, r7, pc}
   1cf4c:	3df00000 	.word	0x3df00000
   1cf50:	41f00000 	.word	0x41f00000

0001cf54 <__aeabi_idiv0>:
   1cf54:	4770      	bx	lr
   1cf56:	bf00      	nop

0001cf58 <__aeabi_d2lz>:
   1cf58:	b538      	push	{r3, r4, r5, lr}
   1cf5a:	2200      	movs	r2, #0
   1cf5c:	2300      	movs	r3, #0
   1cf5e:	4604      	mov	r4, r0
   1cf60:	460d      	mov	r5, r1
   1cf62:	f7ff fe9b 	bl	1cc9c <__aeabi_dcmplt>
   1cf66:	b928      	cbnz	r0, 1cf74 <__aeabi_d2lz+0x1c>
   1cf68:	4620      	mov	r0, r4
   1cf6a:	4629      	mov	r1, r5
   1cf6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1cf70:	f7ff bfd2 	b.w	1cf18 <__aeabi_d2ulz>
   1cf74:	4620      	mov	r0, r4
   1cf76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   1cf7a:	f7ff ffcd 	bl	1cf18 <__aeabi_d2ulz>
   1cf7e:	4240      	negs	r0, r0
   1cf80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1cf84:	bd38      	pop	{r3, r4, r5, pc}

0001cf86 <__udivmoddi4>:
   1cf86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cf8a:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1cf8c:	4688      	mov	r8, r1
   1cf8e:	468e      	mov	lr, r1
   1cf90:	4615      	mov	r5, r2
   1cf92:	4604      	mov	r4, r0
   1cf94:	4619      	mov	r1, r3
   1cf96:	2b00      	cmp	r3, #0
   1cf98:	f040 80c6 	bne.w	1d128 <__udivmoddi4+0x1a2>
   1cf9c:	4542      	cmp	r2, r8
   1cf9e:	fab2 f782 	clz	r7, r2
   1cfa2:	d946      	bls.n	1d032 <__udivmoddi4+0xac>
   1cfa4:	b14f      	cbz	r7, 1cfba <__udivmoddi4+0x34>
   1cfa6:	f1c7 0c20 	rsb	ip, r7, #32
   1cfaa:	fa08 f307 	lsl.w	r3, r8, r7
   1cfae:	40bd      	lsls	r5, r7
   1cfb0:	40bc      	lsls	r4, r7
   1cfb2:	fa20 fc0c 	lsr.w	ip, r0, ip
   1cfb6:	ea4c 0e03 	orr.w	lr, ip, r3
   1cfba:	ea4f 4815 	mov.w	r8, r5, lsr #16
   1cfbe:	fa1f fc85 	uxth.w	ip, r5
   1cfc2:	0c22      	lsrs	r2, r4, #16
   1cfc4:	fbbe f9f8 	udiv	r9, lr, r8
   1cfc8:	fb08 e319 	mls	r3, r8, r9, lr
   1cfcc:	fb09 fa0c 	mul.w	sl, r9, ip
   1cfd0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   1cfd4:	459a      	cmp	sl, r3
   1cfd6:	d928      	bls.n	1d02a <__udivmoddi4+0xa4>
   1cfd8:	18eb      	adds	r3, r5, r3
   1cfda:	f109 30ff 	add.w	r0, r9, #4294967295
   1cfde:	d204      	bcs.n	1cfea <__udivmoddi4+0x64>
   1cfe0:	459a      	cmp	sl, r3
   1cfe2:	d902      	bls.n	1cfea <__udivmoddi4+0x64>
   1cfe4:	f1a9 0002 	sub.w	r0, r9, #2
   1cfe8:	442b      	add	r3, r5
   1cfea:	eba3 030a 	sub.w	r3, r3, sl
   1cfee:	b2a4      	uxth	r4, r4
   1cff0:	fbb3 f2f8 	udiv	r2, r3, r8
   1cff4:	fb08 3312 	mls	r3, r8, r2, r3
   1cff8:	fb02 fc0c 	mul.w	ip, r2, ip
   1cffc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1d000:	45a4      	cmp	ip, r4
   1d002:	d914      	bls.n	1d02e <__udivmoddi4+0xa8>
   1d004:	192c      	adds	r4, r5, r4
   1d006:	f102 33ff 	add.w	r3, r2, #4294967295
   1d00a:	d203      	bcs.n	1d014 <__udivmoddi4+0x8e>
   1d00c:	45a4      	cmp	ip, r4
   1d00e:	d901      	bls.n	1d014 <__udivmoddi4+0x8e>
   1d010:	1e93      	subs	r3, r2, #2
   1d012:	442c      	add	r4, r5
   1d014:	eba4 040c 	sub.w	r4, r4, ip
   1d018:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   1d01c:	b11e      	cbz	r6, 1d026 <__udivmoddi4+0xa0>
   1d01e:	40fc      	lsrs	r4, r7
   1d020:	2300      	movs	r3, #0
   1d022:	6034      	str	r4, [r6, #0]
   1d024:	6073      	str	r3, [r6, #4]
   1d026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d02a:	4648      	mov	r0, r9
   1d02c:	e7dd      	b.n	1cfea <__udivmoddi4+0x64>
   1d02e:	4613      	mov	r3, r2
   1d030:	e7f0      	b.n	1d014 <__udivmoddi4+0x8e>
   1d032:	b902      	cbnz	r2, 1d036 <__udivmoddi4+0xb0>
   1d034:	deff      	udf	#255	; 0xff
   1d036:	bb8f      	cbnz	r7, 1d09c <__udivmoddi4+0x116>
   1d038:	eba8 0302 	sub.w	r3, r8, r2
   1d03c:	2101      	movs	r1, #1
   1d03e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1d042:	b2aa      	uxth	r2, r5
   1d044:	0c20      	lsrs	r0, r4, #16
   1d046:	fbb3 fcfe 	udiv	ip, r3, lr
   1d04a:	fb0e 331c 	mls	r3, lr, ip, r3
   1d04e:	fb0c f802 	mul.w	r8, ip, r2
   1d052:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   1d056:	4598      	cmp	r8, r3
   1d058:	d962      	bls.n	1d120 <__udivmoddi4+0x19a>
   1d05a:	18eb      	adds	r3, r5, r3
   1d05c:	f10c 30ff 	add.w	r0, ip, #4294967295
   1d060:	d204      	bcs.n	1d06c <__udivmoddi4+0xe6>
   1d062:	4598      	cmp	r8, r3
   1d064:	d902      	bls.n	1d06c <__udivmoddi4+0xe6>
   1d066:	f1ac 0002 	sub.w	r0, ip, #2
   1d06a:	442b      	add	r3, r5
   1d06c:	eba3 0308 	sub.w	r3, r3, r8
   1d070:	b2a4      	uxth	r4, r4
   1d072:	fbb3 fcfe 	udiv	ip, r3, lr
   1d076:	fb0e 331c 	mls	r3, lr, ip, r3
   1d07a:	fb0c f202 	mul.w	r2, ip, r2
   1d07e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1d082:	42a2      	cmp	r2, r4
   1d084:	d94e      	bls.n	1d124 <__udivmoddi4+0x19e>
   1d086:	192c      	adds	r4, r5, r4
   1d088:	f10c 33ff 	add.w	r3, ip, #4294967295
   1d08c:	d204      	bcs.n	1d098 <__udivmoddi4+0x112>
   1d08e:	42a2      	cmp	r2, r4
   1d090:	d902      	bls.n	1d098 <__udivmoddi4+0x112>
   1d092:	f1ac 0302 	sub.w	r3, ip, #2
   1d096:	442c      	add	r4, r5
   1d098:	1aa4      	subs	r4, r4, r2
   1d09a:	e7bd      	b.n	1d018 <__udivmoddi4+0x92>
   1d09c:	f1c7 0c20 	rsb	ip, r7, #32
   1d0a0:	40bd      	lsls	r5, r7
   1d0a2:	fa08 f307 	lsl.w	r3, r8, r7
   1d0a6:	40bc      	lsls	r4, r7
   1d0a8:	fa28 f90c 	lsr.w	r9, r8, ip
   1d0ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1d0b0:	fa20 fc0c 	lsr.w	ip, r0, ip
   1d0b4:	ea4c 0203 	orr.w	r2, ip, r3
   1d0b8:	b2ab      	uxth	r3, r5
   1d0ba:	fbb9 fcfe 	udiv	ip, r9, lr
   1d0be:	0c11      	lsrs	r1, r2, #16
   1d0c0:	fb0e 901c 	mls	r0, lr, ip, r9
   1d0c4:	fb0c f803 	mul.w	r8, ip, r3
   1d0c8:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
   1d0cc:	4580      	cmp	r8, r0
   1d0ce:	d923      	bls.n	1d118 <__udivmoddi4+0x192>
   1d0d0:	1828      	adds	r0, r5, r0
   1d0d2:	f10c 31ff 	add.w	r1, ip, #4294967295
   1d0d6:	d204      	bcs.n	1d0e2 <__udivmoddi4+0x15c>
   1d0d8:	4580      	cmp	r8, r0
   1d0da:	d902      	bls.n	1d0e2 <__udivmoddi4+0x15c>
   1d0dc:	f1ac 0102 	sub.w	r1, ip, #2
   1d0e0:	4428      	add	r0, r5
   1d0e2:	eba0 0008 	sub.w	r0, r0, r8
   1d0e6:	b292      	uxth	r2, r2
   1d0e8:	fbb0 fcfe 	udiv	ip, r0, lr
   1d0ec:	fb0e 001c 	mls	r0, lr, ip, r0
   1d0f0:	fb0c f803 	mul.w	r8, ip, r3
   1d0f4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
   1d0f8:	4598      	cmp	r8, r3
   1d0fa:	d90f      	bls.n	1d11c <__udivmoddi4+0x196>
   1d0fc:	18eb      	adds	r3, r5, r3
   1d0fe:	f10c 32ff 	add.w	r2, ip, #4294967295
   1d102:	d204      	bcs.n	1d10e <__udivmoddi4+0x188>
   1d104:	4598      	cmp	r8, r3
   1d106:	d902      	bls.n	1d10e <__udivmoddi4+0x188>
   1d108:	f1ac 0202 	sub.w	r2, ip, #2
   1d10c:	442b      	add	r3, r5
   1d10e:	eba3 0308 	sub.w	r3, r3, r8
   1d112:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1d116:	e792      	b.n	1d03e <__udivmoddi4+0xb8>
   1d118:	4661      	mov	r1, ip
   1d11a:	e7e2      	b.n	1d0e2 <__udivmoddi4+0x15c>
   1d11c:	4662      	mov	r2, ip
   1d11e:	e7f6      	b.n	1d10e <__udivmoddi4+0x188>
   1d120:	4660      	mov	r0, ip
   1d122:	e7a3      	b.n	1d06c <__udivmoddi4+0xe6>
   1d124:	4663      	mov	r3, ip
   1d126:	e7b7      	b.n	1d098 <__udivmoddi4+0x112>
   1d128:	4543      	cmp	r3, r8
   1d12a:	d905      	bls.n	1d138 <__udivmoddi4+0x1b2>
   1d12c:	b10e      	cbz	r6, 1d132 <__udivmoddi4+0x1ac>
   1d12e:	e9c6 0800 	strd	r0, r8, [r6]
   1d132:	2100      	movs	r1, #0
   1d134:	4608      	mov	r0, r1
   1d136:	e776      	b.n	1d026 <__udivmoddi4+0xa0>
   1d138:	fab3 fc83 	clz	ip, r3
   1d13c:	f1bc 0f00 	cmp.w	ip, #0
   1d140:	d110      	bne.n	1d164 <__udivmoddi4+0x1de>
   1d142:	4543      	cmp	r3, r8
   1d144:	d301      	bcc.n	1d14a <__udivmoddi4+0x1c4>
   1d146:	4282      	cmp	r2, r0
   1d148:	d80a      	bhi.n	1d160 <__udivmoddi4+0x1da>
   1d14a:	1a84      	subs	r4, r0, r2
   1d14c:	eb68 0303 	sbc.w	r3, r8, r3
   1d150:	2001      	movs	r0, #1
   1d152:	469e      	mov	lr, r3
   1d154:	2e00      	cmp	r6, #0
   1d156:	d068      	beq.n	1d22a <__udivmoddi4+0x2a4>
   1d158:	e9c6 4e00 	strd	r4, lr, [r6]
   1d15c:	2100      	movs	r1, #0
   1d15e:	e762      	b.n	1d026 <__udivmoddi4+0xa0>
   1d160:	4660      	mov	r0, ip
   1d162:	e7f7      	b.n	1d154 <__udivmoddi4+0x1ce>
   1d164:	f1cc 0e20 	rsb	lr, ip, #32
   1d168:	fa03 f30c 	lsl.w	r3, r3, ip
   1d16c:	fa02 f50c 	lsl.w	r5, r2, ip
   1d170:	fa00 f70c 	lsl.w	r7, r0, ip
   1d174:	fa22 f40e 	lsr.w	r4, r2, lr
   1d178:	fa28 fb0e 	lsr.w	fp, r8, lr
   1d17c:	fa20 f10e 	lsr.w	r1, r0, lr
   1d180:	431c      	orrs	r4, r3
   1d182:	fa08 f30c 	lsl.w	r3, r8, ip
   1d186:	ea4f 4914 	mov.w	r9, r4, lsr #16
   1d18a:	4319      	orrs	r1, r3
   1d18c:	b2a3      	uxth	r3, r4
   1d18e:	0c0a      	lsrs	r2, r1, #16
   1d190:	fbbb f8f9 	udiv	r8, fp, r9
   1d194:	fb09 bb18 	mls	fp, r9, r8, fp
   1d198:	fb08 fa03 	mul.w	sl, r8, r3
   1d19c:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
   1d1a0:	4592      	cmp	sl, r2
   1d1a2:	d93e      	bls.n	1d222 <__udivmoddi4+0x29c>
   1d1a4:	18a2      	adds	r2, r4, r2
   1d1a6:	f108 30ff 	add.w	r0, r8, #4294967295
   1d1aa:	d204      	bcs.n	1d1b6 <__udivmoddi4+0x230>
   1d1ac:	4592      	cmp	sl, r2
   1d1ae:	d902      	bls.n	1d1b6 <__udivmoddi4+0x230>
   1d1b0:	f1a8 0002 	sub.w	r0, r8, #2
   1d1b4:	4422      	add	r2, r4
   1d1b6:	eba2 020a 	sub.w	r2, r2, sl
   1d1ba:	b289      	uxth	r1, r1
   1d1bc:	fbb2 f8f9 	udiv	r8, r2, r9
   1d1c0:	fb09 2218 	mls	r2, r9, r8, r2
   1d1c4:	fb08 f303 	mul.w	r3, r8, r3
   1d1c8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
   1d1cc:	4293      	cmp	r3, r2
   1d1ce:	d92a      	bls.n	1d226 <__udivmoddi4+0x2a0>
   1d1d0:	18a2      	adds	r2, r4, r2
   1d1d2:	f108 31ff 	add.w	r1, r8, #4294967295
   1d1d6:	d204      	bcs.n	1d1e2 <__udivmoddi4+0x25c>
   1d1d8:	4293      	cmp	r3, r2
   1d1da:	d902      	bls.n	1d1e2 <__udivmoddi4+0x25c>
   1d1dc:	f1a8 0102 	sub.w	r1, r8, #2
   1d1e0:	4422      	add	r2, r4
   1d1e2:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
   1d1e6:	1ad2      	subs	r2, r2, r3
   1d1e8:	fba0 9805 	umull	r9, r8, r0, r5
   1d1ec:	4542      	cmp	r2, r8
   1d1ee:	464b      	mov	r3, r9
   1d1f0:	4641      	mov	r1, r8
   1d1f2:	d302      	bcc.n	1d1fa <__udivmoddi4+0x274>
   1d1f4:	d106      	bne.n	1d204 <__udivmoddi4+0x27e>
   1d1f6:	454f      	cmp	r7, r9
   1d1f8:	d204      	bcs.n	1d204 <__udivmoddi4+0x27e>
   1d1fa:	3801      	subs	r0, #1
   1d1fc:	ebb9 0305 	subs.w	r3, r9, r5
   1d200:	eb68 0104 	sbc.w	r1, r8, r4
   1d204:	b18e      	cbz	r6, 1d22a <__udivmoddi4+0x2a4>
   1d206:	1afc      	subs	r4, r7, r3
   1d208:	eb62 0701 	sbc.w	r7, r2, r1
   1d20c:	fa07 fe0e 	lsl.w	lr, r7, lr
   1d210:	fa24 f30c 	lsr.w	r3, r4, ip
   1d214:	fa27 f70c 	lsr.w	r7, r7, ip
   1d218:	ea4e 0303 	orr.w	r3, lr, r3
   1d21c:	e9c6 3700 	strd	r3, r7, [r6]
   1d220:	e79c      	b.n	1d15c <__udivmoddi4+0x1d6>
   1d222:	4640      	mov	r0, r8
   1d224:	e7c7      	b.n	1d1b6 <__udivmoddi4+0x230>
   1d226:	4641      	mov	r1, r8
   1d228:	e7db      	b.n	1d1e2 <__udivmoddi4+0x25c>
   1d22a:	4631      	mov	r1, r6
   1d22c:	e6fb      	b.n	1d026 <__udivmoddi4+0xa0>

0001d22e <strcmp>:
   1d22e:	f810 2b01 	ldrb.w	r2, [r0], #1
   1d232:	f811 3b01 	ldrb.w	r3, [r1], #1
   1d236:	2a01      	cmp	r2, #1
   1d238:	bf28      	it	cs
   1d23a:	429a      	cmpcs	r2, r3
   1d23c:	d0f7      	beq.n	1d22e <strcmp>
   1d23e:	1ad0      	subs	r0, r2, r3
   1d240:	4770      	bx	lr

0001d242 <strlen>:
   1d242:	4603      	mov	r3, r0
   1d244:	f813 2b01 	ldrb.w	r2, [r3], #1
   1d248:	2a00      	cmp	r2, #0
   1d24a:	d1fb      	bne.n	1d244 <strlen+0x2>
   1d24c:	1a18      	subs	r0, r3, r0
   1d24e:	3801      	subs	r0, #1
   1d250:	4770      	bx	lr
   1d252:	0000      	movs	r0, r0
   1d254:	0000      	movs	r0, r0
	...

0001d258 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   1d258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d25c:	ed2d 8b02 	vpush	{d8}
   1d260:	4681      	mov	r9, r0
   1d262:	468a      	mov	sl, r1
   1d264:	4615      	mov	r5, r2
   1d266:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   1d268:	2600      	movs	r6, #0
	uint64_t round = BIT64(59); /* 0.5 */
   1d26a:	ed9f 8ba9 	vldr	d8, [pc, #676]	; 1d510 <cbvprintf+0x2b8>
{
   1d26e:	b09b      	sub	sp, #108	; 0x6c
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   1d270:	7828      	ldrb	r0, [r5, #0]
   1d272:	b910      	cbnz	r0, 1d27a <cbvprintf+0x22>
			OUTC(' ');
			--width;
		}
	}

	return count;
   1d274:	4630      	mov	r0, r6
   1d276:	f000 bdc9 	b.w	1de0c <cbvprintf+0xbb4>
			OUTC(*fp++);
   1d27a:	1c6b      	adds	r3, r5, #1
		if (*fp != '%') {
   1d27c:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   1d27e:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
   1d280:	d006      	beq.n	1d290 <cbvprintf+0x38>
			OUTC(*fp++);
   1d282:	4651      	mov	r1, sl
			OUTC('%');
   1d284:	47c8      	blx	r9
   1d286:	2800      	cmp	r0, #0
   1d288:	f2c0 85c0 	blt.w	1de0c <cbvprintf+0xbb4>
   1d28c:	3601      	adds	r6, #1
		if (bps == NULL) {
   1d28e:	e22e      	b.n	1d6ee <cbvprintf+0x496>
		} state = {
   1d290:	2218      	movs	r2, #24
   1d292:	2100      	movs	r1, #0
   1d294:	a80c      	add	r0, sp, #48	; 0x30
   1d296:	f024 f8a5 	bl	413e4 <memset>
	if (*sp == '%') {
   1d29a:	786b      	ldrb	r3, [r5, #1]
   1d29c:	2b25      	cmp	r3, #37	; 0x25
   1d29e:	d059      	beq.n	1d354 <cbvprintf+0xfc>
   1d2a0:	1c6a      	adds	r2, r5, #1
   1d2a2:	4617      	mov	r7, r2
		switch (*sp) {
   1d2a4:	f812 3b01 	ldrb.w	r3, [r2], #1
   1d2a8:	2b2b      	cmp	r3, #43	; 0x2b
   1d2aa:	f000 808b 	beq.w	1d3c4 <cbvprintf+0x16c>
   1d2ae:	d879      	bhi.n	1d3a4 <cbvprintf+0x14c>
   1d2b0:	2b20      	cmp	r3, #32
   1d2b2:	f000 808c 	beq.w	1d3ce <cbvprintf+0x176>
   1d2b6:	2b23      	cmp	r3, #35	; 0x23
   1d2b8:	f000 808e 	beq.w	1d3d8 <cbvprintf+0x180>
	if (conv->flag_zero && conv->flag_dash) {
   1d2bc:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1d2c0:	f003 0244 	and.w	r2, r3, #68	; 0x44
   1d2c4:	2a44      	cmp	r2, #68	; 0x44
   1d2c6:	d103      	bne.n	1d2d0 <cbvprintf+0x78>
		conv->flag_zero = false;
   1d2c8:	f36f 1386 	bfc	r3, #6, #1
   1d2cc:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
   1d2d0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1d2d4:	970a      	str	r7, [sp, #40]	; 0x28
   1d2d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1d2da:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
   1d2de:	783b      	ldrb	r3, [r7, #0]
   1d2e0:	2b2a      	cmp	r3, #42	; 0x2a
   1d2e2:	d17e      	bne.n	1d3e2 <cbvprintf+0x18a>
		conv->width_star = true;
   1d2e4:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1d2e8:	f043 0301 	orr.w	r3, r3, #1
   1d2ec:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
   1d2f0:	1c7b      	adds	r3, r7, #1
	sp = extract_prec(conv, sp);
   1d2f2:	930a      	str	r3, [sp, #40]	; 0x28
	conv->prec_present = (*sp == '.');
   1d2f4:	781a      	ldrb	r2, [r3, #0]
   1d2f6:	2a2e      	cmp	r2, #46	; 0x2e
   1d2f8:	bf0c      	ite	eq
   1d2fa:	2101      	moveq	r1, #1
   1d2fc:	2100      	movne	r1, #0
   1d2fe:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   1d302:	f361 0241 	bfi	r2, r1, #1, #1
   1d306:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
   1d30a:	d10b      	bne.n	1d324 <cbvprintf+0xcc>
	++sp;
   1d30c:	1c5a      	adds	r2, r3, #1
   1d30e:	920a      	str	r2, [sp, #40]	; 0x28
	if (*sp == '*') {
   1d310:	785a      	ldrb	r2, [r3, #1]
   1d312:	2a2a      	cmp	r2, #42	; 0x2a
   1d314:	d17b      	bne.n	1d40e <cbvprintf+0x1b6>
		conv->prec_star = true;
   1d316:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
		return ++sp;
   1d31a:	3302      	adds	r3, #2
		conv->prec_star = true;
   1d31c:	f042 0204 	orr.w	r2, r2, #4
   1d320:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	switch (*sp) {
   1d324:	4619      	mov	r1, r3
   1d326:	f811 0b01 	ldrb.w	r0, [r1], #1
   1d32a:	286c      	cmp	r0, #108	; 0x6c
   1d32c:	f000 80cf 	beq.w	1d4ce <cbvprintf+0x276>
   1d330:	d87d      	bhi.n	1d42e <cbvprintf+0x1d6>
   1d332:	2868      	cmp	r0, #104	; 0x68
   1d334:	f000 8084 	beq.w	1d440 <cbvprintf+0x1e8>
   1d338:	286a      	cmp	r0, #106	; 0x6a
   1d33a:	f000 80d2 	beq.w	1d4e2 <cbvprintf+0x28a>
   1d33e:	284c      	cmp	r0, #76	; 0x4c
   1d340:	f000 80d6 	beq.w	1d4f0 <cbvprintf+0x298>
		conv->length_mod = LENGTH_NONE;
   1d344:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
		break;
   1d348:	4619      	mov	r1, r3
		conv->length_mod = LENGTH_NONE;
   1d34a:	f36f 02c6 	bfc	r2, #3, #4
   1d34e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
   1d352:	e080      	b.n	1d456 <cbvprintf+0x1fe>
		conv->specifier = *sp++;
   1d354:	1caa      	adds	r2, r5, #2
   1d356:	9202      	str	r2, [sp, #8]
   1d358:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
   1d35c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1d360:	07df      	lsls	r7, r3, #31
   1d362:	f140 8178 	bpl.w	1d656 <cbvprintf+0x3fe>
			width = va_arg(ap, int);
   1d366:	f854 bb04 	ldr.w	fp, [r4], #4
			if (width < 0) {
   1d36a:	f1bb 0f00 	cmp.w	fp, #0
   1d36e:	da07      	bge.n	1d380 <cbvprintf+0x128>
				conv->flag_dash = true;
   1d370:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				width = -width;
   1d374:	f1cb 0b00 	rsb	fp, fp, #0
				conv->flag_dash = true;
   1d378:	f042 0204 	orr.w	r2, r2, #4
   1d37c:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
		if (conv->prec_star) {
   1d380:	0758      	lsls	r0, r3, #29
   1d382:	f140 8171 	bpl.w	1d668 <cbvprintf+0x410>
			int arg = va_arg(ap, int);
   1d386:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
   1d38a:	f1b8 0f00 	cmp.w	r8, #0
   1d38e:	f280 8170 	bge.w	1d672 <cbvprintf+0x41a>
				conv->prec_present = false;
   1d392:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1d396:	f36f 0341 	bfc	r3, #1, #1
   1d39a:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
   1d39e:	f04f 38ff 	mov.w	r8, #4294967295
   1d3a2:	e166      	b.n	1d672 <cbvprintf+0x41a>
		switch (*sp) {
   1d3a4:	2b2d      	cmp	r3, #45	; 0x2d
   1d3a6:	d006      	beq.n	1d3b6 <cbvprintf+0x15e>
   1d3a8:	2b30      	cmp	r3, #48	; 0x30
   1d3aa:	d187      	bne.n	1d2bc <cbvprintf+0x64>
			conv->flag_zero = true;
   1d3ac:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1d3b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1d3b4:	e003      	b.n	1d3be <cbvprintf+0x166>
			conv->flag_dash = true;
   1d3b6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1d3ba:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
   1d3be:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
   1d3c2:	e76e      	b.n	1d2a2 <cbvprintf+0x4a>
			conv->flag_plus = true;
   1d3c4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1d3c8:	f043 0308 	orr.w	r3, r3, #8
   1d3cc:	e7f7      	b.n	1d3be <cbvprintf+0x166>
			conv->flag_space = true;
   1d3ce:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1d3d2:	f043 0310 	orr.w	r3, r3, #16
   1d3d6:	e7f2      	b.n	1d3be <cbvprintf+0x166>
			conv->flag_hash = true;
   1d3d8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1d3dc:	f043 0320 	orr.w	r3, r3, #32
   1d3e0:	e7ed      	b.n	1d3be <cbvprintf+0x166>
	size_t width = extract_decimal(&sp);
   1d3e2:	a80a      	add	r0, sp, #40	; 0x28
   1d3e4:	f004 f82c 	bl	21440 <extract_decimal>
	if (sp != wp) {
   1d3e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d3ea:	42bb      	cmp	r3, r7
   1d3ec:	d081      	beq.n	1d2f2 <cbvprintf+0x9a>
		conv->unsupported |= ((conv->width_value < 0)
   1d3ee:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
		conv->width_value = width;
   1d3f2:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
   1d3f4:	f3c7 0140 	ubfx	r1, r7, #1, #1
   1d3f8:	ea41 72d0 	orr.w	r2, r1, r0, lsr #31
   1d3fc:	0052      	lsls	r2, r2, #1
   1d3fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1d402:	f007 017d 	and.w	r1, r7, #125	; 0x7d
   1d406:	430a      	orrs	r2, r1
   1d408:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   1d40c:	e771      	b.n	1d2f2 <cbvprintf+0x9a>
	size_t prec = extract_decimal(&sp);
   1d40e:	a80a      	add	r0, sp, #40	; 0x28
   1d410:	f004 f816 	bl	21440 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
   1d414:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
   1d418:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
   1d41a:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1d41e:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
   1d422:	f360 0341 	bfi	r3, r0, #1, #1
   1d426:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
   1d42a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d42c:	e77a      	b.n	1d324 <cbvprintf+0xcc>
	switch (*sp) {
   1d42e:	2874      	cmp	r0, #116	; 0x74
   1d430:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   1d434:	d059      	beq.n	1d4ea <cbvprintf+0x292>
   1d436:	287a      	cmp	r0, #122	; 0x7a
   1d438:	d184      	bne.n	1d344 <cbvprintf+0xec>
		conv->length_mod = LENGTH_Z;
   1d43a:	4613      	mov	r3, r2
   1d43c:	2206      	movs	r2, #6
   1d43e:	e041      	b.n	1d4c4 <cbvprintf+0x26c>
		if (*++sp == 'h') {
   1d440:	785a      	ldrb	r2, [r3, #1]
   1d442:	2a68      	cmp	r2, #104	; 0x68
   1d444:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   1d448:	d13a      	bne.n	1d4c0 <cbvprintf+0x268>
			conv->length_mod = LENGTH_HH;
   1d44a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   1d44c:	f361 02c6 	bfi	r2, r1, #3, #4
   1d450:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
   1d454:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
   1d456:	460b      	mov	r3, r1
   1d458:	f813 2b01 	ldrb.w	r2, [r3], #1
	switch (conv->specifier) {
   1d45c:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
   1d45e:	9302      	str	r3, [sp, #8]
   1d460:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
   1d464:	f200 80cd 	bhi.w	1d602 <cbvprintf+0x3aa>
   1d468:	2a57      	cmp	r2, #87	; 0x57
   1d46a:	d855      	bhi.n	1d518 <cbvprintf+0x2c0>
   1d46c:	2a41      	cmp	r2, #65	; 0x41
   1d46e:	d004      	beq.n	1d47a <cbvprintf+0x222>
   1d470:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
   1d474:	2b02      	cmp	r3, #2
   1d476:	f200 80c4 	bhi.w	1d602 <cbvprintf+0x3aa>
		conv->specifier_cat = SPECIFIER_FP;
   1d47a:	2104      	movs	r1, #4
   1d47c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   1d480:	f361 0302 	bfi	r3, r1, #0, #3
   1d484:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
   1d488:	f002 03df 	and.w	r3, r2, #223	; 0xdf
   1d48c:	f1a3 0841 	sub.w	r8, r3, #65	; 0x41
		conv->specifier_a = (conv->specifier == 'a')
   1d490:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
			|| (conv->specifier == 'A');
   1d494:	f1d8 0300 	rsbs	r3, r8, #0
   1d498:	eb43 0308 	adc.w	r3, r3, r8
		conv->specifier_a = (conv->specifier == 'a')
   1d49c:	f363 12c7 	bfi	r2, r3, #7, #1
   1d4a0:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		if (conv->specifier_a
   1d4a4:	b2d3      	uxtb	r3, r2
   1d4a6:	0612      	lsls	r2, r2, #24
   1d4a8:	f100 80d3 	bmi.w	1d652 <cbvprintf+0x3fa>
		if (conv->length_mod == LENGTH_L) {
   1d4ac:	f003 0278 	and.w	r2, r3, #120	; 0x78
   1d4b0:	2a18      	cmp	r2, #24
   1d4b2:	f040 80a3 	bne.w	1d5fc <cbvprintf+0x3a4>
			conv->length_mod = LENGTH_NONE;
   1d4b6:	f36f 03c6 	bfc	r3, #3, #4
   1d4ba:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   1d4be:	e08a      	b.n	1d5d6 <cbvprintf+0x37e>
			conv->length_mod = LENGTH_H;
   1d4c0:	4613      	mov	r3, r2
   1d4c2:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
   1d4c4:	f362 03c6 	bfi	r3, r2, #3, #4
   1d4c8:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   1d4cc:	e7c3      	b.n	1d456 <cbvprintf+0x1fe>
		if (*++sp == 'l') {
   1d4ce:	785a      	ldrb	r2, [r3, #1]
   1d4d0:	2a6c      	cmp	r2, #108	; 0x6c
   1d4d2:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   1d4d6:	d101      	bne.n	1d4dc <cbvprintf+0x284>
			conv->length_mod = LENGTH_LL;
   1d4d8:	2104      	movs	r1, #4
   1d4da:	e7b7      	b.n	1d44c <cbvprintf+0x1f4>
			conv->length_mod = LENGTH_L;
   1d4dc:	4613      	mov	r3, r2
   1d4de:	2203      	movs	r2, #3
   1d4e0:	e7f0      	b.n	1d4c4 <cbvprintf+0x26c>
		conv->length_mod = LENGTH_J;
   1d4e2:	2205      	movs	r2, #5
   1d4e4:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1d4e8:	e7ec      	b.n	1d4c4 <cbvprintf+0x26c>
		conv->length_mod = LENGTH_T;
   1d4ea:	4613      	mov	r3, r2
   1d4ec:	2207      	movs	r2, #7
   1d4ee:	e7e9      	b.n	1d4c4 <cbvprintf+0x26c>
		conv->unsupported = true;
   1d4f0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1d4f4:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   1d4f8:	f023 0302 	bic.w	r3, r3, #2
   1d4fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   1d500:	f043 0302 	orr.w	r3, r3, #2
   1d504:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
   1d508:	e7a5      	b.n	1d456 <cbvprintf+0x1fe>
   1d50a:	bf00      	nop
   1d50c:	f3af 8000 	nop.w
   1d510:	00000000 	.word	0x00000000
   1d514:	08000000 	.word	0x08000000
	switch (conv->specifier) {
   1d518:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
   1d51c:	2b20      	cmp	r3, #32
   1d51e:	d870      	bhi.n	1d602 <cbvprintf+0x3aa>
   1d520:	a101      	add	r1, pc, #4	; (adr r1, 1d528 <cbvprintf+0x2d0>)
   1d522:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1d526:	bf00      	nop
   1d528:	0001d5db 	.word	0x0001d5db
   1d52c:	0001d603 	.word	0x0001d603
   1d530:	0001d603 	.word	0x0001d603
   1d534:	0001d603 	.word	0x0001d603
   1d538:	0001d603 	.word	0x0001d603
   1d53c:	0001d603 	.word	0x0001d603
   1d540:	0001d603 	.word	0x0001d603
   1d544:	0001d603 	.word	0x0001d603
   1d548:	0001d603 	.word	0x0001d603
   1d54c:	0001d47b 	.word	0x0001d47b
   1d550:	0001d603 	.word	0x0001d603
   1d554:	0001d5db 	.word	0x0001d5db
   1d558:	0001d5ad 	.word	0x0001d5ad
   1d55c:	0001d47b 	.word	0x0001d47b
   1d560:	0001d47b 	.word	0x0001d47b
   1d564:	0001d47b 	.word	0x0001d47b
   1d568:	0001d603 	.word	0x0001d603
   1d56c:	0001d5ad 	.word	0x0001d5ad
   1d570:	0001d603 	.word	0x0001d603
   1d574:	0001d603 	.word	0x0001d603
   1d578:	0001d603 	.word	0x0001d603
   1d57c:	0001d603 	.word	0x0001d603
   1d580:	0001d611 	.word	0x0001d611
   1d584:	0001d5db 	.word	0x0001d5db
   1d588:	0001d635 	.word	0x0001d635
   1d58c:	0001d603 	.word	0x0001d603
   1d590:	0001d603 	.word	0x0001d603
   1d594:	0001d635 	.word	0x0001d635
   1d598:	0001d603 	.word	0x0001d603
   1d59c:	0001d5db 	.word	0x0001d5db
   1d5a0:	0001d603 	.word	0x0001d603
   1d5a4:	0001d603 	.word	0x0001d603
   1d5a8:	0001d5db 	.word	0x0001d5db
		conv->specifier_cat = SPECIFIER_SINT;
   1d5ac:	2101      	movs	r1, #1
   1d5ae:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		conv->specifier_cat = SPECIFIER_UINT;
   1d5b2:	f361 0302 	bfi	r3, r1, #0, #3
   1d5b6:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   1d5ba:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1d5be:	f003 0378 	and.w	r3, r3, #120	; 0x78
   1d5c2:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
   1d5c4:	bf02      	ittt	eq
   1d5c6:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
   1d5ca:	f041 0101 	orreq.w	r1, r1, #1
   1d5ce:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
   1d5d2:	2a63      	cmp	r2, #99	; 0x63
   1d5d4:	d005      	beq.n	1d5e2 <cbvprintf+0x38a>
	bool unsupported = false;
   1d5d6:	2300      	movs	r3, #0
   1d5d8:	e006      	b.n	1d5e8 <cbvprintf+0x390>
		conv->specifier_cat = SPECIFIER_UINT;
   1d5da:	2102      	movs	r1, #2
   1d5dc:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   1d5e0:	e7e7      	b.n	1d5b2 <cbvprintf+0x35a>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1d5e2:	3b00      	subs	r3, #0
   1d5e4:	bf18      	it	ne
   1d5e6:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   1d5e8:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   1d5ec:	f3c2 0140 	ubfx	r1, r2, #1, #1
   1d5f0:	430b      	orrs	r3, r1
   1d5f2:	f363 0241 	bfi	r2, r3, #1, #1
   1d5f6:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
   1d5fa:	e6af      	b.n	1d35c <cbvprintf+0x104>
		} else if ((conv->length_mod != LENGTH_NONE)
   1d5fc:	f013 0f38 	tst.w	r3, #56	; 0x38
   1d600:	d0e9      	beq.n	1d5d6 <cbvprintf+0x37e>
			conv->invalid = true;
   1d602:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1d606:	f043 0301 	orr.w	r3, r3, #1
   1d60a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   1d60e:	e7e2      	b.n	1d5d6 <cbvprintf+0x37e>
		conv->specifier_cat = SPECIFIER_PTR;
   1d610:	2203      	movs	r2, #3
   1d612:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   1d616:	f362 0302 	bfi	r3, r2, #0, #3
   1d61a:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   1d61e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1d622:	f003 0378 	and.w	r3, r3, #120	; 0x78
   1d626:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
   1d62a:	f1dc 0300 	rsbs	r3, ip, #0
   1d62e:	eb43 030c 	adc.w	r3, r3, ip
   1d632:	e7d9      	b.n	1d5e8 <cbvprintf+0x390>
		conv->specifier_cat = SPECIFIER_PTR;
   1d634:	2203      	movs	r2, #3
   1d636:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   1d63a:	f362 0302 	bfi	r3, r2, #0, #3
   1d63e:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
   1d642:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1d646:	f013 0f78 	tst.w	r3, #120	; 0x78
   1d64a:	bf14      	ite	ne
   1d64c:	2301      	movne	r3, #1
   1d64e:	2300      	moveq	r3, #0
   1d650:	e7ca      	b.n	1d5e8 <cbvprintf+0x390>
			unsupported = true;
   1d652:	2301      	movs	r3, #1
   1d654:	e7c8      	b.n	1d5e8 <cbvprintf+0x390>
		} else if (conv->width_present) {
   1d656:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
   1d65a:	2a00      	cmp	r2, #0
		int width = -1;
   1d65c:	bfac      	ite	ge
   1d65e:	f04f 3bff 	movge.w	fp, #4294967295
			width = conv->width_value;
   1d662:	f8dd b03c 	ldrlt.w	fp, [sp, #60]	; 0x3c
   1d666:	e68b      	b.n	1d380 <cbvprintf+0x128>
		} else if (conv->prec_present) {
   1d668:	0799      	lsls	r1, r3, #30
   1d66a:	f57f ae98 	bpl.w	1d39e <cbvprintf+0x146>
			precision = conv->prec_value;
   1d66e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
		conv->pad0_value = 0;
   1d672:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   1d674:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		    && (conv->specifier_cat == SPECIFIER_FP)
   1d678:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   1d67c:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
   1d680:	f003 0207 	and.w	r2, r3, #7
   1d684:	2a04      	cmp	r2, #4
   1d686:	d109      	bne.n	1d69c <cbvprintf+0x444>
		    && !conv->prec_present) {
   1d688:	078a      	lsls	r2, r1, #30
   1d68a:	d407      	bmi.n	1d69c <cbvprintf+0x444>
			if (conv->specifier_a) {
   1d68c:	f99d 2039 	ldrsb.w	r2, [sp, #57]	; 0x39
				precision = 6;
   1d690:	2a00      	cmp	r2, #0
   1d692:	bfb4      	ite	lt
   1d694:	f04f 080d 	movlt.w	r8, #13
   1d698:	f04f 0806 	movge.w	r8, #6
		enum specifier_cat_enum specifier_cat
   1d69c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   1d6a0:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   1d6a2:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   1d6a6:	d137      	bne.n	1d718 <cbvprintf+0x4c0>
			switch (length_mod) {
   1d6a8:	1ecb      	subs	r3, r1, #3
   1d6aa:	2b04      	cmp	r3, #4
   1d6ac:	d821      	bhi.n	1d6f2 <cbvprintf+0x49a>
   1d6ae:	e8df f003 	tbb	[pc, r3]
   1d6b2:	0903      	.short	0x0903
   1d6b4:	2009      	.short	0x2009
   1d6b6:	20          	.byte	0x20
   1d6b7:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   1d6b8:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
   1d6bc:	17da      	asrs	r2, r3, #31
   1d6be:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
   1d6c2:	e006      	b.n	1d6d2 <cbvprintf+0x47a>
					(sint_value_type)va_arg(ap, intmax_t);
   1d6c4:	3407      	adds	r4, #7
   1d6c6:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   1d6ca:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   1d6ce:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
   1d6d2:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
   1d6d6:	07bb      	lsls	r3, r7, #30
   1d6d8:	d056      	beq.n	1d788 <cbvprintf+0x530>
			OUTS(sp, fp);
   1d6da:	462a      	mov	r2, r5
   1d6dc:	4651      	mov	r1, sl
   1d6de:	4648      	mov	r0, r9
   1d6e0:	9b02      	ldr	r3, [sp, #8]
   1d6e2:	f01f f98b 	bl	3c9fc <outs>
   1d6e6:	2800      	cmp	r0, #0
   1d6e8:	f2c0 8390 	blt.w	1de0c <cbvprintf+0xbb4>
   1d6ec:	4406      	add	r6, r0
			while (pad_len-- > 0) {
   1d6ee:	9d02      	ldr	r5, [sp, #8]
   1d6f0:	e5be      	b.n	1d270 <cbvprintf+0x18>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1d6f2:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   1d6f6:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1d6f8:	ea4f 72e3 	mov.w	r2, r3, asr #31
   1d6fc:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
   1d700:	d105      	bne.n	1d70e <cbvprintf+0x4b6>
				value->uint = (unsigned char)value->uint;
   1d702:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
   1d706:	930c      	str	r3, [sp, #48]	; 0x30
   1d708:	2300      	movs	r3, #0
   1d70a:	930d      	str	r3, [sp, #52]	; 0x34
   1d70c:	e7e1      	b.n	1d6d2 <cbvprintf+0x47a>
			} else if (length_mod == LENGTH_H) {
   1d70e:	2902      	cmp	r1, #2
   1d710:	d1df      	bne.n	1d6d2 <cbvprintf+0x47a>
				value->sint = (short)value->sint;
   1d712:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
   1d716:	e7d1      	b.n	1d6bc <cbvprintf+0x464>
		} else if (specifier_cat == SPECIFIER_UINT) {
   1d718:	2b02      	cmp	r3, #2
   1d71a:	d123      	bne.n	1d764 <cbvprintf+0x50c>
			switch (length_mod) {
   1d71c:	1ecb      	subs	r3, r1, #3
   1d71e:	2b04      	cmp	r3, #4
   1d720:	d813      	bhi.n	1d74a <cbvprintf+0x4f2>
   1d722:	e8df f003 	tbb	[pc, r3]
   1d726:	0a03      	.short	0x0a03
   1d728:	120a      	.short	0x120a
   1d72a:	12          	.byte	0x12
   1d72b:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
   1d72c:	2200      	movs	r2, #0
					value->uint = (wchar_t)va_arg(ap,
   1d72e:	6820      	ldr	r0, [r4, #0]
				value->sint = va_arg(ap, int);
   1d730:	1d23      	adds	r3, r4, #4
					value->uint = (wchar_t)va_arg(ap,
   1d732:	900c      	str	r0, [sp, #48]	; 0x30
   1d734:	920d      	str	r2, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
   1d736:	461c      	mov	r4, r3
   1d738:	e7cb      	b.n	1d6d2 <cbvprintf+0x47a>
					(uint_value_type)va_arg(ap,
   1d73a:	1de3      	adds	r3, r4, #7
   1d73c:	f023 0307 	bic.w	r3, r3, #7
				value->uint =
   1d740:	ecb3 7b02 	vldmia	r3!, {d7}
   1d744:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
				break;
   1d748:	e7f5      	b.n	1d736 <cbvprintf+0x4de>
					(uint_value_type)va_arg(ap, size_t);
   1d74a:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   1d74e:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   1d750:	930c      	str	r3, [sp, #48]	; 0x30
   1d752:	f04f 0300 	mov.w	r3, #0
   1d756:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
   1d758:	d0d3      	beq.n	1d702 <cbvprintf+0x4aa>
			} else if (length_mod == LENGTH_H) {
   1d75a:	2902      	cmp	r1, #2
   1d75c:	d1b9      	bne.n	1d6d2 <cbvprintf+0x47a>
				value->uint = (unsigned short)value->uint;
   1d75e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   1d762:	e7d0      	b.n	1d706 <cbvprintf+0x4ae>
		} else if (specifier_cat == SPECIFIER_FP) {
   1d764:	2b04      	cmp	r3, #4
   1d766:	d109      	bne.n	1d77c <cbvprintf+0x524>
					(sint_value_type)va_arg(ap, long long);
   1d768:	1de3      	adds	r3, r4, #7
   1d76a:	f023 0307 	bic.w	r3, r3, #7
   1d76e:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
   1d772:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d776:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   1d77a:	e7aa      	b.n	1d6d2 <cbvprintf+0x47a>
		} else if (specifier_cat == SPECIFIER_PTR) {
   1d77c:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   1d77e:	bf04      	itt	eq
   1d780:	f854 3b04 	ldreq.w	r3, [r4], #4
   1d784:	930c      	streq	r3, [sp, #48]	; 0x30
   1d786:	e7a4      	b.n	1d6d2 <cbvprintf+0x47a>
		switch (conv->specifier) {
   1d788:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
   1d78c:	2a78      	cmp	r2, #120	; 0x78
   1d78e:	d8ae      	bhi.n	1d6ee <cbvprintf+0x496>
   1d790:	2a57      	cmp	r2, #87	; 0x57
   1d792:	f200 808c 	bhi.w	1d8ae <cbvprintf+0x656>
   1d796:	2a25      	cmp	r2, #37	; 0x25
   1d798:	f000 80d4 	beq.w	1d944 <cbvprintf+0x6ec>
   1d79c:	2a24      	cmp	r2, #36	; 0x24
   1d79e:	d9a6      	bls.n	1d6ee <cbvprintf+0x496>
   1d7a0:	2a41      	cmp	r2, #65	; 0x41
   1d7a2:	d003      	beq.n	1d7ac <cbvprintf+0x554>
   1d7a4:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
   1d7a8:	2b02      	cmp	r3, #2
   1d7aa:	d8a0      	bhi.n	1d6ee <cbvprintf+0x496>
	} u = {
   1d7ac:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
	if ((u.u64 & SIGN_MASK) != 0U) {
   1d7b0:	2b00      	cmp	r3, #0
   1d7b2:	f2c0 81b6 	blt.w	1db22 <cbvprintf+0x8ca>
	} else if (conv->flag_plus) {
   1d7b6:	0738      	lsls	r0, r7, #28
   1d7b8:	f100 81b5 	bmi.w	1db26 <cbvprintf+0x8ce>
		*sign = ' ';
   1d7bc:	f017 0710 	ands.w	r7, r7, #16
   1d7c0:	bf18      	it	ne
   1d7c2:	2720      	movne	r7, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   1d7c4:	f3c3 550a 	ubfx	r5, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
   1d7c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1d7cc:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool is_subnormal = (expo == 0) && (fract != 0);
   1d7d0:	2d00      	cmp	r5, #0
   1d7d2:	f040 81aa 	bne.w	1db2a <cbvprintf+0x8d2>
   1d7d6:	ea51 0003 	orrs.w	r0, r1, r3
   1d7da:	bf14      	ite	ne
   1d7dc:	2001      	movne	r0, #1
   1d7de:	2000      	moveq	r0, #0
	fract <<= EXPONENT_BITS;
   1d7e0:	02db      	lsls	r3, r3, #11
   1d7e2:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
   1d7e6:	02c9      	lsls	r1, r1, #11
		c = 'f';
   1d7e8:	2a46      	cmp	r2, #70	; 0x46
	if ((expo | fract) != 0) {
   1d7ea:	ea45 0e01 	orr.w	lr, r5, r1
   1d7ee:	ea43 7ce5 	orr.w	ip, r3, r5, asr #31
		c = 'f';
   1d7f2:	bf08      	it	eq
   1d7f4:	2266      	moveq	r2, #102	; 0x66
	if ((expo | fract) != 0) {
   1d7f6:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
   1d7fa:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if ((expo | fract) != 0) {
   1d7fe:	f000 8202 	beq.w	1dc06 <cbvprintf+0x9ae>
		if (is_subnormal) {
   1d802:	2800      	cmp	r0, #0
   1d804:	f040 81ca 	bne.w	1db9c <cbvprintf+0x944>
		fract |= BIT_63;
   1d808:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1d80c:	f04f 0c00 	mov.w	ip, #0
		fract *= 5U;
   1d810:	f04f 0e05 	mov.w	lr, #5
		fract |= BIT_63;
   1d814:	4663      	mov	r3, ip
   1d816:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
   1d81a:	f2a5 35fe 	subw	r5, r5, #1022	; 0x3fe
		fract |= BIT_63;
   1d81e:	9109      	str	r1, [sp, #36]	; 0x24
	while (expo < -2) {
   1d820:	f115 0f02 	cmn.w	r5, #2
   1d824:	f2c0 81c1 	blt.w	1dbaa <cbvprintf+0x952>
   1d828:	f1bc 0f00 	cmp.w	ip, #0
   1d82c:	d001      	beq.n	1d832 <cbvprintf+0x5da>
   1d82e:	e9cd 0108 	strd	r0, r1, [sp, #32]
		fract += 2;
   1d832:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
	while (expo > 0) {
   1d836:	2d00      	cmp	r5, #0
   1d838:	f300 81cc 	bgt.w	1dbd4 <cbvprintf+0x97c>
	fract >>= (4 - expo);
   1d83c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1d83e:	9908      	ldr	r1, [sp, #32]
   1d840:	f1c5 0c04 	rsb	ip, r5, #4
   1d844:	351c      	adds	r5, #28
   1d846:	fa00 f505 	lsl.w	r5, r0, r5
   1d84a:	f1ac 0e20 	sub.w	lr, ip, #32
   1d84e:	fa21 f10c 	lsr.w	r1, r1, ip
   1d852:	fa20 fe0e 	lsr.w	lr, r0, lr
   1d856:	4329      	orrs	r1, r5
   1d858:	ea41 010e 	orr.w	r1, r1, lr
   1d85c:	fa20 f00c 	lsr.w	r0, r0, ip
   1d860:	e9cd 1008 	strd	r1, r0, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
   1d864:	f002 01df 	and.w	r1, r2, #223	; 0xdf
   1d868:	2947      	cmp	r1, #71	; 0x47
   1d86a:	f040 81d3 	bne.w	1dc14 <cbvprintf+0x9bc>
		if (decexp < (-4 + 1) || decexp > precision) {
   1d86e:	1cdd      	adds	r5, r3, #3
   1d870:	db02      	blt.n	1d878 <cbvprintf+0x620>
   1d872:	4598      	cmp	r8, r3
   1d874:	f280 81ca 	bge.w	1dc0c <cbvprintf+0x9b4>
			c += 'e' - 'g';  /* e or E */
   1d878:	3a02      	subs	r2, #2
			if (precision > 0) {
   1d87a:	f1b8 0f00 	cmp.w	r8, #0
			c += 'e' - 'g';  /* e or E */
   1d87e:	b2d2      	uxtb	r2, r2
			if (precision > 0) {
   1d880:	dd01      	ble.n	1d886 <cbvprintf+0x62e>
				precision--;
   1d882:	f108 38ff 	add.w	r8, r8, #4294967295
		if (!conv->flag_hash && (precision > 0)) {
   1d886:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
   1d88a:	0688      	lsls	r0, r1, #26
   1d88c:	f100 81c2 	bmi.w	1dc14 <cbvprintf+0x9bc>
   1d890:	f1b8 0f00 	cmp.w	r8, #0
   1d894:	bfd4      	ite	le
   1d896:	2100      	movle	r1, #0
   1d898:	2101      	movgt	r1, #1
	if (c == 'f') {
   1d89a:	2a66      	cmp	r2, #102	; 0x66
	bool prune_zero = false;
   1d89c:	9103      	str	r1, [sp, #12]
	if (c == 'f') {
   1d89e:	f040 81bb 	bne.w	1dc18 <cbvprintf+0x9c0>
		if (decimals < 0) {
   1d8a2:	eb13 0108 	adds.w	r1, r3, r8
   1d8a6:	f140 81b9 	bpl.w	1dc1c <cbvprintf+0x9c4>
			decimals = 0;
   1d8aa:	2100      	movs	r1, #0
   1d8ac:	e1b9      	b.n	1dc22 <cbvprintf+0x9ca>
		switch (conv->specifier) {
   1d8ae:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
   1d8b2:	2b20      	cmp	r3, #32
   1d8b4:	f63f af1b 	bhi.w	1d6ee <cbvprintf+0x496>
   1d8b8:	a001      	add	r0, pc, #4	; (adr r0, 1d8c0 <cbvprintf+0x668>)
   1d8ba:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   1d8be:	bf00      	nop
   1d8c0:	0001dac5 	.word	0x0001dac5
   1d8c4:	0001d6ef 	.word	0x0001d6ef
   1d8c8:	0001d6ef 	.word	0x0001d6ef
   1d8cc:	0001d6ef 	.word	0x0001d6ef
   1d8d0:	0001d6ef 	.word	0x0001d6ef
   1d8d4:	0001d6ef 	.word	0x0001d6ef
   1d8d8:	0001d6ef 	.word	0x0001d6ef
   1d8dc:	0001d6ef 	.word	0x0001d6ef
   1d8e0:	0001d6ef 	.word	0x0001d6ef
   1d8e4:	0001d7ad 	.word	0x0001d7ad
   1d8e8:	0001d6ef 	.word	0x0001d6ef
   1d8ec:	0001d971 	.word	0x0001d971
   1d8f0:	0001da65 	.word	0x0001da65
   1d8f4:	0001d7ad 	.word	0x0001d7ad
   1d8f8:	0001d7ad 	.word	0x0001d7ad
   1d8fc:	0001d7ad 	.word	0x0001d7ad
   1d900:	0001d6ef 	.word	0x0001d6ef
   1d904:	0001da65 	.word	0x0001da65
   1d908:	0001d6ef 	.word	0x0001d6ef
   1d90c:	0001d6ef 	.word	0x0001d6ef
   1d910:	0001d6ef 	.word	0x0001d6ef
   1d914:	0001d6ef 	.word	0x0001d6ef
   1d918:	0001dafb 	.word	0x0001dafb
   1d91c:	0001dac5 	.word	0x0001dac5
   1d920:	0001dac9 	.word	0x0001dac9
   1d924:	0001d6ef 	.word	0x0001d6ef
   1d928:	0001d6ef 	.word	0x0001d6ef
   1d92c:	0001d94b 	.word	0x0001d94b
   1d930:	0001d6ef 	.word	0x0001d6ef
   1d934:	0001dac5 	.word	0x0001dac5
   1d938:	0001d6ef 	.word	0x0001d6ef
   1d93c:	0001d6ef 	.word	0x0001d6ef
   1d940:	0001dac5 	.word	0x0001dac5
			OUTC('%');
   1d944:	4651      	mov	r1, sl
   1d946:	4610      	mov	r0, r2
   1d948:	e49c      	b.n	1d284 <cbvprintf+0x2c>
			if (precision >= 0) {
   1d94a:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
   1d94e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if (precision >= 0) {
   1d950:	db09      	blt.n	1d966 <cbvprintf+0x70e>
				len = strnlen(bps, precision);
   1d952:	4641      	mov	r1, r8
   1d954:	4610      	mov	r0, r2
   1d956:	9203      	str	r2, [sp, #12]
   1d958:	f023 ff3e 	bl	417d8 <strnlen>
		char sign = 0;
   1d95c:	2700      	movs	r7, #0
				len = strlen(bps);
   1d95e:	9a03      	ldr	r2, [sp, #12]
			bpe = bps + len;
   1d960:	1815      	adds	r5, r2, r0
		if (bps == NULL) {
   1d962:	b962      	cbnz	r2, 1d97e <cbvprintf+0x726>
   1d964:	e6c3      	b.n	1d6ee <cbvprintf+0x496>
				len = strlen(bps);
   1d966:	4610      	mov	r0, r2
   1d968:	9203      	str	r2, [sp, #12]
   1d96a:	f7ff fc6a 	bl	1d242 <strlen>
   1d96e:	e7f5      	b.n	1d95c <cbvprintf+0x704>
		char sign = 0;
   1d970:	2700      	movs	r7, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1d972:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			bpe = buf + 1;
   1d974:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1d978:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				bps = encode_float(value->dbl, conv, precision,
   1d97c:	aa13      	add	r2, sp, #76	; 0x4c
		size_t nj_len = (bpe - bps);
   1d97e:	1aab      	subs	r3, r5, r2
		if (sign != 0) {
   1d980:	b107      	cbz	r7, 1d984 <cbvprintf+0x72c>
			nj_len += 1U;
   1d982:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   1d984:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
   1d988:	06c1      	lsls	r1, r0, #27
   1d98a:	f140 8233 	bpl.w	1ddf4 <cbvprintf+0xb9c>
			nj_len += 2U;
   1d98e:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
   1d990:	990f      	ldr	r1, [sp, #60]	; 0x3c
		if (conv->pad_fp) {
   1d992:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
   1d994:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   1d996:	bf44      	itt	mi
   1d998:	9910      	ldrmi	r1, [sp, #64]	; 0x40
   1d99a:	185b      	addmi	r3, r3, r1
		if (width > 0) {
   1d99c:	f1bb 0f00 	cmp.w	fp, #0
   1d9a0:	dd23      	ble.n	1d9ea <cbvprintf+0x792>
			width -= (int)nj_len;
   1d9a2:	ebab 0b03 	sub.w	fp, fp, r3
			if (!conv->flag_dash) {
   1d9a6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1d9aa:	0759      	lsls	r1, r3, #29
   1d9ac:	f3c3 0880 	ubfx	r8, r3, #2, #1
   1d9b0:	d41b      	bmi.n	1d9ea <cbvprintf+0x792>
				if (conv->flag_zero) {
   1d9b2:	0658      	lsls	r0, r3, #25
   1d9b4:	f140 8234 	bpl.w	1de20 <cbvprintf+0xbc8>
					if (sign != 0) {
   1d9b8:	2f00      	cmp	r7, #0
   1d9ba:	f000 8234 	beq.w	1de26 <cbvprintf+0xbce>
						OUTC(sign);
   1d9be:	4651      	mov	r1, sl
   1d9c0:	4638      	mov	r0, r7
   1d9c2:	9203      	str	r2, [sp, #12]
   1d9c4:	47c8      	blx	r9
   1d9c6:	2800      	cmp	r0, #0
   1d9c8:	f2c0 8220 	blt.w	1de0c <cbvprintf+0xbb4>
						sign = 0;
   1d9cc:	4647      	mov	r7, r8
					pad = '0';
   1d9ce:	f04f 0830 	mov.w	r8, #48	; 0x30
   1d9d2:	9a03      	ldr	r2, [sp, #12]
						OUTC(sign);
   1d9d4:	3601      	adds	r6, #1
						sign = 0;
   1d9d6:	445e      	add	r6, fp
   1d9d8:	465b      	mov	r3, fp
				while (width-- > 0) {
   1d9da:	2b00      	cmp	r3, #0
   1d9dc:	eba6 000b 	sub.w	r0, r6, fp
   1d9e0:	f10b 3bff 	add.w	fp, fp, #4294967295
   1d9e4:	f300 820a 	bgt.w	1ddfc <cbvprintf+0xba4>
   1d9e8:	4606      	mov	r6, r0
		if (sign != 0) {
   1d9ea:	b147      	cbz	r7, 1d9fe <cbvprintf+0x7a6>
			OUTC(sign);
   1d9ec:	4651      	mov	r1, sl
   1d9ee:	4638      	mov	r0, r7
   1d9f0:	9203      	str	r2, [sp, #12]
   1d9f2:	47c8      	blx	r9
   1d9f4:	2800      	cmp	r0, #0
   1d9f6:	f2c0 8209 	blt.w	1de0c <cbvprintf+0xbb4>
   1d9fa:	9a03      	ldr	r2, [sp, #12]
   1d9fc:	3601      	adds	r6, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
   1d9fe:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   1da02:	0659      	lsls	r1, r3, #25
   1da04:	f140 8263 	bpl.w	1dece <cbvprintf+0xc76>
			if (conv->specifier_a) {
   1da08:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
   1da0c:	1ab6      	subs	r6, r6, r2
   1da0e:	2b00      	cmp	r3, #0
   1da10:	f280 8218 	bge.w	1de44 <cbvprintf+0xbec>
   1da14:	4617      	mov	r7, r2
   1da16:	46b8      	mov	r8, r7
   1da18:	19f3      	adds	r3, r6, r7
				while (*cp != 'p') {
   1da1a:	f817 0b01 	ldrb.w	r0, [r7], #1
   1da1e:	2870      	cmp	r0, #112	; 0x70
   1da20:	f040 8204 	bne.w	1de2c <cbvprintf+0xbd4>
			while (pad_len-- > 0) {
   1da24:	461e      	mov	r6, r3
   1da26:	9f10      	ldr	r7, [sp, #64]	; 0x40
   1da28:	441f      	add	r7, r3
   1da2a:	1bbb      	subs	r3, r7, r6
   1da2c:	2b00      	cmp	r3, #0
   1da2e:	f300 8247 	bgt.w	1dec0 <cbvprintf+0xc68>
			OUTS(cp, bpe);
   1da32:	462b      	mov	r3, r5
   1da34:	4642      	mov	r2, r8
			OUTS(bps, bpe);
   1da36:	4651      	mov	r1, sl
   1da38:	4648      	mov	r0, r9
   1da3a:	f01e ffdf 	bl	3c9fc <outs>
   1da3e:	2800      	cmp	r0, #0
   1da40:	f2c0 81e4 	blt.w	1de0c <cbvprintf+0xbb4>
   1da44:	4430      	add	r0, r6
			while (pad_len-- > 0) {
   1da46:	4606      	mov	r6, r0
   1da48:	4483      	add	fp, r0
		while (width > 0) {
   1da4a:	ebab 0306 	sub.w	r3, fp, r6
   1da4e:	2b00      	cmp	r3, #0
   1da50:	f77f ae4d 	ble.w	1d6ee <cbvprintf+0x496>
			OUTC(' ');
   1da54:	4651      	mov	r1, sl
   1da56:	2020      	movs	r0, #32
   1da58:	47c8      	blx	r9
   1da5a:	2800      	cmp	r0, #0
   1da5c:	f2c0 81d6 	blt.w	1de0c <cbvprintf+0xbb4>
   1da60:	3601      	adds	r6, #1
			--width;
   1da62:	e7f2      	b.n	1da4a <cbvprintf+0x7f2>
			if (conv->flag_plus) {
   1da64:	073d      	lsls	r5, r7, #28
   1da66:	d42b      	bmi.n	1dac0 <cbvprintf+0x868>
				sign = ' ';
   1da68:	f017 0710 	ands.w	r7, r7, #16
   1da6c:	bf18      	it	ne
   1da6e:	2720      	movne	r7, #32
			sint = value->sint;
   1da70:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
   1da74:	2b00      	cmp	r3, #0
   1da76:	da05      	bge.n	1da84 <cbvprintf+0x82c>
				sign = '-';
   1da78:	272d      	movs	r7, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
   1da7a:	4252      	negs	r2, r2
   1da7c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1da80:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
			bps = encode_uint(value->uint, conv, buf, bpe);
   1da84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1da88:	f10d 0365 	add.w	r3, sp, #101	; 0x65
   1da8c:	9300      	str	r3, [sp, #0]
   1da8e:	aa0e      	add	r2, sp, #56	; 0x38
   1da90:	ab13      	add	r3, sp, #76	; 0x4c
   1da92:	f003 fceb 	bl	2146c <encode_uint>
   1da96:	4602      	mov	r2, r0
			if (precision >= 0) {
   1da98:	f1b8 0f00 	cmp.w	r8, #0
   1da9c:	f10d 0565 	add.w	r5, sp, #101	; 0x65
   1daa0:	f6ff af5f 	blt.w	1d962 <cbvprintf+0x70a>
				conv->flag_zero = false;
   1daa4:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
				size_t len = bpe - bps;
   1daa8:	1aab      	subs	r3, r5, r2
				conv->flag_zero = false;
   1daaa:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
   1daae:	4598      	cmp	r8, r3
				conv->flag_zero = false;
   1dab0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
   1dab4:	f67f af55 	bls.w	1d962 <cbvprintf+0x70a>
					conv->pad0_value = precision - (int)len;
   1dab8:	eba8 0303 	sub.w	r3, r8, r3
   1dabc:	930f      	str	r3, [sp, #60]	; 0x3c
   1dabe:	e750      	b.n	1d962 <cbvprintf+0x70a>
				sign = '+';
   1dac0:	272b      	movs	r7, #43	; 0x2b
   1dac2:	e7d5      	b.n	1da70 <cbvprintf+0x818>
		switch (conv->specifier) {
   1dac4:	2700      	movs	r7, #0
   1dac6:	e7dd      	b.n	1da84 <cbvprintf+0x82c>
			if (value->ptr != NULL) {
   1dac8:	980c      	ldr	r0, [sp, #48]	; 0x30
   1daca:	2800      	cmp	r0, #0
   1dacc:	f000 818e 	beq.w	1ddec <cbvprintf+0xb94>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1dad0:	f10d 0365 	add.w	r3, sp, #101	; 0x65
   1dad4:	9300      	str	r3, [sp, #0]
   1dad6:	aa0e      	add	r2, sp, #56	; 0x38
   1dad8:	ab13      	add	r3, sp, #76	; 0x4c
   1dada:	2100      	movs	r1, #0
   1dadc:	f003 fcc6 	bl	2146c <encode_uint>
				conv->altform_0c = true;
   1dae0:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1dae4:	4602      	mov	r2, r0
				conv->altform_0c = true;
   1dae6:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   1daea:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   1daee:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
   1daf2:	2700      	movs	r7, #0
				conv->altform_0c = true;
   1daf4:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
				goto prec_int_pad0;
   1daf8:	e7ce      	b.n	1da98 <cbvprintf+0x840>
				store_count(conv, value->ptr, count);
   1dafa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
   1dafc:	2907      	cmp	r1, #7
   1dafe:	f63f adf6 	bhi.w	1d6ee <cbvprintf+0x496>
   1db02:	e8df f001 	tbb	[pc, r1]
   1db06:	040c      	.short	0x040c
   1db08:	08080c06 	.word	0x08080c06
   1db0c:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
   1db0e:	701e      	strb	r6, [r3, #0]
		break;
   1db10:	e5ed      	b.n	1d6ee <cbvprintf+0x496>
		*(short *)dp = (short)count;
   1db12:	801e      	strh	r6, [r3, #0]
		break;
   1db14:	e5eb      	b.n	1d6ee <cbvprintf+0x496>
		*(intmax_t *)dp = (intmax_t)count;
   1db16:	17f2      	asrs	r2, r6, #31
   1db18:	e9c3 6200 	strd	r6, r2, [r3]
		break;
   1db1c:	e5e7      	b.n	1d6ee <cbvprintf+0x496>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   1db1e:	601e      	str	r6, [r3, #0]
		break;
   1db20:	e5e5      	b.n	1d6ee <cbvprintf+0x496>
		*sign = '-';
   1db22:	272d      	movs	r7, #45	; 0x2d
   1db24:	e64e      	b.n	1d7c4 <cbvprintf+0x56c>
		*sign = '+';
   1db26:	272b      	movs	r7, #43	; 0x2b
   1db28:	e64c      	b.n	1d7c4 <cbvprintf+0x56c>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
   1db2a:	f240 70ff 	movw	r0, #2047	; 0x7ff
   1db2e:	4285      	cmp	r5, r0
   1db30:	d131      	bne.n	1db96 <cbvprintf+0x93e>
			if (isupper((int)c)) {
   1db32:	48b9      	ldr	r0, [pc, #740]	; (1de18 <cbvprintf+0xbc0>)
   1db34:	3201      	adds	r2, #1
   1db36:	b2d2      	uxtb	r2, r2
   1db38:	5c12      	ldrb	r2, [r2, r0]
		if (fract == 0) {
   1db3a:	430b      	orrs	r3, r1
   1db3c:	f002 0203 	and.w	r2, r2, #3
   1db40:	d11b      	bne.n	1db7a <cbvprintf+0x922>
			if (isupper((int)c)) {
   1db42:	2a01      	cmp	r2, #1
   1db44:	d111      	bne.n	1db6a <cbvprintf+0x912>
				*buf++ = 'I';
   1db46:	2349      	movs	r3, #73	; 0x49
   1db48:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'N';
   1db4c:	234e      	movs	r3, #78	; 0x4e
   1db4e:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'F';
   1db52:	2346      	movs	r3, #70	; 0x46
				*buf++ = 'n';
   1db54:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
		conv->flag_zero = false;
   1db58:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
		*bpe = buf;
   1db5c:	f10d 054f 	add.w	r5, sp, #79	; 0x4f
		conv->flag_zero = false;
   1db60:	f36f 1386 	bfc	r3, #6, #1
   1db64:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		return bps;
   1db68:	e708      	b.n	1d97c <cbvprintf+0x724>
				*buf++ = 'i';
   1db6a:	2369      	movs	r3, #105	; 0x69
   1db6c:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
   1db70:	236e      	movs	r3, #110	; 0x6e
   1db72:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'f';
   1db76:	2366      	movs	r3, #102	; 0x66
   1db78:	e7ec      	b.n	1db54 <cbvprintf+0x8fc>
			if (isupper((int)c)) {
   1db7a:	2a01      	cmp	r2, #1
				*buf++ = 'N';
   1db7c:	bf07      	ittee	eq
   1db7e:	234e      	moveq	r3, #78	; 0x4e
				*buf++ = 'A';
   1db80:	2241      	moveq	r2, #65	; 0x41
				*buf++ = 'n';
   1db82:	236e      	movne	r3, #110	; 0x6e
				*buf++ = 'a';
   1db84:	2261      	movne	r2, #97	; 0x61
				*buf++ = 'N';
   1db86:	bf0c      	ite	eq
   1db88:	f88d 304c 	strbeq.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
   1db8c:	f88d 304c 	strbne.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'a';
   1db90:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
   1db94:	e7de      	b.n	1db54 <cbvprintf+0x8fc>
	bool is_subnormal = (expo == 0) && (fract != 0);
   1db96:	2000      	movs	r0, #0
   1db98:	e622      	b.n	1d7e0 <cbvprintf+0x588>
				expo--;
   1db9a:	3d01      	subs	r5, #1
			while (((fract <<= 1) & BIT_63) == 0) {
   1db9c:	1849      	adds	r1, r1, r1
   1db9e:	415b      	adcs	r3, r3
   1dba0:	2b00      	cmp	r3, #0
   1dba2:	dafa      	bge.n	1db9a <cbvprintf+0x942>
   1dba4:	e9cd 1308 	strd	r1, r3, [sp, #32]
   1dba8:	e62e      	b.n	1d808 <cbvprintf+0x5b0>
			fract >>= 1;
   1dbaa:	0840      	lsrs	r0, r0, #1
   1dbac:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
   1dbb0:	0849      	lsrs	r1, r1, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   1dbb2:	f1b1 3f33 	cmp.w	r1, #858993459	; 0x33333333
   1dbb6:	46ac      	mov	ip, r5
			expo++;
   1dbb8:	f105 0501 	add.w	r5, r5, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   1dbbc:	d2f5      	bcs.n	1dbaa <cbvprintf+0x952>
		fract *= 5U;
   1dbbe:	fb0e f501 	mul.w	r5, lr, r1
   1dbc2:	fba0 010e 	umull	r0, r1, r0, lr
		decexp--;
   1dbc6:	3b01      	subs	r3, #1
		fract *= 5U;
   1dbc8:	4429      	add	r1, r5
		expo++;
   1dbca:	f10c 0502 	add.w	r5, ip, #2
		decexp--;
   1dbce:	f04f 0c01 	mov.w	ip, #1
   1dbd2:	e625      	b.n	1d820 <cbvprintf+0x5c8>
		fract += 2;
   1dbd4:	3002      	adds	r0, #2
   1dbd6:	f141 0100 	adc.w	r1, r1, #0
   1dbda:	e9cd 0108 	strd	r0, r1, [sp, #32]
		_ldiv5(&fract);
   1dbde:	a808      	add	r0, sp, #32
   1dbe0:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1dbe4:	f01e fedb 	bl	3c99e <_ldiv5>
		expo--;
   1dbe8:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
		decexp++;
   1dbec:	9b04      	ldr	r3, [sp, #16]
   1dbee:	9a03      	ldr	r2, [sp, #12]
		expo--;
   1dbf0:	3d01      	subs	r5, #1
		decexp++;
   1dbf2:	3301      	adds	r3, #1
			fract <<= 1;
   1dbf4:	1849      	adds	r1, r1, r1
   1dbf6:	4140      	adcs	r0, r0
		} while (!(fract & BIT_63));
   1dbf8:	2800      	cmp	r0, #0
			expo--;
   1dbfa:	f105 35ff 	add.w	r5, r5, #4294967295
		} while (!(fract & BIT_63));
   1dbfe:	daf9      	bge.n	1dbf4 <cbvprintf+0x99c>
   1dc00:	e9cd 1008 	strd	r1, r0, [sp, #32]
   1dc04:	e615      	b.n	1d832 <cbvprintf+0x5da>
   1dc06:	2300      	movs	r3, #0
   1dc08:	461d      	mov	r5, r3
   1dc0a:	e617      	b.n	1d83c <cbvprintf+0x5e4>
			c = 'f';
   1dc0c:	2266      	movs	r2, #102	; 0x66
			precision -= decexp;
   1dc0e:	eba8 0803 	sub.w	r8, r8, r3
   1dc12:	e638      	b.n	1d886 <cbvprintf+0x62e>
	bool prune_zero = false;
   1dc14:	2100      	movs	r1, #0
   1dc16:	e640      	b.n	1d89a <cbvprintf+0x642>
		decimals = precision + 1;
   1dc18:	f108 0101 	add.w	r1, r8, #1
	if (decimals > 16) {
   1dc1c:	2910      	cmp	r1, #16
   1dc1e:	bfa8      	it	ge
   1dc20:	2110      	movge	r1, #16
   1dc22:	2010      	movs	r0, #16
	uint64_t round = BIT64(59); /* 0.5 */
   1dc24:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
   1dc28:	460d      	mov	r5, r1
   1dc2a:	9007      	str	r0, [sp, #28]
	*v >>= 1;
   1dc2c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
	while (decimals--) {
   1dc30:	b9a5      	cbnz	r5, 1dc5c <cbvprintf+0xa04>
	fract += round;
   1dc32:	9d08      	ldr	r5, [sp, #32]
   1dc34:	1940      	adds	r0, r0, r5
   1dc36:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1dc38:	eb41 0105 	adc.w	r1, r1, r5
	if (fract >= BIT64(60)) {
   1dc3c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   1dc40:	d21b      	bcs.n	1dc7a <cbvprintf+0xa22>
	fract += round;
   1dc42:	e9cd 0108 	strd	r0, r1, [sp, #32]
	if (c == 'f') {
   1dc46:	2a66      	cmp	r2, #102	; 0x66
   1dc48:	f040 8098 	bne.w	1dd7c <cbvprintf+0xb24>
		if (decexp > 0) {
   1dc4c:	2b00      	cmp	r3, #0
   1dc4e:	dc23      	bgt.n	1dc98 <cbvprintf+0xa40>
			*buf++ = '0';
   1dc50:	2130      	movs	r1, #48	; 0x30
   1dc52:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
   1dc56:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
   1dc5a:	e02f      	b.n	1dcbc <cbvprintf+0xa64>
	*v >>= 1;
   1dc5c:	0840      	lsrs	r0, r0, #1
   1dc5e:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
   1dc62:	0849      	lsrs	r1, r1, #1
   1dc64:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	_ldiv5(v);
   1dc68:	a80a      	add	r0, sp, #40	; 0x28
   1dc6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1dc6e:	3d01      	subs	r5, #1
   1dc70:	f01e fe95 	bl	3c99e <_ldiv5>
   1dc74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
}
   1dc78:	e7d8      	b.n	1dc2c <cbvprintf+0x9d4>
	*v >>= 1;
   1dc7a:	0840      	lsrs	r0, r0, #1
   1dc7c:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
   1dc80:	0849      	lsrs	r1, r1, #1
   1dc82:	e9cd 0108 	strd	r0, r1, [sp, #32]
	_ldiv5(v);
   1dc86:	a808      	add	r0, sp, #32
   1dc88:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1dc8c:	f01e fe87 	bl	3c99e <_ldiv5>
		decexp++;
   1dc90:	9b05      	ldr	r3, [sp, #20]
   1dc92:	9a04      	ldr	r2, [sp, #16]
   1dc94:	3301      	adds	r3, #1
   1dc96:	e7d6      	b.n	1dc46 <cbvprintf+0x9ee>
	char *buf = bps;
   1dc98:	ad13      	add	r5, sp, #76	; 0x4c
			while (decexp > 0 && digit_count > 0) {
   1dc9a:	9907      	ldr	r1, [sp, #28]
   1dc9c:	2900      	cmp	r1, #0
   1dc9e:	dd0b      	ble.n	1dcb8 <cbvprintf+0xa60>
				*buf++ = _get_digit(&fract, &digit_count);
   1dca0:	a907      	add	r1, sp, #28
   1dca2:	a808      	add	r0, sp, #32
   1dca4:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1dca8:	f01e fe91 	bl	3c9ce <_get_digit>
			while (decexp > 0 && digit_count > 0) {
   1dcac:	9b05      	ldr	r3, [sp, #20]
   1dcae:	9a04      	ldr	r2, [sp, #16]
   1dcb0:	3b01      	subs	r3, #1
				*buf++ = _get_digit(&fract, &digit_count);
   1dcb2:	f805 0b01 	strb.w	r0, [r5], #1
			while (decexp > 0 && digit_count > 0) {
   1dcb6:	d1f0      	bne.n	1dc9a <cbvprintf+0xa42>
			conv->pad0_value = decexp;
   1dcb8:	930f      	str	r3, [sp, #60]	; 0x3c
			decexp = 0;
   1dcba:	2300      	movs	r3, #0
		if (conv->flag_hash || (precision > 0)) {
   1dcbc:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
   1dcc0:	0689      	lsls	r1, r1, #26
   1dcc2:	d402      	bmi.n	1dcca <cbvprintf+0xa72>
   1dcc4:	f1b8 0f00 	cmp.w	r8, #0
   1dcc8:	dd1d      	ble.n	1dd06 <cbvprintf+0xaae>
			*buf++ = '.';
   1dcca:	212e      	movs	r1, #46	; 0x2e
   1dccc:	f805 1b01 	strb.w	r1, [r5], #1
		if (decexp < 0 && precision > 0) {
   1dcd0:	b19b      	cbz	r3, 1dcfa <cbvprintf+0xaa2>
   1dcd2:	f1b8 0f00 	cmp.w	r8, #0
   1dcd6:	dd16      	ble.n	1dd06 <cbvprintf+0xaae>
			conv->pad0_value = -decexp;
   1dcd8:	4259      	negs	r1, r3
   1dcda:	4541      	cmp	r1, r8
   1dcdc:	bfa8      	it	ge
   1dcde:	4641      	movge	r1, r8
			conv->pad_postdp = (conv->pad0_value > 0);
   1dce0:	2900      	cmp	r1, #0
			conv->pad0_value = -decexp;
   1dce2:	910f      	str	r1, [sp, #60]	; 0x3c
			precision -= conv->pad0_value;
   1dce4:	eba8 0801 	sub.w	r8, r8, r1
			conv->pad_postdp = (conv->pad0_value > 0);
   1dce8:	bfd4      	ite	le
   1dcea:	2100      	movle	r1, #0
   1dcec:	2101      	movgt	r1, #1
   1dcee:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
   1dcf2:	f361 1045 	bfi	r0, r1, #5, #1
   1dcf6:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	while (precision > 0 && digit_count > 0) {
   1dcfa:	f1b8 0f00 	cmp.w	r8, #0
   1dcfe:	dd02      	ble.n	1dd06 <cbvprintf+0xaae>
   1dd00:	9907      	ldr	r1, [sp, #28]
   1dd02:	2900      	cmp	r1, #0
   1dd04:	dc55      	bgt.n	1ddb2 <cbvprintf+0xb5a>
	if (prune_zero) {
   1dd06:	9903      	ldr	r1, [sp, #12]
   1dd08:	2900      	cmp	r1, #0
   1dd0a:	d162      	bne.n	1ddd2 <cbvprintf+0xb7a>
	conv->pad0_pre_exp = precision;
   1dd0c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	if ((c == 'e') || (c == 'E')) {
   1dd10:	f002 01df 	and.w	r1, r2, #223	; 0xdf
   1dd14:	2945      	cmp	r1, #69	; 0x45
   1dd16:	d120      	bne.n	1dd5a <cbvprintf+0xb02>
		*buf++ = c;
   1dd18:	4629      	mov	r1, r5
		if (decexp < 0) {
   1dd1a:	2b00      	cmp	r3, #0
		*buf++ = c;
   1dd1c:	f801 2b02 	strb.w	r2, [r1], #2
			*buf++ = '-';
   1dd20:	bfb6      	itet	lt
   1dd22:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
   1dd24:	222b      	movge	r2, #43	; 0x2b
			decexp = -decexp;
   1dd26:	425b      	neglt	r3, r3
		if (decexp >= 100) {
   1dd28:	2b63      	cmp	r3, #99	; 0x63
   1dd2a:	706a      	strb	r2, [r5, #1]
   1dd2c:	dd09      	ble.n	1dd42 <cbvprintf+0xaea>
			*buf++ = (decexp / 100) + '0';
   1dd2e:	2064      	movs	r0, #100	; 0x64
   1dd30:	fbb3 f2f0 	udiv	r2, r3, r0
			decexp %= 100;
   1dd34:	fb00 3312 	mls	r3, r0, r2, r3
			*buf++ = (decexp / 100) + '0';
   1dd38:	f102 0c30 	add.w	ip, r2, #48	; 0x30
   1dd3c:	1ce9      	adds	r1, r5, #3
   1dd3e:	f885 c002 	strb.w	ip, [r5, #2]
		*buf++ = (decexp / 10) + '0';
   1dd42:	200a      	movs	r0, #10
   1dd44:	fbb3 f2f0 	udiv	r2, r3, r0
   1dd48:	460d      	mov	r5, r1
		*buf++ = (decexp % 10) + '0';
   1dd4a:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
   1dd4e:	f102 0c30 	add.w	ip, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
   1dd52:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
   1dd54:	f805 cb02 	strb.w	ip, [r5], #2
		*buf++ = (decexp % 10) + '0';
   1dd58:	704b      	strb	r3, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
   1dd5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1dd5c:	2b00      	cmp	r3, #0
   1dd5e:	dc43      	bgt.n	1dde8 <cbvprintf+0xb90>
   1dd60:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1dd62:	2b00      	cmp	r3, #0
   1dd64:	bfd4      	ite	le
   1dd66:	2300      	movle	r3, #0
   1dd68:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
   1dd6a:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   1dd6e:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
   1dd72:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
   1dd74:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	*buf = 0;
   1dd78:	702b      	strb	r3, [r5, #0]
	return bps;
   1dd7a:	e5ff      	b.n	1d97c <cbvprintf+0x724>
		*buf = _get_digit(&fract, &digit_count);
   1dd7c:	a907      	add	r1, sp, #28
   1dd7e:	a808      	add	r0, sp, #32
   1dd80:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1dd84:	f01e fe23 	bl	3c9ce <_get_digit>
		if (*buf++ != '0') {
   1dd88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		if (conv->flag_hash || (precision > 0)) {
   1dd8c:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		if (*buf++ != '0') {
   1dd90:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
   1dd92:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
			decexp--;
   1dd96:	bf18      	it	ne
   1dd98:	f103 33ff 	addne.w	r3, r3, #4294967295
		if (conv->flag_hash || (precision > 0)) {
   1dd9c:	0688      	lsls	r0, r1, #26
   1dd9e:	d402      	bmi.n	1dda6 <cbvprintf+0xb4e>
   1dda0:	f1b8 0f00 	cmp.w	r8, #0
   1dda4:	dd12      	ble.n	1ddcc <cbvprintf+0xb74>
			*buf++ = '.';
   1dda6:	212e      	movs	r1, #46	; 0x2e
   1dda8:	f10d 054e 	add.w	r5, sp, #78	; 0x4e
   1ddac:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
   1ddb0:	e7a3      	b.n	1dcfa <cbvprintf+0xaa2>
		*buf++ = _get_digit(&fract, &digit_count);
   1ddb2:	a907      	add	r1, sp, #28
   1ddb4:	a808      	add	r0, sp, #32
   1ddb6:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1ddba:	f01e fe08 	bl	3c9ce <_get_digit>
   1ddbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1ddc2:	f805 0b01 	strb.w	r0, [r5], #1
		precision--;
   1ddc6:	f108 38ff 	add.w	r8, r8, #4294967295
   1ddca:	e796      	b.n	1dcfa <cbvprintf+0xaa2>
		if (*buf++ != '0') {
   1ddcc:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
   1ddd0:	e799      	b.n	1dd06 <cbvprintf+0xaae>
		conv->pad0_pre_exp = 0;
   1ddd2:	2100      	movs	r1, #0
   1ddd4:	9110      	str	r1, [sp, #64]	; 0x40
		while (*--buf == '0') {
   1ddd6:	4628      	mov	r0, r5
   1ddd8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   1dddc:	2930      	cmp	r1, #48	; 0x30
   1ddde:	d0fa      	beq.n	1ddd6 <cbvprintf+0xb7e>
		if (*buf != '.') {
   1dde0:	292e      	cmp	r1, #46	; 0x2e
   1dde2:	bf18      	it	ne
   1dde4:	4605      	movne	r5, r0
   1dde6:	e793      	b.n	1dd10 <cbvprintf+0xab8>
		|| (conv->pad0_pre_exp > 0);
   1dde8:	2301      	movs	r3, #1
   1ddea:	e7be      	b.n	1dd6a <cbvprintf+0xb12>
			bpe = bps + 5;
   1ddec:	4d0b      	ldr	r5, [pc, #44]	; (1de1c <cbvprintf+0xbc4>)
		char sign = 0;
   1ddee:	4607      	mov	r7, r0
			bps = "(nil)";
   1ddf0:	1f6a      	subs	r2, r5, #5
   1ddf2:	e5c4      	b.n	1d97e <cbvprintf+0x726>
		} else if (conv->altform_0) {
   1ddf4:	0701      	lsls	r1, r0, #28
			nj_len += 1U;
   1ddf6:	bf48      	it	mi
   1ddf8:	3301      	addmi	r3, #1
   1ddfa:	e5c9      	b.n	1d990 <cbvprintf+0x738>
					OUTC(pad);
   1ddfc:	4651      	mov	r1, sl
   1ddfe:	4640      	mov	r0, r8
   1de00:	9203      	str	r2, [sp, #12]
   1de02:	47c8      	blx	r9
   1de04:	2800      	cmp	r0, #0
   1de06:	9a03      	ldr	r2, [sp, #12]
   1de08:	f6bf ade6 	bge.w	1d9d8 <cbvprintf+0x780>
#undef OUTS
#undef OUTC
}
   1de0c:	b01b      	add	sp, #108	; 0x6c
   1de0e:	ecbd 8b02 	vpop	{d8}
   1de12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1de16:	bf00      	nop
   1de18:	0004bc8b 	.word	0x0004bc8b
   1de1c:	0004407f 	.word	0x0004407f
				char pad = ' ';
   1de20:	f04f 0820 	mov.w	r8, #32
   1de24:	e5d7      	b.n	1d9d6 <cbvprintf+0x77e>
					pad = '0';
   1de26:	f04f 0830 	mov.w	r8, #48	; 0x30
   1de2a:	e5d4      	b.n	1d9d6 <cbvprintf+0x77e>
					OUTC(*cp++);
   1de2c:	4651      	mov	r1, sl
   1de2e:	47c8      	blx	r9
   1de30:	2800      	cmp	r0, #0
   1de32:	f6bf adf0 	bge.w	1da16 <cbvprintf+0x7be>
   1de36:	e7e9      	b.n	1de0c <cbvprintf+0xbb4>
					OUTC(*cp++);
   1de38:	4651      	mov	r1, sl
   1de3a:	9203      	str	r2, [sp, #12]
   1de3c:	47c8      	blx	r9
   1de3e:	2800      	cmp	r0, #0
   1de40:	9a03      	ldr	r2, [sp, #12]
   1de42:	dbe3      	blt.n	1de0c <cbvprintf+0xbb4>
				while (isdigit((int)*cp)) {
   1de44:	7810      	ldrb	r0, [r2, #0]
   1de46:	4b37      	ldr	r3, [pc, #220]	; (1df24 <cbvprintf+0xccc>)
   1de48:	4617      	mov	r7, r2
   1de4a:	5cc3      	ldrb	r3, [r0, r3]
   1de4c:	eb06 0802 	add.w	r8, r6, r2
   1de50:	075b      	lsls	r3, r3, #29
   1de52:	f102 0201 	add.w	r2, r2, #1
   1de56:	d4ef      	bmi.n	1de38 <cbvprintf+0xbe0>
				if (!conv->pad_postdp) {
   1de58:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
				pad_len = conv->pad0_value;
   1de5c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
				if (!conv->pad_postdp) {
   1de5e:	0699      	lsls	r1, r3, #26
   1de60:	d407      	bmi.n	1de72 <cbvprintf+0xc1a>
   1de62:	44b0      	add	r8, r6
					while (pad_len-- > 0) {
   1de64:	2e00      	cmp	r6, #0
   1de66:	eba8 0206 	sub.w	r2, r8, r6
   1de6a:	f106 36ff 	add.w	r6, r6, #4294967295
   1de6e:	dc0f      	bgt.n	1de90 <cbvprintf+0xc38>
   1de70:	4690      	mov	r8, r2
				if (*cp == '.') {
   1de72:	7838      	ldrb	r0, [r7, #0]
   1de74:	282e      	cmp	r0, #46	; 0x2e
   1de76:	d108      	bne.n	1de8a <cbvprintf+0xc32>
					OUTC(*cp++);
   1de78:	4651      	mov	r1, sl
   1de7a:	47c8      	blx	r9
						OUTC('0');
   1de7c:	2800      	cmp	r0, #0
   1de7e:	dbc5      	blt.n	1de0c <cbvprintf+0xbb4>
					while (pad_len-- > 0) {
   1de80:	2e00      	cmp	r6, #0
						OUTC('0');
   1de82:	f108 0801 	add.w	r8, r8, #1
					while (pad_len-- > 0) {
   1de86:	dc09      	bgt.n	1de9c <cbvprintf+0xc44>
					OUTC(*cp++);
   1de88:	3701      	adds	r7, #1
   1de8a:	eba8 0607 	sub.w	r6, r8, r7
   1de8e:	e00e      	b.n	1deae <cbvprintf+0xc56>
						OUTC('0');
   1de90:	4651      	mov	r1, sl
   1de92:	2030      	movs	r0, #48	; 0x30
   1de94:	47c8      	blx	r9
   1de96:	2800      	cmp	r0, #0
   1de98:	dae4      	bge.n	1de64 <cbvprintf+0xc0c>
   1de9a:	e7b7      	b.n	1de0c <cbvprintf+0xbb4>
						OUTC('0');
   1de9c:	4651      	mov	r1, sl
   1de9e:	2030      	movs	r0, #48	; 0x30
   1dea0:	47c8      	blx	r9
   1dea2:	3e01      	subs	r6, #1
   1dea4:	e7ea      	b.n	1de7c <cbvprintf+0xc24>
					OUTC(*cp++);
   1dea6:	4651      	mov	r1, sl
   1dea8:	47c8      	blx	r9
   1deaa:	2800      	cmp	r0, #0
   1deac:	dbae      	blt.n	1de0c <cbvprintf+0xbb4>
   1deae:	46b8      	mov	r8, r7
				while (isdigit((int)*cp)) {
   1deb0:	4a1c      	ldr	r2, [pc, #112]	; (1df24 <cbvprintf+0xccc>)
   1deb2:	19f3      	adds	r3, r6, r7
   1deb4:	f817 0b01 	ldrb.w	r0, [r7], #1
   1deb8:	5c12      	ldrb	r2, [r2, r0]
   1deba:	0752      	lsls	r2, r2, #29
   1debc:	d4f3      	bmi.n	1dea6 <cbvprintf+0xc4e>
   1debe:	e5b1      	b.n	1da24 <cbvprintf+0x7cc>
				OUTC('0');
   1dec0:	4651      	mov	r1, sl
   1dec2:	2030      	movs	r0, #48	; 0x30
   1dec4:	47c8      	blx	r9
   1dec6:	2800      	cmp	r0, #0
   1dec8:	dba0      	blt.n	1de0c <cbvprintf+0xbb4>
   1deca:	3601      	adds	r6, #1
   1decc:	e5ad      	b.n	1da2a <cbvprintf+0x7d2>
			if (conv->altform_0c | conv->altform_0) {
   1dece:	06d8      	lsls	r0, r3, #27
   1ded0:	d401      	bmi.n	1ded6 <cbvprintf+0xc7e>
   1ded2:	0719      	lsls	r1, r3, #28
   1ded4:	d507      	bpl.n	1dee6 <cbvprintf+0xc8e>
				OUTC('0');
   1ded6:	4651      	mov	r1, sl
   1ded8:	2030      	movs	r0, #48	; 0x30
   1deda:	9203      	str	r2, [sp, #12]
   1dedc:	47c8      	blx	r9
   1dede:	2800      	cmp	r0, #0
   1dee0:	db94      	blt.n	1de0c <cbvprintf+0xbb4>
   1dee2:	9a03      	ldr	r2, [sp, #12]
   1dee4:	3601      	adds	r6, #1
			if (conv->altform_0c) {
   1dee6:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   1deea:	06db      	lsls	r3, r3, #27
   1deec:	d508      	bpl.n	1df00 <cbvprintf+0xca8>
				OUTC(conv->specifier);
   1deee:	4651      	mov	r1, sl
   1def0:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   1def4:	9203      	str	r2, [sp, #12]
   1def6:	47c8      	blx	r9
   1def8:	2800      	cmp	r0, #0
   1defa:	db87      	blt.n	1de0c <cbvprintf+0xbb4>
   1defc:	9a03      	ldr	r2, [sp, #12]
   1defe:	3601      	adds	r6, #1
			while (pad_len-- > 0) {
   1df00:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   1df02:	4437      	add	r7, r6
   1df04:	1bbb      	subs	r3, r7, r6
   1df06:	2b00      	cmp	r3, #0
   1df08:	dc01      	bgt.n	1df0e <cbvprintf+0xcb6>
			OUTS(bps, bpe);
   1df0a:	462b      	mov	r3, r5
   1df0c:	e593      	b.n	1da36 <cbvprintf+0x7de>
				OUTC('0');
   1df0e:	4651      	mov	r1, sl
   1df10:	2030      	movs	r0, #48	; 0x30
   1df12:	9203      	str	r2, [sp, #12]
   1df14:	47c8      	blx	r9
   1df16:	2800      	cmp	r0, #0
   1df18:	f6ff af78 	blt.w	1de0c <cbvprintf+0xbb4>
   1df1c:	9a03      	ldr	r2, [sp, #12]
   1df1e:	3601      	adds	r6, #1
   1df20:	e7f0      	b.n	1df04 <cbvprintf+0xcac>
   1df22:	bf00      	nop
   1df24:	0004bc8c 	.word	0x0004bc8c

0001df28 <clock_settime>:
int clock_settime(clockid_t clock_id, const struct timespec *tp)
{
	struct timespec base;
	k_spinlock_key_t key;

	if (clock_id != CLOCK_REALTIME) {
   1df28:	2801      	cmp	r0, #1
{
   1df2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1df2c:	460e      	mov	r6, r1
	if (clock_id != CLOCK_REALTIME) {
   1df2e:	d006      	beq.n	1df3e <clock_settime+0x16>
		errno = EINVAL;
   1df30:	f01f fbfd 	bl	3d72e <__errno>
   1df34:	2316      	movs	r3, #22
   1df36:	6003      	str	r3, [r0, #0]
		return -1;
   1df38:	f04f 30ff 	mov.w	r0, #4294967295
	key = k_spin_lock(&rt_clock_base_lock);
	rt_clock_base = base;
	k_spin_unlock(&rt_clock_base_lock, key);

	return 0;
}
   1df3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		(void) arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t) ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
   1df3e:	f023 f8c1 	bl	410c4 <z_impl_k_uptime_ticks>
	int64_t delta = (int64_t)NSEC_PER_SEC * tp->tv_sec + tp->tv_nsec
   1df42:	4a33      	ldr	r2, [pc, #204]	; (1e010 <clock_settime+0xe8>)
   1df44:	6833      	ldr	r3, [r6, #0]
   1df46:	6874      	ldr	r4, [r6, #4]
   1df48:	fba3 3502 	umull	r3, r5, r3, r2
   1df4c:	68b6      	ldr	r6, [r6, #8]
   1df4e:	fb02 5504 	mla	r5, r2, r4, r5
   1df52:	199c      	adds	r4, r3, r6
			return ((t * to_hz + off) / from_hz);
		} else {
			/* Slower algorithm but input is first divided before being multiplied
			 * which prevents overflow of intermediate value.
			 */
			return (t / from_hz) * to_hz + ((t % from_hz) * to_hz + off) / from_hz;
   1df54:	ea4f 33d0 	mov.w	r3, r0, lsr #15
   1df58:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   1df5c:	eb45 75e6 	adc.w	r5, r5, r6, asr #31
   1df60:	fba3 3602 	umull	r3, r6, r3, r2
   1df64:	0bc9      	lsrs	r1, r1, #15
   1df66:	f3c0 000e 	ubfx	r0, r0, #0, #15
   1df6a:	fb02 6101 	mla	r1, r2, r1, r6
   1df6e:	fba0 0202 	umull	r0, r2, r0, r2
		- elapsed_nsecs;
   1df72:	1ae4      	subs	r4, r4, r3
   1df74:	ea4f 33d0 	mov.w	r3, r0, lsr #15
   1df78:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
   1df7c:	eb65 0501 	sbc.w	r5, r5, r1
   1df80:	1ae4      	subs	r4, r4, r3
   1df82:	f165 0500 	sbc.w	r5, r5, #0
	base.tv_sec = delta / NSEC_PER_SEC;
   1df86:	4620      	mov	r0, r4
   1df88:	a31f      	add	r3, pc, #124	; (adr r3, 1e008 <clock_settime+0xe0>)
   1df8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1df8e:	4629      	mov	r1, r5
   1df90:	f7fe ff5a 	bl	1ce48 <__aeabi_ldivmod>
	base.tv_nsec = delta % NSEC_PER_SEC;
   1df94:	a31c      	add	r3, pc, #112	; (adr r3, 1e008 <clock_settime+0xe0>)
   1df96:	e9d3 2300 	ldrd	r2, r3, [r3]
	base.tv_sec = delta / NSEC_PER_SEC;
   1df9a:	4607      	mov	r7, r0
   1df9c:	460e      	mov	r6, r1
	base.tv_nsec = delta % NSEC_PER_SEC;
   1df9e:	4620      	mov	r0, r4
   1dfa0:	4629      	mov	r1, r5
   1dfa2:	f7fe ff51 	bl	1ce48 <__aeabi_ldivmod>
   1dfa6:	4614      	mov	r4, r2
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   1dfa8:	f04f 0320 	mov.w	r3, #32
   1dfac:	f3ef 8511 	mrs	r5, BASEPRI
   1dfb0:	f383 8812 	msr	BASEPRI_MAX, r3
   1dfb4:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1dfb8:	4816      	ldr	r0, [pc, #88]	; (1e014 <clock_settime+0xec>)
   1dfba:	f018 fb01 	bl	365c0 <z_spin_lock_valid>
   1dfbe:	b940      	cbnz	r0, 1dfd2 <clock_settime+0xaa>
   1dfc0:	4915      	ldr	r1, [pc, #84]	; (1e018 <clock_settime+0xf0>)
   1dfc2:	4816      	ldr	r0, [pc, #88]	; (1e01c <clock_settime+0xf4>)
   1dfc4:	228e      	movs	r2, #142	; 0x8e
   1dfc6:	f01e fd39 	bl	3ca3c <assert_print>
   1dfca:	218e      	movs	r1, #142	; 0x8e
   1dfcc:	4812      	ldr	r0, [pc, #72]	; (1e018 <clock_settime+0xf0>)
   1dfce:	f01e fd2e 	bl	3ca2e <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
   1dfd2:	4810      	ldr	r0, [pc, #64]	; (1e014 <clock_settime+0xec>)
   1dfd4:	f018 fb12 	bl	365fc <z_spin_lock_set_owner>
	rt_clock_base = base;
   1dfd8:	4b11      	ldr	r3, [pc, #68]	; (1e020 <clock_settime+0xf8>)
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1dfda:	480e      	ldr	r0, [pc, #56]	; (1e014 <clock_settime+0xec>)
   1dfdc:	e9c3 7600 	strd	r7, r6, [r3]
   1dfe0:	609c      	str	r4, [r3, #8]
   1dfe2:	f018 fafb 	bl	365dc <z_spin_unlock_valid>
   1dfe6:	b940      	cbnz	r0, 1dffa <clock_settime+0xd2>
   1dfe8:	490b      	ldr	r1, [pc, #44]	; (1e018 <clock_settime+0xf0>)
   1dfea:	480c      	ldr	r0, [pc, #48]	; (1e01c <clock_settime+0xf4>)
   1dfec:	22b9      	movs	r2, #185	; 0xb9
   1dfee:	f01e fd25 	bl	3ca3c <assert_print>
   1dff2:	21b9      	movs	r1, #185	; 0xb9
   1dff4:	4808      	ldr	r0, [pc, #32]	; (1e018 <clock_settime+0xf0>)
   1dff6:	f01e fd1a 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   1dffa:	f385 8811 	msr	BASEPRI, r5
   1dffe:	f3bf 8f6f 	isb	sy
	return 0;
   1e002:	2000      	movs	r0, #0
   1e004:	e79a      	b.n	1df3c <clock_settime+0x14>
   1e006:	bf00      	nop
   1e008:	3b9aca00 	.word	0x3b9aca00
   1e00c:	00000000 	.word	0x00000000
   1e010:	3b9aca00 	.word	0x3b9aca00
   1e014:	200191e4 	.word	0x200191e4
   1e018:	0004402c 	.word	0x0004402c
   1e01c:	00043ff2 	.word	0x00043ff2
   1e020:	200153c0 	.word	0x200153c0
   1e024:	00000000 	.word	0x00000000

0001e028 <parse_edrx>:

	return 0;
}

int parse_edrx(const char *at_response, struct lte_lc_edrx_cfg *cfg)
{
   1e028:	b570      	push	{r4, r5, r6, lr}
   1e02a:	ed2d 8b02 	vpush	{d8}
	int err, tmp_int;
	uint8_t idx;
	struct at_param_list resp_list = {0};
   1e02e:	2300      	movs	r3, #0
{
   1e030:	b086      	sub	sp, #24
	struct at_param_list resp_list = {0};
   1e032:	e9cd 3304 	strd	r3, r3, [sp, #16]
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
   1e036:	2304      	movs	r3, #4
{
   1e038:	460d      	mov	r5, r1
	float ptw_multiplier;

	if ((at_response == NULL) || (cfg == NULL)) {
   1e03a:	4606      	mov	r6, r0
	size_t len = sizeof(tmp_buf) - 1;
   1e03c:	9301      	str	r3, [sp, #4]
	if ((at_response == NULL) || (cfg == NULL)) {
   1e03e:	2800      	cmp	r0, #0
   1e040:	f000 80a4 	beq.w	1e18c <parse_edrx+0x164>
   1e044:	2900      	cmp	r1, #0
   1e046:	f000 80a1 	beq.w	1e18c <parse_edrx+0x164>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
   1e04a:	2106      	movs	r1, #6
   1e04c:	a804      	add	r0, sp, #16
   1e04e:	f021 f870 	bl	3f132 <at_params_list_init>
	if (err) {
   1e052:	4604      	mov	r4, r0
   1e054:	b148      	cbz	r0, 1e06a <parse_edrx+0x42>
		LOG_ERR("Could not init AT params list, error: %d", err);
   1e056:	4602      	mov	r2, r0
   1e058:	2145      	movs	r1, #69	; 0x45
   1e05a:	4851      	ldr	r0, [pc, #324]	; (1e1a0 <parse_edrx+0x178>)
   1e05c:	f01e fd28 	bl	3cab0 <z_log_minimal_printk>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   1e060:	4620      	mov	r0, r4
   1e062:	b006      	add	sp, #24
   1e064:	ecbd 8b02 	vpop	{d8}
   1e068:	bd70      	pop	{r4, r5, r6, pc}
	err = at_parser_params_from_str(at_response,
   1e06a:	4601      	mov	r1, r0
   1e06c:	aa04      	add	r2, sp, #16
   1e06e:	4630      	mov	r0, r6
   1e070:	f021 f85c 	bl	3f12c <at_parser_params_from_str>
	if (err) {
   1e074:	4604      	mov	r4, r0
   1e076:	b140      	cbz	r0, 1e08a <parse_edrx+0x62>
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
   1e078:	2145      	movs	r1, #69	; 0x45
   1e07a:	4602      	mov	r2, r0
   1e07c:	4849      	ldr	r0, [pc, #292]	; (1e1a4 <parse_edrx+0x17c>)
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   1e07e:	f01e fd17 	bl	3cab0 <z_log_minimal_printk>
	at_params_list_free(&resp_list);
   1e082:	a804      	add	r0, sp, #16
   1e084:	f021 f868 	bl	3f158 <at_params_list_free>
	return err;
   1e088:	e7ea      	b.n	1e060 <parse_edrx+0x38>
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
   1e08a:	2103      	movs	r1, #3
   1e08c:	ab01      	add	r3, sp, #4
   1e08e:	aa02      	add	r2, sp, #8
   1e090:	a804      	add	r0, sp, #16
   1e092:	f021 f95a 	bl	3f34a <at_params_string_get>
	if (err) {
   1e096:	4604      	mov	r4, r0
   1e098:	b118      	cbz	r0, 1e0a2 <parse_edrx+0x7a>
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   1e09a:	4602      	mov	r2, r0
   1e09c:	2145      	movs	r1, #69	; 0x45
   1e09e:	4842      	ldr	r0, [pc, #264]	; (1e1a8 <parse_edrx+0x180>)
   1e0a0:	e7ed      	b.n	1e07e <parse_edrx+0x56>
	tmp_buf[len] = '\0';
   1e0a2:	9b01      	ldr	r3, [sp, #4]
   1e0a4:	aa06      	add	r2, sp, #24
   1e0a6:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
   1e0a8:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
   1e0aa:	f803 0c10 	strb.w	r0, [r3, #-16]
	idx = strtoul(tmp_buf, NULL, 2);
   1e0ae:	2202      	movs	r2, #2
   1e0b0:	a802      	add	r0, sp, #8
   1e0b2:	f01c fcd9 	bl	3aa68 <strtoul>
	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
   1e0b6:	466a      	mov	r2, sp
   1e0b8:	2101      	movs	r1, #1
	idx = strtoul(tmp_buf, NULL, 2);
   1e0ba:	b2c6      	uxtb	r6, r0
	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
   1e0bc:	a804      	add	r0, sp, #16
   1e0be:	f021 f90f 	bl	3f2e0 <at_params_int_get>
	if (err) {
   1e0c2:	4604      	mov	r4, r0
   1e0c4:	b118      	cbz	r0, 1e0ce <parse_edrx+0xa6>
		LOG_ERR("Failed to get LTE mode, error: %d", err);
   1e0c6:	4602      	mov	r2, r0
   1e0c8:	2145      	movs	r1, #69	; 0x45
   1e0ca:	4838      	ldr	r0, [pc, #224]	; (1e1ac <parse_edrx+0x184>)
   1e0cc:	e7d7      	b.n	1e07e <parse_edrx+0x56>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   1e0ce:	9b00      	ldr	r3, [sp, #0]
   1e0d0:	2b04      	cmp	r3, #4
   1e0d2:	d016      	beq.n	1e102 <parse_edrx+0xda>
   1e0d4:	2b05      	cmp	r3, #5
   1e0d6:	d007      	beq.n	1e0e8 <parse_edrx+0xc0>
   1e0d8:	7028      	strb	r0, [r5, #0]
		LOG_WRN("Active LTE mode could not be determined");
   1e0da:	2157      	movs	r1, #87	; 0x57
   1e0dc:	4834      	ldr	r0, [pc, #208]	; (1e1b0 <parse_edrx+0x188>)
   1e0de:	f01e fce7 	bl	3cab0 <z_log_minimal_printk>
		return -ENOTCONN;
   1e0e2:	f06f 047f 	mvn.w	r4, #127	; 0x7f
		goto clean_exit;
   1e0e6:	e7cc      	b.n	1e082 <parse_edrx+0x5a>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   1e0e8:	2309      	movs	r3, #9
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   1e0ea:	2e0f      	cmp	r6, #15
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   1e0ec:	702b      	strb	r3, [r5, #0]
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   1e0ee:	d92a      	bls.n	1e146 <parse_edrx+0x11e>
		LOG_ERR("Failed to get eDRX value, error; %d", err);
   1e0f0:	f06f 0215 	mvn.w	r2, #21
   1e0f4:	2145      	movs	r1, #69	; 0x45
   1e0f6:	482f      	ldr	r0, [pc, #188]	; (1e1b4 <parse_edrx+0x18c>)
		LOG_ERR("Invalid PTW lookup index: %d", idx);
   1e0f8:	f01e fcda 	bl	3cab0 <z_log_minimal_printk>
		err = -EINVAL;
   1e0fc:	f06f 0415 	mvn.w	r4, #21
		goto clean_exit;
   1e100:	e7bf      	b.n	1e082 <parse_edrx+0x5a>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   1e102:	2307      	movs	r3, #7
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   1e104:	2e0f      	cmp	r6, #15
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   1e106:	702b      	strb	r3, [r5, #0]
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   1e108:	d8f2      	bhi.n	1e0f0 <parse_edrx+0xc8>
		*ptw_multiplier = 1.28;
   1e10a:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 1e1b8 <parse_edrx+0x190>
		multiplier = edrx_lookup_ltem[idx];
   1e10e:	4b2b      	ldr	r3, [pc, #172]	; (1e1bc <parse_edrx+0x194>)
   1e110:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   1e114:	b1e8      	cbz	r0, 1e152 <parse_edrx+0x12a>
   1e116:	f7fe fae5 	bl	1c6e4 <__aeabi_i2d>
   1e11a:	a31f      	add	r3, pc, #124	; (adr r3, 1e198 <parse_edrx+0x170>)
   1e11c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e120:	f7fe fb4a 	bl	1c7b8 <__aeabi_dmul>
   1e124:	f7fe fe40 	bl	1cda8 <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
   1e128:	2104      	movs	r1, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   1e12a:	6068      	str	r0, [r5, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   1e12c:	eb0d 0301 	add.w	r3, sp, r1
   1e130:	aa02      	add	r2, sp, #8
   1e132:	a804      	add	r0, sp, #16
	len = sizeof(tmp_buf) - 1;
   1e134:	9101      	str	r1, [sp, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   1e136:	f021 f908 	bl	3f34a <at_params_string_get>
	if (err) {
   1e13a:	4604      	mov	r4, r0
   1e13c:	b158      	cbz	r0, 1e156 <parse_edrx+0x12e>
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
   1e13e:	4602      	mov	r2, r0
   1e140:	2145      	movs	r1, #69	; 0x45
   1e142:	481f      	ldr	r0, [pc, #124]	; (1e1c0 <parse_edrx+0x198>)
   1e144:	e79b      	b.n	1e07e <parse_edrx+0x56>
		multiplier = edrx_lookup_nbiot[idx];
   1e146:	4b1f      	ldr	r3, [pc, #124]	; (1e1c4 <parse_edrx+0x19c>)
		*ptw_multiplier = 2.56;
   1e148:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 1e1c8 <parse_edrx+0x1a0>
		multiplier = edrx_lookup_nbiot[idx];
   1e14c:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
		break;
   1e150:	e7e0      	b.n	1e114 <parse_edrx+0xec>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   1e152:	481e      	ldr	r0, [pc, #120]	; (1e1cc <parse_edrx+0x1a4>)
   1e154:	e7e8      	b.n	1e128 <parse_edrx+0x100>
	tmp_buf[len] = '\0';
   1e156:	9b01      	ldr	r3, [sp, #4]
   1e158:	aa06      	add	r2, sp, #24
   1e15a:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
   1e15c:	4601      	mov	r1, r0
   1e15e:	2202      	movs	r2, #2
	tmp_buf[len] = '\0';
   1e160:	f803 0c10 	strb.w	r0, [r3, #-16]
	idx = strtoul(tmp_buf, NULL, 2);
   1e164:	a802      	add	r0, sp, #8
   1e166:	f01c fc7f 	bl	3aa68 <strtoul>
   1e16a:	b2c2      	uxtb	r2, r0
	if (idx > 15) {
   1e16c:	2a0f      	cmp	r2, #15
   1e16e:	d902      	bls.n	1e176 <parse_edrx+0x14e>
		LOG_ERR("Invalid PTW lookup index: %d", idx);
   1e170:	2145      	movs	r1, #69	; 0x45
   1e172:	4817      	ldr	r0, [pc, #92]	; (1e1d0 <parse_edrx+0x1a8>)
   1e174:	e7c0      	b.n	1e0f8 <parse_edrx+0xd0>
	idx += 1;
   1e176:	3201      	adds	r2, #1
	cfg->ptw = idx * ptw_multiplier;
   1e178:	b2d2      	uxtb	r2, r2
   1e17a:	ee07 2a90 	vmov	s15, r2
   1e17e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1e182:	ee67 7a88 	vmul.f32	s15, s15, s16
   1e186:	edc5 7a02 	vstr	s15, [r5, #8]
	LOG_DBG("eDRX value for %s: %d.%02d, PTW: %d.%02d",
   1e18a:	e77a      	b.n	1e082 <parse_edrx+0x5a>
		return -EINVAL;
   1e18c:	f06f 0415 	mvn.w	r4, #21
   1e190:	e766      	b.n	1e060 <parse_edrx+0x38>
   1e192:	bf00      	nop
   1e194:	f3af 8000 	nop.w
   1e198:	47ae147b 	.word	0x47ae147b
   1e19c:	40247ae1 	.word	0x40247ae1
   1e1a0:	00045aa6 	.word	0x00045aa6
   1e1a4:	00045ad4 	.word	0x00045ad4
   1e1a8:	00045b05 	.word	0x00045b05
   1e1ac:	00045b36 	.word	0x00045b36
   1e1b0:	00045b5d 	.word	0x00045b5d
   1e1b4:	00045b8a 	.word	0x00045b8a
   1e1b8:	3fa3d70a 	.word	0x3fa3d70a
   1e1bc:	00043454 	.word	0x00043454
   1e1c0:	00045bb3 	.word	0x00045bb3
   1e1c4:	00043474 	.word	0x00043474
   1e1c8:	4023d70a 	.word	0x4023d70a
   1e1cc:	40a3d70a 	.word	0x40a3d70a
   1e1d0:	00045be3 	.word	0x00045be3
   1e1d4:	00000000 	.word	0x00000000

0001e1d8 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
   1e1d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e1dc:	4606      	mov	r6, r0
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1e1de:	460c      	mov	r4, r1
{
   1e1e0:	b093      	sub	sp, #76	; 0x4c
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1e1e2:	b909      	cbnz	r1, 1e1e8 <parse_value+0x10>
    if (head != NULL)
    {
        cJSON_Delete(head);
    }

    return false;
   1e1e4:	2000      	movs	r0, #0
   1e1e6:	e024      	b.n	1e232 <parse_value+0x5a>
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1e1e8:	6808      	ldr	r0, [r1, #0]
   1e1ea:	2800      	cmp	r0, #0
   1e1ec:	d0fa      	beq.n	1e1e4 <parse_value+0xc>
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
   1e1ee:	688b      	ldr	r3, [r1, #8]
   1e1f0:	6862      	ldr	r2, [r4, #4]
   1e1f2:	1d19      	adds	r1, r3, #4
   1e1f4:	4291      	cmp	r1, r2
   1e1f6:	d80b      	bhi.n	1e210 <parse_value+0x38>
   1e1f8:	2204      	movs	r2, #4
   1e1fa:	4995      	ldr	r1, [pc, #596]	; (1e450 <parse_value+0x278>)
   1e1fc:	4418      	add	r0, r3
   1e1fe:	f023 fac4 	bl	4178a <strncmp>
   1e202:	b928      	cbnz	r0, 1e210 <parse_value+0x38>
        item->type = cJSON_NULL;
   1e204:	2304      	movs	r3, #4
   1e206:	60f3      	str	r3, [r6, #12]
        input_buffer->offset += 4;
   1e208:	68a3      	ldr	r3, [r4, #8]
   1e20a:	3304      	adds	r3, #4
    input_buffer->offset++;
   1e20c:	60a3      	str	r3, [r4, #8]
   1e20e:	e087      	b.n	1e320 <parse_value+0x148>
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
   1e210:	68a3      	ldr	r3, [r4, #8]
   1e212:	6862      	ldr	r2, [r4, #4]
   1e214:	1d59      	adds	r1, r3, #5
   1e216:	4291      	cmp	r1, r2
   1e218:	d80e      	bhi.n	1e238 <parse_value+0x60>
   1e21a:	6820      	ldr	r0, [r4, #0]
   1e21c:	2205      	movs	r2, #5
   1e21e:	498d      	ldr	r1, [pc, #564]	; (1e454 <parse_value+0x27c>)
   1e220:	4418      	add	r0, r3
   1e222:	f023 fab2 	bl	4178a <strncmp>
   1e226:	b938      	cbnz	r0, 1e238 <parse_value+0x60>
        item->type = cJSON_False;
   1e228:	2001      	movs	r0, #1
        input_buffer->offset += 5;
   1e22a:	68a2      	ldr	r2, [r4, #8]
        item->type = cJSON_False;
   1e22c:	60f0      	str	r0, [r6, #12]
        input_buffer->offset += 5;
   1e22e:	3205      	adds	r2, #5
        input_buffer->offset += 4;
   1e230:	60a2      	str	r2, [r4, #8]
}
   1e232:	b013      	add	sp, #76	; 0x4c
   1e234:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
   1e238:	68a3      	ldr	r3, [r4, #8]
   1e23a:	6862      	ldr	r2, [r4, #4]
   1e23c:	1d19      	adds	r1, r3, #4
   1e23e:	4291      	cmp	r1, r2
   1e240:	d80d      	bhi.n	1e25e <parse_value+0x86>
   1e242:	6820      	ldr	r0, [r4, #0]
   1e244:	2204      	movs	r2, #4
   1e246:	4984      	ldr	r1, [pc, #528]	; (1e458 <parse_value+0x280>)
   1e248:	4418      	add	r0, r3
   1e24a:	f023 fa9e 	bl	4178a <strncmp>
   1e24e:	b930      	cbnz	r0, 1e25e <parse_value+0x86>
        item->type = cJSON_True;
   1e250:	2302      	movs	r3, #2
        item->valueint = 1;
   1e252:	2001      	movs	r0, #1
        input_buffer->offset += 4;
   1e254:	68a2      	ldr	r2, [r4, #8]
        item->type = cJSON_True;
   1e256:	60f3      	str	r3, [r6, #12]
        item->valueint = 1;
   1e258:	6170      	str	r0, [r6, #20]
        input_buffer->offset += 4;
   1e25a:	3204      	adds	r2, #4
   1e25c:	e7e8      	b.n	1e230 <parse_value+0x58>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
   1e25e:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
   1e262:	4283      	cmp	r3, r0
   1e264:	d2be      	bcs.n	1e1e4 <parse_value+0xc>
   1e266:	6821      	ldr	r1, [r4, #0]
   1e268:	5cca      	ldrb	r2, [r1, r3]
   1e26a:	18cf      	adds	r7, r1, r3
   1e26c:	2a22      	cmp	r2, #34	; 0x22
   1e26e:	d106      	bne.n	1e27e <parse_value+0xa6>
        return parse_string(item, input_buffer);
   1e270:	4621      	mov	r1, r4
   1e272:	4630      	mov	r0, r6
}
   1e274:	b013      	add	sp, #76	; 0x4c
   1e276:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return parse_string(item, input_buffer);
   1e27a:	f013 b9c5 	b.w	31608 <parse_string>
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
   1e27e:	2a2d      	cmp	r2, #45	; 0x2d
   1e280:	d003      	beq.n	1e28a <parse_value+0xb2>
   1e282:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
   1e286:	2d09      	cmp	r5, #9
   1e288:	d85f      	bhi.n	1e34a <parse_value+0x172>
    unsigned char *after_end = NULL;
   1e28a:	2200      	movs	r2, #0
   1e28c:	9201      	str	r2, [sp, #4]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1e28e:	2900      	cmp	r1, #0
   1e290:	d0a8      	beq.n	1e1e4 <parse_value+0xc>
   1e292:	a902      	add	r1, sp, #8
   1e294:	460d      	mov	r5, r1
                number_c_string[i] = decimal_point;
   1e296:	f04f 0e2e 	mov.w	lr, #46	; 0x2e
   1e29a:	1ac3      	subs	r3, r0, r3
        switch (buffer_at_offset(input_buffer)[i])
   1e29c:	f817 0b01 	ldrb.w	r0, [r7], #1
   1e2a0:	2839      	cmp	r0, #57	; 0x39
   1e2a2:	d810      	bhi.n	1e2c6 <parse_value+0xee>
   1e2a4:	282a      	cmp	r0, #42	; 0x2a
   1e2a6:	d91b      	bls.n	1e2e0 <parse_value+0x108>
   1e2a8:	f1a0 0c2b 	sub.w	ip, r0, #43	; 0x2b
   1e2ac:	f1bc 0f0e 	cmp.w	ip, #14
   1e2b0:	d816      	bhi.n	1e2e0 <parse_value+0x108>
   1e2b2:	e8df f00c 	tbb	[pc, ip]
   1e2b6:	150d      	.short	0x150d
   1e2b8:	0d15370d 	.word	0x0d15370d
   1e2bc:	0d0d0d0d 	.word	0x0d0d0d0d
   1e2c0:	0d0d0d0d 	.word	0x0d0d0d0d
   1e2c4:	0d          	.byte	0x0d
   1e2c5:	00          	.byte	0x00
   1e2c6:	f000 0cdf 	and.w	ip, r0, #223	; 0xdf
   1e2ca:	f1bc 0f45 	cmp.w	ip, #69	; 0x45
   1e2ce:	d107      	bne.n	1e2e0 <parse_value+0x108>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
   1e2d0:	7008      	strb	r0, [r1, #0]
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
   1e2d2:	3201      	adds	r2, #1
   1e2d4:	2a3f      	cmp	r2, #63	; 0x3f
   1e2d6:	f101 0101 	add.w	r1, r1, #1
   1e2da:	d001      	beq.n	1e2e0 <parse_value+0x108>
   1e2dc:	429a      	cmp	r2, r3
   1e2de:	d1dd      	bne.n	1e29c <parse_value+0xc4>
    number_c_string[i] = '\0';
   1e2e0:	ab12      	add	r3, sp, #72	; 0x48
   1e2e2:	441a      	add	r2, r3
   1e2e4:	2300      	movs	r3, #0
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1e2e6:	4628      	mov	r0, r5
    number_c_string[i] = '\0';
   1e2e8:	f802 3c40 	strb.w	r3, [r2, #-64]
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1e2ec:	a901      	add	r1, sp, #4
   1e2ee:	f01c fa11 	bl	3a714 <strtod>
    if (number_c_string == after_end)
   1e2f2:	9f01      	ldr	r7, [sp, #4]
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1e2f4:	4680      	mov	r8, r0
    if (number_c_string == after_end)
   1e2f6:	42af      	cmp	r7, r5
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1e2f8:	4689      	mov	r9, r1
    if (number_c_string == after_end)
   1e2fa:	f43f af73 	beq.w	1e1e4 <parse_value+0xc>
    if (number >= INT_MAX)
   1e2fe:	a352      	add	r3, pc, #328	; (adr r3, 1e448 <parse_value+0x270>)
   1e300:	e9d3 2300 	ldrd	r2, r3, [r3]
    item->valuedouble = number;
   1e304:	e9c6 8906 	strd	r8, r9, [r6, #24]
    if (number >= INT_MAX)
   1e308:	f7fe fcdc 	bl	1ccc4 <__aeabi_dcmpge>
   1e30c:	b168      	cbz	r0, 1e32a <parse_value+0x152>
        item->valueint = INT_MAX;
   1e30e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        item->valueint = INT_MIN;
   1e312:	6173      	str	r3, [r6, #20]
    item->type = cJSON_Number;
   1e314:	2308      	movs	r3, #8
    input_buffer->offset += (size_t)(after_end - number_c_string);
   1e316:	1b7d      	subs	r5, r7, r5
   1e318:	68a7      	ldr	r7, [r4, #8]
    item->type = cJSON_Number;
   1e31a:	60f3      	str	r3, [r6, #12]
    input_buffer->offset += (size_t)(after_end - number_c_string);
   1e31c:	443d      	add	r5, r7
   1e31e:	60a5      	str	r5, [r4, #8]
    return true;
   1e320:	2001      	movs	r0, #1
   1e322:	e786      	b.n	1e232 <parse_value+0x5a>
                number_c_string[i] = decimal_point;
   1e324:	f881 e000 	strb.w	lr, [r1]
                break;
   1e328:	e7d3      	b.n	1e2d2 <parse_value+0xfa>
    else if (number <= (double)INT_MIN)
   1e32a:	2200      	movs	r2, #0
   1e32c:	4640      	mov	r0, r8
   1e32e:	4649      	mov	r1, r9
   1e330:	4b4a      	ldr	r3, [pc, #296]	; (1e45c <parse_value+0x284>)
   1e332:	f7fe fcbd 	bl	1ccb0 <__aeabi_dcmple>
   1e336:	b110      	cbz	r0, 1e33e <parse_value+0x166>
        item->valueint = INT_MIN;
   1e338:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1e33c:	e7e9      	b.n	1e312 <parse_value+0x13a>
        item->valueint = (int)number;
   1e33e:	4640      	mov	r0, r8
   1e340:	4649      	mov	r1, r9
   1e342:	f7fe fce9 	bl	1cd18 <__aeabi_d2iz>
   1e346:	6170      	str	r0, [r6, #20]
   1e348:	e7e4      	b.n	1e314 <parse_value+0x13c>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
   1e34a:	2a5b      	cmp	r2, #91	; 0x5b
   1e34c:	d153      	bne.n	1e3f6 <parse_value+0x21e>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   1e34e:	68e2      	ldr	r2, [r4, #12]
   1e350:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   1e354:	f4bf af46 	bcs.w	1e1e4 <parse_value+0xc>
    input_buffer->depth++;
   1e358:	3201      	adds	r2, #1
   1e35a:	60e2      	str	r2, [r4, #12]
    if (buffer_at_offset(input_buffer)[0] != '[')
   1e35c:	5cca      	ldrb	r2, [r1, r3]
   1e35e:	2a5b      	cmp	r2, #91	; 0x5b
   1e360:	f47f af40 	bne.w	1e1e4 <parse_value+0xc>
    input_buffer->offset++;
   1e364:	3301      	adds	r3, #1
   1e366:	60a3      	str	r3, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   1e368:	4620      	mov	r0, r4
   1e36a:	f021 fb1e 	bl	3f9aa <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
   1e36e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1e372:	4293      	cmp	r3, r2
   1e374:	d263      	bcs.n	1e43e <parse_value+0x266>
   1e376:	6822      	ldr	r2, [r4, #0]
   1e378:	5cd2      	ldrb	r2, [r2, r3]
   1e37a:	2a5d      	cmp	r2, #93	; 0x5d
   1e37c:	d10c      	bne.n	1e398 <parse_value+0x1c0>
    cJSON *current_item = NULL;
   1e37e:	2500      	movs	r5, #0
    cJSON *head = NULL; /* head of the linked list */
   1e380:	462f      	mov	r7, r5
    input_buffer->depth--;
   1e382:	68e3      	ldr	r3, [r4, #12]
   1e384:	3b01      	subs	r3, #1
   1e386:	60e3      	str	r3, [r4, #12]
    if (head != NULL) {
   1e388:	b107      	cbz	r7, 1e38c <parse_value+0x1b4>
        head->prev = current_item;
   1e38a:	607d      	str	r5, [r7, #4]
    item->type = cJSON_Array;
   1e38c:	2320      	movs	r3, #32
    item->child = head;
   1e38e:	e9c6 7302 	strd	r7, r3, [r6, #8]
    input_buffer->offset++;
   1e392:	68a3      	ldr	r3, [r4, #8]
   1e394:	3301      	adds	r3, #1
   1e396:	e739      	b.n	1e20c <parse_value+0x34>
    cJSON *current_item = NULL;
   1e398:	2500      	movs	r5, #0
    cJSON *head = NULL; /* head of the linked list */
   1e39a:	462f      	mov	r7, r5
    input_buffer->offset--;
   1e39c:	3b01      	subs	r3, #1
   1e39e:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   1e3a0:	6920      	ldr	r0, [r4, #16]
   1e3a2:	f021 fb84 	bl	3faae <cJSON_New_Item.isra.0>
        if (new_item == NULL)
   1e3a6:	46a8      	mov	r8, r5
   1e3a8:	4605      	mov	r5, r0
   1e3aa:	2800      	cmp	r0, #0
   1e3ac:	f000 809d 	beq.w	1e4ea <parse_value+0x312>
        if (head == NULL)
   1e3b0:	b1ff      	cbz	r7, 1e3f2 <parse_value+0x21a>
            current_item->next = new_item;
   1e3b2:	f8c8 0000 	str.w	r0, [r8]
            new_item->prev = current_item;
   1e3b6:	f8c0 8004 	str.w	r8, [r0, #4]
        input_buffer->offset++;
   1e3ba:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1e3bc:	4620      	mov	r0, r4
        input_buffer->offset++;
   1e3be:	3301      	adds	r3, #1
   1e3c0:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1e3c2:	f021 faf2 	bl	3f9aa <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   1e3c6:	4621      	mov	r1, r4
   1e3c8:	4628      	mov	r0, r5
   1e3ca:	f7ff ff05 	bl	1e1d8 <parse_value>
   1e3ce:	2800      	cmp	r0, #0
   1e3d0:	f000 808e 	beq.w	1e4f0 <parse_value+0x318>
        buffer_skip_whitespace(input_buffer);
   1e3d4:	4620      	mov	r0, r4
   1e3d6:	f021 fae8 	bl	3f9aa <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   1e3da:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1e3de:	4293      	cmp	r3, r2
   1e3e0:	f080 8086 	bcs.w	1e4f0 <parse_value+0x318>
   1e3e4:	6822      	ldr	r2, [r4, #0]
   1e3e6:	5cd3      	ldrb	r3, [r2, r3]
   1e3e8:	2b2c      	cmp	r3, #44	; 0x2c
   1e3ea:	d0d9      	beq.n	1e3a0 <parse_value+0x1c8>
    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
   1e3ec:	2b5d      	cmp	r3, #93	; 0x5d
   1e3ee:	d17f      	bne.n	1e4f0 <parse_value+0x318>
   1e3f0:	e7c7      	b.n	1e382 <parse_value+0x1aa>
   1e3f2:	4607      	mov	r7, r0
   1e3f4:	e7e1      	b.n	1e3ba <parse_value+0x1e2>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
   1e3f6:	2a7b      	cmp	r2, #123	; 0x7b
   1e3f8:	f47f aef4 	bne.w	1e1e4 <parse_value+0xc>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   1e3fc:	68e2      	ldr	r2, [r4, #12]
   1e3fe:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   1e402:	f4bf aeef 	bcs.w	1e1e4 <parse_value+0xc>
    input_buffer->depth++;
   1e406:	3201      	adds	r2, #1
   1e408:	60e2      	str	r2, [r4, #12]
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
   1e40a:	5cca      	ldrb	r2, [r1, r3]
   1e40c:	2a7b      	cmp	r2, #123	; 0x7b
   1e40e:	f47f aee9 	bne.w	1e1e4 <parse_value+0xc>
    input_buffer->offset++;
   1e412:	3301      	adds	r3, #1
   1e414:	60a3      	str	r3, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   1e416:	4620      	mov	r0, r4
   1e418:	f021 fac7 	bl	3f9aa <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
   1e41c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1e420:	4293      	cmp	r3, r2
   1e422:	d20c      	bcs.n	1e43e <parse_value+0x266>
   1e424:	6822      	ldr	r2, [r4, #0]
   1e426:	5cd2      	ldrb	r2, [r2, r3]
   1e428:	2a7d      	cmp	r2, #125	; 0x7d
   1e42a:	d119      	bne.n	1e460 <parse_value+0x288>
    cJSON *current_item = NULL;
   1e42c:	2500      	movs	r5, #0
    cJSON *head = NULL; /* linked list head */
   1e42e:	462f      	mov	r7, r5
    input_buffer->depth--;
   1e430:	68e3      	ldr	r3, [r4, #12]
   1e432:	3b01      	subs	r3, #1
   1e434:	60e3      	str	r3, [r4, #12]
    if (head != NULL) {
   1e436:	b107      	cbz	r7, 1e43a <parse_value+0x262>
        head->prev = current_item;
   1e438:	607d      	str	r5, [r7, #4]
    item->type = cJSON_Object;
   1e43a:	2340      	movs	r3, #64	; 0x40
   1e43c:	e7a7      	b.n	1e38e <parse_value+0x1b6>
        input_buffer->offset--;
   1e43e:	3b01      	subs	r3, #1
   1e440:	60a3      	str	r3, [r4, #8]
    if (head != NULL)
   1e442:	e6cf      	b.n	1e1e4 <parse_value+0xc>
   1e444:	f3af 8000 	nop.w
   1e448:	ffc00000 	.word	0xffc00000
   1e44c:	41dfffff 	.word	0x41dfffff
   1e450:	0004b73f 	.word	0x0004b73f
   1e454:	0004b756 	.word	0x0004b756
   1e458:	0004b75c 	.word	0x0004b75c
   1e45c:	c1e00000 	.word	0xc1e00000
    cJSON *current_item = NULL;
   1e460:	2500      	movs	r5, #0
    cJSON *head = NULL; /* linked list head */
   1e462:	462f      	mov	r7, r5
        current_item->valuestring = NULL;
   1e464:	46a8      	mov	r8, r5
    input_buffer->offset--;
   1e466:	3b01      	subs	r3, #1
   1e468:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   1e46a:	6920      	ldr	r0, [r4, #16]
   1e46c:	f021 fb1f 	bl	3faae <cJSON_New_Item.isra.0>
        if (new_item == NULL)
   1e470:	46a9      	mov	r9, r5
   1e472:	4605      	mov	r5, r0
   1e474:	2800      	cmp	r0, #0
   1e476:	d038      	beq.n	1e4ea <parse_value+0x312>
        if (head == NULL)
   1e478:	b3af      	cbz	r7, 1e4e6 <parse_value+0x30e>
            current_item->next = new_item;
   1e47a:	f8c9 0000 	str.w	r0, [r9]
            new_item->prev = current_item;
   1e47e:	f8c0 9004 	str.w	r9, [r0, #4]
        input_buffer->offset++;
   1e482:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1e484:	4620      	mov	r0, r4
        input_buffer->offset++;
   1e486:	3301      	adds	r3, #1
   1e488:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1e48a:	f021 fa8e 	bl	3f9aa <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
   1e48e:	4621      	mov	r1, r4
   1e490:	4628      	mov	r0, r5
   1e492:	f013 f8b9 	bl	31608 <parse_string>
   1e496:	b358      	cbz	r0, 1e4f0 <parse_value+0x318>
        buffer_skip_whitespace(input_buffer);
   1e498:	4620      	mov	r0, r4
   1e49a:	f021 fa86 	bl	3f9aa <buffer_skip_whitespace>
        current_item->string = current_item->valuestring;
   1e49e:	692b      	ldr	r3, [r5, #16]
        current_item->valuestring = NULL;
   1e4a0:	f8c5 8010 	str.w	r8, [r5, #16]
        current_item->string = current_item->valuestring;
   1e4a4:	622b      	str	r3, [r5, #32]
        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
   1e4a6:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1e4aa:	4293      	cmp	r3, r2
   1e4ac:	d220      	bcs.n	1e4f0 <parse_value+0x318>
   1e4ae:	6822      	ldr	r2, [r4, #0]
   1e4b0:	5cd2      	ldrb	r2, [r2, r3]
   1e4b2:	2a3a      	cmp	r2, #58	; 0x3a
   1e4b4:	d11c      	bne.n	1e4f0 <parse_value+0x318>
        input_buffer->offset++;
   1e4b6:	3301      	adds	r3, #1
        buffer_skip_whitespace(input_buffer);
   1e4b8:	4620      	mov	r0, r4
        input_buffer->offset++;
   1e4ba:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1e4bc:	f021 fa75 	bl	3f9aa <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   1e4c0:	4621      	mov	r1, r4
   1e4c2:	4628      	mov	r0, r5
   1e4c4:	f7ff fe88 	bl	1e1d8 <parse_value>
   1e4c8:	b190      	cbz	r0, 1e4f0 <parse_value+0x318>
        buffer_skip_whitespace(input_buffer);
   1e4ca:	4620      	mov	r0, r4
   1e4cc:	f021 fa6d 	bl	3f9aa <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   1e4d0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1e4d4:	4293      	cmp	r3, r2
   1e4d6:	d20b      	bcs.n	1e4f0 <parse_value+0x318>
   1e4d8:	6822      	ldr	r2, [r4, #0]
   1e4da:	5cd3      	ldrb	r3, [r2, r3]
   1e4dc:	2b2c      	cmp	r3, #44	; 0x2c
   1e4de:	d0c4      	beq.n	1e46a <parse_value+0x292>
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
   1e4e0:	2b7d      	cmp	r3, #125	; 0x7d
   1e4e2:	d105      	bne.n	1e4f0 <parse_value+0x318>
   1e4e4:	e7a4      	b.n	1e430 <parse_value+0x258>
   1e4e6:	4607      	mov	r7, r0
   1e4e8:	e7cb      	b.n	1e482 <parse_value+0x2aa>
    if (head != NULL)
   1e4ea:	2f00      	cmp	r7, #0
   1e4ec:	f43f ae7a 	beq.w	1e1e4 <parse_value+0xc>
        cJSON_Delete(head);
   1e4f0:	4638      	mov	r0, r7
   1e4f2:	f013 fd23 	bl	31f3c <cJSON_Delete>
   1e4f6:	e675      	b.n	1e1e4 <parse_value+0xc>

0001e4f8 <cJSON_CreateNumber>:
    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
    cJSON *item = cJSON_New_Item(&global_hooks);
   1e4f8:	4b17      	ldr	r3, [pc, #92]	; (1e558 <cJSON_CreateNumber+0x60>)
{
   1e4fa:	b5d0      	push	{r4, r6, r7, lr}
   1e4fc:	4606      	mov	r6, r0
    cJSON *item = cJSON_New_Item(&global_hooks);
   1e4fe:	6818      	ldr	r0, [r3, #0]
{
   1e500:	460f      	mov	r7, r1
    cJSON *item = cJSON_New_Item(&global_hooks);
   1e502:	f021 fad4 	bl	3faae <cJSON_New_Item.isra.0>
    if(item)
   1e506:	4604      	mov	r4, r0
   1e508:	b170      	cbz	r0, 1e528 <cJSON_CreateNumber+0x30>
    {
        item->type = cJSON_Number;
   1e50a:	2308      	movs	r3, #8
        item->valuedouble = num;
   1e50c:	e9c0 6706 	strd	r6, r7, [r0, #24]
        item->type = cJSON_Number;
   1e510:	60c3      	str	r3, [r0, #12]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
   1e512:	4639      	mov	r1, r7
   1e514:	a30e      	add	r3, pc, #56	; (adr r3, 1e550 <cJSON_CreateNumber+0x58>)
   1e516:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e51a:	4630      	mov	r0, r6
   1e51c:	f7fe fbd2 	bl	1ccc4 <__aeabi_dcmpge>
   1e520:	b120      	cbz	r0, 1e52c <cJSON_CreateNumber+0x34>
        {
            item->valueint = INT_MAX;
   1e522:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        }
        else if (num <= (double)INT_MIN)
        {
            item->valueint = INT_MIN;
   1e526:	6163      	str	r3, [r4, #20]
            item->valueint = (int)num;
        }
    }

    return item;
}
   1e528:	4620      	mov	r0, r4
   1e52a:	bdd0      	pop	{r4, r6, r7, pc}
        else if (num <= (double)INT_MIN)
   1e52c:	2200      	movs	r2, #0
   1e52e:	4630      	mov	r0, r6
   1e530:	4639      	mov	r1, r7
   1e532:	4b0a      	ldr	r3, [pc, #40]	; (1e55c <cJSON_CreateNumber+0x64>)
   1e534:	f7fe fbbc 	bl	1ccb0 <__aeabi_dcmple>
   1e538:	b110      	cbz	r0, 1e540 <cJSON_CreateNumber+0x48>
            item->valueint = INT_MIN;
   1e53a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1e53e:	e7f2      	b.n	1e526 <cJSON_CreateNumber+0x2e>
            item->valueint = (int)num;
   1e540:	4630      	mov	r0, r6
   1e542:	4639      	mov	r1, r7
   1e544:	f7fe fbe8 	bl	1cd18 <__aeabi_d2iz>
   1e548:	6160      	str	r0, [r4, #20]
    return item;
   1e54a:	e7ed      	b.n	1e528 <cJSON_CreateNumber+0x30>
   1e54c:	f3af 8000 	nop.w
   1e550:	ffc00000 	.word	0xffc00000
   1e554:	41dfffff 	.word	0x41dfffff
   1e558:	200146f0 	.word	0x200146f0
   1e55c:	c1e00000 	.word	0xc1e00000

0001e560 <floor>:
   1e560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e564:	f3c1 570a 	ubfx	r7, r1, #20, #11
   1e568:	4602      	mov	r2, r0
   1e56a:	460b      	mov	r3, r1
   1e56c:	460c      	mov	r4, r1
   1e56e:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
   1e572:	4605      	mov	r5, r0
   1e574:	4680      	mov	r8, r0
   1e576:	2e13      	cmp	r6, #19
   1e578:	dc34      	bgt.n	1e5e4 <floor+0x84>
   1e57a:	2e00      	cmp	r6, #0
   1e57c:	da14      	bge.n	1e5a8 <floor+0x48>
   1e57e:	a334      	add	r3, pc, #208	; (adr r3, 1e650 <floor+0xf0>)
   1e580:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e584:	f7fd ff62 	bl	1c44c <__adddf3>
   1e588:	2200      	movs	r2, #0
   1e58a:	2300      	movs	r3, #0
   1e58c:	f7fe fba4 	bl	1ccd8 <__aeabi_dcmpgt>
   1e590:	b138      	cbz	r0, 1e5a2 <floor+0x42>
   1e592:	2c00      	cmp	r4, #0
   1e594:	da58      	bge.n	1e648 <floor+0xe8>
   1e596:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
   1e59a:	431d      	orrs	r5, r3
   1e59c:	d001      	beq.n	1e5a2 <floor+0x42>
   1e59e:	2500      	movs	r5, #0
   1e5a0:	4c2d      	ldr	r4, [pc, #180]	; (1e658 <floor+0xf8>)
   1e5a2:	4623      	mov	r3, r4
   1e5a4:	462a      	mov	r2, r5
   1e5a6:	e026      	b.n	1e5f6 <floor+0x96>
   1e5a8:	4f2c      	ldr	r7, [pc, #176]	; (1e65c <floor+0xfc>)
   1e5aa:	4137      	asrs	r7, r6
   1e5ac:	ea01 0c07 	and.w	ip, r1, r7
   1e5b0:	ea5c 0c00 	orrs.w	ip, ip, r0
   1e5b4:	d01f      	beq.n	1e5f6 <floor+0x96>
   1e5b6:	a326      	add	r3, pc, #152	; (adr r3, 1e650 <floor+0xf0>)
   1e5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e5bc:	f7fd ff46 	bl	1c44c <__adddf3>
   1e5c0:	2200      	movs	r2, #0
   1e5c2:	2300      	movs	r3, #0
   1e5c4:	f7fe fb88 	bl	1ccd8 <__aeabi_dcmpgt>
   1e5c8:	2800      	cmp	r0, #0
   1e5ca:	d0ea      	beq.n	1e5a2 <floor+0x42>
   1e5cc:	2c00      	cmp	r4, #0
   1e5ce:	f04f 0500 	mov.w	r5, #0
   1e5d2:	bfbe      	ittt	lt
   1e5d4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
   1e5d8:	fa43 f606 	asrlt.w	r6, r3, r6
   1e5dc:	19a4      	addlt	r4, r4, r6
   1e5de:	ea24 0407 	bic.w	r4, r4, r7
   1e5e2:	e7de      	b.n	1e5a2 <floor+0x42>
   1e5e4:	2e33      	cmp	r6, #51	; 0x33
   1e5e6:	dd0a      	ble.n	1e5fe <floor+0x9e>
   1e5e8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   1e5ec:	d103      	bne.n	1e5f6 <floor+0x96>
   1e5ee:	f7fd ff2d 	bl	1c44c <__adddf3>
   1e5f2:	4602      	mov	r2, r0
   1e5f4:	460b      	mov	r3, r1
   1e5f6:	4610      	mov	r0, r2
   1e5f8:	4619      	mov	r1, r3
   1e5fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e5fe:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
   1e602:	f04f 3cff 	mov.w	ip, #4294967295
   1e606:	fa2c f707 	lsr.w	r7, ip, r7
   1e60a:	4207      	tst	r7, r0
   1e60c:	d0f3      	beq.n	1e5f6 <floor+0x96>
   1e60e:	a310      	add	r3, pc, #64	; (adr r3, 1e650 <floor+0xf0>)
   1e610:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e614:	f7fd ff1a 	bl	1c44c <__adddf3>
   1e618:	2200      	movs	r2, #0
   1e61a:	2300      	movs	r3, #0
   1e61c:	f7fe fb5c 	bl	1ccd8 <__aeabi_dcmpgt>
   1e620:	2800      	cmp	r0, #0
   1e622:	d0be      	beq.n	1e5a2 <floor+0x42>
   1e624:	2c00      	cmp	r4, #0
   1e626:	da02      	bge.n	1e62e <floor+0xce>
   1e628:	2e14      	cmp	r6, #20
   1e62a:	d103      	bne.n	1e634 <floor+0xd4>
   1e62c:	3401      	adds	r4, #1
   1e62e:	ea25 0507 	bic.w	r5, r5, r7
   1e632:	e7b6      	b.n	1e5a2 <floor+0x42>
   1e634:	2301      	movs	r3, #1
   1e636:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
   1e63a:	fa03 f606 	lsl.w	r6, r3, r6
   1e63e:	4435      	add	r5, r6
   1e640:	4545      	cmp	r5, r8
   1e642:	bf38      	it	cc
   1e644:	18e4      	addcc	r4, r4, r3
   1e646:	e7f2      	b.n	1e62e <floor+0xce>
   1e648:	2500      	movs	r5, #0
   1e64a:	462c      	mov	r4, r5
   1e64c:	e7a9      	b.n	1e5a2 <floor+0x42>
   1e64e:	bf00      	nop
   1e650:	8800759c 	.word	0x8800759c
   1e654:	7e37e43c 	.word	0x7e37e43c
   1e658:	bff00000 	.word	0xbff00000
   1e65c:	000fffff 	.word	0x000fffff

0001e660 <_strtod_l>:
   1e660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e664:	461f      	mov	r7, r3
   1e666:	2300      	movs	r3, #0
   1e668:	4604      	mov	r4, r0
   1e66a:	4688      	mov	r8, r1
   1e66c:	f04f 0a00 	mov.w	sl, #0
   1e670:	f04f 0b00 	mov.w	fp, #0
   1e674:	ed2d 8b04 	vpush	{d8-d9}
   1e678:	b09d      	sub	sp, #116	; 0x74
   1e67a:	9318      	str	r3, [sp, #96]	; 0x60
   1e67c:	4b9e      	ldr	r3, [pc, #632]	; (1e8f8 <_strtod_l+0x298>)
   1e67e:	9213      	str	r2, [sp, #76]	; 0x4c
   1e680:	681b      	ldr	r3, [r3, #0]
   1e682:	4618      	mov	r0, r3
   1e684:	9305      	str	r3, [sp, #20]
   1e686:	f7fe fddc 	bl	1d242 <strlen>
   1e68a:	4605      	mov	r5, r0
   1e68c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   1e690:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1e692:	781a      	ldrb	r2, [r3, #0]
   1e694:	2a2b      	cmp	r2, #43	; 0x2b
   1e696:	d04c      	beq.n	1e732 <_strtod_l+0xd2>
   1e698:	d839      	bhi.n	1e70e <_strtod_l+0xae>
   1e69a:	2a0d      	cmp	r2, #13
   1e69c:	d832      	bhi.n	1e704 <_strtod_l+0xa4>
   1e69e:	2a08      	cmp	r2, #8
   1e6a0:	d832      	bhi.n	1e708 <_strtod_l+0xa8>
   1e6a2:	2a00      	cmp	r2, #0
   1e6a4:	d03c      	beq.n	1e720 <_strtod_l+0xc0>
   1e6a6:	2300      	movs	r3, #0
   1e6a8:	930a      	str	r3, [sp, #40]	; 0x28
   1e6aa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   1e6ac:	7833      	ldrb	r3, [r6, #0]
   1e6ae:	2b30      	cmp	r3, #48	; 0x30
   1e6b0:	f040 80ae 	bne.w	1e810 <_strtod_l+0x1b0>
   1e6b4:	7873      	ldrb	r3, [r6, #1]
   1e6b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1e6ba:	2b58      	cmp	r3, #88	; 0x58
   1e6bc:	d166      	bne.n	1e78c <_strtod_l+0x12c>
   1e6be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e6c0:	a917      	add	r1, sp, #92	; 0x5c
   1e6c2:	9702      	str	r7, [sp, #8]
   1e6c4:	4620      	mov	r0, r4
   1e6c6:	9301      	str	r3, [sp, #4]
   1e6c8:	ab18      	add	r3, sp, #96	; 0x60
   1e6ca:	4a8c      	ldr	r2, [pc, #560]	; (1e8fc <_strtod_l+0x29c>)
   1e6cc:	9300      	str	r3, [sp, #0]
   1e6ce:	ab19      	add	r3, sp, #100	; 0x64
   1e6d0:	f01c fc92 	bl	3aff8 <__gethex>
   1e6d4:	f010 0707 	ands.w	r7, r0, #7
   1e6d8:	4605      	mov	r5, r0
   1e6da:	d005      	beq.n	1e6e8 <_strtod_l+0x88>
   1e6dc:	2f06      	cmp	r7, #6
   1e6de:	d12a      	bne.n	1e736 <_strtod_l+0xd6>
   1e6e0:	3601      	adds	r6, #1
   1e6e2:	2300      	movs	r3, #0
   1e6e4:	9617      	str	r6, [sp, #92]	; 0x5c
   1e6e6:	930a      	str	r3, [sp, #40]	; 0x28
   1e6e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1e6ea:	2b00      	cmp	r3, #0
   1e6ec:	f040 8584 	bne.w	1f1f8 <_strtod_l+0xb98>
   1e6f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e6f2:	b1db      	cbz	r3, 1e72c <_strtod_l+0xcc>
   1e6f4:	4650      	mov	r0, sl
   1e6f6:	f10b 4100 	add.w	r1, fp, #2147483648	; 0x80000000
   1e6fa:	b01d      	add	sp, #116	; 0x74
   1e6fc:	ecbd 8b04 	vpop	{d8-d9}
   1e700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e704:	2a20      	cmp	r2, #32
   1e706:	d1ce      	bne.n	1e6a6 <_strtod_l+0x46>
   1e708:	3301      	adds	r3, #1
   1e70a:	9317      	str	r3, [sp, #92]	; 0x5c
   1e70c:	e7c0      	b.n	1e690 <_strtod_l+0x30>
   1e70e:	2a2d      	cmp	r2, #45	; 0x2d
   1e710:	d1c9      	bne.n	1e6a6 <_strtod_l+0x46>
   1e712:	2201      	movs	r2, #1
   1e714:	920a      	str	r2, [sp, #40]	; 0x28
   1e716:	1c5a      	adds	r2, r3, #1
   1e718:	9217      	str	r2, [sp, #92]	; 0x5c
   1e71a:	785b      	ldrb	r3, [r3, #1]
   1e71c:	2b00      	cmp	r3, #0
   1e71e:	d1c4      	bne.n	1e6aa <_strtod_l+0x4a>
   1e720:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1e722:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   1e726:	2b00      	cmp	r3, #0
   1e728:	f040 8564 	bne.w	1f1f4 <_strtod_l+0xb94>
   1e72c:	4650      	mov	r0, sl
   1e72e:	4659      	mov	r1, fp
   1e730:	e7e3      	b.n	1e6fa <_strtod_l+0x9a>
   1e732:	2200      	movs	r2, #0
   1e734:	e7ee      	b.n	1e714 <_strtod_l+0xb4>
   1e736:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1e738:	b13a      	cbz	r2, 1e74a <_strtod_l+0xea>
   1e73a:	2135      	movs	r1, #53	; 0x35
   1e73c:	a81a      	add	r0, sp, #104	; 0x68
   1e73e:	f023 fbae 	bl	41e9e <__copybits>
   1e742:	9918      	ldr	r1, [sp, #96]	; 0x60
   1e744:	4620      	mov	r0, r4
   1e746:	f01c ff3f 	bl	3b5c8 <_Bfree>
   1e74a:	3f01      	subs	r7, #1
   1e74c:	2f04      	cmp	r7, #4
   1e74e:	d806      	bhi.n	1e75e <_strtod_l+0xfe>
   1e750:	e8df f007 	tbb	[pc, r7]
   1e754:	1714030a 	.word	0x1714030a
   1e758:	0a          	.byte	0x0a
   1e759:	00          	.byte	0x00
   1e75a:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   1e75e:	0728      	lsls	r0, r5, #28
   1e760:	d5c2      	bpl.n	1e6e8 <_strtod_l+0x88>
   1e762:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   1e766:	e7bf      	b.n	1e6e8 <_strtod_l+0x88>
   1e768:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   1e76c:	9a19      	ldr	r2, [sp, #100]	; 0x64
   1e76e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1e772:	f202 4233 	addw	r2, r2, #1075	; 0x433
   1e776:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   1e77a:	e7f0      	b.n	1e75e <_strtod_l+0xfe>
   1e77c:	f8df b180 	ldr.w	fp, [pc, #384]	; 1e900 <_strtod_l+0x2a0>
   1e780:	e7ed      	b.n	1e75e <_strtod_l+0xfe>
   1e782:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   1e786:	f04f 3aff 	mov.w	sl, #4294967295
   1e78a:	e7e8      	b.n	1e75e <_strtod_l+0xfe>
   1e78c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1e78e:	1c5a      	adds	r2, r3, #1
   1e790:	9217      	str	r2, [sp, #92]	; 0x5c
   1e792:	785b      	ldrb	r3, [r3, #1]
   1e794:	2b30      	cmp	r3, #48	; 0x30
   1e796:	d0f9      	beq.n	1e78c <_strtod_l+0x12c>
   1e798:	2b00      	cmp	r3, #0
   1e79a:	d0a5      	beq.n	1e6e8 <_strtod_l+0x88>
   1e79c:	2301      	movs	r3, #1
   1e79e:	f04f 0900 	mov.w	r9, #0
   1e7a2:	9304      	str	r3, [sp, #16]
   1e7a4:	220a      	movs	r2, #10
   1e7a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1e7a8:	464f      	mov	r7, r9
   1e7aa:	f8cd 901c 	str.w	r9, [sp, #28]
   1e7ae:	9308      	str	r3, [sp, #32]
   1e7b0:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1e7b2:	7806      	ldrb	r6, [r0, #0]
   1e7b4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   1e7b8:	b2d9      	uxtb	r1, r3
   1e7ba:	2909      	cmp	r1, #9
   1e7bc:	d92a      	bls.n	1e814 <_strtod_l+0x1b4>
   1e7be:	462a      	mov	r2, r5
   1e7c0:	9905      	ldr	r1, [sp, #20]
   1e7c2:	f022 ffe2 	bl	4178a <strncmp>
   1e7c6:	b3a0      	cbz	r0, 1e832 <_strtod_l+0x1d2>
   1e7c8:	2000      	movs	r0, #0
   1e7ca:	4632      	mov	r2, r6
   1e7cc:	463d      	mov	r5, r7
   1e7ce:	4603      	mov	r3, r0
   1e7d0:	9005      	str	r0, [sp, #20]
   1e7d2:	2a65      	cmp	r2, #101	; 0x65
   1e7d4:	d001      	beq.n	1e7da <_strtod_l+0x17a>
   1e7d6:	2a45      	cmp	r2, #69	; 0x45
   1e7d8:	d118      	bne.n	1e80c <_strtod_l+0x1ac>
   1e7da:	b91d      	cbnz	r5, 1e7e4 <_strtod_l+0x184>
   1e7dc:	9a04      	ldr	r2, [sp, #16]
   1e7de:	4302      	orrs	r2, r0
   1e7e0:	d09e      	beq.n	1e720 <_strtod_l+0xc0>
   1e7e2:	2500      	movs	r5, #0
   1e7e4:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   1e7e8:	f108 0201 	add.w	r2, r8, #1
   1e7ec:	9217      	str	r2, [sp, #92]	; 0x5c
   1e7ee:	f898 2001 	ldrb.w	r2, [r8, #1]
   1e7f2:	2a2b      	cmp	r2, #43	; 0x2b
   1e7f4:	d075      	beq.n	1e8e2 <_strtod_l+0x282>
   1e7f6:	2a2d      	cmp	r2, #45	; 0x2d
   1e7f8:	d07b      	beq.n	1e8f2 <_strtod_l+0x292>
   1e7fa:	f04f 0c00 	mov.w	ip, #0
   1e7fe:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1e802:	2909      	cmp	r1, #9
   1e804:	f240 8082 	bls.w	1e90c <_strtod_l+0x2ac>
   1e808:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   1e80c:	2600      	movs	r6, #0
   1e80e:	e09d      	b.n	1e94c <_strtod_l+0x2ec>
   1e810:	2300      	movs	r3, #0
   1e812:	e7c4      	b.n	1e79e <_strtod_l+0x13e>
   1e814:	2f08      	cmp	r7, #8
   1e816:	f100 0001 	add.w	r0, r0, #1
   1e81a:	f107 0701 	add.w	r7, r7, #1
   1e81e:	bfd4      	ite	le
   1e820:	9907      	ldrle	r1, [sp, #28]
   1e822:	fb02 3909 	mlagt	r9, r2, r9, r3
   1e826:	9017      	str	r0, [sp, #92]	; 0x5c
   1e828:	bfdc      	itt	le
   1e82a:	fb02 3301 	mlale	r3, r2, r1, r3
   1e82e:	9307      	strle	r3, [sp, #28]
   1e830:	e7be      	b.n	1e7b0 <_strtod_l+0x150>
   1e832:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1e834:	195a      	adds	r2, r3, r5
   1e836:	9217      	str	r2, [sp, #92]	; 0x5c
   1e838:	5d5a      	ldrb	r2, [r3, r5]
   1e83a:	2f00      	cmp	r7, #0
   1e83c:	d036      	beq.n	1e8ac <_strtod_l+0x24c>
   1e83e:	463d      	mov	r5, r7
   1e840:	9005      	str	r0, [sp, #20]
   1e842:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   1e846:	2b09      	cmp	r3, #9
   1e848:	d912      	bls.n	1e870 <_strtod_l+0x210>
   1e84a:	2301      	movs	r3, #1
   1e84c:	e7c1      	b.n	1e7d2 <_strtod_l+0x172>
   1e84e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1e850:	3001      	adds	r0, #1
   1e852:	1c5a      	adds	r2, r3, #1
   1e854:	9217      	str	r2, [sp, #92]	; 0x5c
   1e856:	785a      	ldrb	r2, [r3, #1]
   1e858:	2a30      	cmp	r2, #48	; 0x30
   1e85a:	d0f8      	beq.n	1e84e <_strtod_l+0x1ee>
   1e85c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   1e860:	2b08      	cmp	r3, #8
   1e862:	f200 84ce 	bhi.w	1f202 <_strtod_l+0xba2>
   1e866:	9005      	str	r0, [sp, #20]
   1e868:	2000      	movs	r0, #0
   1e86a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1e86c:	4605      	mov	r5, r0
   1e86e:	9308      	str	r3, [sp, #32]
   1e870:	3a30      	subs	r2, #48	; 0x30
   1e872:	f100 0301 	add.w	r3, r0, #1
   1e876:	d013      	beq.n	1e8a0 <_strtod_l+0x240>
   1e878:	9905      	ldr	r1, [sp, #20]
   1e87a:	eb00 0e05 	add.w	lr, r0, r5
   1e87e:	4419      	add	r1, r3
   1e880:	462b      	mov	r3, r5
   1e882:	9105      	str	r1, [sp, #20]
   1e884:	210a      	movs	r1, #10
   1e886:	4573      	cmp	r3, lr
   1e888:	d112      	bne.n	1e8b0 <_strtod_l+0x250>
   1e88a:	182b      	adds	r3, r5, r0
   1e88c:	3501      	adds	r5, #1
   1e88e:	2b08      	cmp	r3, #8
   1e890:	4405      	add	r5, r0
   1e892:	dc1c      	bgt.n	1e8ce <_strtod_l+0x26e>
   1e894:	9907      	ldr	r1, [sp, #28]
   1e896:	230a      	movs	r3, #10
   1e898:	fb03 2301 	mla	r3, r3, r1, r2
   1e89c:	9307      	str	r3, [sp, #28]
   1e89e:	2300      	movs	r3, #0
   1e8a0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1e8a2:	4618      	mov	r0, r3
   1e8a4:	1c51      	adds	r1, r2, #1
   1e8a6:	9117      	str	r1, [sp, #92]	; 0x5c
   1e8a8:	7852      	ldrb	r2, [r2, #1]
   1e8aa:	e7ca      	b.n	1e842 <_strtod_l+0x1e2>
   1e8ac:	4638      	mov	r0, r7
   1e8ae:	e7d3      	b.n	1e858 <_strtod_l+0x1f8>
   1e8b0:	2b08      	cmp	r3, #8
   1e8b2:	dc04      	bgt.n	1e8be <_strtod_l+0x25e>
   1e8b4:	9e07      	ldr	r6, [sp, #28]
   1e8b6:	434e      	muls	r6, r1
   1e8b8:	9607      	str	r6, [sp, #28]
   1e8ba:	3301      	adds	r3, #1
   1e8bc:	e7e3      	b.n	1e886 <_strtod_l+0x226>
   1e8be:	f103 0c01 	add.w	ip, r3, #1
   1e8c2:	f1bc 0f10 	cmp.w	ip, #16
   1e8c6:	bfd8      	it	le
   1e8c8:	fb01 f909 	mulle.w	r9, r1, r9
   1e8cc:	e7f5      	b.n	1e8ba <_strtod_l+0x25a>
   1e8ce:	2d10      	cmp	r5, #16
   1e8d0:	bfdc      	itt	le
   1e8d2:	230a      	movle	r3, #10
   1e8d4:	fb03 2909 	mlale	r9, r3, r9, r2
   1e8d8:	e7e1      	b.n	1e89e <_strtod_l+0x23e>
   1e8da:	2300      	movs	r3, #0
   1e8dc:	9305      	str	r3, [sp, #20]
   1e8de:	2301      	movs	r3, #1
   1e8e0:	e77c      	b.n	1e7dc <_strtod_l+0x17c>
   1e8e2:	f04f 0c00 	mov.w	ip, #0
   1e8e6:	f108 0202 	add.w	r2, r8, #2
   1e8ea:	9217      	str	r2, [sp, #92]	; 0x5c
   1e8ec:	f898 2002 	ldrb.w	r2, [r8, #2]
   1e8f0:	e785      	b.n	1e7fe <_strtod_l+0x19e>
   1e8f2:	f04f 0c01 	mov.w	ip, #1
   1e8f6:	e7f6      	b.n	1e8e6 <_strtod_l+0x286>
   1e8f8:	0004343c 	.word	0x0004343c
   1e8fc:	000433b4 	.word	0x000433b4
   1e900:	7ff00000 	.word	0x7ff00000
   1e904:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1e906:	1c51      	adds	r1, r2, #1
   1e908:	9117      	str	r1, [sp, #92]	; 0x5c
   1e90a:	7852      	ldrb	r2, [r2, #1]
   1e90c:	2a30      	cmp	r2, #48	; 0x30
   1e90e:	d0f9      	beq.n	1e904 <_strtod_l+0x2a4>
   1e910:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   1e914:	2908      	cmp	r1, #8
   1e916:	f63f af79 	bhi.w	1e80c <_strtod_l+0x1ac>
   1e91a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   1e91e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1e920:	9206      	str	r2, [sp, #24]
   1e922:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1e924:	1c51      	adds	r1, r2, #1
   1e926:	9117      	str	r1, [sp, #92]	; 0x5c
   1e928:	7852      	ldrb	r2, [r2, #1]
   1e92a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   1e92e:	2e09      	cmp	r6, #9
   1e930:	d937      	bls.n	1e9a2 <_strtod_l+0x342>
   1e932:	9e06      	ldr	r6, [sp, #24]
   1e934:	1b89      	subs	r1, r1, r6
   1e936:	f644 661f 	movw	r6, #19999	; 0x4e1f
   1e93a:	2908      	cmp	r1, #8
   1e93c:	dc02      	bgt.n	1e944 <_strtod_l+0x2e4>
   1e93e:	4576      	cmp	r6, lr
   1e940:	bfa8      	it	ge
   1e942:	4676      	movge	r6, lr
   1e944:	f1bc 0f00 	cmp.w	ip, #0
   1e948:	d000      	beq.n	1e94c <_strtod_l+0x2ec>
   1e94a:	4276      	negs	r6, r6
   1e94c:	2d00      	cmp	r5, #0
   1e94e:	d14d      	bne.n	1e9ec <_strtod_l+0x38c>
   1e950:	9904      	ldr	r1, [sp, #16]
   1e952:	4301      	orrs	r1, r0
   1e954:	f47f aec8 	bne.w	1e6e8 <_strtod_l+0x88>
   1e958:	2b00      	cmp	r3, #0
   1e95a:	f47f aee1 	bne.w	1e720 <_strtod_l+0xc0>
   1e95e:	2a69      	cmp	r2, #105	; 0x69
   1e960:	d027      	beq.n	1e9b2 <_strtod_l+0x352>
   1e962:	dc24      	bgt.n	1e9ae <_strtod_l+0x34e>
   1e964:	2a49      	cmp	r2, #73	; 0x49
   1e966:	d024      	beq.n	1e9b2 <_strtod_l+0x352>
   1e968:	2a4e      	cmp	r2, #78	; 0x4e
   1e96a:	f47f aed9 	bne.w	1e720 <_strtod_l+0xc0>
   1e96e:	499f      	ldr	r1, [pc, #636]	; (1ebec <_strtod_l+0x58c>)
   1e970:	a817      	add	r0, sp, #92	; 0x5c
   1e972:	f023 f8fa 	bl	41b6a <__match>
   1e976:	2800      	cmp	r0, #0
   1e978:	f43f aed2 	beq.w	1e720 <_strtod_l+0xc0>
   1e97c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1e97e:	781b      	ldrb	r3, [r3, #0]
   1e980:	2b28      	cmp	r3, #40	; 0x28
   1e982:	d12d      	bne.n	1e9e0 <_strtod_l+0x380>
   1e984:	aa1a      	add	r2, sp, #104	; 0x68
   1e986:	499a      	ldr	r1, [pc, #616]	; (1ebf0 <_strtod_l+0x590>)
   1e988:	a817      	add	r0, sp, #92	; 0x5c
   1e98a:	f023 f902 	bl	41b92 <__hexnan>
   1e98e:	2805      	cmp	r0, #5
   1e990:	d126      	bne.n	1e9e0 <_strtod_l+0x380>
   1e992:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1e994:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   1e998:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   1e99c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   1e9a0:	e6a2      	b.n	1e6e8 <_strtod_l+0x88>
   1e9a2:	210a      	movs	r1, #10
   1e9a4:	fb01 2e0e 	mla	lr, r1, lr, r2
   1e9a8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   1e9ac:	e7b9      	b.n	1e922 <_strtod_l+0x2c2>
   1e9ae:	2a6e      	cmp	r2, #110	; 0x6e
   1e9b0:	e7db      	b.n	1e96a <_strtod_l+0x30a>
   1e9b2:	4990      	ldr	r1, [pc, #576]	; (1ebf4 <_strtod_l+0x594>)
   1e9b4:	a817      	add	r0, sp, #92	; 0x5c
   1e9b6:	f023 f8d8 	bl	41b6a <__match>
   1e9ba:	2800      	cmp	r0, #0
   1e9bc:	f43f aeb0 	beq.w	1e720 <_strtod_l+0xc0>
   1e9c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1e9c2:	a817      	add	r0, sp, #92	; 0x5c
   1e9c4:	498c      	ldr	r1, [pc, #560]	; (1ebf8 <_strtod_l+0x598>)
   1e9c6:	3b01      	subs	r3, #1
   1e9c8:	9317      	str	r3, [sp, #92]	; 0x5c
   1e9ca:	f023 f8ce 	bl	41b6a <__match>
   1e9ce:	b910      	cbnz	r0, 1e9d6 <_strtod_l+0x376>
   1e9d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1e9d2:	3301      	adds	r3, #1
   1e9d4:	9317      	str	r3, [sp, #92]	; 0x5c
   1e9d6:	f8df b230 	ldr.w	fp, [pc, #560]	; 1ec08 <_strtod_l+0x5a8>
   1e9da:	f04f 0a00 	mov.w	sl, #0
   1e9de:	e683      	b.n	1e6e8 <_strtod_l+0x88>
   1e9e0:	4886      	ldr	r0, [pc, #536]	; (1ebfc <_strtod_l+0x59c>)
   1e9e2:	f01d fd6d 	bl	3c4c0 <nan>
   1e9e6:	4682      	mov	sl, r0
   1e9e8:	468b      	mov	fp, r1
   1e9ea:	e67d      	b.n	1e6e8 <_strtod_l+0x88>
   1e9ec:	9b05      	ldr	r3, [sp, #20]
   1e9ee:	2f00      	cmp	r7, #0
   1e9f0:	bf08      	it	eq
   1e9f2:	462f      	moveq	r7, r5
   1e9f4:	2d10      	cmp	r5, #16
   1e9f6:	9807      	ldr	r0, [sp, #28]
   1e9f8:	eba6 0303 	sub.w	r3, r6, r3
   1e9fc:	46a8      	mov	r8, r5
   1e9fe:	bfa8      	it	ge
   1ea00:	f04f 0810 	movge.w	r8, #16
   1ea04:	9306      	str	r3, [sp, #24]
   1ea06:	f7fd fe5d 	bl	1c6c4 <__aeabi_ui2d>
   1ea0a:	2d09      	cmp	r5, #9
   1ea0c:	4682      	mov	sl, r0
   1ea0e:	468b      	mov	fp, r1
   1ea10:	dd13      	ble.n	1ea3a <_strtod_l+0x3da>
   1ea12:	4b7b      	ldr	r3, [pc, #492]	; (1ec00 <_strtod_l+0x5a0>)
   1ea14:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   1ea18:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   1ea1c:	f7fd fecc 	bl	1c7b8 <__aeabi_dmul>
   1ea20:	4682      	mov	sl, r0
   1ea22:	468b      	mov	fp, r1
   1ea24:	4648      	mov	r0, r9
   1ea26:	f7fd fe4d 	bl	1c6c4 <__aeabi_ui2d>
   1ea2a:	4602      	mov	r2, r0
   1ea2c:	460b      	mov	r3, r1
   1ea2e:	4650      	mov	r0, sl
   1ea30:	4659      	mov	r1, fp
   1ea32:	f7fd fd0b 	bl	1c44c <__adddf3>
   1ea36:	4682      	mov	sl, r0
   1ea38:	468b      	mov	fp, r1
   1ea3a:	2d0f      	cmp	r5, #15
   1ea3c:	dc36      	bgt.n	1eaac <_strtod_l+0x44c>
   1ea3e:	9b06      	ldr	r3, [sp, #24]
   1ea40:	2b00      	cmp	r3, #0
   1ea42:	f43f ae51 	beq.w	1e6e8 <_strtod_l+0x88>
   1ea46:	dd22      	ble.n	1ea8e <_strtod_l+0x42e>
   1ea48:	2b16      	cmp	r3, #22
   1ea4a:	dc09      	bgt.n	1ea60 <_strtod_l+0x400>
   1ea4c:	496c      	ldr	r1, [pc, #432]	; (1ec00 <_strtod_l+0x5a0>)
   1ea4e:	4652      	mov	r2, sl
   1ea50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1ea54:	465b      	mov	r3, fp
   1ea56:	e9d1 0100 	ldrd	r0, r1, [r1]
   1ea5a:	f7fd fead 	bl	1c7b8 <__aeabi_dmul>
   1ea5e:	e7c2      	b.n	1e9e6 <_strtod_l+0x386>
   1ea60:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   1ea64:	9a06      	ldr	r2, [sp, #24]
   1ea66:	4293      	cmp	r3, r2
   1ea68:	db20      	blt.n	1eaac <_strtod_l+0x44c>
   1ea6a:	f1c5 050f 	rsb	r5, r5, #15
   1ea6e:	4c64      	ldr	r4, [pc, #400]	; (1ec00 <_strtod_l+0x5a0>)
   1ea70:	4652      	mov	r2, sl
   1ea72:	465b      	mov	r3, fp
   1ea74:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   1ea78:	e9d1 0100 	ldrd	r0, r1, [r1]
   1ea7c:	f7fd fe9c 	bl	1c7b8 <__aeabi_dmul>
   1ea80:	9b06      	ldr	r3, [sp, #24]
   1ea82:	1b5d      	subs	r5, r3, r5
   1ea84:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   1ea88:	e9d4 2300 	ldrd	r2, r3, [r4]
   1ea8c:	e7e5      	b.n	1ea5a <_strtod_l+0x3fa>
   1ea8e:	9b06      	ldr	r3, [sp, #24]
   1ea90:	3316      	adds	r3, #22
   1ea92:	db0b      	blt.n	1eaac <_strtod_l+0x44c>
   1ea94:	9b05      	ldr	r3, [sp, #20]
   1ea96:	4650      	mov	r0, sl
   1ea98:	4659      	mov	r1, fp
   1ea9a:	1b9e      	subs	r6, r3, r6
   1ea9c:	4b58      	ldr	r3, [pc, #352]	; (1ec00 <_strtod_l+0x5a0>)
   1ea9e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   1eaa2:	e9d6 2300 	ldrd	r2, r3, [r6]
   1eaa6:	f7fd ffb1 	bl	1ca0c <__aeabi_ddiv>
   1eaaa:	e79c      	b.n	1e9e6 <_strtod_l+0x386>
   1eaac:	eba5 0308 	sub.w	r3, r5, r8
   1eab0:	9a06      	ldr	r2, [sp, #24]
   1eab2:	eb03 0802 	add.w	r8, r3, r2
   1eab6:	f1b8 0f00 	cmp.w	r8, #0
   1eaba:	dd74      	ble.n	1eba6 <_strtod_l+0x546>
   1eabc:	f018 030f 	ands.w	r3, r8, #15
   1eac0:	d00a      	beq.n	1ead8 <_strtod_l+0x478>
   1eac2:	494f      	ldr	r1, [pc, #316]	; (1ec00 <_strtod_l+0x5a0>)
   1eac4:	4652      	mov	r2, sl
   1eac6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1eaca:	465b      	mov	r3, fp
   1eacc:	e9d1 0100 	ldrd	r0, r1, [r1]
   1ead0:	f7fd fe72 	bl	1c7b8 <__aeabi_dmul>
   1ead4:	4682      	mov	sl, r0
   1ead6:	468b      	mov	fp, r1
   1ead8:	f038 080f 	bics.w	r8, r8, #15
   1eadc:	d04f      	beq.n	1eb7e <_strtod_l+0x51e>
   1eade:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   1eae2:	dd22      	ble.n	1eb2a <_strtod_l+0x4ca>
   1eae4:	2500      	movs	r5, #0
   1eae6:	46a9      	mov	r9, r5
   1eae8:	9507      	str	r5, [sp, #28]
   1eaea:	9505      	str	r5, [sp, #20]
   1eaec:	2322      	movs	r3, #34	; 0x22
   1eaee:	f8df b118 	ldr.w	fp, [pc, #280]	; 1ec08 <_strtod_l+0x5a8>
   1eaf2:	f04f 0a00 	mov.w	sl, #0
   1eaf6:	6023      	str	r3, [r4, #0]
   1eaf8:	9b07      	ldr	r3, [sp, #28]
   1eafa:	2b00      	cmp	r3, #0
   1eafc:	f43f adf4 	beq.w	1e6e8 <_strtod_l+0x88>
   1eb00:	9918      	ldr	r1, [sp, #96]	; 0x60
   1eb02:	4620      	mov	r0, r4
   1eb04:	f01c fd60 	bl	3b5c8 <_Bfree>
   1eb08:	9905      	ldr	r1, [sp, #20]
   1eb0a:	4620      	mov	r0, r4
   1eb0c:	f01c fd5c 	bl	3b5c8 <_Bfree>
   1eb10:	4649      	mov	r1, r9
   1eb12:	4620      	mov	r0, r4
   1eb14:	f01c fd58 	bl	3b5c8 <_Bfree>
   1eb18:	9907      	ldr	r1, [sp, #28]
   1eb1a:	4620      	mov	r0, r4
   1eb1c:	f01c fd54 	bl	3b5c8 <_Bfree>
   1eb20:	4629      	mov	r1, r5
   1eb22:	4620      	mov	r0, r4
   1eb24:	f01c fd50 	bl	3b5c8 <_Bfree>
   1eb28:	e5de      	b.n	1e6e8 <_strtod_l+0x88>
   1eb2a:	4b36      	ldr	r3, [pc, #216]	; (1ec04 <_strtod_l+0x5a4>)
   1eb2c:	ea4f 1828 	mov.w	r8, r8, asr #4
   1eb30:	4650      	mov	r0, sl
   1eb32:	4659      	mov	r1, fp
   1eb34:	9304      	str	r3, [sp, #16]
   1eb36:	2300      	movs	r3, #0
   1eb38:	4699      	mov	r9, r3
   1eb3a:	f1b8 0f01 	cmp.w	r8, #1
   1eb3e:	dc21      	bgt.n	1eb84 <_strtod_l+0x524>
   1eb40:	b10b      	cbz	r3, 1eb46 <_strtod_l+0x4e6>
   1eb42:	4682      	mov	sl, r0
   1eb44:	468b      	mov	fp, r1
   1eb46:	4b2f      	ldr	r3, [pc, #188]	; (1ec04 <_strtod_l+0x5a4>)
   1eb48:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   1eb4c:	4652      	mov	r2, sl
   1eb4e:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   1eb52:	465b      	mov	r3, fp
   1eb54:	e9d9 0100 	ldrd	r0, r1, [r9]
   1eb58:	f7fd fe2e 	bl	1c7b8 <__aeabi_dmul>
   1eb5c:	4b2a      	ldr	r3, [pc, #168]	; (1ec08 <_strtod_l+0x5a8>)
   1eb5e:	460a      	mov	r2, r1
   1eb60:	4682      	mov	sl, r0
   1eb62:	400b      	ands	r3, r1
   1eb64:	4929      	ldr	r1, [pc, #164]	; (1ec0c <_strtod_l+0x5ac>)
   1eb66:	428b      	cmp	r3, r1
   1eb68:	d8bc      	bhi.n	1eae4 <_strtod_l+0x484>
   1eb6a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   1eb6e:	428b      	cmp	r3, r1
   1eb70:	bf86      	itte	hi
   1eb72:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 1ec10 <_strtod_l+0x5b0>
   1eb76:	f04f 3aff 	movhi.w	sl, #4294967295
   1eb7a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   1eb7e:	2300      	movs	r3, #0
   1eb80:	9304      	str	r3, [sp, #16]
   1eb82:	e084      	b.n	1ec8e <_strtod_l+0x62e>
   1eb84:	f018 0f01 	tst.w	r8, #1
   1eb88:	d005      	beq.n	1eb96 <_strtod_l+0x536>
   1eb8a:	9b04      	ldr	r3, [sp, #16]
   1eb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1eb90:	f7fd fe12 	bl	1c7b8 <__aeabi_dmul>
   1eb94:	2301      	movs	r3, #1
   1eb96:	9a04      	ldr	r2, [sp, #16]
   1eb98:	f109 0901 	add.w	r9, r9, #1
   1eb9c:	ea4f 0868 	mov.w	r8, r8, asr #1
   1eba0:	3208      	adds	r2, #8
   1eba2:	9204      	str	r2, [sp, #16]
   1eba4:	e7c9      	b.n	1eb3a <_strtod_l+0x4da>
   1eba6:	d0ea      	beq.n	1eb7e <_strtod_l+0x51e>
   1eba8:	f1c8 0800 	rsb	r8, r8, #0
   1ebac:	f018 020f 	ands.w	r2, r8, #15
   1ebb0:	d00a      	beq.n	1ebc8 <_strtod_l+0x568>
   1ebb2:	4b13      	ldr	r3, [pc, #76]	; (1ec00 <_strtod_l+0x5a0>)
   1ebb4:	4650      	mov	r0, sl
   1ebb6:	4659      	mov	r1, fp
   1ebb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1ebbc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ebc0:	f7fd ff24 	bl	1ca0c <__aeabi_ddiv>
   1ebc4:	4682      	mov	sl, r0
   1ebc6:	468b      	mov	fp, r1
   1ebc8:	ea5f 1828 	movs.w	r8, r8, asr #4
   1ebcc:	d0d7      	beq.n	1eb7e <_strtod_l+0x51e>
   1ebce:	f1b8 0f1f 	cmp.w	r8, #31
   1ebd2:	dd1f      	ble.n	1ec14 <_strtod_l+0x5b4>
   1ebd4:	2500      	movs	r5, #0
   1ebd6:	46a9      	mov	r9, r5
   1ebd8:	9507      	str	r5, [sp, #28]
   1ebda:	9505      	str	r5, [sp, #20]
   1ebdc:	2322      	movs	r3, #34	; 0x22
   1ebde:	f04f 0a00 	mov.w	sl, #0
   1ebe2:	f04f 0b00 	mov.w	fp, #0
   1ebe6:	6023      	str	r3, [r4, #0]
   1ebe8:	e786      	b.n	1eaf8 <_strtod_l+0x498>
   1ebea:	bf00      	nop
   1ebec:	0004bdaa 	.word	0x0004bdaa
   1ebf0:	000433c8 	.word	0x000433c8
   1ebf4:	0004bda2 	.word	0x0004bda2
   1ebf8:	0004bdd2 	.word	0x0004bdd2
   1ebfc:	0004517c 	.word	0x0004517c
   1ec00:	00042878 	.word	0x00042878
   1ec04:	00042850 	.word	0x00042850
   1ec08:	7ff00000 	.word	0x7ff00000
   1ec0c:	7ca00000 	.word	0x7ca00000
   1ec10:	7fefffff 	.word	0x7fefffff
   1ec14:	f018 0310 	ands.w	r3, r8, #16
   1ec18:	4650      	mov	r0, sl
   1ec1a:	4659      	mov	r1, fp
   1ec1c:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 1efc8 <_strtod_l+0x968>
   1ec20:	bf18      	it	ne
   1ec22:	236a      	movne	r3, #106	; 0x6a
   1ec24:	9304      	str	r3, [sp, #16]
   1ec26:	2300      	movs	r3, #0
   1ec28:	f018 0f01 	tst.w	r8, #1
   1ec2c:	d004      	beq.n	1ec38 <_strtod_l+0x5d8>
   1ec2e:	e9d9 2300 	ldrd	r2, r3, [r9]
   1ec32:	f7fd fdc1 	bl	1c7b8 <__aeabi_dmul>
   1ec36:	2301      	movs	r3, #1
   1ec38:	ea5f 0868 	movs.w	r8, r8, asr #1
   1ec3c:	f109 0908 	add.w	r9, r9, #8
   1ec40:	d1f2      	bne.n	1ec28 <_strtod_l+0x5c8>
   1ec42:	b10b      	cbz	r3, 1ec48 <_strtod_l+0x5e8>
   1ec44:	4682      	mov	sl, r0
   1ec46:	468b      	mov	fp, r1
   1ec48:	9b04      	ldr	r3, [sp, #16]
   1ec4a:	b1c3      	cbz	r3, 1ec7e <_strtod_l+0x61e>
   1ec4c:	f3cb 520a 	ubfx	r2, fp, #20, #11
   1ec50:	4659      	mov	r1, fp
   1ec52:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   1ec56:	2b00      	cmp	r3, #0
   1ec58:	dd11      	ble.n	1ec7e <_strtod_l+0x61e>
   1ec5a:	2b1f      	cmp	r3, #31
   1ec5c:	f340 8120 	ble.w	1eea0 <_strtod_l+0x840>
   1ec60:	2b34      	cmp	r3, #52	; 0x34
   1ec62:	f04f 0a00 	mov.w	sl, #0
   1ec66:	bfdb      	ittet	le
   1ec68:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   1ec6c:	f04f 33ff 	movle.w	r3, #4294967295
   1ec70:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   1ec74:	fa03 f202 	lslle.w	r2, r3, r2
   1ec78:	bfd8      	it	le
   1ec7a:	ea02 0b01 	andle.w	fp, r2, r1
   1ec7e:	2200      	movs	r2, #0
   1ec80:	2300      	movs	r3, #0
   1ec82:	4650      	mov	r0, sl
   1ec84:	4659      	mov	r1, fp
   1ec86:	f7fd ffff 	bl	1cc88 <__aeabi_dcmpeq>
   1ec8a:	2800      	cmp	r0, #0
   1ec8c:	d1a2      	bne.n	1ebd4 <_strtod_l+0x574>
   1ec8e:	9b07      	ldr	r3, [sp, #28]
   1ec90:	463a      	mov	r2, r7
   1ec92:	9908      	ldr	r1, [sp, #32]
   1ec94:	4620      	mov	r0, r4
   1ec96:	9300      	str	r3, [sp, #0]
   1ec98:	462b      	mov	r3, r5
   1ec9a:	f01c fcff 	bl	3b69c <__s2b>
   1ec9e:	9007      	str	r0, [sp, #28]
   1eca0:	2800      	cmp	r0, #0
   1eca2:	f43f af1f 	beq.w	1eae4 <_strtod_l+0x484>
   1eca6:	9b05      	ldr	r3, [sp, #20]
   1eca8:	2500      	movs	r5, #0
   1ecaa:	1b9e      	subs	r6, r3, r6
   1ecac:	9b06      	ldr	r3, [sp, #24]
   1ecae:	46a9      	mov	r9, r5
   1ecb0:	2b00      	cmp	r3, #0
   1ecb2:	bfb4      	ite	lt
   1ecb4:	4633      	movlt	r3, r6
   1ecb6:	2300      	movge	r3, #0
   1ecb8:	930c      	str	r3, [sp, #48]	; 0x30
   1ecba:	9b06      	ldr	r3, [sp, #24]
   1ecbc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1ecc0:	9312      	str	r3, [sp, #72]	; 0x48
   1ecc2:	9b07      	ldr	r3, [sp, #28]
   1ecc4:	4620      	mov	r0, r4
   1ecc6:	6859      	ldr	r1, [r3, #4]
   1ecc8:	f01c fc3e 	bl	3b548 <_Balloc>
   1eccc:	9005      	str	r0, [sp, #20]
   1ecce:	2800      	cmp	r0, #0
   1ecd0:	f43f af0c 	beq.w	1eaec <_strtod_l+0x48c>
   1ecd4:	9b07      	ldr	r3, [sp, #28]
   1ecd6:	300c      	adds	r0, #12
   1ecd8:	691a      	ldr	r2, [r3, #16]
   1ecda:	f103 010c 	add.w	r1, r3, #12
   1ecde:	3202      	adds	r2, #2
   1ece0:	0092      	lsls	r2, r2, #2
   1ece2:	f022 fb5f 	bl	413a4 <memcpy>
   1ece6:	ab1a      	add	r3, sp, #104	; 0x68
   1ece8:	4652      	mov	r2, sl
   1ecea:	4620      	mov	r0, r4
   1ecec:	9301      	str	r3, [sp, #4]
   1ecee:	ab19      	add	r3, sp, #100	; 0x64
   1ecf0:	9300      	str	r3, [sp, #0]
   1ecf2:	465b      	mov	r3, fp
   1ecf4:	f01c ffaa 	bl	3bc4c <__d2b>
   1ecf8:	9018      	str	r0, [sp, #96]	; 0x60
   1ecfa:	ec4b ab18 	vmov	d8, sl, fp
   1ecfe:	2800      	cmp	r0, #0
   1ed00:	f43f aef4 	beq.w	1eaec <_strtod_l+0x48c>
   1ed04:	2101      	movs	r1, #1
   1ed06:	4620      	mov	r0, r4
   1ed08:	f01c fd12 	bl	3b730 <__i2b>
   1ed0c:	4681      	mov	r9, r0
   1ed0e:	2800      	cmp	r0, #0
   1ed10:	f43f aeec 	beq.w	1eaec <_strtod_l+0x48c>
   1ed14:	9e19      	ldr	r6, [sp, #100]	; 0x64
   1ed16:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1ed18:	2e00      	cmp	r6, #0
   1ed1a:	bfa9      	itett	ge
   1ed1c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
   1ed1e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   1ed20:	eb06 0803 	addge.w	r8, r6, r3
   1ed24:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   1ed26:	bfb8      	it	lt
   1ed28:	1b9f      	sublt	r7, r3, r6
   1ed2a:	9b04      	ldr	r3, [sp, #16]
   1ed2c:	bfb8      	it	lt
   1ed2e:	f8dd 8030 	ldrlt.w	r8, [sp, #48]	; 0x30
   1ed32:	1af6      	subs	r6, r6, r3
   1ed34:	4b9f      	ldr	r3, [pc, #636]	; (1efb4 <_strtod_l+0x954>)
   1ed36:	4416      	add	r6, r2
   1ed38:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   1ed3c:	3e01      	subs	r6, #1
   1ed3e:	429e      	cmp	r6, r3
   1ed40:	f280 80c1 	bge.w	1eec6 <_strtod_l+0x866>
   1ed44:	1b9b      	subs	r3, r3, r6
   1ed46:	2101      	movs	r1, #1
   1ed48:	2b1f      	cmp	r3, #31
   1ed4a:	eba2 0203 	sub.w	r2, r2, r3
   1ed4e:	f300 80ae 	bgt.w	1eeae <_strtod_l+0x84e>
   1ed52:	fa01 f303 	lsl.w	r3, r1, r3
   1ed56:	930d      	str	r3, [sp, #52]	; 0x34
   1ed58:	2300      	movs	r3, #0
   1ed5a:	9308      	str	r3, [sp, #32]
   1ed5c:	eb08 0602 	add.w	r6, r8, r2
   1ed60:	9b04      	ldr	r3, [sp, #16]
   1ed62:	4417      	add	r7, r2
   1ed64:	45b0      	cmp	r8, r6
   1ed66:	441f      	add	r7, r3
   1ed68:	4643      	mov	r3, r8
   1ed6a:	bfa8      	it	ge
   1ed6c:	4633      	movge	r3, r6
   1ed6e:	42bb      	cmp	r3, r7
   1ed70:	bfa8      	it	ge
   1ed72:	463b      	movge	r3, r7
   1ed74:	2b00      	cmp	r3, #0
   1ed76:	bfc2      	ittt	gt
   1ed78:	1af6      	subgt	r6, r6, r3
   1ed7a:	1aff      	subgt	r7, r7, r3
   1ed7c:	eba8 0803 	subgt.w	r8, r8, r3
   1ed80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ed82:	2b00      	cmp	r3, #0
   1ed84:	dd17      	ble.n	1edb6 <_strtod_l+0x756>
   1ed86:	4649      	mov	r1, r9
   1ed88:	461a      	mov	r2, r3
   1ed8a:	4620      	mov	r0, r4
   1ed8c:	f01c fd8e 	bl	3b8ac <__pow5mult>
   1ed90:	4681      	mov	r9, r0
   1ed92:	2800      	cmp	r0, #0
   1ed94:	f43f aeaa 	beq.w	1eaec <_strtod_l+0x48c>
   1ed98:	4601      	mov	r1, r0
   1ed9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1ed9c:	4620      	mov	r0, r4
   1ed9e:	f01c fcdd 	bl	3b75c <__multiply>
   1eda2:	900b      	str	r0, [sp, #44]	; 0x2c
   1eda4:	2800      	cmp	r0, #0
   1eda6:	f43f aea1 	beq.w	1eaec <_strtod_l+0x48c>
   1edaa:	9918      	ldr	r1, [sp, #96]	; 0x60
   1edac:	4620      	mov	r0, r4
   1edae:	f01c fc0b 	bl	3b5c8 <_Bfree>
   1edb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1edb4:	9318      	str	r3, [sp, #96]	; 0x60
   1edb6:	2e00      	cmp	r6, #0
   1edb8:	f300 808a 	bgt.w	1eed0 <_strtod_l+0x870>
   1edbc:	9b06      	ldr	r3, [sp, #24]
   1edbe:	2b00      	cmp	r3, #0
   1edc0:	dd08      	ble.n	1edd4 <_strtod_l+0x774>
   1edc2:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1edc4:	4620      	mov	r0, r4
   1edc6:	9905      	ldr	r1, [sp, #20]
   1edc8:	f01c fd70 	bl	3b8ac <__pow5mult>
   1edcc:	9005      	str	r0, [sp, #20]
   1edce:	2800      	cmp	r0, #0
   1edd0:	f43f ae8c 	beq.w	1eaec <_strtod_l+0x48c>
   1edd4:	2f00      	cmp	r7, #0
   1edd6:	dd08      	ble.n	1edea <_strtod_l+0x78a>
   1edd8:	463a      	mov	r2, r7
   1edda:	9905      	ldr	r1, [sp, #20]
   1eddc:	4620      	mov	r0, r4
   1edde:	f01c fdbf 	bl	3b960 <__lshift>
   1ede2:	9005      	str	r0, [sp, #20]
   1ede4:	2800      	cmp	r0, #0
   1ede6:	f43f ae81 	beq.w	1eaec <_strtod_l+0x48c>
   1edea:	f1b8 0f00 	cmp.w	r8, #0
   1edee:	dd08      	ble.n	1ee02 <_strtod_l+0x7a2>
   1edf0:	4649      	mov	r1, r9
   1edf2:	4642      	mov	r2, r8
   1edf4:	4620      	mov	r0, r4
   1edf6:	f01c fdb3 	bl	3b960 <__lshift>
   1edfa:	4681      	mov	r9, r0
   1edfc:	2800      	cmp	r0, #0
   1edfe:	f43f ae75 	beq.w	1eaec <_strtod_l+0x48c>
   1ee02:	9a05      	ldr	r2, [sp, #20]
   1ee04:	4620      	mov	r0, r4
   1ee06:	9918      	ldr	r1, [sp, #96]	; 0x60
   1ee08:	f01c fe1a 	bl	3ba40 <__mdiff>
   1ee0c:	4605      	mov	r5, r0
   1ee0e:	2800      	cmp	r0, #0
   1ee10:	f43f ae6c 	beq.w	1eaec <_strtod_l+0x48c>
   1ee14:	68c3      	ldr	r3, [r0, #12]
   1ee16:	4649      	mov	r1, r9
   1ee18:	930b      	str	r3, [sp, #44]	; 0x2c
   1ee1a:	2300      	movs	r3, #0
   1ee1c:	60c3      	str	r3, [r0, #12]
   1ee1e:	f022 fff4 	bl	41e0a <__mcmp>
   1ee22:	2800      	cmp	r0, #0
   1ee24:	da5e      	bge.n	1eee4 <_strtod_l+0x884>
   1ee26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ee28:	ea53 030a 	orrs.w	r3, r3, sl
   1ee2c:	f040 8082 	bne.w	1ef34 <_strtod_l+0x8d4>
   1ee30:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1ee34:	2b00      	cmp	r3, #0
   1ee36:	d17d      	bne.n	1ef34 <_strtod_l+0x8d4>
   1ee38:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   1ee3c:	0d1b      	lsrs	r3, r3, #20
   1ee3e:	051b      	lsls	r3, r3, #20
   1ee40:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   1ee44:	d976      	bls.n	1ef34 <_strtod_l+0x8d4>
   1ee46:	696b      	ldr	r3, [r5, #20]
   1ee48:	b913      	cbnz	r3, 1ee50 <_strtod_l+0x7f0>
   1ee4a:	692b      	ldr	r3, [r5, #16]
   1ee4c:	2b01      	cmp	r3, #1
   1ee4e:	dd71      	ble.n	1ef34 <_strtod_l+0x8d4>
   1ee50:	4629      	mov	r1, r5
   1ee52:	2201      	movs	r2, #1
   1ee54:	4620      	mov	r0, r4
   1ee56:	f01c fd83 	bl	3b960 <__lshift>
   1ee5a:	4649      	mov	r1, r9
   1ee5c:	4605      	mov	r5, r0
   1ee5e:	f022 ffd4 	bl	41e0a <__mcmp>
   1ee62:	2800      	cmp	r0, #0
   1ee64:	dd66      	ble.n	1ef34 <_strtod_l+0x8d4>
   1ee66:	9904      	ldr	r1, [sp, #16]
   1ee68:	465b      	mov	r3, fp
   1ee6a:	4a53      	ldr	r2, [pc, #332]	; (1efb8 <_strtod_l+0x958>)
   1ee6c:	2900      	cmp	r1, #0
   1ee6e:	f000 8082 	beq.w	1ef76 <_strtod_l+0x916>
   1ee72:	ea02 010b 	and.w	r1, r2, fp
   1ee76:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   1ee7a:	dc7c      	bgt.n	1ef76 <_strtod_l+0x916>
   1ee7c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   1ee80:	f77f aeac 	ble.w	1ebdc <_strtod_l+0x57c>
   1ee84:	4b4d      	ldr	r3, [pc, #308]	; (1efbc <_strtod_l+0x95c>)
   1ee86:	4650      	mov	r0, sl
   1ee88:	4659      	mov	r1, fp
   1ee8a:	2200      	movs	r2, #0
   1ee8c:	f7fd fc94 	bl	1c7b8 <__aeabi_dmul>
   1ee90:	460b      	mov	r3, r1
   1ee92:	4682      	mov	sl, r0
   1ee94:	468b      	mov	fp, r1
   1ee96:	4303      	orrs	r3, r0
   1ee98:	bf04      	itt	eq
   1ee9a:	2322      	moveq	r3, #34	; 0x22
   1ee9c:	6023      	streq	r3, [r4, #0]
   1ee9e:	e62f      	b.n	1eb00 <_strtod_l+0x4a0>
   1eea0:	f04f 32ff 	mov.w	r2, #4294967295
   1eea4:	fa02 f303 	lsl.w	r3, r2, r3
   1eea8:	ea03 0a0a 	and.w	sl, r3, sl
   1eeac:	e6e7      	b.n	1ec7e <_strtod_l+0x61e>
   1eeae:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
   1eeb2:	910d      	str	r1, [sp, #52]	; 0x34
   1eeb4:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
   1eeb8:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
   1eebc:	36e2      	adds	r6, #226	; 0xe2
   1eebe:	fa01 f306 	lsl.w	r3, r1, r6
   1eec2:	9308      	str	r3, [sp, #32]
   1eec4:	e74a      	b.n	1ed5c <_strtod_l+0x6fc>
   1eec6:	2300      	movs	r3, #0
   1eec8:	9308      	str	r3, [sp, #32]
   1eeca:	2301      	movs	r3, #1
   1eecc:	930d      	str	r3, [sp, #52]	; 0x34
   1eece:	e745      	b.n	1ed5c <_strtod_l+0x6fc>
   1eed0:	4632      	mov	r2, r6
   1eed2:	9918      	ldr	r1, [sp, #96]	; 0x60
   1eed4:	4620      	mov	r0, r4
   1eed6:	f01c fd43 	bl	3b960 <__lshift>
   1eeda:	9018      	str	r0, [sp, #96]	; 0x60
   1eedc:	2800      	cmp	r0, #0
   1eede:	f47f af6d 	bne.w	1edbc <_strtod_l+0x75c>
   1eee2:	e603      	b.n	1eaec <_strtod_l+0x48c>
   1eee4:	46d8      	mov	r8, fp
   1eee6:	d171      	bne.n	1efcc <_strtod_l+0x96c>
   1eee8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1eeea:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1eeee:	b352      	cbz	r2, 1ef46 <_strtod_l+0x8e6>
   1eef0:	4a33      	ldr	r2, [pc, #204]	; (1efc0 <_strtod_l+0x960>)
   1eef2:	4293      	cmp	r3, r2
   1eef4:	d12a      	bne.n	1ef4c <_strtod_l+0x8ec>
   1eef6:	9b04      	ldr	r3, [sp, #16]
   1eef8:	4651      	mov	r1, sl
   1eefa:	b1fb      	cbz	r3, 1ef3c <_strtod_l+0x8dc>
   1eefc:	4b2e      	ldr	r3, [pc, #184]	; (1efb8 <_strtod_l+0x958>)
   1eefe:	f04f 32ff 	mov.w	r2, #4294967295
   1ef02:	ea0b 0303 	and.w	r3, fp, r3
   1ef06:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   1ef0a:	d81a      	bhi.n	1ef42 <_strtod_l+0x8e2>
   1ef0c:	0d1b      	lsrs	r3, r3, #20
   1ef0e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   1ef12:	fa02 f303 	lsl.w	r3, r2, r3
   1ef16:	4299      	cmp	r1, r3
   1ef18:	d118      	bne.n	1ef4c <_strtod_l+0x8ec>
   1ef1a:	4b2a      	ldr	r3, [pc, #168]	; (1efc4 <_strtod_l+0x964>)
   1ef1c:	4598      	cmp	r8, r3
   1ef1e:	d102      	bne.n	1ef26 <_strtod_l+0x8c6>
   1ef20:	3101      	adds	r1, #1
   1ef22:	f43f ade3 	beq.w	1eaec <_strtod_l+0x48c>
   1ef26:	4b24      	ldr	r3, [pc, #144]	; (1efb8 <_strtod_l+0x958>)
   1ef28:	f04f 0a00 	mov.w	sl, #0
   1ef2c:	ea08 0303 	and.w	r3, r8, r3
   1ef30:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   1ef34:	9b04      	ldr	r3, [sp, #16]
   1ef36:	2b00      	cmp	r3, #0
   1ef38:	d1a4      	bne.n	1ee84 <_strtod_l+0x824>
   1ef3a:	e5e1      	b.n	1eb00 <_strtod_l+0x4a0>
   1ef3c:	f04f 33ff 	mov.w	r3, #4294967295
   1ef40:	e7e9      	b.n	1ef16 <_strtod_l+0x8b6>
   1ef42:	4613      	mov	r3, r2
   1ef44:	e7e7      	b.n	1ef16 <_strtod_l+0x8b6>
   1ef46:	ea53 030a 	orrs.w	r3, r3, sl
   1ef4a:	d08c      	beq.n	1ee66 <_strtod_l+0x806>
   1ef4c:	9b08      	ldr	r3, [sp, #32]
   1ef4e:	b1e3      	cbz	r3, 1ef8a <_strtod_l+0x92a>
   1ef50:	ea13 0f08 	tst.w	r3, r8
   1ef54:	d0ee      	beq.n	1ef34 <_strtod_l+0x8d4>
   1ef56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ef58:	4650      	mov	r0, sl
   1ef5a:	9a04      	ldr	r2, [sp, #16]
   1ef5c:	4659      	mov	r1, fp
   1ef5e:	b1c3      	cbz	r3, 1ef92 <_strtod_l+0x932>
   1ef60:	f022 fc70 	bl	41844 <sulp>
   1ef64:	4602      	mov	r2, r0
   1ef66:	460b      	mov	r3, r1
   1ef68:	ec51 0b18 	vmov	r0, r1, d8
   1ef6c:	f7fd fa6e 	bl	1c44c <__adddf3>
   1ef70:	4682      	mov	sl, r0
   1ef72:	468b      	mov	fp, r1
   1ef74:	e7de      	b.n	1ef34 <_strtod_l+0x8d4>
   1ef76:	4013      	ands	r3, r2
   1ef78:	f04f 3aff 	mov.w	sl, #4294967295
   1ef7c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   1ef80:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   1ef84:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   1ef88:	e7d4      	b.n	1ef34 <_strtod_l+0x8d4>
   1ef8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1ef8c:	ea13 0f0a 	tst.w	r3, sl
   1ef90:	e7e0      	b.n	1ef54 <_strtod_l+0x8f4>
   1ef92:	f022 fc57 	bl	41844 <sulp>
   1ef96:	4602      	mov	r2, r0
   1ef98:	460b      	mov	r3, r1
   1ef9a:	ec51 0b18 	vmov	r0, r1, d8
   1ef9e:	f7fd fa53 	bl	1c448 <__aeabi_dsub>
   1efa2:	2200      	movs	r2, #0
   1efa4:	2300      	movs	r3, #0
   1efa6:	4682      	mov	sl, r0
   1efa8:	468b      	mov	fp, r1
   1efaa:	f7fd fe6d 	bl	1cc88 <__aeabi_dcmpeq>
   1efae:	2800      	cmp	r0, #0
   1efb0:	d0c0      	beq.n	1ef34 <_strtod_l+0x8d4>
   1efb2:	e613      	b.n	1ebdc <_strtod_l+0x57c>
   1efb4:	fffffc02 	.word	0xfffffc02
   1efb8:	7ff00000 	.word	0x7ff00000
   1efbc:	39500000 	.word	0x39500000
   1efc0:	000fffff 	.word	0x000fffff
   1efc4:	7fefffff 	.word	0x7fefffff
   1efc8:	00042828 	.word	0x00042828
   1efcc:	4649      	mov	r1, r9
   1efce:	4628      	mov	r0, r5
   1efd0:	f022 ff37 	bl	41e42 <__ratio>
   1efd4:	2200      	movs	r2, #0
   1efd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1efda:	4606      	mov	r6, r0
   1efdc:	460f      	mov	r7, r1
   1efde:	f7fd fe67 	bl	1ccb0 <__aeabi_dcmple>
   1efe2:	2800      	cmp	r0, #0
   1efe4:	d079      	beq.n	1f0da <_strtod_l+0xa7a>
   1efe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1efe8:	2b00      	cmp	r3, #0
   1efea:	d04b      	beq.n	1f084 <_strtod_l+0xa24>
   1efec:	2200      	movs	r2, #0
   1efee:	4b92      	ldr	r3, [pc, #584]	; (1f238 <_strtod_l+0xbd8>)
   1eff0:	2600      	movs	r6, #0
   1eff2:	4f91      	ldr	r7, [pc, #580]	; (1f238 <_strtod_l+0xbd8>)
   1eff4:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1eff8:	4b90      	ldr	r3, [pc, #576]	; (1f23c <_strtod_l+0xbdc>)
   1effa:	ea08 0303 	and.w	r3, r8, r3
   1effe:	930d      	str	r3, [sp, #52]	; 0x34
   1f000:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1f002:	4b8f      	ldr	r3, [pc, #572]	; (1f240 <_strtod_l+0xbe0>)
   1f004:	429a      	cmp	r2, r3
   1f006:	f040 80b0 	bne.w	1f16a <_strtod_l+0xb0a>
   1f00a:	f1a8 7b54 	sub.w	fp, r8, #55574528	; 0x3500000
   1f00e:	4650      	mov	r0, sl
   1f010:	ed9d 7b08 	vldr	d7, [sp, #32]
   1f014:	4659      	mov	r1, fp
   1f016:	eeb0 9a47 	vmov.f32	s18, s14
   1f01a:	eef0 9a67 	vmov.f32	s19, s15
   1f01e:	f01c fd9f 	bl	3bb60 <__ulp>
   1f022:	4602      	mov	r2, r0
   1f024:	460b      	mov	r3, r1
   1f026:	ec51 0b19 	vmov	r0, r1, d9
   1f02a:	f7fd fbc5 	bl	1c7b8 <__aeabi_dmul>
   1f02e:	4652      	mov	r2, sl
   1f030:	465b      	mov	r3, fp
   1f032:	f7fd fa0b 	bl	1c44c <__adddf3>
   1f036:	460b      	mov	r3, r1
   1f038:	4980      	ldr	r1, [pc, #512]	; (1f23c <_strtod_l+0xbdc>)
   1f03a:	4682      	mov	sl, r0
   1f03c:	4a81      	ldr	r2, [pc, #516]	; (1f244 <_strtod_l+0xbe4>)
   1f03e:	4019      	ands	r1, r3
   1f040:	4291      	cmp	r1, r2
   1f042:	d95e      	bls.n	1f102 <_strtod_l+0xaa2>
   1f044:	ee18 3a90 	vmov	r3, s17
   1f048:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   1f04c:	4293      	cmp	r3, r2
   1f04e:	d104      	bne.n	1f05a <_strtod_l+0x9fa>
   1f050:	ee18 3a10 	vmov	r3, s16
   1f054:	3301      	adds	r3, #1
   1f056:	f43f ad49 	beq.w	1eaec <_strtod_l+0x48c>
   1f05a:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 1f250 <_strtod_l+0xbf0>
   1f05e:	f04f 3aff 	mov.w	sl, #4294967295
   1f062:	9918      	ldr	r1, [sp, #96]	; 0x60
   1f064:	4620      	mov	r0, r4
   1f066:	f01c faaf 	bl	3b5c8 <_Bfree>
   1f06a:	9905      	ldr	r1, [sp, #20]
   1f06c:	4620      	mov	r0, r4
   1f06e:	f01c faab 	bl	3b5c8 <_Bfree>
   1f072:	4649      	mov	r1, r9
   1f074:	4620      	mov	r0, r4
   1f076:	f01c faa7 	bl	3b5c8 <_Bfree>
   1f07a:	4629      	mov	r1, r5
   1f07c:	4620      	mov	r0, r4
   1f07e:	f01c faa3 	bl	3b5c8 <_Bfree>
   1f082:	e61e      	b.n	1ecc2 <_strtod_l+0x662>
   1f084:	f1ba 0f00 	cmp.w	sl, #0
   1f088:	d11a      	bne.n	1f0c0 <_strtod_l+0xa60>
   1f08a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1f08e:	b9f3      	cbnz	r3, 1f0ce <_strtod_l+0xa6e>
   1f090:	2200      	movs	r2, #0
   1f092:	4b69      	ldr	r3, [pc, #420]	; (1f238 <_strtod_l+0xbd8>)
   1f094:	4630      	mov	r0, r6
   1f096:	4639      	mov	r1, r7
   1f098:	f7fd fe00 	bl	1cc9c <__aeabi_dcmplt>
   1f09c:	b9d0      	cbnz	r0, 1f0d4 <_strtod_l+0xa74>
   1f09e:	4630      	mov	r0, r6
   1f0a0:	4639      	mov	r1, r7
   1f0a2:	2200      	movs	r2, #0
   1f0a4:	4b68      	ldr	r3, [pc, #416]	; (1f248 <_strtod_l+0xbe8>)
   1f0a6:	f7fd fb87 	bl	1c7b8 <__aeabi_dmul>
   1f0aa:	4606      	mov	r6, r0
   1f0ac:	460f      	mov	r7, r1
   1f0ae:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   1f0b2:	9614      	str	r6, [sp, #80]	; 0x50
   1f0b4:	9315      	str	r3, [sp, #84]	; 0x54
   1f0b6:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   1f0ba:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1f0be:	e79b      	b.n	1eff8 <_strtod_l+0x998>
   1f0c0:	f1ba 0f01 	cmp.w	sl, #1
   1f0c4:	d103      	bne.n	1f0ce <_strtod_l+0xa6e>
   1f0c6:	f1bb 0f00 	cmp.w	fp, #0
   1f0ca:	f43f ad87 	beq.w	1ebdc <_strtod_l+0x57c>
   1f0ce:	2200      	movs	r2, #0
   1f0d0:	4b5e      	ldr	r3, [pc, #376]	; (1f24c <_strtod_l+0xbec>)
   1f0d2:	e78d      	b.n	1eff0 <_strtod_l+0x990>
   1f0d4:	2600      	movs	r6, #0
   1f0d6:	4f5c      	ldr	r7, [pc, #368]	; (1f248 <_strtod_l+0xbe8>)
   1f0d8:	e7e9      	b.n	1f0ae <_strtod_l+0xa4e>
   1f0da:	4b5b      	ldr	r3, [pc, #364]	; (1f248 <_strtod_l+0xbe8>)
   1f0dc:	4630      	mov	r0, r6
   1f0de:	4639      	mov	r1, r7
   1f0e0:	2200      	movs	r2, #0
   1f0e2:	f7fd fb69 	bl	1c7b8 <__aeabi_dmul>
   1f0e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f0e8:	4606      	mov	r6, r0
   1f0ea:	460f      	mov	r7, r1
   1f0ec:	b933      	cbnz	r3, 1f0fc <_strtod_l+0xa9c>
   1f0ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1f0f2:	900e      	str	r0, [sp, #56]	; 0x38
   1f0f4:	930f      	str	r3, [sp, #60]	; 0x3c
   1f0f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   1f0fa:	e7de      	b.n	1f0ba <_strtod_l+0xa5a>
   1f0fc:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   1f100:	e7f9      	b.n	1f0f6 <_strtod_l+0xa96>
   1f102:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   1f106:	9b04      	ldr	r3, [sp, #16]
   1f108:	2b00      	cmp	r3, #0
   1f10a:	d1aa      	bne.n	1f062 <_strtod_l+0xa02>
   1f10c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   1f110:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1f112:	0d1b      	lsrs	r3, r3, #20
   1f114:	051b      	lsls	r3, r3, #20
   1f116:	429a      	cmp	r2, r3
   1f118:	d1a3      	bne.n	1f062 <_strtod_l+0xa02>
   1f11a:	4630      	mov	r0, r6
   1f11c:	4639      	mov	r1, r7
   1f11e:	f7fd ff1b 	bl	1cf58 <__aeabi_d2lz>
   1f122:	f7fd fb1b 	bl	1c75c <__aeabi_l2d>
   1f126:	4602      	mov	r2, r0
   1f128:	460b      	mov	r3, r1
   1f12a:	4630      	mov	r0, r6
   1f12c:	4639      	mov	r1, r7
   1f12e:	f7fd f98b 	bl	1c448 <__aeabi_dsub>
   1f132:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1f136:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f138:	4606      	mov	r6, r0
   1f13a:	ea43 030a 	orr.w	r3, r3, sl
   1f13e:	460f      	mov	r7, r1
   1f140:	4313      	orrs	r3, r2
   1f142:	d051      	beq.n	1f1e8 <_strtod_l+0xb88>
   1f144:	a334      	add	r3, pc, #208	; (adr r3, 1f218 <_strtod_l+0xbb8>)
   1f146:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f14a:	f7fd fda7 	bl	1cc9c <__aeabi_dcmplt>
   1f14e:	2800      	cmp	r0, #0
   1f150:	f47f acd6 	bne.w	1eb00 <_strtod_l+0x4a0>
   1f154:	4630      	mov	r0, r6
   1f156:	4639      	mov	r1, r7
   1f158:	a331      	add	r3, pc, #196	; (adr r3, 1f220 <_strtod_l+0xbc0>)
   1f15a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f15e:	f7fd fdbb 	bl	1ccd8 <__aeabi_dcmpgt>
   1f162:	2800      	cmp	r0, #0
   1f164:	f43f af7d 	beq.w	1f062 <_strtod_l+0xa02>
   1f168:	e4ca      	b.n	1eb00 <_strtod_l+0x4a0>
   1f16a:	9b04      	ldr	r3, [sp, #16]
   1f16c:	b333      	cbz	r3, 1f1bc <_strtod_l+0xb5c>
   1f16e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f170:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   1f174:	d822      	bhi.n	1f1bc <_strtod_l+0xb5c>
   1f176:	4630      	mov	r0, r6
   1f178:	4639      	mov	r1, r7
   1f17a:	a32b      	add	r3, pc, #172	; (adr r3, 1f228 <_strtod_l+0xbc8>)
   1f17c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f180:	f7fd fd96 	bl	1ccb0 <__aeabi_dcmple>
   1f184:	b1a0      	cbz	r0, 1f1b0 <_strtod_l+0xb50>
   1f186:	4639      	mov	r1, r7
   1f188:	4630      	mov	r0, r6
   1f18a:	f7fd fded 	bl	1cd68 <__aeabi_d2uiz>
   1f18e:	2801      	cmp	r0, #1
   1f190:	bf38      	it	cc
   1f192:	2001      	movcc	r0, #1
   1f194:	f7fd fa96 	bl	1c6c4 <__aeabi_ui2d>
   1f198:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f19a:	4606      	mov	r6, r0
   1f19c:	460f      	mov	r7, r1
   1f19e:	bb03      	cbnz	r3, 1f1e2 <_strtod_l+0xb82>
   1f1a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1f1a4:	9010      	str	r0, [sp, #64]	; 0x40
   1f1a6:	9311      	str	r3, [sp, #68]	; 0x44
   1f1a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   1f1ac:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1f1b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f1b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1f1b4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   1f1b8:	1a9b      	subs	r3, r3, r2
   1f1ba:	9309      	str	r3, [sp, #36]	; 0x24
   1f1bc:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
   1f1c0:	ec51 0b18 	vmov	r0, r1, d8
   1f1c4:	f01c fccc 	bl	3bb60 <__ulp>
   1f1c8:	4602      	mov	r2, r0
   1f1ca:	460b      	mov	r3, r1
   1f1cc:	4650      	mov	r0, sl
   1f1ce:	4659      	mov	r1, fp
   1f1d0:	f7fd faf2 	bl	1c7b8 <__aeabi_dmul>
   1f1d4:	ec53 2b18 	vmov	r2, r3, d8
   1f1d8:	f7fd f938 	bl	1c44c <__adddf3>
   1f1dc:	4682      	mov	sl, r0
   1f1de:	468b      	mov	fp, r1
   1f1e0:	e791      	b.n	1f106 <_strtod_l+0xaa6>
   1f1e2:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   1f1e6:	e7df      	b.n	1f1a8 <_strtod_l+0xb48>
   1f1e8:	a311      	add	r3, pc, #68	; (adr r3, 1f230 <_strtod_l+0xbd0>)
   1f1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f1ee:	f7fd fd55 	bl	1cc9c <__aeabi_dcmplt>
   1f1f2:	e7b6      	b.n	1f162 <_strtod_l+0xb02>
   1f1f4:	2300      	movs	r3, #0
   1f1f6:	930a      	str	r3, [sp, #40]	; 0x28
   1f1f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1f1fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1f1fc:	6013      	str	r3, [r2, #0]
   1f1fe:	f7ff ba77 	b.w	1e6f0 <_strtod_l+0x90>
   1f202:	2a65      	cmp	r2, #101	; 0x65
   1f204:	f43f ab69 	beq.w	1e8da <_strtod_l+0x27a>
   1f208:	2a45      	cmp	r2, #69	; 0x45
   1f20a:	f43f ab66 	beq.w	1e8da <_strtod_l+0x27a>
   1f20e:	2301      	movs	r3, #1
   1f210:	f7ff bb9e 	b.w	1e950 <_strtod_l+0x2f0>
   1f214:	f3af 8000 	nop.w
   1f218:	94a03595 	.word	0x94a03595
   1f21c:	3fdfffff 	.word	0x3fdfffff
   1f220:	35afe535 	.word	0x35afe535
   1f224:	3fe00000 	.word	0x3fe00000
   1f228:	ffc00000 	.word	0xffc00000
   1f22c:	41dfffff 	.word	0x41dfffff
   1f230:	94a03595 	.word	0x94a03595
   1f234:	3fcfffff 	.word	0x3fcfffff
   1f238:	3ff00000 	.word	0x3ff00000
   1f23c:	7ff00000 	.word	0x7ff00000
   1f240:	7fe00000 	.word	0x7fe00000
   1f244:	7c9fffff 	.word	0x7c9fffff
   1f248:	3fe00000 	.word	0x3fe00000
   1f24c:	bff00000 	.word	0xbff00000
   1f250:	7fefffff 	.word	0x7fefffff
   1f254:	00000000 	.word	0x00000000

0001f258 <_dtoa_r>:
   1f258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f25c:	6a45      	ldr	r5, [r0, #36]	; 0x24
   1f25e:	4604      	mov	r4, r0
   1f260:	4616      	mov	r6, r2
   1f262:	461f      	mov	r7, r3
   1f264:	4692      	mov	sl, r2
   1f266:	469b      	mov	fp, r3
   1f268:	ed2d 8b04 	vpush	{d8-d9}
   1f26c:	b093      	sub	sp, #76	; 0x4c
   1f26e:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
   1f272:	b975      	cbnz	r5, 1f292 <_dtoa_r+0x3a>
   1f274:	2010      	movs	r0, #16
   1f276:	f01a fc91 	bl	39b9c <malloc>
   1f27a:	4602      	mov	r2, r0
   1f27c:	6260      	str	r0, [r4, #36]	; 0x24
   1f27e:	b920      	cbnz	r0, 1f28a <_dtoa_r+0x32>
   1f280:	4ba7      	ldr	r3, [pc, #668]	; (1f520 <_dtoa_r+0x2c8>)
   1f282:	21ea      	movs	r1, #234	; 0xea
   1f284:	48a7      	ldr	r0, [pc, #668]	; (1f524 <_dtoa_r+0x2cc>)
   1f286:	f01a fbad 	bl	399e4 <__assert_func>
   1f28a:	e9c0 5501 	strd	r5, r5, [r0, #4]
   1f28e:	6005      	str	r5, [r0, #0]
   1f290:	60c5      	str	r5, [r0, #12]
   1f292:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f294:	6819      	ldr	r1, [r3, #0]
   1f296:	b151      	cbz	r1, 1f2ae <_dtoa_r+0x56>
   1f298:	685a      	ldr	r2, [r3, #4]
   1f29a:	2301      	movs	r3, #1
   1f29c:	4620      	mov	r0, r4
   1f29e:	4093      	lsls	r3, r2
   1f2a0:	604a      	str	r2, [r1, #4]
   1f2a2:	608b      	str	r3, [r1, #8]
   1f2a4:	f01c f990 	bl	3b5c8 <_Bfree>
   1f2a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f2aa:	2200      	movs	r2, #0
   1f2ac:	601a      	str	r2, [r3, #0]
   1f2ae:	1e3b      	subs	r3, r7, #0
   1f2b0:	bfad      	iteet	ge
   1f2b2:	2300      	movge	r3, #0
   1f2b4:	2201      	movlt	r2, #1
   1f2b6:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
   1f2ba:	f8c8 3000 	strge.w	r3, [r8]
   1f2be:	4b9a      	ldr	r3, [pc, #616]	; (1f528 <_dtoa_r+0x2d0>)
   1f2c0:	bfb8      	it	lt
   1f2c2:	f8c8 2000 	strlt.w	r2, [r8]
   1f2c6:	ea33 030b 	bics.w	r3, r3, fp
   1f2ca:	d11b      	bne.n	1f304 <_dtoa_r+0xac>
   1f2cc:	f242 730f 	movw	r3, #9999	; 0x270f
   1f2d0:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1f2d2:	6013      	str	r3, [r2, #0]
   1f2d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1f2d8:	4333      	orrs	r3, r6
   1f2da:	f000 858f 	beq.w	1fdfc <_dtoa_r+0xba4>
   1f2de:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f2e0:	b963      	cbnz	r3, 1f2fc <_dtoa_r+0xa4>
   1f2e2:	4b92      	ldr	r3, [pc, #584]	; (1f52c <_dtoa_r+0x2d4>)
   1f2e4:	e022      	b.n	1f32c <_dtoa_r+0xd4>
   1f2e6:	4b92      	ldr	r3, [pc, #584]	; (1f530 <_dtoa_r+0x2d8>)
   1f2e8:	9304      	str	r3, [sp, #16]
   1f2ea:	3308      	adds	r3, #8
   1f2ec:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1f2ee:	6013      	str	r3, [r2, #0]
   1f2f0:	9804      	ldr	r0, [sp, #16]
   1f2f2:	b013      	add	sp, #76	; 0x4c
   1f2f4:	ecbd 8b04 	vpop	{d8-d9}
   1f2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f2fc:	4b8b      	ldr	r3, [pc, #556]	; (1f52c <_dtoa_r+0x2d4>)
   1f2fe:	9304      	str	r3, [sp, #16]
   1f300:	3303      	adds	r3, #3
   1f302:	e7f3      	b.n	1f2ec <_dtoa_r+0x94>
   1f304:	2200      	movs	r2, #0
   1f306:	2300      	movs	r3, #0
   1f308:	4650      	mov	r0, sl
   1f30a:	4659      	mov	r1, fp
   1f30c:	f7fd fcbc 	bl	1cc88 <__aeabi_dcmpeq>
   1f310:	4680      	mov	r8, r0
   1f312:	ec4b ab19 	vmov	d9, sl, fp
   1f316:	b158      	cbz	r0, 1f330 <_dtoa_r+0xd8>
   1f318:	2301      	movs	r3, #1
   1f31a:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1f31c:	6013      	str	r3, [r2, #0]
   1f31e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f320:	2b00      	cmp	r3, #0
   1f322:	f000 8568 	beq.w	1fdf6 <_dtoa_r+0xb9e>
   1f326:	4883      	ldr	r0, [pc, #524]	; (1f534 <_dtoa_r+0x2dc>)
   1f328:	6018      	str	r0, [r3, #0]
   1f32a:	1e43      	subs	r3, r0, #1
   1f32c:	9304      	str	r3, [sp, #16]
   1f32e:	e7df      	b.n	1f2f0 <_dtoa_r+0x98>
   1f330:	ab10      	add	r3, sp, #64	; 0x40
   1f332:	f3cb 550a 	ubfx	r5, fp, #20, #11
   1f336:	4652      	mov	r2, sl
   1f338:	4620      	mov	r0, r4
   1f33a:	9301      	str	r3, [sp, #4]
   1f33c:	ab11      	add	r3, sp, #68	; 0x44
   1f33e:	9300      	str	r3, [sp, #0]
   1f340:	465b      	mov	r3, fp
   1f342:	f01c fc83 	bl	3bc4c <__d2b>
   1f346:	ee08 0a10 	vmov	s16, r0
   1f34a:	2d00      	cmp	r5, #0
   1f34c:	f000 8082 	beq.w	1f454 <_dtoa_r+0x1fc>
   1f350:	ee19 3a90 	vmov	r3, s19
   1f354:	4656      	mov	r6, sl
   1f356:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   1f35a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
   1f35e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1f362:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
   1f366:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
   1f36a:	2200      	movs	r2, #0
   1f36c:	4b72      	ldr	r3, [pc, #456]	; (1f538 <_dtoa_r+0x2e0>)
   1f36e:	4630      	mov	r0, r6
   1f370:	4639      	mov	r1, r7
   1f372:	f7fd f869 	bl	1c448 <__aeabi_dsub>
   1f376:	a364      	add	r3, pc, #400	; (adr r3, 1f508 <_dtoa_r+0x2b0>)
   1f378:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f37c:	f7fd fa1c 	bl	1c7b8 <__aeabi_dmul>
   1f380:	a363      	add	r3, pc, #396	; (adr r3, 1f510 <_dtoa_r+0x2b8>)
   1f382:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f386:	f7fd f861 	bl	1c44c <__adddf3>
   1f38a:	4606      	mov	r6, r0
   1f38c:	460f      	mov	r7, r1
   1f38e:	4628      	mov	r0, r5
   1f390:	f7fd f9a8 	bl	1c6e4 <__aeabi_i2d>
   1f394:	a360      	add	r3, pc, #384	; (adr r3, 1f518 <_dtoa_r+0x2c0>)
   1f396:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f39a:	f7fd fa0d 	bl	1c7b8 <__aeabi_dmul>
   1f39e:	4602      	mov	r2, r0
   1f3a0:	460b      	mov	r3, r1
   1f3a2:	4630      	mov	r0, r6
   1f3a4:	4639      	mov	r1, r7
   1f3a6:	f7fd f851 	bl	1c44c <__adddf3>
   1f3aa:	4606      	mov	r6, r0
   1f3ac:	460f      	mov	r7, r1
   1f3ae:	f7fd fcb3 	bl	1cd18 <__aeabi_d2iz>
   1f3b2:	2200      	movs	r2, #0
   1f3b4:	9003      	str	r0, [sp, #12]
   1f3b6:	2300      	movs	r3, #0
   1f3b8:	4630      	mov	r0, r6
   1f3ba:	4639      	mov	r1, r7
   1f3bc:	f7fd fc6e 	bl	1cc9c <__aeabi_dcmplt>
   1f3c0:	b150      	cbz	r0, 1f3d8 <_dtoa_r+0x180>
   1f3c2:	9803      	ldr	r0, [sp, #12]
   1f3c4:	f7fd f98e 	bl	1c6e4 <__aeabi_i2d>
   1f3c8:	4632      	mov	r2, r6
   1f3ca:	463b      	mov	r3, r7
   1f3cc:	f7fd fc5c 	bl	1cc88 <__aeabi_dcmpeq>
   1f3d0:	b910      	cbnz	r0, 1f3d8 <_dtoa_r+0x180>
   1f3d2:	9b03      	ldr	r3, [sp, #12]
   1f3d4:	3b01      	subs	r3, #1
   1f3d6:	9303      	str	r3, [sp, #12]
   1f3d8:	9b03      	ldr	r3, [sp, #12]
   1f3da:	2b16      	cmp	r3, #22
   1f3dc:	d859      	bhi.n	1f492 <_dtoa_r+0x23a>
   1f3de:	9a03      	ldr	r2, [sp, #12]
   1f3e0:	4b56      	ldr	r3, [pc, #344]	; (1f53c <_dtoa_r+0x2e4>)
   1f3e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1f3e6:	ec51 0b19 	vmov	r0, r1, d9
   1f3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f3ee:	f7fd fc55 	bl	1cc9c <__aeabi_dcmplt>
   1f3f2:	2800      	cmp	r0, #0
   1f3f4:	d04f      	beq.n	1f496 <_dtoa_r+0x23e>
   1f3f6:	9b03      	ldr	r3, [sp, #12]
   1f3f8:	3b01      	subs	r3, #1
   1f3fa:	9303      	str	r3, [sp, #12]
   1f3fc:	2300      	movs	r3, #0
   1f3fe:	930c      	str	r3, [sp, #48]	; 0x30
   1f400:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1f402:	1b5d      	subs	r5, r3, r5
   1f404:	1e6b      	subs	r3, r5, #1
   1f406:	9308      	str	r3, [sp, #32]
   1f408:	bf49      	itett	mi
   1f40a:	f1c5 0301 	rsbmi	r3, r5, #1
   1f40e:	2300      	movpl	r3, #0
   1f410:	9307      	strmi	r3, [sp, #28]
   1f412:	2300      	movmi	r3, #0
   1f414:	bf54      	ite	pl
   1f416:	9307      	strpl	r3, [sp, #28]
   1f418:	9308      	strmi	r3, [sp, #32]
   1f41a:	9b03      	ldr	r3, [sp, #12]
   1f41c:	2b00      	cmp	r3, #0
   1f41e:	db3c      	blt.n	1f49a <_dtoa_r+0x242>
   1f420:	9b08      	ldr	r3, [sp, #32]
   1f422:	9a03      	ldr	r2, [sp, #12]
   1f424:	4413      	add	r3, r2
   1f426:	920b      	str	r2, [sp, #44]	; 0x2c
   1f428:	9308      	str	r3, [sp, #32]
   1f42a:	2300      	movs	r3, #0
   1f42c:	9309      	str	r3, [sp, #36]	; 0x24
   1f42e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1f430:	2b09      	cmp	r3, #9
   1f432:	f200 8087 	bhi.w	1f544 <_dtoa_r+0x2ec>
   1f436:	2b05      	cmp	r3, #5
   1f438:	bfc5      	ittet	gt
   1f43a:	3b04      	subgt	r3, #4
   1f43c:	2500      	movgt	r5, #0
   1f43e:	2501      	movle	r5, #1
   1f440:	9320      	strgt	r3, [sp, #128]	; 0x80
   1f442:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1f444:	3b02      	subs	r3, #2
   1f446:	2b03      	cmp	r3, #3
   1f448:	f200 8087 	bhi.w	1f55a <_dtoa_r+0x302>
   1f44c:	e8df f003 	tbb	[pc, r3]
   1f450:	5a393b2e 	.word	0x5a393b2e
   1f454:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
   1f458:	441d      	add	r5, r3
   1f45a:	f205 4332 	addw	r3, r5, #1074	; 0x432
   1f45e:	2b20      	cmp	r3, #32
   1f460:	bfc6      	itte	gt
   1f462:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
   1f466:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
   1f46a:	f1c3 0320 	rsble	r3, r3, #32
   1f46e:	f105 35ff 	add.w	r5, r5, #4294967295
   1f472:	bfc5      	ittet	gt
   1f474:	fa0b f303 	lslgt.w	r3, fp, r3
   1f478:	fa26 f000 	lsrgt.w	r0, r6, r0
   1f47c:	fa06 f003 	lslle.w	r0, r6, r3
   1f480:	4318      	orrgt	r0, r3
   1f482:	f7fd f91f 	bl	1c6c4 <__aeabi_ui2d>
   1f486:	2301      	movs	r3, #1
   1f488:	4606      	mov	r6, r0
   1f48a:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
   1f48e:	930e      	str	r3, [sp, #56]	; 0x38
   1f490:	e76b      	b.n	1f36a <_dtoa_r+0x112>
   1f492:	2301      	movs	r3, #1
   1f494:	e7b3      	b.n	1f3fe <_dtoa_r+0x1a6>
   1f496:	900c      	str	r0, [sp, #48]	; 0x30
   1f498:	e7b2      	b.n	1f400 <_dtoa_r+0x1a8>
   1f49a:	9b07      	ldr	r3, [sp, #28]
   1f49c:	9a03      	ldr	r2, [sp, #12]
   1f49e:	1a9b      	subs	r3, r3, r2
   1f4a0:	9307      	str	r3, [sp, #28]
   1f4a2:	4253      	negs	r3, r2
   1f4a4:	9309      	str	r3, [sp, #36]	; 0x24
   1f4a6:	2300      	movs	r3, #0
   1f4a8:	930b      	str	r3, [sp, #44]	; 0x2c
   1f4aa:	e7c0      	b.n	1f42e <_dtoa_r+0x1d6>
   1f4ac:	2300      	movs	r3, #0
   1f4ae:	930a      	str	r3, [sp, #40]	; 0x28
   1f4b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1f4b2:	2b00      	cmp	r3, #0
   1f4b4:	dc54      	bgt.n	1f560 <_dtoa_r+0x308>
   1f4b6:	2301      	movs	r3, #1
   1f4b8:	461a      	mov	r2, r3
   1f4ba:	e9cd 3305 	strd	r3, r3, [sp, #20]
   1f4be:	9221      	str	r2, [sp, #132]	; 0x84
   1f4c0:	e00c      	b.n	1f4dc <_dtoa_r+0x284>
   1f4c2:	2301      	movs	r3, #1
   1f4c4:	e7f3      	b.n	1f4ae <_dtoa_r+0x256>
   1f4c6:	2300      	movs	r3, #0
   1f4c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
   1f4ca:	930a      	str	r3, [sp, #40]	; 0x28
   1f4cc:	9b03      	ldr	r3, [sp, #12]
   1f4ce:	4413      	add	r3, r2
   1f4d0:	9305      	str	r3, [sp, #20]
   1f4d2:	3301      	adds	r3, #1
   1f4d4:	2b01      	cmp	r3, #1
   1f4d6:	9306      	str	r3, [sp, #24]
   1f4d8:	bfb8      	it	lt
   1f4da:	2301      	movlt	r3, #1
   1f4dc:	2200      	movs	r2, #0
   1f4de:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1f4e0:	6042      	str	r2, [r0, #4]
   1f4e2:	2204      	movs	r2, #4
   1f4e4:	f102 0614 	add.w	r6, r2, #20
   1f4e8:	6841      	ldr	r1, [r0, #4]
   1f4ea:	429e      	cmp	r6, r3
   1f4ec:	d93c      	bls.n	1f568 <_dtoa_r+0x310>
   1f4ee:	4620      	mov	r0, r4
   1f4f0:	f01c f82a 	bl	3b548 <_Balloc>
   1f4f4:	9004      	str	r0, [sp, #16]
   1f4f6:	2800      	cmp	r0, #0
   1f4f8:	d13a      	bne.n	1f570 <_dtoa_r+0x318>
   1f4fa:	4b11      	ldr	r3, [pc, #68]	; (1f540 <_dtoa_r+0x2e8>)
   1f4fc:	4602      	mov	r2, r0
   1f4fe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   1f502:	e6bf      	b.n	1f284 <_dtoa_r+0x2c>
   1f504:	2301      	movs	r3, #1
   1f506:	e7df      	b.n	1f4c8 <_dtoa_r+0x270>
   1f508:	636f4361 	.word	0x636f4361
   1f50c:	3fd287a7 	.word	0x3fd287a7
   1f510:	8b60c8b3 	.word	0x8b60c8b3
   1f514:	3fc68a28 	.word	0x3fc68a28
   1f518:	509f79fb 	.word	0x509f79fb
   1f51c:	3fd34413 	.word	0x3fd34413
   1f520:	0004bddc 	.word	0x0004bddc
   1f524:	0004bdf3 	.word	0x0004bdf3
   1f528:	7ff00000 	.word	0x7ff00000
   1f52c:	0004bdd8 	.word	0x0004bdd8
   1f530:	0004bdcf 	.word	0x0004bdcf
   1f534:	00045a46 	.word	0x00045a46
   1f538:	3ff80000 	.word	0x3ff80000
   1f53c:	00042878 	.word	0x00042878
   1f540:	0004be67 	.word	0x0004be67
   1f544:	2501      	movs	r5, #1
   1f546:	2300      	movs	r3, #0
   1f548:	950a      	str	r5, [sp, #40]	; 0x28
   1f54a:	9320      	str	r3, [sp, #128]	; 0x80
   1f54c:	f04f 33ff 	mov.w	r3, #4294967295
   1f550:	2200      	movs	r2, #0
   1f552:	e9cd 3305 	strd	r3, r3, [sp, #20]
   1f556:	2312      	movs	r3, #18
   1f558:	e7b1      	b.n	1f4be <_dtoa_r+0x266>
   1f55a:	2301      	movs	r3, #1
   1f55c:	930a      	str	r3, [sp, #40]	; 0x28
   1f55e:	e7f5      	b.n	1f54c <_dtoa_r+0x2f4>
   1f560:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1f562:	e9cd 3305 	strd	r3, r3, [sp, #20]
   1f566:	e7b9      	b.n	1f4dc <_dtoa_r+0x284>
   1f568:	3101      	adds	r1, #1
   1f56a:	0052      	lsls	r2, r2, #1
   1f56c:	6041      	str	r1, [r0, #4]
   1f56e:	e7b9      	b.n	1f4e4 <_dtoa_r+0x28c>
   1f570:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f572:	9a04      	ldr	r2, [sp, #16]
   1f574:	601a      	str	r2, [r3, #0]
   1f576:	9b06      	ldr	r3, [sp, #24]
   1f578:	2b0e      	cmp	r3, #14
   1f57a:	f200 809d 	bhi.w	1f6b8 <_dtoa_r+0x460>
   1f57e:	2d00      	cmp	r5, #0
   1f580:	f000 809a 	beq.w	1f6b8 <_dtoa_r+0x460>
   1f584:	9b03      	ldr	r3, [sp, #12]
   1f586:	2b00      	cmp	r3, #0
   1f588:	dd32      	ble.n	1f5f0 <_dtoa_r+0x398>
   1f58a:	f003 030f 	and.w	r3, r3, #15
   1f58e:	4ab6      	ldr	r2, [pc, #728]	; (1f868 <_dtoa_r+0x610>)
   1f590:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1f594:	e9d3 8900 	ldrd	r8, r9, [r3]
   1f598:	9b03      	ldr	r3, [sp, #12]
   1f59a:	05d8      	lsls	r0, r3, #23
   1f59c:	ea4f 1723 	mov.w	r7, r3, asr #4
   1f5a0:	d516      	bpl.n	1f5d0 <_dtoa_r+0x378>
   1f5a2:	4bb2      	ldr	r3, [pc, #712]	; (1f86c <_dtoa_r+0x614>)
   1f5a4:	f007 070f 	and.w	r7, r7, #15
   1f5a8:	2503      	movs	r5, #3
   1f5aa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   1f5ae:	ec51 0b19 	vmov	r0, r1, d9
   1f5b2:	f7fd fa2b 	bl	1ca0c <__aeabi_ddiv>
   1f5b6:	4682      	mov	sl, r0
   1f5b8:	468b      	mov	fp, r1
   1f5ba:	4eac      	ldr	r6, [pc, #688]	; (1f86c <_dtoa_r+0x614>)
   1f5bc:	b957      	cbnz	r7, 1f5d4 <_dtoa_r+0x37c>
   1f5be:	4642      	mov	r2, r8
   1f5c0:	464b      	mov	r3, r9
   1f5c2:	4650      	mov	r0, sl
   1f5c4:	4659      	mov	r1, fp
   1f5c6:	f7fd fa21 	bl	1ca0c <__aeabi_ddiv>
   1f5ca:	4682      	mov	sl, r0
   1f5cc:	468b      	mov	fp, r1
   1f5ce:	e028      	b.n	1f622 <_dtoa_r+0x3ca>
   1f5d0:	2502      	movs	r5, #2
   1f5d2:	e7f2      	b.n	1f5ba <_dtoa_r+0x362>
   1f5d4:	07f9      	lsls	r1, r7, #31
   1f5d6:	d508      	bpl.n	1f5ea <_dtoa_r+0x392>
   1f5d8:	4640      	mov	r0, r8
   1f5da:	4649      	mov	r1, r9
   1f5dc:	3501      	adds	r5, #1
   1f5de:	e9d6 2300 	ldrd	r2, r3, [r6]
   1f5e2:	f7fd f8e9 	bl	1c7b8 <__aeabi_dmul>
   1f5e6:	4680      	mov	r8, r0
   1f5e8:	4689      	mov	r9, r1
   1f5ea:	107f      	asrs	r7, r7, #1
   1f5ec:	3608      	adds	r6, #8
   1f5ee:	e7e5      	b.n	1f5bc <_dtoa_r+0x364>
   1f5f0:	f000 809b 	beq.w	1f72a <_dtoa_r+0x4d2>
   1f5f4:	9b03      	ldr	r3, [sp, #12]
   1f5f6:	2502      	movs	r5, #2
   1f5f8:	4f9c      	ldr	r7, [pc, #624]	; (1f86c <_dtoa_r+0x614>)
   1f5fa:	425e      	negs	r6, r3
   1f5fc:	4b9a      	ldr	r3, [pc, #616]	; (1f868 <_dtoa_r+0x610>)
   1f5fe:	f006 020f 	and.w	r2, r6, #15
   1f602:	1136      	asrs	r6, r6, #4
   1f604:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1f608:	ec51 0b19 	vmov	r0, r1, d9
   1f60c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f610:	f7fd f8d2 	bl	1c7b8 <__aeabi_dmul>
   1f614:	2300      	movs	r3, #0
   1f616:	4682      	mov	sl, r0
   1f618:	468b      	mov	fp, r1
   1f61a:	2e00      	cmp	r6, #0
   1f61c:	d17a      	bne.n	1f714 <_dtoa_r+0x4bc>
   1f61e:	2b00      	cmp	r3, #0
   1f620:	d1d3      	bne.n	1f5ca <_dtoa_r+0x372>
   1f622:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1f624:	2b00      	cmp	r3, #0
   1f626:	f000 8082 	beq.w	1f72e <_dtoa_r+0x4d6>
   1f62a:	2200      	movs	r2, #0
   1f62c:	4b90      	ldr	r3, [pc, #576]	; (1f870 <_dtoa_r+0x618>)
   1f62e:	4650      	mov	r0, sl
   1f630:	4659      	mov	r1, fp
   1f632:	f7fd fb33 	bl	1cc9c <__aeabi_dcmplt>
   1f636:	2800      	cmp	r0, #0
   1f638:	d079      	beq.n	1f72e <_dtoa_r+0x4d6>
   1f63a:	9b06      	ldr	r3, [sp, #24]
   1f63c:	2b00      	cmp	r3, #0
   1f63e:	d076      	beq.n	1f72e <_dtoa_r+0x4d6>
   1f640:	9b05      	ldr	r3, [sp, #20]
   1f642:	2b00      	cmp	r3, #0
   1f644:	dd36      	ble.n	1f6b4 <_dtoa_r+0x45c>
   1f646:	9b03      	ldr	r3, [sp, #12]
   1f648:	4650      	mov	r0, sl
   1f64a:	4659      	mov	r1, fp
   1f64c:	2200      	movs	r2, #0
   1f64e:	1e5f      	subs	r7, r3, #1
   1f650:	4b88      	ldr	r3, [pc, #544]	; (1f874 <_dtoa_r+0x61c>)
   1f652:	f7fd f8b1 	bl	1c7b8 <__aeabi_dmul>
   1f656:	3501      	adds	r5, #1
   1f658:	4682      	mov	sl, r0
   1f65a:	468b      	mov	fp, r1
   1f65c:	9e05      	ldr	r6, [sp, #20]
   1f65e:	4628      	mov	r0, r5
   1f660:	46d0      	mov	r8, sl
   1f662:	f7fd f83f 	bl	1c6e4 <__aeabi_i2d>
   1f666:	4652      	mov	r2, sl
   1f668:	465b      	mov	r3, fp
   1f66a:	46d9      	mov	r9, fp
   1f66c:	f7fd f8a4 	bl	1c7b8 <__aeabi_dmul>
   1f670:	2200      	movs	r2, #0
   1f672:	4b81      	ldr	r3, [pc, #516]	; (1f878 <_dtoa_r+0x620>)
   1f674:	f7fc feea 	bl	1c44c <__adddf3>
   1f678:	4682      	mov	sl, r0
   1f67a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
   1f67e:	2e00      	cmp	r6, #0
   1f680:	d158      	bne.n	1f734 <_dtoa_r+0x4dc>
   1f682:	2200      	movs	r2, #0
   1f684:	4b7d      	ldr	r3, [pc, #500]	; (1f87c <_dtoa_r+0x624>)
   1f686:	4640      	mov	r0, r8
   1f688:	4649      	mov	r1, r9
   1f68a:	f7fc fedd 	bl	1c448 <__aeabi_dsub>
   1f68e:	4652      	mov	r2, sl
   1f690:	465b      	mov	r3, fp
   1f692:	4680      	mov	r8, r0
   1f694:	4689      	mov	r9, r1
   1f696:	f7fd fb1f 	bl	1ccd8 <__aeabi_dcmpgt>
   1f69a:	2800      	cmp	r0, #0
   1f69c:	f040 8293 	bne.w	1fbc6 <_dtoa_r+0x96e>
   1f6a0:	4652      	mov	r2, sl
   1f6a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   1f6a6:	4640      	mov	r0, r8
   1f6a8:	4649      	mov	r1, r9
   1f6aa:	f7fd faf7 	bl	1cc9c <__aeabi_dcmplt>
   1f6ae:	2800      	cmp	r0, #0
   1f6b0:	f040 8287 	bne.w	1fbc2 <_dtoa_r+0x96a>
   1f6b4:	ec5b ab19 	vmov	sl, fp, d9
   1f6b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1f6ba:	2b00      	cmp	r3, #0
   1f6bc:	f2c0 8148 	blt.w	1f950 <_dtoa_r+0x6f8>
   1f6c0:	9a03      	ldr	r2, [sp, #12]
   1f6c2:	2a0e      	cmp	r2, #14
   1f6c4:	f300 8144 	bgt.w	1f950 <_dtoa_r+0x6f8>
   1f6c8:	4b67      	ldr	r3, [pc, #412]	; (1f868 <_dtoa_r+0x610>)
   1f6ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1f6ce:	e9d3 8900 	ldrd	r8, r9, [r3]
   1f6d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1f6d4:	2b00      	cmp	r3, #0
   1f6d6:	f280 80d5 	bge.w	1f884 <_dtoa_r+0x62c>
   1f6da:	9b06      	ldr	r3, [sp, #24]
   1f6dc:	2b00      	cmp	r3, #0
   1f6de:	f300 80d1 	bgt.w	1f884 <_dtoa_r+0x62c>
   1f6e2:	f040 826d 	bne.w	1fbc0 <_dtoa_r+0x968>
   1f6e6:	2200      	movs	r2, #0
   1f6e8:	4b64      	ldr	r3, [pc, #400]	; (1f87c <_dtoa_r+0x624>)
   1f6ea:	4640      	mov	r0, r8
   1f6ec:	4649      	mov	r1, r9
   1f6ee:	f7fd f863 	bl	1c7b8 <__aeabi_dmul>
   1f6f2:	4652      	mov	r2, sl
   1f6f4:	465b      	mov	r3, fp
   1f6f6:	f7fd fae5 	bl	1ccc4 <__aeabi_dcmpge>
   1f6fa:	9e06      	ldr	r6, [sp, #24]
   1f6fc:	4637      	mov	r7, r6
   1f6fe:	2800      	cmp	r0, #0
   1f700:	f040 8243 	bne.w	1fb8a <_dtoa_r+0x932>
   1f704:	2331      	movs	r3, #49	; 0x31
   1f706:	9d04      	ldr	r5, [sp, #16]
   1f708:	f805 3b01 	strb.w	r3, [r5], #1
   1f70c:	9b03      	ldr	r3, [sp, #12]
   1f70e:	3301      	adds	r3, #1
   1f710:	9303      	str	r3, [sp, #12]
   1f712:	e23e      	b.n	1fb92 <_dtoa_r+0x93a>
   1f714:	07f2      	lsls	r2, r6, #31
   1f716:	d505      	bpl.n	1f724 <_dtoa_r+0x4cc>
   1f718:	3501      	adds	r5, #1
   1f71a:	e9d7 2300 	ldrd	r2, r3, [r7]
   1f71e:	f7fd f84b 	bl	1c7b8 <__aeabi_dmul>
   1f722:	2301      	movs	r3, #1
   1f724:	1076      	asrs	r6, r6, #1
   1f726:	3708      	adds	r7, #8
   1f728:	e777      	b.n	1f61a <_dtoa_r+0x3c2>
   1f72a:	2502      	movs	r5, #2
   1f72c:	e779      	b.n	1f622 <_dtoa_r+0x3ca>
   1f72e:	9f03      	ldr	r7, [sp, #12]
   1f730:	9e06      	ldr	r6, [sp, #24]
   1f732:	e794      	b.n	1f65e <_dtoa_r+0x406>
   1f734:	9904      	ldr	r1, [sp, #16]
   1f736:	4b4c      	ldr	r3, [pc, #304]	; (1f868 <_dtoa_r+0x610>)
   1f738:	4431      	add	r1, r6
   1f73a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1f73e:	910d      	str	r1, [sp, #52]	; 0x34
   1f740:	990a      	ldr	r1, [sp, #40]	; 0x28
   1f742:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   1f746:	2900      	cmp	r1, #0
   1f748:	d043      	beq.n	1f7d2 <_dtoa_r+0x57a>
   1f74a:	2000      	movs	r0, #0
   1f74c:	494c      	ldr	r1, [pc, #304]	; (1f880 <_dtoa_r+0x628>)
   1f74e:	f7fd f95d 	bl	1ca0c <__aeabi_ddiv>
   1f752:	4652      	mov	r2, sl
   1f754:	465b      	mov	r3, fp
   1f756:	f7fc fe77 	bl	1c448 <__aeabi_dsub>
   1f75a:	9d04      	ldr	r5, [sp, #16]
   1f75c:	4682      	mov	sl, r0
   1f75e:	468b      	mov	fp, r1
   1f760:	4649      	mov	r1, r9
   1f762:	4640      	mov	r0, r8
   1f764:	f7fd fad8 	bl	1cd18 <__aeabi_d2iz>
   1f768:	4606      	mov	r6, r0
   1f76a:	f7fc ffbb 	bl	1c6e4 <__aeabi_i2d>
   1f76e:	4602      	mov	r2, r0
   1f770:	3630      	adds	r6, #48	; 0x30
   1f772:	460b      	mov	r3, r1
   1f774:	4640      	mov	r0, r8
   1f776:	4649      	mov	r1, r9
   1f778:	f7fc fe66 	bl	1c448 <__aeabi_dsub>
   1f77c:	4652      	mov	r2, sl
   1f77e:	465b      	mov	r3, fp
   1f780:	f805 6b01 	strb.w	r6, [r5], #1
   1f784:	4680      	mov	r8, r0
   1f786:	4689      	mov	r9, r1
   1f788:	f7fd fa88 	bl	1cc9c <__aeabi_dcmplt>
   1f78c:	2800      	cmp	r0, #0
   1f78e:	d163      	bne.n	1f858 <_dtoa_r+0x600>
   1f790:	4642      	mov	r2, r8
   1f792:	464b      	mov	r3, r9
   1f794:	2000      	movs	r0, #0
   1f796:	4936      	ldr	r1, [pc, #216]	; (1f870 <_dtoa_r+0x618>)
   1f798:	f7fc fe56 	bl	1c448 <__aeabi_dsub>
   1f79c:	4652      	mov	r2, sl
   1f79e:	465b      	mov	r3, fp
   1f7a0:	f7fd fa7c 	bl	1cc9c <__aeabi_dcmplt>
   1f7a4:	2800      	cmp	r0, #0
   1f7a6:	f040 80b5 	bne.w	1f914 <_dtoa_r+0x6bc>
   1f7aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f7ac:	429d      	cmp	r5, r3
   1f7ae:	d081      	beq.n	1f6b4 <_dtoa_r+0x45c>
   1f7b0:	2200      	movs	r2, #0
   1f7b2:	4b30      	ldr	r3, [pc, #192]	; (1f874 <_dtoa_r+0x61c>)
   1f7b4:	4650      	mov	r0, sl
   1f7b6:	4659      	mov	r1, fp
   1f7b8:	f7fc fffe 	bl	1c7b8 <__aeabi_dmul>
   1f7bc:	2200      	movs	r2, #0
   1f7be:	4682      	mov	sl, r0
   1f7c0:	468b      	mov	fp, r1
   1f7c2:	4640      	mov	r0, r8
   1f7c4:	4649      	mov	r1, r9
   1f7c6:	4b2b      	ldr	r3, [pc, #172]	; (1f874 <_dtoa_r+0x61c>)
   1f7c8:	f7fc fff6 	bl	1c7b8 <__aeabi_dmul>
   1f7cc:	4680      	mov	r8, r0
   1f7ce:	4689      	mov	r9, r1
   1f7d0:	e7c6      	b.n	1f760 <_dtoa_r+0x508>
   1f7d2:	4650      	mov	r0, sl
   1f7d4:	4659      	mov	r1, fp
   1f7d6:	f7fc ffef 	bl	1c7b8 <__aeabi_dmul>
   1f7da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f7dc:	4682      	mov	sl, r0
   1f7de:	468b      	mov	fp, r1
   1f7e0:	9d04      	ldr	r5, [sp, #16]
   1f7e2:	930f      	str	r3, [sp, #60]	; 0x3c
   1f7e4:	4649      	mov	r1, r9
   1f7e6:	4640      	mov	r0, r8
   1f7e8:	f7fd fa96 	bl	1cd18 <__aeabi_d2iz>
   1f7ec:	4606      	mov	r6, r0
   1f7ee:	f7fc ff79 	bl	1c6e4 <__aeabi_i2d>
   1f7f2:	4602      	mov	r2, r0
   1f7f4:	460b      	mov	r3, r1
   1f7f6:	4640      	mov	r0, r8
   1f7f8:	4649      	mov	r1, r9
   1f7fa:	3630      	adds	r6, #48	; 0x30
   1f7fc:	f7fc fe24 	bl	1c448 <__aeabi_dsub>
   1f800:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f802:	f805 6b01 	strb.w	r6, [r5], #1
   1f806:	4680      	mov	r8, r0
   1f808:	429d      	cmp	r5, r3
   1f80a:	4689      	mov	r9, r1
   1f80c:	f04f 0200 	mov.w	r2, #0
   1f810:	d124      	bne.n	1f85c <_dtoa_r+0x604>
   1f812:	4b1b      	ldr	r3, [pc, #108]	; (1f880 <_dtoa_r+0x628>)
   1f814:	4650      	mov	r0, sl
   1f816:	4659      	mov	r1, fp
   1f818:	f7fc fe18 	bl	1c44c <__adddf3>
   1f81c:	4602      	mov	r2, r0
   1f81e:	460b      	mov	r3, r1
   1f820:	4640      	mov	r0, r8
   1f822:	4649      	mov	r1, r9
   1f824:	f7fd fa58 	bl	1ccd8 <__aeabi_dcmpgt>
   1f828:	2800      	cmp	r0, #0
   1f82a:	d173      	bne.n	1f914 <_dtoa_r+0x6bc>
   1f82c:	4652      	mov	r2, sl
   1f82e:	465b      	mov	r3, fp
   1f830:	2000      	movs	r0, #0
   1f832:	4913      	ldr	r1, [pc, #76]	; (1f880 <_dtoa_r+0x628>)
   1f834:	f7fc fe08 	bl	1c448 <__aeabi_dsub>
   1f838:	4602      	mov	r2, r0
   1f83a:	460b      	mov	r3, r1
   1f83c:	4640      	mov	r0, r8
   1f83e:	4649      	mov	r1, r9
   1f840:	f7fd fa2c 	bl	1cc9c <__aeabi_dcmplt>
   1f844:	2800      	cmp	r0, #0
   1f846:	f43f af35 	beq.w	1f6b4 <_dtoa_r+0x45c>
   1f84a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1f84c:	1e6b      	subs	r3, r5, #1
   1f84e:	930f      	str	r3, [sp, #60]	; 0x3c
   1f850:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1f854:	2b30      	cmp	r3, #48	; 0x30
   1f856:	d0f8      	beq.n	1f84a <_dtoa_r+0x5f2>
   1f858:	9703      	str	r7, [sp, #12]
   1f85a:	e049      	b.n	1f8f0 <_dtoa_r+0x698>
   1f85c:	4b05      	ldr	r3, [pc, #20]	; (1f874 <_dtoa_r+0x61c>)
   1f85e:	f7fc ffab 	bl	1c7b8 <__aeabi_dmul>
   1f862:	4680      	mov	r8, r0
   1f864:	4689      	mov	r9, r1
   1f866:	e7bd      	b.n	1f7e4 <_dtoa_r+0x58c>
   1f868:	00042878 	.word	0x00042878
   1f86c:	00042850 	.word	0x00042850
   1f870:	3ff00000 	.word	0x3ff00000
   1f874:	40240000 	.word	0x40240000
   1f878:	401c0000 	.word	0x401c0000
   1f87c:	40140000 	.word	0x40140000
   1f880:	3fe00000 	.word	0x3fe00000
   1f884:	4656      	mov	r6, sl
   1f886:	465f      	mov	r7, fp
   1f888:	9d04      	ldr	r5, [sp, #16]
   1f88a:	4642      	mov	r2, r8
   1f88c:	464b      	mov	r3, r9
   1f88e:	4630      	mov	r0, r6
   1f890:	4639      	mov	r1, r7
   1f892:	f7fd f8bb 	bl	1ca0c <__aeabi_ddiv>
   1f896:	f7fd fa3f 	bl	1cd18 <__aeabi_d2iz>
   1f89a:	4682      	mov	sl, r0
   1f89c:	f7fc ff22 	bl	1c6e4 <__aeabi_i2d>
   1f8a0:	4642      	mov	r2, r8
   1f8a2:	464b      	mov	r3, r9
   1f8a4:	f7fc ff88 	bl	1c7b8 <__aeabi_dmul>
   1f8a8:	4602      	mov	r2, r0
   1f8aa:	4630      	mov	r0, r6
   1f8ac:	f10a 0630 	add.w	r6, sl, #48	; 0x30
   1f8b0:	460b      	mov	r3, r1
   1f8b2:	4639      	mov	r1, r7
   1f8b4:	f7fc fdc8 	bl	1c448 <__aeabi_dsub>
   1f8b8:	f805 6b01 	strb.w	r6, [r5], #1
   1f8bc:	9e04      	ldr	r6, [sp, #16]
   1f8be:	4602      	mov	r2, r0
   1f8c0:	9f06      	ldr	r7, [sp, #24]
   1f8c2:	460b      	mov	r3, r1
   1f8c4:	1bae      	subs	r6, r5, r6
   1f8c6:	42b7      	cmp	r7, r6
   1f8c8:	d135      	bne.n	1f936 <_dtoa_r+0x6de>
   1f8ca:	f7fc fdbf 	bl	1c44c <__adddf3>
   1f8ce:	4642      	mov	r2, r8
   1f8d0:	464b      	mov	r3, r9
   1f8d2:	4606      	mov	r6, r0
   1f8d4:	460f      	mov	r7, r1
   1f8d6:	f7fd f9ff 	bl	1ccd8 <__aeabi_dcmpgt>
   1f8da:	b9d0      	cbnz	r0, 1f912 <_dtoa_r+0x6ba>
   1f8dc:	4642      	mov	r2, r8
   1f8de:	464b      	mov	r3, r9
   1f8e0:	4630      	mov	r0, r6
   1f8e2:	4639      	mov	r1, r7
   1f8e4:	f7fd f9d0 	bl	1cc88 <__aeabi_dcmpeq>
   1f8e8:	b110      	cbz	r0, 1f8f0 <_dtoa_r+0x698>
   1f8ea:	f01a 0f01 	tst.w	sl, #1
   1f8ee:	d110      	bne.n	1f912 <_dtoa_r+0x6ba>
   1f8f0:	4620      	mov	r0, r4
   1f8f2:	ee18 1a10 	vmov	r1, s16
   1f8f6:	f01b fe67 	bl	3b5c8 <_Bfree>
   1f8fa:	2300      	movs	r3, #0
   1f8fc:	9803      	ldr	r0, [sp, #12]
   1f8fe:	702b      	strb	r3, [r5, #0]
   1f900:	3001      	adds	r0, #1
   1f902:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1f904:	6018      	str	r0, [r3, #0]
   1f906:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1f908:	2b00      	cmp	r3, #0
   1f90a:	f43f acf1 	beq.w	1f2f0 <_dtoa_r+0x98>
   1f90e:	601d      	str	r5, [r3, #0]
   1f910:	e4ee      	b.n	1f2f0 <_dtoa_r+0x98>
   1f912:	9f03      	ldr	r7, [sp, #12]
   1f914:	462b      	mov	r3, r5
   1f916:	461d      	mov	r5, r3
   1f918:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1f91c:	2a39      	cmp	r2, #57	; 0x39
   1f91e:	d106      	bne.n	1f92e <_dtoa_r+0x6d6>
   1f920:	9a04      	ldr	r2, [sp, #16]
   1f922:	429a      	cmp	r2, r3
   1f924:	d1f7      	bne.n	1f916 <_dtoa_r+0x6be>
   1f926:	2230      	movs	r2, #48	; 0x30
   1f928:	9904      	ldr	r1, [sp, #16]
   1f92a:	3701      	adds	r7, #1
   1f92c:	700a      	strb	r2, [r1, #0]
   1f92e:	781a      	ldrb	r2, [r3, #0]
   1f930:	3201      	adds	r2, #1
   1f932:	701a      	strb	r2, [r3, #0]
   1f934:	e790      	b.n	1f858 <_dtoa_r+0x600>
   1f936:	2200      	movs	r2, #0
   1f938:	4ba4      	ldr	r3, [pc, #656]	; (1fbcc <_dtoa_r+0x974>)
   1f93a:	f7fc ff3d 	bl	1c7b8 <__aeabi_dmul>
   1f93e:	2200      	movs	r2, #0
   1f940:	2300      	movs	r3, #0
   1f942:	4606      	mov	r6, r0
   1f944:	460f      	mov	r7, r1
   1f946:	f7fd f99f 	bl	1cc88 <__aeabi_dcmpeq>
   1f94a:	2800      	cmp	r0, #0
   1f94c:	d09d      	beq.n	1f88a <_dtoa_r+0x632>
   1f94e:	e7cf      	b.n	1f8f0 <_dtoa_r+0x698>
   1f950:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f952:	2a00      	cmp	r2, #0
   1f954:	f000 80d5 	beq.w	1fb02 <_dtoa_r+0x8aa>
   1f958:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1f95a:	2a01      	cmp	r2, #1
   1f95c:	f300 80b9 	bgt.w	1fad2 <_dtoa_r+0x87a>
   1f960:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1f962:	2a00      	cmp	r2, #0
   1f964:	f000 80b1 	beq.w	1faca <_dtoa_r+0x872>
   1f968:	f203 4333 	addw	r3, r3, #1075	; 0x433
   1f96c:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1f96e:	9d07      	ldr	r5, [sp, #28]
   1f970:	9a07      	ldr	r2, [sp, #28]
   1f972:	2101      	movs	r1, #1
   1f974:	4620      	mov	r0, r4
   1f976:	441a      	add	r2, r3
   1f978:	9207      	str	r2, [sp, #28]
   1f97a:	9a08      	ldr	r2, [sp, #32]
   1f97c:	441a      	add	r2, r3
   1f97e:	9208      	str	r2, [sp, #32]
   1f980:	f01b fed6 	bl	3b730 <__i2b>
   1f984:	4607      	mov	r7, r0
   1f986:	2d00      	cmp	r5, #0
   1f988:	dd0c      	ble.n	1f9a4 <_dtoa_r+0x74c>
   1f98a:	9b08      	ldr	r3, [sp, #32]
   1f98c:	2b00      	cmp	r3, #0
   1f98e:	dd09      	ble.n	1f9a4 <_dtoa_r+0x74c>
   1f990:	42ab      	cmp	r3, r5
   1f992:	9a07      	ldr	r2, [sp, #28]
   1f994:	bfa8      	it	ge
   1f996:	462b      	movge	r3, r5
   1f998:	1ad2      	subs	r2, r2, r3
   1f99a:	1aed      	subs	r5, r5, r3
   1f99c:	9207      	str	r2, [sp, #28]
   1f99e:	9a08      	ldr	r2, [sp, #32]
   1f9a0:	1ad3      	subs	r3, r2, r3
   1f9a2:	9308      	str	r3, [sp, #32]
   1f9a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f9a6:	b31b      	cbz	r3, 1f9f0 <_dtoa_r+0x798>
   1f9a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1f9aa:	2b00      	cmp	r3, #0
   1f9ac:	f000 80ad 	beq.w	1fb0a <_dtoa_r+0x8b2>
   1f9b0:	2e00      	cmp	r6, #0
   1f9b2:	dd13      	ble.n	1f9dc <_dtoa_r+0x784>
   1f9b4:	4639      	mov	r1, r7
   1f9b6:	4632      	mov	r2, r6
   1f9b8:	4620      	mov	r0, r4
   1f9ba:	f01b ff77 	bl	3b8ac <__pow5mult>
   1f9be:	ee18 2a10 	vmov	r2, s16
   1f9c2:	4601      	mov	r1, r0
   1f9c4:	4607      	mov	r7, r0
   1f9c6:	4620      	mov	r0, r4
   1f9c8:	f01b fec8 	bl	3b75c <__multiply>
   1f9cc:	4680      	mov	r8, r0
   1f9ce:	ee18 1a10 	vmov	r1, s16
   1f9d2:	4620      	mov	r0, r4
   1f9d4:	ee08 8a10 	vmov	s16, r8
   1f9d8:	f01b fdf6 	bl	3b5c8 <_Bfree>
   1f9dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f9de:	1b9a      	subs	r2, r3, r6
   1f9e0:	d006      	beq.n	1f9f0 <_dtoa_r+0x798>
   1f9e2:	ee18 1a10 	vmov	r1, s16
   1f9e6:	4620      	mov	r0, r4
   1f9e8:	f01b ff60 	bl	3b8ac <__pow5mult>
   1f9ec:	ee08 0a10 	vmov	s16, r0
   1f9f0:	2101      	movs	r1, #1
   1f9f2:	4620      	mov	r0, r4
   1f9f4:	f01b fe9c 	bl	3b730 <__i2b>
   1f9f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f9fa:	4606      	mov	r6, r0
   1f9fc:	2b00      	cmp	r3, #0
   1f9fe:	f340 8086 	ble.w	1fb0e <_dtoa_r+0x8b6>
   1fa02:	461a      	mov	r2, r3
   1fa04:	4601      	mov	r1, r0
   1fa06:	4620      	mov	r0, r4
   1fa08:	f01b ff50 	bl	3b8ac <__pow5mult>
   1fa0c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1fa0e:	4606      	mov	r6, r0
   1fa10:	2b01      	cmp	r3, #1
   1fa12:	dd7f      	ble.n	1fb14 <_dtoa_r+0x8bc>
   1fa14:	f04f 0800 	mov.w	r8, #0
   1fa18:	6933      	ldr	r3, [r6, #16]
   1fa1a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   1fa1e:	6918      	ldr	r0, [r3, #16]
   1fa20:	f022 f9a4 	bl	41d6c <__hi0bits>
   1fa24:	f1c0 0020 	rsb	r0, r0, #32
   1fa28:	9b08      	ldr	r3, [sp, #32]
   1fa2a:	4418      	add	r0, r3
   1fa2c:	f010 001f 	ands.w	r0, r0, #31
   1fa30:	f000 8091 	beq.w	1fb56 <_dtoa_r+0x8fe>
   1fa34:	f1c0 0320 	rsb	r3, r0, #32
   1fa38:	2b04      	cmp	r3, #4
   1fa3a:	f340 8089 	ble.w	1fb50 <_dtoa_r+0x8f8>
   1fa3e:	f1c0 001c 	rsb	r0, r0, #28
   1fa42:	9b07      	ldr	r3, [sp, #28]
   1fa44:	4405      	add	r5, r0
   1fa46:	4403      	add	r3, r0
   1fa48:	9307      	str	r3, [sp, #28]
   1fa4a:	9b08      	ldr	r3, [sp, #32]
   1fa4c:	4403      	add	r3, r0
   1fa4e:	9308      	str	r3, [sp, #32]
   1fa50:	9b07      	ldr	r3, [sp, #28]
   1fa52:	2b00      	cmp	r3, #0
   1fa54:	dd07      	ble.n	1fa66 <_dtoa_r+0x80e>
   1fa56:	ee18 1a10 	vmov	r1, s16
   1fa5a:	461a      	mov	r2, r3
   1fa5c:	4620      	mov	r0, r4
   1fa5e:	f01b ff7f 	bl	3b960 <__lshift>
   1fa62:	ee08 0a10 	vmov	s16, r0
   1fa66:	9b08      	ldr	r3, [sp, #32]
   1fa68:	2b00      	cmp	r3, #0
   1fa6a:	dd05      	ble.n	1fa78 <_dtoa_r+0x820>
   1fa6c:	4631      	mov	r1, r6
   1fa6e:	461a      	mov	r2, r3
   1fa70:	4620      	mov	r0, r4
   1fa72:	f01b ff75 	bl	3b960 <__lshift>
   1fa76:	4606      	mov	r6, r0
   1fa78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1fa7a:	2b00      	cmp	r3, #0
   1fa7c:	d06d      	beq.n	1fb5a <_dtoa_r+0x902>
   1fa7e:	4631      	mov	r1, r6
   1fa80:	ee18 0a10 	vmov	r0, s16
   1fa84:	f022 f9c1 	bl	41e0a <__mcmp>
   1fa88:	2800      	cmp	r0, #0
   1fa8a:	da66      	bge.n	1fb5a <_dtoa_r+0x902>
   1fa8c:	9b03      	ldr	r3, [sp, #12]
   1fa8e:	ee18 1a10 	vmov	r1, s16
   1fa92:	220a      	movs	r2, #10
   1fa94:	4620      	mov	r0, r4
   1fa96:	3b01      	subs	r3, #1
   1fa98:	9303      	str	r3, [sp, #12]
   1fa9a:	2300      	movs	r3, #0
   1fa9c:	f01b fdb6 	bl	3b60c <__multadd>
   1faa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1faa2:	ee08 0a10 	vmov	s16, r0
   1faa6:	2b00      	cmp	r3, #0
   1faa8:	f000 81af 	beq.w	1fe0a <_dtoa_r+0xbb2>
   1faac:	2300      	movs	r3, #0
   1faae:	4639      	mov	r1, r7
   1fab0:	220a      	movs	r2, #10
   1fab2:	4620      	mov	r0, r4
   1fab4:	f01b fdaa 	bl	3b60c <__multadd>
   1fab8:	9b05      	ldr	r3, [sp, #20]
   1faba:	4607      	mov	r7, r0
   1fabc:	2b00      	cmp	r3, #0
   1fabe:	f300 808d 	bgt.w	1fbdc <_dtoa_r+0x984>
   1fac2:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1fac4:	2b02      	cmp	r3, #2
   1fac6:	dc50      	bgt.n	1fb6a <_dtoa_r+0x912>
   1fac8:	e088      	b.n	1fbdc <_dtoa_r+0x984>
   1faca:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1facc:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   1fad0:	e74c      	b.n	1f96c <_dtoa_r+0x714>
   1fad2:	9b06      	ldr	r3, [sp, #24]
   1fad4:	1e5e      	subs	r6, r3, #1
   1fad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fad8:	42b3      	cmp	r3, r6
   1fada:	bfb7      	itett	lt
   1fadc:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
   1fade:	1b9e      	subge	r6, r3, r6
   1fae0:	9609      	strlt	r6, [sp, #36]	; 0x24
   1fae2:	1af2      	sublt	r2, r6, r3
   1fae4:	bfbf      	itttt	lt
   1fae6:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
   1fae8:	2600      	movlt	r6, #0
   1faea:	189b      	addlt	r3, r3, r2
   1faec:	930b      	strlt	r3, [sp, #44]	; 0x2c
   1faee:	9b06      	ldr	r3, [sp, #24]
   1faf0:	2b00      	cmp	r3, #0
   1faf2:	bfb7      	itett	lt
   1faf4:	e9dd 2306 	ldrdlt	r2, r3, [sp, #24]
   1faf8:	e9dd 3506 	ldrdge	r3, r5, [sp, #24]
   1fafc:	1a9d      	sublt	r5, r3, r2
   1fafe:	2300      	movlt	r3, #0
   1fb00:	e736      	b.n	1f970 <_dtoa_r+0x718>
   1fb02:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1fb04:	9d07      	ldr	r5, [sp, #28]
   1fb06:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   1fb08:	e73d      	b.n	1f986 <_dtoa_r+0x72e>
   1fb0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1fb0c:	e769      	b.n	1f9e2 <_dtoa_r+0x78a>
   1fb0e:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1fb10:	2b01      	cmp	r3, #1
   1fb12:	dc18      	bgt.n	1fb46 <_dtoa_r+0x8ee>
   1fb14:	f1ba 0f00 	cmp.w	sl, #0
   1fb18:	d115      	bne.n	1fb46 <_dtoa_r+0x8ee>
   1fb1a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1fb1e:	b993      	cbnz	r3, 1fb46 <_dtoa_r+0x8ee>
   1fb20:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   1fb24:	0d1b      	lsrs	r3, r3, #20
   1fb26:	051b      	lsls	r3, r3, #20
   1fb28:	b183      	cbz	r3, 1fb4c <_dtoa_r+0x8f4>
   1fb2a:	9b07      	ldr	r3, [sp, #28]
   1fb2c:	f04f 0801 	mov.w	r8, #1
   1fb30:	3301      	adds	r3, #1
   1fb32:	9307      	str	r3, [sp, #28]
   1fb34:	9b08      	ldr	r3, [sp, #32]
   1fb36:	3301      	adds	r3, #1
   1fb38:	9308      	str	r3, [sp, #32]
   1fb3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1fb3c:	2b00      	cmp	r3, #0
   1fb3e:	f47f af6b 	bne.w	1fa18 <_dtoa_r+0x7c0>
   1fb42:	2001      	movs	r0, #1
   1fb44:	e770      	b.n	1fa28 <_dtoa_r+0x7d0>
   1fb46:	f04f 0800 	mov.w	r8, #0
   1fb4a:	e7f6      	b.n	1fb3a <_dtoa_r+0x8e2>
   1fb4c:	4698      	mov	r8, r3
   1fb4e:	e7f4      	b.n	1fb3a <_dtoa_r+0x8e2>
   1fb50:	f43f af7e 	beq.w	1fa50 <_dtoa_r+0x7f8>
   1fb54:	4618      	mov	r0, r3
   1fb56:	301c      	adds	r0, #28
   1fb58:	e773      	b.n	1fa42 <_dtoa_r+0x7ea>
   1fb5a:	9b06      	ldr	r3, [sp, #24]
   1fb5c:	2b00      	cmp	r3, #0
   1fb5e:	dc37      	bgt.n	1fbd0 <_dtoa_r+0x978>
   1fb60:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1fb62:	2b02      	cmp	r3, #2
   1fb64:	dd34      	ble.n	1fbd0 <_dtoa_r+0x978>
   1fb66:	9b06      	ldr	r3, [sp, #24]
   1fb68:	9305      	str	r3, [sp, #20]
   1fb6a:	9b05      	ldr	r3, [sp, #20]
   1fb6c:	b96b      	cbnz	r3, 1fb8a <_dtoa_r+0x932>
   1fb6e:	4631      	mov	r1, r6
   1fb70:	2205      	movs	r2, #5
   1fb72:	4620      	mov	r0, r4
   1fb74:	f01b fd4a 	bl	3b60c <__multadd>
   1fb78:	4601      	mov	r1, r0
   1fb7a:	4606      	mov	r6, r0
   1fb7c:	ee18 0a10 	vmov	r0, s16
   1fb80:	f022 f943 	bl	41e0a <__mcmp>
   1fb84:	2800      	cmp	r0, #0
   1fb86:	f73f adbd 	bgt.w	1f704 <_dtoa_r+0x4ac>
   1fb8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1fb8c:	9d04      	ldr	r5, [sp, #16]
   1fb8e:	43db      	mvns	r3, r3
   1fb90:	9303      	str	r3, [sp, #12]
   1fb92:	f04f 0800 	mov.w	r8, #0
   1fb96:	4631      	mov	r1, r6
   1fb98:	4620      	mov	r0, r4
   1fb9a:	f01b fd15 	bl	3b5c8 <_Bfree>
   1fb9e:	2f00      	cmp	r7, #0
   1fba0:	f43f aea6 	beq.w	1f8f0 <_dtoa_r+0x698>
   1fba4:	f1b8 0f00 	cmp.w	r8, #0
   1fba8:	d005      	beq.n	1fbb6 <_dtoa_r+0x95e>
   1fbaa:	45b8      	cmp	r8, r7
   1fbac:	d003      	beq.n	1fbb6 <_dtoa_r+0x95e>
   1fbae:	4641      	mov	r1, r8
   1fbb0:	4620      	mov	r0, r4
   1fbb2:	f01b fd09 	bl	3b5c8 <_Bfree>
   1fbb6:	4639      	mov	r1, r7
   1fbb8:	4620      	mov	r0, r4
   1fbba:	f01b fd05 	bl	3b5c8 <_Bfree>
   1fbbe:	e697      	b.n	1f8f0 <_dtoa_r+0x698>
   1fbc0:	2600      	movs	r6, #0
   1fbc2:	4637      	mov	r7, r6
   1fbc4:	e7e1      	b.n	1fb8a <_dtoa_r+0x932>
   1fbc6:	9703      	str	r7, [sp, #12]
   1fbc8:	4637      	mov	r7, r6
   1fbca:	e59b      	b.n	1f704 <_dtoa_r+0x4ac>
   1fbcc:	40240000 	.word	0x40240000
   1fbd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1fbd2:	2b00      	cmp	r3, #0
   1fbd4:	f000 80ca 	beq.w	1fd6c <_dtoa_r+0xb14>
   1fbd8:	9b06      	ldr	r3, [sp, #24]
   1fbda:	9305      	str	r3, [sp, #20]
   1fbdc:	2d00      	cmp	r5, #0
   1fbde:	dd05      	ble.n	1fbec <_dtoa_r+0x994>
   1fbe0:	4639      	mov	r1, r7
   1fbe2:	462a      	mov	r2, r5
   1fbe4:	4620      	mov	r0, r4
   1fbe6:	f01b febb 	bl	3b960 <__lshift>
   1fbea:	4607      	mov	r7, r0
   1fbec:	f1b8 0f00 	cmp.w	r8, #0
   1fbf0:	d05b      	beq.n	1fcaa <_dtoa_r+0xa52>
   1fbf2:	6879      	ldr	r1, [r7, #4]
   1fbf4:	4620      	mov	r0, r4
   1fbf6:	f01b fca7 	bl	3b548 <_Balloc>
   1fbfa:	4605      	mov	r5, r0
   1fbfc:	b928      	cbnz	r0, 1fc0a <_dtoa_r+0x9b2>
   1fbfe:	4b87      	ldr	r3, [pc, #540]	; (1fe1c <_dtoa_r+0xbc4>)
   1fc00:	4602      	mov	r2, r0
   1fc02:	f240 21ea 	movw	r1, #746	; 0x2ea
   1fc06:	f7ff bb3d 	b.w	1f284 <_dtoa_r+0x2c>
   1fc0a:	693a      	ldr	r2, [r7, #16]
   1fc0c:	f107 010c 	add.w	r1, r7, #12
   1fc10:	300c      	adds	r0, #12
   1fc12:	3202      	adds	r2, #2
   1fc14:	0092      	lsls	r2, r2, #2
   1fc16:	f021 fbc5 	bl	413a4 <memcpy>
   1fc1a:	2201      	movs	r2, #1
   1fc1c:	4629      	mov	r1, r5
   1fc1e:	4620      	mov	r0, r4
   1fc20:	f01b fe9e 	bl	3b960 <__lshift>
   1fc24:	9b04      	ldr	r3, [sp, #16]
   1fc26:	46b8      	mov	r8, r7
   1fc28:	4607      	mov	r7, r0
   1fc2a:	f103 0901 	add.w	r9, r3, #1
   1fc2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1fc32:	4413      	add	r3, r2
   1fc34:	9308      	str	r3, [sp, #32]
   1fc36:	f00a 0301 	and.w	r3, sl, #1
   1fc3a:	9307      	str	r3, [sp, #28]
   1fc3c:	4631      	mov	r1, r6
   1fc3e:	ee18 0a10 	vmov	r0, s16
   1fc42:	f021 fe56 	bl	418f2 <quorem>
   1fc46:	4641      	mov	r1, r8
   1fc48:	9005      	str	r0, [sp, #20]
   1fc4a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
   1fc4e:	ee18 0a10 	vmov	r0, s16
   1fc52:	f109 3bff 	add.w	fp, r9, #4294967295
   1fc56:	f022 f8d8 	bl	41e0a <__mcmp>
   1fc5a:	463a      	mov	r2, r7
   1fc5c:	9006      	str	r0, [sp, #24]
   1fc5e:	4631      	mov	r1, r6
   1fc60:	4620      	mov	r0, r4
   1fc62:	f01b feed 	bl	3ba40 <__mdiff>
   1fc66:	68c2      	ldr	r2, [r0, #12]
   1fc68:	4605      	mov	r5, r0
   1fc6a:	bb02      	cbnz	r2, 1fcae <_dtoa_r+0xa56>
   1fc6c:	4601      	mov	r1, r0
   1fc6e:	ee18 0a10 	vmov	r0, s16
   1fc72:	f022 f8ca 	bl	41e0a <__mcmp>
   1fc76:	4602      	mov	r2, r0
   1fc78:	4629      	mov	r1, r5
   1fc7a:	4620      	mov	r0, r4
   1fc7c:	9209      	str	r2, [sp, #36]	; 0x24
   1fc7e:	f01b fca3 	bl	3b5c8 <_Bfree>
   1fc82:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1fc84:	464d      	mov	r5, r9
   1fc86:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1fc88:	ea43 0102 	orr.w	r1, r3, r2
   1fc8c:	9b07      	ldr	r3, [sp, #28]
   1fc8e:	430b      	orrs	r3, r1
   1fc90:	d10f      	bne.n	1fcb2 <_dtoa_r+0xa5a>
   1fc92:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   1fc96:	d02a      	beq.n	1fcee <_dtoa_r+0xa96>
   1fc98:	9b06      	ldr	r3, [sp, #24]
   1fc9a:	2b00      	cmp	r3, #0
   1fc9c:	dd02      	ble.n	1fca4 <_dtoa_r+0xa4c>
   1fc9e:	9b05      	ldr	r3, [sp, #20]
   1fca0:	f103 0a31 	add.w	sl, r3, #49	; 0x31
   1fca4:	f88b a000 	strb.w	sl, [fp]
   1fca8:	e775      	b.n	1fb96 <_dtoa_r+0x93e>
   1fcaa:	4638      	mov	r0, r7
   1fcac:	e7ba      	b.n	1fc24 <_dtoa_r+0x9cc>
   1fcae:	2201      	movs	r2, #1
   1fcb0:	e7e2      	b.n	1fc78 <_dtoa_r+0xa20>
   1fcb2:	9b06      	ldr	r3, [sp, #24]
   1fcb4:	2b00      	cmp	r3, #0
   1fcb6:	db04      	blt.n	1fcc2 <_dtoa_r+0xa6a>
   1fcb8:	9920      	ldr	r1, [sp, #128]	; 0x80
   1fcba:	430b      	orrs	r3, r1
   1fcbc:	9907      	ldr	r1, [sp, #28]
   1fcbe:	430b      	orrs	r3, r1
   1fcc0:	d122      	bne.n	1fd08 <_dtoa_r+0xab0>
   1fcc2:	2a00      	cmp	r2, #0
   1fcc4:	ddee      	ble.n	1fca4 <_dtoa_r+0xa4c>
   1fcc6:	ee18 1a10 	vmov	r1, s16
   1fcca:	2201      	movs	r2, #1
   1fccc:	4620      	mov	r0, r4
   1fcce:	f01b fe47 	bl	3b960 <__lshift>
   1fcd2:	4631      	mov	r1, r6
   1fcd4:	ee08 0a10 	vmov	s16, r0
   1fcd8:	f022 f897 	bl	41e0a <__mcmp>
   1fcdc:	2800      	cmp	r0, #0
   1fcde:	dc03      	bgt.n	1fce8 <_dtoa_r+0xa90>
   1fce0:	d1e0      	bne.n	1fca4 <_dtoa_r+0xa4c>
   1fce2:	f01a 0f01 	tst.w	sl, #1
   1fce6:	d0dd      	beq.n	1fca4 <_dtoa_r+0xa4c>
   1fce8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   1fcec:	d1d7      	bne.n	1fc9e <_dtoa_r+0xa46>
   1fcee:	2339      	movs	r3, #57	; 0x39
   1fcf0:	f88b 3000 	strb.w	r3, [fp]
   1fcf4:	462b      	mov	r3, r5
   1fcf6:	461d      	mov	r5, r3
   1fcf8:	3b01      	subs	r3, #1
   1fcfa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   1fcfe:	2a39      	cmp	r2, #57	; 0x39
   1fd00:	d070      	beq.n	1fde4 <_dtoa_r+0xb8c>
   1fd02:	3201      	adds	r2, #1
   1fd04:	701a      	strb	r2, [r3, #0]
   1fd06:	e746      	b.n	1fb96 <_dtoa_r+0x93e>
   1fd08:	2a00      	cmp	r2, #0
   1fd0a:	dd07      	ble.n	1fd1c <_dtoa_r+0xac4>
   1fd0c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   1fd10:	d0ed      	beq.n	1fcee <_dtoa_r+0xa96>
   1fd12:	f10a 0301 	add.w	r3, sl, #1
   1fd16:	f88b 3000 	strb.w	r3, [fp]
   1fd1a:	e73c      	b.n	1fb96 <_dtoa_r+0x93e>
   1fd1c:	9b08      	ldr	r3, [sp, #32]
   1fd1e:	f809 ac01 	strb.w	sl, [r9, #-1]
   1fd22:	4599      	cmp	r9, r3
   1fd24:	d046      	beq.n	1fdb4 <_dtoa_r+0xb5c>
   1fd26:	ee18 1a10 	vmov	r1, s16
   1fd2a:	2300      	movs	r3, #0
   1fd2c:	220a      	movs	r2, #10
   1fd2e:	4620      	mov	r0, r4
   1fd30:	f01b fc6c 	bl	3b60c <__multadd>
   1fd34:	45b8      	cmp	r8, r7
   1fd36:	ee08 0a10 	vmov	s16, r0
   1fd3a:	f04f 0300 	mov.w	r3, #0
   1fd3e:	f04f 020a 	mov.w	r2, #10
   1fd42:	4641      	mov	r1, r8
   1fd44:	4620      	mov	r0, r4
   1fd46:	d106      	bne.n	1fd56 <_dtoa_r+0xafe>
   1fd48:	f01b fc60 	bl	3b60c <__multadd>
   1fd4c:	4680      	mov	r8, r0
   1fd4e:	4607      	mov	r7, r0
   1fd50:	f109 0901 	add.w	r9, r9, #1
   1fd54:	e772      	b.n	1fc3c <_dtoa_r+0x9e4>
   1fd56:	f01b fc59 	bl	3b60c <__multadd>
   1fd5a:	4639      	mov	r1, r7
   1fd5c:	4680      	mov	r8, r0
   1fd5e:	2300      	movs	r3, #0
   1fd60:	220a      	movs	r2, #10
   1fd62:	4620      	mov	r0, r4
   1fd64:	f01b fc52 	bl	3b60c <__multadd>
   1fd68:	4607      	mov	r7, r0
   1fd6a:	e7f1      	b.n	1fd50 <_dtoa_r+0xaf8>
   1fd6c:	9b06      	ldr	r3, [sp, #24]
   1fd6e:	9305      	str	r3, [sp, #20]
   1fd70:	9d04      	ldr	r5, [sp, #16]
   1fd72:	4631      	mov	r1, r6
   1fd74:	ee18 0a10 	vmov	r0, s16
   1fd78:	f021 fdbb 	bl	418f2 <quorem>
   1fd7c:	9b04      	ldr	r3, [sp, #16]
   1fd7e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
   1fd82:	f805 ab01 	strb.w	sl, [r5], #1
   1fd86:	1aea      	subs	r2, r5, r3
   1fd88:	9b05      	ldr	r3, [sp, #20]
   1fd8a:	4293      	cmp	r3, r2
   1fd8c:	dd09      	ble.n	1fda2 <_dtoa_r+0xb4a>
   1fd8e:	ee18 1a10 	vmov	r1, s16
   1fd92:	2300      	movs	r3, #0
   1fd94:	220a      	movs	r2, #10
   1fd96:	4620      	mov	r0, r4
   1fd98:	f01b fc38 	bl	3b60c <__multadd>
   1fd9c:	ee08 0a10 	vmov	s16, r0
   1fda0:	e7e7      	b.n	1fd72 <_dtoa_r+0xb1a>
   1fda2:	9b05      	ldr	r3, [sp, #20]
   1fda4:	f04f 0800 	mov.w	r8, #0
   1fda8:	2b00      	cmp	r3, #0
   1fdaa:	bfcc      	ite	gt
   1fdac:	461d      	movgt	r5, r3
   1fdae:	2501      	movle	r5, #1
   1fdb0:	9b04      	ldr	r3, [sp, #16]
   1fdb2:	441d      	add	r5, r3
   1fdb4:	ee18 1a10 	vmov	r1, s16
   1fdb8:	2201      	movs	r2, #1
   1fdba:	4620      	mov	r0, r4
   1fdbc:	f01b fdd0 	bl	3b960 <__lshift>
   1fdc0:	4631      	mov	r1, r6
   1fdc2:	ee08 0a10 	vmov	s16, r0
   1fdc6:	f022 f820 	bl	41e0a <__mcmp>
   1fdca:	2800      	cmp	r0, #0
   1fdcc:	dc92      	bgt.n	1fcf4 <_dtoa_r+0xa9c>
   1fdce:	d102      	bne.n	1fdd6 <_dtoa_r+0xb7e>
   1fdd0:	f01a 0f01 	tst.w	sl, #1
   1fdd4:	d18e      	bne.n	1fcf4 <_dtoa_r+0xa9c>
   1fdd6:	462b      	mov	r3, r5
   1fdd8:	461d      	mov	r5, r3
   1fdda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1fdde:	2a30      	cmp	r2, #48	; 0x30
   1fde0:	d0fa      	beq.n	1fdd8 <_dtoa_r+0xb80>
   1fde2:	e6d8      	b.n	1fb96 <_dtoa_r+0x93e>
   1fde4:	9a04      	ldr	r2, [sp, #16]
   1fde6:	429a      	cmp	r2, r3
   1fde8:	d185      	bne.n	1fcf6 <_dtoa_r+0xa9e>
   1fdea:	9b03      	ldr	r3, [sp, #12]
   1fdec:	3301      	adds	r3, #1
   1fdee:	9303      	str	r3, [sp, #12]
   1fdf0:	2331      	movs	r3, #49	; 0x31
   1fdf2:	7013      	strb	r3, [r2, #0]
   1fdf4:	e6cf      	b.n	1fb96 <_dtoa_r+0x93e>
   1fdf6:	4b0a      	ldr	r3, [pc, #40]	; (1fe20 <_dtoa_r+0xbc8>)
   1fdf8:	f7ff ba98 	b.w	1f32c <_dtoa_r+0xd4>
   1fdfc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1fdfe:	2b00      	cmp	r3, #0
   1fe00:	f47f aa71 	bne.w	1f2e6 <_dtoa_r+0x8e>
   1fe04:	4b07      	ldr	r3, [pc, #28]	; (1fe24 <_dtoa_r+0xbcc>)
   1fe06:	f7ff ba91 	b.w	1f32c <_dtoa_r+0xd4>
   1fe0a:	9b05      	ldr	r3, [sp, #20]
   1fe0c:	2b00      	cmp	r3, #0
   1fe0e:	dcaf      	bgt.n	1fd70 <_dtoa_r+0xb18>
   1fe10:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1fe12:	2b02      	cmp	r3, #2
   1fe14:	f73f aea9 	bgt.w	1fb6a <_dtoa_r+0x912>
   1fe18:	e7aa      	b.n	1fd70 <_dtoa_r+0xb18>
   1fe1a:	bf00      	nop
   1fe1c:	0004be67 	.word	0x0004be67
   1fe20:	00045a45 	.word	0x00045a45
   1fe24:	0004bdcf 	.word	0x0004bdcf

0001fe28 <main>:
		NULL, NULL, NULL, -1, 0, 0);


void main(void)
{
	LOG_INF("nRF Cloud MQTT multi-service sample has started.");
   1fe28:	2149      	movs	r1, #73	; 0x49
   1fe2a:	4801      	ldr	r0, [pc, #4]	; (1fe30 <main+0x8>)
   1fe2c:	f01c be40 	b.w	3cab0 <z_log_minimal_printk>
   1fe30:	000434a4 	.word	0x000434a4

0001fe34 <create_timestamped_data_message_object>:
 *
 * @param appid
 * @return cJSON* - the timestamped data device message object if successful, NULL otherwise.
 */
static cJSON *create_timestamped_data_message_object(const char *const appid)
{
   1fe34:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1fe36:	4605      	mov	r5, r0
	cJSON *msg_obj = NULL;
	int64_t timestamp;

	if (date_time_now(&timestamp))
   1fe38:	4668      	mov	r0, sp
   1fe3a:	f008 fe83 	bl	28b44 <date_time_now>
   1fe3e:	b130      	cbz	r0, 1fe4e <create_timestamped_data_message_object+0x1a>
	{
		LOG_ERR("Failed to create timestamp for data message "
   1fe40:	462a      	mov	r2, r5
   1fe42:	2145      	movs	r1, #69	; 0x45
   1fe44:	4818      	ldr	r0, [pc, #96]	; (1fea8 <create_timestamped_data_message_object+0x74>)
   1fe46:	f01c fe33 	bl	3cab0 <z_log_minimal_printk>
	{
		LOG_ERR("Failed to populate timestamped data message object "
				"with appid %s",
				log_strdup(appid));
		cJSON_Delete(msg_obj);
		return NULL;
   1fe4a:	2400      	movs	r4, #0
   1fe4c:	e008      	b.n	1fe60 <create_timestamped_data_message_object+0x2c>
	msg_obj = cJSON_CreateObject();
   1fe4e:	f012 f937 	bl	320c0 <cJSON_CreateObject>
		LOG_ERR("Failed to create container object for timestamped data message "
   1fe52:	462a      	mov	r2, r5
	if (msg_obj == NULL)
   1fe54:	4604      	mov	r4, r0
   1fe56:	b930      	cbnz	r0, 1fe66 <create_timestamped_data_message_object+0x32>
		LOG_ERR("Failed to create container object for timestamped data message "
   1fe58:	2145      	movs	r1, #69	; 0x45
   1fe5a:	4814      	ldr	r0, [pc, #80]	; (1feac <create_timestamped_data_message_object+0x78>)
   1fe5c:	f01c fe28 	bl	3cab0 <z_log_minimal_printk>
	}

	return msg_obj;
}
   1fe60:	4620      	mov	r0, r4
   1fe62:	b003      	add	sp, #12
   1fe64:	bd30      	pop	{r4, r5, pc}
	if ((cJSON_AddStringToObject(msg_obj, NRF_CLOUD_JSON_APPID_KEY, appid) == NULL) ||
   1fe66:	4912      	ldr	r1, [pc, #72]	; (1feb0 <create_timestamped_data_message_object+0x7c>)
   1fe68:	f01f feea 	bl	3fc40 <cJSON_AddStringToObject>
   1fe6c:	b940      	cbnz	r0, 1fe80 <create_timestamped_data_message_object+0x4c>
		LOG_ERR("Failed to populate timestamped data message object "
   1fe6e:	462a      	mov	r2, r5
   1fe70:	2145      	movs	r1, #69	; 0x45
   1fe72:	4810      	ldr	r0, [pc, #64]	; (1feb4 <create_timestamped_data_message_object+0x80>)
   1fe74:	f01c fe1c 	bl	3cab0 <z_log_minimal_printk>
		cJSON_Delete(msg_obj);
   1fe78:	4620      	mov	r0, r4
   1fe7a:	f012 f85f 	bl	31f3c <cJSON_Delete>
   1fe7e:	e7e4      	b.n	1fe4a <create_timestamped_data_message_object+0x16>
		(cJSON_AddStringToObject(msg_obj, NRF_CLOUD_JSON_MSG_TYPE_KEY,
   1fe80:	4620      	mov	r0, r4
   1fe82:	4a0d      	ldr	r2, [pc, #52]	; (1feb8 <create_timestamped_data_message_object+0x84>)
   1fe84:	490d      	ldr	r1, [pc, #52]	; (1febc <create_timestamped_data_message_object+0x88>)
   1fe86:	f01f fedb 	bl	3fc40 <cJSON_AddStringToObject>
	if ((cJSON_AddStringToObject(msg_obj, NRF_CLOUD_JSON_APPID_KEY, appid) == NULL) ||
   1fe8a:	2800      	cmp	r0, #0
   1fe8c:	d0ef      	beq.n	1fe6e <create_timestamped_data_message_object+0x3a>
		(cJSON_AddNumberToObject(msg_obj, NRF_CLOUD_MSG_TIMESTAMP_KEY,
   1fe8e:	e9dd 0100 	ldrd	r0, r1, [sp]
   1fe92:	f7fc fc63 	bl	1c75c <__aeabi_l2d>
   1fe96:	4602      	mov	r2, r0
   1fe98:	460b      	mov	r3, r1
   1fe9a:	4620      	mov	r0, r4
   1fe9c:	4908      	ldr	r1, [pc, #32]	; (1fec0 <create_timestamped_data_message_object+0x8c>)
   1fe9e:	f01f fea3 	bl	3fbe8 <cJSON_AddNumberToObject>
								 NRF_CLOUD_JSON_MSG_TYPE_VAL_DATA) == NULL) ||
   1fea2:	2800      	cmp	r0, #0
   1fea4:	d1dc      	bne.n	1fe60 <create_timestamped_data_message_object+0x2c>
   1fea6:	e7e2      	b.n	1fe6e <create_timestamped_data_message_object+0x3a>
   1fea8:	00043501 	.word	0x00043501
   1feac:	00043540 	.word	0x00043540
   1feb0:	00043592 	.word	0x00043592
   1feb4:	00043598 	.word	0x00043598
   1feb8:	000435de 	.word	0x000435de
   1febc:	000435e3 	.word	0x000435e3
   1fec0:	000435ef 	.word	0x000435ef

0001fec4 <on_location_update>:
 *
 * @param location_data - The received location update.
 *
 */
static void on_location_update(const struct location_data location_data)
{
   1fec4:	b084      	sub	sp, #16
   1fec6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1feca:	ed2d 8b02 	vpush	{d8}
   1fece:	b099      	sub	sp, #100	; 0x64
   1fed0:	ac24      	add	r4, sp, #144	; 0x90
   1fed2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1fed6:	e9dd 4528 	ldrd	r4, r5, [sp, #160]	; 0xa0
   1feda:	f89d 8090 	ldrb.w	r8, [sp, #144]	; 0x90
	LOG_INF("Location Updated: %.06f N %.06f W, accuracy: %.01f m, Method: %s",
   1fede:	982a      	ldr	r0, [sp, #168]	; 0xa8
   1fee0:	f7fc fc12 	bl	1c708 <__aeabi_f2d>
   1fee4:	e9dd 6726 	ldrd	r6, r7, [sp, #152]	; 0x98
   1fee8:	f1b8 0f01 	cmp.w	r8, #1
   1feec:	f000 80ab 	beq.w	20046 <on_location_update+0x182>
   1fef0:	f1b8 0f02 	cmp.w	r8, #2
   1fef4:	f000 80a9 	beq.w	2004a <on_location_update+0x186>
   1fef8:	4b59      	ldr	r3, [pc, #356]	; (20060 <on_location_update+0x19c>)
   1fefa:	4a5a      	ldr	r2, [pc, #360]	; (20064 <on_location_update+0x1a0>)
   1fefc:	f1b8 0f03 	cmp.w	r8, #3
   1ff00:	bf18      	it	ne
   1ff02:	4613      	movne	r3, r2
   1ff04:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1ff08:	9304      	str	r3, [sp, #16]
   1ff0a:	4632      	mov	r2, r6
   1ff0c:	463b      	mov	r3, r7
   1ff0e:	2149      	movs	r1, #73	; 0x49
   1ff10:	e9cd 4500 	strd	r4, r5, [sp]
   1ff14:	4854      	ldr	r0, [pc, #336]	; (20068 <on_location_update+0x1a4>)
   1ff16:	f01c fdcb 	bl	3cab0 <z_log_minimal_printk>
			location_data.method == LOCATION_METHOD_CELLULAR ? "Cellular" : location_data.method == LOCATION_METHOD_GNSS ? "GNSS"
																		: location_data.method == LOCATION_METHOD_WIFI	 ? "WIFI"
																														 : "Invalid");

	/* If the position update was derived using GNSS, send it onward to nRF Cloud. */
	if (location_data.method == LOCATION_METHOD_GNSS)
   1ff1a:	f1b8 0f02 	cmp.w	r8, #2
   1ff1e:	f040 808b 	bne.w	20038 <on_location_update+0x174>
	{
		LOG_INF("GNSS Position Update! Sending to nRF Cloud...");
   1ff22:	2149      	movs	r1, #73	; 0x49
   1ff24:	4851      	ldr	r0, [pc, #324]	; (2006c <on_location_update+0x1a8>)
   1ff26:	f01c fdc3 	bl	3cab0 <z_log_minimal_printk>
		/* Synthesize an NMEA message from the provided lat/long/timestamp.
		 * This is necessary, because the nRF Cloud MQTT API only supports NMEA messages.
		 */

		char nmea_buf[50];
		int lat_deg = floor(fabs(location_data.latitude));
   1ff2a:	4630      	mov	r0, r6
   1ff2c:	4639      	mov	r1, r7
   1ff2e:	f021 fa10 	bl	41352 <fabs>
   1ff32:	f7fe fb15 	bl	1e560 <floor>
   1ff36:	f7fc feef 	bl	1cd18 <__aeabi_d2iz>
		int lon_deg = floor(fabs(location_data.longitude));
   1ff3a:	4629      	mov	r1, r5
		int lat_deg = floor(fabs(location_data.latitude));
   1ff3c:	4682      	mov	sl, r0
		int lon_deg = floor(fabs(location_data.longitude));
   1ff3e:	4620      	mov	r0, r4
   1ff40:	f021 fa07 	bl	41352 <fabs>
   1ff44:	f7fe fb0c 	bl	1e560 <floor>
   1ff48:	f7fc fee6 	bl	1cd18 <__aeabi_d2iz>
		double lat_min = (fabs(location_data.latitude) - lat_deg) * 60;
   1ff4c:	4639      	mov	r1, r7
		int lon_deg = floor(fabs(location_data.longitude));
   1ff4e:	4683      	mov	fp, r0
		double lat_min = (fabs(location_data.latitude) - lat_deg) * 60;
   1ff50:	4630      	mov	r0, r6
   1ff52:	f021 f9fe 	bl	41352 <fabs>
   1ff56:	4680      	mov	r8, r0
   1ff58:	4650      	mov	r0, sl
   1ff5a:	4689      	mov	r9, r1
   1ff5c:	f7fc fbc2 	bl	1c6e4 <__aeabi_i2d>
   1ff60:	4602      	mov	r2, r0
   1ff62:	460b      	mov	r3, r1
   1ff64:	4640      	mov	r0, r8
   1ff66:	4649      	mov	r1, r9
   1ff68:	f7fc fa6e 	bl	1c448 <__aeabi_dsub>
   1ff6c:	2200      	movs	r2, #0
   1ff6e:	4b40      	ldr	r3, [pc, #256]	; (20070 <on_location_update+0x1ac>)
   1ff70:	f7fc fc22 	bl	1c7b8 <__aeabi_dmul>
   1ff74:	ec41 0b18 	vmov	d8, r0, r1
		double lon_min = (fabs(location_data.longitude) - lon_deg) * 60;
   1ff78:	4620      	mov	r0, r4
   1ff7a:	4629      	mov	r1, r5
   1ff7c:	f021 f9e9 	bl	41352 <fabs>
   1ff80:	4680      	mov	r8, r0
   1ff82:	4658      	mov	r0, fp
   1ff84:	4689      	mov	r9, r1
   1ff86:	f7fc fbad 	bl	1c6e4 <__aeabi_i2d>
   1ff8a:	4602      	mov	r2, r0
   1ff8c:	460b      	mov	r3, r1
   1ff8e:	4640      	mov	r0, r8
   1ff90:	4649      	mov	r1, r9
   1ff92:	f7fc fa59 	bl	1c448 <__aeabi_dsub>
   1ff96:	2200      	movs	r2, #0
   1ff98:	4b35      	ldr	r3, [pc, #212]	; (20070 <on_location_update+0x1ac>)
   1ff9a:	f7fc fc0d 	bl	1c7b8 <__aeabi_dmul>

		/* Not actually a valid NMEA,
		 * but close enough that nRF Cloud can't tell the difference.
		 */
		snprintf(nmea_buf, sizeof(nmea_buf), "$GPGGA,,%02d%08.5f,%c,%02d%08.5f,%c,,,,,,,,,",
   1ff9e:	2200      	movs	r2, #0
		double lon_min = (fabs(location_data.longitude) - lon_deg) * 60;
   1ffa0:	4680      	mov	r8, r0
   1ffa2:	4689      	mov	r9, r1
		snprintf(nmea_buf, sizeof(nmea_buf), "$GPGGA,,%02d%08.5f,%c,%02d%08.5f,%c,,,,,,,,,",
   1ffa4:	4630      	mov	r0, r6
   1ffa6:	2300      	movs	r3, #0
   1ffa8:	4639      	mov	r1, r7
   1ffaa:	f7fc fe95 	bl	1ccd8 <__aeabi_dcmpgt>
   1ffae:	2300      	movs	r3, #0
   1ffb0:	2800      	cmp	r0, #0
   1ffb2:	4629      	mov	r1, r5
   1ffb4:	f04f 0200 	mov.w	r2, #0
   1ffb8:	4620      	mov	r0, r4
   1ffba:	bf14      	ite	ne
   1ffbc:	264e      	movne	r6, #78	; 0x4e
   1ffbe:	2653      	moveq	r6, #83	; 0x53
   1ffc0:	f7fc fe8a 	bl	1ccd8 <__aeabi_dcmpgt>
   1ffc4:	2800      	cmp	r0, #0
   1ffc6:	bf14      	ite	ne
   1ffc8:	2345      	movne	r3, #69	; 0x45
   1ffca:	2357      	moveq	r3, #87	; 0x57
   1ffcc:	4a29      	ldr	r2, [pc, #164]	; (20074 <on_location_update+0x1b0>)
   1ffce:	2132      	movs	r1, #50	; 0x32
   1ffd0:	9306      	str	r3, [sp, #24]
   1ffd2:	ed8d 8b00 	vstr	d8, [sp]
   1ffd6:	4653      	mov	r3, sl
   1ffd8:	e9cd 8904 	strd	r8, r9, [sp, #16]
   1ffdc:	e9cd 6b02 	strd	r6, fp, [sp, #8]
   1ffe0:	a80b      	add	r0, sp, #44	; 0x2c
   1ffe2:	f01a fb37 	bl	3a654 <sniprintf>
				 lat_deg, lat_min, location_data.latitude > 0 ? 'N' : 'S',
				 lon_deg, lon_min, location_data.longitude > 0 ? 'E' : 'W');

		int payload_length = strlen(nmea_buf);
   1ffe6:	a80b      	add	r0, sp, #44	; 0x2c
   1ffe8:	f7fd f92b 	bl	1d242 <strlen>

		snprintf(nmea_buf + payload_length, sizeof(nmea_buf) - payload_length, "*%02X\n",
   1ffec:	ab0b      	add	r3, sp, #44	; 0x2c
   1ffee:	f1c0 0132 	rsb	r1, r0, #50	; 0x32
   1fff2:	181d      	adds	r5, r3, r0
	int len = strlen(datastring);
   1fff4:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
		snprintf(nmea_buf + payload_length, sizeof(nmea_buf) - payload_length, "*%02X\n",
   1fff8:	9109      	str	r1, [sp, #36]	; 0x24
	int len = strlen(datastring);
   1fffa:	f7fd f922 	bl	1d242 <strlen>
	for (int i = 0; i < len; i++)
   1fffe:	2200      	movs	r2, #0
	uint8_t checksum = 0;
   20000:	4613      	mov	r3, r2
	for (int i = 0; i < len; i++)
   20002:	9909      	ldr	r1, [sp, #36]	; 0x24
   20004:	ac0b      	add	r4, sp, #44	; 0x2c
   20006:	4290      	cmp	r0, r2
   20008:	f104 0401 	add.w	r4, r4, #1
   2000c:	dc1f      	bgt.n	2004e <on_location_update+0x18a>
		snprintf(nmea_buf + payload_length, sizeof(nmea_buf) - payload_length, "*%02X\n",
   2000e:	4a1a      	ldr	r2, [pc, #104]	; (20078 <on_location_update+0x1b4>)
   20010:	4628      	mov	r0, r5
   20012:	f01a fb1f 	bl	3a654 <sniprintf>
	cJSON *msg_obj = create_timestamped_data_message_object(NRF_CLOUD_JSON_APPID_VAL_GPS);
   20016:	4819      	ldr	r0, [pc, #100]	; (2007c <on_location_update+0x1b8>)
   20018:	f7ff ff0c 	bl	1fe34 <create_timestamped_data_message_object>
	if (!msg_obj)
   2001c:	4604      	mov	r4, r0
   2001e:	b158      	cbz	r0, 20038 <on_location_update+0x174>
	if (cJSON_AddStringToObject(msg_obj, NRF_CLOUD_JSON_DATA_KEY, nmea) == NULL)
   20020:	4917      	ldr	r1, [pc, #92]	; (20080 <on_location_update+0x1bc>)
   20022:	aa0b      	add	r2, sp, #44	; 0x2c
   20024:	f01f fe0c 	bl	3fc40 <cJSON_AddStringToObject>
   20028:	b9a8      	cbnz	r0, 20056 <on_location_update+0x192>
		LOG_ERR("Failed to append NMEA data to GNSS message object");
   2002a:	2145      	movs	r1, #69	; 0x45
   2002c:	4815      	ldr	r0, [pc, #84]	; (20084 <on_location_update+0x1c0>)
   2002e:	f01c fd3f 	bl	3cab0 <z_log_minimal_printk>
		cJSON_Delete(msg_obj);
   20032:	4620      	mov	r0, r4
   20034:	f011 ff82 	bl	31f3c <cJSON_Delete>
		LOG_DBG("NMEA: %s", log_strdup(nmea_buf));

		/* Send the NMEA string. */
		send_gnss_nmea(nmea_buf);
	}
}
   20038:	b019      	add	sp, #100	; 0x64
   2003a:	ecbd 8b02 	vpop	{d8}
   2003e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20042:	b004      	add	sp, #16
   20044:	4770      	bx	lr
	LOG_INF("Location Updated: %.06f N %.06f W, accuracy: %.01f m, Method: %s",
   20046:	4b10      	ldr	r3, [pc, #64]	; (20088 <on_location_update+0x1c4>)
   20048:	e75c      	b.n	1ff04 <on_location_update+0x40>
   2004a:	4b10      	ldr	r3, [pc, #64]	; (2008c <on_location_update+0x1c8>)
   2004c:	e75a      	b.n	1ff04 <on_location_update+0x40>
		checksum ^= datastring[i];
   2004e:	7826      	ldrb	r6, [r4, #0]
	for (int i = 0; i < len; i++)
   20050:	3201      	adds	r2, #1
		checksum ^= datastring[i];
   20052:	4073      	eors	r3, r6
	for (int i = 0; i < len; i++)
   20054:	e7d7      	b.n	20006 <on_location_update+0x142>
	ret = send_device_message_cJSON(msg_obj);
   20056:	4620      	mov	r0, r4
   20058:	f000 fa34 	bl	204c4 <send_device_message_cJSON>
   2005c:	e7e9      	b.n	20032 <on_location_update+0x16e>
   2005e:	bf00      	nop
   20060:	00043600 	.word	0x00043600
   20064:	00043605 	.word	0x00043605
   20068:	0004360d 	.word	0x0004360d
   2006c:	00043653 	.word	0x00043653
   20070:	404e0000 	.word	0x404e0000
   20074:	00043686 	.word	0x00043686
   20078:	000436b3 	.word	0x000436b3
   2007c:	00048976 	.word	0x00048976
   20080:	000436ba 	.word	0x000436ba
   20084:	000436bf 	.word	0x000436bf
   20088:	000435f2 	.word	0x000435f2
   2008c:	000435fb 	.word	0x000435fb

00020090 <send_sensor_sample.isra.0>:
static int send_sensor_sample(const char *const sensor, double value)
   20090:	b537      	push	{r0, r1, r2, r4, r5, lr}
   20092:	4605      	mov	r5, r0
   20094:	e9cd 2300 	strd	r2, r3, [sp]
	cJSON *msg_obj = create_timestamped_data_message_object(sensor);
   20098:	f7ff fecc 	bl	1fe34 <create_timestamped_data_message_object>
	if (msg_obj == NULL)
   2009c:	4604      	mov	r4, r0
   2009e:	b1a0      	cbz	r0, 200ca <send_sensor_sample.isra.0+0x3a>
	if (cJSON_AddNumberToObject(msg_obj, NRF_CLOUD_JSON_DATA_KEY, value) == NULL)
   200a0:	e9dd 2300 	ldrd	r2, r3, [sp]
   200a4:	490a      	ldr	r1, [pc, #40]	; (200d0 <send_sensor_sample.isra.0+0x40>)
   200a6:	f01f fd9f 	bl	3fbe8 <cJSON_AddNumberToObject>
   200aa:	b950      	cbnz	r0, 200c2 <send_sensor_sample.isra.0+0x32>
		LOG_ERR("Failed to append value to %s sample container object ",
   200ac:	462a      	mov	r2, r5
   200ae:	2145      	movs	r1, #69	; 0x45
   200b0:	4808      	ldr	r0, [pc, #32]	; (200d4 <send_sensor_sample.isra.0+0x44>)
   200b2:	f01c fcfd 	bl	3cab0 <z_log_minimal_printk>
		cJSON_Delete(msg_obj);
   200b6:	4620      	mov	r0, r4
}
   200b8:	b003      	add	sp, #12
   200ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		cJSON_Delete(msg_obj);
   200be:	f011 bf3d 	b.w	31f3c <cJSON_Delete>
	ret = send_device_message_cJSON(msg_obj);
   200c2:	4620      	mov	r0, r4
   200c4:	f000 f9fe 	bl	204c4 <send_device_message_cJSON>
   200c8:	e7f5      	b.n	200b6 <send_sensor_sample.isra.0+0x26>
}
   200ca:	b003      	add	sp, #12
   200cc:	bd30      	pop	{r4, r5, pc}
   200ce:	bf00      	nop
   200d0:	000436ba 	.word	0x000436ba
   200d4:	000436f6 	.word	0x000436f6

000200d8 <main_application>:

void main_application(void)
{
   200d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Wait for the date and time to become known.
	 * This is needed both for location services and for sensor sample timestamping.
	 */
	LOG_INF("Waiting for modem to determine current date and time");
   200da:	2149      	movs	r1, #73	; 0x49
   200dc:	4828      	ldr	r0, [pc, #160]	; (20180 <main_application+0xa8>)
{
   200de:	b08b      	sub	sp, #44	; 0x2c
	LOG_INF("Waiting for modem to determine current date and time");
   200e0:	f01c fce6 	bl	3cab0 <z_log_minimal_printk>
	if (!await_date_time_known(K_SECONDS(CONFIG_DATE_TIME_ESTABLISHMENT_TIMEOUT_SECONDS)))
   200e4:	f44f 0016 	mov.w	r0, #9830400	; 0x960000
   200e8:	2100      	movs	r1, #0
   200ea:	f000 f8a7 	bl	2023c <await_date_time_known>
   200ee:	2800      	cmp	r0, #0
   200f0:	d142      	bne.n	20178 <main_application+0xa0>
	{
		LOG_WRN("Failed to determine valid date time. Proceeding anyways");
   200f2:	2157      	movs	r1, #87	; 0x57
   200f4:	4823      	ldr	r0, [pc, #140]	; (20184 <main_application+0xac>)
	}
	else
	{
		LOG_INF("Current date and time determined");
   200f6:	f01c fcdb 	bl	3cab0 <z_log_minimal_printk>
	}

	/* Begin tracking location at the configured interval. */
	(void)start_location_tracking(on_location_update,
   200fa:	213c      	movs	r1, #60	; 0x3c
   200fc:	4822      	ldr	r0, [pc, #136]	; (20188 <main_application+0xb0>)
   200fe:	f000 fb3f 	bl	20780 <start_location_tracking>
								  CONFIG_LOCATION_TRACKING_SAMPLE_INTERVAL_SECONDS);

	int counter = 0;
   20102:	f04f 36ff 	mov.w	r6, #4294967295
   20106:	f04f 37ff 	mov.w	r7, #4294967295
	z_impl_k_timer_start(timer, duration, period);
   2010a:	4c20      	ldr	r4, [pc, #128]	; (2018c <main_application+0xb4>)
		//{
			sht40_data sht40_values;

			if (sht40_read(&sht40_values) == 0)
			{
				LOG_INF("Temperature is %d degrees C", sht40_values.temperature);
   2010c:	4d20      	ldr	r5, [pc, #128]	; (20190 <main_application+0xb8>)
   2010e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
   20112:	4620      	mov	r0, r4
   20114:	2300      	movs	r3, #0
   20116:	e9cd 6700 	strd	r6, r7, [sp]
   2011a:	f018 ff21 	bl	38f60 <z_impl_k_timer_start>
			if (sht40_read(&sht40_values) == 0)
   2011e:	a803      	add	r0, sp, #12
   20120:	f000 fbce 	bl	208c0 <sht40_read>
   20124:	b9b8      	cbnz	r0, 20156 <main_application+0x7e>
				LOG_INF("Temperature is %d degrees C", sht40_values.temperature);
   20126:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   2012a:	2149      	movs	r1, #73	; 0x49
   2012c:	4628      	mov	r0, r5
   2012e:	f01c fcbf 	bl	3cab0 <z_log_minimal_printk>
				(void)send_sensor_sample(NRF_CLOUD_JSON_APPID_VAL_TEMP, sht40_values.temperature);
   20132:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   20136:	f7fc fac5 	bl	1c6c4 <__aeabi_ui2d>
   2013a:	4602      	mov	r2, r0
   2013c:	460b      	mov	r3, r1
   2013e:	4815      	ldr	r0, [pc, #84]	; (20194 <main_application+0xbc>)
   20140:	f7ff ffa6 	bl	20090 <send_sensor_sample.isra.0>
				(void)send_sensor_sample(NRF_CLOUD_JSON_APPID_VAL_HUMID, sht40_values.humidity);
   20144:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   20148:	f7fc fabc 	bl	1c6c4 <__aeabi_ui2d>
   2014c:	4602      	mov	r2, r0
   2014e:	460b      	mov	r3, r1
   20150:	4811      	ldr	r0, [pc, #68]	; (20198 <main_application+0xc0>)
   20152:	f7ff ff9d 	bl	20090 <send_sensor_sample.isra.0>
			}
		//}

		pm_data pm_values;

		if (pm_read(&pm_values) == 0)
   20156:	a804      	add	r0, sp, #16
   20158:	f000 fb54 	bl	20804 <pm_read>
   2015c:	b940      	cbnz	r0, 20170 <main_application+0x98>
		{
			(void)send_sensor_sample("pm2.5", pm_values.pm25_env);
   2015e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   20162:	f7fc faaf 	bl	1c6c4 <__aeabi_ui2d>
   20166:	4602      	mov	r2, r0
   20168:	460b      	mov	r3, r1
   2016a:	480c      	ldr	r0, [pc, #48]	; (2019c <main_application+0xc4>)
   2016c:	f7ff ff90 	bl	20090 <send_sensor_sample.isra.0>
	return z_impl_k_timer_status_sync(timer);
   20170:	4620      	mov	r0, r4
   20172:	f018 ff47 	bl	39004 <z_impl_k_timer_status_sync>
	{
   20176:	e7ca      	b.n	2010e <main_application+0x36>
		LOG_INF("Current date and time determined");
   20178:	2149      	movs	r1, #73	; 0x49
   2017a:	4809      	ldr	r0, [pc, #36]	; (201a0 <main_application+0xc8>)
   2017c:	e7bb      	b.n	200f6 <main_application+0x1e>
   2017e:	bf00      	nop
   20180:	00043731 	.word	0x00043731
   20184:	0004376b 	.word	0x0004376b
   20188:	0001fec5 	.word	0x0001fec5
   2018c:	20014e30 	.word	0x20014e30
   20190:	000437ce 	.word	0x000437ce
   20194:	000437ef 	.word	0x000437ef
   20198:	000437f4 	.word	0x000437f4
   2019c:	000437fa 	.word	0x000437fa
   201a0:	000437a8 	.word	0x000437a8

000201a4 <reset_cloud>:
static void reset_cloud(void)
{
	int err;

	/* Wait for a few seconds to help residual events settle. */
	LOG_INF("Resetting nRF Cloud transport");
   201a4:	2149      	movs	r1, #73	; 0x49
{
   201a6:	b508      	push	{r3, lr}
	LOG_INF("Resetting nRF Cloud transport");
   201a8:	4810      	ldr	r0, [pc, #64]	; (201ec <reset_cloud+0x48>)
   201aa:	f01c fc81 	bl	3cab0 <z_log_minimal_printk>
	return z_impl_k_sleep(timeout);
   201ae:	2100      	movs	r1, #0
   201b0:	f44f 2020 	mov.w	r0, #655360	; 0xa0000
   201b4:	f018 fa1c 	bl	385f0 <z_impl_k_sleep>
	k_sleep(K_SECONDS(20));

	/* Disconnect from nRF Cloud and uninit the cloud library. */
	err = nrf_cloud_uninit();
   201b8:	f00b fa3e 	bl	2b638 <nrf_cloud_uninit>

	/* nrf_cloud_uninit returns -EBUSY if reset is blocked by a FOTA job. */
	if (err == -EBUSY) {
   201bc:	f110 0f10 	cmn.w	r0, #16
	err = nrf_cloud_uninit();
   201c0:	4602      	mov	r2, r0
	if (err == -EBUSY) {
   201c2:	d104      	bne.n	201ce <reset_cloud+0x2a>
		LOG_ERR("Could not reset nRF Cloud transport due to ongoing FOTA job. "
   201c4:	2145      	movs	r1, #69	; 0x45
   201c6:	480a      	ldr	r0, [pc, #40]	; (201f0 <reset_cloud+0x4c>)
			"Continuing without resetting");
	} else if (err) {
		LOG_ERR("Could not reset nRF Cloud transport, error %d. "
			"Continuing without resetting", err);
	} else {
		LOG_INF("nRF Cloud transport has been reset");
   201c8:	f01c fc72 	bl	3cab0 <z_log_minimal_printk>
   201cc:	e004      	b.n	201d8 <reset_cloud+0x34>
	} else if (err) {
   201ce:	b148      	cbz	r0, 201e4 <reset_cloud+0x40>
		LOG_ERR("Could not reset nRF Cloud transport, error %d. "
   201d0:	2145      	movs	r1, #69	; 0x45
   201d2:	4808      	ldr	r0, [pc, #32]	; (201f4 <reset_cloud+0x50>)
   201d4:	f01c fc6c 	bl	3cab0 <z_log_minimal_printk>
	}

	/* Clear cloud connection event state (reset to initial state). */
	clear_cloud_connection_events();
}
   201d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		(void) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_EVENT_SET);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_event_set(event, events);
   201dc:	2100      	movs	r1, #0
   201de:	4806      	ldr	r0, [pc, #24]	; (201f8 <reset_cloud+0x54>)
   201e0:	f021 b840 	b.w	41264 <z_impl_k_event_set>
		LOG_INF("nRF Cloud transport has been reset");
   201e4:	2149      	movs	r1, #73	; 0x49
   201e6:	4805      	ldr	r0, [pc, #20]	; (201fc <reset_cloud+0x58>)
   201e8:	e7ee      	b.n	201c8 <reset_cloud+0x24>
   201ea:	bf00      	nop
   201ec:	0004380c 	.word	0x0004380c
   201f0:	0004382f 	.word	0x0004382f
   201f4:	0004388e 	.word	0x0004388e
   201f8:	200150f0 	.word	0x200150f0
   201fc:	000438df 	.word	0x000438df

00020200 <date_time_evt_handler>:
{
   20200:	b508      	push	{r3, lr}
	if (date_time_is_valid()) {
   20202:	f01f f9a6 	bl	3f552 <date_time_is_valid>
   20206:	b128      	cbz	r0, 20214 <date_time_evt_handler+0x14>
}
   20208:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_impl_k_event_post(event, events);
   2020c:	2102      	movs	r1, #2
   2020e:	4802      	ldr	r0, [pc, #8]	; (20218 <date_time_evt_handler+0x18>)
   20210:	f021 b825 	b.w	4125e <z_impl_k_event_post>
   20214:	bd08      	pop	{r3, pc}
   20216:	bf00      	nop
   20218:	200150f0 	.word	0x200150f0

0002021c <await_lte_connection>:
{
   2021c:	b507      	push	{r0, r1, r2, lr}
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm3 = { .val = timeout };
		return (uint32_t) arch_syscall_invoke5(parm0.x, parm1.x, parm2.x, parm3.split.lo, parm3.split.hi, K_SYSCALL_K_EVENT_WAIT_ALL);
	}
#endif
	compiler_barrier();
	return z_impl_k_event_wait_all(event, events, reset, timeout);
   2021e:	2200      	movs	r2, #0
   20220:	e9cd 0100 	strd	r0, r1, [sp]
   20224:	2102      	movs	r1, #2
   20226:	4804      	ldr	r0, [pc, #16]	; (20238 <await_lte_connection+0x1c>)
   20228:	f021 f825 	bl	41276 <z_impl_k_event_wait_all>
}
   2022c:	3800      	subs	r0, #0
   2022e:	bf18      	it	ne
   20230:	2001      	movne	r0, #1
   20232:	b003      	add	sp, #12
   20234:	f85d fb04 	ldr.w	pc, [sp], #4
   20238:	20015100 	.word	0x20015100

0002023c <await_date_time_known>:
{
   2023c:	b507      	push	{r0, r1, r2, lr}
	return z_impl_k_event_wait(event, events, reset, timeout);
   2023e:	2200      	movs	r2, #0
   20240:	e9cd 0100 	strd	r0, r1, [sp]
   20244:	2102      	movs	r1, #2
   20246:	4804      	ldr	r0, [pc, #16]	; (20258 <await_date_time_known+0x1c>)
   20248:	f021 f80f 	bl	4126a <z_impl_k_event_wait>
}
   2024c:	3800      	subs	r0, #0
   2024e:	bf18      	it	ne
   20250:	2001      	movne	r0, #1
   20252:	b003      	add	sp, #12
   20254:	f85d fb04 	ldr.w	pc, [sp], #4
   20258:	200150f0 	.word	0x200150f0

0002025c <await_connection>:
{
   2025c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2025e:	4605      	mov	r5, r0
   20260:	460c      	mov	r4, r1
	return await_lte_connection(timeout) && await_cloud_ready(timeout, false);
   20262:	f7ff ffdb 	bl	2021c <await_lte_connection>
   20266:	b148      	cbz	r0, 2027c <await_connection+0x20>
   20268:	2200      	movs	r2, #0
   2026a:	2104      	movs	r1, #4
   2026c:	e9cd 5400 	strd	r5, r4, [sp]
   20270:	4803      	ldr	r0, [pc, #12]	; (20280 <await_connection+0x24>)
   20272:	f020 fffa 	bl	4126a <z_impl_k_event_wait>
   20276:	1f03      	subs	r3, r0, #4
   20278:	4258      	negs	r0, r3
   2027a:	4158      	adcs	r0, r3
}
   2027c:	b003      	add	sp, #12
   2027e:	bd30      	pop	{r4, r5, pc}
   20280:	200150f0 	.word	0x200150f0

00020284 <cloud_is_connected>:
{
   20284:	b507      	push	{r0, r1, r2, lr}
   20286:	2200      	movs	r2, #0
   20288:	2300      	movs	r3, #0
   2028a:	2102      	movs	r1, #2
   2028c:	e9cd 2300 	strd	r2, r3, [sp]
   20290:	4804      	ldr	r0, [pc, #16]	; (202a4 <cloud_is_connected+0x20>)
   20292:	f020 ffea 	bl	4126a <z_impl_k_event_wait>
}
   20296:	3800      	subs	r0, #0
   20298:	bf18      	it	ne
   2029a:	2001      	movne	r0, #1
   2029c:	b003      	add	sp, #12
   2029e:	f85d fb04 	ldr.w	pc, [sp], #4
   202a2:	bf00      	nop
   202a4:	200150f0 	.word	0x200150f0

000202a8 <disconnect_cloud>:
	z_impl_k_event_post(event, events);
   202a8:	2110      	movs	r1, #16
   202aa:	4801      	ldr	r0, [pc, #4]	; (202b0 <disconnect_cloud+0x8>)
   202ac:	f020 bfd7 	b.w	4125e <z_impl_k_event_post>
   202b0:	200150f0 	.word	0x200150f0

000202b4 <cloud_event_handler>:
{
   202b4:	b507      	push	{r0, r1, r2, lr}
	switch (nrf_cloud_evt->type) {
   202b6:	7803      	ldrb	r3, [r0, #0]
   202b8:	3b01      	subs	r3, #1
   202ba:	2b0a      	cmp	r3, #10
   202bc:	d834      	bhi.n	20328 <cloud_event_handler+0x74>
   202be:	e8df f003 	tbb	[pc, r3]
   202c2:	3306      	.short	0x3306
   202c4:	2725130d 	.word	0x2725130d
   202c8:	33203333 	.word	0x33203333
   202cc:	2e          	.byte	0x2e
   202cd:	00          	.byte	0x00
   202ce:	2102      	movs	r1, #2
   202d0:	4817      	ldr	r0, [pc, #92]	; (20330 <cloud_event_handler+0x7c>)
}
   202d2:	b003      	add	sp, #12
   202d4:	f85d eb04 	ldr.w	lr, [sp], #4
   202d8:	f020 bfc1 	b.w	4125e <z_impl_k_event_post>
		LOG_INF("Please add this device to your cloud account in the nRF Cloud portal.");
   202dc:	2149      	movs	r1, #73	; 0x49
   202de:	4815      	ldr	r0, [pc, #84]	; (20334 <cloud_event_handler+0x80>)
   202e0:	f01c fbe6 	bl	3cab0 <z_log_minimal_printk>
   202e4:	2108      	movs	r1, #8
   202e6:	e7f3      	b.n	202d0 <cloud_event_handler+0x1c>
	return z_impl_k_event_wait(event, events, reset, timeout);
   202e8:	2200      	movs	r2, #0
   202ea:	2300      	movs	r3, #0
   202ec:	2108      	movs	r1, #8
   202ee:	e9cd 2300 	strd	r2, r3, [sp]
   202f2:	480f      	ldr	r0, [pc, #60]	; (20330 <cloud_event_handler+0x7c>)
   202f4:	f020 ffb9 	bl	4126a <z_impl_k_event_wait>
		if (cloud_has_requested_association()) {
   202f8:	b1b0      	cbz	r0, 20328 <cloud_event_handler+0x74>
			LOG_INF("Device successfully associated with cloud!");
   202fa:	2149      	movs	r1, #73	; 0x49
   202fc:	480e      	ldr	r0, [pc, #56]	; (20338 <cloud_event_handler+0x84>)
   202fe:	f01c fbd7 	bl	3cab0 <z_log_minimal_printk>
}
   20302:	b003      	add	sp, #12
   20304:	f85d eb04 	ldr.w	lr, [sp], #4
		disconnect_cloud();
   20308:	f7ff bfce 	b.w	202a8 <disconnect_cloud>
	z_impl_k_event_post(event, events);
   2030c:	2104      	movs	r1, #4
   2030e:	e7df      	b.n	202d0 <cloud_event_handler+0x1c>
		location_assistance_data_handler(nrf_cloud_evt->data.ptr, nrf_cloud_evt->data.len);
   20310:	e9d0 1002 	ldrd	r1, r0, [r0, #8]
}
   20314:	b003      	add	sp, #12
   20316:	f85d eb04 	ldr.w	lr, [sp], #4
		location_assistance_data_handler(nrf_cloud_evt->data.ptr, nrf_cloud_evt->data.len);
   2031a:	f000 ba0d 	b.w	20738 <location_assistance_data_handler>
}
   2031e:	b003      	add	sp, #12
   20320:	f85d eb04 	ldr.w	lr, [sp], #4
		on_fota_downloaded();
   20324:	f000 b9bc 	b.w	206a0 <on_fota_downloaded>
}
   20328:	b003      	add	sp, #12
   2032a:	f85d fb04 	ldr.w	pc, [sp], #4
   2032e:	bf00      	nop
   20330:	200150f0 	.word	0x200150f0
   20334:	00043907 	.word	0x00043907
   20338:	00043952 	.word	0x00043952

0002033c <await_cloud_disconnection>:
{
   2033c:	b507      	push	{r0, r1, r2, lr}
	return z_impl_k_event_wait(event, events, reset, timeout);
   2033e:	2200      	movs	r2, #0
   20340:	e9cd 0100 	strd	r0, r1, [sp]
   20344:	2110      	movs	r1, #16
   20346:	4804      	ldr	r0, [pc, #16]	; (20358 <await_cloud_disconnection+0x1c>)
   20348:	f020 ff8f 	bl	4126a <z_impl_k_event_wait>
}
   2034c:	3800      	subs	r0, #0
   2034e:	bf18      	it	ne
   20350:	2001      	movne	r0, #1
   20352:	b003      	add	sp, #12
   20354:	f85d fb04 	ldr.w	pc, [sp], #4
   20358:	200150f0 	.word	0x200150f0

0002035c <cloud_is_disconnecting>:
{
   2035c:	b507      	push	{r0, r1, r2, lr}
   2035e:	2200      	movs	r2, #0
   20360:	2300      	movs	r3, #0
   20362:	2110      	movs	r1, #16
   20364:	e9cd 2300 	strd	r2, r3, [sp]
   20368:	4804      	ldr	r0, [pc, #16]	; (2037c <cloud_is_disconnecting+0x20>)
   2036a:	f020 ff7e 	bl	4126a <z_impl_k_event_wait>
}
   2036e:	3800      	subs	r0, #0
   20370:	bf18      	it	ne
   20372:	2001      	movne	r0, #1
   20374:	b003      	add	sp, #12
   20376:	f85d fb04 	ldr.w	pc, [sp], #4
   2037a:	bf00      	nop
   2037c:	200150f0 	.word	0x200150f0

00020380 <lte_event_handler>:
{
   20380:	b508      	push	{r3, lr}
	switch (evt->type) {
   20382:	7801      	ldrb	r1, [r0, #0]
   20384:	b9d9      	cbnz	r1, 203be <lte_event_handler+0x3e>
		if ((evt->nw_reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
   20386:	7a03      	ldrb	r3, [r0, #8]
   20388:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2038c:	2b01      	cmp	r3, #1
   2038e:	d010      	beq.n	203b2 <lte_event_handler+0x32>
	z_impl_k_event_set(event, events);
   20390:	480b      	ldr	r0, [pc, #44]	; (203c0 <lte_event_handler+0x40>)
   20392:	f020 ff67 	bl	41264 <z_impl_k_event_set>
			if (cloud_is_connected() && !cloud_is_disconnecting()) {
   20396:	f7ff ff75 	bl	20284 <cloud_is_connected>
   2039a:	b180      	cbz	r0, 203be <lte_event_handler+0x3e>
   2039c:	f7ff ffde 	bl	2035c <cloud_is_disconnecting>
   203a0:	b968      	cbnz	r0, 203be <lte_event_handler+0x3e>
				LOG_INF("LTE connection lost. Disconnecting from nRF Cloud too...");
   203a2:	2149      	movs	r1, #73	; 0x49
   203a4:	4807      	ldr	r0, [pc, #28]	; (203c4 <lte_event_handler+0x44>)
   203a6:	f01c fb83 	bl	3cab0 <z_log_minimal_printk>
}
   203aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				disconnect_cloud();
   203ae:	f7ff bf7b 	b.w	202a8 <disconnect_cloud>
	z_impl_k_event_post(event, events);
   203b2:	2102      	movs	r1, #2
}
   203b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   203b8:	4801      	ldr	r0, [pc, #4]	; (203c0 <lte_event_handler+0x40>)
   203ba:	f020 bf50 	b.w	4125e <z_impl_k_event_post>
   203be:	bd08      	pop	{r3, pc}
   203c0:	20015100 	.word	0x20015100
   203c4:	00043982 	.word	0x00043982

000203c8 <send_device_message>:
{
   203c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   203ca:	9001      	str	r0, [sp, #4]
	char *msg_buf = k_malloc(strlen(msg) + 1);
   203cc:	f7fc ff39 	bl	1d242 <strlen>
   203d0:	3001      	adds	r0, #1
   203d2:	f020 ff5d 	bl	41290 <k_malloc>
	if (!msg_buf) {
   203d6:	9901      	ldr	r1, [sp, #4]
	char *msg_buf = k_malloc(strlen(msg) + 1);
   203d8:	9003      	str	r0, [sp, #12]
	if (!msg_buf) {
   203da:	b940      	cbnz	r0, 203ee <send_device_message+0x26>
		LOG_ERR("Could not alloc memory for new device message");
   203dc:	2145      	movs	r1, #69	; 0x45
   203de:	480d      	ldr	r0, [pc, #52]	; (20414 <send_device_message+0x4c>)
   203e0:	f01c fb66 	bl	3cab0 <z_log_minimal_printk>
		return -ENOMEM;
   203e4:	f06f 000b 	mvn.w	r0, #11
}
   203e8:	b005      	add	sp, #20
   203ea:	f85d fb04 	ldr.w	pc, [sp], #4
__ssp_bos_icheck3(memset, void *, int)
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   203ee:	f021 f9c4 	bl	4177a <strcpy>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_MSGQ_PUT);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_put(msgq, data, timeout);
   203f2:	2200      	movs	r2, #0
   203f4:	2300      	movs	r3, #0
   203f6:	4808      	ldr	r0, [pc, #32]	; (20418 <send_device_message+0x50>)
   203f8:	a903      	add	r1, sp, #12
   203fa:	f016 f935 	bl	36668 <z_impl_k_msgq_put>
	if (k_msgq_put(&device_message_queue, &msg_buf, K_NO_WAIT)) {
   203fe:	2800      	cmp	r0, #0
   20400:	d0f2      	beq.n	203e8 <send_device_message+0x20>
		LOG_ERR("Device message rejected, outgoing message queue is full");
   20402:	2145      	movs	r1, #69	; 0x45
   20404:	4805      	ldr	r0, [pc, #20]	; (2041c <send_device_message+0x54>)
   20406:	f01c fb53 	bl	3cab0 <z_log_minimal_printk>
		k_free(msg_buf);
   2040a:	9803      	ldr	r0, [sp, #12]
   2040c:	f020 ff39 	bl	41282 <k_free>
   20410:	e7e8      	b.n	203e4 <send_device_message+0x1c>
   20412:	bf00      	nop
   20414:	000439c0 	.word	0x000439c0
   20418:	20014fcc 	.word	0x20014fcc
   2041c:	000439f3 	.word	0x000439f3

00020420 <consume_device_message>:
{
   20420:	b530      	push	{r4, r5, lr}
   20422:	b087      	sub	sp, #28
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
   20424:	f04f 32ff 	mov.w	r2, #4294967295
   20428:	f04f 33ff 	mov.w	r3, #4294967295
   2042c:	4821      	ldr	r0, [pc, #132]	; (204b4 <consume_device_message+0x94>)
   2042e:	a901      	add	r1, sp, #4
   20430:	f016 f9aa 	bl	36788 <z_impl_k_msgq_get>
	if (ret) {
   20434:	4604      	mov	r4, r0
   20436:	b140      	cbz	r0, 2044a <consume_device_message+0x2a>
		LOG_ERR("Failed to retrieve item from outgoing message queue, error: %d", ret);
   20438:	4602      	mov	r2, r0
   2043a:	2145      	movs	r1, #69	; 0x45
   2043c:	481e      	ldr	r0, [pc, #120]	; (204b8 <consume_device_message+0x98>)
   2043e:	f01c fb37 	bl	3cab0 <z_log_minimal_printk>
		return -ret;
   20442:	4264      	negs	r4, r4
}
   20444:	4620      	mov	r0, r4
   20446:	b007      	add	sp, #28
   20448:	bd30      	pop	{r4, r5, pc}
	(void)await_connection(K_FOREVER);
   2044a:	f04f 31ff 	mov.w	r1, #4294967295
   2044e:	f04f 30ff 	mov.w	r0, #4294967295
   20452:	f7ff ff03 	bl	2025c <await_connection>
	struct nrf_cloud_tx_data mqtt_msg = {
   20456:	4621      	mov	r1, r4
   20458:	2210      	movs	r2, #16
   2045a:	a802      	add	r0, sp, #8
   2045c:	f020 ffc2 	bl	413e4 <memset>
		.data.len = strlen(msg),
   20460:	9801      	ldr	r0, [sp, #4]
   20462:	f7fc feee 	bl	1d242 <strlen>
	struct nrf_cloud_tx_data mqtt_msg = {
   20466:	9b01      	ldr	r3, [sp, #4]
   20468:	9002      	str	r0, [sp, #8]
   2046a:	9303      	str	r3, [sp, #12]
   2046c:	f44f 7381 	mov.w	r3, #258	; 0x102
	ret = nrf_cloud_send(&mqtt_msg);
   20470:	a802      	add	r0, sp, #8
	struct nrf_cloud_tx_data mqtt_msg = {
   20472:	f8ad 3010 	strh.w	r3, [sp, #16]
	ret = nrf_cloud_send(&mqtt_msg);
   20476:	f00b fa09 	bl	2b88c <nrf_cloud_send>
	if (ret) {
   2047a:	4d10      	ldr	r5, [pc, #64]	; (204bc <consume_device_message+0x9c>)
   2047c:	4604      	mov	r4, r0
   2047e:	b1b8      	cbz	r0, 204b0 <consume_device_message+0x90>
		LOG_ERR("Transmission of enqueued device message failed, nrf_cloud_send "
   20480:	4602      	mov	r2, r0
   20482:	2145      	movs	r1, #69	; 0x45
   20484:	480e      	ldr	r0, [pc, #56]	; (204c0 <consume_device_message+0xa0>)
   20486:	f01c fb13 	bl	3cab0 <z_log_minimal_printk>
		send_device_message(msg);
   2048a:	9801      	ldr	r0, [sp, #4]
   2048c:	f7ff ff9c 	bl	203c8 <send_device_message>
		send_failure_count += 1;
   20490:	682b      	ldr	r3, [r5, #0]
   20492:	3301      	adds	r3, #1
		if (send_failure_count > CONFIG_MAX_CONSECUTIVE_SEND_FAILURES) {
   20494:	2b05      	cmp	r3, #5
		send_failure_count += 1;
   20496:	602b      	str	r3, [r5, #0]
		if (send_failure_count > CONFIG_MAX_CONSECUTIVE_SEND_FAILURES) {
   20498:	dd06      	ble.n	204a8 <consume_device_message+0x88>
			disconnect_cloud();
   2049a:	f7ff ff05 	bl	202a8 <disconnect_cloud>
	return z_impl_k_sleep(timeout);
   2049e:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
   204a2:	2100      	movs	r1, #0
   204a4:	f018 f8a4 	bl	385f0 <z_impl_k_sleep>
	k_free(msg);
   204a8:	9801      	ldr	r0, [sp, #4]
   204aa:	f020 feea 	bl	41282 <k_free>
	return ret;
   204ae:	e7c9      	b.n	20444 <consume_device_message+0x24>
		send_failure_count = 0;
   204b0:	6028      	str	r0, [r5, #0]
   204b2:	e7f9      	b.n	204a8 <consume_device_message+0x88>
   204b4:	20014fcc 	.word	0x20014fcc
   204b8:	00043a30 	.word	0x00043a30
   204bc:	20019098 	.word	0x20019098
   204c0:	00043a74 	.word	0x00043a74

000204c4 <send_device_message_cJSON>:
{
   204c4:	b538      	push	{r3, r4, r5, lr}
	if (!msg_obj) {
   204c6:	b938      	cbnz	r0, 204d8 <send_device_message_cJSON+0x14>
		LOG_ERR("Cannot send NULL device message object");
   204c8:	2145      	movs	r1, #69	; 0x45
   204ca:	480c      	ldr	r0, [pc, #48]	; (204fc <send_device_message_cJSON+0x38>)
   204cc:	f01c faf0 	bl	3cab0 <z_log_minimal_printk>
		return -EINVAL;
   204d0:	f06f 0415 	mvn.w	r4, #21
}
   204d4:	4620      	mov	r0, r4
   204d6:	bd38      	pop	{r3, r4, r5, pc}
	msg = cJSON_PrintUnformatted(msg_obj);
   204d8:	f01f fb0b 	bl	3faf2 <cJSON_PrintUnformatted>
	if (msg == NULL) {
   204dc:	4605      	mov	r5, r0
   204de:	b930      	cbnz	r0, 204ee <send_device_message_cJSON+0x2a>
		LOG_ERR("Failed to convert cJSON device message object to string");
   204e0:	2145      	movs	r1, #69	; 0x45
   204e2:	4807      	ldr	r0, [pc, #28]	; (20500 <send_device_message_cJSON+0x3c>)
   204e4:	f01c fae4 	bl	3cab0 <z_log_minimal_printk>
		return -ENOMEM;
   204e8:	f06f 040b 	mvn.w	r4, #11
   204ec:	e7f2      	b.n	204d4 <send_device_message_cJSON+0x10>
	ret = send_device_message(msg);
   204ee:	f7ff ff6b 	bl	203c8 <send_device_message>
   204f2:	4604      	mov	r4, r0
	k_free(msg);
   204f4:	4628      	mov	r0, r5
   204f6:	f020 fec4 	bl	41282 <k_free>
	return ret;
   204fa:	e7eb      	b.n	204d4 <send_device_message_cJSON+0x10>
   204fc:	00043aff 	.word	0x00043aff
   20500:	00043b2b 	.word	0x00043b2b

00020504 <manage_connection>:

	return 0;
}

void manage_connection(void)
{
   20504:	b5f0      	push	{r4, r5, r6, r7, lr}
	 *
	 * (Once we request connection, the modem will automatically try to reconnect whenever
	 *  connection is lost).
	 */

	LOG_INF("Connecting to LTE network. This may take several minutes...");
   20506:	2149      	movs	r1, #73	; 0x49
{
   20508:	b089      	sub	sp, #36	; 0x24
	LOG_INF("Connecting to LTE network. This may take several minutes...");
   2050a:	4850      	ldr	r0, [pc, #320]	; (2064c <manage_connection+0x148>)
   2050c:	f01c fad0 	bl	3cab0 <z_log_minimal_printk>
	LOG_INF("Setting up LTE");
   20510:	2149      	movs	r1, #73	; 0x49
   20512:	484f      	ldr	r0, [pc, #316]	; (20650 <manage_connection+0x14c>)
   20514:	f01c facc 	bl	3cab0 <z_log_minimal_printk>
	date_time_register_handler(date_time_evt_handler);
   20518:	484e      	ldr	r0, [pc, #312]	; (20654 <manage_connection+0x150>)
   2051a:	f01f f81c 	bl	3f556 <date_time_register_handler>
	err = lte_lc_modem_events_enable();
   2051e:	f007 f97b 	bl	27818 <lte_lc_modem_events_enable>
	if (err) {
   20522:	4602      	mov	r2, r0
   20524:	b150      	cbz	r0, 2053c <manage_connection+0x38>
		LOG_ERR("lte_lc_modem_events_enable failed, error: %d", err);
   20526:	2145      	movs	r1, #69	; 0x45
   20528:	484b      	ldr	r0, [pc, #300]	; (20658 <manage_connection+0x154>)
		LOG_ERR("Modem could not be configured, error: %d", err);
   2052a:	f01c fac1 	bl	3cab0 <z_log_minimal_printk>
	if (setup_lte()) {
		LOG_ERR("LTE initialization failed. Continuing anyway. This may fail.");
   2052e:	2145      	movs	r1, #69	; 0x45
   20530:	484a      	ldr	r0, [pc, #296]	; (2065c <manage_connection+0x158>)
   20532:	f01c fabd 	bl	3cab0 <z_log_minimal_printk>
	}

	while (true) {
		/* Wait for LTE to become connected (or re-connected if connection was lost). */
		LOG_INF("Waiting for connection to LTE network...");
   20536:	4d4a      	ldr	r5, [pc, #296]	; (20660 <manage_connection+0x15c>)

		(void)await_lte_connection(K_FOREVER);
		LOG_INF("Connected to LTE network");
   20538:	4c4a      	ldr	r4, [pc, #296]	; (20664 <manage_connection+0x160>)
   2053a:	e040      	b.n	205be <manage_connection+0xba>
	LOG_INF("Starting connection to LTE network...");
   2053c:	2149      	movs	r1, #73	; 0x49
   2053e:	484a      	ldr	r0, [pc, #296]	; (20668 <manage_connection+0x164>)
   20540:	f01c fab6 	bl	3cab0 <z_log_minimal_printk>
	err = lte_lc_init_and_connect_async(lte_event_handler);
   20544:	4849      	ldr	r0, [pc, #292]	; (2066c <manage_connection+0x168>)
   20546:	f01e ff3e 	bl	3f3c6 <lte_lc_init_and_connect_async>
	if (err) {
   2054a:	4602      	mov	r2, r0
   2054c:	2800      	cmp	r0, #0
   2054e:	d0f2      	beq.n	20536 <manage_connection+0x32>
		LOG_ERR("Modem could not be configured, error: %d", err);
   20550:	2145      	movs	r1, #69	; 0x45
   20552:	4847      	ldr	r0, [pc, #284]	; (20670 <manage_connection+0x16c>)
   20554:	e7e9      	b.n	2052a <manage_connection+0x26>
		LOG_ERR("Cloud lib could not be initialized, error: %d", err);
   20556:	2145      	movs	r1, #69	; 0x45
   20558:	4846      	ldr	r0, [pc, #280]	; (20674 <manage_connection+0x170>)
   2055a:	f01c faa9 	bl	3cab0 <z_log_minimal_printk>
			/* and then wait patiently for a connection problem. */
			(void)await_cloud_disconnection(K_FOREVER);

			LOG_INF("Disconnected from nRF Cloud");
		} else {
			LOG_INF("Failed to connect to nRF Cloud");
   2055e:	2149      	movs	r1, #73	; 0x49
   20560:	4845      	ldr	r0, [pc, #276]	; (20678 <manage_connection+0x174>)
   20562:	e023      	b.n	205ac <manage_connection+0xa8>
	LOG_INF("Connected to nRF Cloud");
   20564:	4845      	ldr	r0, [pc, #276]	; (2067c <manage_connection+0x178>)
   20566:	f01c faa3 	bl	3cab0 <z_log_minimal_printk>
	struct nrf_cloud_svc_info_fota fota_info = {
   2056a:	2306      	movs	r3, #6
   2056c:	f88d 3008 	strb.w	r3, [sp, #8]
	struct nrf_cloud_svc_info_ui ui_info = {
   20570:	2303      	movs	r3, #3
   20572:	f88d 300c 	strb.w	r3, [sp, #12]
   20576:	2300      	movs	r3, #0
	struct nrf_cloud_svc_info service_info = {
   20578:	aa02      	add	r2, sp, #8
   2057a:	9204      	str	r2, [sp, #16]
   2057c:	aa03      	add	r2, sp, #12
	struct nrf_cloud_device_status device_status = {
   2057e:	e9cd 2305 	strd	r2, r3, [sp, #20]
	struct nrf_cloud_svc_info_ui ui_info = {
   20582:	f88d 300d 	strb.w	r3, [sp, #13]
	err = nrf_cloud_shadow_device_status_update(&device_status);
   20586:	a806      	add	r0, sp, #24
	struct nrf_cloud_device_status device_status = {
   20588:	ab04      	add	r3, sp, #16
   2058a:	9307      	str	r3, [sp, #28]
	err = nrf_cloud_shadow_device_status_update(&device_status);
   2058c:	f00b f9f8 	bl	2b980 <nrf_cloud_shadow_device_status_update>
	if (err) {
   20590:	4602      	mov	r2, r0
   20592:	b118      	cbz	r0, 2059c <manage_connection+0x98>
		LOG_ERR("Failed to update device shadow, error: %d", err);
   20594:	2145      	movs	r1, #69	; 0x45
   20596:	483a      	ldr	r0, [pc, #232]	; (20680 <manage_connection+0x17c>)
   20598:	f01c fa8a 	bl	3cab0 <z_log_minimal_printk>
			(void)await_cloud_disconnection(K_FOREVER);
   2059c:	f04f 31ff 	mov.w	r1, #4294967295
   205a0:	f04f 30ff 	mov.w	r0, #4294967295
   205a4:	f7ff feca 	bl	2033c <await_cloud_disconnection>
			LOG_INF("Disconnected from nRF Cloud");
   205a8:	2149      	movs	r1, #73	; 0x49
   205aa:	4836      	ldr	r0, [pc, #216]	; (20684 <manage_connection+0x180>)
			LOG_INF("Failed to connect to nRF Cloud");
   205ac:	f01c fa80 	bl	3cab0 <z_log_minimal_printk>
		}

		/* Reset cloud connection state before trying again. */
		reset_cloud();
   205b0:	f7ff fdf8 	bl	201a4 <reset_cloud>
   205b4:	f44f 3020 	mov.w	r0, #163840	; 0x28000
   205b8:	2100      	movs	r1, #0
   205ba:	f018 f819 	bl	385f0 <z_impl_k_sleep>
		LOG_INF("Waiting for connection to LTE network...");
   205be:	2149      	movs	r1, #73	; 0x49
   205c0:	4628      	mov	r0, r5
   205c2:	f01c fa75 	bl	3cab0 <z_log_minimal_printk>
		(void)await_lte_connection(K_FOREVER);
   205c6:	f04f 31ff 	mov.w	r1, #4294967295
   205ca:	f04f 30ff 	mov.w	r0, #4294967295
   205ce:	f7ff fe25 	bl	2021c <await_lte_connection>
		LOG_INF("Connected to LTE network");
   205d2:	2149      	movs	r1, #73	; 0x49
   205d4:	4620      	mov	r0, r4
   205d6:	f01c fa6b 	bl	3cab0 <z_log_minimal_printk>
	LOG_INF("Connecting to nRF Cloud");
   205da:	2149      	movs	r1, #73	; 0x49
   205dc:	482a      	ldr	r0, [pc, #168]	; (20688 <manage_connection+0x184>)
   205de:	f01c fa67 	bl	3cab0 <z_log_minimal_printk>
	struct nrf_cloud_init_param params = {
   205e2:	2300      	movs	r3, #0
   205e4:	9307      	str	r3, [sp, #28]
   205e6:	4b29      	ldr	r3, [pc, #164]	; (2068c <manage_connection+0x188>)
	err = nrf_cloud_init(&params);
   205e8:	a806      	add	r0, sp, #24
	struct nrf_cloud_init_param params = {
   205ea:	9306      	str	r3, [sp, #24]
	err = nrf_cloud_init(&params);
   205ec:	f00a fff2 	bl	2b5d4 <nrf_cloud_init>
	if (err) {
   205f0:	4602      	mov	r2, r0
   205f2:	2800      	cmp	r0, #0
   205f4:	d1af      	bne.n	20556 <manage_connection+0x52>
		LOG_INF("Next connection retry in %d seconds",
   205f6:	4e26      	ldr	r6, [pc, #152]	; (20690 <manage_connection+0x18c>)
			LOG_ERR("cloud_connect, error: %d", err);
   205f8:	4f26      	ldr	r7, [pc, #152]	; (20694 <manage_connection+0x190>)
		LOG_INF("Next connection retry in %d seconds",
   205fa:	221e      	movs	r2, #30
   205fc:	2149      	movs	r1, #73	; 0x49
   205fe:	4630      	mov	r0, r6
   20600:	f01c fa56 	bl	3cab0 <z_log_minimal_printk>
		err = nrf_cloud_connect(NULL);
   20604:	2000      	movs	r0, #0
   20606:	f00b f86d 	bl	2b6e4 <nrf_cloud_connect>
		if (err) {
   2060a:	4602      	mov	r2, r0
   2060c:	b118      	cbz	r0, 20616 <manage_connection+0x112>
			LOG_ERR("cloud_connect, error: %d", err);
   2060e:	2145      	movs	r1, #69	; 0x45
   20610:	4638      	mov	r0, r7
   20612:	f01c fa4d 	bl	3cab0 <z_log_minimal_printk>
		if (await_cloud_connected(
   20616:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   2061a:	2100      	movs	r1, #0
   2061c:	f7ff fe0e 	bl	2023c <await_date_time_known>
   20620:	2800      	cmp	r0, #0
   20622:	d0ea      	beq.n	205fa <manage_connection+0xf6>
	return z_impl_k_event_wait(event, events, reset, timeout);
   20624:	f04f 7296 	mov.w	r2, #19660800	; 0x12c0000
   20628:	2300      	movs	r3, #0
   2062a:	2114      	movs	r1, #20
   2062c:	e9cd 2300 	strd	r2, r3, [sp]
   20630:	4819      	ldr	r0, [pc, #100]	; (20698 <manage_connection+0x194>)
   20632:	2200      	movs	r2, #0
   20634:	f020 fe19 	bl	4126a <z_impl_k_event_wait>
	if (!await_cloud_ready(K_SECONDS(CONFIG_CLOUD_READY_TIMEOUT_SECONDS), true)) {
   20638:	2804      	cmp	r0, #4
		LOG_INF("nRF Cloud failed to become ready. Resetting connection.");
   2063a:	f04f 0149 	mov.w	r1, #73	; 0x49
	if (!await_cloud_ready(K_SECONDS(CONFIG_CLOUD_READY_TIMEOUT_SECONDS), true)) {
   2063e:	d091      	beq.n	20564 <manage_connection+0x60>
		LOG_INF("nRF Cloud failed to become ready. Resetting connection.");
   20640:	4816      	ldr	r0, [pc, #88]	; (2069c <manage_connection+0x198>)
   20642:	f01c fa35 	bl	3cab0 <z_log_minimal_printk>
		reset_cloud();
   20646:	f7ff fdad 	bl	201a4 <reset_cloud>
		return -ETIMEDOUT;
   2064a:	e788      	b.n	2055e <manage_connection+0x5a>
   2064c:	00043b68 	.word	0x00043b68
   20650:	00043ba9 	.word	0x00043ba9
   20654:	00020201 	.word	0x00020201
   20658:	00043bbd 	.word	0x00043bbd
   2065c:	00043df8 	.word	0x00043df8
   20660:	00043c48 	.word	0x00043c48
   20664:	00043c76 	.word	0x00043c76
   20668:	00043bef 	.word	0x00043bef
   2066c:	00020381 	.word	0x00020381
   20670:	00043c1a 	.word	0x00043c1a
   20674:	00043cb1 	.word	0x00043cb1
   20678:	00043dd4 	.word	0x00043dd4
   2067c:	00043d68 	.word	0x00043d68
   20680:	00043d84 	.word	0x00043d84
   20684:	00043db3 	.word	0x00043db3
   20688:	00043c94 	.word	0x00043c94
   2068c:	000202b5 	.word	0x000202b5
   20690:	00043ce4 	.word	0x00043ce4
   20694:	00043d0d 	.word	0x00043d0d
   20698:	200150f0 	.word	0x200150f0
   2069c:	00043d2b 	.word	0x00043d2b

000206a0 <on_fota_downloaded>:

/* Called from nRF Cloud event handler in connection.c */
void on_fota_downloaded(void)
{
	/* Reboot on successful FOTA download. (Thus, enabling the new firmware!) */
	LOG_WRN("Rebooting...");
   206a0:	4803      	ldr	r0, [pc, #12]	; (206b0 <on_fota_downloaded+0x10>)
   206a2:	2157      	movs	r1, #87	; 0x57
{
   206a4:	b508      	push	{r3, lr}
	LOG_WRN("Rebooting...");
   206a6:	f01c fa03 	bl	3cab0 <z_log_minimal_printk>
	LOG_PANIC();
	sys_reboot(SYS_REBOOT_COLD);
   206aa:	2001      	movs	r0, #1
   206ac:	f000 ff2a 	bl	21504 <sys_reboot>
   206b0:	00043e51 	.word	0x00043e51

000206b4 <location_event_handler>:
		}
	}
}

static void location_event_handler(const struct location_event_data *event_data)
{
   206b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (event_data->id) {
   206b6:	7803      	ldrb	r3, [r0, #0]
{
   206b8:	4604      	mov	r4, r0
	switch (event_data->id) {
   206ba:	2b01      	cmp	r3, #1
{
   206bc:	b087      	sub	sp, #28
	switch (event_data->id) {
   206be:	d10f      	bne.n	206e0 <location_event_handler+0x2c>
	case LOCATION_EVT_LOCATION:
		LOG_DBG("Location Event: Got location");
		if (location_update_handler) {
   206c0:	4b08      	ldr	r3, [pc, #32]	; (206e4 <location_event_handler+0x30>)
   206c2:	681f      	ldr	r7, [r3, #0]
   206c4:	b167      	cbz	r7, 206e0 <location_event_handler+0x2c>
			/* Pass received location data along to our handler. */
			location_update_handler(event_data->location);
   206c6:	466d      	mov	r5, sp
   206c8:	f100 0618 	add.w	r6, r0, #24
   206cc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   206ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   206d0:	e896 0003 	ldmia.w	r6, {r0, r1}
   206d4:	e885 0003 	stmia.w	r5, {r0, r1}
   206d8:	f104 0008 	add.w	r0, r4, #8
   206dc:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   206de:	47b8      	blx	r7

	default:
		LOG_DBG("Location Event: Unknown event");
		break;
	}
}
   206e0:	b007      	add	sp, #28
   206e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   206e4:	2001909c 	.word	0x2001909c

000206e8 <gnss_antenna_configure>:
{
   206e8:	b508      	push	{r3, lr}
	if (ret != 0) {
   206ea:	b9c8      	cbnz	r0, 20720 <gnss_antenna_configure+0x38>
	if (strlen(CONFIG_GNSS_AT_MAGPIO) > 0) {
   206ec:	480d      	ldr	r0, [pc, #52]	; (20724 <gnss_antenna_configure+0x3c>)
   206ee:	f7fc fda8 	bl	1d242 <strlen>
   206f2:	b138      	cbz	r0, 20704 <gnss_antenna_configure+0x1c>
		err = nrf_modem_at_printf("%s", CONFIG_GNSS_AT_MAGPIO);
   206f4:	490b      	ldr	r1, [pc, #44]	; (20724 <gnss_antenna_configure+0x3c>)
   206f6:	480c      	ldr	r0, [pc, #48]	; (20728 <gnss_antenna_configure+0x40>)
   206f8:	f014 fc86 	bl	35008 <nrf_modem_at_printf>
		if (err) {
   206fc:	b110      	cbz	r0, 20704 <gnss_antenna_configure+0x1c>
			printk("Failed to set MAGPIO configuration\n");
   206fe:	480b      	ldr	r0, [pc, #44]	; (2072c <gnss_antenna_configure+0x44>)
   20700:	f01b ffb9 	bl	3c676 <printk>
	if (strlen(CONFIG_GNSS_AT_COEX0) > 0) {
   20704:	480a      	ldr	r0, [pc, #40]	; (20730 <gnss_antenna_configure+0x48>)
   20706:	f7fc fd9c 	bl	1d242 <strlen>
   2070a:	b148      	cbz	r0, 20720 <gnss_antenna_configure+0x38>
		err = nrf_modem_at_printf("%s", CONFIG_GNSS_AT_COEX0);
   2070c:	4908      	ldr	r1, [pc, #32]	; (20730 <gnss_antenna_configure+0x48>)
   2070e:	4806      	ldr	r0, [pc, #24]	; (20728 <gnss_antenna_configure+0x40>)
   20710:	f014 fc7a 	bl	35008 <nrf_modem_at_printf>
		if (err) {
   20714:	b120      	cbz	r0, 20720 <gnss_antenna_configure+0x38>
}
   20716:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			printk("Failed to set COEX0 configuration\n");
   2071a:	4806      	ldr	r0, [pc, #24]	; (20734 <gnss_antenna_configure+0x4c>)
   2071c:	f01b bfab 	b.w	3c676 <printk>
}
   20720:	bd08      	pop	{r3, pc}
   20722:	bf00      	nop
   20724:	00043e70 	.word	0x00043e70
   20728:	0004a259 	.word	0x0004a259
   2072c:	00047a27 	.word	0x00047a27
   20730:	00043e8f 	.word	0x00043e8f
   20734:	00047a4f 	.word	0x00047a4f

00020738 <location_assistance_data_handler>:
{
   20738:	b538      	push	{r3, r4, r5, lr}
   2073a:	4604      	mov	r4, r0
   2073c:	460d      	mov	r5, r1
		err = nrf_cloud_agps_process(buf, len);
   2073e:	f00c fa07 	bl	2cb50 <nrf_cloud_agps_process>
		if (err) {
   20742:	4602      	mov	r2, r0
   20744:	b1b0      	cbz	r0, 20774 <location_assistance_data_handler+0x3c>
			if (err != -EBADMSG) {
   20746:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   2074a:	d003      	beq.n	20754 <location_assistance_data_handler+0x1c>
				LOG_WRN("Unable to process A-GPS data, error: %d", err);
   2074c:	2157      	movs	r1, #87	; 0x57
   2074e:	480a      	ldr	r0, [pc, #40]	; (20778 <location_assistance_data_handler+0x40>)
   20750:	f01c f9ae 	bl	3cab0 <z_log_minimal_printk>
		err = nrf_cloud_pgps_process(buf, len);
   20754:	4629      	mov	r1, r5
   20756:	4620      	mov	r0, r4
   20758:	f00d fe76 	bl	2e448 <nrf_cloud_pgps_process>
		if (err) {
   2075c:	4602      	mov	r2, r0
   2075e:	b148      	cbz	r0, 20774 <location_assistance_data_handler+0x3c>
			if (err != -EBADMSG && err != -EFTYPE) {
   20760:	f020 0302 	bic.w	r3, r0, #2
   20764:	334f      	adds	r3, #79	; 0x4f
   20766:	d005      	beq.n	20774 <location_assistance_data_handler+0x3c>
}
   20768:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				LOG_WRN("Unable to process P-GPS data, error: %d", err);
   2076c:	2157      	movs	r1, #87	; 0x57
   2076e:	4803      	ldr	r0, [pc, #12]	; (2077c <location_assistance_data_handler+0x44>)
   20770:	f01c b99e 	b.w	3cab0 <z_log_minimal_printk>
}
   20774:	bd38      	pop	{r3, r4, r5, pc}
   20776:	bf00      	nop
   20778:	00043ea7 	.word	0x00043ea7
   2077c:	00043ed4 	.word	0x00043ed4

00020780 <start_location_tracking>:

int start_location_tracking(location_update_cb_t handler_cb, int interval)
{
   20780:	b530      	push	{r4, r5, lr}
   20782:	b08b      	sub	sp, #44	; 0x2c
   20784:	4604      	mov	r4, r0
   20786:	460d      	mov	r5, r1
	int err;

	if (!date_time_is_valid()) {
   20788:	f01e fee3 	bl	3f552 <date_time_is_valid>
   2078c:	b918      	cbnz	r0, 20796 <start_location_tracking+0x16>
		LOG_WRN("Date and time unknown. Location Services results may suffer");
   2078e:	2157      	movs	r1, #87	; 0x57
   20790:	4816      	ldr	r0, [pc, #88]	; (207ec <start_location_tracking+0x6c>)
   20792:	f01c f98d 	bl	3cab0 <z_log_minimal_printk>
	}

	/* Update the location update handler. */
	location_update_handler = handler_cb;
   20796:	4b16      	ldr	r3, [pc, #88]	; (207f0 <start_location_tracking+0x70>)

	/* Initialize the Location Services Library. */
	err = location_init(location_event_handler);
   20798:	4816      	ldr	r0, [pc, #88]	; (207f4 <start_location_tracking+0x74>)
	location_update_handler = handler_cb;
   2079a:	601c      	str	r4, [r3, #0]
	err = location_init(location_event_handler);
   2079c:	f008 fdae 	bl	292fc <location_init>
	if (err) {
   207a0:	4604      	mov	r4, r0
   207a2:	b138      	cbz	r0, 207b4 <start_location_tracking+0x34>
		LOG_ERR("Initializing the Location library failed, error: %d", err);
   207a4:	2145      	movs	r1, #69	; 0x45
   207a6:	4602      	mov	r2, r0
   207a8:	4813      	ldr	r0, [pc, #76]	; (207f8 <start_location_tracking+0x78>)
	 * This will cause the configured location_event_handler to start being called with
	 * location data.
	 */
	err = location_request(&config);
	if (err) {
		LOG_ERR("Requesting location failed, error: %d\n", err);
   207aa:	f01c f981 	bl	3cab0 <z_log_minimal_printk>
		return err;
	}
	return 0;
}
   207ae:	4620      	mov	r0, r4
   207b0:	b00b      	add	sp, #44	; 0x2c
   207b2:	bd30      	pop	{r4, r5, pc}
		enum location_method methods[] = {LOCATION_METHOD_GNSS, LOCATION_METHOD_CELLULAR};
   207b4:	4b11      	ldr	r3, [pc, #68]	; (207fc <start_location_tracking+0x7c>)
		location_config_defaults_set(&config, ARRAY_SIZE(methods), methods);
   207b6:	2102      	movs	r1, #2
		enum location_method methods[] = {LOCATION_METHOD_GNSS, LOCATION_METHOD_CELLULAR};
   207b8:	881b      	ldrh	r3, [r3, #0]
		location_config_defaults_set(&config, ARRAY_SIZE(methods), methods);
   207ba:	aa01      	add	r2, sp, #4
   207bc:	a802      	add	r0, sp, #8
		enum location_method methods[] = {LOCATION_METHOD_GNSS, LOCATION_METHOD_CELLULAR};
   207be:	f8ad 3004 	strh.w	r3, [sp, #4]
		location_config_defaults_set(&config, ARRAY_SIZE(methods), methods);
   207c2:	f008 fdab 	bl	2931c <location_config_defaults_set>
		config.methods[0].gnss.timeout = CONFIG_GNSS_FIX_TIMEOUT_SECONDS;
   207c6:	2328      	movs	r3, #40	; 0x28
   207c8:	f8ad 300c 	strh.w	r3, [sp, #12]
		config.methods[0].gnss.accuracy = LOCATION_ACCURACY_NORMAL;
   207cc:	2301      	movs	r3, #1
	err = location_request(&config);
   207ce:	a802      	add	r0, sp, #8
	config.interval = interval;
   207d0:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
		config.methods[0].gnss.accuracy = LOCATION_ACCURACY_NORMAL;
   207d4:	f88d 300e 	strb.w	r3, [sp, #14]
	err = location_request(&config);
   207d8:	f008 fdd4 	bl	29384 <location_request>
	if (err) {
   207dc:	4604      	mov	r4, r0
   207de:	2800      	cmp	r0, #0
   207e0:	d0e5      	beq.n	207ae <start_location_tracking+0x2e>
		LOG_ERR("Requesting location failed, error: %d\n", err);
   207e2:	4602      	mov	r2, r0
   207e4:	2145      	movs	r1, #69	; 0x45
   207e6:	4806      	ldr	r0, [pc, #24]	; (20800 <start_location_tracking+0x80>)
   207e8:	e7df      	b.n	207aa <start_location_tracking+0x2a>
   207ea:	bf00      	nop
   207ec:	00043f01 	.word	0x00043f01
   207f0:	2001909c 	.word	0x2001909c
   207f4:	000206b5 	.word	0x000206b5
   207f8:	00043f42 	.word	0x00043f42
   207fc:	00042810 	.word	0x00042810
   20800:	00043f7b 	.word	0x00043f7b

00020804 <pm_read>:
#else "i2c2 devicetree node is disabled"
#define I2C2 ""
#endif

bool pm_read(pm_data *data)
{
   20804:	b570      	push	{r4, r5, r6, lr}
    int ret;
    uint8_t pm_buffer[32] = {0};
   20806:	221c      	movs	r2, #28
   20808:	2500      	movs	r5, #0
{
   2080a:	b08e      	sub	sp, #56	; 0x38
   2080c:	4604      	mov	r4, r0
    uint8_t pm_buffer[32] = {0};
   2080e:	4629      	mov	r1, r5
   20810:	eb0d 0002 	add.w	r0, sp, r2
   20814:	9506      	str	r5, [sp, #24]
   20816:	f020 fde5 	bl	413e4 <memset>
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   2081a:	4828      	ldr	r0, [pc, #160]	; (208bc <pm_read+0xb8>)
   2081c:	f015 fb46 	bl	35eac <z_impl_device_get_binding>
	msg[0].buf = (uint8_t *)write_buf;
	msg[0].len = num_write;
	msg[0].flags = I2C_MSG_WRITE;

	msg[1].buf = (uint8_t *)read_buf;
	msg[1].len = num_read;
   20820:	2220      	movs	r2, #32
   20822:	9204      	str	r2, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   20824:	2207      	movs	r2, #7
	msg[0].len = num_write;
   20826:	e9cd 5500 	strd	r5, r5, [sp]
	msg[0].flags = I2C_MSG_WRITE;
   2082a:	f88d 5008 	strb.w	r5, [sp, #8]
	msg[1].buf = (uint8_t *)read_buf;
   2082e:	ad06      	add	r5, sp, #24
   20830:	9503      	str	r5, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   20832:	f88d 2014 	strb.w	r2, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   20836:	6883      	ldr	r3, [r0, #8]
   20838:	2202      	movs	r2, #2
   2083a:	689e      	ldr	r6, [r3, #8]
   2083c:	4669      	mov	r1, sp
   2083e:	2312      	movs	r3, #18
   20840:	47b0      	blx	r6

    const struct device *dev_i2c_pm = device_get_binding(I2C2);

    ret = i2c_write_read(dev_i2c_pm, PM_ADDR, PM_SC1, 0, &pm_buffer, 32);
    if (ret != 0)
   20842:	2800      	cmp	r0, #0
   20844:	d138      	bne.n	208b8 <pm_read+0xb4>
        // printf("Failed to write/read I2C device address (err %i)\n", ret);
        return true;
    }

    // Check that start byte is correct!
    if (pm_buffer[0] != 0x42)
   20846:	f89d 3018 	ldrb.w	r3, [sp, #24]
   2084a:	2b42      	cmp	r3, #66	; 0x42
   2084c:	d134      	bne.n	208b8 <pm_read+0xb4>
   2084e:	462b      	mov	r3, r5
   20850:	466a      	mov	r2, sp
   20852:	2101      	movs	r1, #1

    uint16_t buffer_u16[12];
    for (uint8_t i = 0; i < 12; i++)
    {
        buffer_u16[i] = pm_buffer[2 + i * 2 + 1];
        buffer_u16[i] += (pm_buffer[2 + i * 2] << 8);
   20854:	789d      	ldrb	r5, [r3, #2]
        buffer_u16[i] = pm_buffer[2 + i * 2 + 1];
   20856:	78d8      	ldrb	r0, [r3, #3]
    for (uint8_t i = 0; i < 12; i++)
   20858:	3101      	adds	r1, #1
        buffer_u16[i] += (pm_buffer[2 + i * 2] << 8);
   2085a:	eb00 2005 	add.w	r0, r0, r5, lsl #8
    for (uint8_t i = 0; i < 12; i++)
   2085e:	290d      	cmp	r1, #13
        buffer_u16[i] += (pm_buffer[2 + i * 2] << 8);
   20860:	f822 0b02 	strh.w	r0, [r2], #2
    for (uint8_t i = 0; i < 12; i++)
   20864:	f103 0302 	add.w	r3, r3, #2
   20868:	d1f4      	bne.n	20854 <pm_read+0x50>
    data->particles_10um =  buffer_u16[8];
    data->particles_25um =  buffer_u16[9];
    data->particles_50um =  buffer_u16[10];
    data->particles_100um =  buffer_u16[11];

    return false;
   2086a:	2000      	movs	r0, #0
    data->pm10_standard = buffer_u16[0];
   2086c:	f8bd 3000 	ldrh.w	r3, [sp]
   20870:	8023      	strh	r3, [r4, #0]
    data->pm25_standard = buffer_u16[1];
   20872:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   20876:	8063      	strh	r3, [r4, #2]
    data->pm100_standard = buffer_u16[2];
   20878:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   2087c:	80a3      	strh	r3, [r4, #4]
    data->pm10_env = buffer_u16[3];
   2087e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   20882:	80e3      	strh	r3, [r4, #6]
    data->pm25_env = buffer_u16[4];
   20884:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   20888:	8123      	strh	r3, [r4, #8]
    data->pm100_env = buffer_u16[5];
   2088a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   2088e:	8163      	strh	r3, [r4, #10]
    data->particles_03um = buffer_u16[6]; 
   20890:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   20894:	81a3      	strh	r3, [r4, #12]
    data->particles_05um =  buffer_u16[7];
   20896:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2089a:	81e3      	strh	r3, [r4, #14]
    data->particles_10um =  buffer_u16[8];
   2089c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   208a0:	8223      	strh	r3, [r4, #16]
    data->particles_25um =  buffer_u16[9];
   208a2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   208a6:	8263      	strh	r3, [r4, #18]
    data->particles_50um =  buffer_u16[10];
   208a8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   208ac:	82a3      	strh	r3, [r4, #20]
    data->particles_100um =  buffer_u16[11];
   208ae:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   208b2:	82e3      	strh	r3, [r4, #22]
}
   208b4:	b00e      	add	sp, #56	; 0x38
   208b6:	bd70      	pop	{r4, r5, r6, pc}
        return true;
   208b8:	2001      	movs	r0, #1
   208ba:	e7fb      	b.n	208b4 <pm_read+0xb0>
   208bc:	00043fb9 	.word	0x00043fb9

000208c0 <sht40_read>:
#endif

bool sht40_read(sht40_data *data)
{
    int ret;
    uint8_t sht40_buffer[6] = {0};
   208c0:	2300      	movs	r3, #0
{
   208c2:	b570      	push	{r4, r5, r6, lr}
   208c4:	b086      	sub	sp, #24
   208c6:	4604      	mov	r4, r0
    uint8_t sht40_buffer[6] = {0};
   208c8:	9301      	str	r3, [sp, #4]
   208ca:	f8ad 3008 	strh.w	r3, [sp, #8]
   208ce:	482e      	ldr	r0, [pc, #184]	; (20988 <sht40_read+0xc8>)
   208d0:	f015 faec 	bl	35eac <z_impl_device_get_binding>
	msg.len = num_bytes;
   208d4:	23fd      	movs	r3, #253	; 0xfd
   208d6:	2201      	movs	r2, #1
   208d8:	e9cd 3203 	strd	r3, r2, [sp, #12]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   208dc:	2302      	movs	r3, #2
   208de:	4605      	mov	r5, r0
   208e0:	f88d 3014 	strb.w	r3, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   208e4:	6883      	ldr	r3, [r0, #8]
   208e6:	a903      	add	r1, sp, #12
   208e8:	689e      	ldr	r6, [r3, #8]
   208ea:	2344      	movs	r3, #68	; 0x44
   208ec:	47b0      	blx	r6
	float t_ticks, rh_ticks = 0;

    const struct device *dev_i2c_th = device_get_binding(I2C2);

    ret = i2c_write(dev_i2c_th, SHT40_HP, 1, SHT40_ADDR);
    if (ret != 0)
   208ee:	2800      	cmp	r0, #0
   208f0:	d147      	bne.n	20982 <sht40_read+0xc2>
	return z_impl_k_sleep(timeout);
   208f2:	2100      	movs	r1, #0
   208f4:	f44f 70a4 	mov.w	r0, #328	; 0x148
   208f8:	f017 fe7a 	bl	385f0 <z_impl_k_sleep>
	msg.buf = buf;
   208fc:	ab01      	add	r3, sp, #4
   208fe:	9303      	str	r3, [sp, #12]
	msg.len = num_bytes;
   20900:	2306      	movs	r3, #6
   20902:	9304      	str	r3, [sp, #16]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   20904:	2303      	movs	r3, #3
   20906:	f88d 3014 	strb.w	r3, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   2090a:	68ab      	ldr	r3, [r5, #8]
   2090c:	2201      	movs	r2, #1
   2090e:	689e      	ldr	r6, [r3, #8]
   20910:	4628      	mov	r0, r5
   20912:	2344      	movs	r3, #68	; 0x44
   20914:	a903      	add	r1, sp, #12
   20916:	47b0      	blx	r6
    }

    k_msleep(10);

    ret = i2c_read(dev_i2c_th, sht40_buffer, 6, SHT40_ADDR);
    if (ret != 0)
   20918:	bb98      	cbnz	r0, 20982 <sht40_read+0xc2>
    	// printf("Failed to read I2C device address (err %i)\n", ret);
    	return;
    }

    t_ticks = (uint16_t)sht40_buffer[0] * 256 + (uint16_t)sht40_buffer[1];
    rh_ticks = (uint16_t)sht40_buffer[3] * 256 + (uint16_t)sht40_buffer[4];
   2091a:	f89d 2007 	ldrb.w	r2, [sp, #7]
   2091e:	f89d 3008 	ldrb.w	r3, [sp, #8]

    data->temperature = -45 + 175 * t_ticks / 65535;
   20922:	eddf 6a1a 	vldr	s13, [pc, #104]	; 2098c <sht40_read+0xcc>
    rh_ticks = (uint16_t)sht40_buffer[3] * 256 + (uint16_t)sht40_buffer[4];
   20926:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   2092a:	ee07 3a90 	vmov	s15, r3
    t_ticks = (uint16_t)sht40_buffer[0] * 256 + (uint16_t)sht40_buffer[1];
   2092e:	f89d 2004 	ldrb.w	r2, [sp, #4]
   20932:	f89d 3005 	ldrb.w	r3, [sp, #5]
    data->temperature = -45 + 175 * t_ticks / 65535;
   20936:	ed9f 6a16 	vldr	s12, [pc, #88]	; 20990 <sht40_read+0xd0>
    t_ticks = (uint16_t)sht40_buffer[0] * 256 + (uint16_t)sht40_buffer[1];
   2093a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   2093e:	ee07 3a10 	vmov	s14, r3
   20942:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    data->temperature = -45 + 175 * t_ticks / 65535;
   20946:	ee27 7a26 	vmul.f32	s14, s14, s13
   2094a:	eec7 6a06 	vdiv.f32	s13, s14, s12
   2094e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 20994 <sht40_read+0xd4>
   20952:	ee36 7ac7 	vsub.f32	s14, s13, s14
   20956:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    rh_ticks = (uint16_t)sht40_buffer[3] * 256 + (uint16_t)sht40_buffer[4];
   2095a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    data->temperature = -45 + 175 * t_ticks / 65535;
   2095e:	ee17 3a10 	vmov	r3, s14
    data->humidity = -6 + 125 * rh_ticks / 65535;
   20962:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 20998 <sht40_read+0xd8>
   20966:	ee67 7a87 	vmul.f32	s15, s15, s14
   2096a:	ee87 7a86 	vdiv.f32	s14, s15, s12
   2096e:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
   20972:	ee77 7a67 	vsub.f32	s15, s14, s15
   20976:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    data->temperature = -45 + 175 * t_ticks / 65535;
   2097a:	8023      	strh	r3, [r4, #0]
    data->humidity = -6 + 125 * rh_ticks / 65535;
   2097c:	ee17 3a90 	vmov	r3, s15
   20980:	8063      	strh	r3, [r4, #2]

    return false;
}
   20982:	b006      	add	sp, #24
   20984:	bd70      	pop	{r4, r5, r6, pc}
   20986:	bf00      	nop
   20988:	00043fb9 	.word	0x00043fb9
   2098c:	432f0000 	.word	0x432f0000
   20990:	477fff00 	.word	0x477fff00
   20994:	42340000 	.word	0x42340000
   20998:	42fa0000 	.word	0x42fa0000

0002099c <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   2099c:	b530      	push	{r4, r5, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   2099e:	4c0a      	ldr	r4, [pc, #40]	; (209c8 <crc8_ccitt+0x2c>)
   209a0:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   209a2:	4291      	cmp	r1, r2
   209a4:	d100      	bne.n	209a8 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   209a6:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
   209a8:	f811 3b01 	ldrb.w	r3, [r1], #1
   209ac:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   209ae:	0903      	lsrs	r3, r0, #4
   209b0:	5ce3      	ldrb	r3, [r4, r3]
   209b2:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
   209b6:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   209b8:	f3c3 1303 	ubfx	r3, r3, #4, #4
   209bc:	5ce0      	ldrb	r0, [r4, r3]
   209be:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
   209c2:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   209c4:	e7ed      	b.n	209a2 <crc8_ccitt+0x6>
   209c6:	bf00      	nop
   209c8:	00043fbf 	.word	0x00043fbf

000209cc <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   209cc:	2803      	cmp	r0, #3
{
   209ce:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   209d0:	d906      	bls.n	209e0 <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
		errno = EBADF;
   209d2:	f01c feac 	bl	3d72e <__errno>
   209d6:	2309      	movs	r3, #9
   209d8:	6003      	str	r3, [r0, #0]
   209da:	f04f 30ff 	mov.w	r0, #4294967295
		return -1;
	}

	return 0;
}
   209de:	bd08      	pop	{r3, pc}
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   209e0:	4b04      	ldr	r3, [pc, #16]	; (209f4 <_check_fd+0x28>)
   209e2:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   209e6:	3008      	adds	r0, #8
   209e8:	e8d0 3faf 	lda	r3, [r0]
	if (!atomic_get(&fdtable[fd].refcount)) {
   209ec:	2b00      	cmp	r3, #0
   209ee:	d0f0      	beq.n	209d2 <_check_fd+0x6>
	return 0;
   209f0:	2000      	movs	r0, #0
   209f2:	e7f4      	b.n	209de <_check_fd+0x12>
   209f4:	200190a0 	.word	0x200190a0

000209f8 <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
   209f8:	b570      	push	{r4, r5, r6, lr}
   209fa:	4604      	mov	r4, r0
   209fc:	460d      	mov	r5, r1
   209fe:	4616      	mov	r6, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
   20a00:	f7ff ffe4 	bl	209cc <_check_fd>
   20a04:	2800      	cmp	r0, #0
   20a06:	db09      	blt.n	20a1c <z_get_fd_obj+0x24>
		return NULL;
	}

	entry = &fdtable[fd];

	if (vtable != NULL && entry->vtable != vtable) {
   20a08:	4b06      	ldr	r3, [pc, #24]	; (20a24 <z_get_fd_obj+0x2c>)
   20a0a:	0160      	lsls	r0, r4, #5
   20a0c:	b145      	cbz	r5, 20a20 <z_get_fd_obj+0x28>
   20a0e:	181a      	adds	r2, r3, r0
   20a10:	6852      	ldr	r2, [r2, #4]
   20a12:	42aa      	cmp	r2, r5
   20a14:	d004      	beq.n	20a20 <z_get_fd_obj+0x28>
		errno = err;
   20a16:	f01c fe8a 	bl	3d72e <__errno>
   20a1a:	6006      	str	r6, [r0, #0]
		return NULL;
   20a1c:	2000      	movs	r0, #0
   20a1e:	e000      	b.n	20a22 <z_get_fd_obj+0x2a>
		return NULL;
	}

	return entry->obj;
   20a20:	5818      	ldr	r0, [r3, r0]
}
   20a22:	bd70      	pop	{r4, r5, r6, pc}
   20a24:	200190a0 	.word	0x200190a0

00020a28 <z_get_fd_obj_and_vtable>:

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable,
			      struct k_mutex **lock)
{
   20a28:	b570      	push	{r4, r5, r6, lr}
   20a2a:	4604      	mov	r4, r0
   20a2c:	460e      	mov	r6, r1
   20a2e:	4615      	mov	r5, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
   20a30:	f7ff ffcc 	bl	209cc <_check_fd>
   20a34:	2800      	cmp	r0, #0
   20a36:	db0c      	blt.n	20a52 <z_get_fd_obj_and_vtable+0x2a>
		return NULL;
	}

	entry = &fdtable[fd];
	*vtable = entry->vtable;
   20a38:	4b07      	ldr	r3, [pc, #28]	; (20a58 <z_get_fd_obj_and_vtable+0x30>)
   20a3a:	0161      	lsls	r1, r4, #5
   20a3c:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   20a40:	6862      	ldr	r2, [r4, #4]
   20a42:	6032      	str	r2, [r6, #0]

	if (lock) {
   20a44:	b11d      	cbz	r5, 20a4e <z_get_fd_obj_and_vtable+0x26>
		*lock = &entry->lock;
   20a46:	f101 020c 	add.w	r2, r1, #12
   20a4a:	441a      	add	r2, r3
   20a4c:	602a      	str	r2, [r5, #0]
	}

	return entry->obj;
   20a4e:	5858      	ldr	r0, [r3, r1]
}
   20a50:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   20a52:	2000      	movs	r0, #0
   20a54:	e7fc      	b.n	20a50 <z_get_fd_obj_and_vtable+0x28>
   20a56:	bf00      	nop
   20a58:	200190a0 	.word	0x200190a0

00020a5c <z_reserve_fd>:

int z_reserve_fd(void)
{
   20a5c:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   20a5e:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   20a60:	f04f 32ff 	mov.w	r2, #4294967295
   20a64:	f04f 33ff 	mov.w	r3, #4294967295
   20a68:	4814      	ldr	r0, [pc, #80]	; (20abc <z_reserve_fd+0x60>)
   20a6a:	f015 ff23 	bl	368b4 <z_impl_k_mutex_lock>
   20a6e:	4a14      	ldr	r2, [pc, #80]	; (20ac0 <z_reserve_fd+0x64>)
		if (!atomic_get(&fdtable[fd].refcount)) {
   20a70:	0163      	lsls	r3, r4, #5
   20a72:	e8d2 1faf 	lda	r1, [r2]
   20a76:	b179      	cbz	r1, 20a98 <z_reserve_fd+0x3c>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   20a78:	3401      	adds	r4, #1
   20a7a:	2c04      	cmp	r4, #4
   20a7c:	f102 0220 	add.w	r2, r2, #32
   20a80:	d1f6      	bne.n	20a70 <z_reserve_fd+0x14>
	errno = ENFILE;
   20a82:	f01c fe54 	bl	3d72e <__errno>
   20a86:	2317      	movs	r3, #23
	return -1;
   20a88:	f04f 34ff 	mov.w	r4, #4294967295
	errno = ENFILE;
   20a8c:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   20a8e:	480b      	ldr	r0, [pc, #44]	; (20abc <z_reserve_fd+0x60>)
   20a90:	f015 ffe2 	bl	36a58 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
   20a94:	4620      	mov	r0, r4
   20a96:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   20a98:	e8d2 0fef 	ldaex	r0, [r2]
   20a9c:	3001      	adds	r0, #1
   20a9e:	e8c2 0fec 	stlex	ip, r0, [r2]
   20aa2:	f1bc 0f00 	cmp.w	ip, #0
   20aa6:	d1f7      	bne.n	20a98 <z_reserve_fd+0x3c>
		fdtable[fd].obj = NULL;
   20aa8:	4806      	ldr	r0, [pc, #24]	; (20ac4 <z_reserve_fd+0x68>)
   20aaa:	18c2      	adds	r2, r0, r3
   20aac:	50c1      	str	r1, [r0, r3]
		fdtable[fd].vtable = NULL;
   20aae:	6051      	str	r1, [r2, #4]
		k_mutex_init(&fdtable[fd].lock);
   20ab0:	330c      	adds	r3, #12
	return z_impl_k_mutex_init(mutex);
   20ab2:	4418      	add	r0, r3
   20ab4:	f020 fa4c 	bl	40f50 <z_impl_k_mutex_init>
   20ab8:	e7e9      	b.n	20a8e <z_reserve_fd+0x32>
   20aba:	bf00      	nop
   20abc:	20014f18 	.word	0x20014f18
   20ac0:	200190a8 	.word	0x200190a8
   20ac4:	200190a0 	.word	0x200190a0

00020ac8 <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
   20ac8:	b410      	push	{r4}
   20aca:	4604      	mov	r4, r0
   20acc:	4610      	mov	r0, r2
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
   20ace:	4b0a      	ldr	r3, [pc, #40]	; (20af8 <z_finalize_fd+0x30>)
   20ad0:	0162      	lsls	r2, r4, #5
   20ad2:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   20ad6:	5099      	str	r1, [r3, r2]
	fdtable[fd].vtable = vtable;
   20ad8:	6060      	str	r0, [r4, #4]

	/* Let the object know about the lock just in case it needs it
	 * for something. For BSD sockets, the lock is used with condition
	 * variables to avoid keeping the lock for a long period of time.
	 */
	if (vtable && vtable->ioctl) {
   20ada:	b148      	cbz	r0, 20af0 <z_finalize_fd+0x28>
   20adc:	68c4      	ldr	r4, [r0, #12]
   20ade:	b13c      	cbz	r4, 20af0 <z_finalize_fd+0x28>
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   20ae0:	320c      	adds	r2, #12
   20ae2:	4413      	add	r3, r2
					   &fdtable[fd].lock);
	}
}
   20ae4:	f85d 4b04 	ldr.w	r4, [sp], #4
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   20ae8:	f240 1205 	movw	r2, #261	; 0x105
   20aec:	f01b bd3b 	b.w	3c566 <z_fdtable_call_ioctl.constprop.0>
}
   20af0:	f85d 4b04 	ldr.w	r4, [sp], #4
   20af4:	4770      	bx	lr
   20af6:	bf00      	nop
   20af8:	200190a0 	.word	0x200190a0

00020afc <z_free_fd>:

void z_free_fd(int fd)
{
   20afc:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
   20afe:	490d      	ldr	r1, [pc, #52]	; (20b34 <z_free_fd+0x38>)
   20b00:	0140      	lsls	r0, r0, #5
   20b02:	f100 0308 	add.w	r3, r0, #8
   20b06:	440b      	add	r3, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20b08:	e8d3 2faf 	lda	r2, [r3]
		if (!old_rc) {
   20b0c:	b182      	cbz	r2, 20b30 <z_free_fd+0x34>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
   20b0e:	1e54      	subs	r4, r2, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   20b10:	e8d3 5fef 	ldaex	r5, [r3]
   20b14:	4295      	cmp	r5, r2
   20b16:	d104      	bne.n	20b22 <z_free_fd+0x26>
   20b18:	e8c3 4fec 	stlex	ip, r4, [r3]
   20b1c:	f1bc 0f00 	cmp.w	ip, #0
   20b20:	d1f6      	bne.n	20b10 <z_free_fd+0x14>
   20b22:	d1f1      	bne.n	20b08 <z_free_fd+0xc>
	if (old_rc != 1) {
   20b24:	2a01      	cmp	r2, #1
	fdtable[fd].obj = NULL;
   20b26:	bf01      	itttt	eq
   20b28:	2300      	moveq	r3, #0
   20b2a:	180a      	addeq	r2, r1, r0
   20b2c:	500b      	streq	r3, [r1, r0]
	fdtable[fd].vtable = NULL;
   20b2e:	6053      	streq	r3, [r2, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
   20b30:	bd30      	pop	{r4, r5, pc}
   20b32:	bf00      	nop
   20b34:	200190a0 	.word	0x200190a0

00020b38 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   20b38:	6843      	ldr	r3, [r0, #4]
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   20b3a:	b570      	push	{r4, r5, r6, lr}

	return method & SYS_NOTIFY_METHOD_MASK;
   20b3c:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   20b40:	2b02      	cmp	r3, #2
{
   20b42:	4604      	mov	r4, r0
   20b44:	460e      	mov	r6, r1
	notify->result = res;
   20b46:	6081      	str	r1, [r0, #8]
	switch (method) {
   20b48:	d010      	beq.n	20b6c <sys_notify_finalize+0x34>
   20b4a:	2b03      	cmp	r3, #3
   20b4c:	d004      	beq.n	20b58 <sys_notify_finalize+0x20>
   20b4e:	2b01      	cmp	r3, #1
   20b50:	d10f      	bne.n	20b72 <sys_notify_finalize+0x3a>
   20b52:	2500      	movs	r5, #0
   20b54:	4628      	mov	r0, r5
   20b56:	e001      	b.n	20b5c <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   20b58:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
   20b5a:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   20b5c:	2300      	movs	r3, #0
   20b5e:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   20b60:	b110      	cbz	r0, 20b68 <sys_notify_finalize+0x30>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   20b62:	4631      	mov	r1, r6
   20b64:	f018 fd18 	bl	39598 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   20b68:	4628      	mov	r0, r5
   20b6a:	bd70      	pop	{r4, r5, r6, pc}
	sys_notify_generic_callback rv = NULL;
   20b6c:	2500      	movs	r5, #0
		sig = notify->method.signal;
   20b6e:	6800      	ldr	r0, [r0, #0]
		break;
   20b70:	e7f4      	b.n	20b5c <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   20b72:	2245      	movs	r2, #69	; 0x45
   20b74:	4904      	ldr	r1, [pc, #16]	; (20b88 <sys_notify_finalize+0x50>)
   20b76:	4805      	ldr	r0, [pc, #20]	; (20b8c <sys_notify_finalize+0x54>)
   20b78:	f01b ff60 	bl	3ca3c <assert_print>
   20b7c:	2145      	movs	r1, #69	; 0x45
   20b7e:	4802      	ldr	r0, [pc, #8]	; (20b88 <sys_notify_finalize+0x50>)
   20b80:	f01b ff55 	bl	3ca2e <assert_post_action>
	sys_notify_generic_callback rv = NULL;
   20b84:	2500      	movs	r5, #0
   20b86:	e7e8      	b.n	20b5a <sys_notify_finalize+0x22>
   20b88:	00043fcf 	.word	0x00043fcf
   20b8c:	00043ff2 	.word	0x00043ff2

00020b90 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   20b90:	680b      	ldr	r3, [r1, #0]
   20b92:	3301      	adds	r3, #1
   20b94:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   20b96:	4b01      	ldr	r3, [pc, #4]	; (20b9c <char_out+0xc>)
   20b98:	681b      	ldr	r3, [r3, #0]
   20b9a:	4718      	bx	r3
   20b9c:	200145c8 	.word	0x200145c8

00020ba0 <__printk_hook_install>:
	_char_out = fn;
   20ba0:	4b01      	ldr	r3, [pc, #4]	; (20ba8 <__printk_hook_install+0x8>)
   20ba2:	6018      	str	r0, [r3, #0]
}
   20ba4:	4770      	bx	lr
   20ba6:	bf00      	nop
   20ba8:	200145c8 	.word	0x200145c8

00020bac <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   20bac:	b507      	push	{r0, r1, r2, lr}
   20bae:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
   20bb0:	2100      	movs	r1, #0
{
   20bb2:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
   20bb4:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
   20bb6:	4803      	ldr	r0, [pc, #12]	; (20bc4 <vprintk+0x18>)
   20bb8:	a901      	add	r1, sp, #4
   20bba:	f7fc fb4d 	bl	1d258 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   20bbe:	b003      	add	sp, #12
   20bc0:	f85d fb04 	ldr.w	pc, [sp], #4
   20bc4:	00020b91 	.word	0x00020b91

00020bc8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   20bc8:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
   20bca:	2500      	movs	r5, #0
{
   20bcc:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   20bce:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   20bd2:	4604      	mov	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
   20bd4:	a901      	add	r1, sp, #4
   20bd6:	4805      	ldr	r0, [pc, #20]	; (20bec <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   20bd8:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   20bda:	f7fc fb3d 	bl	1d258 <cbvprintf>

	if (ctx.count < ctx.max) {
   20bde:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   20be2:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   20be4:	bfb8      	it	lt
   20be6:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   20be8:	b005      	add	sp, #20
   20bea:	bd30      	pop	{r4, r5, pc}
   20bec:	0003c651 	.word	0x0003c651

00020bf0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   20bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20bf4:	ed2d 8b02 	vpush	{d8}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   20bf8:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
   20bfc:	b083      	sub	sp, #12
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   20bfe:	f019 0f08 	tst.w	r9, #8
{
   20c02:	4604      	mov	r4, r0
   20c04:	9201      	str	r2, [sp, #4]
	if (processing) {
   20c06:	d01f      	beq.n	20c48 <process_event+0x58>
		if (evt == EVT_COMPLETE) {
   20c08:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   20c0a:	bf0c      	ite	eq
   20c0c:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   20c10:	f049 0920 	orrne.w	r9, r9, #32
   20c14:	f8a0 901c 	strh.w	r9, [r0, #28]
   20c18:	f104 0014 	add.w	r0, r4, #20
   20c1c:	f015 fcde 	bl	365dc <z_spin_unlock_valid>
   20c20:	b940      	cbnz	r0, 20c34 <process_event+0x44>
   20c22:	499b      	ldr	r1, [pc, #620]	; (20e90 <process_event+0x2a0>)
   20c24:	489b      	ldr	r0, [pc, #620]	; (20e94 <process_event+0x2a4>)
   20c26:	22b9      	movs	r2, #185	; 0xb9
   20c28:	f01b ff08 	bl	3ca3c <assert_print>
   20c2c:	21b9      	movs	r1, #185	; 0xb9
   20c2e:	4898      	ldr	r0, [pc, #608]	; (20e90 <process_event+0x2a0>)
   20c30:	f01b fefd 	bl	3ca2e <assert_post_action>
   20c34:	9b01      	ldr	r3, [sp, #4]
   20c36:	f383 8811 	msr	BASEPRI, r3
   20c3a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   20c3e:	b003      	add	sp, #12
   20c40:	ecbd 8b02 	vpop	{d8}
   20c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
   20c48:	4f93      	ldr	r7, [pc, #588]	; (20e98 <process_event+0x2a8>)
   20c4a:	f8df 8248 	ldr.w	r8, [pc, #584]	; 20e94 <process_event+0x2a4>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20c4e:	f8df a240 	ldr.w	sl, [pc, #576]	; 20e90 <process_event+0x2a0>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   20c52:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   20c56:	2902      	cmp	r1, #2
   20c58:	d106      	bne.n	20c68 <process_event+0x78>
			evt = process_recheck(mgr);
   20c5a:	4620      	mov	r0, r4
   20c5c:	f01b fd25 	bl	3c6aa <process_recheck>
		if (evt == EVT_NOP) {
   20c60:	2800      	cmp	r0, #0
   20c62:	d0d9      	beq.n	20c18 <process_event+0x28>
		if (evt == EVT_COMPLETE) {
   20c64:	2801      	cmp	r0, #1
   20c66:	d167      	bne.n	20d38 <process_event+0x148>
			res = mgr->last_res;
   20c68:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   20c6c:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   20c6e:	f1bb 0f00 	cmp.w	fp, #0
   20c72:	da1c      	bge.n	20cae <process_event+0xbe>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   20c74:	2600      	movs	r6, #0
		*clients = mgr->clients;
   20c76:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   20c78:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   20c7c:	e9c4 6600 	strd	r6, r6, [r4]
   20c80:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   20c84:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   20c86:	9600      	str	r6, [sp, #0]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   20c88:	8ba3      	ldrh	r3, [r4, #28]
   20c8a:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   20c8e:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   20c90:	ee08 2a10 	vmov	s16, r2
				   && !sys_slist_is_empty(&mgr->monitors);
   20c94:	d003      	beq.n	20c9e <process_event+0xae>
		if (do_monitors
   20c96:	68a2      	ldr	r2, [r4, #8]
   20c98:	2a00      	cmp	r2, #0
   20c9a:	f040 80ff 	bne.w	20e9c <process_event+0x2ac>
		    || !sys_slist_is_empty(&clients)
   20c9e:	b91d      	cbnz	r5, 20ca8 <process_event+0xb8>
		    || (transit != NULL)) {
   20ca0:	9a00      	ldr	r2, [sp, #0]
   20ca2:	2a00      	cmp	r2, #0
   20ca4:	f000 813f 	beq.w	20f26 <process_event+0x336>
   20ca8:	f04f 0900 	mov.w	r9, #0
   20cac:	e0f8      	b.n	20ea0 <process_event+0x2b0>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   20cae:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   20cb2:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   20cb4:	2901      	cmp	r1, #1
   20cb6:	d821      	bhi.n	20cfc <process_event+0x10c>
	list->head = NULL;
   20cb8:	2100      	movs	r1, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   20cba:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
   20cbe:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   20cc0:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   20cc2:	b29b      	uxth	r3, r3
	list->tail = NULL;
   20cc4:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   20cc8:	d10a      	bne.n	20ce0 <process_event+0xf0>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   20cca:	b13d      	cbz	r5, 20cdc <process_event+0xec>
   20ccc:	4629      	mov	r1, r5
   20cce:	8be2      	ldrh	r2, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   20cd0:	6809      	ldr	r1, [r1, #0]
				mgr->refs += 1U;
   20cd2:	3201      	adds	r2, #1
   20cd4:	b292      	uxth	r2, r2
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   20cd6:	2900      	cmp	r1, #0
   20cd8:	d1fa      	bne.n	20cd0 <process_event+0xe0>
   20cda:	83e2      	strh	r2, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   20cdc:	f043 0302 	orr.w	r3, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
   20ce0:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   20ce2:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   20ce4:	f01b fce1 	bl	3c6aa <process_recheck>
   20ce8:	2800      	cmp	r0, #0
   20cea:	f000 80cc 	beq.w	20e86 <process_event+0x296>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   20cee:	8ba3      	ldrh	r3, [r4, #28]
   20cf0:	f043 0320 	orr.w	r3, r3, #32
   20cf4:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   20cf6:	2300      	movs	r3, #0
   20cf8:	9300      	str	r3, [sp, #0]
   20cfa:	e7c5      	b.n	20c88 <process_event+0x98>
	} else if (state == ONOFF_STATE_TO_OFF) {
   20cfc:	2a04      	cmp	r2, #4
   20cfe:	d10f      	bne.n	20d20 <process_event+0x130>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   20d00:	f023 0307 	bic.w	r3, r3, #7
   20d04:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
   20d06:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   20d08:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   20d0a:	f01b fcce 	bl	3c6aa <process_recheck>
   20d0e:	2800      	cmp	r0, #0
   20d10:	f000 80bb 	beq.w	20e8a <process_event+0x29a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   20d14:	f042 0220 	orr.w	r2, r2, #32
   20d18:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
   20d1a:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   20d1c:	9500      	str	r5, [sp, #0]
   20d1e:	e7b3      	b.n	20c88 <process_event+0x98>
		__ASSERT_NO_MSG(false);
   20d20:	4639      	mov	r1, r7
   20d22:	4640      	mov	r0, r8
   20d24:	f240 121b 	movw	r2, #283	; 0x11b
   20d28:	f01b fe88 	bl	3ca3c <assert_print>
   20d2c:	f240 111b 	movw	r1, #283	; 0x11b
   20d30:	4638      	mov	r0, r7
   20d32:	f01b fe7c 	bl	3ca2e <assert_post_action>
   20d36:	e7f0      	b.n	20d1a <process_event+0x12a>
		} else if (evt == EVT_START) {
   20d38:	2803      	cmp	r0, #3
   20d3a:	d132      	bne.n	20da2 <process_event+0x1b2>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   20d3c:	f1b9 0f00 	cmp.w	r9, #0
   20d40:	d00a      	beq.n	20d58 <process_event+0x168>
   20d42:	4639      	mov	r1, r7
   20d44:	4640      	mov	r0, r8
   20d46:	f44f 72ab 	mov.w	r2, #342	; 0x156
   20d4a:	f01b fe77 	bl	3ca3c <assert_print>
   20d4e:	f44f 71ab 	mov.w	r1, #342	; 0x156
   20d52:	4638      	mov	r0, r7
   20d54:	f01b fe6b 	bl	3ca2e <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   20d58:	6823      	ldr	r3, [r4, #0]
   20d5a:	b953      	cbnz	r3, 20d72 <process_event+0x182>
   20d5c:	4639      	mov	r1, r7
   20d5e:	4640      	mov	r0, r8
   20d60:	f240 1257 	movw	r2, #343	; 0x157
   20d64:	f01b fe6a 	bl	3ca3c <assert_print>
   20d68:	f240 1157 	movw	r1, #343	; 0x157
   20d6c:	4638      	mov	r0, r7
   20d6e:	f01b fe5e 	bl	3ca2e <assert_post_action>
			transit = mgr->transitions->start;
   20d72:	6923      	ldr	r3, [r4, #16]
   20d74:	681b      	ldr	r3, [r3, #0]
   20d76:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
   20d78:	b953      	cbnz	r3, 20d90 <process_event+0x1a0>
   20d7a:	4639      	mov	r1, r7
   20d7c:	4640      	mov	r0, r8
   20d7e:	f44f 72ad 	mov.w	r2, #346	; 0x15a
   20d82:	f01b fe5b 	bl	3ca3c <assert_print>
   20d86:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   20d8a:	4638      	mov	r0, r7
   20d8c:	f01b fe4f 	bl	3ca2e <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   20d90:	8ba3      	ldrh	r3, [r4, #28]
   20d92:	f023 0307 	bic.w	r3, r3, #7
   20d96:	f043 0306 	orr.w	r3, r3, #6
}
   20d9a:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
   20d9c:	83a3      	strh	r3, [r4, #28]
		res = 0;
   20d9e:	46ab      	mov	fp, r5
}
   20da0:	e772      	b.n	20c88 <process_event+0x98>
		} else if (evt == EVT_STOP) {
   20da2:	2804      	cmp	r0, #4
   20da4:	d12f      	bne.n	20e06 <process_event+0x216>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   20da6:	f1b9 0f02 	cmp.w	r9, #2
   20daa:	d00a      	beq.n	20dc2 <process_event+0x1d2>
   20dac:	4639      	mov	r1, r7
   20dae:	4640      	mov	r0, r8
   20db0:	f240 125d 	movw	r2, #349	; 0x15d
   20db4:	f01b fe42 	bl	3ca3c <assert_print>
   20db8:	f240 115d 	movw	r1, #349	; 0x15d
   20dbc:	4638      	mov	r0, r7
   20dbe:	f01b fe36 	bl	3ca2e <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
   20dc2:	8be3      	ldrh	r3, [r4, #30]
   20dc4:	b153      	cbz	r3, 20ddc <process_event+0x1ec>
   20dc6:	4639      	mov	r1, r7
   20dc8:	4640      	mov	r0, r8
   20dca:	f44f 72af 	mov.w	r2, #350	; 0x15e
   20dce:	f01b fe35 	bl	3ca3c <assert_print>
   20dd2:	f44f 71af 	mov.w	r1, #350	; 0x15e
   20dd6:	4638      	mov	r0, r7
   20dd8:	f01b fe29 	bl	3ca2e <assert_post_action>
			transit = mgr->transitions->stop;
   20ddc:	6923      	ldr	r3, [r4, #16]
   20dde:	685b      	ldr	r3, [r3, #4]
   20de0:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
   20de2:	b953      	cbnz	r3, 20dfa <process_event+0x20a>
   20de4:	4639      	mov	r1, r7
   20de6:	4640      	mov	r0, r8
   20de8:	f240 1261 	movw	r2, #353	; 0x161
   20dec:	f01b fe26 	bl	3ca3c <assert_print>
   20df0:	f240 1161 	movw	r1, #353	; 0x161
   20df4:	4638      	mov	r0, r7
   20df6:	f01b fe1a 	bl	3ca2e <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   20dfa:	8ba3      	ldrh	r3, [r4, #28]
   20dfc:	f023 0307 	bic.w	r3, r3, #7
   20e00:	f043 0304 	orr.w	r3, r3, #4
   20e04:	e7c9      	b.n	20d9a <process_event+0x1aa>
		} else if (evt == EVT_RESET) {
   20e06:	2805      	cmp	r0, #5
   20e08:	d12f      	bne.n	20e6a <process_event+0x27a>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   20e0a:	f1b9 0f01 	cmp.w	r9, #1
   20e0e:	d00a      	beq.n	20e26 <process_event+0x236>
   20e10:	4639      	mov	r1, r7
   20e12:	4640      	mov	r0, r8
   20e14:	f44f 72b2 	mov.w	r2, #356	; 0x164
   20e18:	f01b fe10 	bl	3ca3c <assert_print>
   20e1c:	f44f 71b2 	mov.w	r1, #356	; 0x164
   20e20:	4638      	mov	r0, r7
   20e22:	f01b fe04 	bl	3ca2e <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   20e26:	6823      	ldr	r3, [r4, #0]
   20e28:	b953      	cbnz	r3, 20e40 <process_event+0x250>
   20e2a:	4639      	mov	r1, r7
   20e2c:	4640      	mov	r0, r8
   20e2e:	f240 1265 	movw	r2, #357	; 0x165
   20e32:	f01b fe03 	bl	3ca3c <assert_print>
   20e36:	f240 1165 	movw	r1, #357	; 0x165
   20e3a:	4638      	mov	r0, r7
   20e3c:	f01b fdf7 	bl	3ca2e <assert_post_action>
			transit = mgr->transitions->reset;
   20e40:	6923      	ldr	r3, [r4, #16]
   20e42:	689b      	ldr	r3, [r3, #8]
   20e44:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
   20e46:	b953      	cbnz	r3, 20e5e <process_event+0x26e>
   20e48:	4639      	mov	r1, r7
   20e4a:	4640      	mov	r0, r8
   20e4c:	f44f 72b4 	mov.w	r2, #360	; 0x168
   20e50:	f01b fdf4 	bl	3ca3c <assert_print>
   20e54:	f44f 71b4 	mov.w	r1, #360	; 0x168
   20e58:	4638      	mov	r0, r7
   20e5a:	f01b fde8 	bl	3ca2e <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   20e5e:	8ba3      	ldrh	r3, [r4, #28]
   20e60:	f023 0307 	bic.w	r3, r3, #7
   20e64:	f043 0305 	orr.w	r3, r3, #5
   20e68:	e797      	b.n	20d9a <process_event+0x1aa>
			__ASSERT_NO_MSG(false);
   20e6a:	2500      	movs	r5, #0
   20e6c:	f240 126b 	movw	r2, #363	; 0x16b
   20e70:	4639      	mov	r1, r7
   20e72:	4640      	mov	r0, r8
   20e74:	f01b fde2 	bl	3ca3c <assert_print>
   20e78:	f240 116b 	movw	r1, #363	; 0x16b
   20e7c:	4638      	mov	r0, r7
   20e7e:	f01b fdd6 	bl	3ca2e <assert_post_action>
		onoff_transition_fn transit = NULL;
   20e82:	9500      	str	r5, [sp, #0]
   20e84:	e78b      	b.n	20d9e <process_event+0x1ae>
   20e86:	9000      	str	r0, [sp, #0]
   20e88:	e6fe      	b.n	20c88 <process_event+0x98>
   20e8a:	4605      	mov	r5, r0
   20e8c:	e746      	b.n	20d1c <process_event+0x12c>
   20e8e:	bf00      	nop
   20e90:	0004402c 	.word	0x0004402c
   20e94:	00043ff2 	.word	0x00043ff2
   20e98:	0004400a 	.word	0x0004400a
				   && !sys_slist_is_empty(&mgr->monitors);
   20e9c:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   20ea0:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   20ea4:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
   20ea6:	f104 0314 	add.w	r3, r4, #20
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20eaa:	4618      	mov	r0, r3
   20eac:	ee08 3a90 	vmov	s17, r3
   20eb0:	f015 fb94 	bl	365dc <z_spin_unlock_valid>
   20eb4:	b940      	cbnz	r0, 20ec8 <process_event+0x2d8>
   20eb6:	4651      	mov	r1, sl
   20eb8:	4640      	mov	r0, r8
   20eba:	22b9      	movs	r2, #185	; 0xb9
   20ebc:	f01b fdbe 	bl	3ca3c <assert_print>
   20ec0:	21b9      	movs	r1, #185	; 0xb9
   20ec2:	4650      	mov	r0, sl
   20ec4:	f01b fdb3 	bl	3ca2e <assert_post_action>
   20ec8:	9b01      	ldr	r3, [sp, #4]
   20eca:	f383 8811 	msr	BASEPRI, r3
   20ece:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   20ed2:	f1b9 0f00 	cmp.w	r9, #0
   20ed6:	d135      	bne.n	20f44 <process_event+0x354>
	while (!sys_slist_is_empty(list)) {
   20ed8:	2d00      	cmp	r5, #0
   20eda:	d146      	bne.n	20f6a <process_event+0x37a>
			if (transit != NULL) {
   20edc:	9b00      	ldr	r3, [sp, #0]
   20ede:	b113      	cbz	r3, 20ee6 <process_event+0x2f6>
				transit(mgr, transition_complete);
   20ee0:	4620      	mov	r0, r4
   20ee2:	492a      	ldr	r1, [pc, #168]	; (20f8c <process_event+0x39c>)
   20ee4:	4798      	blx	r3
	__asm__ volatile(
   20ee6:	f04f 0320 	mov.w	r3, #32
   20eea:	f3ef 8b11 	mrs	fp, BASEPRI
   20eee:	f383 8812 	msr	BASEPRI_MAX, r3
   20ef2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20ef6:	ee18 0a90 	vmov	r0, s17
	k.key = arch_irq_lock();
   20efa:	f8cd b004 	str.w	fp, [sp, #4]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20efe:	f015 fb5f 	bl	365c0 <z_spin_lock_valid>
   20f02:	b940      	cbnz	r0, 20f16 <process_event+0x326>
   20f04:	4651      	mov	r1, sl
   20f06:	4640      	mov	r0, r8
   20f08:	228e      	movs	r2, #142	; 0x8e
   20f0a:	f01b fd97 	bl	3ca3c <assert_print>
   20f0e:	218e      	movs	r1, #142	; 0x8e
   20f10:	4650      	mov	r0, sl
   20f12:	f01b fd8c 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   20f16:	ee18 0a90 	vmov	r0, s17
   20f1a:	f015 fb6f 	bl	365fc <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   20f1e:	8ba3      	ldrh	r3, [r4, #28]
   20f20:	f023 0308 	bic.w	r3, r3, #8
   20f24:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   20f26:	8ba3      	ldrh	r3, [r4, #28]
   20f28:	06da      	lsls	r2, r3, #27
   20f2a:	d527      	bpl.n	20f7c <process_event+0x38c>
			evt = EVT_COMPLETE;
   20f2c:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   20f2e:	f023 0310 	bic.w	r3, r3, #16
   20f32:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   20f34:	f8b4 901c 	ldrh.w	r9, [r4, #28]
   20f38:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   20f3c:	2900      	cmp	r1, #0
   20f3e:	f47f ae8a 	bne.w	20c56 <process_event+0x66>
out:
   20f42:	e669      	b.n	20c18 <process_event+0x28>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   20f44:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   20f46:	2900      	cmp	r1, #0
   20f48:	d0c6      	beq.n	20ed8 <process_event+0x2e8>
	return node->next;
   20f4a:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
   20f4e:	684b      	ldr	r3, [r1, #4]
   20f50:	ee18 2a10 	vmov	r2, s16
   20f54:	461e      	mov	r6, r3
   20f56:	4620      	mov	r0, r4
   20f58:	465b      	mov	r3, fp
   20f5a:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   20f5c:	f1b9 0f00 	cmp.w	r9, #0
   20f60:	d0ba      	beq.n	20ed8 <process_event+0x2e8>
   20f62:	4649      	mov	r1, r9
   20f64:	f8d9 9000 	ldr.w	r9, [r9]
   20f68:	e7f1      	b.n	20f4e <process_event+0x35e>
   20f6a:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   20f6c:	465b      	mov	r3, fp
   20f6e:	ee18 2a10 	vmov	r2, s16
   20f72:	4620      	mov	r0, r4
   20f74:	682d      	ldr	r5, [r5, #0]
   20f76:	f01b fbb4 	bl	3c6e2 <notify_one>
   20f7a:	e7ad      	b.n	20ed8 <process_event+0x2e8>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   20f7c:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   20f80:	bf1e      	ittt	ne
   20f82:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
   20f86:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   20f88:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
   20f8a:	e7d3      	b.n	20f34 <process_event+0x344>
   20f8c:	00020f91 	.word	0x00020f91

00020f90 <transition_complete>:
{
   20f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20f92:	4604      	mov	r4, r0
   20f94:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   20f96:	f100 0614 	add.w	r6, r0, #20
   20f9a:	f04f 0320 	mov.w	r3, #32
   20f9e:	f3ef 8711 	mrs	r7, BASEPRI
   20fa2:	f383 8812 	msr	BASEPRI_MAX, r3
   20fa6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20faa:	4630      	mov	r0, r6
   20fac:	f015 fb08 	bl	365c0 <z_spin_lock_valid>
   20fb0:	b940      	cbnz	r0, 20fc4 <transition_complete+0x34>
   20fb2:	490a      	ldr	r1, [pc, #40]	; (20fdc <transition_complete+0x4c>)
   20fb4:	480a      	ldr	r0, [pc, #40]	; (20fe0 <transition_complete+0x50>)
   20fb6:	228e      	movs	r2, #142	; 0x8e
   20fb8:	f01b fd40 	bl	3ca3c <assert_print>
   20fbc:	218e      	movs	r1, #142	; 0x8e
   20fbe:	4807      	ldr	r0, [pc, #28]	; (20fdc <transition_complete+0x4c>)
   20fc0:	f01b fd35 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   20fc4:	4630      	mov	r0, r6
   20fc6:	f015 fb19 	bl	365fc <z_spin_lock_set_owner>
	process_event(mgr, EVT_COMPLETE, key);
   20fca:	463a      	mov	r2, r7
   20fcc:	4620      	mov	r0, r4
	mgr->last_res = res;
   20fce:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   20fd0:	2101      	movs	r1, #1
}
   20fd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   20fd6:	f7ff be0b 	b.w	20bf0 <process_event>
   20fda:	bf00      	nop
   20fdc:	0004402c 	.word	0x0004402c
   20fe0:	00043ff2 	.word	0x00043ff2

00020fe4 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   20fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20fe8:	4604      	mov	r4, r0
   20fea:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   20fec:	f01b fb8f 	bl	3c70e <validate_args>

	if (rv < 0) {
   20ff0:	1e05      	subs	r5, r0, #0
   20ff2:	db54      	blt.n	2109e <onoff_request+0xba>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   20ff4:	f104 0914 	add.w	r9, r4, #20
   20ff8:	f04f 0320 	mov.w	r3, #32
   20ffc:	f3ef 8a11 	mrs	sl, BASEPRI
   21000:	f383 8812 	msr	BASEPRI_MAX, r3
   21004:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21008:	4648      	mov	r0, r9
   2100a:	f015 fad9 	bl	365c0 <z_spin_lock_valid>
   2100e:	b940      	cbnz	r0, 21022 <onoff_request+0x3e>
   21010:	4933      	ldr	r1, [pc, #204]	; (210e0 <onoff_request+0xfc>)
   21012:	4834      	ldr	r0, [pc, #208]	; (210e4 <onoff_request+0x100>)
   21014:	228e      	movs	r2, #142	; 0x8e
   21016:	f01b fd11 	bl	3ca3c <assert_print>
   2101a:	218e      	movs	r1, #142	; 0x8e
   2101c:	4830      	ldr	r0, [pc, #192]	; (210e0 <onoff_request+0xfc>)
   2101e:	f01b fd06 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   21022:	4648      	mov	r0, r9
   21024:	f015 faea 	bl	365fc <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   21028:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2102c:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2102e:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
   21030:	428b      	cmp	r3, r1
   21032:	f002 0607 	and.w	r6, r2, #7
   21036:	d04a      	beq.n	210ce <onoff_request+0xea>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   21038:	2e02      	cmp	r6, #2
   2103a:	d11f      	bne.n	2107c <onoff_request+0x98>
	rv = state;
   2103c:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
   2103e:	f04f 0801 	mov.w	r8, #1
		mgr->refs += 1U;
   21042:	3301      	adds	r3, #1
   21044:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21046:	4648      	mov	r0, r9
   21048:	f015 fac8 	bl	365dc <z_spin_unlock_valid>
   2104c:	b940      	cbnz	r0, 21060 <onoff_request+0x7c>
   2104e:	4924      	ldr	r1, [pc, #144]	; (210e0 <onoff_request+0xfc>)
   21050:	4824      	ldr	r0, [pc, #144]	; (210e4 <onoff_request+0x100>)
   21052:	22b9      	movs	r2, #185	; 0xb9
   21054:	f01b fcf2 	bl	3ca3c <assert_print>
   21058:	21b9      	movs	r1, #185	; 0xb9
   2105a:	4821      	ldr	r0, [pc, #132]	; (210e0 <onoff_request+0xfc>)
   2105c:	f01b fce7 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   21060:	f38a 8811 	msr	BASEPRI, sl
   21064:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   21068:	f1b8 0f00 	cmp.w	r8, #0
   2106c:	d017      	beq.n	2109e <onoff_request+0xba>
			notify_one(mgr, cli, state, 0);
   2106e:	2300      	movs	r3, #0
   21070:	4632      	mov	r2, r6
   21072:	4639      	mov	r1, r7
   21074:	4620      	mov	r0, r4
   21076:	f01b fb34 	bl	3c6e2 <notify_one>
   2107a:	e010      	b.n	2109e <onoff_request+0xba>
	} else if ((state == ONOFF_STATE_OFF)
   2107c:	0793      	lsls	r3, r2, #30
   2107e:	d001      	beq.n	21084 <onoff_request+0xa0>
		   || (state == ONOFF_STATE_TO_ON)) {
   21080:	2e06      	cmp	r6, #6
   21082:	d10f      	bne.n	210a4 <onoff_request+0xc0>
	parent->next = child;
   21084:	2300      	movs	r3, #0
   21086:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   21088:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   2108a:	b9eb      	cbnz	r3, 210c8 <onoff_request+0xe4>
	list->head = node;
   2108c:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
   21090:	4635      	mov	r5, r6
   21092:	b9f6      	cbnz	r6, 210d2 <onoff_request+0xee>
		process_event(mgr, EVT_RECHECK, key);
   21094:	4652      	mov	r2, sl
   21096:	2102      	movs	r1, #2
   21098:	4620      	mov	r0, r4
   2109a:	f7ff fda9 	bl	20bf0 <process_event>
		}
	}

	return rv;
}
   2109e:	4628      	mov	r0, r5
   210a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
   210a4:	2e05      	cmp	r6, #5
   210a6:	d017      	beq.n	210d8 <onoff_request+0xf4>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   210a8:	2e01      	cmp	r6, #1
   210aa:	d00a      	beq.n	210c2 <onoff_request+0xde>
   210ac:	490e      	ldr	r1, [pc, #56]	; (210e8 <onoff_request+0x104>)
   210ae:	480d      	ldr	r0, [pc, #52]	; (210e4 <onoff_request+0x100>)
   210b0:	f240 12c9 	movw	r2, #457	; 0x1c9
   210b4:	f01b fcc2 	bl	3ca3c <assert_print>
   210b8:	f240 11c9 	movw	r1, #457	; 0x1c9
   210bc:	480a      	ldr	r0, [pc, #40]	; (210e8 <onoff_request+0x104>)
   210be:	f01b fcb6 	bl	3ca2e <assert_post_action>
		rv = -EIO;
   210c2:	f06f 0504 	mvn.w	r5, #4
   210c6:	e004      	b.n	210d2 <onoff_request+0xee>
	parent->next = child;
   210c8:	601f      	str	r7, [r3, #0]
	list->tail = node;
   210ca:	6067      	str	r7, [r4, #4]
}
   210cc:	e7e0      	b.n	21090 <onoff_request+0xac>
		rv = -EAGAIN;
   210ce:	f06f 050a 	mvn.w	r5, #10
   210d2:	f04f 0800 	mov.w	r8, #0
   210d6:	e7b6      	b.n	21046 <onoff_request+0x62>
		rv = -ENOTSUP;
   210d8:	f06f 0585 	mvn.w	r5, #133	; 0x85
   210dc:	e7f9      	b.n	210d2 <onoff_request+0xee>
   210de:	bf00      	nop
   210e0:	0004402c 	.word	0x0004402c
   210e4:	00043ff2 	.word	0x00043ff2
   210e8:	0004400a 	.word	0x0004400a

000210ec <timeutil_timegm64>:

	return era * 146097 + (time_t)doe - 719468;
}

int64_t timeutil_timegm64(const struct tm *tm)
{
   210ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int64_t y = 1900 + (int64_t)tm->tm_year;
	unsigned int m = tm->tm_mon + 1;
	unsigned int d = tm->tm_mday - 1;
   210f0:	68c3      	ldr	r3, [r0, #12]
	int64_t y = 1900 + (int64_t)tm->tm_year;
   210f2:	6944      	ldr	r4, [r0, #20]
	unsigned int d = tm->tm_mday - 1;
   210f4:	1e5f      	subs	r7, r3, #1
	int64_t y = 1900 + (int64_t)tm->tm_year;
   210f6:	f240 736c 	movw	r3, #1900	; 0x76c
	unsigned int m = tm->tm_mon + 1;
   210fa:	6905      	ldr	r5, [r0, #16]
	int64_t y = 1900 + (int64_t)tm->tm_year;
   210fc:	17e1      	asrs	r1, r4, #31
	unsigned int m = tm->tm_mon + 1;
   210fe:	3501      	adds	r5, #1
	int64_t y = 1900 + (int64_t)tm->tm_year;
   21100:	18e4      	adds	r4, r4, r3
   21102:	f141 0100 	adc.w	r1, r1, #0
	y -= m <= 2;
   21106:	2d02      	cmp	r5, #2
   21108:	bf8c      	ite	hi
   2110a:	2300      	movhi	r3, #0
   2110c:	2301      	movls	r3, #1
   2110e:	1ae4      	subs	r4, r4, r3
   21110:	f161 0100 	sbc.w	r1, r1, #0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   21114:	2900      	cmp	r1, #0
{
   21116:	4680      	mov	r8, r0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   21118:	da55      	bge.n	211c6 <timeutil_timegm64+0xda>
   2111a:	f46f 70c7 	mvn.w	r0, #398	; 0x18e
   2111e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   21122:	2300      	movs	r3, #0
   21124:	1820      	adds	r0, r4, r0
   21126:	f161 0100 	sbc.w	r1, r1, #0
   2112a:	f7fb fe8d 	bl	1ce48 <__aeabi_ldivmod>
	unsigned int yoe = y - era * 400;
   2112e:	4b28      	ldr	r3, [pc, #160]	; (211d0 <timeutil_timegm64+0xe4>)
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   21130:	4602      	mov	r2, r0
	unsigned int yoe = y - era * 400;
   21132:	fb03 4400 	mla	r4, r3, r0, r4
	int64_t ndays = time_days_from_civil(y, m, d);
	int64_t time = tm->tm_sec;

	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   21136:	e9d8 9000 	ldrd	r9, r0, [r8]
   2113a:	233c      	movs	r3, #60	; 0x3c
   2113c:	f8d8 8008 	ldr.w	r8, [r8, #8]
   21140:	17c6      	asrs	r6, r0, #31
   21142:	fbc8 0603 	smlal	r0, r6, r8, r3
   21146:	46b4      	mov	ip, r6
   21148:	fba0 0603 	umull	r0, r6, r0, r3
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   2114c:	2d02      	cmp	r5, #2
   2114e:	bf8c      	ite	hi
   21150:	f06f 0e02 	mvnhi.w	lr, #2
   21154:	f04f 0e09 	movls.w	lr, #9
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   21158:	fb03 660c 	mla	r6, r3, ip, r6
   2115c:	eb10 0c09 	adds.w	ip, r0, r9
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   21160:	f240 106d 	movw	r0, #365	; 0x16d
   21164:	ea4f 0394 	mov.w	r3, r4, lsr #2
   21168:	fb00 3304 	mla	r3, r0, r4, r3
   2116c:	f04f 0064 	mov.w	r0, #100	; 0x64
   21170:	fbb4 f4f0 	udiv	r4, r4, r0
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   21174:	eb05 000e 	add.w	r0, r5, lr
   21178:	f04f 0599 	mov.w	r5, #153	; 0x99
   2117c:	fb05 f000 	mul.w	r0, r5, r0
   21180:	f04f 0505 	mov.w	r5, #5
   21184:	f100 0002 	add.w	r0, r0, #2
   21188:	fbb0 f0f5 	udiv	r0, r0, r5
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   2118c:	443b      	add	r3, r7
   2118e:	eba3 0304 	sub.w	r3, r3, r4
	return era * 146097 + (time_t)doe - 719468;
   21192:	4c10      	ldr	r4, [pc, #64]	; (211d4 <timeutil_timegm64+0xe8>)
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   21194:	4403      	add	r3, r0
	return era * 146097 + (time_t)doe - 719468;
   21196:	fba2 0204 	umull	r0, r2, r2, r4
   2119a:	fb04 2101 	mla	r1, r4, r1, r2
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   2119e:	eb46 76e9 	adc.w	r6, r6, r9, asr #31
	return era * 146097 + (time_t)doe - 719468;
   211a2:	181b      	adds	r3, r3, r0
   211a4:	480c      	ldr	r0, [pc, #48]	; (211d8 <timeutil_timegm64+0xec>)
	time += 86400LL * ndays;
   211a6:	4a0d      	ldr	r2, [pc, #52]	; (211dc <timeutil_timegm64+0xf0>)
	return era * 146097 + (time_t)doe - 719468;
   211a8:	f141 0100 	adc.w	r1, r1, #0
   211ac:	181b      	adds	r3, r3, r0
	time += 86400LL * ndays;
   211ae:	fba3 0302 	umull	r0, r3, r3, r2
	return era * 146097 + (time_t)doe - 719468;
   211b2:	f161 0100 	sbc.w	r1, r1, #0
	time += 86400LL * ndays;
   211b6:	fb02 3101 	mla	r1, r2, r1, r3
   211ba:	eb10 000c 	adds.w	r0, r0, ip

	return time;
}
   211be:	eb41 0106 	adc.w	r1, r1, r6
   211c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   211c6:	f44f 72c8 	mov.w	r2, #400	; 0x190
   211ca:	2300      	movs	r3, #0
   211cc:	4620      	mov	r0, r4
   211ce:	e7ac      	b.n	2112a <timeutil_timegm64+0x3e>
   211d0:	fffffe70 	.word	0xfffffe70
   211d4:	00023ab1 	.word	0x00023ab1
   211d8:	fff50594 	.word	0xfff50594
   211dc:	00015180 	.word	0x00015180

000211e0 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   211e0:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
   211e2:	b379      	cbz	r1, 21244 <sys_heap_free+0x64>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   211e4:	6805      	ldr	r5, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   211e6:	1f0c      	subs	r4, r1, #4
   211e8:	1b64      	subs	r4, r4, r5
   211ea:	08e6      	lsrs	r6, r4, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   211ec:	f024 0407 	bic.w	r4, r4, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   211f0:	442c      	add	r4, r5
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   211f2:	8863      	ldrh	r3, [r4, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   211f4:	07db      	lsls	r3, r3, #31
   211f6:	d408      	bmi.n	2120a <sys_heap_free+0x2a>
   211f8:	4913      	ldr	r1, [pc, #76]	; (21248 <sys_heap_free+0x68>)
   211fa:	4814      	ldr	r0, [pc, #80]	; (2124c <sys_heap_free+0x6c>)
   211fc:	22ac      	movs	r2, #172	; 0xac
   211fe:	f01b fc1d 	bl	3ca3c <assert_print>
   21202:	21ac      	movs	r1, #172	; 0xac
   21204:	4810      	ldr	r0, [pc, #64]	; (21248 <sys_heap_free+0x68>)
   21206:	f01b fc12 	bl	3ca2e <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   2120a:	4631      	mov	r1, r6
   2120c:	4628      	mov	r0, r5
   2120e:	f01b faaa 	bl	3c766 <chunk_size>
   21212:	4430      	add	r0, r6
		return ((uint16_t *)cmem)[f];
   21214:	f835 3030 	ldrh.w	r3, [r5, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   21218:	1ac0      	subs	r0, r0, r3
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   2121a:	4286      	cmp	r6, r0
   2121c:	d008      	beq.n	21230 <sys_heap_free+0x50>
   2121e:	490a      	ldr	r1, [pc, #40]	; (21248 <sys_heap_free+0x68>)
   21220:	480a      	ldr	r0, [pc, #40]	; (2124c <sys_heap_free+0x6c>)
   21222:	22b4      	movs	r2, #180	; 0xb4
   21224:	f01b fc0a 	bl	3ca3c <assert_print>
   21228:	21b4      	movs	r1, #180	; 0xb4
   2122a:	4807      	ldr	r0, [pc, #28]	; (21248 <sys_heap_free+0x68>)
   2122c:	f01b fbff 	bl	3ca2e <assert_post_action>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   21230:	8863      	ldrh	r3, [r4, #2]
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
   21232:	4631      	mov	r1, r6
   21234:	f023 0301 	bic.w	r3, r3, #1
   21238:	4628      	mov	r0, r5
   2123a:	8063      	strh	r3, [r4, #2]
}
   2123c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
   21240:	f01b bb50 	b.w	3c8e4 <free_chunk>
}
   21244:	bd70      	pop	{r4, r5, r6, pc}
   21246:	bf00      	nop
   21248:	00044059 	.word	0x00044059
   2124c:	00043ff2 	.word	0x00043ff2

00021250 <sys_heap_aligned_alloc>:
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   21250:	424b      	negs	r3, r1
{
   21252:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rew = align & -align;
   21256:	ea03 0701 	and.w	r7, r3, r1
	if (align != rew) {
   2125a:	ea31 0303 	bics.w	r3, r1, r3
{
   2125e:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   21260:	6806      	ldr	r6, [r0, #0]
	if (align != rew) {
   21262:	d01b      	beq.n	2129c <sys_heap_aligned_alloc+0x4c>
		return false;
   21264:	2f04      	cmp	r7, #4
   21266:	463d      	mov	r5, r7
   21268:	bf28      	it	cs
   2126a:	2504      	movcs	r5, #4
   2126c:	46b9      	mov	r9, r7
		align -= rew;
   2126e:	1bcf      	subs	r7, r1, r7
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   21270:	f107 3aff 	add.w	sl, r7, #4294967295
   21274:	ea1a 0f07 	tst.w	sl, r7
   21278:	d00a      	beq.n	21290 <sys_heap_aligned_alloc+0x40>
   2127a:	4932      	ldr	r1, [pc, #200]	; (21344 <sys_heap_aligned_alloc+0xf4>)
   2127c:	4832      	ldr	r0, [pc, #200]	; (21348 <sys_heap_aligned_alloc+0xf8>)
   2127e:	f44f 72a0 	mov.w	r2, #320	; 0x140
   21282:	f01b fbdb 	bl	3ca3c <assert_print>
   21286:	f44f 71a0 	mov.w	r1, #320	; 0x140
   2128a:	482e      	ldr	r0, [pc, #184]	; (21344 <sys_heap_aligned_alloc+0xf4>)
   2128c:	f01b fbcf 	bl	3ca2e <assert_post_action>

	if (bytes == 0 || size_too_big(h, bytes)) {
   21290:	b97c      	cbnz	r4, 212b2 <sys_heap_aligned_alloc+0x62>
		return NULL;
   21292:	f04f 0900 	mov.w	r9, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   21296:	4648      	mov	r0, r9
   21298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (align <= chunk_header_bytes(h)) {
   2129c:	2904      	cmp	r1, #4
   2129e:	d804      	bhi.n	212aa <sys_heap_aligned_alloc+0x5a>
}
   212a0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return sys_heap_alloc(heap, bytes);
   212a4:	4611      	mov	r1, r2
   212a6:	f01b bb4f 	b.w	3c948 <sys_heap_alloc>
		rew = 0;
   212aa:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   212ae:	2504      	movs	r5, #4
   212b0:	e7de      	b.n	21270 <sys_heap_aligned_alloc+0x20>
	if (bytes == 0 || size_too_big(h, bytes)) {
   212b2:	68b3      	ldr	r3, [r6, #8]
   212b4:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   212b8:	d9eb      	bls.n	21292 <sys_heap_aligned_alloc+0x42>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   212ba:	f104 010b 	add.w	r1, r4, #11
   212be:	4439      	add	r1, r7
   212c0:	1b49      	subs	r1, r1, r5
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   212c2:	4630      	mov	r0, r6
   212c4:	08c9      	lsrs	r1, r1, #3
   212c6:	f01b faa6 	bl	3c816 <alloc_chunk>
	if (c0 == 0) {
   212ca:	4680      	mov	r8, r0
   212cc:	2800      	cmp	r0, #0
   212ce:	d0e0      	beq.n	21292 <sys_heap_aligned_alloc+0x42>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   212d0:	f109 0504 	add.w	r5, r9, #4
   212d4:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   212d8:	4435      	add	r5, r6
   212da:	4455      	add	r5, sl
   212dc:	427f      	negs	r7, r7
   212de:	402f      	ands	r7, r5
   212e0:	eba7 0909 	sub.w	r9, r7, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   212e4:	444c      	add	r4, r9
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   212e6:	f1a9 0304 	sub.w	r3, r9, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   212ea:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   212ec:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   212ee:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   212f2:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   212f4:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   212f8:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   212fc:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   21300:	d208      	bcs.n	21314 <sys_heap_aligned_alloc+0xc4>
		split_chunks(h, c0, c);
   21302:	4601      	mov	r1, r0
   21304:	463a      	mov	r2, r7
   21306:	4630      	mov	r0, r6
   21308:	f01b fad2 	bl	3c8b0 <split_chunks>
		free_list_add(h, c0);
   2130c:	4641      	mov	r1, r8
   2130e:	4630      	mov	r0, r6
   21310:	f01b fa2e 	bl	3c770 <free_list_add>
	return c + chunk_size(h, c);
   21314:	4639      	mov	r1, r7
   21316:	4630      	mov	r0, r6
   21318:	f01b fa25 	bl	3c766 <chunk_size>
   2131c:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   2131e:	4284      	cmp	r4, r0
   21320:	d208      	bcs.n	21334 <sys_heap_aligned_alloc+0xe4>
		split_chunks(h, c, c_end);
   21322:	4639      	mov	r1, r7
   21324:	4630      	mov	r0, r6
   21326:	4622      	mov	r2, r4
   21328:	f01b fac2 	bl	3c8b0 <split_chunks>
		free_list_add(h, c_end);
   2132c:	4621      	mov	r1, r4
   2132e:	4630      	mov	r0, r6
   21330:	f01b fa1e 	bl	3c770 <free_list_add>
	void *cmem = &buf[c];
   21334:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   21338:	8873      	ldrh	r3, [r6, #2]
   2133a:	f043 0301 	orr.w	r3, r3, #1
   2133e:	8073      	strh	r3, [r6, #2]
   21340:	e7a9      	b.n	21296 <sys_heap_aligned_alloc+0x46>
   21342:	bf00      	nop
   21344:	00044059 	.word	0x00044059
   21348:	00043ff2 	.word	0x00043ff2

0002134c <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   2134c:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
   21350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21354:	4680      	mov	r8, r0
   21356:	460c      	mov	r4, r1
   21358:	4616      	mov	r6, r2
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   2135a:	d35f      	bcc.n	2141c <sys_heap_init+0xd0>
   2135c:	4936      	ldr	r1, [pc, #216]	; (21438 <sys_heap_init+0xec>)
   2135e:	f240 12e3 	movw	r2, #483	; 0x1e3
   21362:	4836      	ldr	r0, [pc, #216]	; (2143c <sys_heap_init+0xf0>)
   21364:	f01b fb6a 	bl	3ca3c <assert_print>
   21368:	f240 11e3 	movw	r1, #483	; 0x1e3
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   2136c:	4832      	ldr	r0, [pc, #200]	; (21438 <sys_heap_init+0xec>)
   2136e:	f01b fb5e 	bl	3ca2e <assert_post_action>
	bytes -= heap_footer_bytes(bytes);
   21372:	3e04      	subs	r6, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   21374:	1de5      	adds	r5, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   21376:	4426      	add	r6, r4
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   21378:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   2137c:	f026 0607 	bic.w	r6, r6, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   21380:	1b76      	subs	r6, r6, r5

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   21382:	2e17      	cmp	r6, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   21384:	ea4f 07d6 	mov.w	r7, r6, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   21388:	d80a      	bhi.n	213a0 <sys_heap_init+0x54>
   2138a:	492b      	ldr	r1, [pc, #172]	; (21438 <sys_heap_init+0xec>)
   2138c:	482b      	ldr	r0, [pc, #172]	; (2143c <sys_heap_init+0xf0>)
   2138e:	f240 12f3 	movw	r2, #499	; 0x1f3
   21392:	f01b fb53 	bl	3ca3c <assert_print>
   21396:	f240 11f3 	movw	r1, #499	; 0x1f3
   2139a:	4827      	ldr	r0, [pc, #156]	; (21438 <sys_heap_init+0xec>)
   2139c:	f01b fb47 	bl	3ca2e <assert_post_action>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   213a0:	fab7 f487 	clz	r4, r7

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   213a4:	2300      	movs	r3, #0
	heap->heap = h;
   213a6:	f8c8 5000 	str.w	r5, [r8]
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   213aa:	f1c4 0820 	rsb	r8, r4, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   213ae:	f1c4 0424 	rsb	r4, r4, #36	; 0x24
   213b2:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   213b4:	3407      	adds	r4, #7
   213b6:	08e4      	lsrs	r4, r4, #3
	h->avail_buckets = 0;
   213b8:	60eb      	str	r3, [r5, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   213ba:	1c63      	adds	r3, r4, #1
   213bc:	42bb      	cmp	r3, r7
	h->end_chunk = heap_sz;
   213be:	60af      	str	r7, [r5, #8]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   213c0:	d90a      	bls.n	213d8 <sys_heap_init+0x8c>
   213c2:	491d      	ldr	r1, [pc, #116]	; (21438 <sys_heap_init+0xec>)
   213c4:	481d      	ldr	r0, [pc, #116]	; (2143c <sys_heap_init+0xf0>)
   213c6:	f44f 7201 	mov.w	r2, #516	; 0x204
   213ca:	f01b fb37 	bl	3ca3c <assert_print>
   213ce:	f44f 7101 	mov.w	r1, #516	; 0x204
   213d2:	4819      	ldr	r0, [pc, #100]	; (21438 <sys_heap_init+0xec>)
   213d4:	f01b fb2b 	bl	3ca2e <assert_post_action>
   213d8:	2200      	movs	r2, #0
   213da:	f105 0310 	add.w	r3, r5, #16
   213de:	eb03 0888 	add.w	r8, r3, r8, lsl #2

	for (int i = 0; i < nb_buckets; i++) {
   213e2:	4598      	cmp	r8, r3
   213e4:	d125      	bne.n	21432 <sys_heap_init+0xe6>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   213e6:	0063      	lsls	r3, r4, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   213e8:	f043 0301 	orr.w	r3, r3, #1
   213ec:	806b      	strh	r3, [r5, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   213ee:	1b3b      	subs	r3, r7, r4
		((uint16_t *)cmem)[f] = val;
   213f0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   213f4:	0058      	lsls	r0, r3, #1
		((uint16_t *)cmem)[f] = val;
   213f6:	802a      	strh	r2, [r5, #0]
   213f8:	8048      	strh	r0, [r1, #2]
   213fa:	19a9      	adds	r1, r5, r6
   213fc:	f825 4034 	strh.w	r4, [r5, r4, lsl #3]
   21400:	804a      	strh	r2, [r1, #2]
   21402:	53ab      	strh	r3, [r5, r6]
	void *cmem = &buf[c];
   21404:	eb05 03c7 	add.w	r3, r5, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   21408:	885a      	ldrh	r2, [r3, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   2140a:	4621      	mov	r1, r4
   2140c:	f042 0201 	orr.w	r2, r2, #1
   21410:	4628      	mov	r0, r5
}
   21412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21416:	805a      	strh	r2, [r3, #2]
	free_list_add(h, chunk0_size);
   21418:	f01b b9aa 	b.w	3c770 <free_list_add>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   2141c:	2a04      	cmp	r2, #4
   2141e:	d8a8      	bhi.n	21372 <sys_heap_init+0x26>
   21420:	4905      	ldr	r1, [pc, #20]	; (21438 <sys_heap_init+0xec>)
   21422:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
   21426:	4805      	ldr	r0, [pc, #20]	; (2143c <sys_heap_init+0xf0>)
   21428:	f01b fb08 	bl	3ca3c <assert_print>
   2142c:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
   21430:	e79c      	b.n	2136c <sys_heap_init+0x20>
		h->buckets[i].next = 0;
   21432:	f843 2b04 	str.w	r2, [r3], #4
	for (int i = 0; i < nb_buckets; i++) {
   21436:	e7d4      	b.n	213e2 <sys_heap_init+0x96>
   21438:	00044059 	.word	0x00044059
   2143c:	00043ff2 	.word	0x00043ff2

00021440 <extract_decimal>:
{
   21440:	b5f0      	push	{r4, r5, r6, r7, lr}
   21442:	4602      	mov	r2, r0
   21444:	6801      	ldr	r1, [r0, #0]
		val = 10U * val + *sp++ - '0';
   21446:	270a      	movs	r7, #10
	size_t val = 0;
   21448:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   2144a:	4e07      	ldr	r6, [pc, #28]	; (21468 <extract_decimal+0x28>)
   2144c:	460c      	mov	r4, r1
   2144e:	7823      	ldrb	r3, [r4, #0]
   21450:	3101      	adds	r1, #1
   21452:	5d9d      	ldrb	r5, [r3, r6]
   21454:	076d      	lsls	r5, r5, #29
   21456:	d401      	bmi.n	2145c <extract_decimal+0x1c>
	*str = sp;
   21458:	6014      	str	r4, [r2, #0]
}
   2145a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
   2145c:	fb07 3300 	mla	r3, r7, r0, r3
   21460:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   21464:	e7f2      	b.n	2144c <extract_decimal+0xc>
   21466:	bf00      	nop
   21468:	0004bc8c 	.word	0x0004bc8c

0002146c <encode_uint>:
{
   2146c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21470:	4615      	mov	r5, r2
   21472:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   21474:	78d3      	ldrb	r3, [r2, #3]
   21476:	4a22      	ldr	r2, [pc, #136]	; (21500 <encode_uint+0x94>)
	switch (specifier) {
   21478:	2b6f      	cmp	r3, #111	; 0x6f
   2147a:	f813 b002 	ldrb.w	fp, [r3, r2]
{
   2147e:	4680      	mov	r8, r0
   21480:	460f      	mov	r7, r1
   21482:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
   21486:	d029      	beq.n	214dc <encode_uint+0x70>
   21488:	d824      	bhi.n	214d4 <encode_uint+0x68>
		return 16;
   2148a:	2b58      	cmp	r3, #88	; 0x58
   2148c:	bf14      	ite	ne
   2148e:	260a      	movne	r6, #10
   21490:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   21492:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   21496:	4632      	mov	r2, r6
   21498:	2300      	movs	r3, #0
   2149a:	4640      	mov	r0, r8
   2149c:	4639      	mov	r1, r7
   2149e:	f7fb fd23 	bl	1cee8 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   214a2:	2a09      	cmp	r2, #9
   214a4:	b2d4      	uxtb	r4, r2
   214a6:	d81e      	bhi.n	214e6 <encode_uint+0x7a>
   214a8:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   214aa:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   214ac:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   214ae:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   214b2:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   214b6:	d301      	bcc.n	214bc <encode_uint+0x50>
   214b8:	45d1      	cmp	r9, sl
   214ba:	d811      	bhi.n	214e0 <encode_uint+0x74>
	if (conv->flag_hash) {
   214bc:	782b      	ldrb	r3, [r5, #0]
   214be:	069b      	lsls	r3, r3, #26
   214c0:	d505      	bpl.n	214ce <encode_uint+0x62>
		if (radix == 8) {
   214c2:	2e08      	cmp	r6, #8
   214c4:	d115      	bne.n	214f2 <encode_uint+0x86>
			conv->altform_0 = true;
   214c6:	78ab      	ldrb	r3, [r5, #2]
   214c8:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   214cc:	70ab      	strb	r3, [r5, #2]
}
   214ce:	4648      	mov	r0, r9
   214d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   214d4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   214d8:	2b70      	cmp	r3, #112	; 0x70
   214da:	e7d7      	b.n	2148c <encode_uint+0x20>
	switch (specifier) {
   214dc:	2608      	movs	r6, #8
   214de:	e7d8      	b.n	21492 <encode_uint+0x26>
		value /= radix;
   214e0:	4680      	mov	r8, r0
   214e2:	460f      	mov	r7, r1
   214e4:	e7d7      	b.n	21496 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   214e6:	f1bb 0f01 	cmp.w	fp, #1
   214ea:	bf0c      	ite	eq
   214ec:	3437      	addeq	r4, #55	; 0x37
   214ee:	3457      	addne	r4, #87	; 0x57
   214f0:	e7db      	b.n	214aa <encode_uint+0x3e>
		} else if (radix == 16) {
   214f2:	2e10      	cmp	r6, #16
   214f4:	d1eb      	bne.n	214ce <encode_uint+0x62>
			conv->altform_0c = true;
   214f6:	78ab      	ldrb	r3, [r5, #2]
   214f8:	f043 0310 	orr.w	r3, r3, #16
   214fc:	e7e6      	b.n	214cc <encode_uint+0x60>
   214fe:	bf00      	nop
   21500:	0004bc8c 	.word	0x0004bc8c

00021504 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   21504:	b508      	push	{r3, lr}
	__asm__ volatile(
   21506:	f04f 0220 	mov.w	r2, #32
   2150a:	f3ef 8311 	mrs	r3, BASEPRI
   2150e:	f382 8812 	msr	BASEPRI_MAX, r2
   21512:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   21516:	f001 ff19 	bl	2334c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   2151a:	4803      	ldr	r0, [pc, #12]	; (21528 <sys_reboot+0x24>)
   2151c:	f01b f8ab 	bl	3c676 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   21520:	f001 fa8a 	bl	22a38 <arch_cpu_idle>
   21524:	e7fc      	b.n	21520 <sys_reboot+0x1c>
   21526:	bf00      	nop
   21528:	00044080 	.word	0x00044080

0002152c <nordicsemi_nrf91_init>:
   2152c:	f04f 0220 	mov.w	r2, #32
   21530:	f3ef 8311 	mrs	r3, BASEPRI
   21534:	f382 8812 	msr	BASEPRI_MAX, r2
   21538:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   2153c:	2101      	movs	r1, #1
   2153e:	4a04      	ldr	r2, [pc, #16]	; (21550 <nordicsemi_nrf91_init+0x24>)
   21540:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   21544:	f383 8811 	msr	BASEPRI, r3
   21548:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   2154c:	2000      	movs	r0, #0
   2154e:	4770      	bx	lr
   21550:	40039000 	.word	0x40039000

00021554 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   21554:	b120      	cbz	r0, 21560 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   21556:	4b03      	ldr	r3, [pc, #12]	; (21564 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   21558:	0180      	lsls	r0, r0, #6
   2155a:	f043 0301 	orr.w	r3, r3, #1
   2155e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   21560:	4770      	bx	lr
   21562:	bf00      	nop
   21564:	00042820 	.word	0x00042820

00021568 <z_log_minimal_hexdump_print>:
	}
	printk("\n");
}

void z_log_minimal_hexdump_print(int level, const void *data, size_t size)
{
   21568:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2156c:	4607      	mov	r7, r0
   2156e:	4688      	mov	r8, r1
   21570:	4616      	mov	r6, r2
	const char *data_buffer = (const char *)data;
	while (size > 0U) {
   21572:	4614      	mov	r4, r2
   21574:	eb08 0506 	add.w	r5, r8, r6
   21578:	1b2d      	subs	r5, r5, r4
   2157a:	b90c      	cbnz	r4, 21580 <z_log_minimal_hexdump_print+0x18>
		}

		size -= HEXDUMP_BYTES_IN_LINE;
		data_buffer += HEXDUMP_BYTES_IN_LINE;
	}
}
   2157c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	z_log_minimal_printk("\n"); \
} while (false)

static inline char z_log_minimal_level_to_char(int level)
{
	switch (level) {
   21580:	1e7b      	subs	r3, r7, #1
   21582:	2b03      	cmp	r3, #3
   21584:	bf96      	itet	ls
   21586:	4a21      	ldrls	r2, [pc, #132]	; (2160c <z_log_minimal_hexdump_print+0xa4>)
   21588:	213f      	movhi	r1, #63	; 0x3f
   2158a:	5cd1      	ldrbls	r1, [r2, r3]
		printk("%c: ", z_log_minimal_level_to_char(level));
   2158c:	4820      	ldr	r0, [pc, #128]	; (21610 <z_log_minimal_hexdump_print+0xa8>)
   2158e:	f01b f872 	bl	3c676 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   21592:	f04f 0900 	mov.w	r9, #0
			printk("   ");
   21596:	f8df a088 	ldr.w	sl, [pc, #136]	; 21620 <z_log_minimal_hexdump_print+0xb8>
			printk("%02x ", (unsigned char)data[i] & 0xFFu);
   2159a:	f8df b088 	ldr.w	fp, [pc, #136]	; 21624 <z_log_minimal_hexdump_print+0xbc>
		if (i < length) {
   2159e:	454c      	cmp	r4, r9
   215a0:	d92b      	bls.n	215fa <z_log_minimal_hexdump_print+0x92>
			printk("%02x ", (unsigned char)data[i] & 0xFFu);
   215a2:	4658      	mov	r0, fp
   215a4:	f815 1009 	ldrb.w	r1, [r5, r9]
   215a8:	f01b f865 	bl	3c676 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   215ac:	f109 0901 	add.w	r9, r9, #1
   215b0:	f1b9 0f08 	cmp.w	r9, #8
   215b4:	d1f3      	bne.n	2159e <z_log_minimal_hexdump_print+0x36>
	printk("|");
   215b6:	4817      	ldr	r0, [pc, #92]	; (21614 <z_log_minimal_hexdump_print+0xac>)
   215b8:	f01b f85d 	bl	3c676 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   215bc:	f04f 0900 	mov.w	r9, #0
			printk(" ");
   215c0:	f8df a064 	ldr.w	sl, [pc, #100]	; 21628 <z_log_minimal_hexdump_print+0xc0>
			printk("%c", isprint((int)c) != 0 ? c : '.');
   215c4:	f8df b064 	ldr.w	fp, [pc, #100]	; 2162c <z_log_minimal_hexdump_print+0xc4>
		if (i < length) {
   215c8:	454c      	cmp	r4, r9
   215ca:	d91a      	bls.n	21602 <z_log_minimal_hexdump_print+0x9a>
			unsigned char c = data[i];
   215cc:	f815 1009 	ldrb.w	r1, [r5, r9]
			printk("%c", isprint((int)c) != 0 ? c : '.');
   215d0:	4b11      	ldr	r3, [pc, #68]	; (21618 <z_log_minimal_hexdump_print+0xb0>)
   215d2:	4658      	mov	r0, fp
   215d4:	5cca      	ldrb	r2, [r1, r3]
   215d6:	f012 0f97 	tst.w	r2, #151	; 0x97
   215da:	bf08      	it	eq
   215dc:	212e      	moveq	r1, #46	; 0x2e
   215de:	f01b f84a 	bl	3c676 <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   215e2:	f109 0901 	add.w	r9, r9, #1
   215e6:	f1b9 0f08 	cmp.w	r9, #8
   215ea:	d1ed      	bne.n	215c8 <z_log_minimal_hexdump_print+0x60>
	printk("\n");
   215ec:	480b      	ldr	r0, [pc, #44]	; (2161c <z_log_minimal_hexdump_print+0xb4>)
   215ee:	f01b f842 	bl	3c676 <printk>
		if (size < HEXDUMP_BYTES_IN_LINE) {
   215f2:	2c07      	cmp	r4, #7
   215f4:	d9c2      	bls.n	2157c <z_log_minimal_hexdump_print+0x14>
		size -= HEXDUMP_BYTES_IN_LINE;
   215f6:	3c08      	subs	r4, #8
		data_buffer += HEXDUMP_BYTES_IN_LINE;
   215f8:	e7bc      	b.n	21574 <z_log_minimal_hexdump_print+0xc>
			printk("   ");
   215fa:	4650      	mov	r0, sl
   215fc:	f01b f83b 	bl	3c676 <printk>
   21600:	e7d4      	b.n	215ac <z_log_minimal_hexdump_print+0x44>
			printk(" ");
   21602:	4650      	mov	r0, sl
   21604:	f01b f837 	bl	3c676 <printk>
   21608:	e7eb      	b.n	215e2 <z_log_minimal_hexdump_print+0x7a>
   2160a:	bf00      	nop
   2160c:	000440be 	.word	0x000440be
   21610:	000440ad 	.word	0x000440ad
   21614:	000440bc 	.word	0x000440bc
   21618:	0004bc8c 	.word	0x0004bc8c
   2161c:	0004517b 	.word	0x0004517b
   21620:	000440b8 	.word	0x000440b8
   21624:	000440b2 	.word	0x000440b2
   21628:	000440ba 	.word	0x000440ba
   2162c:	000456f8 	.word	0x000456f8

00021630 <fcb_append>:
	return 0;
}

int
fcb_append(struct fcb *fcb, uint16_t len, struct fcb_entry *append_loc)
{
   21630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21634:	b085      	sub	sp, #20
   21636:	460e      	mov	r6, r1
   21638:	4691      	mov	r9, r2
	struct fcb_entry *active;
	int cnt;
	int rc;
	uint8_t tmp_str[8];

	cnt = fcb_put_len(fcb, tmp_str, len);
   2163a:	460a      	mov	r2, r1
   2163c:	a902      	add	r1, sp, #8
{
   2163e:	4604      	mov	r4, r0
	cnt = fcb_put_len(fcb, tmp_str, len);
   21640:	f01b fae3 	bl	3cc0a <fcb_put_len>
	if (cnt < 0) {
   21644:	1e05      	subs	r5, r0, #0
   21646:	db73      	blt.n	21730 <fcb_append+0x100>
		return cnt;
	}
	cnt = fcb_len_in_flash(fcb, cnt);
   21648:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
   2164c:	b2a9      	uxth	r1, r5
   2164e:	4610      	mov	r0, r2
   21650:	f01b fa3b 	bl	3caca <fcb_len_in_flash.isra.0>
	len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   21654:	4631      	mov	r1, r6
	cnt = fcb_len_in_flash(fcb, cnt);
   21656:	4607      	mov	r7, r0
	len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   21658:	4610      	mov	r0, r2
   2165a:	f01b fa36 	bl	3caca <fcb_len_in_flash.isra.0>
   2165e:	2101      	movs	r1, #1
   21660:	4606      	mov	r6, r0
   21662:	4610      	mov	r0, r2
   21664:	f01b fa31 	bl	3caca <fcb_len_in_flash.isra.0>

	__ASSERT_NO_MSG(cnt <= sizeof(tmp_str));
   21668:	2f08      	cmp	r7, #8
	len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   2166a:	4430      	add	r0, r6
   2166c:	b286      	uxth	r6, r0
	__ASSERT_NO_MSG(cnt <= sizeof(tmp_str));
   2166e:	d908      	bls.n	21682 <fcb_append+0x52>
   21670:	4937      	ldr	r1, [pc, #220]	; (21750 <fcb_append+0x120>)
   21672:	4838      	ldr	r0, [pc, #224]	; (21754 <fcb_append+0x124>)
   21674:	224b      	movs	r2, #75	; 0x4b
   21676:	f01b f9e1 	bl	3ca3c <assert_print>
   2167a:	214b      	movs	r1, #75	; 0x4b
   2167c:	4834      	ldr	r0, [pc, #208]	; (21750 <fcb_append+0x120>)
   2167e:	f01b f9d6 	bl	3ca2e <assert_post_action>

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   21682:	f104 0a0c 	add.w	sl, r4, #12
	return z_impl_k_mutex_lock(mutex, timeout);
   21686:	f04f 32ff 	mov.w	r2, #4294967295
   2168a:	f04f 33ff 	mov.w	r3, #4294967295
   2168e:	4650      	mov	r0, sl
   21690:	f015 f910 	bl	368b4 <z_impl_k_mutex_lock>
	if (rc) {
   21694:	4605      	mov	r5, r0
   21696:	2800      	cmp	r0, #0
   21698:	d156      	bne.n	21748 <fcb_append+0x118>
		return -EINVAL;
	}
	active = &fcb->f_active;
	if (active->fe_elem_off + len + cnt > active->fe_sector->fs_size) {
   2169a:	e9d4 1309 	ldrd	r1, r3, [r4, #36]	; 0x24
   2169e:	684a      	ldr	r2, [r1, #4]
   216a0:	443b      	add	r3, r7
   216a2:	4433      	add	r3, r6
   216a4:	4293      	cmp	r3, r2
   216a6:	d92b      	bls.n	21700 <fcb_append+0xd0>
	prev = NULL;
   216a8:	4680      	mov	r8, r0
		sector = fcb_new_sector(fcb, fcb->f_scratch_cnt);
   216aa:	f894 b006 	ldrb.w	fp, [r4, #6]
		cur = fcb_getnext_sector(fcb, cur);
   216ae:	4620      	mov	r0, r4
   216b0:	f01b fc5e 	bl	3cf70 <fcb_getnext_sector>
		if (cur == fcb->f_oldest) {
   216b4:	6a23      	ldr	r3, [r4, #32]
		cur = fcb_getnext_sector(fcb, cur);
   216b6:	f1b8 0f00 	cmp.w	r8, #0
   216ba:	bf08      	it	eq
   216bc:	4680      	moveq	r8, r0
		if (cur == fcb->f_oldest) {
   216be:	4298      	cmp	r0, r3
		cur = fcb_getnext_sector(fcb, cur);
   216c0:	4601      	mov	r1, r0
		if (cur == fcb->f_oldest) {
   216c2:	d03b      	beq.n	2173c <fcb_append+0x10c>
	} while (i++ < cnt);
   216c4:	45ab      	cmp	fp, r5
   216c6:	f105 0301 	add.w	r3, r5, #1
   216ca:	dc35      	bgt.n	21738 <fcb_append+0x108>
		if (!sector || (sector->fs_size <
   216cc:	f1b8 0f00 	cmp.w	r8, #0
   216d0:	d034      	beq.n	2173c <fcb_append+0x10c>
   216d2:	f8d8 2004 	ldr.w	r2, [r8, #4]
			sizeof(struct fcb_disk_area) + len + cnt)) {
   216d6:	f107 0308 	add.w	r3, r7, #8
   216da:	4433      	add	r3, r6
		if (!sector || (sector->fs_size <
   216dc:	429a      	cmp	r2, r3
   216de:	d32d      	bcc.n	2173c <fcb_append+0x10c>
			rc = -ENOSPC;
			goto err;
		}
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   216e0:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   216e2:	4641      	mov	r1, r8
   216e4:	3201      	adds	r2, #1
   216e6:	4620      	mov	r0, r4
   216e8:	b292      	uxth	r2, r2
   216ea:	f01b fad0 	bl	3cc8e <fcb_sector_hdr_init>
		if (rc) {
   216ee:	4605      	mov	r5, r0
   216f0:	b9d8      	cbnz	r0, 2172a <fcb_append+0xfa>
			goto err;
		}
		fcb->f_active.fe_sector = sector;
		fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   216f2:	2308      	movs	r3, #8
   216f4:	62a3      	str	r3, [r4, #40]	; 0x28
		fcb->f_active_id++;
   216f6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
		fcb->f_active.fe_sector = sector;
   216f8:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
		fcb->f_active_id++;
   216fc:	3301      	adds	r3, #1
   216fe:	86a3      	strh	r3, [r4, #52]	; 0x34
	}

	rc = fcb_flash_write(fcb, active->fe_sector, active->fe_elem_off, tmp_str, cnt);
   21700:	4620      	mov	r0, r4
   21702:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
   21706:	9700      	str	r7, [sp, #0]
   21708:	ab02      	add	r3, sp, #8
   2170a:	f01b fa4c 	bl	3cba6 <fcb_flash_write>
	if (rc) {
   2170e:	4605      	mov	r5, r0
   21710:	b9b8      	cbnz	r0, 21742 <fcb_append+0x112>
		rc = -EIO;
		goto err;
	}
	append_loc->fe_sector = active->fe_sector;
   21712:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21714:	f8c9 3000 	str.w	r3, [r9]
	append_loc->fe_elem_off = active->fe_elem_off;
   21718:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2171a:	f8c9 3004 	str.w	r3, [r9, #4]
	append_loc->fe_data_off = active->fe_elem_off + cnt;
   2171e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   21720:	4407      	add	r7, r0
   21722:	f8c9 7008 	str.w	r7, [r9, #8]

	active->fe_elem_off = append_loc->fe_data_off + len;
   21726:	4437      	add	r7, r6
   21728:	62a7      	str	r7, [r4, #40]	; 0x28
	return z_impl_k_mutex_unlock(mutex);
   2172a:	4650      	mov	r0, sl
   2172c:	f015 f994 	bl	36a58 <z_impl_k_mutex_unlock>

	return 0;
err:
	k_mutex_unlock(&fcb->f_mtx);
	return rc;
}
   21730:	4628      	mov	r0, r5
   21732:	b005      	add	sp, #20
   21734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} while (i++ < cnt);
   21738:	461d      	mov	r5, r3
   2173a:	e7b8      	b.n	216ae <fcb_append+0x7e>
			rc = -ENOSPC;
   2173c:	f06f 051b 	mvn.w	r5, #27
   21740:	e7f3      	b.n	2172a <fcb_append+0xfa>
		rc = -EIO;
   21742:	f06f 0504 	mvn.w	r5, #4
   21746:	e7f0      	b.n	2172a <fcb_append+0xfa>
		return -EINVAL;
   21748:	f06f 0515 	mvn.w	r5, #21
   2174c:	e7f0      	b.n	21730 <fcb_append+0x100>
   2174e:	bf00      	nop
   21750:	000440c2 	.word	0x000440c2
   21754:	00043ff2 	.word	0x00043ff2

00021758 <sntp_query>:

	return 0;
}

int sntp_query(struct sntp_ctx *ctx, uint32_t timeout, struct sntp_time *time)
{
   21758:	b5f0      	push	{r4, r5, r6, r7, lr}
   2175a:	4605      	mov	r5, r0
   2175c:	b09b      	sub	sp, #108	; 0x6c
   2175e:	460f      	mov	r7, r1
   21760:	4614      	mov	r4, r2
	struct sntp_pkt tx_pkt = { 0 };
   21762:	2100      	movs	r1, #0
   21764:	2230      	movs	r2, #48	; 0x30
   21766:	a802      	add	r0, sp, #8
   21768:	f01f fe3c 	bl	413e4 <memset>
	int ret = 0;

	if (!ctx || !time) {
   2176c:	2d00      	cmp	r5, #0
   2176e:	f000 8085 	beq.w	2187c <sntp_query+0x124>
   21772:	2c00      	cmp	r4, #0
   21774:	f000 8082 	beq.w	2187c <sntp_query+0x124>
	}

	/* prepare request pkt */
	SNTP_SET_LI(tx_pkt.lvm, 0);
	SNTP_SET_VN(tx_pkt.lvm, SNTP_VERSION_NUMBER);
	SNTP_SET_MODE(tx_pkt.lvm, SNTP_MODE_CLIENT);
   21778:	231b      	movs	r3, #27
   2177a:	f88d 3008 	strb.w	r3, [sp, #8]
	return z_impl_k_uptime_ticks();
   2177e:	f01f fca1 	bl	410c4 <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
   21782:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   21786:	2600      	movs	r6, #0
   21788:	fba0 0302 	umull	r0, r3, r0, r2
   2178c:	fb02 3101 	mla	r1, r2, r1, r3
   21790:	0bc0      	lsrs	r0, r0, #15
	return time / MSEC_PER_SEC;
   21792:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   21796:	2300      	movs	r3, #0
   21798:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   2179c:	4631      	mov	r1, r6
   2179e:	f7fb fba3 	bl	1cee8 <__aeabi_uldivmod>
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
   217a2:	4a38      	ldr	r2, [pc, #224]	; (21884 <sntp_query+0x12c>)
   217a4:	4402      	add	r2, r0
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
   217a6:	0a13      	lsrs	r3, r2, #8
   217a8:	0211      	lsls	r1, r2, #8
   217aa:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   217ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   217b2:	430b      	orrs	r3, r1
   217b4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   217b8:	f043 0383 	orr.w	r3, r3, #131	; 0x83

	ret = send(ctx->sock.fd, (uint8_t *)&tx_pkt, sizeof(tx_pkt), 0);
   217bc:	68e8      	ldr	r0, [r5, #12]
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
   217be:	612a      	str	r2, [r5, #16]
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
   217c0:	930c      	str	r3, [sp, #48]	; 0x30
		union { uintptr_t x; socklen_t val; } parm5 = { .val = addrlen };
		return (ssize_t) arch_syscall_invoke6(parm0.x, parm1.x, parm2.x, parm3.x, parm4.x, parm5.x, K_SYSCALL_ZSOCK_SENDTO);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   217c2:	2230      	movs	r2, #48	; 0x30
   217c4:	4633      	mov	r3, r6
   217c6:	e9cd 6600 	strd	r6, r6, [sp]
   217ca:	a902      	add	r1, sp, #8
   217cc:	f01b fd04 	bl	3d1d8 <z_impl_zsock_sendto>
	if (ret < 0) {
   217d0:	2800      	cmp	r0, #0
   217d2:	db0f      	blt.n	217f4 <sntp_query+0x9c>
	struct sntp_pkt buf = { 0 };
   217d4:	4631      	mov	r1, r6
   217d6:	2230      	movs	r2, #48	; 0x30
   217d8:	a80e      	add	r0, sp, #56	; 0x38
   217da:	f01f fe03 	bl	413e4 <memset>
	status = poll(sntp->sock.fds, sntp->sock.nfds, timeout);
   217de:	68a9      	ldr	r1, [r5, #8]
		union { uintptr_t x; int val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_ZSOCK_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_poll(fds, nfds, timeout);
   217e0:	463a      	mov	r2, r7
   217e2:	4628      	mov	r0, r5
   217e4:	f01b fd7f 	bl	3d2e6 <z_impl_zsock_poll>
	if (status < 0) {
   217e8:	42b0      	cmp	r0, r6
   217ea:	da05      	bge.n	217f8 <sntp_query+0xa0>
		return -errno;
   217ec:	f01b ff9f 	bl	3d72e <__errno>
   217f0:	6800      	ldr	r0, [r0, #0]
   217f2:	4240      	negs	r0, r0
		NET_ERR("Failed to send over UDP socket %d", ret);
		return ret;
	}

	return sntp_recv_response(ctx, timeout, time);
}
   217f4:	b01b      	add	sp, #108	; 0x6c
   217f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status == 0) {
   217f8:	d037      	beq.n	2186a <sntp_query+0x112>
	rcvd = recv(sntp->sock.fd, (uint8_t *)&buf, sizeof(buf), 0);
   217fa:	68e8      	ldr	r0, [r5, #12]
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   217fc:	2230      	movs	r2, #48	; 0x30
   217fe:	4633      	mov	r3, r6
   21800:	e9cd 6600 	strd	r6, r6, [sp]
   21804:	a90e      	add	r1, sp, #56	; 0x38
   21806:	f01b fd3e 	bl	3d286 <z_impl_zsock_recvfrom>
	if (rcvd < 0) {
   2180a:	2800      	cmp	r0, #0
   2180c:	dbee      	blt.n	217ec <sntp_query+0x94>
	if (rcvd != sizeof(struct sntp_pkt)) {
   2180e:	2830      	cmp	r0, #48	; 0x30
   21810:	d12e      	bne.n	21870 <sntp_query+0x118>
	if (ntohl(pkt->orig_tm_s) != orig_ts) {
   21812:	9b14      	ldr	r3, [sp, #80]	; 0x50
   21814:	692a      	ldr	r2, [r5, #16]
   21816:	ba1b      	rev	r3, r3
   21818:	429a      	cmp	r2, r3
   2181a:	d002      	beq.n	21822 <sntp_query+0xca>
		return -EINVAL;
   2181c:	f06f 0015 	mvn.w	r0, #21
   21820:	e7e8      	b.n	217f4 <sntp_query+0x9c>
	if (SNTP_GET_MODE(pkt->lvm) != SNTP_MODE_SERVER) {
   21822:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   21826:	f003 0307 	and.w	r3, r3, #7
   2182a:	2b04      	cmp	r3, #4
   2182c:	d1f6      	bne.n	2181c <sntp_query+0xc4>
	if (pkt->stratum == SNTP_STRATUM_KOD) {
   2182e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   21832:	b303      	cbz	r3, 21876 <sntp_query+0x11e>
	if (ntohl(pkt->tx_tm_s) == 0 && ntohl(pkt->tx_tm_f) == 0) {
   21834:	9b18      	ldr	r3, [sp, #96]	; 0x60
   21836:	9a19      	ldr	r2, [sp, #100]	; 0x64
   21838:	ba1b      	rev	r3, r3
   2183a:	ba12      	rev	r2, r2
   2183c:	ea53 0102 	orrs.w	r1, r3, r2
   21840:	d0ec      	beq.n	2181c <sntp_query+0xc4>
	if (ts & 0x80000000) {
   21842:	2b00      	cmp	r3, #0
	time->fraction = ntohl(pkt->tx_tm_f);
   21844:	60a2      	str	r2, [r4, #8]
	if (ts & 0x80000000) {
   21846:	da0a      	bge.n	2185e <sntp_query+0x106>
		if (ts >= OFFSET_1970_JAN_1) {
   21848:	4a0f      	ldr	r2, [pc, #60]	; (21888 <sntp_query+0x130>)
   2184a:	4293      	cmp	r3, r2
   2184c:	d9e6      	bls.n	2181c <sntp_query+0xc4>
			time->seconds = ts - OFFSET_1970_JAN_1;
   2184e:	2000      	movs	r0, #0
   21850:	4a0e      	ldr	r2, [pc, #56]	; (2188c <sntp_query+0x134>)
   21852:	189b      	adds	r3, r3, r2
   21854:	f140 32ff 	adc.w	r2, r0, #4294967295
   21858:	e9c4 3200 	strd	r3, r2, [r4]
   2185c:	e7ca      	b.n	217f4 <sntp_query+0x9c>
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
   2185e:	2000      	movs	r0, #0
   21860:	4a0a      	ldr	r2, [pc, #40]	; (2188c <sntp_query+0x134>)
   21862:	441a      	add	r2, r3
   21864:	e9c4 2000 	strd	r2, r0, [r4]
   21868:	e7c4      	b.n	217f4 <sntp_query+0x9c>
		return -ETIMEDOUT;
   2186a:	f06f 0073 	mvn.w	r0, #115	; 0x73
   2186e:	e7c1      	b.n	217f4 <sntp_query+0x9c>
		return -EMSGSIZE;
   21870:	f06f 0079 	mvn.w	r0, #121	; 0x79
   21874:	e7be      	b.n	217f4 <sntp_query+0x9c>
		return -EBUSY;
   21876:	f06f 000f 	mvn.w	r0, #15
	return sntp_recv_response(ctx, timeout, time);
   2187a:	e7bb      	b.n	217f4 <sntp_query+0x9c>
		return -EFAULT;
   2187c:	f06f 000d 	mvn.w	r0, #13
   21880:	e7b8      	b.n	217f4 <sntp_query+0x9c>
   21882:	bf00      	nop
   21884:	83aa7e80 	.word	0x83aa7e80
   21888:	83aa7e7f 	.word	0x83aa7e7f
   2188c:	7c558180 	.word	0x7c558180

00021890 <z_impl_zsock_socket>:
	return fd;
}
#endif /* CONFIG_NET_NATIVE */

int z_impl_zsock_socket(int family, int type, int proto)
{
   21890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21894:	4605      	mov	r5, r0
   21896:	460e      	mov	r6, r1
   21898:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   2189a:	4c1c      	ldr	r4, [pc, #112]	; (2190c <z_impl_zsock_socket+0x7c>)
   2189c:	f8df 9074 	ldr.w	r9, [pc, #116]	; 21914 <z_impl_zsock_socket+0x84>
   218a0:	f8df 8074 	ldr.w	r8, [pc, #116]	; 21918 <z_impl_zsock_socket+0x88>
   218a4:	454c      	cmp	r4, r9
   218a6:	d908      	bls.n	218ba <z_impl_zsock_socket+0x2a>
   218a8:	4641      	mov	r1, r8
   218aa:	4819      	ldr	r0, [pc, #100]	; (21910 <z_impl_zsock_socket+0x80>)
   218ac:	22d6      	movs	r2, #214	; 0xd6
   218ae:	f01b f8c5 	bl	3ca3c <assert_print>
   218b2:	21d6      	movs	r1, #214	; 0xd6
   218b4:	4640      	mov	r0, r8
   218b6:	f01b f8ba 	bl	3ca2e <assert_post_action>
   218ba:	454c      	cmp	r4, r9
   218bc:	d307      	bcc.n	218ce <z_impl_zsock_socket+0x3e>
		}

		return sock_family->handler(family, type, proto);
	}

	errno = EAFNOSUPPORT;
   218be:	f01b ff36 	bl	3d72e <__errno>
   218c2:	236a      	movs	r3, #106	; 0x6a
   218c4:	6003      	str	r3, [r0, #0]
	return -1;
}
   218c6:	f04f 30ff 	mov.w	r0, #4294967295
   218ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (sock_family->family != family &&
   218ce:	6823      	ldr	r3, [r4, #0]
   218d0:	42ab      	cmp	r3, r5
   218d2:	d000      	beq.n	218d6 <z_impl_zsock_socket+0x46>
   218d4:	b9bb      	cbnz	r3, 21906 <z_impl_zsock_socket+0x76>
		NET_ASSERT(sock_family->is_supported);
   218d6:	6863      	ldr	r3, [r4, #4]
   218d8:	b943      	cbnz	r3, 218ec <z_impl_zsock_socket+0x5c>
   218da:	4641      	mov	r1, r8
   218dc:	480c      	ldr	r0, [pc, #48]	; (21910 <z_impl_zsock_socket+0x80>)
   218de:	22dc      	movs	r2, #220	; 0xdc
   218e0:	f01b f8ac 	bl	3ca3c <assert_print>
   218e4:	21dc      	movs	r1, #220	; 0xdc
   218e6:	4640      	mov	r0, r8
   218e8:	f01b f8a1 	bl	3ca2e <assert_post_action>
		if (!sock_family->is_supported(family, type, proto)) {
   218ec:	463a      	mov	r2, r7
   218ee:	4631      	mov	r1, r6
   218f0:	4628      	mov	r0, r5
   218f2:	6863      	ldr	r3, [r4, #4]
   218f4:	4798      	blx	r3
   218f6:	b130      	cbz	r0, 21906 <z_impl_zsock_socket+0x76>
		return sock_family->handler(family, type, proto);
   218f8:	463a      	mov	r2, r7
   218fa:	4631      	mov	r1, r6
   218fc:	4628      	mov	r0, r5
   218fe:	68a3      	ldr	r3, [r4, #8]
}
   21900:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return sock_family->handler(family, type, proto);
   21904:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   21906:	340c      	adds	r4, #12
   21908:	e7cc      	b.n	218a4 <z_impl_zsock_socket+0x14>
   2190a:	bf00      	nop
   2190c:	000425a4 	.word	0x000425a4
   21910:	00043ff2 	.word	0x00043ff2
   21914:	000425b0 	.word	0x000425b0
   21918:	00044124 	.word	0x00044124

0002191c <zsock_poll_internal>:

	return timeout - elapsed;
}

int zsock_poll_internal(struct zsock_pollfd *fds, int nfds, k_timeout_t timeout)
{
   2191c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21920:	4606      	mov	r6, r0
	const struct fd_op_vtable *vtable;
	struct k_mutex *lock;
	uint64_t end;
	bool offload = false;
	const struct fd_op_vtable *offl_vtable = NULL;
	void *offl_ctx = NULL;
   21922:	f04f 0800 	mov.w	r8, #0
{
   21926:	b09b      	sub	sp, #108	; 0x6c
   21928:	9104      	str	r1, [sp, #16]
   2192a:	4610      	mov	r0, r2
   2192c:	4619      	mov	r1, r3
   2192e:	461d      	mov	r5, r3
   21930:	4614      	mov	r4, r2

	end = sys_clock_timeout_end_calc(timeout);
   21932:	f01f fbcd 	bl	410d0 <sys_clock_timeout_end_calc>

	pev = poll_events;
	for (pfd = fds, i = nfds; i--; pfd++) {
   21936:	46b1      	mov	r9, r6
	const struct fd_op_vtable *offl_vtable = NULL;
   21938:	46c2      	mov	sl, r8
	bool offload = false;
   2193a:	4647      	mov	r7, r8
	pev = poll_events;
   2193c:	ab0b      	add	r3, sp, #44	; 0x2c
   2193e:	9308      	str	r3, [sp, #32]
	end = sys_clock_timeout_end_calc(timeout);
   21940:	e9cd 0105 	strd	r0, r1, [sp, #20]
	for (pfd = fds, i = nfds; i--; pfd++) {
   21944:	9b04      	ldr	r3, [sp, #16]
   21946:	9303      	str	r3, [sp, #12]
   21948:	9b03      	ldr	r3, [sp, #12]
   2194a:	bb03      	cbnz	r3, 2198e <zsock_poll_internal+0x72>
			errno = -result;
			return -1;
		}
	}

	if (offload) {
   2194c:	2f00      	cmp	r7, #0
   2194e:	d060      	beq.n	21a12 <zsock_poll_internal+0xf6>
		int poll_timeout;

		if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21950:	f1b5 3fff 	cmp.w	r5, #4294967295
   21954:	bf08      	it	eq
   21956:	f1b4 3fff 	cmpeq.w	r4, #4294967295
			return (uint32_t)((t * to_hz + off) / from_hz);
   2195a:	bf16      	itet	ne
   2195c:	f44f 707a 	movne.w	r0, #1000	; 0x3e8
			poll_timeout = SYS_FOREVER_MS;
   21960:	f04f 34ff 	moveq.w	r4, #4294967295
   21964:	fba4 4000 	umullne	r4, r0, r4, r0
		} else {
			poll_timeout = k_ticks_to_ms_floor32(timeout.ticks);
		}

		return z_fdtable_call_ioctl(offl_vtable, offl_ctx,
   21968:	9b04      	ldr	r3, [sp, #16]
   2196a:	bf1c      	itt	ne
   2196c:	0be4      	lsrne	r4, r4, #15
   2196e:	ea44 4440 	orrne.w	r4, r4, r0, lsl #17
   21972:	9300      	str	r3, [sp, #0]
   21974:	f44f 7282 	mov.w	r2, #260	; 0x104
   21978:	4633      	mov	r3, r6
   2197a:	4641      	mov	r1, r8
   2197c:	4650      	mov	r0, sl
   2197e:	9401      	str	r4, [sp, #4]
   21980:	f01b fbcc 	bl	3d11c <z_fdtable_call_ioctl>
   21984:	4607      	mov	r7, r0
			}
		}
	} while (retry);

	return ret;
}
   21986:	4638      	mov	r0, r7
   21988:	b01b      	add	sp, #108	; 0x6c
   2198a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (pfd->fd < 0) {
   2198e:	f8d9 0000 	ldr.w	r0, [r9]
   21992:	2800      	cmp	r0, #0
   21994:	db37      	blt.n	21a06 <zsock_poll_internal+0xea>
	ctx = z_get_fd_obj_and_vtable(sock,
   21996:	aa0a      	add	r2, sp, #40	; 0x28
   21998:	a909      	add	r1, sp, #36	; 0x24
   2199a:	f7ff f845 	bl	20a28 <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
   2199e:	9007      	str	r0, [sp, #28]
   219a0:	b388      	cbz	r0, 21a06 <zsock_poll_internal+0xea>
		(void)k_mutex_lock(lock, K_FOREVER);
   219a2:	f04f 32ff 	mov.w	r2, #4294967295
   219a6:	f04f 33ff 	mov.w	r3, #4294967295
   219aa:	980a      	ldr	r0, [sp, #40]	; 0x28
   219ac:	f01b fbc5 	bl	3d13a <k_mutex_lock.constprop.0.isra.0>
		result = z_fdtable_call_ioctl(vtable, ctx,
   219b0:	ab1a      	add	r3, sp, #104	; 0x68
   219b2:	9301      	str	r3, [sp, #4]
   219b4:	ab08      	add	r3, sp, #32
   219b6:	9300      	str	r3, [sp, #0]
   219b8:	f44f 7281 	mov.w	r2, #258	; 0x102
   219bc:	464b      	mov	r3, r9
   219be:	9907      	ldr	r1, [sp, #28]
   219c0:	9809      	ldr	r0, [sp, #36]	; 0x24
   219c2:	f01b fbab 	bl	3d11c <z_fdtable_call_ioctl>
		if (result == -EALREADY) {
   219c6:	f110 0f78 	cmn.w	r0, #120	; 0x78
		result = z_fdtable_call_ioctl(vtable, ctx,
   219ca:	4683      	mov	fp, r0
		if (result == -EALREADY) {
   219cc:	d00d      	beq.n	219ea <zsock_poll_internal+0xce>
		} else if (result == -EXDEV) {
   219ce:	f110 0f12 	cmn.w	r0, #18
   219d2:	9907      	ldr	r1, [sp, #28]
   219d4:	d10c      	bne.n	219f0 <zsock_poll_internal+0xd4>
			if (offl_vtable == NULL || net_socket_is_tls(ctx)) {
   219d6:	f1ba 0f00 	cmp.w	sl, #0
   219da:	d102      	bne.n	219e2 <zsock_poll_internal+0xc6>
				offl_vtable = vtable;
   219dc:	4688      	mov	r8, r1
   219de:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
			result = 0;
   219e2:	f04f 0b00 	mov.w	fp, #0
			offload = true;
   219e6:	2701      	movs	r7, #1
   219e8:	e002      	b.n	219f0 <zsock_poll_internal+0xd4>
			timeout = K_NO_WAIT;
   219ea:	2400      	movs	r4, #0
   219ec:	4625      	mov	r5, r4
			result = 0;
   219ee:	46a3      	mov	fp, r4
		k_mutex_unlock(lock);
   219f0:	980a      	ldr	r0, [sp, #40]	; 0x28
   219f2:	f01b fba4 	bl	3d13e <k_mutex_unlock.isra.0>
		if (result < 0) {
   219f6:	f1bb 0f00 	cmp.w	fp, #0
   219fa:	da04      	bge.n	21a06 <zsock_poll_internal+0xea>
				errno = -result;
   219fc:	f01b fe97 	bl	3d72e <__errno>
   21a00:	f1cb 0300 	rsb	r3, fp, #0
   21a04:	e036      	b.n	21a74 <zsock_poll_internal+0x158>
	for (pfd = fds, i = nfds; i--; pfd++) {
   21a06:	9b03      	ldr	r3, [sp, #12]
   21a08:	f109 0908 	add.w	r9, r9, #8
   21a0c:	3b01      	subs	r3, #1
   21a0e:	9303      	str	r3, [sp, #12]
   21a10:	e79a      	b.n	21948 <zsock_poll_internal+0x2c>
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   21a12:	ea54 0305 	orrs.w	r3, r4, r5
   21a16:	d010      	beq.n	21a3a <zsock_poll_internal+0x11e>
   21a18:	f1b5 3fff 	cmp.w	r5, #4294967295
   21a1c:	bf08      	it	eq
   21a1e:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   21a22:	d00a      	beq.n	21a3a <zsock_poll_internal+0x11e>
		int64_t remaining = end - sys_clock_tick_get();
   21a24:	f017 f9c8 	bl	38db8 <sys_clock_tick_get>
   21a28:	9b05      	ldr	r3, [sp, #20]
   21a2a:	1a1c      	subs	r4, r3, r0
   21a2c:	9b06      	ldr	r3, [sp, #24]
   21a2e:	eb63 0501 	sbc.w	r5, r3, r1
   21a32:	2d00      	cmp	r5, #0
   21a34:	bfbc      	itt	lt
   21a36:	463c      	movlt	r4, r7
   21a38:	4625      	movlt	r5, r4
		ret = k_poll(poll_events, pev - poll_events, timeout);
   21a3a:	9908      	ldr	r1, [sp, #32]
   21a3c:	af0b      	add	r7, sp, #44	; 0x2c
   21a3e:	4b3f      	ldr	r3, [pc, #252]	; (21b3c <zsock_poll_internal+0x220>)
   21a40:	1bc9      	subs	r1, r1, r7
   21a42:	1089      	asrs	r1, r1, #2
   21a44:	4359      	muls	r1, r3
	return z_impl_k_poll(events, num_events, timeout);
   21a46:	462b      	mov	r3, r5
   21a48:	4622      	mov	r2, r4
   21a4a:	4638      	mov	r0, r7
   21a4c:	f017 fcce 	bl	393ec <z_impl_k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
   21a50:	f100 030b 	add.w	r3, r0, #11
   21a54:	2b0b      	cmp	r3, #11
   21a56:	4681      	mov	r9, r0
   21a58:	d808      	bhi.n	21a6c <zsock_poll_internal+0x150>
   21a5a:	f640 0881 	movw	r8, #2177	; 0x881
   21a5e:	fa28 f803 	lsr.w	r8, r8, r3
   21a62:	ea6f 0808 	mvn.w	r8, r8
   21a66:	f018 0801 	ands.w	r8, r8, #1
   21a6a:	d007      	beq.n	21a7c <zsock_poll_internal+0x160>
			errno = -ret;
   21a6c:	f01b fe5f 	bl	3d72e <__errno>
   21a70:	f1c9 0300 	rsb	r3, r9, #0
			return -1;
   21a74:	f04f 37ff 	mov.w	r7, #4294967295
			errno = -ret;
   21a78:	6003      	str	r3, [r0, #0]
			return -1;
   21a7a:	e784      	b.n	21986 <zsock_poll_internal+0x6a>
		pev = poll_events;
   21a7c:	9708      	str	r7, [sp, #32]
		for (pfd = fds, i = nfds; i--; pfd++) {
   21a7e:	46b1      	mov	r9, r6
		ret = 0;
   21a80:	4647      	mov	r7, r8
		for (pfd = fds, i = nfds; i--; pfd++) {
   21a82:	f8dd a010 	ldr.w	sl, [sp, #16]
   21a86:	f1ba 0f00 	cmp.w	sl, #0
   21a8a:	d11c      	bne.n	21ac6 <zsock_poll_internal+0x1aa>
		if (retry) {
   21a8c:	f1b8 0f00 	cmp.w	r8, #0
   21a90:	f43f af79 	beq.w	21986 <zsock_poll_internal+0x6a>
			if (ret > 0) {
   21a94:	2f00      	cmp	r7, #0
   21a96:	f47f af76 	bne.w	21986 <zsock_poll_internal+0x6a>
			if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   21a9a:	ea54 0305 	orrs.w	r3, r4, r5
   21a9e:	f43f af72 	beq.w	21986 <zsock_poll_internal+0x6a>
			if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21aa2:	f1b5 3fff 	cmp.w	r5, #4294967295
   21aa6:	bf08      	it	eq
   21aa8:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   21aac:	d0c5      	beq.n	21a3a <zsock_poll_internal+0x11e>
				int64_t remaining = end - sys_clock_tick_get();
   21aae:	f017 f983 	bl	38db8 <sys_clock_tick_get>
   21ab2:	9b05      	ldr	r3, [sp, #20]
   21ab4:	1a1c      	subs	r4, r3, r0
   21ab6:	9b06      	ldr	r3, [sp, #24]
   21ab8:	eb63 0501 	sbc.w	r5, r3, r1
				if (remaining <= 0) {
   21abc:	2c01      	cmp	r4, #1
   21abe:	f175 0300 	sbcs.w	r3, r5, #0
   21ac2:	daba      	bge.n	21a3a <zsock_poll_internal+0x11e>
   21ac4:	e75f      	b.n	21986 <zsock_poll_internal+0x6a>
			pfd->revents = 0;
   21ac6:	f04f 0300 	mov.w	r3, #0
			if (pfd->fd < 0) {
   21aca:	f8d9 0000 	ldr.w	r0, [r9]
			pfd->revents = 0;
   21ace:	f8a9 3006 	strh.w	r3, [r9, #6]
			if (pfd->fd < 0) {
   21ad2:	2800      	cmp	r0, #0
   21ad4:	db29      	blt.n	21b2a <zsock_poll_internal+0x20e>
	ctx = z_get_fd_obj_and_vtable(sock,
   21ad6:	aa0a      	add	r2, sp, #40	; 0x28
   21ad8:	a909      	add	r1, sp, #36	; 0x24
   21ada:	f7fe ffa5 	bl	20a28 <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
   21ade:	4683      	mov	fp, r0
   21ae0:	b920      	cbnz	r0, 21aec <zsock_poll_internal+0x1d0>
				pfd->revents = ZSOCK_POLLNVAL;
   21ae2:	2320      	movs	r3, #32
   21ae4:	f8a9 3006 	strh.w	r3, [r9, #6]
				ret++;
   21ae8:	3701      	adds	r7, #1
   21aea:	e01e      	b.n	21b2a <zsock_poll_internal+0x20e>
			(void)k_mutex_lock(lock, K_FOREVER);
   21aec:	f04f 32ff 	mov.w	r2, #4294967295
   21af0:	f04f 33ff 	mov.w	r3, #4294967295
   21af4:	980a      	ldr	r0, [sp, #40]	; 0x28
   21af6:	f01b fb20 	bl	3d13a <k_mutex_lock.constprop.0.isra.0>
			result = z_fdtable_call_ioctl(vtable, ctx,
   21afa:	ab08      	add	r3, sp, #32
   21afc:	4659      	mov	r1, fp
   21afe:	f240 1203 	movw	r2, #259	; 0x103
   21b02:	9300      	str	r3, [sp, #0]
   21b04:	9809      	ldr	r0, [sp, #36]	; 0x24
   21b06:	464b      	mov	r3, r9
   21b08:	f01b fb08 	bl	3d11c <z_fdtable_call_ioctl>
   21b0c:	4683      	mov	fp, r0
			k_mutex_unlock(lock);
   21b0e:	980a      	ldr	r0, [sp, #40]	; 0x28
   21b10:	f01b fb15 	bl	3d13e <k_mutex_unlock.isra.0>
			if (result == -EAGAIN) {
   21b14:	f11b 0f0b 	cmn.w	fp, #11
   21b18:	d00c      	beq.n	21b34 <zsock_poll_internal+0x218>
			} else if (result != 0) {
   21b1a:	f1bb 0f00 	cmp.w	fp, #0
   21b1e:	f47f af6d 	bne.w	219fc <zsock_poll_internal+0xe0>
			if (pfd->revents != 0) {
   21b22:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
   21b26:	2b00      	cmp	r3, #0
   21b28:	d1de      	bne.n	21ae8 <zsock_poll_internal+0x1cc>
		for (pfd = fds, i = nfds; i--; pfd++) {
   21b2a:	f109 0908 	add.w	r9, r9, #8
   21b2e:	f10a 3aff 	add.w	sl, sl, #4294967295
   21b32:	e7a8      	b.n	21a86 <zsock_poll_internal+0x16a>
				retry = true;
   21b34:	f04f 0801 	mov.w	r8, #1
   21b38:	e7f7      	b.n	21b2a <zsock_poll_internal+0x20e>
   21b3a:	bf00      	nop
   21b3c:	cccccccd 	.word	0xcccccccd

00021b40 <socket_offload_dns_register>:
#include "sockets_internal.h"

const struct socket_dns_offload *dns_offload;

void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
   21b40:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(ops);
   21b42:	4604      	mov	r4, r0
   21b44:	b940      	cbnz	r0, 21b58 <socket_offload_dns_register+0x18>
   21b46:	490b      	ldr	r1, [pc, #44]	; (21b74 <socket_offload_dns_register+0x34>)
   21b48:	480b      	ldr	r0, [pc, #44]	; (21b78 <socket_offload_dns_register+0x38>)
   21b4a:	2213      	movs	r2, #19
   21b4c:	f01a ff76 	bl	3ca3c <assert_print>
   21b50:	2113      	movs	r1, #19
   21b52:	4808      	ldr	r0, [pc, #32]	; (21b74 <socket_offload_dns_register+0x34>)
   21b54:	f01a ff6b 	bl	3ca2e <assert_post_action>
	__ASSERT_NO_MSG(dns_offload == NULL);
   21b58:	4d08      	ldr	r5, [pc, #32]	; (21b7c <socket_offload_dns_register+0x3c>)
   21b5a:	682b      	ldr	r3, [r5, #0]
   21b5c:	b143      	cbz	r3, 21b70 <socket_offload_dns_register+0x30>
   21b5e:	4905      	ldr	r1, [pc, #20]	; (21b74 <socket_offload_dns_register+0x34>)
   21b60:	4805      	ldr	r0, [pc, #20]	; (21b78 <socket_offload_dns_register+0x38>)
   21b62:	2214      	movs	r2, #20
   21b64:	f01a ff6a 	bl	3ca3c <assert_print>
   21b68:	2114      	movs	r1, #20
   21b6a:	4802      	ldr	r0, [pc, #8]	; (21b74 <socket_offload_dns_register+0x34>)
   21b6c:	f01a ff5f 	bl	3ca2e <assert_post_action>

	dns_offload = ops;
   21b70:	602c      	str	r4, [r5, #0]
}
   21b72:	bd38      	pop	{r3, r4, r5, pc}
   21b74:	00044158 	.word	0x00044158
   21b78:	00043ff2 	.word	0x00043ff2
   21b7c:	20019120 	.word	0x20019120

00021b80 <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
   21b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(dns_offload);
   21b84:	f8df 805c 	ldr.w	r8, [pc, #92]	; 21be4 <socket_offload_getaddrinfo+0x64>
{
   21b88:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dns_offload);
   21b8a:	f8d8 3000 	ldr.w	r3, [r8]
{
   21b8e:	4604      	mov	r4, r0
   21b90:	460d      	mov	r5, r1
   21b92:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(dns_offload);
   21b94:	b943      	cbnz	r3, 21ba8 <socket_offload_getaddrinfo+0x28>
   21b96:	4911      	ldr	r1, [pc, #68]	; (21bdc <socket_offload_getaddrinfo+0x5c>)
   21b98:	4811      	ldr	r0, [pc, #68]	; (21be0 <socket_offload_getaddrinfo+0x60>)
   21b9a:	221d      	movs	r2, #29
   21b9c:	f01a ff4e 	bl	3ca3c <assert_print>
   21ba0:	211d      	movs	r1, #29
   21ba2:	480e      	ldr	r0, [pc, #56]	; (21bdc <socket_offload_getaddrinfo+0x5c>)
   21ba4:	f01a ff43 	bl	3ca2e <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);
   21ba8:	f8d8 3000 	ldr.w	r3, [r8]
   21bac:	681b      	ldr	r3, [r3, #0]
   21bae:	b943      	cbnz	r3, 21bc2 <socket_offload_getaddrinfo+0x42>
   21bb0:	490a      	ldr	r1, [pc, #40]	; (21bdc <socket_offload_getaddrinfo+0x5c>)
   21bb2:	480b      	ldr	r0, [pc, #44]	; (21be0 <socket_offload_getaddrinfo+0x60>)
   21bb4:	221e      	movs	r2, #30
   21bb6:	f01a ff41 	bl	3ca3c <assert_print>
   21bba:	211e      	movs	r1, #30
   21bbc:	4807      	ldr	r0, [pc, #28]	; (21bdc <socket_offload_getaddrinfo+0x5c>)
   21bbe:	f01a ff36 	bl	3ca2e <assert_post_action>

	return dns_offload->getaddrinfo(node, service, hints, res);
   21bc2:	f8d8 3000 	ldr.w	r3, [r8]
   21bc6:	4632      	mov	r2, r6
   21bc8:	f8d3 e000 	ldr.w	lr, [r3]
   21bcc:	4629      	mov	r1, r5
   21bce:	463b      	mov	r3, r7
   21bd0:	4620      	mov	r0, r4
   21bd2:	46f4      	mov	ip, lr
}
   21bd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return dns_offload->getaddrinfo(node, service, hints, res);
   21bd8:	4760      	bx	ip
   21bda:	bf00      	nop
   21bdc:	00044158 	.word	0x00044158
   21be0:	00043ff2 	.word	0x00043ff2
   21be4:	20019120 	.word	0x20019120

00021be8 <socket_offload_freeaddrinfo>:

void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
   21be8:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(dns_offload);
   21bea:	4d0f      	ldr	r5, [pc, #60]	; (21c28 <socket_offload_freeaddrinfo+0x40>)
{
   21bec:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(dns_offload);
   21bee:	682b      	ldr	r3, [r5, #0]
   21bf0:	b943      	cbnz	r3, 21c04 <socket_offload_freeaddrinfo+0x1c>
   21bf2:	490e      	ldr	r1, [pc, #56]	; (21c2c <socket_offload_freeaddrinfo+0x44>)
   21bf4:	480e      	ldr	r0, [pc, #56]	; (21c30 <socket_offload_freeaddrinfo+0x48>)
   21bf6:	2225      	movs	r2, #37	; 0x25
   21bf8:	f01a ff20 	bl	3ca3c <assert_print>
   21bfc:	2125      	movs	r1, #37	; 0x25
   21bfe:	480b      	ldr	r0, [pc, #44]	; (21c2c <socket_offload_freeaddrinfo+0x44>)
   21c00:	f01a ff15 	bl	3ca2e <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);
   21c04:	682b      	ldr	r3, [r5, #0]
   21c06:	685b      	ldr	r3, [r3, #4]
   21c08:	b943      	cbnz	r3, 21c1c <socket_offload_freeaddrinfo+0x34>
   21c0a:	4908      	ldr	r1, [pc, #32]	; (21c2c <socket_offload_freeaddrinfo+0x44>)
   21c0c:	4808      	ldr	r0, [pc, #32]	; (21c30 <socket_offload_freeaddrinfo+0x48>)
   21c0e:	2226      	movs	r2, #38	; 0x26
   21c10:	f01a ff14 	bl	3ca3c <assert_print>
   21c14:	2126      	movs	r1, #38	; 0x26
   21c16:	4805      	ldr	r0, [pc, #20]	; (21c2c <socket_offload_freeaddrinfo+0x44>)
   21c18:	f01a ff09 	bl	3ca2e <assert_post_action>

	return dns_offload->freeaddrinfo(res);
   21c1c:	682b      	ldr	r3, [r5, #0]
   21c1e:	4620      	mov	r0, r4
}
   21c20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return dns_offload->freeaddrinfo(res);
   21c24:	685b      	ldr	r3, [r3, #4]
   21c26:	4718      	bx	r3
   21c28:	20019120 	.word	0x20019120
   21c2c:	00044158 	.word	0x00044158
   21c30:	00043ff2 	.word	0x00043ff2

00021c34 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   21c34:	4b0c      	ldr	r3, [pc, #48]	; (21c68 <flash_area_open+0x34>)
{
   21c36:	b570      	push	{r4, r5, r6, lr}
	if (flash_map == NULL) {
   21c38:	681b      	ldr	r3, [r3, #0]
   21c3a:	b173      	cbz	r3, 21c5a <flash_area_open+0x26>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   21c3c:	4a0b      	ldr	r2, [pc, #44]	; (21c6c <flash_area_open+0x38>)
   21c3e:	6815      	ldr	r5, [r2, #0]
   21c40:	2200      	movs	r2, #0
   21c42:	42aa      	cmp	r2, r5
   21c44:	db02      	blt.n	21c4c <flash_area_open+0x18>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
   21c46:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;
	return 0;
}
   21c4a:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
   21c4c:	461c      	mov	r4, r3
   21c4e:	f813 6b10 	ldrb.w	r6, [r3], #16
   21c52:	4286      	cmp	r6, r0
   21c54:	d004      	beq.n	21c60 <flash_area_open+0x2c>
	for (int i = 0; i < flash_map_entries; i++) {
   21c56:	3201      	adds	r2, #1
   21c58:	e7f3      	b.n	21c42 <flash_area_open+0xe>
		return -EACCES;
   21c5a:	f06f 000c 	mvn.w	r0, #12
   21c5e:	e7f4      	b.n	21c4a <flash_area_open+0x16>
	return 0;
   21c60:	2000      	movs	r0, #0
	*fap = area;
   21c62:	600c      	str	r4, [r1, #0]
	return 0;
   21c64:	e7f1      	b.n	21c4a <flash_area_open+0x16>
   21c66:	bf00      	nop
   21c68:	20014618 	.word	0x20014618
   21c6c:	00042a40 	.word	0x00042a40

00021c70 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   21c70:	b570      	push	{r4, r5, r6, lr}
   21c72:	b088      	sub	sp, #32
   21c74:	4605      	mov	r5, r0
   21c76:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
   21c78:	b2c0      	uxtb	r0, r0
   21c7a:	4669      	mov	r1, sp
{
   21c7c:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
   21c7e:	f7ff ffd9 	bl	21c34 <flash_area_open>
	if (rc < 0 || fa == NULL) {
   21c82:	2800      	cmp	r0, #0
   21c84:	db1f      	blt.n	21cc6 <flash_area_get_sectors+0x56>
   21c86:	9b00      	ldr	r3, [sp, #0]
   21c88:	b1eb      	cbz	r3, 21cc6 <flash_area_get_sectors+0x56>
	cb_data->area_off = fa->fa_off;
   21c8a:	685a      	ldr	r2, [r3, #4]
	cb_data->ret_len = *cnt;
   21c8c:	6821      	ldr	r1, [r4, #0]
	cb_data->area_off = fa->fa_off;
   21c8e:	9202      	str	r2, [sp, #8]
	cb_data->area_len = fa->fa_size;
   21c90:	689a      	ldr	r2, [r3, #8]
	flash_dev = device_get_binding(fa->fa_dev_name);
   21c92:	68d8      	ldr	r0, [r3, #12]
	cb_data->ret = ret;
   21c94:	e9cd 2603 	strd	r2, r6, [sp, #12]
	cb_data->ret_idx = 0U;
   21c98:	2200      	movs	r2, #0
	cb_data->area_idx = idx;
   21c9a:	9501      	str	r5, [sp, #4]
	cb_data->status = 0;
   21c9c:	e9cd 1206 	strd	r1, r2, [sp, #24]
	cb_data->ret_idx = 0U;
   21ca0:	9205      	str	r2, [sp, #20]
   21ca2:	f014 f903 	bl	35eac <z_impl_device_get_binding>
   21ca6:	4605      	mov	r5, r0
	flash_area_close(fa);
   21ca8:	9800      	ldr	r0, [sp, #0]
   21caa:	f01b fb6f 	bl	3d38c <flash_area_close>
	if (flash_dev == NULL) {
   21cae:	b16d      	cbz	r5, 21ccc <flash_area_get_sectors+0x5c>
	flash_page_foreach(flash_dev, cb, cb_data);
   21cb0:	4628      	mov	r0, r5
   21cb2:	4908      	ldr	r1, [pc, #32]	; (21cd4 <flash_area_get_sectors+0x64>)
   21cb4:	aa01      	add	r2, sp, #4
   21cb6:	f01c fd8b 	bl	3e7d0 <flash_page_foreach>
	if (cb_data->status == 0) {
   21cba:	9807      	ldr	r0, [sp, #28]
   21cbc:	b908      	cbnz	r0, 21cc2 <flash_area_get_sectors+0x52>
		*cnt = cb_data->ret_idx;
   21cbe:	9b05      	ldr	r3, [sp, #20]
   21cc0:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   21cc2:	b008      	add	sp, #32
   21cc4:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   21cc6:	f06f 0015 	mvn.w	r0, #21
   21cca:	e7fa      	b.n	21cc2 <flash_area_get_sectors+0x52>
		return -ENODEV;
   21ccc:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   21cd0:	e7f7      	b.n	21cc2 <flash_area_get_sectors+0x52>
   21cd2:	bf00      	nop
   21cd4:	0003d451 	.word	0x0003d451

00021cd8 <find_flash_total_size>:
static bool find_flash_total_size(const struct flash_pages_info *info,
				  void *data)
{
	struct _inspect_flash *ctx = (struct _inspect_flash *) data;

	if (ctx->buf_len > info->size) {
   21cd8:	6842      	ldr	r2, [r0, #4]
   21cda:	680b      	ldr	r3, [r1, #0]
{
   21cdc:	b510      	push	{r4, lr}
	if (ctx->buf_len > info->size) {
   21cde:	4293      	cmp	r3, r2
{
   21ce0:	460c      	mov	r4, r1
	if (ctx->buf_len > info->size) {
   21ce2:	d906      	bls.n	21cf2 <find_flash_total_size+0x1a>
		LOG_ERR("Buffer size is bigger than page");
   21ce4:	4805      	ldr	r0, [pc, #20]	; (21cfc <find_flash_total_size+0x24>)
   21ce6:	2145      	movs	r1, #69	; 0x45
   21ce8:	f01a fee2 	bl	3cab0 <z_log_minimal_printk>
		ctx->total_size = 0;
   21cec:	2000      	movs	r0, #0
   21cee:	6060      	str	r0, [r4, #4]
	}

	ctx->total_size += info->size;

	return true;
}
   21cf0:	bd10      	pop	{r4, pc}
	ctx->total_size += info->size;
   21cf2:	684b      	ldr	r3, [r1, #4]
	return true;
   21cf4:	2001      	movs	r0, #1
	ctx->total_size += info->size;
   21cf6:	4413      	add	r3, r2
   21cf8:	604b      	str	r3, [r1, #4]
	return true;
   21cfa:	e7f9      	b.n	21cf0 <find_flash_total_size+0x18>
   21cfc:	00044193 	.word	0x00044193

00021d00 <stream_flash_erase_page>:
{
   21d00:	b530      	push	{r4, r5, lr}
   21d02:	4605      	mov	r5, r0
   21d04:	b085      	sub	sp, #20
	rc = flash_get_page_info_by_offs(ctx->fdev, off, &page);
   21d06:	68c0      	ldr	r0, [r0, #12]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   21d08:	aa01      	add	r2, sp, #4
   21d0a:	f01c fd5d 	bl	3e7c8 <z_impl_flash_get_page_info_by_offs>
	if (rc != 0) {
   21d0e:	4604      	mov	r4, r0
   21d10:	b138      	cbz	r0, 21d22 <stream_flash_erase_page+0x22>
		LOG_ERR("Error %d while getting page info", rc);
   21d12:	2145      	movs	r1, #69	; 0x45
   21d14:	4602      	mov	r2, r0
   21d16:	480c      	ldr	r0, [pc, #48]	; (21d48 <stream_flash_erase_page+0x48>)
		LOG_ERR("Error %d while erasing page", rc);
   21d18:	f01a feca 	bl	3cab0 <z_log_minimal_printk>
}
   21d1c:	4620      	mov	r0, r4
   21d1e:	b005      	add	sp, #20
   21d20:	bd30      	pop	{r4, r5, pc}
	if (ctx->last_erased_page_start_offset == page.start_offset) {
   21d22:	9901      	ldr	r1, [sp, #4]
   21d24:	6a2b      	ldr	r3, [r5, #32]
   21d26:	428b      	cmp	r3, r1
   21d28:	d0f8      	beq.n	21d1c <stream_flash_erase_page+0x1c>
	rc = flash_erase(ctx->fdev, page.start_offset, page.size);
   21d2a:	68e8      	ldr	r0, [r5, #12]
   21d2c:	9a02      	ldr	r2, [sp, #8]
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->erase(dev, offset, size);
   21d2e:	6883      	ldr	r3, [r0, #8]
   21d30:	689b      	ldr	r3, [r3, #8]
   21d32:	4798      	blx	r3
	if (rc != 0) {
   21d34:	4604      	mov	r4, r0
   21d36:	b118      	cbz	r0, 21d40 <stream_flash_erase_page+0x40>
		LOG_ERR("Error %d while erasing page", rc);
   21d38:	4602      	mov	r2, r0
   21d3a:	2145      	movs	r1, #69	; 0x45
   21d3c:	4803      	ldr	r0, [pc, #12]	; (21d4c <stream_flash_erase_page+0x4c>)
   21d3e:	e7eb      	b.n	21d18 <stream_flash_erase_page+0x18>
		ctx->last_erased_page_start_offset = page.start_offset;
   21d40:	9b01      	ldr	r3, [sp, #4]
   21d42:	622b      	str	r3, [r5, #32]
   21d44:	e7ea      	b.n	21d1c <stream_flash_erase_page+0x1c>
   21d46:	bf00      	nop
   21d48:	000441b8 	.word	0x000441b8
   21d4c:	000441de 	.word	0x000441de

00021d50 <flash_sync>:
{
   21d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ctx->buf_bytes == 0) {
   21d52:	6885      	ldr	r5, [r0, #8]
{
   21d54:	4604      	mov	r4, r0
	if (ctx->buf_bytes == 0) {
   21d56:	b175      	cbz	r5, 21d76 <flash_sync+0x26>
	size_t write_addr = ctx->offset + ctx->bytes_written;
   21d58:	e9d0 3604 	ldrd	r3, r6, [r0, #16]
					     write_addr + ctx->buf_bytes - 1);
   21d5c:	3d01      	subs	r5, #1
	size_t write_addr = ctx->offset + ctx->bytes_written;
   21d5e:	441e      	add	r6, r3
		rc = stream_flash_erase_page(ctx,
   21d60:	19a9      	adds	r1, r5, r6
   21d62:	f7ff ffcd 	bl	21d00 <stream_flash_erase_page>
		if (rc < 0) {
   21d66:	1e05      	subs	r5, r0, #0
   21d68:	da07      	bge.n	21d7a <flash_sync+0x2a>
			LOG_ERR("stream_flash_erase_page err %d offset=0x%08zx",
   21d6a:	4633      	mov	r3, r6
   21d6c:	462a      	mov	r2, r5
   21d6e:	2145      	movs	r1, #69	; 0x45
   21d70:	482c      	ldr	r0, [pc, #176]	; (21e24 <flash_sync+0xd4>)
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
   21d72:	f01a fe9d 	bl	3cab0 <z_log_minimal_printk>
}
   21d76:	4628      	mov	r0, r5
   21d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	fill_length = flash_get_write_block_size(ctx->fdev);
   21d7a:	68e0      	ldr	r0, [r4, #12]
   21d7c:	f01b fb86 	bl	3d48c <flash_get_write_block_size>
	if (ctx->buf_bytes % fill_length) {
   21d80:	68a5      	ldr	r5, [r4, #8]
   21d82:	fbb5 f3f0 	udiv	r3, r5, r0
   21d86:	fb00 5513 	mls	r5, r0, r3, r5
   21d8a:	b15d      	cbz	r5, 21da4 <flash_sync+0x54>
		fill_length -= ctx->buf_bytes % fill_length;
   21d8c:	1b45      	subs	r5, r0, r5
		filler = flash_get_parameters(ctx->fdev)->erase_value;
   21d8e:	68e0      	ldr	r0, [r4, #12]
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   21d90:	6883      	ldr	r3, [r0, #8]
   21d92:	68db      	ldr	r3, [r3, #12]
   21d94:	4798      	blx	r3
		memset(ctx->buf + ctx->buf_bytes, filler, fill_length);
   21d96:	6827      	ldr	r7, [r4, #0]
   21d98:	68a3      	ldr	r3, [r4, #8]
__ssp_bos_icheck3(memset, void *, int)
   21d9a:	7901      	ldrb	r1, [r0, #4]
   21d9c:	462a      	mov	r2, r5
   21d9e:	18f8      	adds	r0, r7, r3
   21da0:	f01f fb20 	bl	413e4 <memset>
	buf_bytes_aligned = ctx->buf_bytes + fill_length;
   21da4:	68a3      	ldr	r3, [r4, #8]
	rc = flash_write(ctx->fdev, write_addr, ctx->buf, buf_bytes_aligned);
   21da6:	68e0      	ldr	r0, [r4, #12]
   21da8:	6822      	ldr	r2, [r4, #0]
	buf_bytes_aligned = ctx->buf_bytes + fill_length;
   21daa:	442b      	add	r3, r5
	rc = api->write(dev, offset, data, len);
   21dac:	6881      	ldr	r1, [r0, #8]
   21dae:	684d      	ldr	r5, [r1, #4]
   21db0:	4631      	mov	r1, r6
   21db2:	47a8      	blx	r5
	if (rc != 0) {
   21db4:	4605      	mov	r5, r0
   21db6:	b120      	cbz	r0, 21dc2 <flash_sync+0x72>
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
   21db8:	4602      	mov	r2, r0
   21dba:	4633      	mov	r3, r6
   21dbc:	2145      	movs	r1, #69	; 0x45
   21dbe:	481a      	ldr	r0, [pc, #104]	; (21e28 <flash_sync+0xd8>)
   21dc0:	e7d7      	b.n	21d72 <flash_sync+0x22>
	if (ctx->callback) {
   21dc2:	69e3      	ldr	r3, [r4, #28]
   21dc4:	b9e3      	cbnz	r3, 21e00 <flash_sync+0xb0>
	ctx->bytes_written += ctx->buf_bytes;
   21dc6:	6923      	ldr	r3, [r4, #16]
   21dc8:	68a2      	ldr	r2, [r4, #8]
   21dca:	4413      	add	r3, r2
   21dcc:	6123      	str	r3, [r4, #16]
	ctx->buf_bytes = 0U;
   21dce:	2300      	movs	r3, #0
   21dd0:	60a3      	str	r3, [r4, #8]
	return rc;
   21dd2:	e7d0      	b.n	21d76 <flash_sync+0x26>
			ctx->buf[i] = ~ctx->buf[i];
   21dd4:	5c53      	ldrb	r3, [r2, r1]
   21dd6:	43db      	mvns	r3, r3
   21dd8:	5453      	strb	r3, [r2, r1]
		for (int i = 0; i < ctx->buf_bytes; i++) {
   21dda:	3101      	adds	r1, #1
   21ddc:	68a3      	ldr	r3, [r4, #8]
			ctx->buf[i] = ~ctx->buf[i];
   21dde:	6822      	ldr	r2, [r4, #0]
		for (int i = 0; i < ctx->buf_bytes; i++) {
   21de0:	4299      	cmp	r1, r3
   21de2:	d3f7      	bcc.n	21dd4 <flash_sync+0x84>
		rc = flash_read(ctx->fdev, write_addr, ctx->buf,
   21de4:	68e0      	ldr	r0, [r4, #12]
	return api->read(dev, offset, data, len);
   21de6:	6881      	ldr	r1, [r0, #8]
   21de8:	680f      	ldr	r7, [r1, #0]
   21dea:	4631      	mov	r1, r6
   21dec:	47b8      	blx	r7
		if (rc != 0) {
   21dee:	4607      	mov	r7, r0
   21df0:	b140      	cbz	r0, 21e04 <flash_sync+0xb4>
			LOG_ERR("flash read failed: %d", rc);
   21df2:	4602      	mov	r2, r0
   21df4:	2145      	movs	r1, #69	; 0x45
   21df6:	480d      	ldr	r0, [pc, #52]	; (21e2c <flash_sync+0xdc>)
   21df8:	f01a fe5a 	bl	3cab0 <z_log_minimal_printk>
			return rc;
   21dfc:	463d      	mov	r5, r7
   21dfe:	e7ba      	b.n	21d76 <flash_sync+0x26>
		for (int i = 0; i < ctx->buf_bytes; i++) {
   21e00:	4601      	mov	r1, r0
   21e02:	e7eb      	b.n	21ddc <flash_sync+0x8c>
		rc = ctx->callback(ctx->buf, ctx->buf_bytes, write_addr);
   21e04:	4632      	mov	r2, r6
   21e06:	69e3      	ldr	r3, [r4, #28]
   21e08:	68a1      	ldr	r1, [r4, #8]
   21e0a:	6820      	ldr	r0, [r4, #0]
   21e0c:	4798      	blx	r3
		if (rc != 0) {
   21e0e:	4606      	mov	r6, r0
   21e10:	2800      	cmp	r0, #0
   21e12:	d0d8      	beq.n	21dc6 <flash_sync+0x76>
			LOG_ERR("callback failed: %d", rc);
   21e14:	4602      	mov	r2, r0
   21e16:	2145      	movs	r1, #69	; 0x45
   21e18:	4805      	ldr	r0, [pc, #20]	; (21e30 <flash_sync+0xe0>)
   21e1a:	f01a fe49 	bl	3cab0 <z_log_minimal_printk>
			return rc;
   21e1e:	4635      	mov	r5, r6
   21e20:	e7a9      	b.n	21d76 <flash_sync+0x26>
   21e22:	bf00      	nop
   21e24:	000441ff 	.word	0x000441ff
   21e28:	00044232 	.word	0x00044232
   21e2c:	0004425b 	.word	0x0004425b
   21e30:	00044276 	.word	0x00044276

00021e34 <stream_flash_init>:

int stream_flash_init(struct stream_flash_ctx *ctx, const struct device *fdev,
		      uint8_t *buf, size_t buf_len, size_t offset, size_t size,
		      stream_flash_callback_t cb)
{
   21e34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   21e38:	460d      	mov	r5, r1
   21e3a:	e9dd 860a 	ldrd	r8, r6, [sp, #40]	; 0x28
   21e3e:	4691      	mov	r9, r2
   21e40:	461f      	mov	r7, r3
	if (!ctx || !fdev || !buf) {
   21e42:	4604      	mov	r4, r0
   21e44:	b920      	cbnz	r0, 21e50 <stream_flash_init+0x1c>
	}

	if ((offset + size) > inspect_flash_ctx.total_size ||
	    offset % flash_get_write_block_size(fdev)) {
		LOG_ERR("Incorrect parameter");
		return -EFAULT;
   21e46:	f06f 000d 	mvn.w	r0, #13
#ifdef CONFIG_STREAM_FLASH_ERASE
	ctx->last_erased_page_start_offset = -1;
#endif

	return 0;
}
   21e4a:	b003      	add	sp, #12
   21e4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!ctx || !fdev || !buf) {
   21e50:	2900      	cmp	r1, #0
   21e52:	d0f8      	beq.n	21e46 <stream_flash_init+0x12>
   21e54:	2a00      	cmp	r2, #0
   21e56:	d0f6      	beq.n	21e46 <stream_flash_init+0x12>
	struct _inspect_flash inspect_flash_ctx = {
   21e58:	9300      	str	r3, [sp, #0]
   21e5a:	2300      	movs	r3, #0
	if (buf_len % flash_get_write_block_size(fdev)) {
   21e5c:	4608      	mov	r0, r1
	struct _inspect_flash inspect_flash_ctx = {
   21e5e:	9301      	str	r3, [sp, #4]
	if (buf_len % flash_get_write_block_size(fdev)) {
   21e60:	f01b fb14 	bl	3d48c <flash_get_write_block_size>
   21e64:	fbb7 f3f0 	udiv	r3, r7, r0
   21e68:	fb03 7010 	mls	r0, r3, r0, r7
   21e6c:	b120      	cbz	r0, 21e78 <stream_flash_init+0x44>
		LOG_ERR("Buffer size is not aligned to minimal write-block-size");
   21e6e:	2145      	movs	r1, #69	; 0x45
   21e70:	4817      	ldr	r0, [pc, #92]	; (21ed0 <stream_flash_init+0x9c>)
		LOG_ERR("Incorrect parameter");
   21e72:	f01a fe1d 	bl	3cab0 <z_log_minimal_printk>
   21e76:	e7e6      	b.n	21e46 <stream_flash_init+0x12>
	flash_page_foreach(fdev, find_flash_total_size, &inspect_flash_ctx);
   21e78:	466a      	mov	r2, sp
   21e7a:	4628      	mov	r0, r5
   21e7c:	4915      	ldr	r1, [pc, #84]	; (21ed4 <stream_flash_init+0xa0>)
   21e7e:	f01c fca7 	bl	3e7d0 <flash_page_foreach>
	if (inspect_flash_ctx.total_size == 0) {
   21e82:	9b01      	ldr	r3, [sp, #4]
   21e84:	2b00      	cmp	r3, #0
   21e86:	d0de      	beq.n	21e46 <stream_flash_init+0x12>
	if ((offset + size) > inspect_flash_ctx.total_size ||
   21e88:	eb06 0208 	add.w	r2, r6, r8
   21e8c:	4293      	cmp	r3, r2
   21e8e:	d202      	bcs.n	21e96 <stream_flash_init+0x62>
		LOG_ERR("Incorrect parameter");
   21e90:	2145      	movs	r1, #69	; 0x45
   21e92:	4811      	ldr	r0, [pc, #68]	; (21ed8 <stream_flash_init+0xa4>)
   21e94:	e7ed      	b.n	21e72 <stream_flash_init+0x3e>
	    offset % flash_get_write_block_size(fdev)) {
   21e96:	4628      	mov	r0, r5
   21e98:	f01b faf8 	bl	3d48c <flash_get_write_block_size>
   21e9c:	fbb8 f3f0 	udiv	r3, r8, r0
   21ea0:	fb03 8010 	mls	r0, r3, r0, r8
	if ((offset + size) > inspect_flash_ctx.total_size ||
   21ea4:	2800      	cmp	r0, #0
   21ea6:	d1f3      	bne.n	21e90 <stream_flash_init+0x5c>
	ctx->buf_len = buf_len;
   21ea8:	e9c4 9700 	strd	r9, r7, [r4]
	ctx->fdev = fdev;
   21eac:	60e5      	str	r5, [r4, #12]
	ctx->bytes_written = 0;
   21eae:	6120      	str	r0, [r4, #16]
	ctx->buf_bytes = 0U;
   21eb0:	60a0      	str	r0, [r4, #8]
	ctx->offset = offset;
   21eb2:	f8c4 8014 	str.w	r8, [r4, #20]
	ctx->available = (size == 0 ? inspect_flash_ctx.total_size - offset :
   21eb6:	b916      	cbnz	r6, 21ebe <stream_flash_init+0x8a>
   21eb8:	9e01      	ldr	r6, [sp, #4]
   21eba:	eba6 0608 	sub.w	r6, r6, r8
	ctx->callback = cb;
   21ebe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	return 0;
   21ec0:	2000      	movs	r0, #0
	ctx->callback = cb;
   21ec2:	61e3      	str	r3, [r4, #28]
	ctx->last_erased_page_start_offset = -1;
   21ec4:	f04f 33ff 	mov.w	r3, #4294967295
	ctx->available = (size == 0 ? inspect_flash_ctx.total_size - offset :
   21ec8:	61a6      	str	r6, [r4, #24]
	ctx->last_erased_page_start_offset = -1;
   21eca:	6223      	str	r3, [r4, #32]
	return 0;
   21ecc:	e7bd      	b.n	21e4a <stream_flash_init+0x16>
   21ece:	bf00      	nop
   21ed0:	0004428f 	.word	0x0004428f
   21ed4:	00021cd9 	.word	0x00021cd9
   21ed8:	000442cb 	.word	0x000442cb

00021edc <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   21edc:	4b10      	ldr	r3, [pc, #64]	; (21f20 <settings_save_one+0x44>)
{
   21ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   21ee2:	681c      	ldr	r4, [r3, #0]
{
   21ee4:	4605      	mov	r5, r0
   21ee6:	460e      	mov	r6, r1
   21ee8:	4617      	mov	r7, r2
	if (!cs) {
   21eea:	b1ac      	cbz	r4, 21f18 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   21eec:	f04f 32ff 	mov.w	r2, #4294967295
   21ef0:	f04f 33ff 	mov.w	r3, #4294967295
   21ef4:	480b      	ldr	r0, [pc, #44]	; (21f24 <settings_save_one+0x48>)
   21ef6:	f014 fcdd 	bl	368b4 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   21efa:	6863      	ldr	r3, [r4, #4]
   21efc:	4632      	mov	r2, r6
   21efe:	f8d3 8008 	ldr.w	r8, [r3, #8]
   21f02:	4629      	mov	r1, r5
   21f04:	463b      	mov	r3, r7
   21f06:	4620      	mov	r0, r4
   21f08:	47c0      	blx	r8
   21f0a:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   21f0c:	4805      	ldr	r0, [pc, #20]	; (21f24 <settings_save_one+0x48>)
   21f0e:	f014 fda3 	bl	36a58 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   21f12:	4620      	mov	r0, r4
   21f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   21f18:	f06f 0401 	mvn.w	r4, #1
   21f1c:	e7f9      	b.n	21f12 <settings_save_one+0x36>
   21f1e:	bf00      	nop
   21f20:	2001912c 	.word	0x2001912c
   21f24:	20014f90 	.word	0x20014f90

00021f28 <settings_src_register>:
	parent->next = child;
   21f28:	2300      	movs	r3, #0
   21f2a:	6003      	str	r3, [r0, #0]
	return list->tail;
   21f2c:	4b04      	ldr	r3, [pc, #16]	; (21f40 <settings_src_register+0x18>)
   21f2e:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   21f30:	b912      	cbnz	r2, 21f38 <settings_src_register+0x10>
	list->head = node;
   21f32:	e9c3 0000 	strd	r0, r0, [r3]
}
   21f36:	4770      	bx	lr
	parent->next = child;
   21f38:	6010      	str	r0, [r2, #0]
	list->tail = node;
   21f3a:	6058      	str	r0, [r3, #4]
}
   21f3c:	4770      	bx	lr
   21f3e:	bf00      	nop
   21f40:	20019124 	.word	0x20019124

00021f44 <settings_dst_register>:
	settings_save_dst = cs;
   21f44:	4b01      	ldr	r3, [pc, #4]	; (21f4c <settings_dst_register+0x8>)
   21f46:	6018      	str	r0, [r3, #0]
}
   21f48:	4770      	bx	lr
   21f4a:	bf00      	nop
   21f4c:	2001912c 	.word	0x2001912c

00021f50 <settings_load_subtree>:
	const struct settings_load_arg arg = {
   21f50:	2300      	movs	r3, #0
{
   21f52:	b530      	push	{r4, r5, lr}
   21f54:	b085      	sub	sp, #20
   21f56:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   21f58:	e9cd 3302 	strd	r3, r3, [sp, #8]
   21f5c:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   21f5e:	f04f 33ff 	mov.w	r3, #4294967295
   21f62:	f04f 32ff 	mov.w	r2, #4294967295
   21f66:	480b      	ldr	r0, [pc, #44]	; (21f94 <settings_load_subtree+0x44>)
   21f68:	f014 fca4 	bl	368b4 <z_impl_k_mutex_lock>
	return list->head;
   21f6c:	4b0a      	ldr	r3, [pc, #40]	; (21f98 <settings_load_subtree+0x48>)
   21f6e:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   21f70:	b134      	cbz	r4, 21f80 <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
   21f72:	6863      	ldr	r3, [r4, #4]
   21f74:	4620      	mov	r0, r4
   21f76:	681b      	ldr	r3, [r3, #0]
   21f78:	a901      	add	r1, sp, #4
   21f7a:	4798      	blx	r3
	return node->next;
   21f7c:	6824      	ldr	r4, [r4, #0]
   21f7e:	e7f7      	b.n	21f70 <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
   21f80:	4628      	mov	r0, r5
   21f82:	f000 f8ad 	bl	220e0 <settings_commit_subtree>
   21f86:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   21f88:	4802      	ldr	r0, [pc, #8]	; (21f94 <settings_load_subtree+0x44>)
   21f8a:	f014 fd65 	bl	36a58 <z_impl_k_mutex_unlock>
}
   21f8e:	4620      	mov	r0, r4
   21f90:	b005      	add	sp, #20
   21f92:	bd30      	pop	{r4, r5, pc}
   21f94:	20014f90 	.word	0x20014f90
   21f98:	20019124 	.word	0x20019124

00021f9c <settings_store_init>:
	list->head = NULL;
   21f9c:	2200      	movs	r2, #0
   21f9e:	4b02      	ldr	r3, [pc, #8]	; (21fa8 <settings_store_init+0xc>)
	list->tail = NULL;
   21fa0:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   21fa4:	4770      	bx	lr
   21fa6:	bf00      	nop
   21fa8:	20019124 	.word	0x20019124

00021fac <settings_init>:
	list->head = NULL;
   21fac:	2200      	movs	r2, #0
   21fae:	4b02      	ldr	r3, [pc, #8]	; (21fb8 <settings_init+0xc>)
	list->tail = NULL;
   21fb0:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   21fb4:	f7ff bff2 	b.w	21f9c <settings_store_init>
   21fb8:	20019130 	.word	0x20019130

00021fbc <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   21fbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   21fc0:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   21fc2:	460e      	mov	r6, r1
   21fc4:	b109      	cbz	r1, 21fca <settings_parse_and_lookup+0xe>
		*next = NULL;
   21fc6:	2300      	movs	r3, #0
   21fc8:	600b      	str	r3, [r1, #0]
   21fca:	2500      	movs	r5, #0
   21fcc:	4c22      	ldr	r4, [pc, #136]	; (22058 <settings_parse_and_lookup+0x9c>)
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   21fce:	f8df 8094 	ldr.w	r8, [pc, #148]	; 22064 <settings_parse_and_lookup+0xa8>
   21fd2:	f8df 9094 	ldr.w	r9, [pc, #148]	; 22068 <settings_parse_and_lookup+0xac>
   21fd6:	4544      	cmp	r4, r8
   21fd8:	d908      	bls.n	21fec <settings_parse_and_lookup+0x30>
   21fda:	4649      	mov	r1, r9
   21fdc:	481f      	ldr	r0, [pc, #124]	; (2205c <settings_parse_and_lookup+0xa0>)
   21fde:	2294      	movs	r2, #148	; 0x94
   21fe0:	f01a fd2c 	bl	3ca3c <assert_print>
   21fe4:	2194      	movs	r1, #148	; 0x94
   21fe6:	4648      	mov	r0, r9
   21fe8:	f01a fd21 	bl	3ca2e <assert_post_action>
   21fec:	4544      	cmp	r4, r8
   21fee:	d310      	bcc.n	22012 <settings_parse_and_lookup+0x56>
	return list->head;
   21ff0:	4b1b      	ldr	r3, [pc, #108]	; (22060 <settings_parse_and_lookup+0xa4>)
   21ff2:	681c      	ldr	r4, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   21ff4:	b35c      	cbz	r4, 2204e <settings_parse_and_lookup+0x92>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   21ff6:	4638      	mov	r0, r7
   21ff8:	aa01      	add	r2, sp, #4
   21ffa:	f854 1c14 	ldr.w	r1, [r4, #-20]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   21ffe:	3c14      	subs	r4, #20
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   22000:	f01b fa90 	bl	3d524 <settings_name_steq>
   22004:	b308      	cbz	r0, 2204a <settings_parse_and_lookup+0x8e>
			continue;
		}
		if (!bestmatch) {
   22006:	b9cd      	cbnz	r5, 2203c <settings_parse_and_lookup+0x80>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
   22008:	b10e      	cbz	r6, 2200e <settings_parse_and_lookup+0x52>
				*next = tmpnext;
   2200a:	9b01      	ldr	r3, [sp, #4]
   2200c:	6033      	str	r3, [r6, #0]
   2200e:	4625      	mov	r5, r4
   22010:	e01b      	b.n	2204a <settings_parse_and_lookup+0x8e>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   22012:	4638      	mov	r0, r7
   22014:	6821      	ldr	r1, [r4, #0]
   22016:	aa01      	add	r2, sp, #4
   22018:	f01b fa84 	bl	3d524 <settings_name_steq>
   2201c:	b160      	cbz	r0, 22038 <settings_parse_and_lookup+0x7c>
		if (!bestmatch) {
   2201e:	b925      	cbnz	r5, 2202a <settings_parse_and_lookup+0x6e>
			if (next) {
   22020:	b10e      	cbz	r6, 22026 <settings_parse_and_lookup+0x6a>
				*next = tmpnext;
   22022:	9b01      	ldr	r3, [sp, #4]
   22024:	6033      	str	r3, [r6, #0]
   22026:	4625      	mov	r5, r4
   22028:	e006      	b.n	22038 <settings_parse_and_lookup+0x7c>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   2202a:	2200      	movs	r2, #0
   2202c:	6829      	ldr	r1, [r5, #0]
   2202e:	6820      	ldr	r0, [r4, #0]
   22030:	f01b fa78 	bl	3d524 <settings_name_steq>
   22034:	2800      	cmp	r0, #0
   22036:	d1f3      	bne.n	22020 <settings_parse_and_lookup+0x64>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   22038:	3414      	adds	r4, #20
   2203a:	e7cc      	b.n	21fd6 <settings_parse_and_lookup+0x1a>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   2203c:	2200      	movs	r2, #0
   2203e:	6829      	ldr	r1, [r5, #0]
   22040:	6820      	ldr	r0, [r4, #0]
   22042:	f01b fa6f 	bl	3d524 <settings_name_steq>
   22046:	2800      	cmp	r0, #0
   22048:	d1de      	bne.n	22008 <settings_parse_and_lookup+0x4c>
	return node->next;
   2204a:	6964      	ldr	r4, [r4, #20]
   2204c:	e7d2      	b.n	21ff4 <settings_parse_and_lookup+0x38>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   2204e:	4628      	mov	r0, r5
   22050:	b003      	add	sp, #12
   22052:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22056:	bf00      	nop
   22058:	000425b0 	.word	0x000425b0
   2205c:	00043ff2 	.word	0x00043ff2
   22060:	20019130 	.word	0x20019130
   22064:	000425ec 	.word	0x000425ec
   22068:	000442f1 	.word	0x000442f1

0002206c <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   2206c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22070:	b086      	sub	sp, #24
   22072:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   22074:	4604      	mov	r4, r0
   22076:	460d      	mov	r5, r1
   22078:	4616      	mov	r6, r2
	int rc;
	const char *name_key = name;
   2207a:	9005      	str	r0, [sp, #20]

	if (load_arg && load_arg->subtree &&
   2207c:	b1bf      	cbz	r7, 220ae <settings_call_set_handler+0x42>
   2207e:	6839      	ldr	r1, [r7, #0]
   22080:	b181      	cbz	r1, 220a4 <settings_call_set_handler+0x38>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   22082:	aa05      	add	r2, sp, #20
   22084:	9303      	str	r3, [sp, #12]
   22086:	f01b fa4d 	bl	3d524 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   2208a:	9b03      	ldr	r3, [sp, #12]
   2208c:	b950      	cbnz	r0, 220a4 <settings_call_set_handler+0x38>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
   2208e:	2000      	movs	r0, #0
   22090:	e005      	b.n	2209e <settings_call_set_handler+0x32>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   22092:	68ba      	ldr	r2, [r7, #8]
   22094:	4629      	mov	r1, r5
   22096:	9200      	str	r2, [sp, #0]
   22098:	9805      	ldr	r0, [sp, #20]
   2209a:	4632      	mov	r2, r6
   2209c:	47c0      	blx	r8
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
   2209e:	b006      	add	sp, #24
   220a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (load_arg && load_arg->cb) {
   220a4:	f8d7 8004 	ldr.w	r8, [r7, #4]
   220a8:	f1b8 0f00 	cmp.w	r8, #0
   220ac:	d1f1      	bne.n	22092 <settings_call_set_handler+0x26>
		ch = settings_parse_and_lookup(name, &name_key);
   220ae:	4620      	mov	r0, r4
   220b0:	a905      	add	r1, sp, #20
   220b2:	9303      	str	r3, [sp, #12]
   220b4:	f7ff ff82 	bl	21fbc <settings_parse_and_lookup>
		if (!ch) {
   220b8:	2800      	cmp	r0, #0
   220ba:	d0e8      	beq.n	2208e <settings_call_set_handler+0x22>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   220bc:	6887      	ldr	r7, [r0, #8]
   220be:	9b03      	ldr	r3, [sp, #12]
   220c0:	4632      	mov	r2, r6
   220c2:	4629      	mov	r1, r5
   220c4:	9805      	ldr	r0, [sp, #20]
   220c6:	47b8      	blx	r7
		if (rc != 0) {
   220c8:	4603      	mov	r3, r0
   220ca:	2800      	cmp	r0, #0
   220cc:	d0df      	beq.n	2208e <settings_call_set_handler+0x22>
			LOG_ERR("set-value failure. key: %s error(%d)",
   220ce:	4622      	mov	r2, r4
   220d0:	2145      	movs	r1, #69	; 0x45
   220d2:	4802      	ldr	r0, [pc, #8]	; (220dc <settings_call_set_handler+0x70>)
   220d4:	f01a fcec 	bl	3cab0 <z_log_minimal_printk>
   220d8:	e7d9      	b.n	2208e <settings_call_set_handler+0x22>
   220da:	bf00      	nop
   220dc:	00044323 	.word	0x00044323

000220e0 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   220e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   220e4:	4606      	mov	r6, r0
	int rc;
	int rc2;

	rc = 0;
   220e6:	2500      	movs	r5, #0

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   220e8:	4c1d      	ldr	r4, [pc, #116]	; (22160 <settings_commit_subtree+0x80>)
   220ea:	4f1e      	ldr	r7, [pc, #120]	; (22164 <settings_commit_subtree+0x84>)
   220ec:	f8df 8080 	ldr.w	r8, [pc, #128]	; 22170 <settings_commit_subtree+0x90>
   220f0:	42bc      	cmp	r4, r7
   220f2:	d908      	bls.n	22106 <settings_commit_subtree+0x26>
   220f4:	4641      	mov	r1, r8
   220f6:	481c      	ldr	r0, [pc, #112]	; (22168 <settings_commit_subtree+0x88>)
   220f8:	22f4      	movs	r2, #244	; 0xf4
   220fa:	f01a fc9f 	bl	3ca3c <assert_print>
   220fe:	21f4      	movs	r1, #244	; 0xf4
   22100:	4640      	mov	r0, r8
   22102:	f01a fc94 	bl	3ca2e <assert_post_action>
   22106:	42bc      	cmp	r4, r7
   22108:	d308      	bcc.n	2211c <settings_commit_subtree+0x3c>
	return list->head;
   2210a:	4b18      	ldr	r3, [pc, #96]	; (2216c <settings_commit_subtree+0x8c>)
   2210c:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   2210e:	b324      	cbz	r4, 2215a <settings_commit_subtree+0x7a>
   22110:	3c14      	subs	r4, #20
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   22112:	b9ae      	cbnz	r6, 22140 <settings_commit_subtree+0x60>
			continue;
		}
		if (ch->h_commit) {
   22114:	68e3      	ldr	r3, [r4, #12]
   22116:	b9db      	cbnz	r3, 22150 <settings_commit_subtree+0x70>
	return node->next;
   22118:	6964      	ldr	r4, [r4, #20]
   2211a:	e7f8      	b.n	2210e <settings_commit_subtree+0x2e>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   2211c:	b91e      	cbnz	r6, 22126 <settings_commit_subtree+0x46>
		if (ch->h_commit) {
   2211e:	68e3      	ldr	r3, [r4, #12]
   22120:	b94b      	cbnz	r3, 22136 <settings_commit_subtree+0x56>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   22122:	3414      	adds	r4, #20
   22124:	e7e4      	b.n	220f0 <settings_commit_subtree+0x10>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   22126:	2200      	movs	r2, #0
   22128:	4631      	mov	r1, r6
   2212a:	6820      	ldr	r0, [r4, #0]
   2212c:	f01b f9fa 	bl	3d524 <settings_name_steq>
   22130:	2800      	cmp	r0, #0
   22132:	d1f4      	bne.n	2211e <settings_commit_subtree+0x3e>
   22134:	e7f5      	b.n	22122 <settings_commit_subtree+0x42>
			rc2 = ch->h_commit();
   22136:	4798      	blx	r3
				rc = rc2;
   22138:	2d00      	cmp	r5, #0
   2213a:	bf08      	it	eq
   2213c:	4605      	moveq	r5, r0
   2213e:	e7f0      	b.n	22122 <settings_commit_subtree+0x42>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   22140:	2200      	movs	r2, #0
   22142:	4631      	mov	r1, r6
   22144:	6820      	ldr	r0, [r4, #0]
   22146:	f01b f9ed 	bl	3d524 <settings_name_steq>
   2214a:	2800      	cmp	r0, #0
   2214c:	d1e2      	bne.n	22114 <settings_commit_subtree+0x34>
   2214e:	e7e3      	b.n	22118 <settings_commit_subtree+0x38>
			rc2 = ch->h_commit();
   22150:	4798      	blx	r3
			if (!rc) {
				rc = rc2;
   22152:	2d00      	cmp	r5, #0
   22154:	bf08      	it	eq
   22156:	4605      	moveq	r5, r0
   22158:	e7de      	b.n	22118 <settings_commit_subtree+0x38>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   2215a:	4628      	mov	r0, r5
   2215c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22160:	000425b0 	.word	0x000425b0
   22164:	000425ec 	.word	0x000425ec
   22168:	00043ff2 	.word	0x00043ff2
   2216c:	20019130 	.word	0x20019130
   22170:	000442f1 	.word	0x000442f1

00022174 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   22174:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   22176:	4c06      	ldr	r4, [pc, #24]	; (22190 <settings_subsys_init+0x1c>)
   22178:	7823      	ldrb	r3, [r4, #0]
   2217a:	b93b      	cbnz	r3, 2218c <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
   2217c:	f7ff ff16 	bl	21fac <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
   22180:	f000 fa94 	bl	226ac <settings_backend_init>

	if (!err) {
   22184:	b908      	cbnz	r0, 2218a <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
   22186:	2301      	movs	r3, #1
   22188:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
   2218a:	bd10      	pop	{r4, pc}
		return 0;
   2218c:	2000      	movs	r0, #0
   2218e:	e7fc      	b.n	2218a <settings_subsys_init+0x16>
   22190:	2001a5a2 	.word	0x2001a5a2

00022194 <settings_line_raw_read_until>:
 * -ERCODE on storage errors
 */
static int settings_line_raw_read_until(off_t seek, char *out, size_t len_req,
				 size_t *len_read, char const *until_char,
				 void *cb_arg)
{
   22194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t rem_size, len;
	char temp_buf[16]; /* buffer for fit read-block-size requirements */
	size_t exp_size, read_size;
	uint8_t rbs = settings_io_cb.rwbs;
   22198:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 2224c <settings_line_raw_read_until+0xb8>
{
   2219c:	b08b      	sub	sp, #44	; 0x2c
   2219e:	9302      	str	r3, [sp, #8]
	uint8_t rbs = settings_io_cb.rwbs;
   221a0:	f89a 300c 	ldrb.w	r3, [sl, #12]
{
   221a4:	4606      	mov	r6, r0
   221a6:	4688      	mov	r8, r1
	off_t off;
	int rc = -EINVAL;

	if (len_req == 0) {
   221a8:	4615      	mov	r5, r2
	uint8_t rbs = settings_io_cb.rwbs;
   221aa:	9301      	str	r3, [sp, #4]
	if (len_req == 0) {
   221ac:	2a00      	cmp	r2, #0
   221ae:	d046      	beq.n	2223e <settings_line_raw_read_until+0xaa>
   221b0:	4617      	mov	r7, r2
	rem_size = len_req;

	while (rem_size) {
		off = seek / rbs * rbs;

		read_size = sizeof(temp_buf);
   221b2:	2310      	movs	r3, #16
   221b4:	9305      	str	r3, [sp, #20]
		off = seek / rbs * rbs;
   221b6:	9b01      	ldr	r3, [sp, #4]
		exp_size = read_size;

		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
   221b8:	f8da 4000 	ldr.w	r4, [sl]
		off = seek / rbs * rbs;
   221bc:	fb96 fbf3 	sdiv	fp, r6, r3
   221c0:	fb03 fb0b 	mul.w	fp, r3, fp
		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
   221c4:	9815      	ldr	r0, [sp, #84]	; 0x54
   221c6:	4659      	mov	r1, fp
   221c8:	ab05      	add	r3, sp, #20
   221ca:	aa06      	add	r2, sp, #24
   221cc:	47a0      	blx	r4
		if (rc) {
   221ce:	4604      	mov	r4, r0
   221d0:	2800      	cmp	r0, #0
   221d2:	d137      	bne.n	22244 <settings_line_raw_read_until+0xb0>
			return -EIO;
		}

		off = seek - off;
		len = read_size - off;
   221d4:	9a05      	ldr	r2, [sp, #20]
   221d6:	eba6 0b0b 	sub.w	fp, r6, fp
   221da:	eba2 020b 	sub.w	r2, r2, fp
		len = MIN(rem_size, len);
   221de:	42ba      	cmp	r2, r7
   221e0:	bf28      	it	cs
   221e2:	463a      	movcs	r2, r7

		if (until_char != NULL) {
			char *pend;
			pend = memchr(&temp_buf[off], *until_char, len);
   221e4:	ab06      	add	r3, sp, #24
   221e6:	449b      	add	fp, r3
		if (until_char != NULL) {
   221e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
		len = MIN(rem_size, len);
   221ea:	4691      	mov	r9, r2
		if (until_char != NULL) {
   221ec:	b31b      	cbz	r3, 22236 <settings_line_raw_read_until+0xa2>
			pend = memchr(&temp_buf[off], *until_char, len);
   221ee:	4658      	mov	r0, fp
   221f0:	7819      	ldrb	r1, [r3, #0]
   221f2:	f01f f8b9 	bl	41368 <memchr>
			if (pend != NULL) {
   221f6:	b300      	cbz	r0, 2223a <settings_line_raw_read_until+0xa6>
				len = pend - &temp_buf[off];
				rc = 1; /* will cause loop expiration */
   221f8:	2301      	movs	r3, #1
				len = pend - &temp_buf[off];
   221fa:	eba0 090b 	sub.w	r9, r0, fp
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   221fe:	4659      	mov	r1, fp
   22200:	464a      	mov	r2, r9
   22202:	4640      	mov	r0, r8
   22204:	9303      	str	r3, [sp, #12]
   22206:	f01f f8cd 	bl	413a4 <memcpy>

		memcpy(out, &temp_buf[off], len);

		rem_size -= len;

		if (exp_size > read_size || rc) {
   2220a:	9905      	ldr	r1, [sp, #20]
   2220c:	9b03      	ldr	r3, [sp, #12]
   2220e:	290f      	cmp	r1, #15
		rem_size -= len;
   22210:	eba7 0709 	sub.w	r7, r7, r9
		if (exp_size > read_size || rc) {
   22214:	d904      	bls.n	22220 <settings_line_raw_read_until+0x8c>
   22216:	b91b      	cbnz	r3, 22220 <settings_line_raw_read_until+0x8c>
			break;
		}

		out += len;
   22218:	44c8      	add	r8, r9
		seek += len;
   2221a:	444e      	add	r6, r9
	while (rem_size) {
   2221c:	2f00      	cmp	r7, #0
   2221e:	d1c8      	bne.n	221b2 <settings_line_raw_read_until+0x1e>
	}

	*len_read = len_req - rem_size;
   22220:	9a02      	ldr	r2, [sp, #8]
   22222:	1bed      	subs	r5, r5, r7
   22224:	6015      	str	r5, [r2, #0]

	if (until_char != NULL) {
   22226:	9a14      	ldr	r2, [sp, #80]	; 0x50
   22228:	b10a      	cbz	r2, 2222e <settings_line_raw_read_until+0x9a>
		return (rc) ? 0 : 1;
   2222a:	f083 0401 	eor.w	r4, r3, #1
	}

	return 0;
}
   2222e:	4620      	mov	r0, r4
   22230:	b00b      	add	sp, #44	; 0x2c
   22232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
   22236:	9b14      	ldr	r3, [sp, #80]	; 0x50
   22238:	e7e1      	b.n	221fe <settings_line_raw_read_until+0x6a>
   2223a:	4623      	mov	r3, r4
   2223c:	e7df      	b.n	221fe <settings_line_raw_read_until+0x6a>
		return -EINVAL;
   2223e:	f06f 0415 	mvn.w	r4, #21
   22242:	e7f4      	b.n	2222e <settings_line_raw_read_until+0x9a>
			return -EIO;
   22244:	f06f 0404 	mvn.w	r4, #4
   22248:	e7f1      	b.n	2222e <settings_line_raw_read_until+0x9a>
   2224a:	bf00      	nop
   2224c:	20019138 	.word	0x20019138

00022250 <settings_line_write>:
{
   22250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t wbs = settings_io_cb.rwbs;
   22254:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 22314 <settings_line_write+0xc4>
{
   22258:	b087      	sub	sp, #28
	uint8_t wbs = settings_io_cb.rwbs;
   2225a:	f899 800c 	ldrb.w	r8, [r9, #12]
{
   2225e:	4682      	mov	sl, r0
   22260:	468b      	mov	fp, r1
   22262:	4617      	mov	r7, r2
   22264:	9301      	str	r3, [sp, #4]
	rem = strlen(name);
   22266:	f7fa ffec 	bl	1d242 <strlen>
	w_size = rem - rem % wbs;
   2226a:	fbb0 f4f8 	udiv	r4, r0, r8
   2226e:	fb08 0414 	mls	r4, r8, r4, r0
   22272:	1b05      	subs	r5, r0, r4
	rc = settings_io_cb.write_cb(cb_arg, w_loc, name, w_size);
   22274:	462b      	mov	r3, r5
   22276:	f8d9 6004 	ldr.w	r6, [r9, #4]
   2227a:	4652      	mov	r2, sl
   2227c:	9901      	ldr	r1, [sp, #4]
   2227e:	9810      	ldr	r0, [sp, #64]	; 0x40
   22280:	47b0      	blx	r6
	w_loc += w_size;
   22282:	9b01      	ldr	r3, [sp, #4]
   22284:	442b      	add	r3, r5
   22286:	461e      	mov	r6, r3
	if (rem) {
   22288:	b134      	cbz	r4, 22298 <settings_line_write+0x48>
		memcpy(w_buf, name, rem);
   2228a:	2310      	movs	r3, #16
   2228c:	4622      	mov	r2, r4
   2228e:	eb0a 0105 	add.w	r1, sl, r5
   22292:	a802      	add	r0, sp, #8
   22294:	f01f f893 	bl	413be <__memcpy_chk>
	w_buf[rem] = '=';
   22298:	223d      	movs	r2, #61	; 0x3d
   2229a:	ab06      	add	r3, sp, #24
   2229c:	4423      	add	r3, r4
   2229e:	f803 2c10 	strb.w	r2, [r3, #-16]
	w_size++;
   222a2:	f104 0a01 	add.w	sl, r4, #1
		while (w_size < sizeof(w_buf)) {
   222a6:	f1ba 0f0f 	cmp.w	sl, #15
   222aa:	d90b      	bls.n	222c4 <settings_line_write+0x74>
   222ac:	2400      	movs	r4, #0
		rc = settings_io_cb.write_cb(cb_arg, w_loc, w_buf, w_size);
   222ae:	4653      	mov	r3, sl
   222b0:	4631      	mov	r1, r6
   222b2:	f8d9 5004 	ldr.w	r5, [r9, #4]
   222b6:	9810      	ldr	r0, [sp, #64]	; 0x40
   222b8:	aa02      	add	r2, sp, #8
   222ba:	47a8      	blx	r5
		if (rc) {
   222bc:	bb20      	cbnz	r0, 22308 <settings_line_write+0xb8>
		if (done) {
   222be:	bb2c      	cbnz	r4, 2230c <settings_line_write+0xbc>
		w_loc += w_size;
   222c0:	4456      	add	r6, sl
		w_size = 0;
   222c2:	46a2      	mov	sl, r4
			if (rem) {
   222c4:	b17f      	cbz	r7, 222e6 <settings_line_write+0x96>
				add = MIN(rem, sizeof(w_buf) - w_size);
   222c6:	f1ca 0410 	rsb	r4, sl, #16
   222ca:	42bc      	cmp	r4, r7
   222cc:	bf28      	it	cs
   222ce:	463c      	movcs	r4, r7
   222d0:	ab02      	add	r3, sp, #8
   222d2:	4659      	mov	r1, fp
   222d4:	eb03 000a 	add.w	r0, r3, sl
   222d8:	4622      	mov	r2, r4
   222da:	f01f f863 	bl	413a4 <memcpy>
				value += add;
   222de:	44a3      	add	fp, r4
				rem -= add;
   222e0:	1b3f      	subs	r7, r7, r4
				w_size += add;
   222e2:	44a2      	add	sl, r4
   222e4:	e7df      	b.n	222a6 <settings_line_write+0x56>
				add = (w_size) % wbs;
   222e6:	fbba f4f8 	udiv	r4, sl, r8
   222ea:	fb08 a414 	mls	r4, r8, r4, sl
				if (add) {
   222ee:	b14c      	cbz	r4, 22304 <settings_line_write+0xb4>
					add = wbs - add;
   222f0:	eba8 0404 	sub.w	r4, r8, r4
__ssp_bos_icheck3(memset, void *, int)
   222f4:	ab02      	add	r3, sp, #8
   222f6:	eb03 000a 	add.w	r0, r3, sl
   222fa:	4622      	mov	r2, r4
   222fc:	4639      	mov	r1, r7
   222fe:	f01f f871 	bl	413e4 <memset>
					w_size += add;
   22302:	44a2      	add	sl, r4
				done = true;
   22304:	2401      	movs	r4, #1
   22306:	e7d2      	b.n	222ae <settings_line_write+0x5e>
			return -EIO;
   22308:	f06f 0004 	mvn.w	r0, #4
}
   2230c:	b007      	add	sp, #28
   2230e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22312:	bf00      	nop
   22314:	20019138 	.word	0x20019138

00022318 <settings_line_val_get_len>:

size_t settings_line_val_get_len(off_t val_off, void *read_cb_ctx)
{
	size_t len;

	len = settings_io_cb.get_len_cb(read_cb_ctx);
   22318:	4b03      	ldr	r3, [pc, #12]	; (22328 <settings_line_val_get_len+0x10>)
{
   2231a:	b510      	push	{r4, lr}
	len = settings_io_cb.get_len_cb(read_cb_ctx);
   2231c:	689b      	ldr	r3, [r3, #8]
{
   2231e:	4604      	mov	r4, r0
	len = settings_io_cb.get_len_cb(read_cb_ctx);
   22320:	4608      	mov	r0, r1
   22322:	4798      	blx	r3

	return len - val_off;
}
   22324:	1b00      	subs	r0, r0, r4
   22326:	bd10      	pop	{r4, pc}
   22328:	20019138 	.word	0x20019138

0002232c <settings_line_entry_copy>:
}


int settings_line_entry_copy(void *dst_ctx, off_t dst_off, void *src_ctx,
			     off_t src_off, size_t len)
{
   2232c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22330:	4680      	mov	r8, r0
   22332:	468a      	mov	sl, r1
   22334:	4691      	mov	r9, r2
   22336:	461d      	mov	r5, r3
	int rc = -EINVAL;
   22338:	f06f 0015 	mvn.w	r0, #21
{
   2233c:	b086      	sub	sp, #24
   2233e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	size_t chunk_size;

	while (len) {
		chunk_size = MIN(len, sizeof(buf));

		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
   22340:	4f13      	ldr	r7, [pc, #76]	; (22390 <settings_line_entry_copy+0x64>)
	while (len) {
   22342:	b916      	cbnz	r6, 2234a <settings_line_entry_copy+0x1e>
		dst_off += chunk_size;
		len -= chunk_size;
	}

	return rc;
}
   22344:	b006      	add	sp, #24
   22346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		chunk_size = MIN(len, sizeof(buf));
   2234a:	2e10      	cmp	r6, #16
   2234c:	4633      	mov	r3, r6
   2234e:	bf28      	it	cs
   22350:	2310      	movcs	r3, #16
		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
   22352:	4629      	mov	r1, r5
		chunk_size = MIN(len, sizeof(buf));
   22354:	9301      	str	r3, [sp, #4]
		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
   22356:	4648      	mov	r0, r9
   22358:	683c      	ldr	r4, [r7, #0]
   2235a:	ab01      	add	r3, sp, #4
   2235c:	aa02      	add	r2, sp, #8
   2235e:	47a0      	blx	r4
		if (rc) {
   22360:	2800      	cmp	r0, #0
   22362:	d1ef      	bne.n	22344 <settings_line_entry_copy+0x18>
		size_t write_size = chunk_size;
   22364:	9b01      	ldr	r3, [sp, #4]
		if (chunk_size % settings_io_cb.rwbs) {
   22366:	7b39      	ldrb	r1, [r7, #12]
   22368:	fbb3 f2f1 	udiv	r2, r3, r1
   2236c:	fb01 3212 	mls	r2, r1, r2, r3
   22370:	b10a      	cbz	r2, 22376 <settings_line_entry_copy+0x4a>
			write_size += settings_io_cb.rwbs -
   22372:	440b      	add	r3, r1
   22374:	1a9b      	subs	r3, r3, r2
		rc = settings_io_cb.write_cb(dst_ctx, dst_off, buf, write_size);
   22376:	4651      	mov	r1, sl
   22378:	4640      	mov	r0, r8
   2237a:	687c      	ldr	r4, [r7, #4]
   2237c:	aa02      	add	r2, sp, #8
   2237e:	47a0      	blx	r4
		if (rc) {
   22380:	2800      	cmp	r0, #0
   22382:	d1df      	bne.n	22344 <settings_line_entry_copy+0x18>
		src_off += chunk_size;
   22384:	9b01      	ldr	r3, [sp, #4]
   22386:	441d      	add	r5, r3
		dst_off += chunk_size;
   22388:	449a      	add	sl, r3
		len -= chunk_size;
   2238a:	1af6      	subs	r6, r6, r3
   2238c:	e7d9      	b.n	22342 <settings_line_entry_copy+0x16>
   2238e:	bf00      	nop
   22390:	20019138 	.word	0x20019138

00022394 <settings_line_io_init>:
					  size_t *len),
			  int (*write_cb)(void *ctx, off_t off, char const *buf,
					  size_t len),
			  size_t (*get_len_cb)(void *ctx),
			  uint8_t io_rwbs)
{
   22394:	b510      	push	{r4, lr}
	settings_io_cb.read_cb = read_cb;
   22396:	4c03      	ldr	r4, [pc, #12]	; (223a4 <settings_line_io_init+0x10>)
	settings_io_cb.write_cb = write_cb;
   22398:	e9c4 0100 	strd	r0, r1, [r4]
	settings_io_cb.get_len_cb = get_len_cb;
   2239c:	60a2      	str	r2, [r4, #8]
	settings_io_cb.rwbs = io_rwbs;
   2239e:	7323      	strb	r3, [r4, #12]
}
   223a0:	bd10      	pop	{r4, pc}
   223a2:	bf00      	nop
   223a4:	20019138 	.word	0x20019138

000223a8 <settings_line_load_cb>:
	return -1;
}

int settings_line_load_cb(const char *name, void *val_read_cb_ctx, off_t off,
			  void *cb_arg)
{
   223a8:	b530      	push	{r4, r5, lr}
   223aa:	4604      	mov	r4, r0
   223ac:	b085      	sub	sp, #20
   223ae:	4610      	mov	r0, r2
   223b0:	461d      	mov	r5, r3
	size_t len;
	struct settings_line_read_value_cb_ctx value_ctx;
	struct settings_load_arg *arg = cb_arg;
	value_ctx.read_cb_ctx = val_read_cb_ctx;
	value_ctx.off = off;
   223b2:	e9cd 1202 	strd	r1, r2, [sp, #8]
	len = settings_line_val_get_len(off, val_read_cb_ctx);
   223b6:	f7ff ffaf 	bl	22318 <settings_line_val_get_len>

	return settings_call_set_handler(name, len, settings_line_read_cb,
   223ba:	4a04      	ldr	r2, [pc, #16]	; (223cc <settings_line_load_cb+0x24>)
	len = settings_line_val_get_len(off, val_read_cb_ctx);
   223bc:	4601      	mov	r1, r0
	return settings_call_set_handler(name, len, settings_line_read_cb,
   223be:	9500      	str	r5, [sp, #0]
   223c0:	4620      	mov	r0, r4
   223c2:	ab02      	add	r3, sp, #8
   223c4:	f7ff fe52 	bl	2206c <settings_call_set_handler>
					 &value_ctx, arg);
}
   223c8:	b005      	add	sp, #20
   223ca:	bd30      	pop	{r4, r5, pc}
   223cc:	0003d585 	.word	0x0003d585

000223d0 <settings_fcb_load_priv>:

static int settings_fcb_load_priv(struct settings_store *cs,
				  line_load_cb cb,
				  void *cb_arg,
				  bool filter_duplicates)
{
   223d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   223d4:	4606      	mov	r6, r0
   223d6:	b0b3      	sub	sp, #204	; 0xcc
   223d8:	460f      	mov	r7, r1
   223da:	4690      	mov	r8, r2
	struct settings_fcb *cf = (struct settings_fcb *)cs;
	struct fcb_entry_ctx entry_ctx = {
   223dc:	2100      	movs	r1, #0
   223de:	2210      	movs	r2, #16
   223e0:	a802      	add	r0, sp, #8
{
   223e2:	4699      	mov	r9, r3
	struct fcb_entry_ctx entry_ctx = {
   223e4:	f01e fffe 	bl	413e4 <memset>
   223e8:	6c33      	ldr	r3, [r6, #64]	; 0x40
			LOG_ERR("failed to load line");
   223ea:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 22494 <settings_fcb_load_priv+0xc4>
	struct fcb_entry_ctx entry_ctx = {
   223ee:	9306      	str	r3, [sp, #24]
		{.fe_sector = NULL, .fe_elem_off = 0},
		.fap = cf->cf_fcb.fap
	};
	int rc;

	while ((rc = fcb_getnext(&cf->cf_fcb, &entry_ctx.loc)) == 0) {
   223f0:	f106 0a08 	add.w	sl, r6, #8
   223f4:	4650      	mov	r0, sl
   223f6:	a902      	add	r1, sp, #8
   223f8:	f01a fe04 	bl	3d004 <fcb_getnext>
   223fc:	b118      	cbz	r0, 22406 <settings_fcb_load_priv+0x36>
	}
	if (rc == -ENOTSUP) {
		rc = 0;
	}
	return 0;
}
   223fe:	2000      	movs	r0, #0
   22400:	b033      	add	sp, #204	; 0xcc
   22402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = settings_line_name_read(name, sizeof(name), &name_len,
   22406:	466a      	mov	r2, sp
   22408:	214a      	movs	r1, #74	; 0x4a
   2240a:	ab02      	add	r3, sp, #8
   2240c:	a80c      	add	r0, sp, #48	; 0x30
   2240e:	f01b f8c8 	bl	3d5a2 <settings_line_name_read>
		if (rc) {
   22412:	b128      	cbz	r0, 22420 <settings_fcb_load_priv+0x50>
			LOG_ERR("Failed to load line name: %d", rc);
   22414:	4602      	mov	r2, r0
   22416:	2145      	movs	r1, #69	; 0x45
   22418:	481d      	ldr	r0, [pc, #116]	; (22490 <settings_fcb_load_priv+0xc0>)
   2241a:	f01a fb49 	bl	3cab0 <z_log_minimal_printk>
			continue;
   2241e:	e7e7      	b.n	223f0 <settings_fcb_load_priv+0x20>
		name[name_len] = '\0';
   22420:	9b00      	ldr	r3, [sp, #0]
   22422:	aa32      	add	r2, sp, #200	; 0xc8
   22424:	441a      	add	r2, r3
   22426:	f802 0c98 	strb.w	r0, [r2, #-152]
		if (filter_duplicates &&
   2242a:	f1b9 0f00 	cmp.w	r9, #0
   2242e:	d00f      	beq.n	22450 <settings_fcb_load_priv+0x80>
	if (off >= entry_ctx->loc.fe_data_len) {
   22430:	f8bd 2014 	ldrh.w	r2, [sp, #20]
		    (!read_entry_len(&entry_ctx, name_len+1) ||
   22434:	3301      	adds	r3, #1
	if (off >= entry_ctx->loc.fe_data_len) {
   22436:	429a      	cmp	r2, r3
   22438:	ddda      	ble.n	223f0 <settings_fcb_load_priv+0x20>
	struct fcb_entry_ctx entry2_ctx = *entry_ctx;
   2243a:	ac07      	add	r4, sp, #28
   2243c:	ad02      	add	r5, sp, #8
   2243e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   22440:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   22442:	682b      	ldr	r3, [r5, #0]
   22444:	6023      	str	r3, [r4, #0]
	while (fcb_getnext(&cf->cf_fcb, &entry2_ctx.loc) == 0) {
   22446:	4650      	mov	r0, sl
   22448:	a907      	add	r1, sp, #28
   2244a:	f01a fddb 	bl	3d004 <fcb_getnext>
   2244e:	b130      	cbz	r0, 2245e <settings_fcb_load_priv+0x8e>
			cb(name, &entry_ctx, name_len + 1, cb_arg);
   22450:	9a00      	ldr	r2, [sp, #0]
   22452:	4643      	mov	r3, r8
   22454:	3201      	adds	r2, #1
   22456:	a902      	add	r1, sp, #8
   22458:	a80c      	add	r0, sp, #48	; 0x30
   2245a:	47b8      	blx	r7
   2245c:	e7c8      	b.n	223f0 <settings_fcb_load_priv+0x20>
		if (settings_line_name_read(name2, sizeof(name2), &name2_len,
   2245e:	214a      	movs	r1, #74	; 0x4a
   22460:	ab07      	add	r3, sp, #28
   22462:	aa01      	add	r2, sp, #4
   22464:	a81f      	add	r0, sp, #124	; 0x7c
   22466:	f01b f89c 	bl	3d5a2 <settings_line_name_read>
   2246a:	b120      	cbz	r0, 22476 <settings_fcb_load_priv+0xa6>
			LOG_ERR("failed to load line");
   2246c:	2145      	movs	r1, #69	; 0x45
   2246e:	4658      	mov	r0, fp
   22470:	f01a fb1e 	bl	3cab0 <z_log_minimal_printk>
			continue;
   22474:	e7e7      	b.n	22446 <settings_fcb_load_priv+0x76>
		name2[name2_len] = '\0';
   22476:	9b01      	ldr	r3, [sp, #4]
   22478:	aa32      	add	r2, sp, #200	; 0xc8
   2247a:	4413      	add	r3, r2
   2247c:	f803 0c4c 	strb.w	r0, [r3, #-76]
		if (!strcmp(name, name2)) {
   22480:	a91f      	add	r1, sp, #124	; 0x7c
   22482:	a80c      	add	r0, sp, #48	; 0x30
   22484:	f7fa fed3 	bl	1d22e <strcmp>
   22488:	2800      	cmp	r0, #0
   2248a:	d1dc      	bne.n	22446 <settings_fcb_load_priv+0x76>
   2248c:	e7b0      	b.n	223f0 <settings_fcb_load_priv+0x20>
   2248e:	bf00      	nop
   22490:	00044356 	.word	0x00044356
   22494:	00044378 	.word	0x00044378

00022498 <settings_fcb_load>:

static int settings_fcb_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   22498:	460a      	mov	r2, r1
	return settings_fcb_load_priv(
   2249a:	2301      	movs	r3, #1
   2249c:	4901      	ldr	r1, [pc, #4]	; (224a4 <settings_fcb_load+0xc>)
   2249e:	f7ff bf97 	b.w	223d0 <settings_fcb_load_priv>
   224a2:	bf00      	nop
   224a4:	000223a9 	.word	0x000223a9

000224a8 <settings_fcb_save>:
	return rc;
}

static int settings_fcb_save(struct settings_store *cs, const char *name,
			     const char *value, size_t val_len)
{
   224a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   224ac:	4605      	mov	r5, r0
   224ae:	460f      	mov	r7, r1
   224b0:	4691      	mov	r9, r2
	struct settings_line_dup_check_arg cdca;

	if (val_len > 0 && value == NULL) {
   224b2:	4698      	mov	r8, r3
{
   224b4:	b0bf      	sub	sp, #252	; 0xfc
	if (val_len > 0 && value == NULL) {
   224b6:	b103      	cbz	r3, 224ba <settings_fcb_save+0x12>
   224b8:	b17a      	cbz	r2, 224da <settings_fcb_save+0x32>
	/*
	 * Check if we're writing the same value again.
	 */
	cdca.name = name;
	cdca.val = (char *)value;
	cdca.is_dup = 0;
   224ba:	2400      	movs	r4, #0
	cdca.val_len = val_len;
	settings_fcb_load_priv(cs, settings_line_dup_check_cb, &cdca, false);
   224bc:	4628      	mov	r0, r5
   224be:	4623      	mov	r3, r4
   224c0:	495b      	ldr	r1, [pc, #364]	; (22630 <settings_fcb_save+0x188>)
   224c2:	aa05      	add	r2, sp, #20
	cdca.val = (char *)value;
   224c4:	e9cd 7905 	strd	r7, r9, [sp, #20]
	cdca.val_len = val_len;
   224c8:	e9cd 8407 	strd	r8, r4, [sp, #28]
	settings_fcb_load_priv(cs, settings_line_dup_check_cb, &cdca, false);
   224cc:	f7ff ff80 	bl	223d0 <settings_fcb_load_priv>
	if (cdca.is_dup == 1) {
   224d0:	9b08      	ldr	r3, [sp, #32]
   224d2:	2b01      	cmp	r3, #1
   224d4:	f000 80a7 	beq.w	22626 <settings_fcb_save+0x17e>
	if (!name) {
   224d8:	b917      	cbnz	r7, 224e0 <settings_fcb_save+0x38>
		return -EINVAL;
   224da:	f06f 0415 	mvn.w	r4, #21
   224de:	e0a2      	b.n	22626 <settings_fcb_save+0x17e>
	len = settings_line_len_calc(name, val_len);
   224e0:	4641      	mov	r1, r8
   224e2:	4638      	mov	r0, r7
   224e4:	f01b f83e 	bl	3d564 <settings_line_len_calc>
   224e8:	4683      	mov	fp, r0
	for (i = 0; i < cf->cf_fcb.f_sector_cnt; i++) {
   224ea:	7b6b      	ldrb	r3, [r5, #13]
   224ec:	429c      	cmp	r4, r3
   224ee:	daf4      	bge.n	224da <settings_fcb_save+0x32>
		rc = fcb_append(&cf->cf_fcb, len, &loc.loc);
   224f0:	f105 0608 	add.w	r6, r5, #8
   224f4:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
   224f8:	4652      	mov	r2, sl
   224fa:	4630      	mov	r0, r6
   224fc:	fa1f f18b 	uxth.w	r1, fp
   22500:	f7ff f896 	bl	21630 <fcb_append>
		if (rc != -ENOSPC) {
   22504:	f110 0f1c 	cmn.w	r0, #28
		rc = fcb_append(&cf->cf_fcb, len, &loc.loc);
   22508:	4603      	mov	r3, r0
		if (rc != -ENOSPC) {
   2250a:	d176      	bne.n	225fa <settings_fcb_save+0x152>
		if (i < (cf->cf_fcb.f_sector_cnt - 1)) {
   2250c:	7b6b      	ldrb	r3, [r5, #13]
   2250e:	3b01      	subs	r3, #1
   22510:	42a3      	cmp	r3, r4
   22512:	dd1b      	ble.n	2254c <settings_fcb_save+0xa4>
	rc = fcb_append_to_scratch(&cf->cf_fcb);
   22514:	4630      	mov	r0, r6
   22516:	f01a fae2 	bl	3cade <fcb_append_to_scratch>
	if (rc) {
   2251a:	4682      	mov	sl, r0
   2251c:	b9b0      	cbnz	r0, 2254c <settings_fcb_save+0xa4>
	rbs = flash_area_align(cf->cf_fcb.fap);
   2251e:	6c28      	ldr	r0, [r5, #64]	; 0x40
   22520:	f01a ff84 	bl	3d42c <flash_area_align>
	loc1.fap = cf->cf_fcb.fap;
   22524:	6c2b      	ldr	r3, [r5, #64]	; 0x40
	loc1.loc.fe_elem_off = 0U;
   22526:	e9cd aa0e 	strd	sl, sl, [sp, #56]	; 0x38
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
   2252a:	f8df a10c 	ldr.w	sl, [pc, #268]	; 22638 <settings_fcb_save+0x190>
	loc1.fap = cf->cf_fcb.fap;
   2252e:	9312      	str	r3, [sp, #72]	; 0x48
	while (fcb_getnext(&cf->cf_fcb, &loc1.loc) == 0) {
   22530:	4630      	mov	r0, r6
   22532:	a90e      	add	r1, sp, #56	; 0x38
   22534:	f01a fd66 	bl	3d004 <fcb_getnext>
   22538:	b150      	cbz	r0, 22550 <settings_fcb_save+0xa8>
	rc = fcb_rotate(&cf->cf_fcb);
   2253a:	4630      	mov	r0, r6
   2253c:	f01a fd7d 	bl	3d03a <fcb_rotate>
	if (rc != 0) {
   22540:	4602      	mov	r2, r0
   22542:	b118      	cbz	r0, 2254c <settings_fcb_save+0xa4>
		LOG_ERR("Failed to fcb rotate (%d)", rc);
   22544:	2145      	movs	r1, #69	; 0x45
   22546:	483b      	ldr	r0, [pc, #236]	; (22634 <settings_fcb_save+0x18c>)
   22548:	f01a fab2 	bl	3cab0 <z_log_minimal_printk>
	for (i = 0; i < cf->cf_fcb.f_sector_cnt; i++) {
   2254c:	3401      	adds	r4, #1
   2254e:	e7cc      	b.n	224ea <settings_fcb_save+0x42>
		if (loc1.loc.fe_sector != cf->cf_fcb.f_oldest) {
   22550:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22552:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   22554:	429a      	cmp	r2, r3
   22556:	d1f0      	bne.n	2253a <settings_fcb_save+0x92>
		rc = settings_line_name_read(name1, sizeof(name1), &val1_off,
   22558:	2149      	movs	r1, #73	; 0x49
   2255a:	ab0e      	add	r3, sp, #56	; 0x38
   2255c:	aa03      	add	r2, sp, #12
   2255e:	a818      	add	r0, sp, #96	; 0x60
   22560:	f01b f81f 	bl	3d5a2 <settings_line_name_read>
		if (rc) {
   22564:	2800      	cmp	r0, #0
   22566:	d1e3      	bne.n	22530 <settings_fcb_save+0x88>
		if (val1_off + 1 == loc1.loc.fe_data_len) {
   22568:	9b03      	ldr	r3, [sp, #12]
   2256a:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
   2256e:	3301      	adds	r3, #1
   22570:	4293      	cmp	r3, r2
   22572:	d0dd      	beq.n	22530 <settings_fcb_save+0x88>
		loc2 = loc1;
   22574:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   22578:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
   2257c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   22580:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   22584:	f8de 3000 	ldr.w	r3, [lr]
   22588:	f8cc 3000 	str.w	r3, [ip]
		while (fcb_getnext(&cf->cf_fcb, &loc2.loc) == 0) {
   2258c:	4630      	mov	r0, r6
   2258e:	a913      	add	r1, sp, #76	; 0x4c
   22590:	f01a fd38 	bl	3d004 <fcb_getnext>
   22594:	b1f0      	cbz	r0, 225d4 <settings_fcb_save+0x12c>
		rc = fcb_append(&cf->cf_fcb, loc1.loc.fe_data_len, &loc2.loc);
   22596:	4630      	mov	r0, r6
   22598:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   2259c:	aa13      	add	r2, sp, #76	; 0x4c
   2259e:	f7ff f847 	bl	21630 <fcb_append>
		if (rc) {
   225a2:	2800      	cmp	r0, #0
   225a4:	d1c4      	bne.n	22530 <settings_fcb_save+0x88>
		rc = settings_line_entry_copy(&loc2, 0, &loc1, 0,
   225a6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   225aa:	4601      	mov	r1, r0
   225ac:	9300      	str	r3, [sp, #0]
   225ae:	aa0e      	add	r2, sp, #56	; 0x38
   225b0:	4603      	mov	r3, r0
   225b2:	a813      	add	r0, sp, #76	; 0x4c
   225b4:	f7ff feba 	bl	2232c <settings_line_entry_copy>
		if (rc) {
   225b8:	2800      	cmp	r0, #0
   225ba:	d1b9      	bne.n	22530 <settings_fcb_save+0x88>
		rc = fcb_append_finish(&cf->cf_fcb, &loc2.loc);
   225bc:	4630      	mov	r0, r6
   225be:	a913      	add	r1, sp, #76	; 0x4c
   225c0:	f01a faa9 	bl	3cb16 <fcb_append_finish>
		if (rc != 0) {
   225c4:	4602      	mov	r2, r0
   225c6:	2800      	cmp	r0, #0
   225c8:	d0b2      	beq.n	22530 <settings_fcb_save+0x88>
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
   225ca:	2145      	movs	r1, #69	; 0x45
   225cc:	4650      	mov	r0, sl
   225ce:	f01a fa6f 	bl	3cab0 <z_log_minimal_printk>
   225d2:	e7ad      	b.n	22530 <settings_fcb_save+0x88>
			rc = settings_line_name_read(name2, sizeof(name2),
   225d4:	2149      	movs	r1, #73	; 0x49
   225d6:	ab13      	add	r3, sp, #76	; 0x4c
   225d8:	aa04      	add	r2, sp, #16
   225da:	a82b      	add	r0, sp, #172	; 0xac
   225dc:	f01a ffe1 	bl	3d5a2 <settings_line_name_read>
			if (rc) {
   225e0:	2800      	cmp	r0, #0
   225e2:	d1d3      	bne.n	2258c <settings_fcb_save+0xe4>
			if ((val1_off == val2_off) &&
   225e4:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   225e8:	429a      	cmp	r2, r3
   225ea:	d1cf      	bne.n	2258c <settings_fcb_save+0xe4>
			    !memcmp(name1, name2, val1_off)) {
   225ec:	a92b      	add	r1, sp, #172	; 0xac
   225ee:	a818      	add	r0, sp, #96	; 0x60
   225f0:	f01e fec8 	bl	41384 <memcmp>
			if ((val1_off == val2_off) &&
   225f4:	2800      	cmp	r0, #0
   225f6:	d1c9      	bne.n	2258c <settings_fcb_save+0xe4>
   225f8:	e79a      	b.n	22530 <settings_fcb_save+0x88>
	if (rc) {
   225fa:	2800      	cmp	r0, #0
   225fc:	f47f af6d 	bne.w	224da <settings_fcb_save+0x32>
	loc.fap = cf->cf_fcb.fap;
   22600:	6c2a      	ldr	r2, [r5, #64]	; 0x40
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
   22602:	4649      	mov	r1, r9
	loc.fap = cf->cf_fcb.fap;
   22604:	920d      	str	r2, [sp, #52]	; 0x34
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
   22606:	4638      	mov	r0, r7
   22608:	4642      	mov	r2, r8
   2260a:	f8cd a000 	str.w	sl, [sp]
   2260e:	f7ff fe1f 	bl	22250 <settings_line_write>
	if (rc != -EIO) {
   22612:	1d43      	adds	r3, r0, #5
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
   22614:	4604      	mov	r4, r0
	if (rc != -EIO) {
   22616:	d006      	beq.n	22626 <settings_fcb_save+0x17e>
		i = fcb_append_finish(&cf->cf_fcb, &loc.loc);
   22618:	4651      	mov	r1, sl
   2261a:	4630      	mov	r0, r6
   2261c:	f01a fa7b 	bl	3cb16 <fcb_append_finish>
			rc = i;
   22620:	2c00      	cmp	r4, #0
   22622:	bf08      	it	eq
   22624:	4604      	moveq	r4, r0
		return 0;
	}
	return settings_fcb_save_priv(cs, name, (char *)value, val_len);
}
   22626:	4620      	mov	r0, r4
   22628:	b03f      	add	sp, #252	; 0xfc
   2262a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2262e:	bf00      	nop
   22630:	0003d5c3 	.word	0x0003d5c3
   22634:	000443b7 	.word	0x000443b7
   22638:	00044391 	.word	0x00044391

0002263c <settings_fcb_src>:
	cf->cf_fcb.f_version = SETTINGS_FCB_VERS;
   2263c:	2301      	movs	r3, #1
{
   2263e:	b570      	push	{r4, r5, r6, lr}
   22640:	4604      	mov	r4, r0
	cf->cf_fcb.f_version = SETTINGS_FCB_VERS;
   22642:	7303      	strb	r3, [r0, #12]
	cf->cf_fcb.f_scratch_cnt = 1;
   22644:	7383      	strb	r3, [r0, #14]
		rc = fcb_init(SETTINGS_PARTITION, &cf->cf_fcb);
   22646:	f100 0608 	add.w	r6, r0, #8
   2264a:	4631      	mov	r1, r6
   2264c:	200c      	movs	r0, #12
   2264e:	f01a fb64 	bl	3cd1a <fcb_init>
		if (rc) {
   22652:	4605      	mov	r5, r0
   22654:	b9b0      	cbnz	r0, 22684 <settings_fcb_src+0x48>
		if (fcb_free_sector_cnt(&cf->cf_fcb) < 1) {
   22656:	4630      	mov	r0, r6
   22658:	f01a fac5 	bl	3cbe6 <fcb_free_sector_cnt>
   2265c:	2800      	cmp	r0, #0
   2265e:	dc0a      	bgt.n	22676 <settings_fcb_src+0x3a>
					cf->cf_fcb.f_active.fe_sector->fs_off,
   22660:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = flash_area_erase(cf->cf_fcb.fap,
   22662:	6c20      	ldr	r0, [r4, #64]	; 0x40
   22664:	e9d3 1200 	ldrd	r1, r2, [r3]
   22668:	f01a fec9 	bl	3d3fe <flash_area_erase>
			if (rc) {
   2266c:	2800      	cmp	r0, #0
   2266e:	d0ec      	beq.n	2264a <settings_fcb_src+0xe>
				return -EIO;
   22670:	f06f 0504 	mvn.w	r5, #4
   22674:	e004      	b.n	22680 <settings_fcb_src+0x44>
	cf->cf_store.cs_itf = &settings_fcb_itf;
   22676:	4b05      	ldr	r3, [pc, #20]	; (2268c <settings_fcb_src+0x50>)
	settings_src_register(&cf->cf_store);
   22678:	4620      	mov	r0, r4
	cf->cf_store.cs_itf = &settings_fcb_itf;
   2267a:	6063      	str	r3, [r4, #4]
	settings_src_register(&cf->cf_store);
   2267c:	f7ff fc54 	bl	21f28 <settings_src_register>
}
   22680:	4628      	mov	r0, r5
   22682:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
   22684:	f06f 0515 	mvn.w	r5, #21
   22688:	e7fa      	b.n	22680 <settings_fcb_src+0x44>
   2268a:	bf00      	nop
   2268c:	00042940 	.word	0x00042940

00022690 <settings_mount_fcb_backend>:
{
	uint8_t rbs;

	rbs = cf->cf_fcb.f_align;

	settings_line_io_init(read_handler, write_handler, get_len_cb, rbs);
   22690:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
   22694:	4a02      	ldr	r2, [pc, #8]	; (226a0 <settings_mount_fcb_backend+0x10>)
   22696:	4903      	ldr	r1, [pc, #12]	; (226a4 <settings_mount_fcb_backend+0x14>)
   22698:	4803      	ldr	r0, [pc, #12]	; (226a8 <settings_mount_fcb_backend+0x18>)
   2269a:	f7ff be7b 	b.w	22394 <settings_line_io_init>
   2269e:	bf00      	nop
   226a0:	0003d641 	.word	0x0003d641
   226a4:	0003d645 	.word	0x0003d645
   226a8:	0003d659 	.word	0x0003d659

000226ac <settings_backend_init>:
		settings_fcb_area[CONFIG_SETTINGS_FCB_NUM_AREAS + 1];
	static struct settings_fcb config_init_settings_fcb = {
		.cf_fcb.f_magic = CONFIG_SETTINGS_FCB_MAGIC,
		.cf_fcb.f_sectors = settings_fcb_area,
	};
	uint32_t cnt = sizeof(settings_fcb_area) /
   226ac:	2309      	movs	r3, #9
{
   226ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
		    sizeof(settings_fcb_area[0]);
	int rc;
	const struct flash_area *fap;

	rc = flash_area_get_sectors(SETTINGS_PARTITION, &cnt,
   226b0:	200c      	movs	r0, #12
   226b2:	4669      	mov	r1, sp
   226b4:	4a21      	ldr	r2, [pc, #132]	; (2273c <settings_backend_init+0x90>)
	uint32_t cnt = sizeof(settings_fcb_area) /
   226b6:	9300      	str	r3, [sp, #0]
	rc = flash_area_get_sectors(SETTINGS_PARTITION, &cnt,
   226b8:	f7ff fada 	bl	21c70 <flash_area_get_sectors>
				    settings_fcb_area);
	if (rc == -ENODEV) {
   226bc:	f110 0f13 	cmn.w	r0, #19
   226c0:	d03a      	beq.n	22738 <settings_backend_init+0x8c>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   226c2:	b138      	cbz	r0, 226d4 <settings_backend_init+0x28>
   226c4:	300c      	adds	r0, #12
   226c6:	d005      	beq.n	226d4 <settings_backend_init+0x28>
		k_panic();
   226c8:	4040      	eors	r0, r0
   226ca:	f380 8811 	msr	BASEPRI, r0
   226ce:	f04f 0004 	mov.w	r0, #4
   226d2:	df02      	svc	2
	}

	config_init_settings_fcb.cf_fcb.f_sector_cnt = cnt;
   226d4:	4c1a      	ldr	r4, [pc, #104]	; (22740 <settings_backend_init+0x94>)
   226d6:	9b00      	ldr	r3, [sp, #0]

	rc = settings_fcb_src(&config_init_settings_fcb);
   226d8:	4620      	mov	r0, r4
	config_init_settings_fcb.cf_fcb.f_sector_cnt = cnt;
   226da:	7363      	strb	r3, [r4, #13]
	rc = settings_fcb_src(&config_init_settings_fcb);
   226dc:	f7ff ffae 	bl	2263c <settings_fcb_src>

	if (rc != 0) {
   226e0:	b308      	cbz	r0, 22726 <settings_backend_init+0x7a>
		rc = flash_area_open(SETTINGS_PARTITION, &fap);
   226e2:	a901      	add	r1, sp, #4
   226e4:	200c      	movs	r0, #12
   226e6:	f7ff faa5 	bl	21c34 <flash_area_open>

		if (rc == 0) {
   226ea:	4601      	mov	r1, r0
   226ec:	b160      	cbz	r0, 22708 <settings_backend_init+0x5c>
			rc = flash_area_erase(fap, 0, fap->fa_size);
			flash_area_close(fap);
		}

		if (rc != 0) {
			k_panic();
   226ee:	4040      	eors	r0, r0
   226f0:	f380 8811 	msr	BASEPRI, r0
   226f4:	f04f 0004 	mov.w	r0, #4
   226f8:	df02      	svc	2
			rc = settings_fcb_src(&config_init_settings_fcb);
		}
	}

	if (rc != 0) {
		k_panic();
   226fa:	4040      	eors	r0, r0
   226fc:	f380 8811 	msr	BASEPRI, r0
   22700:	f04f 0004 	mov.w	r0, #4
   22704:	df02      	svc	2
   22706:	e00e      	b.n	22726 <settings_backend_init+0x7a>
			rc = flash_area_erase(fap, 0, fap->fa_size);
   22708:	9801      	ldr	r0, [sp, #4]
   2270a:	6882      	ldr	r2, [r0, #8]
   2270c:	f01a fe77 	bl	3d3fe <flash_area_erase>
   22710:	4605      	mov	r5, r0
			flash_area_close(fap);
   22712:	9801      	ldr	r0, [sp, #4]
   22714:	f01a fe3a 	bl	3d38c <flash_area_close>
		if (rc != 0) {
   22718:	2d00      	cmp	r5, #0
   2271a:	d1e8      	bne.n	226ee <settings_backend_init+0x42>
			rc = settings_fcb_src(&config_init_settings_fcb);
   2271c:	4620      	mov	r0, r4
   2271e:	f7ff ff8d 	bl	2263c <settings_fcb_src>
	if (rc != 0) {
   22722:	2800      	cmp	r0, #0
   22724:	d1e9      	bne.n	226fa <settings_backend_init+0x4e>
	cf->cf_store.cs_itf = &settings_fcb_itf;
   22726:	4b07      	ldr	r3, [pc, #28]	; (22744 <settings_backend_init+0x98>)
	settings_dst_register(&cf->cf_store);
   22728:	4805      	ldr	r0, [pc, #20]	; (22740 <settings_backend_init+0x94>)
	cf->cf_store.cs_itf = &settings_fcb_itf;
   2272a:	6063      	str	r3, [r4, #4]
	settings_dst_register(&cf->cf_store);
   2272c:	f7ff fc0a 	bl	21f44 <settings_dst_register>

	if (rc != 0) {
		k_panic();
	}

	settings_mount_fcb_backend(&config_init_settings_fcb);
   22730:	4803      	ldr	r0, [pc, #12]	; (22740 <settings_backend_init+0x94>)
   22732:	f7ff ffad 	bl	22690 <settings_mount_fcb_backend>

	return rc;
   22736:	2000      	movs	r0, #0
}
   22738:	b003      	add	sp, #12
   2273a:	bd30      	pop	{r4, r5, pc}
   2273c:	20019148 	.word	0x20019148
   22740:	200145cc 	.word	0x200145cc
   22744:	00042940 	.word	0x00042940

00022748 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   22748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2274c:	4605      	mov	r5, r0
	__asm__ volatile(
   2274e:	f04f 0320 	mov.w	r3, #32
   22752:	f3ef 8611 	mrs	r6, BASEPRI
   22756:	f383 8812 	msr	BASEPRI_MAX, r3
   2275a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2275e:	481d      	ldr	r0, [pc, #116]	; (227d4 <pm_state_notify+0x8c>)
   22760:	f013 ff2e 	bl	365c0 <z_spin_lock_valid>
   22764:	b940      	cbnz	r0, 22778 <pm_state_notify+0x30>
   22766:	491c      	ldr	r1, [pc, #112]	; (227d8 <pm_state_notify+0x90>)
   22768:	481c      	ldr	r0, [pc, #112]	; (227dc <pm_state_notify+0x94>)
   2276a:	228e      	movs	r2, #142	; 0x8e
   2276c:	f01a f966 	bl	3ca3c <assert_print>
   22770:	218e      	movs	r1, #142	; 0x8e
   22772:	4819      	ldr	r0, [pc, #100]	; (227d8 <pm_state_notify+0x90>)
   22774:	f01a f95b 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   22778:	4816      	ldr	r0, [pc, #88]	; (227d4 <pm_state_notify+0x8c>)
   2277a:	f013 ff3f 	bl	365fc <z_spin_lock_set_owner>
	return list->head;
   2277e:	4b18      	ldr	r3, [pc, #96]	; (227e0 <pm_state_notify+0x98>)
   22780:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   22782:	b19c      	cbz	r4, 227ac <pm_state_notify+0x64>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   22784:	f04f 090c 	mov.w	r9, #12
   22788:	4f16      	ldr	r7, [pc, #88]	; (227e4 <pm_state_notify+0x9c>)
   2278a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 227e8 <pm_state_notify+0xa0>
			callback = notifier->state_exit;
   2278e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   22792:	2d00      	cmp	r5, #0
   22794:	bf08      	it	eq
   22796:	4613      	moveq	r3, r2
		if (callback) {
   22798:	b12b      	cbz	r3, 227a6 <pm_state_notify+0x5e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   2279a:	f898 2014 	ldrb.w	r2, [r8, #20]
   2279e:	fb09 f202 	mul.w	r2, r9, r2
   227a2:	5cb8      	ldrb	r0, [r7, r2]
   227a4:	4798      	blx	r3
	return node->next;
   227a6:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   227a8:	2c00      	cmp	r4, #0
   227aa:	d1f0      	bne.n	2278e <pm_state_notify+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   227ac:	4809      	ldr	r0, [pc, #36]	; (227d4 <pm_state_notify+0x8c>)
   227ae:	f013 ff15 	bl	365dc <z_spin_unlock_valid>
   227b2:	b940      	cbnz	r0, 227c6 <pm_state_notify+0x7e>
   227b4:	4908      	ldr	r1, [pc, #32]	; (227d8 <pm_state_notify+0x90>)
   227b6:	4809      	ldr	r0, [pc, #36]	; (227dc <pm_state_notify+0x94>)
   227b8:	22b9      	movs	r2, #185	; 0xb9
   227ba:	f01a f93f 	bl	3ca3c <assert_print>
   227be:	21b9      	movs	r1, #185	; 0xb9
   227c0:	4805      	ldr	r0, [pc, #20]	; (227d8 <pm_state_notify+0x90>)
   227c2:	f01a f934 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   227c6:	f386 8811 	msr	BASEPRI, r6
   227ca:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   227ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   227d2:	bf00      	nop
   227d4:	20019190 	.word	0x20019190
   227d8:	0004402c 	.word	0x0004402c
   227dc:	00043ff2 	.word	0x00043ff2
   227e0:	20019194 	.word	0x20019194
   227e4:	2001919c 	.word	0x2001919c
   227e8:	2001a500 	.word	0x2001a500

000227ec <atomic_clear_bit.constprop.0>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   227ec:	2301      	movs	r3, #1

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   227ee:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   227f0:	f000 001f 	and.w	r0, r0, #31
   227f4:	fa03 f000 	lsl.w	r0, r3, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   227f8:	43c0      	mvns	r0, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   227fa:	4b05      	ldr	r3, [pc, #20]	; (22810 <atomic_clear_bit.constprop.0+0x24>)
   227fc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   22800:	e8d3 2fef 	ldaex	r2, [r3]
   22804:	4002      	ands	r2, r0
   22806:	e8c3 2fe1 	stlex	r1, r2, [r3]
   2280a:	2900      	cmp	r1, #0
   2280c:	d1f8      	bne.n	22800 <atomic_clear_bit.constprop.0+0x14>
}
   2280e:	4770      	bx	lr
   22810:	200191a8 	.word	0x200191a8

00022814 <pm_system_resume>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   22814:	2201      	movs	r2, #1

void pm_system_resume(void)
{
   22816:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
   22818:	4b17      	ldr	r3, [pc, #92]	; (22878 <pm_system_resume+0x64>)
   2281a:	7d1c      	ldrb	r4, [r3, #20]
   2281c:	f004 031f 	and.w	r3, r4, #31
   22820:	409a      	lsls	r2, r3
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   22822:	43d0      	mvns	r0, r2
   22824:	4b15      	ldr	r3, [pc, #84]	; (2287c <pm_system_resume+0x68>)
   22826:	0961      	lsrs	r1, r4, #5
   22828:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   2282c:	e8d3 1fef 	ldaex	r1, [r3]
   22830:	ea01 0500 	and.w	r5, r1, r0
   22834:	e8c3 5fec 	stlex	ip, r5, [r3]
   22838:	f1bc 0f00 	cmp.w	ip, #0
   2283c:	d1f6      	bne.n	2282c <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   2283e:	4211      	tst	r1, r2
   22840:	d013      	beq.n	2286a <pm_system_resume+0x56>
	if (pm_state_exit_post_ops != NULL) {
   22842:	4b0f      	ldr	r3, [pc, #60]	; (22880 <pm_system_resume+0x6c>)
   22844:	4d0f      	ldr	r5, [pc, #60]	; (22884 <pm_system_resume+0x70>)
   22846:	b18b      	cbz	r3, 2286c <pm_system_resume+0x58>
		pm_state_exit_post_ops(info->state, info->substate_id);
   22848:	230c      	movs	r3, #12
   2284a:	4363      	muls	r3, r4
   2284c:	18ea      	adds	r2, r5, r3
   2284e:	7851      	ldrb	r1, [r2, #1]
   22850:	5ce8      	ldrb	r0, [r5, r3]
   22852:	f01a f90d 	bl	3ca70 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   22856:	2000      	movs	r0, #0
   22858:	f7ff ff76 	bl	22748 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   2285c:	230c      	movs	r3, #12
   2285e:	435c      	muls	r4, r3
   22860:	2300      	movs	r3, #0
   22862:	192a      	adds	r2, r5, r4
   22864:	512b      	str	r3, [r5, r4]
   22866:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   2286a:	bd38      	pop	{r3, r4, r5, pc}
   2286c:	f383 8811 	msr	BASEPRI, r3
   22870:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   22874:	e7ef      	b.n	22856 <pm_system_resume+0x42>
   22876:	bf00      	nop
   22878:	2001a500 	.word	0x2001a500
   2287c:	200191ac 	.word	0x200191ac
   22880:	0003ca71 	.word	0x0003ca71
   22884:	2001919c 	.word	0x2001919c

00022888 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   22888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
   2288c:	4b2f      	ldr	r3, [pc, #188]	; (2294c <pm_system_suspend+0xc4>)
{
   2288e:	4607      	mov	r7, r0
	uint8_t id = _current_cpu->id;
   22890:	7d1c      	ldrb	r4, [r3, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   22892:	ea4f 1854 	mov.w	r8, r4, lsr #5
   22896:	ea4f 0888 	mov.w	r8, r8, lsl #2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2289a:	4b2d      	ldr	r3, [pc, #180]	; (22950 <pm_system_suspend+0xc8>)
   2289c:	4443      	add	r3, r8
   2289e:	e8d3 3faf 	lda	r3, [r3]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   228a2:	f004 091f 	and.w	r9, r4, #31
   228a6:	fa43 f309 	asr.w	r3, r3, r9

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
   228aa:	f013 0f01 	tst.w	r3, #1
   228ae:	4e29      	ldr	r6, [pc, #164]	; (22954 <pm_system_suspend+0xcc>)
   228b0:	d10a      	bne.n	228c8 <pm_system_suspend+0x40>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
   228b2:	4601      	mov	r1, r0
   228b4:	4620      	mov	r0, r4
   228b6:	f000 f863 	bl	22980 <pm_policy_next_state>
		if (info != NULL) {
   228ba:	b128      	cbz	r0, 228c8 <pm_system_suspend+0x40>
			z_cpus_pm_state[id] = *info;
   228bc:	c807      	ldmia	r0, {r0, r1, r2}
   228be:	230c      	movs	r3, #12
   228c0:	fb03 6304 	mla	r3, r3, r4, r6
   228c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   228c8:	230c      	movs	r3, #12
   228ca:	4363      	muls	r3, r4
   228cc:	5cf5      	ldrb	r5, [r6, r3]
   228ce:	18f2      	adds	r2, r6, r3
   228d0:	b92d      	cbnz	r5, 228de <pm_system_suspend+0x56>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
   228d2:	4620      	mov	r0, r4
   228d4:	f7ff ff8a 	bl	227ec <atomic_clear_bit.constprop.0>
		ret = false;
   228d8:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
   228da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
   228de:	1c7b      	adds	r3, r7, #1
   228e0:	d00f      	beq.n	22902 <pm_system_suspend+0x7a>
   228e2:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   228e6:	2100      	movs	r1, #0
   228e8:	f8d2 c008 	ldr.w	ip, [r2, #8]
   228ec:	481a      	ldr	r0, [pc, #104]	; (22958 <pm_system_suspend+0xd0>)
   228ee:	2300      	movs	r3, #0
   228f0:	fbec 0105 	umlal	r0, r1, ip, r5
   228f4:	4a19      	ldr	r2, [pc, #100]	; (2295c <pm_system_suspend+0xd4>)
   228f6:	f7fa faf7 	bl	1cee8 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   228fa:	2101      	movs	r1, #1
   228fc:	1a38      	subs	r0, r7, r0
   228fe:	f016 f97f 	bl	38c00 <z_set_timeout_expiry>
	k_sched_lock();
   22902:	f015 f81f 	bl	37944 <k_sched_lock>
	pm_state_notify(true);
   22906:	2001      	movs	r0, #1
   22908:	f7ff ff1e 	bl	22748 <pm_state_notify>
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   2290c:	2301      	movs	r3, #1
   2290e:	fa03 f909 	lsl.w	r9, r3, r9
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22912:	4b13      	ldr	r3, [pc, #76]	; (22960 <pm_system_suspend+0xd8>)
   22914:	4498      	add	r8, r3
   22916:	e8d8 3fef 	ldaex	r3, [r8]
   2291a:	ea43 0309 	orr.w	r3, r3, r9
   2291e:	e8c8 3fe2 	stlex	r2, r3, [r8]
   22922:	2a00      	cmp	r2, #0
   22924:	d1f7      	bne.n	22916 <pm_system_suspend+0x8e>
	if (pm_state_set != NULL) {
   22926:	4b0f      	ldr	r3, [pc, #60]	; (22964 <pm_system_suspend+0xdc>)
   22928:	b133      	cbz	r3, 22938 <pm_system_suspend+0xb0>
		pm_state_set(info->state, info->substate_id);
   2292a:	230c      	movs	r3, #12
   2292c:	4363      	muls	r3, r4
   2292e:	18f2      	adds	r2, r6, r3
   22930:	7851      	ldrb	r1, [r2, #1]
   22932:	5cf0      	ldrb	r0, [r6, r3]
   22934:	f01a f890 	bl	3ca58 <pm_state_set>
	pm_system_resume();
   22938:	f7ff ff6c 	bl	22814 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
   2293c:	4620      	mov	r0, r4
   2293e:	f7ff ff55 	bl	227ec <atomic_clear_bit.constprop.0>
	k_sched_unlock();
   22942:	f015 fca1 	bl	38288 <k_sched_unlock>
	bool ret = true;
   22946:	2001      	movs	r0, #1
   22948:	e7c7      	b.n	228da <pm_system_suspend+0x52>
   2294a:	bf00      	nop
   2294c:	2001a500 	.word	0x2001a500
   22950:	200191a8 	.word	0x200191a8
   22954:	2001919c 	.word	0x2001919c
   22958:	000f423f 	.word	0x000f423f
   2295c:	000f4240 	.word	0x000f4240
   22960:	200191ac 	.word	0x200191ac
   22964:	0003ca59 	.word	0x0003ca59

00022968 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22968:	4b04      	ldr	r3, [pc, #16]	; (2297c <pm_policy_state_lock_is_active+0x14>)
   2296a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   2296e:	e8d0 0faf 	lda	r0, [r0]
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
   22972:	3800      	subs	r0, #0
   22974:	bf18      	it	ne
   22976:	2001      	movne	r0, #1
   22978:	4770      	bx	lr
   2297a:	bf00      	nop
   2297c:	200191b0 	.word	0x200191b0

00022980 <pm_policy_next_state>:
{
   22980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22984:	b085      	sub	sp, #20
   22986:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   22988:	a903      	add	r1, sp, #12
   2298a:	f000 f847 	bl	22a1c <pm_state_cpu_get_all>
   2298e:	f04f 0b00 	mov.w	fp, #0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   22992:	3801      	subs	r0, #1
   22994:	f8df 807c 	ldr.w	r8, [pc, #124]	; 22a14 <pm_policy_next_state+0x94>
   22998:	f8df a07c 	ldr.w	sl, [pc, #124]	; 22a18 <pm_policy_next_state+0x98>
   2299c:	b204      	sxth	r4, r0
   2299e:	1c63      	adds	r3, r4, #1
   229a0:	d104      	bne.n	229ac <pm_policy_next_state+0x2c>
	return NULL;
   229a2:	2600      	movs	r6, #0
}
   229a4:	4630      	mov	r0, r6
   229a6:	b005      	add	sp, #20
   229a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
   229ac:	9a03      	ldr	r2, [sp, #12]
   229ae:	eb04 0344 	add.w	r3, r4, r4, lsl #1
		if (pm_policy_state_lock_is_active(state->state)) {
   229b2:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
		const struct pm_state_info *state = &cpu_states[i];
   229b6:	eb02 0683 	add.w	r6, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
   229ba:	f7ff ffd5 	bl	22968 <pm_policy_state_lock_is_active>
   229be:	4605      	mov	r5, r0
   229c0:	bb10      	cbnz	r0, 22a08 <pm_policy_next_state+0x88>
   229c2:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   229c6:	46c4      	mov	ip, r8
   229c8:	4629      	mov	r1, r5
   229ca:	6870      	ldr	r0, [r6, #4]
   229cc:	4652      	mov	r2, sl
   229ce:	fbe0 c109 	umlal	ip, r1, r0, r9
   229d2:	465b      	mov	r3, fp
   229d4:	4660      	mov	r0, ip
   229d6:	f7fa fa87 	bl	1cee8 <__aeabi_uldivmod>
   229da:	46c4      	mov	ip, r8
   229dc:	4629      	mov	r1, r5
   229de:	9001      	str	r0, [sp, #4]
   229e0:	68b0      	ldr	r0, [r6, #8]
   229e2:	465b      	mov	r3, fp
   229e4:	fbe0 c109 	umlal	ip, r1, r0, r9
   229e8:	4652      	mov	r2, sl
   229ea:	4660      	mov	r0, ip
   229ec:	f7fa fa7c 	bl	1cee8 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   229f0:	4b07      	ldr	r3, [pc, #28]	; (22a10 <pm_policy_next_state+0x90>)
   229f2:	681b      	ldr	r3, [r3, #0]
   229f4:	1c59      	adds	r1, r3, #1
   229f6:	d001      	beq.n	229fc <pm_policy_next_state+0x7c>
   229f8:	4283      	cmp	r3, r0
   229fa:	d905      	bls.n	22a08 <pm_policy_next_state+0x88>
		if ((ticks == K_TICKS_FOREVER) ||
   229fc:	1c7a      	adds	r2, r7, #1
   229fe:	d0d1      	beq.n	229a4 <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
   22a00:	9b01      	ldr	r3, [sp, #4]
   22a02:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   22a04:	42b8      	cmp	r0, r7
   22a06:	d9cd      	bls.n	229a4 <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   22a08:	3c01      	subs	r4, #1
   22a0a:	b224      	sxth	r4, r4
   22a0c:	e7c7      	b.n	2299e <pm_policy_next_state+0x1e>
   22a0e:	bf00      	nop
   22a10:	20014614 	.word	0x20014614
   22a14:	000f423f 	.word	0x000f423f
   22a18:	000f4240 	.word	0x000f4240

00022a1c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   22a1c:	b908      	cbnz	r0, 22a22 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   22a1e:	4b02      	ldr	r3, [pc, #8]	; (22a28 <pm_state_cpu_get_all+0xc>)
   22a20:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   22a22:	2000      	movs	r0, #0
   22a24:	4770      	bx	lr
   22a26:	bf00      	nop
   22a28:	00042950 	.word	0x00042950

00022a2c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   22a2c:	4901      	ldr	r1, [pc, #4]	; (22a34 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   22a2e:	2210      	movs	r2, #16
	str	r2, [r1]
   22a30:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   22a32:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   22a34:	e000ed10 	.word	0xe000ed10

00022a38 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   22a38:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   22a3a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   22a3c:	f380 8811 	msr	BASEPRI, r0
	isb
   22a40:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   22a44:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   22a48:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   22a4a:	b662      	cpsie	i
	isb
   22a4c:	f3bf 8f6f 	isb	sy

	bx	lr
   22a50:	4770      	bx	lr
   22a52:	bf00      	nop

00022a54 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   22a54:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   22a56:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   22a58:	f381 8811 	msr	BASEPRI, r1

	wfe
   22a5c:	bf20      	wfe

	msr	BASEPRI, r0
   22a5e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   22a62:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   22a64:	4770      	bx	lr
   22a66:	bf00      	nop

00022a68 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   22a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22a6c:	4607      	mov	r7, r0

	if (esf != NULL) {
   22a6e:	460c      	mov	r4, r1
{
   22a70:	b086      	sub	sp, #24
	if (esf != NULL) {
   22a72:	2900      	cmp	r1, #0
   22a74:	d04a      	beq.n	22b0c <z_arm_fatal_error+0xa4>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   22a76:	688b      	ldr	r3, [r1, #8]
   22a78:	4828      	ldr	r0, [pc, #160]	; (22b1c <z_arm_fatal_error+0xb4>)
   22a7a:	9300      	str	r3, [sp, #0]
   22a7c:	e9d1 2300 	ldrd	r2, r3, [r1]
   22a80:	2145      	movs	r1, #69	; 0x45
   22a82:	f01a f815 	bl	3cab0 <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   22a86:	6963      	ldr	r3, [r4, #20]
   22a88:	2145      	movs	r1, #69	; 0x45
   22a8a:	9300      	str	r3, [sp, #0]
   22a8c:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   22a90:	4823      	ldr	r0, [pc, #140]	; (22b20 <z_arm_fatal_error+0xb8>)
   22a92:	f01a f80d 	bl	3cab0 <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   22a96:	2145      	movs	r1, #69	; 0x45
   22a98:	69e2      	ldr	r2, [r4, #28]
   22a9a:	4822      	ldr	r0, [pc, #136]	; (22b24 <z_arm_fatal_error+0xbc>)
   22a9c:	f01a f808 	bl	3cab0 <z_log_minimal_printk>
	for (int i = 0; i < ARRAY_SIZE(esf->s); i += 4) {
   22aa0:	4626      	mov	r6, r4
   22aa2:	2500      	movs	r5, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   22aa4:	f8df 8088 	ldr.w	r8, [pc, #136]	; 22b30 <z_arm_fatal_error+0xc8>
   22aa8:	edd6 7a0b 	vldr	s15, [r6, #44]	; 0x2c
   22aac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   22ab0:	ed96 7a08 	vldr	s14, [r6, #32]
   22ab4:	edcd 7a05 	vstr	s15, [sp, #20]
   22ab8:	1ceb      	adds	r3, r5, #3
   22aba:	9304      	str	r3, [sp, #16]
   22abc:	edd6 7a0a 	vldr	s15, [r6, #40]	; 0x28
   22ac0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   22ac4:	edcd 7a03 	vstr	s15, [sp, #12]
   22ac8:	1cab      	adds	r3, r5, #2
   22aca:	9302      	str	r3, [sp, #8]
   22acc:	edd6 7a09 	vldr	s15, [r6, #36]	; 0x24
   22ad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   22ad4:	edcd 7a01 	vstr	s15, [sp, #4]
   22ad8:	eefc 7ac7 	vcvt.u32.f32	s15, s14
   22adc:	1c6b      	adds	r3, r5, #1
   22ade:	462a      	mov	r2, r5
   22ae0:	9300      	str	r3, [sp, #0]
   22ae2:	2145      	movs	r1, #69	; 0x45
   22ae4:	ee17 3a90 	vmov	r3, s15
   22ae8:	4640      	mov	r0, r8
	for (int i = 0; i < ARRAY_SIZE(esf->s); i += 4) {
   22aea:	3504      	adds	r5, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   22aec:	f019 ffe0 	bl	3cab0 <z_log_minimal_printk>
	for (int i = 0; i < ARRAY_SIZE(esf->s); i += 4) {
   22af0:	2d10      	cmp	r5, #16
   22af2:	f106 0610 	add.w	r6, r6, #16
   22af6:	d1d7      	bne.n	22aa8 <z_arm_fatal_error+0x40>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
   22af8:	2145      	movs	r1, #69	; 0x45
   22afa:	6e22      	ldr	r2, [r4, #96]	; 0x60
   22afc:	480a      	ldr	r0, [pc, #40]	; (22b28 <z_arm_fatal_error+0xc0>)
   22afe:	f019 ffd7 	bl	3cab0 <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   22b02:	2145      	movs	r1, #69	; 0x45
   22b04:	69a2      	ldr	r2, [r4, #24]
   22b06:	4809      	ldr	r0, [pc, #36]	; (22b2c <z_arm_fatal_error+0xc4>)
   22b08:	f019 ffd2 	bl	3cab0 <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   22b0c:	4621      	mov	r1, r4
   22b0e:	4638      	mov	r0, r7
}
   22b10:	b006      	add	sp, #24
   22b12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_fatal_error(reason, esf);
   22b16:	f013 b9f9 	b.w	35f0c <z_fatal_error>
   22b1a:	bf00      	nop
   22b1c:	000443ec 	.word	0x000443ec
   22b20:	00044420 	.word	0x00044420
   22b24:	00044454 	.word	0x00044454
   22b28:	000444b0 	.word	0x000444b0
   22b2c:	000444c4 	.word	0x000444c4
   22b30:	00044468 	.word	0x00044468

00022b34 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   22b34:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   22b36:	2b00      	cmp	r3, #0
   22b38:	db08      	blt.n	22b4c <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   22b3a:	2201      	movs	r2, #1
   22b3c:	f000 001f 	and.w	r0, r0, #31
   22b40:	fa02 f000 	lsl.w	r0, r2, r0
   22b44:	4a02      	ldr	r2, [pc, #8]	; (22b50 <arch_irq_enable+0x1c>)
   22b46:	095b      	lsrs	r3, r3, #5
   22b48:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   22b4c:	4770      	bx	lr
   22b4e:	bf00      	nop
   22b50:	e000e100 	.word	0xe000e100

00022b54 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   22b54:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   22b56:	2b00      	cmp	r3, #0
   22b58:	db0d      	blt.n	22b76 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   22b5a:	2201      	movs	r2, #1
   22b5c:	f000 001f 	and.w	r0, r0, #31
   22b60:	fa02 f000 	lsl.w	r0, r2, r0
   22b64:	095b      	lsrs	r3, r3, #5
   22b66:	4a04      	ldr	r2, [pc, #16]	; (22b78 <arch_irq_disable+0x24>)
   22b68:	3320      	adds	r3, #32
   22b6a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   22b6e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   22b72:	f3bf 8f6f 	isb	sy
}
   22b76:	4770      	bx	lr
   22b78:	e000e100 	.word	0xe000e100

00022b7c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   22b7c:	4b05      	ldr	r3, [pc, #20]	; (22b94 <arch_irq_is_enabled+0x18>)
   22b7e:	0942      	lsrs	r2, r0, #5
   22b80:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   22b84:	2301      	movs	r3, #1
   22b86:	f000 001f 	and.w	r0, r0, #31
   22b8a:	fa03 f000 	lsl.w	r0, r3, r0
}
   22b8e:	4010      	ands	r0, r2
   22b90:	4770      	bx	lr
   22b92:	bf00      	nop
   22b94:	e000e100 	.word	0xe000e100

00022b98 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   22b98:	b538      	push	{r3, r4, r5, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   22b9a:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   22b9c:	2c07      	cmp	r4, #7
{
   22b9e:	4605      	mov	r5, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   22ba0:	d908      	bls.n	22bb4 <z_arm_irq_priority_set+0x1c>
   22ba2:	490d      	ldr	r1, [pc, #52]	; (22bd8 <z_arm_irq_priority_set+0x40>)
   22ba4:	480d      	ldr	r0, [pc, #52]	; (22bdc <z_arm_irq_priority_set+0x44>)
   22ba6:	2257      	movs	r2, #87	; 0x57
   22ba8:	f019 ff48 	bl	3ca3c <assert_print>
   22bac:	2157      	movs	r1, #87	; 0x57
   22bae:	480a      	ldr	r0, [pc, #40]	; (22bd8 <z_arm_irq_priority_set+0x40>)
   22bb0:	f019 ff3d 	bl	3ca2e <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   22bb4:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   22bb6:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   22bb8:	bfac      	ite	ge
   22bba:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   22bbe:	4b08      	ldrlt	r3, [pc, #32]	; (22be0 <z_arm_irq_priority_set+0x48>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   22bc0:	ea4f 1444 	mov.w	r4, r4, lsl #5
   22bc4:	b2e4      	uxtb	r4, r4
   22bc6:	bfab      	itete	ge
   22bc8:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   22bcc:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   22bd0:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   22bd4:	555c      	strblt	r4, [r3, r5]
}
   22bd6:	bd38      	pop	{r3, r4, r5, pc}
   22bd8:	000444f7 	.word	0x000444f7
   22bdc:	00043ff2 	.word	0x00043ff2
   22be0:	e000ed14 	.word	0xe000ed14

00022be4 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   22be4:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   22be6:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   22be8:	4b04      	ldr	r3, [pc, #16]	; (22bfc <_arch_isr_direct_pm+0x18>)
   22bea:	699a      	ldr	r2, [r3, #24]
   22bec:	b11a      	cbz	r2, 22bf6 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   22bee:	2200      	movs	r2, #0
   22bf0:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   22bf2:	f01e f99e 	bl	40f32 <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   22bf6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   22bf8:	bd08      	pop	{r3, pc}
   22bfa:	bf00      	nop
   22bfc:	2001a500 	.word	0x2001a500

00022c00 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   22c00:	bf30      	wfi
    b z_SysNmiOnReset
   22c02:	f7ff bffd 	b.w	22c00 <z_SysNmiOnReset>
   22c06:	bf00      	nop

00022c08 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   22c08:	4a14      	ldr	r2, [pc, #80]	; (22c5c <z_arm_prep_c+0x54>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   22c0a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   22c0c:	4b14      	ldr	r3, [pc, #80]	; (22c60 <z_arm_prep_c+0x58>)
   22c0e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   22c12:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   22c14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   22c18:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   22c1c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   22c20:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   22c24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   22c28:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   22c2c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   22c30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   22c34:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   22c38:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   22c3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   22c40:	f3bf 8f6f 	isb	sy
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
   22c44:	2300      	movs	r3, #0
   22c46:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   22c4a:	f013 f9d5 	bl	35ff8 <z_bss_zero>
	z_data_copy();
   22c4e:	f015 fdf3 	bl	38838 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   22c52:	f000 fb3f 	bl	232d4 <z_arm_interrupt_init>
	z_cstart();
   22c56:	f013 fa0f 	bl	36078 <z_cstart>
   22c5a:	bf00      	nop
   22c5c:	0001c200 	.word	0x0001c200
   22c60:	e000ed00 	.word	0xe000ed00

00022c64 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   22c64:	4a0a      	ldr	r2, [pc, #40]	; (22c90 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
   22c66:	490b      	ldr	r1, [pc, #44]	; (22c94 <arch_swap+0x30>)
	_current->arch.basepri = key;
   22c68:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   22c6a:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   22c6c:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	_current->arch.swap_return_value = _k_neg_eagain;
   22c70:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   22c74:	4908      	ldr	r1, [pc, #32]	; (22c98 <arch_swap+0x34>)
   22c76:	684b      	ldr	r3, [r1, #4]
   22c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   22c7c:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   22c7e:	2300      	movs	r3, #0
   22c80:	f383 8811 	msr	BASEPRI, r3
   22c84:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   22c88:	6893      	ldr	r3, [r2, #8]
}
   22c8a:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
   22c8e:	4770      	bx	lr
   22c90:	2001a500 	.word	0x2001a500
   22c94:	00043398 	.word	0x00043398
   22c98:	e000ed00 	.word	0xe000ed00

00022c9c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   22c9c:	4923      	ldr	r1, [pc, #140]	; (22d2c <in_fp_endif+0x2e>)
    ldr r2, [r1, #_kernel_offset_to_current]
   22c9e:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   22ca0:	f882 e0cd 	strb.w	lr, [r2, #205]	; 0xcd
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   22ca4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   22ca8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   22caa:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   22cae:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
   22cb2:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
   22cb6:	d103      	bne.n	22cc0 <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
   22cb8:	f102 008c 	add.w	r0, r2, #140	; 0x8c
    vstmia r0, {s16-s31}
   22cbc:	ec80 8a10 	vstmia	r0, {s16-s31}

00022cc0 <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   22cc0:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   22cc2:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   22cc6:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   22cca:	4f19      	ldr	r7, [pc, #100]	; (22d30 <in_fp_endif+0x32>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   22ccc:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   22cd0:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   22cd2:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   22cd4:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   22cd6:	f992 e0cd 	ldrsb.w	lr, [r2, #205]	; 0xcd

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   22cda:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    movs r3, #0
   22cde:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   22ce0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   22ce4:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
   22ce8:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
   22cec:	d003      	beq.n	22cf6 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   22cee:	2300      	movs	r3, #0
    vmsr fpscr, r3
   22cf0:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
   22cf4:	e003      	b.n	22cfe <in_fp_endif>

00022cf6 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
   22cf6:	f102 008c 	add.w	r0, r2, #140	; 0x8c
    vldmia r0, {s16-s31}
   22cfa:	ec90 8a10 	vldmia	r0, {s16-s31}

00022cfe <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   22cfe:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #_CONTROL_FPCA_Msk
   22d02:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   22d06:	f383 8814 	msr	CONTROL, r3
    isb
   22d0a:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   22d0e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   22d12:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   22d16:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   22d1a:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   22d1e:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   22d20:	f01a fcc1 	bl	3d6a6 <configure_builtin_stack_guard>
    pop {r2, lr}
   22d24:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   22d28:	4770      	bx	lr
   22d2a:	0000      	.short	0x0000
    ldr r1, =_kernel
   22d2c:	2001a500 	.word	0x2001a500
    ldr v4, =_SCS_ICSR
   22d30:	e000ed04 	.word	0xe000ed04

00022d34 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   22d34:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   22d38:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   22d3a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   22d3e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   22d42:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   22d44:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   22d48:	2902      	cmp	r1, #2
    beq _oops
   22d4a:	d0ff      	beq.n	22d4c <_oops>

00022d4c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   22d4c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   22d4e:	f01a fc9b 	bl	3d688 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   22d52:	bd01      	pop	{r0, pc}

00022d54 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   22d54:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   22d58:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   22d5a:	490d      	ldr	r1, [pc, #52]	; (22d90 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
   22d5c:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   22d60:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   22d62:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   22d66:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   22d6a:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   22d6c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   22d70:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   22d74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   22d78:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   22d7c:	2300      	movs	r3, #0
   22d7e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
   22d82:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   22d86:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   22d88:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
   22d8a:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   22d8e:	4770      	bx	lr
   22d90:	0003c753 	.word	0x0003c753

00022d94 <arch_switch_to_main_thread>:
   22d94:	2300      	movs	r3, #0
   22d96:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   22d9a:	f3ef 8314 	mrs	r3, CONTROL
#else
	__set_FPSCR(0);
#endif
#if defined(CONFIG_FPU_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   22d9e:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   22da2:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   22da6:	f3bf 8f6f 	isb	sy
   22daa:	f3bf 8f6f 	isb	sy
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   22dae:	4b09      	ldr	r3, [pc, #36]	; (22dd4 <arch_switch_to_main_thread+0x40>)
   22db0:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   22db2:	6f43      	ldr	r3, [r0, #116]	; 0x74
   22db4:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   22db8:	4610      	mov	r0, r2
   22dba:	f381 8809 	msr	PSP, r1
   22dbe:	2100      	movs	r1, #0
   22dc0:	b663      	cpsie	if
   22dc2:	f381 8811 	msr	BASEPRI, r1
   22dc6:	f3bf 8f6f 	isb	sy
   22dca:	2200      	movs	r2, #0
   22dcc:	2300      	movs	r3, #0
   22dce:	f019 fcc0 	bl	3c752 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   22dd2:	bf00      	nop
   22dd4:	2001a500 	.word	0x2001a500

00022dd8 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   22dd8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   22dda:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   22ddc:	4a0b      	ldr	r2, [pc, #44]	; (22e0c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   22dde:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   22de0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   22de2:	bf1e      	ittt	ne
	movne	r1, #0
   22de4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   22de6:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   22de8:	f01e f8a3 	blne	40f32 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   22dec:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   22dee:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   22df2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   22df6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   22dfa:	4905      	ldr	r1, [pc, #20]	; (22e10 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   22dfc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   22dfe:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   22e00:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   22e02:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   22e06:	4903      	ldr	r1, [pc, #12]	; (22e14 <_isr_wrapper+0x3c>)
	bx r1
   22e08:	4708      	bx	r1
   22e0a:	0000      	.short	0x0000
	ldr r2, =_kernel
   22e0c:	2001a500 	.word	0x2001a500
	ldr r1, =_sw_isr_table
   22e10:	0004239c 	.word	0x0004239c
	ldr r1, =z_arm_int_exit
   22e14:	00022e19 	.word	0x00022e19

00022e18 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   22e18:	4b04      	ldr	r3, [pc, #16]	; (22e2c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   22e1a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   22e1c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   22e1e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   22e20:	d003      	beq.n	22e2a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   22e22:	4903      	ldr	r1, [pc, #12]	; (22e30 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   22e24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   22e28:	600a      	str	r2, [r1, #0]

00022e2a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   22e2a:	4770      	bx	lr
	ldr r3, =_kernel
   22e2c:	2001a500 	.word	0x2001a500
	ldr r1, =_SCS_ICSR
   22e30:	e000ed04 	.word	0xe000ed04

00022e34 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   22e34:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   22e36:	4c21      	ldr	r4, [pc, #132]	; (22ebc <usage_fault.constprop.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   22e38:	2145      	movs	r1, #69	; 0x45
   22e3a:	4821      	ldr	r0, [pc, #132]	; (22ec0 <usage_fault.constprop.0+0x8c>)
   22e3c:	f019 fe38 	bl	3cab0 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   22e40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22e42:	019d      	lsls	r5, r3, #6
   22e44:	d503      	bpl.n	22e4e <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
   22e46:	2145      	movs	r1, #69	; 0x45
   22e48:	481e      	ldr	r0, [pc, #120]	; (22ec4 <usage_fault.constprop.0+0x90>)
   22e4a:	f019 fe31 	bl	3cab0 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   22e4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22e50:	01dc      	lsls	r4, r3, #7
   22e52:	d503      	bpl.n	22e5c <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
   22e54:	2145      	movs	r1, #69	; 0x45
   22e56:	481c      	ldr	r0, [pc, #112]	; (22ec8 <usage_fault.constprop.0+0x94>)
   22e58:	f019 fe2a 	bl	3cab0 <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   22e5c:	4d17      	ldr	r5, [pc, #92]	; (22ebc <usage_fault.constprop.0+0x88>)
   22e5e:	6aac      	ldr	r4, [r5, #40]	; 0x28
   22e60:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   22e64:	d004      	beq.n	22e70 <usage_fault.constprop.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   22e66:	2145      	movs	r1, #69	; 0x45
   22e68:	4818      	ldr	r0, [pc, #96]	; (22ecc <usage_fault.constprop.0+0x98>)
   22e6a:	f019 fe21 	bl	3cab0 <z_log_minimal_printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   22e6e:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   22e70:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22e72:	0318      	lsls	r0, r3, #12
   22e74:	d503      	bpl.n	22e7e <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
   22e76:	2145      	movs	r1, #69	; 0x45
   22e78:	4815      	ldr	r0, [pc, #84]	; (22ed0 <usage_fault.constprop.0+0x9c>)
   22e7a:	f019 fe19 	bl	3cab0 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   22e7e:	4d0f      	ldr	r5, [pc, #60]	; (22ebc <usage_fault.constprop.0+0x88>)
   22e80:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22e82:	0359      	lsls	r1, r3, #13
   22e84:	d503      	bpl.n	22e8e <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   22e86:	2145      	movs	r1, #69	; 0x45
   22e88:	4812      	ldr	r0, [pc, #72]	; (22ed4 <usage_fault.constprop.0+0xa0>)
   22e8a:	f019 fe11 	bl	3cab0 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   22e8e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22e90:	039a      	lsls	r2, r3, #14
   22e92:	d503      	bpl.n	22e9c <usage_fault.constprop.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   22e94:	2145      	movs	r1, #69	; 0x45
   22e96:	4810      	ldr	r0, [pc, #64]	; (22ed8 <usage_fault.constprop.0+0xa4>)
   22e98:	f019 fe0a 	bl	3cab0 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   22e9c:	4d07      	ldr	r5, [pc, #28]	; (22ebc <usage_fault.constprop.0+0x88>)
   22e9e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   22ea0:	03db      	lsls	r3, r3, #15
   22ea2:	d503      	bpl.n	22eac <usage_fault.constprop.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   22ea4:	2145      	movs	r1, #69	; 0x45
   22ea6:	480d      	ldr	r0, [pc, #52]	; (22edc <usage_fault.constprop.0+0xa8>)
   22ea8:	f019 fe02 	bl	3cab0 <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   22eac:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
   22eae:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   22eb0:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   22eb4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   22eb8:	62ab      	str	r3, [r5, #40]	; 0x28
}
   22eba:	bd38      	pop	{r3, r4, r5, pc}
   22ebc:	e000ed00 	.word	0xe000ed00
   22ec0:	0004452d 	.word	0x0004452d
   22ec4:	0004454a 	.word	0x0004454a
   22ec8:	00044562 	.word	0x00044562
   22ecc:	00044581 	.word	0x00044581
   22ed0:	000445b0 	.word	0x000445b0
   22ed4:	000445d3 	.word	0x000445d3
   22ed8:	000445fd 	.word	0x000445fd
   22edc:	0004461c 	.word	0x0004461c

00022ee0 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   22ee0:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   22ee2:	4c23      	ldr	r4, [pc, #140]	; (22f70 <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   22ee4:	4606      	mov	r6, r0
   22ee6:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   22ee8:	4822      	ldr	r0, [pc, #136]	; (22f74 <bus_fault.constprop.0+0x94>)
   22eea:	2145      	movs	r1, #69	; 0x45
   22eec:	f019 fde0 	bl	3cab0 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   22ef0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22ef2:	04d9      	lsls	r1, r3, #19
   22ef4:	d503      	bpl.n	22efe <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
   22ef6:	2145      	movs	r1, #69	; 0x45
   22ef8:	481f      	ldr	r0, [pc, #124]	; (22f78 <bus_fault.constprop.0+0x98>)
   22efa:	f019 fdd9 	bl	3cab0 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   22efe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22f00:	051a      	lsls	r2, r3, #20
   22f02:	d503      	bpl.n	22f0c <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
   22f04:	2145      	movs	r1, #69	; 0x45
   22f06:	481d      	ldr	r0, [pc, #116]	; (22f7c <bus_fault.constprop.0+0x9c>)
   22f08:	f019 fdd2 	bl	3cab0 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   22f0c:	4c18      	ldr	r4, [pc, #96]	; (22f70 <bus_fault.constprop.0+0x90>)
   22f0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22f10:	059b      	lsls	r3, r3, #22
   22f12:	d510      	bpl.n	22f36 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
   22f14:	481a      	ldr	r0, [pc, #104]	; (22f80 <bus_fault.constprop.0+0xa0>)
   22f16:	2145      	movs	r1, #69	; 0x45
   22f18:	f019 fdca 	bl	3cab0 <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
   22f1c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   22f1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22f20:	0418      	lsls	r0, r3, #16
   22f22:	d508      	bpl.n	22f36 <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   22f24:	2145      	movs	r1, #69	; 0x45
   22f26:	4817      	ldr	r0, [pc, #92]	; (22f84 <bus_fault.constprop.0+0xa4>)
   22f28:	f019 fdc2 	bl	3cab0 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   22f2c:	b11e      	cbz	r6, 22f36 <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   22f2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22f30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   22f34:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   22f36:	4c0e      	ldr	r4, [pc, #56]	; (22f70 <bus_fault.constprop.0+0x90>)
   22f38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22f3a:	0559      	lsls	r1, r3, #21
   22f3c:	d503      	bpl.n	22f46 <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
   22f3e:	2145      	movs	r1, #69	; 0x45
   22f40:	4811      	ldr	r0, [pc, #68]	; (22f88 <bus_fault.constprop.0+0xa8>)
   22f42:	f019 fdb5 	bl	3cab0 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   22f46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22f48:	05da      	lsls	r2, r3, #23
   22f4a:	d50b      	bpl.n	22f64 <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
   22f4c:	2145      	movs	r1, #69	; 0x45
   22f4e:	480f      	ldr	r0, [pc, #60]	; (22f8c <bus_fault.constprop.0+0xac>)
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   22f50:	f019 fdae 	bl	3cab0 <z_log_minimal_printk>
	*recoverable = memory_fault_recoverable(esf, true);
   22f54:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   22f56:	4a06      	ldr	r2, [pc, #24]	; (22f70 <bus_fault.constprop.0+0x90>)
   22f58:	6a93      	ldr	r3, [r2, #40]	; 0x28
   22f5a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   22f5e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   22f60:	7028      	strb	r0, [r5, #0]
}
   22f62:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   22f64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22f66:	049b      	lsls	r3, r3, #18
   22f68:	d5f4      	bpl.n	22f54 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   22f6a:	2145      	movs	r1, #69	; 0x45
   22f6c:	4808      	ldr	r0, [pc, #32]	; (22f90 <bus_fault.constprop.0+0xb0>)
   22f6e:	e7ef      	b.n	22f50 <bus_fault.constprop.0+0x70>
   22f70:	e000ed00 	.word	0xe000ed00
   22f74:	0004464c 	.word	0x0004464c
   22f78:	00044667 	.word	0x00044667
   22f7c:	0004467d 	.word	0x0004467d
   22f80:	00044695 	.word	0x00044695
   22f84:	000446b3 	.word	0x000446b3
   22f88:	000446cd 	.word	0x000446cd
   22f8c:	000446ed 	.word	0x000446ed
   22f90:	0004470a 	.word	0x0004470a

00022f94 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   22f94:	b570      	push	{r4, r5, r6, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   22f96:	4c2e      	ldr	r4, [pc, #184]	; (23050 <mem_manage_fault.constprop.0+0xbc>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   22f98:	4606      	mov	r6, r0
   22f9a:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   22f9c:	482d      	ldr	r0, [pc, #180]	; (23054 <mem_manage_fault.constprop.0+0xc0>)
   22f9e:	2145      	movs	r1, #69	; 0x45
   22fa0:	f019 fd86 	bl	3cab0 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   22fa4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22fa6:	06db      	lsls	r3, r3, #27
   22fa8:	d503      	bpl.n	22fb2 <mem_manage_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   22faa:	2145      	movs	r1, #69	; 0x45
   22fac:	482a      	ldr	r0, [pc, #168]	; (23058 <mem_manage_fault.constprop.0+0xc4>)
   22fae:	f019 fd7f 	bl	3cab0 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   22fb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22fb4:	071c      	lsls	r4, r3, #28
   22fb6:	d503      	bpl.n	22fc0 <mem_manage_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
   22fb8:	2145      	movs	r1, #69	; 0x45
   22fba:	4828      	ldr	r0, [pc, #160]	; (2305c <mem_manage_fault.constprop.0+0xc8>)
   22fbc:	f019 fd78 	bl	3cab0 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   22fc0:	4c23      	ldr	r4, [pc, #140]	; (23050 <mem_manage_fault.constprop.0+0xbc>)
   22fc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22fc4:	0798      	lsls	r0, r3, #30
   22fc6:	d510      	bpl.n	22fea <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
   22fc8:	2145      	movs	r1, #69	; 0x45
   22fca:	4825      	ldr	r0, [pc, #148]	; (23060 <mem_manage_fault.constprop.0+0xcc>)
   22fcc:	f019 fd70 	bl	3cab0 <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
   22fd0:	6b62      	ldr	r2, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   22fd2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22fd4:	0619      	lsls	r1, r3, #24
   22fd6:	d508      	bpl.n	22fea <mem_manage_fault.constprop.0+0x56>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   22fd8:	2145      	movs	r1, #69	; 0x45
   22fda:	4822      	ldr	r0, [pc, #136]	; (23064 <mem_manage_fault.constprop.0+0xd0>)
   22fdc:	f019 fd68 	bl	3cab0 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   22fe0:	b11e      	cbz	r6, 22fea <mem_manage_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   22fe2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22fe4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   22fe8:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   22fea:	4c19      	ldr	r4, [pc, #100]	; (23050 <mem_manage_fault.constprop.0+0xbc>)
   22fec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22fee:	07db      	lsls	r3, r3, #31
   22ff0:	d503      	bpl.n	22ffa <mem_manage_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
   22ff2:	2145      	movs	r1, #69	; 0x45
   22ff4:	481c      	ldr	r0, [pc, #112]	; (23068 <mem_manage_fault.constprop.0+0xd4>)
   22ff6:	f019 fd5b 	bl	3cab0 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   22ffa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22ffc:	069e      	lsls	r6, r3, #26
   22ffe:	d503      	bpl.n	23008 <mem_manage_fault.constprop.0+0x74>
		PR_FAULT_INFO(
   23000:	2145      	movs	r1, #69	; 0x45
   23002:	481a      	ldr	r0, [pc, #104]	; (2306c <mem_manage_fault.constprop.0+0xd8>)
   23004:	f019 fd54 	bl	3cab0 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   23008:	4b11      	ldr	r3, [pc, #68]	; (23050 <mem_manage_fault.constprop.0+0xbc>)
   2300a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2300c:	06d4      	lsls	r4, r2, #27
   2300e:	d402      	bmi.n	23016 <mem_manage_fault.constprop.0+0x82>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   23010:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   23012:	0790      	lsls	r0, r2, #30
   23014:	d50d      	bpl.n	23032 <mem_manage_fault.constprop.0+0x9e>
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   23016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   23018:	06d9      	lsls	r1, r3, #27
   2301a:	d50a      	bpl.n	23032 <mem_manage_fault.constprop.0+0x9e>
   2301c:	4914      	ldr	r1, [pc, #80]	; (23070 <mem_manage_fault.constprop.0+0xdc>)
   2301e:	4815      	ldr	r0, [pc, #84]	; (23074 <mem_manage_fault.constprop.0+0xe0>)
   23020:	f240 124f 	movw	r2, #335	; 0x14f
   23024:	f019 fd0a 	bl	3ca3c <assert_print>
   23028:	f240 114f 	movw	r1, #335	; 0x14f
   2302c:	4810      	ldr	r0, [pc, #64]	; (23070 <mem_manage_fault.constprop.0+0xdc>)
   2302e:	f019 fcfe 	bl	3ca2e <assert_post_action>
	*recoverable = memory_fault_recoverable(esf, true);
   23032:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   23034:	4b06      	ldr	r3, [pc, #24]	; (23050 <mem_manage_fault.constprop.0+0xbc>)
   23036:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   23038:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   2303a:	bf42      	ittt	mi
   2303c:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   2303e:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   23042:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   23044:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   23046:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   2304a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   2304c:	7028      	strb	r0, [r5, #0]
}
   2304e:	bd70      	pop	{r4, r5, r6, pc}
   23050:	e000ed00 	.word	0xe000ed00
   23054:	0004473e 	.word	0x0004473e
   23058:	00044759 	.word	0x00044759
   2305c:	0004467d 	.word	0x0004467d
   23060:	00044791 	.word	0x00044791
   23064:	000447ae 	.word	0x000447ae
   23068:	000447c9 	.word	0x000447c9
   2306c:	0004470a 	.word	0x0004470a
   23070:	000447ed 	.word	0x000447ed
   23074:	00043ff2 	.word	0x00043ff2

00023078 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   23078:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   2307c:	4b69      	ldr	r3, [pc, #420]	; (23224 <z_arm_fault+0x1ac>)
{
   2307e:	4607      	mov	r7, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   23080:	f8d3 9004 	ldr.w	r9, [r3, #4]
{
   23084:	460d      	mov	r5, r1
   23086:	4614      	mov	r4, r2
   23088:	2600      	movs	r6, #0
   2308a:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   2308c:	f3c9 0808 	ubfx	r8, r9, #0, #9
   23090:	f386 8811 	msr	BASEPRI, r6
   23094:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   23098:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   2309c:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   230a0:	d111      	bne.n	230c6 <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   230a2:	07d0      	lsls	r0, r2, #31
   230a4:	d40f      	bmi.n	230c6 <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   230a6:	0651      	lsls	r1, r2, #25
   230a8:	d404      	bmi.n	230b4 <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   230aa:	0722      	lsls	r2, r4, #28
   230ac:	d409      	bmi.n	230c2 <z_arm_fault+0x4a>
			ptr_esf = (z_arch_esf_t *)msp;
   230ae:	463d      	mov	r5, r7
			*nested_exc = true;
   230b0:	2601      	movs	r6, #1
   230b2:	e007      	b.n	230c4 <z_arm_fault+0x4c>
		PR_FAULT_INFO("Exception occurred in Secure State");
   230b4:	2145      	movs	r1, #69	; 0x45
   230b6:	485c      	ldr	r0, [pc, #368]	; (23228 <z_arm_fault+0x1b0>)
   230b8:	f019 fcfa 	bl	3cab0 <z_log_minimal_printk>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   230bc:	f014 0404 	ands.w	r4, r4, #4
   230c0:	d01c      	beq.n	230fc <z_arm_fault+0x84>
	*nested_exc = false;
   230c2:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   230c4:	b95d      	cbnz	r5, 230de <z_arm_fault+0x66>
   230c6:	f240 32fb 	movw	r2, #1019	; 0x3fb
   230ca:	4958      	ldr	r1, [pc, #352]	; (2322c <z_arm_fault+0x1b4>)
   230cc:	4858      	ldr	r0, [pc, #352]	; (23230 <z_arm_fault+0x1b8>)
   230ce:	f019 fcb5 	bl	3ca3c <assert_print>
   230d2:	f240 31fb 	movw	r1, #1019	; 0x3fb
   230d6:	4855      	ldr	r0, [pc, #340]	; (2322c <z_arm_fault+0x1b4>)
   230d8:	f019 fca9 	bl	3ca2e <assert_post_action>
   230dc:	2500      	movs	r5, #0
	*recoverable = false;
   230de:	2400      	movs	r4, #0
	switch (fault) {
   230e0:	f1a8 0303 	sub.w	r3, r8, #3
	*recoverable = false;
   230e4:	f88d 4007 	strb.w	r4, [sp, #7]
	switch (fault) {
   230e8:	2b09      	cmp	r3, #9
   230ea:	f200 8089 	bhi.w	23200 <z_arm_fault+0x188>
   230ee:	e8df f003 	tbb	[pc, r3]
   230f2:	7c07      	.short	0x7c07
   230f4:	87876480 	.word	0x87876480
   230f8:	84878787 	.word	0x84878787
			ptr_esf = (z_arch_esf_t *)msp;
   230fc:	463d      	mov	r5, r7
	if (!alternative_state_exc) {
   230fe:	e7e0      	b.n	230c2 <z_arm_fault+0x4a>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   23100:	4f48      	ldr	r7, [pc, #288]	; (23224 <z_arm_fault+0x1ac>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   23102:	2145      	movs	r1, #69	; 0x45
   23104:	484b      	ldr	r0, [pc, #300]	; (23234 <z_arm_fault+0x1bc>)
   23106:	f019 fcd3 	bl	3cab0 <z_log_minimal_printk>
	*recoverable = false;
   2310a:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   2310e:	6afc      	ldr	r4, [r7, #44]	; 0x2c
   23110:	f014 0402 	ands.w	r4, r4, #2
   23114:	d005      	beq.n	23122 <z_arm_fault+0xaa>
		PR_EXC("  Bus fault on vector table read");
   23116:	2145      	movs	r1, #69	; 0x45
   23118:	4847      	ldr	r0, [pc, #284]	; (23238 <z_arm_fault+0x1c0>)
	PR_FAULT_INFO(
   2311a:	f019 fcc9 	bl	3cab0 <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   2311e:	2400      	movs	r4, #0
}
   23120:	e006      	b.n	23130 <z_arm_fault+0xb8>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   23122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   23124:	2b00      	cmp	r3, #0
   23126:	da1d      	bge.n	23164 <z_arm_fault+0xec>
		PR_EXC("  Debug event");
   23128:	2145      	movs	r1, #69	; 0x45
   2312a:	4844      	ldr	r0, [pc, #272]	; (2323c <z_arm_fault+0x1c4>)
   2312c:	f019 fcc0 	bl	3cab0 <z_log_minimal_printk>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   23130:	f89d 3007 	ldrb.w	r3, [sp, #7]
   23134:	b99b      	cbnz	r3, 2315e <z_arm_fault+0xe6>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   23136:	2268      	movs	r2, #104	; 0x68
   23138:	4629      	mov	r1, r5
   2313a:	a802      	add	r0, sp, #8
   2313c:	f01e f932 	bl	413a4 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   23140:	9b09      	ldr	r3, [sp, #36]	; 0x24
   23142:	2e00      	cmp	r6, #0
   23144:	d069      	beq.n	2321a <z_arm_fault+0x1a2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   23146:	f3c3 0208 	ubfx	r2, r3, #0, #9
   2314a:	b922      	cbnz	r2, 23156 <z_arm_fault+0xde>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   2314c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   23150:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   23154:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   23156:	4620      	mov	r0, r4
   23158:	a902      	add	r1, sp, #8
   2315a:	f7ff fc85 	bl	22a68 <z_arm_fatal_error>
}
   2315e:	b01d      	add	sp, #116	; 0x74
   23160:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   23164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   23166:	005b      	lsls	r3, r3, #1
   23168:	d536      	bpl.n	231d8 <z_arm_fault+0x160>
		PR_EXC("  Fault escalation (see below)");
   2316a:	2145      	movs	r1, #69	; 0x45
   2316c:	4834      	ldr	r0, [pc, #208]	; (23240 <z_arm_fault+0x1c8>)
   2316e:	f019 fc9f 	bl	3cab0 <z_log_minimal_printk>
	uint16_t fault_insn = *(ret_addr - 1);
   23172:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   23174:	f833 2c02 	ldrh.w	r2, [r3, #-2]
   23178:	f64d 7302 	movw	r3, #57090	; 0xdf02
   2317c:	429a      	cmp	r2, r3
   2317e:	d106      	bne.n	2318e <z_arm_fault+0x116>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   23180:	2145      	movs	r1, #69	; 0x45
   23182:	682a      	ldr	r2, [r5, #0]
   23184:	482f      	ldr	r0, [pc, #188]	; (23244 <z_arm_fault+0x1cc>)
   23186:	f019 fc93 	bl	3cab0 <z_log_minimal_printk>
			reason = esf->basic.r0;
   2318a:	682c      	ldr	r4, [r5, #0]
   2318c:	e7d0      	b.n	23130 <z_arm_fault+0xb8>
		} else if (SCB_MMFSR != 0) {
   2318e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   23192:	b133      	cbz	r3, 231a2 <z_arm_fault+0x12a>
			reason = mem_manage_fault(esf, 1, recoverable);
   23194:	2001      	movs	r0, #1
   23196:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   2319a:	f7ff fefb 	bl	22f94 <mem_manage_fault.constprop.0>
		reason = bus_fault(esf, 0, recoverable);
   2319e:	4604      	mov	r4, r0
		break;
   231a0:	e7c6      	b.n	23130 <z_arm_fault+0xb8>
		} else if (SCB_BFSR != 0) {
   231a2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
   231a6:	b12b      	cbz	r3, 231b4 <z_arm_fault+0x13c>
			reason = bus_fault(esf, 1, recoverable);
   231a8:	2001      	movs	r0, #1
   231aa:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   231ae:	f7ff fe97 	bl	22ee0 <bus_fault.constprop.0>
   231b2:	e7f4      	b.n	2319e <z_arm_fault+0x126>
		} else if (SCB_UFSR != 0) {
   231b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   231b6:	b29b      	uxth	r3, r3
   231b8:	b113      	cbz	r3, 231c0 <z_arm_fault+0x148>
		reason = usage_fault(esf);
   231ba:	f7ff fe3b 	bl	22e34 <usage_fault.constprop.0>
   231be:	e7ee      	b.n	2319e <z_arm_fault+0x126>
			__ASSERT(0,
   231c0:	491a      	ldr	r1, [pc, #104]	; (2322c <z_arm_fault+0x1b4>)
   231c2:	f240 22cd 	movw	r2, #717	; 0x2cd
   231c6:	481a      	ldr	r0, [pc, #104]	; (23230 <z_arm_fault+0x1b8>)
   231c8:	f019 fc38 	bl	3ca3c <assert_print>
   231cc:	f240 21cd 	movw	r1, #717	; 0x2cd
		__ASSERT(0,
   231d0:	4816      	ldr	r0, [pc, #88]	; (2322c <z_arm_fault+0x1b4>)
   231d2:	f019 fc2c 	bl	3ca2e <assert_post_action>
   231d6:	e7ab      	b.n	23130 <z_arm_fault+0xb8>
   231d8:	4914      	ldr	r1, [pc, #80]	; (2322c <z_arm_fault+0x1b4>)
   231da:	f240 22d1 	movw	r2, #721	; 0x2d1
   231de:	4814      	ldr	r0, [pc, #80]	; (23230 <z_arm_fault+0x1b8>)
   231e0:	f019 fc2c 	bl	3ca3c <assert_print>
   231e4:	f240 21d1 	movw	r1, #721	; 0x2d1
   231e8:	e7f2      	b.n	231d0 <z_arm_fault+0x158>
		reason = mem_manage_fault(esf, 0, recoverable);
   231ea:	2000      	movs	r0, #0
   231ec:	f10d 0107 	add.w	r1, sp, #7
   231f0:	e7d3      	b.n	2319a <z_arm_fault+0x122>
		reason = bus_fault(esf, 0, recoverable);
   231f2:	2000      	movs	r0, #0
   231f4:	f10d 0107 	add.w	r1, sp, #7
   231f8:	e7d9      	b.n	231ae <z_arm_fault+0x136>
	PR_FAULT_INFO(
   231fa:	2145      	movs	r1, #69	; 0x45
   231fc:	4812      	ldr	r0, [pc, #72]	; (23248 <z_arm_fault+0x1d0>)
   231fe:	e78c      	b.n	2311a <z_arm_fault+0xa2>
	PR_FAULT_INFO("***** %s %d) *****",
   23200:	4912      	ldr	r1, [pc, #72]	; (2324c <z_arm_fault+0x1d4>)
   23202:	f419 7ff8 	tst.w	r9, #496	; 0x1f0
   23206:	4a12      	ldr	r2, [pc, #72]	; (23250 <z_arm_fault+0x1d8>)
   23208:	4812      	ldr	r0, [pc, #72]	; (23254 <z_arm_fault+0x1dc>)
   2320a:	bf08      	it	eq
   2320c:	460a      	moveq	r2, r1
   2320e:	f1a8 0310 	sub.w	r3, r8, #16
   23212:	2145      	movs	r1, #69	; 0x45
   23214:	f019 fc4c 	bl	3cab0 <z_log_minimal_printk>
   23218:	e781      	b.n	2311e <z_arm_fault+0xa6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   2321a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   2321e:	f023 0301 	bic.w	r3, r3, #1
   23222:	e797      	b.n	23154 <z_arm_fault+0xdc>
   23224:	e000ed00 	.word	0xe000ed00
   23228:	00044855 	.word	0x00044855
   2322c:	000447ed 	.word	0x000447ed
   23230:	00043ff2 	.word	0x00043ff2
   23234:	0004487d 	.word	0x0004487d
   23238:	00044899 	.word	0x00044899
   2323c:	000448bf 	.word	0x000448bf
   23240:	000448d2 	.word	0x000448d2
   23244:	000448f6 	.word	0x000448f6
   23248:	00044917 	.word	0x00044917
   2324c:	00044827 	.word	0x00044827
   23250:	0004483c 	.word	0x0004483c
   23254:	00044940 	.word	0x00044940

00023258 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   23258:	4b04      	ldr	r3, [pc, #16]	; (2326c <z_arm_fault_init+0x14>)
   2325a:	695a      	ldr	r2, [r3, #20]
   2325c:	f042 0210 	orr.w	r2, r2, #16
   23260:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   23262:	695a      	ldr	r2, [r3, #20]
   23264:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   23268:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   2326a:	4770      	bx	lr
   2326c:	e000ed00 	.word	0xe000ed00

00023270 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   23270:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   23274:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   23278:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   2327a:	4672      	mov	r2, lr
	bl z_arm_fault
   2327c:	f7ff fefc 	bl	23078 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   23280:	bd01      	pop	{r0, pc}
   23282:	bf00      	nop

00023284 <z_arm_save_fp_context>:
 * @file @brief Helper functions for saving and restoring the FP context.
 *
 */

void z_arm_save_fp_context(struct fpu_ctx_full *buffer)
{
   23284:	b510      	push	{r4, lr}
#if defined(CONFIG_FPU_SHARING)
	__ASSERT_NO_MSG(buffer != NULL);
   23286:	4604      	mov	r4, r0
   23288:	b940      	cbnz	r0, 2329c <z_arm_save_fp_context+0x18>
   2328a:	4910      	ldr	r1, [pc, #64]	; (232cc <z_arm_save_fp_context+0x48>)
   2328c:	4810      	ldr	r0, [pc, #64]	; (232d0 <z_arm_save_fp_context+0x4c>)
   2328e:	2214      	movs	r2, #20
   23290:	f019 fbd4 	bl	3ca3c <assert_print>
   23294:	2114      	movs	r1, #20
   23296:	480d      	ldr	r0, [pc, #52]	; (232cc <z_arm_save_fp_context+0x48>)
   23298:	f019 fbc9 	bl	3ca2e <assert_post_action>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   2329c:	f3ef 8314 	mrs	r3, CONTROL

	uint32_t CONTROL = __get_CONTROL();

	if (CONTROL & CONTROL_FPCA_Msk) {
   232a0:	075a      	lsls	r2, r3, #29
   232a2:	d512      	bpl.n	232ca <z_arm_save_fp_context+0x46>
		/* Store caller-saved and callee-saved FP registers. */
		__asm__ volatile(
   232a4:	f104 0240 	add.w	r2, r4, #64	; 0x40
   232a8:	ec84 0a10 	vstmia	r4, {s0-s15}
   232ac:	ec82 8a10 	vstmia	r2, {s16-s31}
  return __builtin_arm_get_fpscr();
   232b0:	eef1 2a10 	vmrs	r2, fpscr
			"vstmia %0, {s0-s15}\n"
			"vstmia %1, {s16-s31}\n"
			:: "r" (buffer->caller_saved), "r" (buffer->callee_saved) :
		);

		buffer->fpscr = __get_FPSCR();
   232b4:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		buffer->ctx_saved = true;
   232b8:	2201      	movs	r2, #1

		/* Disable FPCA so no stacking of FP registers happens in TFM. */
		__set_CONTROL(CONTROL & ~CONTROL_FPCA_Msk);
   232ba:	f023 0304 	bic.w	r3, r3, #4
		buffer->ctx_saved = true;
   232be:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   232c2:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   232c6:	f3bf 8f6f 	isb	sy
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   232ca:	bd10      	pop	{r4, pc}
   232cc:	00044958 	.word	0x00044958
   232d0:	00043ff2 	.word	0x00043ff2

000232d4 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   232d4:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   232d6:	2120      	movs	r1, #32
   232d8:	4803      	ldr	r0, [pc, #12]	; (232e8 <z_arm_interrupt_init+0x14>)
   232da:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   232dc:	3301      	adds	r3, #1
   232de:	2b41      	cmp	r3, #65	; 0x41
   232e0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   232e4:	d1f9      	bne.n	232da <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   232e6:	4770      	bx	lr
   232e8:	e000e100 	.word	0xe000e100

000232ec <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   232ec:	2000      	movs	r0, #0
    msr CONTROL, r0
   232ee:	f380 8814 	msr	CONTROL, r0
    isb
   232f2:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   232f6:	2000      	movs	r0, #0
    msr MSPLIM, r0
   232f8:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   232fc:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   23300:	f01e ff9a 	bl	42238 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   23304:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   23306:	490e      	ldr	r1, [pc, #56]	; (23340 <__start+0x54>)
    str r0, [r1]
   23308:	6008      	str	r0, [r1, #0]
    dsb
   2330a:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   2330e:	480d      	ldr	r0, [pc, #52]	; (23344 <__start+0x58>)
    msr msp, r0
   23310:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   23314:	f000 f83e 	bl	23394 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   23318:	2020      	movs	r0, #32
    msr BASEPRI, r0
   2331a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   2331e:	480a      	ldr	r0, [pc, #40]	; (23348 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   23320:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   23324:	1840      	adds	r0, r0, r1
    msr PSP, r0
   23326:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   2332a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   2332e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   23330:	4308      	orrs	r0, r1
    msr CONTROL, r0
   23332:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   23336:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   2333a:	f7ff fc65 	bl	22c08 <z_arm_prep_c>
   2333e:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   23340:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   23344:	20021a00 	.word	0x20021a00
    ldr r0, =z_interrupt_stacks
   23348:	20021b40 	.word	0x20021b40

0002334c <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   2334c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   23350:	4905      	ldr	r1, [pc, #20]	; (23368 <sys_arch_reboot+0x1c>)
   23352:	4b06      	ldr	r3, [pc, #24]	; (2336c <sys_arch_reboot+0x20>)
   23354:	68ca      	ldr	r2, [r1, #12]
   23356:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   2335a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   2335c:	60cb      	str	r3, [r1, #12]
   2335e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   23362:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   23364:	e7fd      	b.n	23362 <sys_arch_reboot+0x16>
   23366:	bf00      	nop
   23368:	e000ed00 	.word	0xe000ed00
   2336c:	05fa0004 	.word	0x05fa0004

00023370 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   23370:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   23372:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   23374:	4906      	ldr	r1, [pc, #24]	; (23390 <z_arm_clear_arm_mpu_config+0x20>)
   23376:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
   2337a:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
   2337e:	4293      	cmp	r3, r2
   23380:	d100      	bne.n	23384 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   23382:	4770      	bx	lr
  mpu->RNR = rnr;
   23384:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
   23388:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   2338c:	3301      	adds	r3, #1
   2338e:	e7f6      	b.n	2337e <z_arm_clear_arm_mpu_config+0xe>
   23390:	e000ed00 	.word	0xe000ed00

00023394 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   23394:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   23396:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   23398:	2400      	movs	r4, #0
   2339a:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   2339e:	f7ff ffe7 	bl	23370 <z_arm_clear_arm_mpu_config>
   233a2:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   233a4:	f04f 30ff 	mov.w	r0, #4294967295
   233a8:	4a0b      	ldr	r2, [pc, #44]	; (233d8 <z_arm_init_arch_hw_at_boot+0x44>)
   233aa:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   233ae:	3301      	adds	r3, #1
   233b0:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   233b2:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   233b6:	d1f8      	bne.n	233aa <z_arm_init_arch_hw_at_boot+0x16>
   233b8:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   233ba:	f04f 30ff 	mov.w	r0, #4294967295
   233be:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   233c2:	3301      	adds	r3, #1
   233c4:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   233c6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   233ca:	d1f8      	bne.n	233be <z_arm_init_arch_hw_at_boot+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
   233cc:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   233ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   233d2:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   233d6:	bd10      	pop	{r4, pc}
   233d8:	e000e100 	.word	0xe000e100

000233dc <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   233dc:	4b08      	ldr	r3, [pc, #32]	; (23400 <z_impl_k_thread_abort+0x24>)
   233de:	689b      	ldr	r3, [r3, #8]
   233e0:	4283      	cmp	r3, r0
   233e2:	d10b      	bne.n	233fc <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   233e4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   233e8:	b143      	cbz	r3, 233fc <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   233ea:	4b06      	ldr	r3, [pc, #24]	; (23404 <z_impl_k_thread_abort+0x28>)
   233ec:	685a      	ldr	r2, [r3, #4]
   233ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   233f2:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   233f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   233f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   233fa:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   233fc:	f015 b92e 	b.w	3865c <z_thread_abort>
   23400:	2001a500 	.word	0x2001a500
   23404:	e000ed00 	.word	0xe000ed00

00023408 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   23408:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   2340a:	4c09      	ldr	r4, [pc, #36]	; (23430 <z_arm_configure_static_mpu_regions+0x28>)
   2340c:	4a09      	ldr	r2, [pc, #36]	; (23434 <z_arm_configure_static_mpu_regions+0x2c>)
   2340e:	4623      	mov	r3, r4
   23410:	2101      	movs	r1, #1
   23412:	4809      	ldr	r0, [pc, #36]	; (23438 <z_arm_configure_static_mpu_regions+0x30>)
   23414:	f000 f92c 	bl	23670 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   23418:	2300      	movs	r3, #0
   2341a:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   2341c:	4b07      	ldr	r3, [pc, #28]	; (2343c <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   2341e:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   23420:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   23422:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   23424:	9301      	str	r3, [sp, #4]
   23426:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   23428:	f000 f93e 	bl	236a8 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   2342c:	b004      	add	sp, #16
   2342e:	bd10      	pop	{r4, pc}
   23430:	20040000 	.word	0x20040000
   23434:	20014500 	.word	0x20014500
   23438:	00042a44 	.word	0x00042a44
   2343c:	20015150 	.word	0x20015150

00023440 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   23440:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   23442:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   23444:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   23446:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   2344a:	f004 031f 	and.w	r3, r4, #31
   2344e:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   23450:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   23452:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   23454:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   23458:	4905      	ldr	r1, [pc, #20]	; (23470 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   2345a:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   2345e:	f043 0301 	orr.w	r3, r3, #1
   23462:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
  mpu->RBAR = rbar;
   23466:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  mpu->RLAR = rlar;
   2346a:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   2346e:	bd10      	pop	{r4, pc}
   23470:	e000ed00 	.word	0xe000ed00

00023474 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
   23474:	b530      	push	{r4, r5, lr}
	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	region_conf.size = size_to_mpu_rasr_size(new_region->size);
#endif
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   23476:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
   23478:	680c      	ldr	r4, [r1, #0]
{
   2347a:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
   2347c:	890a      	ldrh	r2, [r1, #8]
   2347e:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   23480:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   23482:	3b01      	subs	r3, #1
   23484:	f024 041f 	bic.w	r4, r4, #31
   23488:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   2348a:	f002 021f 	and.w	r2, r2, #31
   2348e:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   23492:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   23496:	280f      	cmp	r0, #15
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   23498:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
   2349a:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   2349e:	9303      	str	r3, [sp, #12]
	if (index > (get_num_regions() - 1U)) {
   234a0:	d909      	bls.n	234b6 <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   234a2:	4602      	mov	r2, r0
   234a4:	2145      	movs	r1, #69	; 0x45
   234a6:	4806      	ldr	r0, [pc, #24]	; (234c0 <mpu_configure_region+0x4c>)
   234a8:	f019 fb02 	bl	3cab0 <z_log_minimal_printk>
   234ac:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
   234b0:	4620      	mov	r0, r4
   234b2:	b005      	add	sp, #20
   234b4:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
   234b6:	4669      	mov	r1, sp
   234b8:	f7ff ffc2 	bl	23440 <region_init>
	return region_allocate_and_init(index,
   234bc:	e7f8      	b.n	234b0 <mpu_configure_region+0x3c>
   234be:	bf00      	nop
   234c0:	00044994 	.word	0x00044994

000234c4 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   234c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   234c8:	4689      	mov	r9, r1
   234ca:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   234cc:	4606      	mov	r6, r0
   234ce:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
   234d2:	4d58      	ldr	r5, [pc, #352]	; (23634 <mpu_configure_regions_and_partition.constprop.0+0x170>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   234d4:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   234d6:	45c8      	cmp	r8, r9
   234d8:	da27      	bge.n	2352a <mpu_configure_regions_and_partition.constprop.0+0x66>
		if (regions[i].size == 0U) {
   234da:	f8d6 a004 	ldr.w	sl, [r6, #4]
   234de:	f1ba 0f00 	cmp.w	sl, #0
   234e2:	d044      	beq.n	2356e <mpu_configure_regions_and_partition.constprop.0+0xaa>
		&&
   234e4:	f1ba 0f1f 	cmp.w	sl, #31
   234e8:	d918      	bls.n	2351c <mpu_configure_regions_and_partition.constprop.0+0x58>
		&&
   234ea:	f01a 0f1f 	tst.w	sl, #31
   234ee:	d115      	bne.n	2351c <mpu_configure_regions_and_partition.constprop.0+0x58>
		((part->start &
   234f0:	f8d6 b000 	ldr.w	fp, [r6]
		&&
   234f4:	f01b 0f1f 	tst.w	fp, #31
   234f8:	d110      	bne.n	2351c <mpu_configure_regions_and_partition.constprop.0+0x58>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   234fa:	4658      	mov	r0, fp
   234fc:	f01a f8ed 	bl	3d6da <arm_cmse_mpu_region_get>
   23500:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   23502:	eb0a 000b 	add.w	r0, sl, fp
   23506:	3801      	subs	r0, #1
   23508:	f01a f8e7 	bl	3d6da <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   2350c:	4287      	cmp	r7, r0
   2350e:	d010      	beq.n	23532 <mpu_configure_regions_and_partition.constprop.0+0x6e>
	return -EINVAL;
   23510:	f06f 0715 	mvn.w	r7, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   23514:	463a      	mov	r2, r7
   23516:	2145      	movs	r1, #69	; 0x45
   23518:	4847      	ldr	r0, [pc, #284]	; (23638 <mpu_configure_regions_and_partition.constprop.0+0x174>)
   2351a:	e002      	b.n	23522 <mpu_configure_regions_and_partition.constprop.0+0x5e>
			LOG_ERR("Partition %u: sanity check failed.", i);
   2351c:	4642      	mov	r2, r8
   2351e:	2145      	movs	r1, #69	; 0x45
   23520:	4846      	ldr	r0, [pc, #280]	; (2363c <mpu_configure_regions_and_partition.constprop.0+0x178>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   23522:	f019 fac5 	bl	3cab0 <z_log_minimal_printk>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   23526:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   2352a:	4620      	mov	r0, r4
   2352c:	b005      	add	sp, #20
   2352e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   23532:	f117 0f16 	cmn.w	r7, #22
   23536:	d0ed      	beq.n	23514 <mpu_configure_regions_and_partition.constprop.0+0x50>
   23538:	42bc      	cmp	r4, r7
   2353a:	ddeb      	ble.n	23514 <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
   2353c:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   23540:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = index;
   23544:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   23548:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   2354c:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   23550:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   23554:	e9d6 3200 	ldrd	r3, r2, [r6]
   23558:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
   2355a:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   2355c:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
   23560:	d11d      	bne.n	2359e <mpu_configure_regions_and_partition.constprop.0+0xda>
   23562:	45d3      	cmp	fp, sl
   23564:	d107      	bne.n	23576 <mpu_configure_regions_and_partition.constprop.0+0xb2>
			mpu_configure_region(u_reg_index, &regions[i]);
   23566:	4631      	mov	r1, r6
   23568:	b2f8      	uxtb	r0, r7
   2356a:	f7ff ff83 	bl	23474 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   2356e:	f108 0801 	add.w	r8, r8, #1
   23572:	360c      	adds	r6, #12
   23574:	e7af      	b.n	234d6 <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
   23576:	4631      	mov	r1, r6
	MPU->RNR = index;
   23578:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   2357c:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		| (base & MPU_RBAR_BASE_Msk);
   23580:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   23584:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   23588:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   2358a:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
   2358e:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   23590:	f7ff ff70 	bl	23474 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   23594:	f110 0f16 	cmn.w	r0, #22
   23598:	d0c5      	beq.n	23526 <mpu_configure_regions_and_partition.constprop.0+0x62>
			reg_index++;
   2359a:	1c44      	adds	r4, r0, #1
   2359c:	e7e7      	b.n	2356e <mpu_configure_regions_and_partition.constprop.0+0xaa>
				regions[i].start - 1);
   2359e:	3b01      	subs	r3, #1
		} else if (reg_last == u_reg_last) {
   235a0:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
   235a2:	b2e0      	uxtb	r0, r4
		| (limit & MPU_RLAR_LIMIT_Msk);
   235a4:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
   235a8:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
   235ac:	d108      	bne.n	235c0 <mpu_configure_regions_and_partition.constprop.0+0xfc>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   235ae:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   235b2:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   235b4:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   235b8:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   235ba:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
   235be:	e7e7      	b.n	23590 <mpu_configure_regions_and_partition.constprop.0+0xcc>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   235c0:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
   235c4:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   235c8:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   235ca:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   235ce:	4631      	mov	r1, r6
   235d0:	f7ff ff50 	bl	23474 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   235d4:	f110 0f16 	cmn.w	r0, #22
   235d8:	d0a5      	beq.n	23526 <mpu_configure_regions_and_partition.constprop.0+0x62>
	MPU->RNR = index;
   235da:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	attr->rbar = MPU->RBAR &
   235de:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
   235e2:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   235e6:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
   235ea:	f362 0304 	bfi	r3, r2, #0, #5
   235ee:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   235f2:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
   235f6:	f89d 2008 	ldrb.w	r2, [sp, #8]
   235fa:	085b      	lsrs	r3, r3, #1
   235fc:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i].start +
   23600:	e9d6 3100 	ldrd	r3, r1, [r6]
   23604:	440b      	add	r3, r1
   23606:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
   23608:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   2360c:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   2360e:	445b      	add	r3, fp
   23610:	eba3 030a 	sub.w	r3, r3, sl
   23614:	b2c0      	uxtb	r0, r0
   23616:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   2361a:	280f      	cmp	r0, #15
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   2361c:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.attr.r_limit =
   23620:	9303      	str	r3, [sp, #12]
   23622:	d903      	bls.n	2362c <mpu_configure_regions_and_partition.constprop.0+0x168>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   23624:	4602      	mov	r2, r0
   23626:	2145      	movs	r1, #69	; 0x45
   23628:	4805      	ldr	r0, [pc, #20]	; (23640 <mpu_configure_regions_and_partition.constprop.0+0x17c>)
   2362a:	e77a      	b.n	23522 <mpu_configure_regions_and_partition.constprop.0+0x5e>
	region_init(index, region_conf);
   2362c:	4669      	mov	r1, sp
   2362e:	f7ff ff07 	bl	23440 <region_init>
   23632:	e7b2      	b.n	2359a <mpu_configure_regions_and_partition.constprop.0+0xd6>
   23634:	e000ed00 	.word	0xe000ed00
   23638:	000449e7 	.word	0x000449e7
   2363c:	000449bf 	.word	0x000449bf
   23640:	00044994 	.word	0x00044994

00023644 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   23644:	2205      	movs	r2, #5
   23646:	4b04      	ldr	r3, [pc, #16]	; (23658 <arm_core_mpu_enable+0x14>)
   23648:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   2364c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   23650:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   23654:	4770      	bx	lr
   23656:	bf00      	nop
   23658:	e000ed00 	.word	0xe000ed00

0002365c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   2365c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   23660:	2200      	movs	r2, #0
   23662:	4b02      	ldr	r3, [pc, #8]	; (2366c <arm_core_mpu_disable+0x10>)
   23664:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   23668:	4770      	bx	lr
   2366a:	bf00      	nop
   2366c:	e000ed00 	.word	0xe000ed00

00023670 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   23670:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   23672:	4c0a      	ldr	r4, [pc, #40]	; (2369c <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   23674:	7822      	ldrb	r2, [r4, #0]
   23676:	f7ff ff25 	bl	234c4 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   2367a:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   2367c:	3016      	adds	r0, #22
   2367e:	d10c      	bne.n	2369a <arm_core_mpu_configure_static_mpu_regions+0x2a>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   23680:	4907      	ldr	r1, [pc, #28]	; (236a0 <arm_core_mpu_configure_static_mpu_regions+0x30>)
   23682:	4808      	ldr	r0, [pc, #32]	; (236a4 <arm_core_mpu_configure_static_mpu_regions+0x34>)
   23684:	f240 1211 	movw	r2, #273	; 0x111
   23688:	f019 f9d8 	bl	3ca3c <assert_print>
			regions_num);
	}
}
   2368c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   23690:	f240 1111 	movw	r1, #273	; 0x111
   23694:	4802      	ldr	r0, [pc, #8]	; (236a0 <arm_core_mpu_configure_static_mpu_regions+0x30>)
   23696:	f019 b9ca 	b.w	3ca2e <assert_post_action>
}
   2369a:	bd10      	pop	{r4, pc}
   2369c:	2001a5a3 	.word	0x2001a5a3
   236a0:	00044a0f 	.word	0x00044a0f
   236a4:	00043ff2 	.word	0x00043ff2

000236a8 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   236a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   236ac:	4d30      	ldr	r5, [pc, #192]	; (23770 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
   236ae:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   236b0:	4606      	mov	r6, r0
   236b2:	f04f 0800 	mov.w	r8, #0
   236b6:	46ab      	mov	fp, r5
	MPU->RNR = index;
   236b8:	4f2e      	ldr	r7, [pc, #184]	; (23774 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   236ba:	45d0      	cmp	r8, sl
   236bc:	db02      	blt.n	236c4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   236be:	b003      	add	sp, #12
   236c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   236c4:	f8d6 9004 	ldr.w	r9, [r6, #4]
   236c8:	f1b9 0f00 	cmp.w	r9, #0
   236cc:	d04a      	beq.n	23764 <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   236ce:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   236d0:	4608      	mov	r0, r1
   236d2:	9101      	str	r1, [sp, #4]
   236d4:	f01a f801 	bl	3d6da <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   236d8:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   236da:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   236dc:	eb09 0001 	add.w	r0, r9, r1
   236e0:	3801      	subs	r0, #1
   236e2:	f019 fffa 	bl	3d6da <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   236e6:	4284      	cmp	r4, r0
   236e8:	f04f 0214 	mov.w	r2, #20
   236ec:	4b22      	ldr	r3, [pc, #136]	; (23778 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
   236ee:	d013      	beq.n	23718 <arm_core_mpu_mark_areas_for_dynamic_regions+0x70>
		dyn_reg_info[i].index =
   236f0:	f06f 0315 	mvn.w	r3, #21
   236f4:	fb02 f808 	mul.w	r8, r2, r8
   236f8:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   236fc:	f240 1221 	movw	r2, #289	; 0x121
   23700:	491e      	ldr	r1, [pc, #120]	; (2377c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   23702:	481f      	ldr	r0, [pc, #124]	; (23780 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   23704:	f019 f99a 	bl	3ca3c <assert_print>
   23708:	f240 1121 	movw	r1, #289	; 0x121
   2370c:	481b      	ldr	r0, [pc, #108]	; (2377c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
}
   2370e:	b003      	add	sp, #12
   23710:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   23714:	f019 b98b 	b.w	3ca2e <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   23718:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   2371c:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   2371e:	d0ed      	beq.n	236fc <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   23720:	7819      	ldrb	r1, [r3, #0]
   23722:	42a1      	cmp	r1, r4
   23724:	ddea      	ble.n	236fc <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
   23726:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   2372a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	MPU->RNR = index;
   2372e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	attr->rbar = MPU->RBAR &
   23732:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
   23736:	f100 0108 	add.w	r1, r0, #8
   2373a:	7b00      	ldrb	r0, [r0, #12]
   2373c:	f364 0004 	bfi	r0, r4, #0, #5
   23740:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   23742:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
   23746:	790c      	ldrb	r4, [r1, #4]
   23748:	0840      	lsrs	r0, r0, #1
   2374a:	f360 1447 	bfi	r4, r0, #5, #3
   2374e:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   23750:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
   23754:	f021 011f 	bic.w	r1, r1, #31
   23758:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   2375a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
   2375e:	f021 011f 	bic.w	r1, r1, #31
   23762:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   23764:	f108 0801 	add.w	r8, r8, #1
   23768:	3514      	adds	r5, #20
   2376a:	360c      	adds	r6, #12
   2376c:	e7a5      	b.n	236ba <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   2376e:	bf00      	nop
   23770:	200191cc 	.word	0x200191cc
   23774:	e000ed00 	.word	0xe000ed00
   23778:	2001a5a3 	.word	0x2001a5a3
   2377c:	00044a0f 	.word	0x00044a0f
   23780:	00043ff2 	.word	0x00043ff2

00023784 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   23784:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   23786:	4d1d      	ldr	r5, [pc, #116]	; (237fc <z_arm_mpu_init+0x78>)
   23788:	682c      	ldr	r4, [r5, #0]
   2378a:	2c10      	cmp	r4, #16
   2378c:	d90d      	bls.n	237aa <z_arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   2378e:	f44f 72a4 	mov.w	r2, #328	; 0x148
   23792:	491b      	ldr	r1, [pc, #108]	; (23800 <z_arm_mpu_init+0x7c>)
   23794:	481b      	ldr	r0, [pc, #108]	; (23804 <z_arm_mpu_init+0x80>)
   23796:	f019 f951 	bl	3ca3c <assert_print>
   2379a:	4819      	ldr	r0, [pc, #100]	; (23800 <z_arm_mpu_init+0x7c>)
   2379c:	f44f 71a4 	mov.w	r1, #328	; 0x148
   237a0:	f019 f945 	bl	3ca2e <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   237a4:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   237a8:	bd38      	pop	{r3, r4, r5, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   237aa:	2000      	movs	r0, #0
	arm_core_mpu_disable();
   237ac:	f7ff ff56 	bl	2365c <arm_core_mpu_disable>
	MPU->MAIR0 =
   237b0:	4b15      	ldr	r3, [pc, #84]	; (23808 <z_arm_mpu_init+0x84>)
   237b2:	4a16      	ldr	r2, [pc, #88]	; (2380c <z_arm_mpu_init+0x88>)
   237b4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   237b8:	4284      	cmp	r4, r0
   237ba:	d117      	bne.n	237ec <z_arm_mpu_init+0x68>
	static_regions_num = mpu_config.num_regions;
   237bc:	4b14      	ldr	r3, [pc, #80]	; (23810 <z_arm_mpu_init+0x8c>)
   237be:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   237c0:	f7ff ff40 	bl	23644 <arm_core_mpu_enable>
	__ASSERT(
   237c4:	4b10      	ldr	r3, [pc, #64]	; (23808 <z_arm_mpu_init+0x84>)
   237c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   237ca:	f3c3 2307 	ubfx	r3, r3, #8, #8
   237ce:	2b10      	cmp	r3, #16
   237d0:	d00a      	beq.n	237e8 <z_arm_mpu_init+0x64>
   237d2:	490b      	ldr	r1, [pc, #44]	; (23800 <z_arm_mpu_init+0x7c>)
   237d4:	480b      	ldr	r0, [pc, #44]	; (23804 <z_arm_mpu_init+0x80>)
   237d6:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
   237da:	f019 f92f 	bl	3ca3c <assert_print>
   237de:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
   237e2:	4807      	ldr	r0, [pc, #28]	; (23800 <z_arm_mpu_init+0x7c>)
   237e4:	f019 f923 	bl	3ca2e <assert_post_action>
	return 0;
   237e8:	2000      	movs	r0, #0
   237ea:	e7dd      	b.n	237a8 <z_arm_mpu_init+0x24>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   237ec:	6869      	ldr	r1, [r5, #4]
   237ee:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   237f2:	f7ff fe25 	bl	23440 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   237f6:	3001      	adds	r0, #1
   237f8:	e7de      	b.n	237b8 <z_arm_mpu_init+0x34>
   237fa:	bf00      	nop
   237fc:	00042a50 	.word	0x00042a50
   23800:	00044a0f 	.word	0x00044a0f
   23804:	00043ff2 	.word	0x00043ff2
   23808:	e000ed00 	.word	0xe000ed00
   2380c:	0044ffaa 	.word	0x0044ffaa
   23810:	2001a5a3 	.word	0x2001a5a3

00023814 <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
   23814:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
   23816:	4b09      	ldr	r3, [pc, #36]	; (2383c <malloc_prepare+0x28>)
   23818:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   2381c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   23820:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   23824:	d208      	bcs.n	23838 <malloc_prepare+0x24>
   23826:	4906      	ldr	r1, [pc, #24]	; (23840 <malloc_prepare+0x2c>)
   23828:	4806      	ldr	r0, [pc, #24]	; (23844 <malloc_prepare+0x30>)
   2382a:	2281      	movs	r2, #129	; 0x81
   2382c:	f019 f906 	bl	3ca3c <assert_print>
   23830:	2181      	movs	r1, #129	; 0x81
   23832:	4803      	ldr	r0, [pc, #12]	; (23840 <malloc_prepare+0x2c>)
   23834:	f019 f8fb 	bl	3ca2e <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
   23838:	2000      	movs	r0, #0
   2383a:	bd08      	pop	{r3, pc}
   2383c:	20028c40 	.word	0x20028c40
   23840:	00044a46 	.word	0x00044a46
   23844:	00043ff2 	.word	0x00043ff2

00023848 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   23848:	4b01      	ldr	r3, [pc, #4]	; (23850 <__stdout_hook_install+0x8>)
   2384a:	6018      	str	r0, [r3, #0]
}
   2384c:	4770      	bx	lr
   2384e:	bf00      	nop
   23850:	20014620 	.word	0x20014620

00023854 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   23854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23856:	4606      	mov	r6, r0
   23858:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   2385a:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   2385c:	4f06      	ldr	r7, [pc, #24]	; (23878 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   2385e:	42ac      	cmp	r4, r5
   23860:	da08      	bge.n	23874 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   23862:	683b      	ldr	r3, [r7, #0]
   23864:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   23866:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   23868:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
   2386a:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   2386e:	d001      	beq.n	23874 <z_impl_zephyr_read_stdin+0x20>
   23870:	280d      	cmp	r0, #13
   23872:	d1f4      	bne.n	2385e <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   23874:	4620      	mov	r0, r4
   23876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23878:	2001461c 	.word	0x2001461c

0002387c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   2387c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2387e:	460d      	mov	r5, r1
   23880:	4f09      	ldr	r7, [pc, #36]	; (238a8 <z_impl_zephyr_write_stdout+0x2c>)
   23882:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   23884:	f1c0 0401 	rsb	r4, r0, #1
   23888:	19a3      	adds	r3, r4, r6
   2388a:	429d      	cmp	r5, r3
   2388c:	dc01      	bgt.n	23892 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   2388e:	4628      	mov	r0, r5
   23890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   23892:	7873      	ldrb	r3, [r6, #1]
   23894:	2b0a      	cmp	r3, #10
   23896:	d102      	bne.n	2389e <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   23898:	200d      	movs	r0, #13
   2389a:	683b      	ldr	r3, [r7, #0]
   2389c:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   2389e:	683b      	ldr	r3, [r7, #0]
   238a0:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   238a4:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   238a6:	e7ef      	b.n	23888 <z_impl_zephyr_write_stdout+0xc>
   238a8:	20014620 	.word	0x20014620

000238ac <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   238ac:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   238ae:	2105      	movs	r1, #5
   238b0:	4801      	ldr	r0, [pc, #4]	; (238b8 <_exit+0xc>)
   238b2:	f7ff ffe3 	bl	2387c <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   238b6:	e7fe      	b.n	238b6 <_exit+0xa>
   238b8:	00044a76 	.word	0x00044a76

000238bc <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   238bc:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   238be:	4c07      	ldr	r4, [pc, #28]	; (238dc <_sbrk+0x20>)
   238c0:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   238c2:	18c2      	adds	r2, r0, r3
   238c4:	4806      	ldr	r0, [pc, #24]	; (238e0 <_sbrk+0x24>)
   238c6:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   238ca:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   238ce:	428a      	cmp	r2, r1

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   238d0:	bf2e      	itee	cs
   238d2:	f04f 30ff 	movcs.w	r0, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   238d6:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
   238d8:	6022      	strcc	r2, [r4, #0]
	}

	return ret;
}
   238da:	bd10      	pop	{r4, pc}
   238dc:	200191e0 	.word	0x200191e0
   238e0:	20028c40 	.word	0x20028c40

000238e4 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
   238e4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   238e6:	4604      	mov	r4, r0
   238e8:	b950      	cbnz	r0, 23900 <__retarget_lock_init_recursive+0x1c>
   238ea:	4910      	ldr	r1, [pc, #64]	; (2392c <__retarget_lock_init_recursive+0x48>)
   238ec:	4810      	ldr	r0, [pc, #64]	; (23930 <__retarget_lock_init_recursive+0x4c>)
   238ee:	f240 1277 	movw	r2, #375	; 0x177
   238f2:	f019 f8a3 	bl	3ca3c <assert_print>
   238f6:	f240 1177 	movw	r1, #375	; 0x177
   238fa:	480c      	ldr	r0, [pc, #48]	; (2392c <__retarget_lock_init_recursive+0x48>)
   238fc:	f019 f897 	bl	3ca2e <assert_post_action>

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
   23900:	2014      	movs	r0, #20
   23902:	f016 f94b 	bl	39b9c <malloc>
   23906:	6020      	str	r0, [r4, #0]
#else
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
   23908:	b950      	cbnz	r0, 23920 <__retarget_lock_init_recursive+0x3c>
   2390a:	4908      	ldr	r1, [pc, #32]	; (2392c <__retarget_lock_init_recursive+0x48>)
   2390c:	4808      	ldr	r0, [pc, #32]	; (23930 <__retarget_lock_init_recursive+0x4c>)
   2390e:	f240 127f 	movw	r2, #383	; 0x17f
   23912:	f019 f893 	bl	3ca3c <assert_print>
   23916:	f240 117f 	movw	r1, #383	; 0x17f
   2391a:	4804      	ldr	r0, [pc, #16]	; (2392c <__retarget_lock_init_recursive+0x48>)
   2391c:	f019 f887 	bl	3ca2e <assert_post_action>

	k_mutex_init((struct k_mutex *)*lock);
   23920:	6820      	ldr	r0, [r4, #0]
}
   23922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
   23926:	f01d bb13 	b.w	40f50 <z_impl_k_mutex_init>
   2392a:	bf00      	nop
   2392c:	00044a46 	.word	0x00044a46
   23930:	00043ff2 	.word	0x00043ff2

00023934 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
   23934:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   23936:	4604      	mov	r4, r0
   23938:	b950      	cbnz	r0, 23950 <__retarget_lock_acquire_recursive+0x1c>
   2393a:	490a      	ldr	r1, [pc, #40]	; (23964 <__retarget_lock_acquire_recursive+0x30>)
   2393c:	480a      	ldr	r0, [pc, #40]	; (23968 <__retarget_lock_acquire_recursive+0x34>)
   2393e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
   23942:	f019 f87b 	bl	3ca3c <assert_print>
   23946:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   2394a:	4806      	ldr	r0, [pc, #24]	; (23964 <__retarget_lock_acquire_recursive+0x30>)
   2394c:	f019 f86f 	bl	3ca2e <assert_post_action>
	return z_impl_k_mutex_lock(mutex, timeout);
   23950:	f04f 32ff 	mov.w	r2, #4294967295
   23954:	4620      	mov	r0, r4
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
   23956:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2395a:	f04f 33ff 	mov.w	r3, #4294967295
   2395e:	f012 bfa9 	b.w	368b4 <z_impl_k_mutex_lock>
   23962:	bf00      	nop
   23964:	00044a46 	.word	0x00044a46
   23968:	00043ff2 	.word	0x00043ff2

0002396c <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
   2396c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   2396e:	4604      	mov	r4, r0
   23970:	b950      	cbnz	r0, 23988 <__retarget_lock_release_recursive+0x1c>
   23972:	4908      	ldr	r1, [pc, #32]	; (23994 <__retarget_lock_release_recursive+0x28>)
   23974:	4808      	ldr	r0, [pc, #32]	; (23998 <__retarget_lock_release_recursive+0x2c>)
   23976:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   2397a:	f019 f85f 	bl	3ca3c <assert_print>
   2397e:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   23982:	4804      	ldr	r0, [pc, #16]	; (23994 <__retarget_lock_release_recursive+0x28>)
   23984:	f019 f853 	bl	3ca2e <assert_post_action>
	return z_impl_k_mutex_unlock(mutex);
   23988:	4620      	mov	r0, r4
	k_mutex_unlock((struct k_mutex *)lock);
}
   2398a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2398e:	f013 b863 	b.w	36a58 <z_impl_k_mutex_unlock>
   23992:	bf00      	nop
   23994:	00044a46 	.word	0x00044a46
   23998:	00043ff2 	.word	0x00043ff2

0002399c <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   2399c:	b508      	push	{r3, lr}
   2399e:	211d      	movs	r1, #29
   239a0:	4804      	ldr	r0, [pc, #16]	; (239b4 <__chk_fail+0x18>)
   239a2:	f7ff ff6b 	bl	2387c <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   239a6:	4040      	eors	r0, r0
   239a8:	f380 8811 	msr	BASEPRI, r0
   239ac:	f04f 0003 	mov.w	r0, #3
   239b0:	df02      	svc	2
	CODE_UNREACHABLE;
   239b2:	bf00      	nop
   239b4:	00044a7c 	.word	0x00044a7c

000239b8 <z_impl_clock_gettime>:
	switch (clock_id) {
   239b8:	2801      	cmp	r0, #1
{
   239ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   239be:	460f      	mov	r7, r1
	switch (clock_id) {
   239c0:	d009      	beq.n	239d6 <z_impl_clock_gettime+0x1e>
   239c2:	2804      	cmp	r0, #4
   239c4:	d06b      	beq.n	23a9e <z_impl_clock_gettime+0xe6>
		errno = EINVAL;
   239c6:	f019 feb2 	bl	3d72e <__errno>
   239ca:	2316      	movs	r3, #22
   239cc:	6003      	str	r3, [r0, #0]
		return -1;
   239ce:	f04f 30ff 	mov.w	r0, #4294967295
}
   239d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   239d6:	f04f 0320 	mov.w	r3, #32
   239da:	f3ef 8411 	mrs	r4, BASEPRI
   239de:	f383 8812 	msr	BASEPRI_MAX, r3
   239e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   239e6:	4830      	ldr	r0, [pc, #192]	; (23aa8 <z_impl_clock_gettime+0xf0>)
   239e8:	f012 fdea 	bl	365c0 <z_spin_lock_valid>
   239ec:	b940      	cbnz	r0, 23a00 <z_impl_clock_gettime+0x48>
   239ee:	492f      	ldr	r1, [pc, #188]	; (23aac <z_impl_clock_gettime+0xf4>)
   239f0:	482f      	ldr	r0, [pc, #188]	; (23ab0 <z_impl_clock_gettime+0xf8>)
   239f2:	228e      	movs	r2, #142	; 0x8e
   239f4:	f019 f822 	bl	3ca3c <assert_print>
   239f8:	218e      	movs	r1, #142	; 0x8e
   239fa:	482c      	ldr	r0, [pc, #176]	; (23aac <z_impl_clock_gettime+0xf4>)
   239fc:	f019 f817 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   23a00:	4829      	ldr	r0, [pc, #164]	; (23aa8 <z_impl_clock_gettime+0xf0>)
   23a02:	f012 fdfb 	bl	365fc <z_spin_lock_set_owner>
		base = rt_clock_base;
   23a06:	4b2b      	ldr	r3, [pc, #172]	; (23ab4 <z_impl_clock_gettime+0xfc>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23a08:	4827      	ldr	r0, [pc, #156]	; (23aa8 <z_impl_clock_gettime+0xf0>)
   23a0a:	689d      	ldr	r5, [r3, #8]
   23a0c:	e9d3 6800 	ldrd	r6, r8, [r3]
   23a10:	f012 fde4 	bl	365dc <z_spin_unlock_valid>
   23a14:	b940      	cbnz	r0, 23a28 <z_impl_clock_gettime+0x70>
   23a16:	4925      	ldr	r1, [pc, #148]	; (23aac <z_impl_clock_gettime+0xf4>)
   23a18:	4825      	ldr	r0, [pc, #148]	; (23ab0 <z_impl_clock_gettime+0xf8>)
   23a1a:	22b9      	movs	r2, #185	; 0xb9
   23a1c:	f019 f80e 	bl	3ca3c <assert_print>
   23a20:	21b9      	movs	r1, #185	; 0xb9
   23a22:	4822      	ldr	r0, [pc, #136]	; (23aac <z_impl_clock_gettime+0xf4>)
   23a24:	f019 f803 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   23a28:	f384 8811 	msr	BASEPRI, r4
   23a2c:	f3bf 8f6f 	isb	sy
	return z_impl_k_uptime_ticks();
   23a30:	f01d fb48 	bl	410c4 <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
   23a34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	uint64_t ticks = k_uptime_ticks();
   23a38:	4604      	mov	r4, r0
   23a3a:	fba0 0302 	umull	r0, r3, r0, r2
   23a3e:	fb02 3101 	mla	r1, r2, r1, r3
   23a42:	0bc0      	lsrs	r0, r0, #15
	uint64_t elapsed_secs = k_ticks_to_ms_floor64(ticks) / MSEC_PER_SEC;
   23a44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   23a48:	2300      	movs	r3, #0
   23a4a:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   23a4e:	0bc9      	lsrs	r1, r1, #15
   23a50:	f7f9 fa4a 	bl	1cee8 <__aeabi_uldivmod>
   23a54:	f04f 7cfa 	mov.w	ip, #32768000	; 0x1f40000
	ts->tv_sec += base.tv_sec;
   23a58:	1986      	adds	r6, r0, r6
   23a5a:	fba0 0e0c 	umull	r0, lr, r0, ip
   23a5e:	eb48 0801 	adc.w	r8, r8, r1
   23a62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   23a66:	2300      	movs	r3, #0
   23a68:	fb0c e101 	mla	r1, ip, r1, lr
   23a6c:	e9c7 6800 	strd	r6, r8, [r7]
   23a70:	f7f9 fa3a 	bl	1cee8 <__aeabi_uldivmod>
			return (uint32_t)((t * to_hz + off) / from_hz);
   23a74:	4910      	ldr	r1, [pc, #64]	; (23ab8 <z_impl_clock_gettime+0x100>)
	uint64_t nremainder = ticks - k_ms_to_ticks_floor64(MSEC_PER_SEC * elapsed_secs);
   23a76:	1a20      	subs	r0, r4, r0
   23a78:	fba0 3001 	umull	r3, r0, r0, r1
   23a7c:	0bdb      	lsrs	r3, r3, #15
	if (ts->tv_nsec >= NSEC_PER_SEC) {
   23a7e:	4a0f      	ldr	r2, [pc, #60]	; (23abc <z_impl_clock_gettime+0x104>)
   23a80:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
	ts->tv_nsec += base.tv_nsec;
   23a84:	442b      	add	r3, r5
	if (ts->tv_nsec >= NSEC_PER_SEC) {
   23a86:	4293      	cmp	r3, r2
	ts->tv_nsec += base.tv_nsec;
   23a88:	60bb      	str	r3, [r7, #8]
	if (ts->tv_nsec >= NSEC_PER_SEC) {
   23a8a:	d906      	bls.n	23a9a <z_impl_clock_gettime+0xe2>
		ts->tv_sec++;
   23a8c:	3601      	adds	r6, #1
   23a8e:	f148 0200 	adc.w	r2, r8, #0
   23a92:	e9c7 6200 	strd	r6, r2, [r7]
		ts->tv_nsec -= NSEC_PER_SEC;
   23a96:	1a5b      	subs	r3, r3, r1
   23a98:	60bb      	str	r3, [r7, #8]
	return 0;
   23a9a:	2000      	movs	r0, #0
   23a9c:	e799      	b.n	239d2 <z_impl_clock_gettime+0x1a>
	switch (clock_id) {
   23a9e:	2500      	movs	r5, #0
   23aa0:	462e      	mov	r6, r5
   23aa2:	46a8      	mov	r8, r5
   23aa4:	e7c4      	b.n	23a30 <z_impl_clock_gettime+0x78>
   23aa6:	bf00      	nop
   23aa8:	200191e4 	.word	0x200191e4
   23aac:	0004402c 	.word	0x0004402c
   23ab0:	00043ff2 	.word	0x00043ff2
   23ab4:	200153c0 	.word	0x200153c0
   23ab8:	3b9aca00 	.word	0x3b9aca00
   23abc:	3b9ac9ff 	.word	0x3b9ac9ff

00023ac0 <net_if_flag_set.constprop.0>:
 * @brief Set a value in network interface flags
 *
 * @param iface Pointer to network interface
 * @param value Flag value
 */
static inline void net_if_flag_set(struct net_if *iface,
   23ac0:	b510      	push	{r4, lr}
				   enum net_if_flag value)
{
	NET_ASSERT(iface);
   23ac2:	4604      	mov	r4, r0
   23ac4:	b950      	cbnz	r0, 23adc <net_if_flag_set.constprop.0+0x1c>
   23ac6:	490b      	ldr	r1, [pc, #44]	; (23af4 <net_if_flag_set.constprop.0+0x34>)
   23ac8:	480b      	ldr	r0, [pc, #44]	; (23af8 <net_if_flag_set.constprop.0+0x38>)
   23aca:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
   23ace:	f018 ffb5 	bl	3ca3c <assert_print>
   23ad2:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   23ad6:	4807      	ldr	r0, [pc, #28]	; (23af4 <net_if_flag_set.constprop.0+0x34>)
   23ad8:	f018 ffa9 	bl	3ca2e <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   23adc:	6823      	ldr	r3, [r4, #0]
   23ade:	330c      	adds	r3, #12
   23ae0:	e8d3 2fef 	ldaex	r2, [r3]
   23ae4:	f042 0201 	orr.w	r2, r2, #1
   23ae8:	e8c3 2fe1 	stlex	r1, r2, [r3]
   23aec:	2900      	cmp	r1, #0
   23aee:	d1f7      	bne.n	23ae0 <net_if_flag_set.constprop.0+0x20>

	atomic_set_bit(iface->if_dev->flags, value);
}
   23af0:	bd10      	pop	{r4, pc}
   23af2:	bf00      	nop
   23af4:	00044ab1 	.word	0x00044ab1
   23af8:	00043ff2 	.word	0x00043ff2

00023afc <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
   23afc:	4602      	mov	r2, r0
   23afe:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   23b00:	4801      	ldr	r0, [pc, #4]	; (23b08 <k_mutex_lock.constprop.0.isra.0+0xc>)
   23b02:	f012 bed7 	b.w	368b4 <z_impl_k_mutex_lock>
   23b06:	bf00      	nop
   23b08:	20014f54 	.word	0x20014f54

00023b0c <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   23b0c:	4801      	ldr	r0, [pc, #4]	; (23b14 <k_mutex_unlock.constprop.0.isra.0+0x8>)
   23b0e:	f012 bfa3 	b.w	36a58 <z_impl_k_mutex_unlock>
   23b12:	bf00      	nop
   23b14:	20014f54 	.word	0x20014f54

00023b18 <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
   23b18:	b538      	push	{r3, r4, r5, lr}
   23b1a:	4605      	mov	r5, r0
	int status = 0;

	NET_DBG("iface %p", iface);

	k_mutex_lock(&lock, K_FOREVER);
   23b1c:	f04f 31ff 	mov.w	r1, #4294967295
   23b20:	f04f 30ff 	mov.w	r0, #4294967295
   23b24:	f7ff ffea 	bl	23afc <k_mutex_lock.constprop.0.isra.0>

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   23b28:	2100      	movs	r1, #0
   23b2a:	4628      	mov	r0, r5
   23b2c:	f019 fe34 	bl	3d798 <net_if_flag_is_set>
   23b30:	4604      	mov	r4, r0
   23b32:	bb48      	cbnz	r0, 23b88 <net_if_up+0x70>
 * @return True if socket offloading is active, false otherwise.
 */
static inline bool net_if_is_socket_offloaded(struct net_if *iface)
{
#if defined(CONFIG_NET_SOCKETS_OFFLOAD)
	return iface->if_dev->offloaded;
   23b34:	682b      	ldr	r3, [r5, #0]

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
	     net_if_is_ip_offloaded(iface)) ||
	    (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD) &&
	     net_if_is_socket_offloaded(iface))) {
		net_if_flag_set(iface, NET_IF_UP);
   23b36:	4628      	mov	r0, r5
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   23b38:	7e9b      	ldrb	r3, [r3, #26]
   23b3a:	b12b      	cbz	r3, 23b48 <net_if_up+0x30>
		net_if_flag_set(iface, NET_IF_UP);
   23b3c:	f7ff ffc0 	bl	23ac0 <net_if_flag_set.constprop.0>

notify:
	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

out:
	k_mutex_unlock(&lock);
   23b40:	f7ff ffe4 	bl	23b0c <k_mutex_unlock.constprop.0.isra.0>

	return status;
}
   23b44:	4620      	mov	r0, r4
   23b46:	bd38      	pop	{r3, r4, r5, pc}
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   23b48:	f019 fe21 	bl	3d78e <net_if_l2>
   23b4c:	4604      	mov	r4, r0
   23b4e:	b130      	cbz	r0, 23b5e <net_if_up+0x46>
   23b50:	6884      	ldr	r4, [r0, #8]
   23b52:	b124      	cbz	r4, 23b5e <net_if_up+0x46>
	status = net_if_l2(iface)->enable(iface, true);
   23b54:	2101      	movs	r1, #1
   23b56:	4628      	mov	r0, r5
   23b58:	47a0      	blx	r4
	if (status < 0) {
   23b5a:	1e04      	subs	r4, r0, #0
   23b5c:	dbf0      	blt.n	23b40 <net_if_up+0x28>
		NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
   23b5e:	682b      	ldr	r3, [r5, #0]
   23b60:	691b      	ldr	r3, [r3, #16]
   23b62:	b953      	cbnz	r3, 23b7a <net_if_up+0x62>
   23b64:	490a      	ldr	r1, [pc, #40]	; (23b90 <net_if_up+0x78>)
   23b66:	480b      	ldr	r0, [pc, #44]	; (23b94 <net_if_up+0x7c>)
   23b68:	f640 72d5 	movw	r2, #4053	; 0xfd5
   23b6c:	f018 ff66 	bl	3ca3c <assert_print>
   23b70:	f640 71d5 	movw	r1, #4053	; 0xfd5
   23b74:	4806      	ldr	r0, [pc, #24]	; (23b90 <net_if_up+0x78>)
   23b76:	f018 ff5a 	bl	3ca2e <assert_post_action>
	net_if_flag_set(iface, NET_IF_UP);
   23b7a:	4628      	mov	r0, r5
   23b7c:	f7ff ffa0 	bl	23ac0 <net_if_flag_set.constprop.0>
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   23b80:	4628      	mov	r0, r5
   23b82:	f019 fe13 	bl	3d7ac <l2_flags_get.isra.0>
notify:
   23b86:	e7db      	b.n	23b40 <net_if_up+0x28>
		status = -EALREADY;
   23b88:	f06f 0477 	mvn.w	r4, #119	; 0x77
   23b8c:	e7d8      	b.n	23b40 <net_if_up+0x28>
   23b8e:	bf00      	nop
   23b90:	00044ae0 	.word	0x00044ae0
   23b94:	00043ff2 	.word	0x00043ff2

00023b98 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   23b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int if_count = 0;

	NET_DBG("");

	k_mutex_lock(&lock, K_FOREVER);
   23b9a:	f04f 30ff 	mov.w	r0, #4294967295
   23b9e:	f04f 31ff 	mov.w	r1, #4294967295
   23ba2:	f7ff ffab 	bl	23afc <k_mutex_lock.constprop.0.isra.0>

	net_tc_tx_init();

	STRUCT_SECTION_FOREACH(net_if, iface) {
   23ba6:	4c11      	ldr	r4, [pc, #68]	; (23bec <net_if_init+0x54>)
   23ba8:	4d11      	ldr	r5, [pc, #68]	; (23bf0 <net_if_init+0x58>)
   23baa:	4f12      	ldr	r7, [pc, #72]	; (23bf4 <net_if_init+0x5c>)
   23bac:	42ac      	cmp	r4, r5
   23bae:	4626      	mov	r6, r4
   23bb0:	d90a      	bls.n	23bc8 <net_if_init+0x30>
   23bb2:	4639      	mov	r1, r7
   23bb4:	4810      	ldr	r0, [pc, #64]	; (23bf8 <net_if_init+0x60>)
   23bb6:	f241 02f0 	movw	r2, #4336	; 0x10f0
   23bba:	f018 ff3f 	bl	3ca3c <assert_print>
   23bbe:	f241 01f0 	movw	r1, #4336	; 0x10f0
   23bc2:	4638      	mov	r0, r7
   23bc4:	f018 ff33 	bl	3ca2e <assert_post_action>
   23bc8:	42ac      	cmp	r4, r5
   23bca:	d303      	bcc.n	23bd4 <net_if_init+0x3c>
	}
#endif

out:
	k_mutex_unlock(&lock);
}
   23bcc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_mutex_unlock(&lock);
   23bd0:	f7ff bf9c 	b.w	23b0c <k_mutex_unlock.constprop.0.isra.0>
	return iface->if_dev->dev;
   23bd4:	6833      	ldr	r3, [r6, #0]
   23bd6:	3404      	adds	r4, #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
   23bd8:	681b      	ldr	r3, [r3, #0]
   23bda:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
   23bdc:	2b00      	cmp	r3, #0
   23bde:	d0e5      	beq.n	23bac <net_if_init+0x14>
   23be0:	681b      	ldr	r3, [r3, #0]
   23be2:	2b00      	cmp	r3, #0
   23be4:	d0e2      	beq.n	23bac <net_if_init+0x14>
	api->init(iface);
   23be6:	4630      	mov	r0, r6
   23be8:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(net_if, iface) {
   23bea:	e7df      	b.n	23bac <net_if_init+0x14>
   23bec:	2001512c 	.word	0x2001512c
   23bf0:	20015130 	.word	0x20015130
   23bf4:	00044ae0 	.word	0x00044ae0
   23bf8:	00043ff2 	.word	0x00043ff2

00023bfc <net_if_post_init>:

void net_if_post_init(void)
{
   23bfc:	b570      	push	{r4, r5, r6, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	STRUCT_SECTION_FOREACH(net_if, iface) {
   23bfe:	4c0e      	ldr	r4, [pc, #56]	; (23c38 <net_if_post_init+0x3c>)
   23c00:	4d0e      	ldr	r5, [pc, #56]	; (23c3c <net_if_post_init+0x40>)
   23c02:	4e0f      	ldr	r6, [pc, #60]	; (23c40 <net_if_post_init+0x44>)
   23c04:	42ac      	cmp	r4, r5
   23c06:	d90a      	bls.n	23c1e <net_if_post_init+0x22>
   23c08:	4631      	mov	r1, r6
   23c0a:	480e      	ldr	r0, [pc, #56]	; (23c44 <net_if_post_init+0x48>)
   23c0c:	f241 1222 	movw	r2, #4386	; 0x1122
   23c10:	f018 ff14 	bl	3ca3c <assert_print>
   23c14:	f241 1122 	movw	r1, #4386	; 0x1122
   23c18:	4630      	mov	r0, r6
   23c1a:	f018 ff08 	bl	3ca2e <assert_post_action>
   23c1e:	42ac      	cmp	r4, r5
   23c20:	d300      	bcc.n	23c24 <net_if_post_init+0x28>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   23c22:	bd70      	pop	{r4, r5, r6, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   23c24:	2103      	movs	r1, #3
   23c26:	4620      	mov	r0, r4
   23c28:	f019 fdb6 	bl	3d798 <net_if_flag_is_set>
   23c2c:	b910      	cbnz	r0, 23c34 <net_if_post_init+0x38>
			net_if_up(iface);
   23c2e:	4620      	mov	r0, r4
   23c30:	f7ff ff72 	bl	23b18 <net_if_up>
	STRUCT_SECTION_FOREACH(net_if, iface) {
   23c34:	3404      	adds	r4, #4
   23c36:	e7e5      	b.n	23c04 <net_if_post_init+0x8>
   23c38:	2001512c 	.word	0x2001512c
   23c3c:	20015130 	.word	0x20015130
   23c40:	00044ae0 	.word	0x00044ae0
   23c44:	00043ff2 	.word	0x00043ff2

00023c48 <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	uint16_t *w;
	uint8_t i, bl, bh, longest = 1U;
	int8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
   23c48:	2300      	movs	r3, #0
{
   23c4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	uint16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
   23c4e:	2802      	cmp	r0, #2
{
   23c50:	b089      	sub	sp, #36	; 0x24
   23c52:	4607      	mov	r7, r0
   23c54:	4616      	mov	r6, r2
	unsigned char zeros[8] = { 0 };
   23c56:	e9cd 3306 	strd	r3, r3, [sp, #24]
{
   23c5a:	9103      	str	r1, [sp, #12]
	if (family == AF_INET6) {
   23c5c:	d13e      	bne.n	23cdc <z_impl_net_addr_ntop+0x94>
		addr6 = (struct in6_addr *)src;
		w = (uint16_t *)addr6->s6_addr16;
   23c5e:	a806      	add	r0, sp, #24
   23c60:	9105      	str	r1, [sp, #20]
   23c62:	4601      	mov	r1, r0
{
   23c64:	461a      	mov	r2, r3
   23c66:	e006      	b.n	23c76 <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
   23c68:	780c      	ldrb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
   23c6a:	3201      	adds	r2, #1
				zeros[i]++;
   23c6c:	3401      	adds	r4, #1
   23c6e:	700c      	strb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
   23c70:	b2d4      	uxtb	r4, r2
   23c72:	2c07      	cmp	r4, #7
   23c74:	d804      	bhi.n	23c80 <z_impl_net_addr_ntop+0x38>
				if (UNALIGNED_GET(&w[j]) != 0) {
   23c76:	9c03      	ldr	r4, [sp, #12]
   23c78:	f834 4012 	ldrh.w	r4, [r4, r2, lsl #1]
   23c7c:	2c00      	cmp	r4, #0
   23c7e:	d0f3      	beq.n	23c68 <z_impl_net_addr_ntop+0x20>
		for (i = 0U; i < 8; i++) {
   23c80:	3301      	adds	r3, #1
   23c82:	2b08      	cmp	r3, #8
   23c84:	f101 0101 	add.w	r1, r1, #1
   23c88:	d1ec      	bne.n	23c64 <z_impl_net_addr_ntop+0x1c>
	int8_t pos = -1;
   23c8a:	f04f 38ff 	mov.w	r8, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   23c8e:	f04f 0901 	mov.w	r9, #1
			}
		}

		for (i = 0U; i < 8; i++) {
   23c92:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
   23c94:	f810 2b01 	ldrb.w	r2, [r0], #1
   23c98:	454a      	cmp	r2, r9
				longest = zeros[i];
				pos = i;
   23c9a:	bf88      	it	hi
   23c9c:	fa4f f883 	sxtbhi.w	r8, r3
		for (i = 0U; i < 8; i++) {
   23ca0:	f103 0301 	add.w	r3, r3, #1
   23ca4:	b2db      	uxtb	r3, r3
				pos = i;
   23ca6:	bf88      	it	hi
   23ca8:	4691      	movhi	r9, r2
		for (i = 0U; i < 8; i++) {
   23caa:	2b08      	cmp	r3, #8
   23cac:	d1f2      	bne.n	23c94 <z_impl_net_addr_ntop+0x4c>
		len = 8;
   23cae:	469b      	mov	fp, r3
   23cb0:	f1b9 0f01 	cmp.w	r9, #1
   23cb4:	f04f 033a 	mov.w	r3, #58	; 0x3a
   23cb8:	bf08      	it	eq
   23cba:	f04f 38ff 	moveq.w	r8, #4294967295
   23cbe:	9302      	str	r3, [sp, #8]
	bool needcolon = false;
   23cc0:	2100      	movs	r1, #0
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
   23cc2:	4634      	mov	r4, r6
   23cc4:	460d      	mov	r5, r1
   23cc6:	455d      	cmp	r5, fp
   23cc8:	db17      	blt.n	23cfa <z_impl_net_addr_ntop+0xb2>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
   23cca:	42b4      	cmp	r4, r6
   23ccc:	d008      	beq.n	23ce0 <z_impl_net_addr_ntop+0x98>
		return NULL;
	}

	if (family == AF_INET) {
   23cce:	2300      	movs	r3, #0
   23cd0:	2f01      	cmp	r7, #1
		*(ptr - 1) = '\0';
   23cd2:	bf0c      	ite	eq
   23cd4:	f804 3c01 	strbeq.w	r3, [r4, #-1]
	} else {
		*ptr = '\0';
   23cd8:	7023      	strbne	r3, [r4, #0]
   23cda:	e002      	b.n	23ce2 <z_impl_net_addr_ntop+0x9a>
	} else if (family == AF_INET) {
   23cdc:	2801      	cmp	r0, #1
   23cde:	d004      	beq.n	23cea <z_impl_net_addr_ntop+0xa2>
		return NULL;
   23ce0:	2600      	movs	r6, #0
	}

	return dst;
}
   23ce2:	4630      	mov	r0, r6
   23ce4:	b009      	add	sp, #36	; 0x24
   23ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
   23cea:	232e      	movs	r3, #46	; 0x2e
		len = 4;
   23cec:	f04f 0b04 	mov.w	fp, #4
	int8_t pos = -1;
   23cf0:	f04f 38ff 	mov.w	r8, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   23cf4:	4681      	mov	r9, r0
		delim = '.';
   23cf6:	9302      	str	r3, [sp, #8]
   23cf8:	e7e2      	b.n	23cc0 <z_impl_net_addr_ntop+0x78>
		if (len == 4) {
   23cfa:	f1bb 0f04 	cmp.w	fp, #4
   23cfe:	d135      	bne.n	23d6c <z_impl_net_addr_ntop+0x124>
			value = (uint32_t)addr->s4_addr[i];
   23d00:	9b03      	ldr	r3, [sp, #12]
   23d02:	5d5a      	ldrb	r2, [r3, r5]
			if (value == 0U) {
   23d04:	b94a      	cbnz	r2, 23d1a <z_impl_net_addr_ntop+0xd2>
				*ptr++ = '0';
   23d06:	2330      	movs	r3, #48	; 0x30
   23d08:	4620      	mov	r0, r4
   23d0a:	f800 3b02 	strb.w	r3, [r0], #2
				*ptr++ = delim;
   23d0e:	9b02      	ldr	r3, [sp, #8]
   23d10:	7063      	strb	r3, [r4, #1]
	for (i = 0U; i < len; i++) {
   23d12:	3501      	adds	r5, #1
   23d14:	4604      	mov	r4, r0
   23d16:	b2ed      	uxtb	r5, r5
   23d18:	e7d5      	b.n	23cc6 <z_impl_net_addr_ntop+0x7e>
			l = net_value_to_udec(ptr, value, 0);
   23d1a:	4623      	mov	r3, r4
   23d1c:	2009      	movs	r0, #9
   23d1e:	f04f 0a00 	mov.w	sl, #0
   23d22:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 23e00 <z_impl_net_addr_ntop+0x1b8>
   23d26:	9201      	str	r2, [sp, #4]
		temp = value / divisor;
   23d28:	9a01      	ldr	r2, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   23d2a:	4582      	cmp	sl, r0
		temp = value / divisor;
   23d2c:	fbb2 fefc 	udiv	lr, r2, ip
		value = value % divisor;
   23d30:	9204      	str	r2, [sp, #16]
   23d32:	fb0c 221e 	mls	r2, ip, lr, r2
   23d36:	9201      	str	r2, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   23d38:	dc02      	bgt.n	23d40 <z_impl_net_addr_ntop+0xf8>
   23d3a:	9a04      	ldr	r2, [sp, #16]
   23d3c:	4562      	cmp	r2, ip
   23d3e:	d304      	bcc.n	23d4a <z_impl_net_addr_ntop+0x102>
			*buf++ = (char) (temp + '0');
   23d40:	4682      	mov	sl, r0
   23d42:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
   23d46:	f803 eb01 	strb.w	lr, [r3], #1
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   23d4a:	220a      	movs	r2, #10
   23d4c:	3801      	subs	r0, #1
   23d4e:	fbbc fcf2 	udiv	ip, ip, r2
   23d52:	1c42      	adds	r2, r0, #1
   23d54:	d1e8      	bne.n	23d28 <z_impl_net_addr_ntop+0xe0>
	*buf = 0;
   23d56:	f04f 0200 	mov.w	r2, #0
   23d5a:	701a      	strb	r2, [r3, #0]
	return buf - start;
   23d5c:	1b1b      	subs	r3, r3, r4
			ptr += l;
   23d5e:	b2da      	uxtb	r2, r3
   23d60:	fa54 f383 	uxtab	r3, r4, r3
			*ptr++ = delim;
   23d64:	1c58      	adds	r0, r3, #1
   23d66:	9b02      	ldr	r3, [sp, #8]
   23d68:	54a3      	strb	r3, [r4, r2]
			continue;
   23d6a:	e7d2      	b.n	23d12 <z_impl_net_addr_ntop+0xca>
		if (i == pos) {
   23d6c:	45a8      	cmp	r8, r5
   23d6e:	d110      	bne.n	23d92 <z_impl_net_addr_ntop+0x14a>
			if (needcolon || i == 0U) {
   23d70:	b911      	cbnz	r1, 23d78 <z_impl_net_addr_ntop+0x130>
   23d72:	f1b8 0f00 	cmp.w	r8, #0
   23d76:	d102      	bne.n	23d7e <z_impl_net_addr_ntop+0x136>
				*ptr++ = ':';
   23d78:	233a      	movs	r3, #58	; 0x3a
   23d7a:	f804 3b01 	strb.w	r3, [r4], #1
			*ptr++ = ':';
   23d7e:	233a      	movs	r3, #58	; 0x3a
   23d80:	4620      	mov	r0, r4
   23d82:	f800 3b01 	strb.w	r3, [r0], #1
			i += longest - 1U;
   23d86:	f109 33ff 	add.w	r3, r9, #4294967295
   23d8a:	441d      	add	r5, r3
			needcolon = false;
   23d8c:	2100      	movs	r1, #0
			i += longest - 1U;
   23d8e:	b2ed      	uxtb	r5, r5
			continue;
   23d90:	e7bf      	b.n	23d12 <z_impl_net_addr_ntop+0xca>
		if (needcolon) {
   23d92:	b111      	cbz	r1, 23d9a <z_impl_net_addr_ntop+0x152>
			*ptr++ = ':';
   23d94:	233a      	movs	r3, #58	; 0x3a
   23d96:	f804 3b01 	strb.w	r3, [r4], #1
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   23d9a:	9b05      	ldr	r3, [sp, #20]
   23d9c:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
   23da0:	ba52      	rev16	r2, r2
		if (bh) {
   23da2:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
		bh = value >> 8;
   23da6:	f3c2 2307 	ubfx	r3, r2, #8, #8
		bl = value & 0xff;
   23daa:	fa5f fa82 	uxtb.w	sl, r2
		if (bh) {
   23dae:	d015      	beq.n	23ddc <z_impl_net_addr_ntop+0x194>
			if (bh > 0x0f) {
   23db0:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   23db2:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   23db4:	d90b      	bls.n	23dce <z_impl_net_addr_ntop+0x186>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   23db6:	2300      	movs	r3, #0
   23db8:	2261      	movs	r2, #97	; 0x61
   23dba:	4620      	mov	r0, r4
   23dbc:	f019 fd02 	bl	3d7c4 <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   23dc0:	2301      	movs	r3, #1
   23dc2:	2261      	movs	r2, #97	; 0x61
   23dc4:	4651      	mov	r1, sl
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   23dc6:	f019 fcfd 	bl	3d7c4 <net_byte_to_hex>
		needcolon = true;
   23dca:	2101      	movs	r1, #1
   23dcc:	e7a1      	b.n	23d12 <z_impl_net_addr_ntop+0xca>
				if (bh < 10) {
   23dce:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
   23dd0:	bf94      	ite	ls
   23dd2:	3130      	addls	r1, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
   23dd4:	3157      	addhi	r1, #87	; 0x57
					*ptr++ = (char)(bh + '0');
   23dd6:	1c60      	adds	r0, r4, #1
					*ptr++ = (char) (bh - 10 + 'a');
   23dd8:	7021      	strb	r1, [r4, #0]
   23dda:	e7f1      	b.n	23dc0 <z_impl_net_addr_ntop+0x178>
		} else if (bl > 0x0f) {
   23ddc:	f1ba 0f0f 	cmp.w	sl, #15
   23de0:	d903      	bls.n	23dea <z_impl_net_addr_ntop+0x1a2>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   23de2:	2261      	movs	r2, #97	; 0x61
   23de4:	4651      	mov	r1, sl
   23de6:	4620      	mov	r0, r4
   23de8:	e7ed      	b.n	23dc6 <z_impl_net_addr_ntop+0x17e>
			if (bl < 10) {
   23dea:	f1ba 0f09 	cmp.w	sl, #9
				*ptr++ = (char)(bl + '0');
   23dee:	bf94      	ite	ls
   23df0:	f10a 0a30 	addls.w	sl, sl, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   23df4:	f10a 0a57 	addhi.w	sl, sl, #87	; 0x57
					*ptr++ = (char)(bh + '0');
   23df8:	1c60      	adds	r0, r4, #1
				*ptr++ = (char) (bl - 10 + 'a');
   23dfa:	f884 a000 	strb.w	sl, [r4]
   23dfe:	e7e4      	b.n	23dca <z_impl_net_addr_ntop+0x182>
   23e00:	3b9aca00 	.word	0x3b9aca00

00023e04 <connect_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int connect_request_encode(const struct mqtt_client *client,
			   struct buf_ctx *buf)
{
   23e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	} else {
		mqtt_proto_desc = &mqtt_3_1_0_proto_desc;
	}

	/* Reserve space for fixed header. */
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   23e08:	680f      	ldr	r7, [r1, #0]
	uint8_t connect_flags = client->clean_session << 1;
   23e0a:	f890 5084 	ldrb.w	r5, [r0, #132]	; 0x84
	start = buf->cur;

	NET_HEXDUMP_DBG(mqtt_proto_desc->utf8, mqtt_proto_desc->size,
			 "Encoding Protocol Description.");

	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   23e0e:	4b3b      	ldr	r3, [pc, #236]	; (23efc <connect_request_encode+0xf8>)
   23e10:	4a3b      	ldr	r2, [pc, #236]	; (23f00 <connect_request_encode+0xfc>)
{
   23e12:	4606      	mov	r6, r0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   23e14:	f890 0082 	ldrb.w	r0, [r0, #130]	; 0x82
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   23e18:	3705      	adds	r7, #5
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   23e1a:	2804      	cmp	r0, #4
   23e1c:	bf0c      	ite	eq
   23e1e:	4610      	moveq	r0, r2
   23e20:	4618      	movne	r0, r3
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   23e22:	600f      	str	r7, [r1, #0]
{
   23e24:	460c      	mov	r4, r1
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   23e26:	f019 fe70 	bl	3db0a <pack_utf8_str>
	uint8_t connect_flags = client->clean_session << 1;
   23e2a:	f3c5 0540 	ubfx	r5, r5, #1, #1
	if (err_code != 0) {
   23e2e:	4603      	mov	r3, r0
   23e30:	b938      	cbnz	r0, 23e42 <connect_request_encode+0x3e>
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   23e32:	e9d4 2000 	ldrd	r2, r0, [r4]
   23e36:	4290      	cmp	r0, r2
		return err_code;
	}

	NET_DBG("Encoding Protocol Version %02x.", client->protocol_version);
	err_code = pack_uint8(client->protocol_version, buf);
   23e38:	f896 1082 	ldrb.w	r1, [r6, #130]	; 0x82
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   23e3c:	d104      	bne.n	23e48 <connect_request_encode+0x44>
		return -ENOMEM;
   23e3e:	f06f 030b 	mvn.w	r3, #11

	/* Write the flags the connect flags. */
	*connect_flags_pos = connect_flags;

	return mqtt_encode_fixed_header(message_type, start, buf);
}
   23e42:	4618      	mov	r0, r3
   23e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*(buf->cur++) = val;
   23e48:	1c50      	adds	r0, r2, #1
   23e4a:	6020      	str	r0, [r4, #0]
   23e4c:	7011      	strb	r1, [r2, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   23e4e:	e9d4 8200 	ldrd	r8, r2, [r4]
   23e52:	4590      	cmp	r8, r2
   23e54:	d0f3      	beq.n	23e3e <connect_request_encode+0x3a>
	*(buf->cur++) = val;
   23e56:	f108 0201 	add.w	r2, r8, #1
   23e5a:	6022      	str	r2, [r4, #0]
   23e5c:	f888 3000 	strb.w	r3, [r8]
	err_code = pack_uint16(client->keepalive, buf);
   23e60:	4621      	mov	r1, r4
   23e62:	f8b6 0080 	ldrh.w	r0, [r6, #128]	; 0x80
   23e66:	f019 fe3e 	bl	3dae6 <pack_uint16>
	if (err_code != 0) {
   23e6a:	4603      	mov	r3, r0
   23e6c:	2800      	cmp	r0, #0
   23e6e:	d1e8      	bne.n	23e42 <connect_request_encode+0x3e>
	err_code = pack_utf8_str(&client->client_id, buf);
   23e70:	f106 0050 	add.w	r0, r6, #80	; 0x50
   23e74:	f019 fe49 	bl	3db0a <pack_utf8_str>
	if (err_code != 0) {
   23e78:	4603      	mov	r3, r0
   23e7a:	2800      	cmp	r0, #0
   23e7c:	d1e1      	bne.n	23e42 <connect_request_encode+0x3e>
	if (client->will_topic != NULL) {
   23e7e:	6e70      	ldr	r0, [r6, #100]	; 0x64
	uint8_t connect_flags = client->clean_session << 1;
   23e80:	006d      	lsls	r5, r5, #1
	if (client->will_topic != NULL) {
   23e82:	b1d8      	cbz	r0, 23ebc <connect_request_encode+0xb8>
		connect_flags |= client->will_retain << 5;
   23e84:	f896 3084 	ldrb.w	r3, [r6, #132]	; 0x84
		connect_flags |= MQTT_CONNECT_FLAG_WILL_TOPIC;
   23e88:	f045 0504 	orr.w	r5, r5, #4
		connect_flags |= client->will_retain << 5;
   23e8c:	f003 0301 	and.w	r3, r3, #1
   23e90:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   23e94:	7a03      	ldrb	r3, [r0, #8]
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   23e96:	4621      	mov	r1, r4
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   23e98:	00db      	lsls	r3, r3, #3
   23e9a:	f003 0318 	and.w	r3, r3, #24
		connect_flags |= client->will_retain << 5;
   23e9e:	431d      	orrs	r5, r3
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   23ea0:	f019 fe33 	bl	3db0a <pack_utf8_str>
		if (err_code != 0) {
   23ea4:	4603      	mov	r3, r0
   23ea6:	2800      	cmp	r0, #0
   23ea8:	d1cb      	bne.n	23e42 <connect_request_encode+0x3e>
		if (client->will_message != NULL) {
   23eaa:	6eb3      	ldr	r3, [r6, #104]	; 0x68
			err_code = pack_utf8_str(client->will_message, buf);
   23eac:	4621      	mov	r1, r4
		if (client->will_message != NULL) {
   23eae:	b313      	cbz	r3, 23ef6 <connect_request_encode+0xf2>
			err_code = pack_utf8_str(client->will_message, buf);
   23eb0:	4618      	mov	r0, r3
   23eb2:	f019 fe2a 	bl	3db0a <pack_utf8_str>
			if (err_code != 0) {
   23eb6:	4603      	mov	r3, r0
   23eb8:	2800      	cmp	r0, #0
   23eba:	d1c2      	bne.n	23e42 <connect_request_encode+0x3e>
	if (client->user_name != NULL) {
   23ebc:	6df0      	ldr	r0, [r6, #92]	; 0x5c
   23ebe:	b138      	cbz	r0, 23ed0 <connect_request_encode+0xcc>
		err_code = pack_utf8_str(client->user_name, buf);
   23ec0:	4621      	mov	r1, r4
   23ec2:	f019 fe22 	bl	3db0a <pack_utf8_str>
		if (err_code != 0) {
   23ec6:	4603      	mov	r3, r0
   23ec8:	2800      	cmp	r0, #0
   23eca:	d1ba      	bne.n	23e42 <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_USERNAME;
   23ecc:	f045 0580 	orr.w	r5, r5, #128	; 0x80
	if (client->password != NULL) {
   23ed0:	6e30      	ldr	r0, [r6, #96]	; 0x60
   23ed2:	b138      	cbz	r0, 23ee4 <connect_request_encode+0xe0>
		err_code = pack_utf8_str(client->password, buf);
   23ed4:	4621      	mov	r1, r4
   23ed6:	f019 fe18 	bl	3db0a <pack_utf8_str>
		if (err_code != 0) {
   23eda:	4603      	mov	r3, r0
   23edc:	2800      	cmp	r0, #0
   23ede:	d1b0      	bne.n	23e42 <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_PASSWORD;
   23ee0:	f045 0540 	orr.w	r5, r5, #64	; 0x40
	*connect_flags_pos = connect_flags;
   23ee4:	f888 5000 	strb.w	r5, [r8]
	return mqtt_encode_fixed_header(message_type, start, buf);
   23ee8:	4622      	mov	r2, r4
   23eea:	4639      	mov	r1, r7
}
   23eec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   23ef0:	2010      	movs	r0, #16
   23ef2:	f019 be25 	b.w	3db40 <mqtt_encode_fixed_header>
	return pack_uint16(0x0000, buf);
   23ef6:	f019 fdf6 	bl	3dae6 <pack_uint16>
   23efa:	e7dc      	b.n	23eb6 <connect_request_encode+0xb2>
   23efc:	00042a78 	.word	0x00042a78
   23f00:	00042a80 	.word	0x00042a80

00023f04 <disconnect_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
}

int disconnect_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(disc_packet)) {
   23f04:	e9d0 2300 	ldrd	r2, r3, [r0]
   23f08:	1a9b      	subs	r3, r3, r2
   23f0a:	2b01      	cmp	r3, #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   23f0c:	bf81      	itttt	hi
   23f0e:	4b05      	ldrhi	r3, [pc, #20]	; (23f24 <disconnect_encode+0x20>)
   23f10:	881b      	ldrhhi	r3, [r3, #0]
   23f12:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, disc_packet, sizeof(disc_packet));
	buf->end = buf->cur + sizeof(disc_packet);
   23f14:	6803      	ldrhi	r3, [r0, #0]
   23f16:	bf83      	ittte	hi
   23f18:	3302      	addhi	r3, #2
   23f1a:	6043      	strhi	r3, [r0, #4]

	return 0;
   23f1c:	2000      	movhi	r0, #0
		return -ENOMEM;
   23f1e:	f06f 000b 	mvnls.w	r0, #11
}
   23f22:	4770      	bx	lr
   23f24:	00044b0a 	.word	0x00044b0a

00023f28 <ping_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int ping_request_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(ping_packet)) {
   23f28:	e9d0 2300 	ldrd	r2, r3, [r0]
   23f2c:	1a9b      	subs	r3, r3, r2
   23f2e:	2b01      	cmp	r3, #1
   23f30:	bf81      	itttt	hi
   23f32:	4b05      	ldrhi	r3, [pc, #20]	; (23f48 <ping_request_encode+0x20>)
   23f34:	881b      	ldrhhi	r3, [r3, #0]
   23f36:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, ping_packet, sizeof(ping_packet));
	buf->end = buf->cur + sizeof(ping_packet);
   23f38:	6803      	ldrhi	r3, [r0, #0]
   23f3a:	bf83      	ittte	hi
   23f3c:	3302      	addhi	r3, #2
   23f3e:	6043      	strhi	r3, [r0, #4]

	return 0;
   23f40:	2000      	movhi	r0, #0
		return -ENOMEM;
   23f42:	f06f 000b 	mvnls.w	r0, #11
}
   23f46:	4770      	bx	lr
   23f48:	00044b0c 	.word	0x00044b0c

00023f4c <mqtt_transport_connect>:
#endif /* CONFIG_MQTT_LIB_CUSTOM_TRANSPORT */
};

int mqtt_transport_connect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].connect(client);
   23f4c:	2214      	movs	r2, #20
   23f4e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   23f52:	4353      	muls	r3, r2
   23f54:	4a01      	ldr	r2, [pc, #4]	; (23f5c <mqtt_transport_connect+0x10>)
   23f56:	58d3      	ldr	r3, [r2, r3]
   23f58:	4718      	bx	r3
   23f5a:	bf00      	nop
   23f5c:	00042a88 	.word	0x00042a88

00023f60 <mqtt_transport_write>:
}

int mqtt_transport_write(struct mqtt_client *client, const uint8_t *data,
			 uint32_t datalen)
{
   23f60:	b430      	push	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   23f62:	2514      	movs	r5, #20
   23f64:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
   23f68:	4b02      	ldr	r3, [pc, #8]	; (23f74 <mqtt_transport_write+0x14>)
   23f6a:	fb05 3304 	mla	r3, r5, r4, r3
							  datalen);
}
   23f6e:	bc30      	pop	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   23f70:	685b      	ldr	r3, [r3, #4]
   23f72:	4718      	bx	r3
   23f74:	00042a88 	.word	0x00042a88

00023f78 <mqtt_transport_write_msg>:

int mqtt_transport_write_msg(struct mqtt_client *client,
			     const struct msghdr *message)
{
   23f78:	b410      	push	{r4}
	return transport_fn[client->transport.type].write_msg(client, message);
   23f7a:	2414      	movs	r4, #20
   23f7c:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   23f80:	4b03      	ldr	r3, [pc, #12]	; (23f90 <mqtt_transport_write_msg+0x18>)
   23f82:	fb04 3302 	mla	r3, r4, r2, r3
}
   23f86:	f85d 4b04 	ldr.w	r4, [sp], #4
	return transport_fn[client->transport.type].write_msg(client, message);
   23f8a:	689b      	ldr	r3, [r3, #8]
   23f8c:	4718      	bx	r3
   23f8e:	bf00      	nop
   23f90:	00042a88 	.word	0x00042a88

00023f94 <mqtt_transport_read>:

int mqtt_transport_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			bool shall_block)
{
   23f94:	b470      	push	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   23f96:	2614      	movs	r6, #20
   23f98:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
   23f9c:	4c03      	ldr	r4, [pc, #12]	; (23fac <mqtt_transport_read+0x18>)
   23f9e:	fb06 4405 	mla	r4, r6, r5, r4
   23fa2:	68e4      	ldr	r4, [r4, #12]
   23fa4:	46a4      	mov	ip, r4
							 shall_block);
}
   23fa6:	bc70      	pop	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   23fa8:	4760      	bx	ip
   23faa:	bf00      	nop
   23fac:	00042a88 	.word	0x00042a88

00023fb0 <mqtt_transport_disconnect>:

int mqtt_transport_disconnect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].disconnect(client);
   23fb0:	2114      	movs	r1, #20
   23fb2:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   23fb6:	4b02      	ldr	r3, [pc, #8]	; (23fc0 <mqtt_transport_disconnect+0x10>)
   23fb8:	fb01 3302 	mla	r3, r1, r2, r3
   23fbc:	691b      	ldr	r3, [r3, #16]
   23fbe:	4718      	bx	r3
   23fc0:	00042a88 	.word	0x00042a88

00023fc4 <mqtt_mutex_unlock>:
}

/**@brief Release the lock on the module specific mutex, if any.
 */
static inline void mqtt_mutex_unlock(struct mqtt_client *client)
{
   23fc4:	b508      	push	{r3, lr}
   23fc6:	f012 fd47 	bl	36a58 <z_impl_k_mutex_unlock>
	int ret = sys_mutex_unlock(&client->internal.mutex);

	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   23fca:	b150      	cbz	r0, 23fe2 <mqtt_mutex_unlock+0x1e>
   23fcc:	4905      	ldr	r1, [pc, #20]	; (23fe4 <mqtt_mutex_unlock+0x20>)
   23fce:	4806      	ldr	r0, [pc, #24]	; (23fe8 <mqtt_mutex_unlock+0x24>)
   23fd0:	223d      	movs	r2, #61	; 0x3d
   23fd2:	f018 fd33 	bl	3ca3c <assert_print>
	(void)ret;
}
   23fd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   23fda:	213d      	movs	r1, #61	; 0x3d
   23fdc:	4801      	ldr	r0, [pc, #4]	; (23fe4 <mqtt_mutex_unlock+0x20>)
   23fde:	f018 bd26 	b.w	3ca2e <assert_post_action>
}
   23fe2:	bd08      	pop	{r3, pc}
   23fe4:	00044b1a 	.word	0x00044b1a
   23fe8:	00043ff2 	.word	0x00043ff2

00023fec <mqtt_mutex_lock>:
{
   23fec:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   23fee:	f04f 32ff 	mov.w	r2, #4294967295
   23ff2:	f04f 33ff 	mov.w	r3, #4294967295
   23ff6:	f012 fc5d 	bl	368b4 <z_impl_k_mutex_lock>
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   23ffa:	b150      	cbz	r0, 24012 <mqtt_mutex_lock+0x26>
   23ffc:	4905      	ldr	r1, [pc, #20]	; (24014 <mqtt_mutex_lock+0x28>)
   23ffe:	4806      	ldr	r0, [pc, #24]	; (24018 <mqtt_mutex_lock+0x2c>)
   24000:	2233      	movs	r2, #51	; 0x33
   24002:	f018 fd1b 	bl	3ca3c <assert_print>
}
   24006:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   2400a:	2133      	movs	r1, #51	; 0x33
   2400c:	4801      	ldr	r0, [pc, #4]	; (24014 <mqtt_mutex_lock+0x28>)
   2400e:	f018 bd0e 	b.w	3ca2e <assert_post_action>
}
   24012:	bd08      	pop	{r3, pc}
   24014:	00044b1a 	.word	0x00044b1a
   24018:	00043ff2 	.word	0x00043ff2

0002401c <mqtt_client_tls_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tls_connect(struct mqtt_client *client)
{
   2401c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const struct sockaddr *broker = client->broker;
	struct mqtt_sec_config *tls_config = &client->transport.tls.config;
	int type = SOCK_STREAM;
	int ret;

	if (tls_config->set_native_tls) {
   2401e:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
	const struct sockaddr *broker = client->broker;
   24022:	6d85      	ldr	r5, [r0, #88]	; 0x58
		type |= SOCK_NATIVE_TLS;
   24024:	2b00      	cmp	r3, #0
{
   24026:	4604      	mov	r4, r0
		type |= SOCK_NATIVE_TLS;
   24028:	493f      	ldr	r1, [pc, #252]	; (24128 <mqtt_client_tls_connect+0x10c>)
	}

	client->transport.tls.sock = zsock_socket(broker->sa_family,
   2402a:	8828      	ldrh	r0, [r5, #0]
		type |= SOCK_NATIVE_TLS;
   2402c:	bf08      	it	eq
   2402e:	2101      	moveq	r1, #1
	return z_impl_zsock_socket(family, type, proto);
   24030:	f44f 7281 	mov.w	r2, #258	; 0x102
   24034:	f7fd fc2c 	bl	21890 <z_impl_zsock_socket>
						  type, IPPROTO_TLS_1_2);
	if (client->transport.tls.sock < 0) {
   24038:	2800      	cmp	r0, #0
	client->transport.tls.sock = zsock_socket(broker->sa_family,
   2403a:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tls.sock < 0) {
   2403c:	da05      	bge.n	2404a <mqtt_client_tls_connect+0x2e>
	NET_DBG("Connect completed");
	return 0;

error:
	(void) zsock_close(client->transport.tls.sock);
	return -errno;
   2403e:	f019 fb76 	bl	3d72e <__errno>
   24042:	6800      	ldr	r0, [r0, #0]
   24044:	4240      	negs	r0, r0
}
   24046:	b004      	add	sp, #16
   24048:	bd70      	pop	{r4, r5, r6, pc}
		union { uintptr_t x; socklen_t val; } parm4 = { .val = optlen };
		return (int) arch_syscall_invoke5(parm0.x, parm1.x, parm2.x, parm3.x, parm4.x, K_SYSCALL_ZSOCK_SETSOCKOPT);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   2404a:	2304      	movs	r3, #4
   2404c:	2205      	movs	r2, #5
   2404e:	9300      	str	r3, [sp, #0]
   24050:	f44f 718d 	mov.w	r1, #282	; 0x11a
   24054:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   24058:	f019 f96a 	bl	3d330 <z_impl_zsock_setsockopt>
	if (ret < 0) {
   2405c:	2800      	cmp	r0, #0
   2405e:	da03      	bge.n	24068 <mqtt_client_tls_connect+0x4c>
	(void) zsock_close(client->transport.tls.sock);
   24060:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   24062:	f019 f86e 	bl	3d142 <z_impl_zsock_close>
   24066:	e7ea      	b.n	2403e <mqtt_client_tls_connect+0x22>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   24068:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2406a:	2b00      	cmp	r3, #0
   2406c:	d12f      	bne.n	240ce <mqtt_client_tls_connect+0xb2>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   2406e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   24070:	2b00      	cmp	r3, #0
   24072:	d13a      	bne.n	240ea <mqtt_client_tls_connect+0xce>
	if (tls_config->hostname) {
   24074:	6c63      	ldr	r3, [r4, #68]	; 0x44
   24076:	2b00      	cmp	r3, #0
   24078:	d145      	bne.n	24106 <mqtt_client_tls_connect+0xea>
	if (tls_config->session_cache == TLS_SESSION_CACHE_ENABLED) {
   2407a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   2407c:	2b01      	cmp	r3, #1
   2407e:	d10b      	bne.n	24098 <mqtt_client_tls_connect+0x7c>
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   24080:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   24082:	2304      	movs	r3, #4
   24084:	220a      	movs	r2, #10
   24086:	9300      	str	r3, [sp, #0]
   24088:	f44f 718d 	mov.w	r1, #282	; 0x11a
   2408c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   24090:	f019 f94e 	bl	3d330 <z_impl_zsock_setsockopt>
		if (ret < 0) {
   24094:	2800      	cmp	r0, #0
   24096:	dbe3      	blt.n	24060 <mqtt_client_tls_connect+0x44>
	if (tls_config->cert_nocopy != TLS_CERT_NOCOPY_NONE) {
   24098:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   2409a:	b15b      	cbz	r3, 240b4 <mqtt_client_tls_connect+0x98>
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   2409c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   2409e:	2304      	movs	r3, #4
   240a0:	220a      	movs	r2, #10
   240a2:	9300      	str	r3, [sp, #0]
   240a4:	f44f 718d 	mov.w	r1, #282	; 0x11a
   240a8:	f104 0348 	add.w	r3, r4, #72	; 0x48
   240ac:	f019 f940 	bl	3d330 <z_impl_zsock_setsockopt>
		if (ret < 0) {
   240b0:	2800      	cmp	r0, #0
   240b2:	dbd5      	blt.n	24060 <mqtt_client_tls_connect+0x44>
	if (broker->sa_family == AF_INET) {
   240b4:	882b      	ldrh	r3, [r5, #0]
	ret = zsock_connect(client->transport.tls.sock, client->broker,
   240b6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	size_t peer_addr_size = sizeof(struct sockaddr_in6);
   240b8:	2b01      	cmp	r3, #1
   240ba:	bf0c      	ite	eq
   240bc:	2208      	moveq	r2, #8
   240be:	2218      	movne	r2, #24
	ret = zsock_connect(client->transport.tls.sock, client->broker,
   240c0:	6da1      	ldr	r1, [r4, #88]	; 0x58
	return z_impl_zsock_connect(sock, addr, addrlen);
   240c2:	f019 f862 	bl	3d18a <z_impl_zsock_connect>
	if (ret < 0) {
   240c6:	2800      	cmp	r0, #0
   240c8:	dbca      	blt.n	24060 <mqtt_client_tls_connect+0x44>
	return 0;
   240ca:	2000      	movs	r0, #0
   240cc:	e7bb      	b.n	24046 <mqtt_client_tls_connect+0x2a>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   240ce:	6b22      	ldr	r2, [r4, #48]	; 0x30
   240d0:	2a00      	cmp	r2, #0
   240d2:	d0cc      	beq.n	2406e <mqtt_client_tls_connect+0x52>
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   240d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   240d6:	0092      	lsls	r2, r2, #2
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   240d8:	9200      	str	r2, [sp, #0]
   240da:	f44f 718d 	mov.w	r1, #282	; 0x11a
   240de:	2203      	movs	r2, #3
   240e0:	f019 f926 	bl	3d330 <z_impl_zsock_setsockopt>
		if (ret < 0) {
   240e4:	2800      	cmp	r0, #0
   240e6:	dac2      	bge.n	2406e <mqtt_client_tls_connect+0x52>
   240e8:	e7ba      	b.n	24060 <mqtt_client_tls_connect+0x44>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   240ea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   240ec:	2a00      	cmp	r2, #0
   240ee:	d0c1      	beq.n	24074 <mqtt_client_tls_connect+0x58>
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   240f0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   240f2:	0092      	lsls	r2, r2, #2
   240f4:	9200      	str	r2, [sp, #0]
   240f6:	f44f 718d 	mov.w	r1, #282	; 0x11a
   240fa:	2201      	movs	r2, #1
   240fc:	f019 f918 	bl	3d330 <z_impl_zsock_setsockopt>
		if (ret < 0) {
   24100:	2800      	cmp	r0, #0
   24102:	dab7      	bge.n	24074 <mqtt_client_tls_connect+0x58>
   24104:	e7ac      	b.n	24060 <mqtt_client_tls_connect+0x44>
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   24106:	4618      	mov	r0, r3
   24108:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   2410a:	9303      	str	r3, [sp, #12]
   2410c:	f7f9 f899 	bl	1d242 <strlen>
   24110:	2202      	movs	r2, #2
   24112:	9000      	str	r0, [sp, #0]
   24114:	f44f 718d 	mov.w	r1, #282	; 0x11a
   24118:	4630      	mov	r0, r6
   2411a:	9b03      	ldr	r3, [sp, #12]
   2411c:	f019 f908 	bl	3d330 <z_impl_zsock_setsockopt>
		if (ret < 0) {
   24120:	2800      	cmp	r0, #0
   24122:	daaa      	bge.n	2407a <mqtt_client_tls_connect+0x5e>
   24124:	e79c      	b.n	24060 <mqtt_client_tls_connect+0x44>
   24126:	bf00      	nop
   24128:	40000001 	.word	0x40000001

0002412c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   2412c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   2412e:	2340      	movs	r3, #64	; 0x40
{
   24130:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   24132:	490a      	ldr	r1, [pc, #40]	; (2415c <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   24134:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   24136:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   24138:	1149      	asrs	r1, r1, #5
{
   2413a:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   2413c:	4623      	mov	r3, r4
   2413e:	4a08      	ldr	r2, [pc, #32]	; (24160 <onoff_start+0x34>)
   24140:	4808      	ldr	r0, [pc, #32]	; (24164 <onoff_start+0x38>)
   24142:	f01a fa71 	bl	3e628 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   24146:	1e01      	subs	r1, r0, #0
   24148:	da05      	bge.n	24156 <onoff_start+0x2a>
		notify(mgr, err);
   2414a:	4628      	mov	r0, r5
   2414c:	4623      	mov	r3, r4
	}
}
   2414e:	b003      	add	sp, #12
   24150:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   24154:	4718      	bx	r3
}
   24156:	b003      	add	sp, #12
   24158:	bd30      	pop	{r4, r5, pc}
   2415a:	bf00      	nop
   2415c:	200191f8 	.word	0x200191f8
   24160:	0003e695 	.word	0x0003e695
   24164:	000422f4 	.word	0x000422f4

00024168 <get_status>:
{
   24168:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   2416a:	b2cc      	uxtb	r4, r1
   2416c:	2c01      	cmp	r4, #1
{
   2416e:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   24170:	d908      	bls.n	24184 <get_status+0x1c>
   24172:	4908      	ldr	r1, [pc, #32]	; (24194 <get_status+0x2c>)
   24174:	4808      	ldr	r0, [pc, #32]	; (24198 <get_status+0x30>)
   24176:	2279      	movs	r2, #121	; 0x79
   24178:	f018 fc60 	bl	3ca3c <assert_print>
   2417c:	2179      	movs	r1, #121	; 0x79
   2417e:	4805      	ldr	r0, [pc, #20]	; (24194 <get_status+0x2c>)
   24180:	f018 fc55 	bl	3ca2e <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   24184:	230c      	movs	r3, #12
   24186:	6929      	ldr	r1, [r5, #16]
   24188:	fb04 1403 	mla	r4, r4, r3, r1
   2418c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
   2418e:	f000 0007 	and.w	r0, r0, #7
   24192:	bd38      	pop	{r3, r4, r5, pc}
   24194:	00044b4b 	.word	0x00044b4b
   24198:	00043ff2 	.word	0x00043ff2

0002419c <stop>:
{
   2419c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2419e:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   241a0:	2c01      	cmp	r4, #1
{
   241a2:	4605      	mov	r5, r0
   241a4:	4617      	mov	r7, r2
	struct nrf_clock_control_data *data = dev->data;
   241a6:	6906      	ldr	r6, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   241a8:	d90a      	bls.n	241c0 <stop+0x24>
   241aa:	4918      	ldr	r1, [pc, #96]	; (2420c <stop+0x70>)
   241ac:	4818      	ldr	r0, [pc, #96]	; (24210 <stop+0x74>)
   241ae:	f240 124d 	movw	r2, #333	; 0x14d
   241b2:	f018 fc43 	bl	3ca3c <assert_print>
   241b6:	f240 114d 	movw	r1, #333	; 0x14d
   241ba:	4814      	ldr	r0, [pc, #80]	; (2420c <stop+0x70>)
   241bc:	f018 fc37 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   241c0:	f04f 0320 	mov.w	r3, #32
   241c4:	f3ef 8111 	mrs	r1, BASEPRI
   241c8:	f383 8812 	msr	BASEPRI_MAX, r3
   241cc:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   241d0:	220c      	movs	r2, #12
   241d2:	fb02 6304 	mla	r3, r2, r4, r6
   241d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   241d8:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   241dc:	d001      	beq.n	241e2 <stop+0x46>
   241de:	429f      	cmp	r7, r3
   241e0:	d111      	bne.n	24206 <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   241e2:	2301      	movs	r3, #1
	int err = 0;
   241e4:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
   241e6:	fb02 6604 	mla	r6, r2, r4, r6
   241ea:	64b3      	str	r3, [r6, #72]	; 0x48
	__asm__ volatile(
   241ec:	f381 8811 	msr	BASEPRI, r1
   241f0:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   241f4:	b930      	cbnz	r0, 24204 <stop+0x68>
	get_sub_config(dev, type)->stop();
   241f6:	230c      	movs	r3, #12
   241f8:	6869      	ldr	r1, [r5, #4]
   241fa:	fb03 1404 	mla	r4, r3, r4, r1
   241fe:	6863      	ldr	r3, [r4, #4]
   24200:	4798      	blx	r3
	return 0;
   24202:	2000      	movs	r0, #0
}
   24204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
   24206:	f04f 30ff 	mov.w	r0, #4294967295
   2420a:	e7ef      	b.n	241ec <stop+0x50>
   2420c:	00044b4b 	.word	0x00044b4b
   24210:	00043ff2 	.word	0x00043ff2

00024214 <onoff_stop>:
{
   24214:	b570      	push	{r4, r5, r6, lr}
   24216:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   24218:	4906      	ldr	r1, [pc, #24]	; (24234 <onoff_stop+0x20>)
{
   2421a:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   2421c:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   2421e:	1149      	asrs	r1, r1, #5
   24220:	2240      	movs	r2, #64	; 0x40
   24222:	4805      	ldr	r0, [pc, #20]	; (24238 <onoff_stop+0x24>)
   24224:	f7ff ffba 	bl	2419c <stop>
	notify(mgr, res);
   24228:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   2422a:	4601      	mov	r1, r0
	notify(mgr, res);
   2422c:	4620      	mov	r0, r4
}
   2422e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   24232:	4718      	bx	r3
   24234:	200191f8 	.word	0x200191f8
   24238:	000422f4 	.word	0x000422f4

0002423c <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   2423c:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2423e:	2200      	movs	r2, #0
   24240:	2101      	movs	r1, #1
{
   24242:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   24244:	2005      	movs	r0, #5
   24246:	f7fe fca7 	bl	22b98 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   2424a:	480f      	ldr	r0, [pc, #60]	; (24288 <clk_init+0x4c>)
   2424c:	f00e f822 	bl	32294 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   24250:	4b0e      	ldr	r3, [pc, #56]	; (2428c <clk_init+0x50>)
   24252:	4298      	cmp	r0, r3
   24254:	d115      	bne.n	24282 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   24256:	f00e f83f 	bl	322d8 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   2425a:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   2425c:	490c      	ldr	r1, [pc, #48]	; (24290 <clk_init+0x54>)
   2425e:	4630      	mov	r0, r6
   24260:	f018 fa64 	bl	3c72c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   24264:	2800      	cmp	r0, #0
   24266:	db0b      	blt.n	24280 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   24268:	2501      	movs	r5, #1
	struct nrf_clock_control_data *data = dev->data;
   2426a:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   2426c:	4908      	ldr	r1, [pc, #32]	; (24290 <clk_init+0x54>)
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   2426e:	64b5      	str	r5, [r6, #72]	; 0x48
		err = onoff_manager_init(get_onoff_manager(dev, i),
   24270:	f104 0020 	add.w	r0, r4, #32
   24274:	f018 fa5a 	bl	3c72c <onoff_manager_init>
		if (err < 0) {
   24278:	2800      	cmp	r0, #0
   2427a:	db01      	blt.n	24280 <clk_init+0x44>
	}

	return 0;
   2427c:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   2427e:	6565      	str	r5, [r4, #84]	; 0x54
}
   24280:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   24282:	f06f 0004 	mvn.w	r0, #4
   24286:	e7fb      	b.n	24280 <clk_init+0x44>
   24288:	000242d1 	.word	0x000242d1
   2428c:	0bad0000 	.word	0x0bad0000
   24290:	00042ae0 	.word	0x00042ae0

00024294 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   24294:	b573      	push	{r0, r1, r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   24296:	230c      	movs	r3, #12
static void clkstarted_handle(const struct device *dev,
   24298:	4601      	mov	r1, r0
	sub_data->cb = NULL;
   2429a:	2600      	movs	r6, #0
	clock_control_cb_t callback = sub_data->cb;
   2429c:	434b      	muls	r3, r1
   2429e:	480a      	ldr	r0, [pc, #40]	; (242c8 <clkstarted_handle.constprop.0+0x34>)
   242a0:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   242a2:	3348      	adds	r3, #72	; 0x48
	void *user_data = sub_data->user_data;
   242a4:	e9d4 5210 	ldrd	r5, r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   242a8:	4418      	add	r0, r3
	sub_data->cb = NULL;
   242aa:	6426      	str	r6, [r4, #64]	; 0x40
	void *user_data = sub_data->user_data;
   242ac:	9201      	str	r2, [sp, #4]
	set_on_state(&sub_data->flags);
   242ae:	f01a f9a8 	bl	3e602 <set_on_state>
	if (callback) {
   242b2:	b135      	cbz	r5, 242c2 <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
   242b4:	462b      	mov	r3, r5
   242b6:	9a01      	ldr	r2, [sp, #4]
   242b8:	4804      	ldr	r0, [pc, #16]	; (242cc <clkstarted_handle.constprop.0+0x38>)
}
   242ba:	b002      	add	sp, #8
   242bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   242c0:	4718      	bx	r3
}
   242c2:	b002      	add	sp, #8
   242c4:	bd70      	pop	{r4, r5, r6, pc}
   242c6:	bf00      	nop
   242c8:	200191f8 	.word	0x200191f8
   242cc:	000422f4 	.word	0x000422f4

000242d0 <clock_event_handler>:
	switch (event) {
   242d0:	2801      	cmp	r0, #1
{
   242d2:	b508      	push	{r3, lr}
	switch (event) {
   242d4:	d006      	beq.n	242e4 <clock_event_handler+0x14>
   242d6:	2803      	cmp	r0, #3
   242d8:	d008      	beq.n	242ec <clock_event_handler+0x1c>
   242da:	b9a0      	cbnz	r0, 24306 <clock_event_handler+0x36>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   242dc:	4b0f      	ldr	r3, [pc, #60]	; (2431c <clock_event_handler+0x4c>)
   242de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   242e0:	075b      	lsls	r3, r3, #29
   242e2:	d119      	bne.n	24318 <clock_event_handler+0x48>
}
   242e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   242e8:	f7ff bfd4 	b.w	24294 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   242ec:	490c      	ldr	r1, [pc, #48]	; (24320 <clock_event_handler+0x50>)
   242ee:	f240 225e 	movw	r2, #606	; 0x25e
   242f2:	480c      	ldr	r0, [pc, #48]	; (24324 <clock_event_handler+0x54>)
   242f4:	f018 fba2 	bl	3ca3c <assert_print>
   242f8:	f240 215e 	movw	r1, #606	; 0x25e
}
   242fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
   24300:	4807      	ldr	r0, [pc, #28]	; (24320 <clock_event_handler+0x50>)
   24302:	f018 bb94 	b.w	3ca2e <assert_post_action>
   24306:	4906      	ldr	r1, [pc, #24]	; (24320 <clock_event_handler+0x50>)
   24308:	f240 2262 	movw	r2, #610	; 0x262
   2430c:	4805      	ldr	r0, [pc, #20]	; (24324 <clock_event_handler+0x54>)
   2430e:	f018 fb95 	bl	3ca3c <assert_print>
   24312:	f240 2162 	movw	r1, #610	; 0x262
   24316:	e7f1      	b.n	242fc <clock_event_handler+0x2c>
}
   24318:	bd08      	pop	{r3, pc}
   2431a:	bf00      	nop
   2431c:	200191f8 	.word	0x200191f8
   24320:	00044b4b 	.word	0x00044b4b
   24324:	00043ff2 	.word	0x00043ff2

00024328 <generic_hfclk_start>:
{
   24328:	b508      	push	{r3, lr}
	__asm__ volatile(
   2432a:	f04f 0320 	mov.w	r3, #32
   2432e:	f3ef 8111 	mrs	r1, BASEPRI
   24332:	f383 8812 	msr	BASEPRI_MAX, r3
   24336:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   2433a:	4a11      	ldr	r2, [pc, #68]	; (24380 <generic_hfclk_start+0x58>)
   2433c:	6813      	ldr	r3, [r2, #0]
   2433e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   24342:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   24346:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   24348:	d00b      	beq.n	24362 <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   2434a:	4a0e      	ldr	r2, [pc, #56]	; (24384 <generic_hfclk_start+0x5c>)
   2434c:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   24350:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   24354:	f013 0301 	ands.w	r3, r3, #1
   24358:	d003      	beq.n	24362 <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
   2435a:	480b      	ldr	r0, [pc, #44]	; (24388 <generic_hfclk_start+0x60>)
   2435c:	f01a f951 	bl	3e602 <set_on_state>
			already_started = true;
   24360:	2301      	movs	r3, #1
	__asm__ volatile(
   24362:	f381 8811 	msr	BASEPRI, r1
   24366:	f3bf 8f6f 	isb	sy
	if (already_started) {
   2436a:	b123      	cbz	r3, 24376 <generic_hfclk_start+0x4e>
}
   2436c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   24370:	2000      	movs	r0, #0
   24372:	f7ff bf8f 	b.w	24294 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   24376:	2001      	movs	r0, #1
}
   24378:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2437c:	f00d bfd0 	b.w	32320 <nrfx_clock_start>
   24380:	20019250 	.word	0x20019250
   24384:	40005000 	.word	0x40005000
   24388:	20019240 	.word	0x20019240

0002438c <api_blocking_start>:
{
   2438c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   2438e:	2200      	movs	r2, #0
   24390:	2301      	movs	r3, #1
   24392:	e9cd 2302 	strd	r2, r3, [sp, #8]
   24396:	ab04      	add	r3, sp, #16
   24398:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   2439c:	4a09      	ldr	r2, [pc, #36]	; (243c4 <api_blocking_start+0x38>)
   2439e:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   243a0:	f8cd d000 	str.w	sp, [sp]
   243a4:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   243a8:	f01a f96d 	bl	3e686 <api_start>
	if (err < 0) {
   243ac:	2800      	cmp	r0, #0
   243ae:	db05      	blt.n	243bc <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   243b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   243b4:	2300      	movs	r3, #0
   243b6:	4668      	mov	r0, sp
   243b8:	f012 fd0a 	bl	36dd0 <z_impl_k_sem_take>
}
   243bc:	b007      	add	sp, #28
   243be:	f85d fb04 	ldr.w	pc, [sp], #4
   243c2:	bf00      	nop
   243c4:	0003e6b3 	.word	0x0003e6b3

000243c8 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   243c8:	4b07      	ldr	r3, [pc, #28]	; (243e8 <generic_hfclk_stop+0x20>)
   243ca:	e8d3 2fef 	ldaex	r2, [r3]
   243ce:	f022 0102 	bic.w	r1, r2, #2
   243d2:	e8c3 1fe0 	stlex	r0, r1, [r3]
   243d6:	2800      	cmp	r0, #0
   243d8:	d1f7      	bne.n	243ca <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   243da:	07d3      	lsls	r3, r2, #31
   243dc:	d402      	bmi.n	243e4 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   243de:	2001      	movs	r0, #1
   243e0:	f00e b800 	b.w	323e4 <nrfx_clock_stop>
}
   243e4:	4770      	bx	lr
   243e6:	bf00      	nop
   243e8:	20019250 	.word	0x20019250

000243ec <z_nrf_clock_control_lf_on>:
{
   243ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   243f0:	2201      	movs	r2, #1
   243f2:	4606      	mov	r6, r0
   243f4:	4942      	ldr	r1, [pc, #264]	; (24500 <z_nrf_clock_control_lf_on+0x114>)
   243f6:	e8d1 3fef 	ldaex	r3, [r1]
   243fa:	e8c1 2fe0 	stlex	r0, r2, [r1]
   243fe:	2800      	cmp	r0, #0
   24400:	d1f9      	bne.n	243f6 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   24402:	b99b      	cbnz	r3, 2442c <z_nrf_clock_control_lf_on+0x40>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   24404:	493f      	ldr	r1, [pc, #252]	; (24504 <z_nrf_clock_control_lf_on+0x118>)
		err = onoff_request(mgr, &cli);
   24406:	4840      	ldr	r0, [pc, #256]	; (24508 <z_nrf_clock_control_lf_on+0x11c>)
   24408:	604b      	str	r3, [r1, #4]
   2440a:	60cb      	str	r3, [r1, #12]
   2440c:	608a      	str	r2, [r1, #8]
   2440e:	f7fc fde9 	bl	20fe4 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   24412:	2800      	cmp	r0, #0
   24414:	da0a      	bge.n	2442c <z_nrf_clock_control_lf_on+0x40>
   24416:	493d      	ldr	r1, [pc, #244]	; (2450c <z_nrf_clock_control_lf_on+0x120>)
   24418:	483d      	ldr	r0, [pc, #244]	; (24510 <z_nrf_clock_control_lf_on+0x124>)
   2441a:	f44f 7208 	mov.w	r2, #544	; 0x220
   2441e:	f018 fb0d 	bl	3ca3c <assert_print>
   24422:	f44f 7108 	mov.w	r1, #544	; 0x220
   24426:	4839      	ldr	r0, [pc, #228]	; (2450c <z_nrf_clock_control_lf_on+0x120>)
   24428:	f018 fb01 	bl	3ca2e <assert_post_action>
	switch (start_mode) {
   2442c:	b386      	cbz	r6, 24490 <z_nrf_clock_control_lf_on+0xa4>
   2442e:	1e73      	subs	r3, r6, #1
   24430:	2b01      	cmp	r3, #1
   24432:	d852      	bhi.n	244da <z_nrf_clock_control_lf_on+0xee>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   24434:	2e01      	cmp	r6, #1
   24436:	d106      	bne.n	24446 <z_nrf_clock_control_lf_on+0x5a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   24438:	4b36      	ldr	r3, [pc, #216]	; (24514 <z_nrf_clock_control_lf_on+0x128>)
   2443a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   2443e:	f003 0303 	and.w	r3, r3, #3
   24442:	2b02      	cmp	r3, #2
   24444:	d024      	beq.n	24490 <z_nrf_clock_control_lf_on+0xa4>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   24446:	f01c fd67 	bl	40f18 <k_is_in_isr>
   2444a:	4604      	mov	r4, r0
   2444c:	b918      	cbnz	r0, 24456 <z_nrf_clock_control_lf_on+0x6a>
	return !z_sys_post_kernel;
   2444e:	4b32      	ldr	r3, [pc, #200]	; (24518 <z_nrf_clock_control_lf_on+0x12c>)
	int key = isr_mode ? irq_lock() : 0;
   24450:	781b      	ldrb	r3, [r3, #0]
   24452:	2b00      	cmp	r3, #0
   24454:	d14e      	bne.n	244f4 <z_nrf_clock_control_lf_on+0x108>
	__asm__ volatile(
   24456:	f04f 0320 	mov.w	r3, #32
   2445a:	f3ef 8711 	mrs	r7, BASEPRI
   2445e:	f383 8812 	msr	BASEPRI_MAX, r3
   24462:	f3bf 8f6f 	isb	sy
   24466:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   24468:	4d2a      	ldr	r5, [pc, #168]	; (24514 <z_nrf_clock_control_lf_on+0x128>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2446a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 2451c <z_nrf_clock_control_lf_on+0x130>
   2446e:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   24472:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   24476:	03d2      	lsls	r2, r2, #15
   24478:	d50c      	bpl.n	24494 <z_nrf_clock_control_lf_on+0xa8>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   2447a:	f003 0303 	and.w	r3, r3, #3
   2447e:	2b02      	cmp	r3, #2
   24480:	d001      	beq.n	24486 <z_nrf_clock_control_lf_on+0x9a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   24482:	2e01      	cmp	r6, #1
   24484:	d106      	bne.n	24494 <z_nrf_clock_control_lf_on+0xa8>
	if (isr_mode) {
   24486:	b324      	cbz	r4, 244d2 <z_nrf_clock_control_lf_on+0xe6>
	__asm__ volatile(
   24488:	f387 8811 	msr	BASEPRI, r7
   2448c:	f3bf 8f6f 	isb	sy
}
   24490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   24494:	b1c4      	cbz	r4, 244c8 <z_nrf_clock_control_lf_on+0xdc>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   24496:	4638      	mov	r0, r7
   24498:	f7fe fadc 	bl	22a54 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   2449c:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   244a0:	b2db      	uxtb	r3, r3
   244a2:	2b01      	cmp	r3, #1
   244a4:	d1e3      	bne.n	2446e <z_nrf_clock_control_lf_on+0x82>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   244a6:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   244aa:	2a00      	cmp	r2, #0
   244ac:	d0df      	beq.n	2446e <z_nrf_clock_control_lf_on+0x82>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   244ae:	2200      	movs	r2, #0
   244b0:	f8c5 2104 	str.w	r2, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   244b4:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   244b8:	2202      	movs	r2, #2
   244ba:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
   244be:	2220      	movs	r2, #32
   244c0:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   244c4:	60ab      	str	r3, [r5, #8]
}
   244c6:	e7d2      	b.n	2446e <z_nrf_clock_control_lf_on+0x82>
	return z_impl_k_sleep(timeout);
   244c8:	2100      	movs	r1, #0
   244ca:	2021      	movs	r0, #33	; 0x21
   244cc:	f014 f890 	bl	385f0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   244d0:	e7e4      	b.n	2449c <z_nrf_clock_control_lf_on+0xb0>
    p_reg->INTENSET = mask;
   244d2:	2302      	movs	r3, #2
   244d4:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
}
   244d8:	e7da      	b.n	24490 <z_nrf_clock_control_lf_on+0xa4>
		__ASSERT_NO_MSG(false);
   244da:	490c      	ldr	r1, [pc, #48]	; (2450c <z_nrf_clock_control_lf_on+0x120>)
   244dc:	480c      	ldr	r0, [pc, #48]	; (24510 <z_nrf_clock_control_lf_on+0x124>)
   244de:	f240 2232 	movw	r2, #562	; 0x232
   244e2:	f018 faab 	bl	3ca3c <assert_print>
}
   244e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
   244ea:	f240 2132 	movw	r1, #562	; 0x232
   244ee:	4807      	ldr	r0, [pc, #28]	; (2450c <z_nrf_clock_control_lf_on+0x120>)
   244f0:	f018 ba9d 	b.w	3ca2e <assert_post_action>
    p_reg->INTENCLR = mask;
   244f4:	2202      	movs	r2, #2
   244f6:	4b07      	ldr	r3, [pc, #28]	; (24514 <z_nrf_clock_control_lf_on+0x128>)
	int key = isr_mode ? irq_lock() : 0;
   244f8:	4607      	mov	r7, r0
   244fa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   244fe:	e7b3      	b.n	24468 <z_nrf_clock_control_lf_on+0x7c>
   24500:	20019254 	.word	0x20019254
   24504:	200191e8 	.word	0x200191e8
   24508:	20019218 	.word	0x20019218
   2450c:	00044b4b 	.word	0x00044b4b
   24510:	00043ff2 	.word	0x00043ff2
   24514:	40005000 	.word	0x40005000
   24518:	2001d3cc 	.word	0x2001d3cc
   2451c:	e000e100 	.word	0xe000e100

00024520 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   24520:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   24522:	4808      	ldr	r0, [pc, #32]	; (24544 <uart_console_init+0x24>)
   24524:	4b08      	ldr	r3, [pc, #32]	; (24548 <uart_console_init+0x28>)
   24526:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   24528:	f01c fcd5 	bl	40ed6 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   2452c:	b138      	cbz	r0, 2453e <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
   2452e:	4807      	ldr	r0, [pc, #28]	; (2454c <uart_console_init+0x2c>)
   24530:	f7ff f98a 	bl	23848 <__stdout_hook_install>
	__printk_hook_install(console_out);
   24534:	4805      	ldr	r0, [pc, #20]	; (2454c <uart_console_init+0x2c>)
   24536:	f7fc fb33 	bl	20ba0 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   2453a:	2000      	movs	r0, #0
}
   2453c:	bd08      	pop	{r3, pc}
		return -ENODEV;
   2453e:	f06f 0012 	mvn.w	r0, #18
   24542:	e7fb      	b.n	2453c <uart_console_init+0x1c>
   24544:	0004233c 	.word	0x0004233c
   24548:	20019258 	.word	0x20019258
   2454c:	00024551 	.word	0x00024551

00024550 <console_out>:
	if ('\n' == c) {
   24550:	280a      	cmp	r0, #10
{
   24552:	b538      	push	{r3, r4, r5, lr}
   24554:	4604      	mov	r4, r0
   24556:	4d07      	ldr	r5, [pc, #28]	; (24574 <console_out+0x24>)
	if ('\n' == c) {
   24558:	d104      	bne.n	24564 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
   2455a:	6828      	ldr	r0, [r5, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   2455c:	6883      	ldr	r3, [r0, #8]
   2455e:	210d      	movs	r1, #13
   24560:	685b      	ldr	r3, [r3, #4]
   24562:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   24564:	6828      	ldr	r0, [r5, #0]
   24566:	6883      	ldr	r3, [r0, #8]
   24568:	b2e1      	uxtb	r1, r4
   2456a:	685b      	ldr	r3, [r3, #4]
   2456c:	4798      	blx	r3
}
   2456e:	4620      	mov	r0, r4
   24570:	bd38      	pop	{r3, r4, r5, pc}
   24572:	bf00      	nop
   24574:	20019258 	.word	0x20019258

00024578 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   24578:	b570      	push	{r4, r5, r6, lr}
   2457a:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   2457c:	460c      	mov	r4, r1
	return port->data;
   2457e:	6905      	ldr	r5, [r0, #16]
   24580:	b941      	cbnz	r1, 24594 <gpio_nrfx_manage_callback+0x1c>
   24582:	491e      	ldr	r1, [pc, #120]	; (245fc <gpio_nrfx_manage_callback+0x84>)
   24584:	481e      	ldr	r0, [pc, #120]	; (24600 <gpio_nrfx_manage_callback+0x88>)
   24586:	2224      	movs	r2, #36	; 0x24
   24588:	f018 fa58 	bl	3ca3c <assert_print>
   2458c:	2124      	movs	r1, #36	; 0x24
   2458e:	481b      	ldr	r0, [pc, #108]	; (245fc <gpio_nrfx_manage_callback+0x84>)
   24590:	f018 fa4d 	bl	3ca2e <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   24594:	6863      	ldr	r3, [r4, #4]
   24596:	b943      	cbnz	r3, 245aa <gpio_nrfx_manage_callback+0x32>
   24598:	4918      	ldr	r1, [pc, #96]	; (245fc <gpio_nrfx_manage_callback+0x84>)
   2459a:	4819      	ldr	r0, [pc, #100]	; (24600 <gpio_nrfx_manage_callback+0x88>)
   2459c:	2225      	movs	r2, #37	; 0x25
   2459e:	f018 fa4d 	bl	3ca3c <assert_print>
   245a2:	2125      	movs	r1, #37	; 0x25
   245a4:	4815      	ldr	r0, [pc, #84]	; (245fc <gpio_nrfx_manage_callback+0x84>)
   245a6:	f018 fa42 	bl	3ca2e <assert_post_action>
	return list->head;
   245aa:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   245ac:	b15b      	cbz	r3, 245c6 <gpio_nrfx_manage_callback+0x4e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   245ae:	2200      	movs	r2, #0
   245b0:	429c      	cmp	r4, r3
   245b2:	d112      	bne.n	245da <gpio_nrfx_manage_callback+0x62>
	return node->next;
   245b4:	6823      	ldr	r3, [r4, #0]
	return list->tail;
   245b6:	68a9      	ldr	r1, [r5, #8]
Z_GENLIST_REMOVE(slist, snode)
   245b8:	b952      	cbnz	r2, 245d0 <gpio_nrfx_manage_callback+0x58>
   245ba:	42a1      	cmp	r1, r4
	list->head = node;
   245bc:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   245be:	d100      	bne.n	245c2 <gpio_nrfx_manage_callback+0x4a>
	list->tail = node;
   245c0:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   245c2:	2300      	movs	r3, #0
   245c4:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   245c6:	b96e      	cbnz	r6, 245e4 <gpio_nrfx_manage_callback+0x6c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   245c8:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
   245ca:	bd70      	pop	{r4, r5, r6, pc}
   245cc:	460b      	mov	r3, r1
   245ce:	e7ef      	b.n	245b0 <gpio_nrfx_manage_callback+0x38>
Z_GENLIST_REMOVE(slist, snode)
   245d0:	42a1      	cmp	r1, r4
	parent->next = child;
   245d2:	6013      	str	r3, [r2, #0]
	list->tail = node;
   245d4:	bf08      	it	eq
   245d6:	60aa      	streq	r2, [r5, #8]
}
   245d8:	e7f3      	b.n	245c2 <gpio_nrfx_manage_callback+0x4a>
	return node->next;
   245da:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   245dc:	461a      	mov	r2, r3
   245de:	2900      	cmp	r1, #0
   245e0:	d1f4      	bne.n	245cc <gpio_nrfx_manage_callback+0x54>
			if (!set) {
   245e2:	b13e      	cbz	r6, 245f4 <gpio_nrfx_manage_callback+0x7c>
	parent->next = child;
   245e4:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   245e6:	68a8      	ldr	r0, [r5, #8]
	parent->next = child;
   245e8:	6023      	str	r3, [r4, #0]
	list->head = node;
   245ea:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   245ec:	2800      	cmp	r0, #0
   245ee:	d1eb      	bne.n	245c8 <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
   245f0:	60ac      	str	r4, [r5, #8]
}
   245f2:	e7ea      	b.n	245ca <gpio_nrfx_manage_callback+0x52>
				return -EINVAL;
   245f4:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   245f8:	e7e7      	b.n	245ca <gpio_nrfx_manage_callback+0x52>
   245fa:	bf00      	nop
   245fc:	00044ba8 	.word	0x00044ba8
   24600:	00043ff2 	.word	0x00043ff2

00024604 <gpio_nrfx_pin_interrupt_configure>:
{
   24604:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return port->config;
   24606:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   24608:	f001 041f 	and.w	r4, r1, #31
   2460c:	7b05      	ldrb	r5, [r0, #12]
	if (mode == GPIO_INT_MODE_DISABLED) {
   2460e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   24612:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   24616:	f04f 0500 	mov.w	r5, #0
   2461a:	d104      	bne.n	24626 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   2461c:	4620      	mov	r0, r4
   2461e:	f00e f9f7 	bl	32a10 <nrfx_gpiote_trigger_disable>
	return 0;
   24622:	2000      	movs	r0, #0
   24624:	e04b      	b.n	246be <gpio_nrfx_pin_interrupt_configure+0xba>
	if (mode == GPIO_INT_MODE_LEVEL) {
   24626:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   2462a:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   2462e:	d148      	bne.n	246c2 <gpio_nrfx_pin_interrupt_configure+0xbe>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   24630:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   24634:	bf0c      	ite	eq
   24636:	2304      	moveq	r3, #4
   24638:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   2463a:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   2463e:	6883      	ldr	r3, [r0, #8]
   24640:	fa23 f101 	lsr.w	r1, r3, r1
   24644:	07c9      	lsls	r1, r1, #31
   24646:	d448      	bmi.n	246da <gpio_nrfx_pin_interrupt_configure+0xd6>
   24648:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   2464c:	d145      	bne.n	246da <gpio_nrfx_pin_interrupt_configure+0xd6>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   2464e:	0966      	lsrs	r6, r4, #5
   24650:	bf0c      	ite	eq
   24652:	f04f 33ff 	moveq.w	r3, #4294967295
   24656:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   24658:	f004 051f 	and.w	r5, r4, #31

    return (mask & (1UL << pin_number)) ? true : false;
   2465c:	40eb      	lsrs	r3, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2465e:	07da      	lsls	r2, r3, #31
   24660:	d40a      	bmi.n	24678 <gpio_nrfx_pin_interrupt_configure+0x74>
   24662:	4926      	ldr	r1, [pc, #152]	; (246fc <gpio_nrfx_pin_interrupt_configure+0xf8>)
   24664:	4826      	ldr	r0, [pc, #152]	; (24700 <gpio_nrfx_pin_interrupt_configure+0xfc>)
   24666:	f240 2229 	movw	r2, #553	; 0x229
   2466a:	f018 f9e7 	bl	3ca3c <assert_print>
   2466e:	f240 2129 	movw	r1, #553	; 0x229
   24672:	4822      	ldr	r0, [pc, #136]	; (246fc <gpio_nrfx_pin_interrupt_configure+0xf8>)
   24674:	f018 f9db 	bl	3ca2e <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   24678:	b156      	cbz	r6, 24690 <gpio_nrfx_pin_interrupt_configure+0x8c>
            NRFX_ASSERT(0);
   2467a:	4920      	ldr	r1, [pc, #128]	; (246fc <gpio_nrfx_pin_interrupt_configure+0xf8>)
   2467c:	4820      	ldr	r0, [pc, #128]	; (24700 <gpio_nrfx_pin_interrupt_configure+0xfc>)
   2467e:	f240 222e 	movw	r2, #558	; 0x22e
   24682:	f018 f9db 	bl	3ca3c <assert_print>
   24686:	f240 212e 	movw	r1, #558	; 0x22e
   2468a:	481c      	ldr	r0, [pc, #112]	; (246fc <gpio_nrfx_pin_interrupt_configure+0xf8>)
   2468c:	f018 f9cf 	bl	3ca2e <assert_post_action>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   24690:	4b1c      	ldr	r3, [pc, #112]	; (24704 <gpio_nrfx_pin_interrupt_configure+0x100>)
   24692:	3580      	adds	r5, #128	; 0x80
   24694:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   24698:	07db      	lsls	r3, r3, #31
   2469a:	d41e      	bmi.n	246da <gpio_nrfx_pin_interrupt_configure+0xd6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   2469c:	f10d 0507 	add.w	r5, sp, #7
   246a0:	4629      	mov	r1, r5
   246a2:	4620      	mov	r0, r4
   246a4:	f00e f8e2 	bl	3286c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   246a8:	4b17      	ldr	r3, [pc, #92]	; (24708 <gpio_nrfx_pin_interrupt_configure+0x104>)
   246aa:	4298      	cmp	r0, r3
   246ac:	d114      	bne.n	246d8 <gpio_nrfx_pin_interrupt_configure+0xd4>
			err = nrfx_gpiote_channel_alloc(&ch);
   246ae:	4628      	mov	r0, r5
   246b0:	f00e f93c 	bl	3292c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   246b4:	4b15      	ldr	r3, [pc, #84]	; (2470c <gpio_nrfx_pin_interrupt_configure+0x108>)
   246b6:	4298      	cmp	r0, r3
   246b8:	d00e      	beq.n	246d8 <gpio_nrfx_pin_interrupt_configure+0xd4>
				return -ENOMEM;
   246ba:	f06f 000b 	mvn.w	r0, #11
}
   246be:	b004      	add	sp, #16
   246c0:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   246c2:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   246c6:	d005      	beq.n	246d4 <gpio_nrfx_pin_interrupt_configure+0xd0>
   246c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   246cc:	bf0c      	ite	eq
   246ce:	2302      	moveq	r3, #2
   246d0:	2301      	movne	r3, #1
   246d2:	e7b2      	b.n	2463a <gpio_nrfx_pin_interrupt_configure+0x36>
   246d4:	2303      	movs	r3, #3
   246d6:	e7b0      	b.n	2463a <gpio_nrfx_pin_interrupt_configure+0x36>
		trigger_config.p_in_channel = &ch;
   246d8:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   246da:	2300      	movs	r3, #0
   246dc:	4620      	mov	r0, r4
   246de:	4619      	mov	r1, r3
   246e0:	aa02      	add	r2, sp, #8
   246e2:	f00d ff99 	bl	32618 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   246e6:	4b09      	ldr	r3, [pc, #36]	; (2470c <gpio_nrfx_pin_interrupt_configure+0x108>)
   246e8:	4298      	cmp	r0, r3
   246ea:	d104      	bne.n	246f6 <gpio_nrfx_pin_interrupt_configure+0xf2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   246ec:	2101      	movs	r1, #1
   246ee:	4620      	mov	r0, r4
   246f0:	f00e f922 	bl	32938 <nrfx_gpiote_trigger_enable>
   246f4:	e795      	b.n	24622 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EIO;
   246f6:	f06f 0004 	mvn.w	r0, #4
   246fa:	e7e0      	b.n	246be <gpio_nrfx_pin_interrupt_configure+0xba>
   246fc:	00044bd5 	.word	0x00044bd5
   24700:	00043ff2 	.word	0x00043ff2
   24704:	40842500 	.word	0x40842500
   24708:	0bad0004 	.word	0x0bad0004
   2470c:	0bad0000 	.word	0x0bad0000

00024710 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   24710:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   24712:	f00e f8fb 	bl	3290c <nrfx_gpiote_is_init>
   24716:	4604      	mov	r4, r0
   24718:	b968      	cbnz	r0, 24736 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   2471a:	f00e f8cf 	bl	328bc <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   2471e:	4b08      	ldr	r3, [pc, #32]	; (24740 <gpio_nrfx_init+0x30>)
   24720:	4298      	cmp	r0, r3
   24722:	d10a      	bne.n	2473a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   24724:	4621      	mov	r1, r4
   24726:	4807      	ldr	r0, [pc, #28]	; (24744 <gpio_nrfx_init+0x34>)
   24728:	f00e f89a 	bl	32860 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   2472c:	4622      	mov	r2, r4
   2472e:	2105      	movs	r1, #5
   24730:	2031      	movs	r0, #49	; 0x31
   24732:	f7fe fa31 	bl	22b98 <z_arm_irq_priority_set>
		return 0;
   24736:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   24738:	bd10      	pop	{r4, pc}
		return -EIO;
   2473a:	f06f 0004 	mvn.w	r0, #4
   2473e:	e7fb      	b.n	24738 <gpio_nrfx_init+0x28>
   24740:	0bad0000 	.word	0x0bad0000
   24744:	00024749 	.word	0x00024749

00024748 <nrfx_gpio_handler>:
{
   24748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   2474c:	0943      	lsrs	r3, r0, #5
   2474e:	d122      	bne.n	24796 <nrfx_gpio_handler+0x4e>
	return list->head;
   24750:	4b12      	ldr	r3, [pc, #72]	; (2479c <nrfx_gpio_handler+0x54>)
   24752:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   24754:	b1fc      	cbz	r4, 24796 <nrfx_gpio_handler+0x4e>
	gpio_fire_callbacks(list, port, BIT(pin));
   24756:	2601      	movs	r6, #1
	return node->next;
   24758:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   2475a:	f8df 8048 	ldr.w	r8, [pc, #72]	; 247a4 <nrfx_gpio_handler+0x5c>
			__ASSERT(cb->handler, "No callback handler!");
   2475e:	4f10      	ldr	r7, [pc, #64]	; (247a0 <nrfx_gpio_handler+0x58>)
   24760:	f8df 9044 	ldr.w	r9, [pc, #68]	; 247a8 <nrfx_gpio_handler+0x60>
   24764:	4086      	lsls	r6, r0
		if (cb->pin_mask & pins) {
   24766:	68a3      	ldr	r3, [r4, #8]
   24768:	421e      	tst	r6, r3
   2476a:	d010      	beq.n	2478e <nrfx_gpio_handler+0x46>
			__ASSERT(cb->handler, "No callback handler!");
   2476c:	6863      	ldr	r3, [r4, #4]
   2476e:	b943      	cbnz	r3, 24782 <nrfx_gpio_handler+0x3a>
   24770:	4639      	mov	r1, r7
   24772:	4648      	mov	r0, r9
   24774:	2245      	movs	r2, #69	; 0x45
   24776:	f018 f961 	bl	3ca3c <assert_print>
   2477a:	2145      	movs	r1, #69	; 0x45
   2477c:	4638      	mov	r0, r7
   2477e:	f018 f956 	bl	3ca2e <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   24782:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   24786:	4621      	mov	r1, r4
   24788:	4640      	mov	r0, r8
   2478a:	4032      	ands	r2, r6
   2478c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2478e:	b115      	cbz	r5, 24796 <nrfx_gpio_handler+0x4e>
   24790:	462c      	mov	r4, r5
   24792:	682d      	ldr	r5, [r5, #0]
   24794:	e7e7      	b.n	24766 <nrfx_gpio_handler+0x1e>
}
   24796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2479a:	bf00      	nop
   2479c:	2001925c 	.word	0x2001925c
   247a0:	00044ba8 	.word	0x00044ba8
   247a4:	0004230c 	.word	0x0004230c
   247a8:	00043ff2 	.word	0x00043ff2

000247ac <gpio_nrfx_pin_configure>:
{
   247ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   247b0:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   247b2:	f001 051f 	and.w	r5, r1, #31
   247b6:	7b3b      	ldrb	r3, [r7, #12]
{
   247b8:	460e      	mov	r6, r1
	if (flags == GPIO_DISCONNECTED) {
   247ba:	4614      	mov	r4, r2
{
   247bc:	b085      	sub	sp, #20
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   247be:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   247c2:	b9ca      	cbnz	r2, 247f8 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   247c4:	a902      	add	r1, sp, #8
   247c6:	4628      	mov	r0, r5
   247c8:	f00e f850 	bl	3286c <nrfx_gpiote_channel_get>
   247cc:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   247ce:	4628      	mov	r0, r5
   247d0:	f00e f948 	bl	32a64 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   247d4:	4b49      	ldr	r3, [pc, #292]	; (248fc <gpio_nrfx_pin_configure+0x150>)
   247d6:	4298      	cmp	r0, r3
   247d8:	d004      	beq.n	247e4 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   247da:	f06f 0004 	mvn.w	r0, #4
}
   247de:	b005      	add	sp, #20
   247e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   247e4:	4284      	cmp	r4, r0
   247e6:	d105      	bne.n	247f4 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   247e8:	f89d 0008 	ldrb.w	r0, [sp, #8]
   247ec:	f00e f898 	bl	32920 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   247f0:	42a0      	cmp	r0, r4
   247f2:	d1f2      	bne.n	247da <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   247f4:	2000      	movs	r0, #0
   247f6:	e7f2      	b.n	247de <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   247f8:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   247fc:	f10d 0103 	add.w	r1, sp, #3
   24800:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   24802:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   24806:	f00e f831 	bl	3286c <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   2480a:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   2480c:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   2480e:	4649      	mov	r1, r9
   24810:	4628      	mov	r0, r5
   24812:	aa02      	add	r2, sp, #8
   24814:	f00d ff00 	bl	32618 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   24818:	4b38      	ldr	r3, [pc, #224]	; (248fc <gpio_nrfx_pin_configure+0x150>)
   2481a:	4298      	cmp	r0, r3
   2481c:	d002      	beq.n	24824 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   2481e:	f06f 0015 	mvn.w	r0, #21
   24822:	e7dc      	b.n	247de <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   24824:	4580      	cmp	r8, r0
   24826:	d103      	bne.n	24830 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   24828:	f89d 0003 	ldrb.w	r0, [sp, #3]
   2482c:	f00e f878 	bl	32920 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   24830:	03a3      	lsls	r3, r4, #14
   24832:	d54f      	bpl.n	248d4 <gpio_nrfx_pin_configure+0x128>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   24834:	f240 6306 	movw	r3, #1542	; 0x606
   24838:	f240 2206 	movw	r2, #518	; 0x206
   2483c:	4023      	ands	r3, r4
   2483e:	4293      	cmp	r3, r2
   24840:	d03a      	beq.n	248b8 <gpio_nrfx_pin_configure+0x10c>
   24842:	d80c      	bhi.n	2485e <gpio_nrfx_pin_configure+0xb2>
   24844:	2b06      	cmp	r3, #6
   24846:	d015      	beq.n	24874 <gpio_nrfx_pin_configure+0xc8>
   24848:	d804      	bhi.n	24854 <gpio_nrfx_pin_configure+0xa8>
   2484a:	b19b      	cbz	r3, 24874 <gpio_nrfx_pin_configure+0xc8>
   2484c:	2b02      	cmp	r3, #2
   2484e:	d1e6      	bne.n	2481e <gpio_nrfx_pin_configure+0x72>
   24850:	2304      	movs	r3, #4
   24852:	e00f      	b.n	24874 <gpio_nrfx_pin_configure+0xc8>
   24854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   24858:	d1e1      	bne.n	2481e <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   2485a:	2301      	movs	r3, #1
   2485c:	e00a      	b.n	24874 <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   2485e:	f240 4202 	movw	r2, #1026	; 0x402
   24862:	4293      	cmp	r3, r2
   24864:	d02a      	beq.n	248bc <gpio_nrfx_pin_configure+0x110>
   24866:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
   2486a:	d029      	beq.n	248c0 <gpio_nrfx_pin_configure+0x114>
   2486c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   24870:	d1d5      	bne.n	2481e <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   24872:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   24874:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   24878:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   2487c:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   24880:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   24882:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   24886:	bf4c      	ite	mi
   24888:	2303      	movmi	r3, #3
		return NRF_GPIO_PIN_PULLDOWN;
   2488a:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   2488e:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   24890:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   24894:	d516      	bpl.n	248c4 <gpio_nrfx_pin_configure+0x118>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   24896:	2101      	movs	r1, #1
   24898:	687b      	ldr	r3, [r7, #4]
   2489a:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   2489e:	609e      	str	r6, [r3, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   248a0:	2200      	movs	r2, #0
   248a2:	4628      	mov	r0, r5
   248a4:	a901      	add	r1, sp, #4
   248a6:	f00d ff63 	bl	32770 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   248aa:	4b14      	ldr	r3, [pc, #80]	; (248fc <gpio_nrfx_pin_configure+0x150>)
   248ac:	4298      	cmp	r0, r3
   248ae:	bf14      	ite	ne
   248b0:	f06f 0015 	mvnne.w	r0, #21
   248b4:	2000      	moveq	r0, #0
   248b6:	e792      	b.n	247de <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   248b8:	2307      	movs	r3, #7
   248ba:	e7db      	b.n	24874 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
   248bc:	2305      	movs	r3, #5
   248be:	e7d9      	b.n	24874 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
   248c0:	2303      	movs	r3, #3
   248c2:	e7d7      	b.n	24874 <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   248c4:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   248c6:	bf41      	itttt	mi
   248c8:	2101      	movmi	r1, #1
   248ca:	687b      	ldrmi	r3, [r7, #4]
   248cc:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   248d0:	60de      	strmi	r6, [r3, #12]
}
   248d2:	e7e5      	b.n	248a0 <gpio_nrfx_pin_configure+0xf4>
	if (flags & GPIO_PULL_UP) {
   248d4:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   248d6:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   248da:	bf4c      	ite	mi
   248dc:	2403      	movmi	r4, #3
   248de:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   248e2:	461a      	mov	r2, r3
   248e4:	4628      	mov	r0, r5
   248e6:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   248e8:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   248ec:	f00d fe94 	bl	32618 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   248f0:	4b02      	ldr	r3, [pc, #8]	; (248fc <gpio_nrfx_pin_configure+0x150>)
   248f2:	4298      	cmp	r0, r3
   248f4:	f43f af7e 	beq.w	247f4 <gpio_nrfx_pin_configure+0x48>
   248f8:	e791      	b.n	2481e <gpio_nrfx_pin_configure+0x72>
   248fa:	bf00      	nop
   248fc:	0bad0000 	.word	0x0bad0000

00024900 <i2c_nrfx_twim_recover_bus>:

	return 0;
}

static int i2c_nrfx_twim_recover_bus(const struct device *dev)
{
   24900:	b508      	push	{r3, lr}
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   24902:	6903      	ldr	r3, [r0, #16]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   24904:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
   24908:	f00e ff40 	bl	3378c <nrfx_twi_twim_bus_recover>

	nrfx_err_t err = nrfx_twim_bus_recover(dev_data->twim_config.scl,
					       dev_data->twim_config.sda);

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   2490c:	4b03      	ldr	r3, [pc, #12]	; (2491c <i2c_nrfx_twim_recover_bus+0x1c>)
   2490e:	4298      	cmp	r0, r3
}
   24910:	bf14      	ite	ne
   24912:	f06f 000f 	mvnne.w	r0, #15
   24916:	2000      	moveq	r0, #0
   24918:	bd08      	pop	{r3, pc}
   2491a:	bf00      	nop
   2491c:	0bad0000 	.word	0x0bad0000

00024920 <init_twim>:
{
   24920:	b538      	push	{r3, r4, r5, lr}
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   24922:	6905      	ldr	r5, [r0, #16]
{
   24924:	4604      	mov	r4, r0
	nrfx_err_t result = nrfx_twim_init(&dev_config->twim,
   24926:	462b      	mov	r3, r5
   24928:	4a0a      	ldr	r2, [pc, #40]	; (24954 <init_twim+0x34>)
   2492a:	6840      	ldr	r0, [r0, #4]
   2492c:	f105 0130 	add.w	r1, r5, #48	; 0x30
   24930:	f00e fb24 	bl	32f7c <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
   24934:	4b08      	ldr	r3, [pc, #32]	; (24958 <init_twim+0x38>)
   24936:	4298      	cmp	r0, r3
   24938:	d007      	beq.n	2494a <init_twim+0x2a>
		LOG_ERR("Failed to initialize device: %s", dev->name);
   2493a:	4808      	ldr	r0, [pc, #32]	; (2495c <init_twim+0x3c>)
   2493c:	2145      	movs	r1, #69	; 0x45
   2493e:	6822      	ldr	r2, [r4, #0]
   24940:	f018 f8b6 	bl	3cab0 <z_log_minimal_printk>
   24944:	f06f 0004 	mvn.w	r0, #4
}
   24948:	bd38      	pop	{r3, r4, r5, pc}
	dev_data->twim_initialized = true;
   2494a:	2301      	movs	r3, #1
	return 0;
   2494c:	2000      	movs	r0, #0
	dev_data->twim_initialized = true;
   2494e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
	return 0;
   24952:	e7f9      	b.n	24948 <init_twim+0x28>
   24954:	000249bd 	.word	0x000249bd
   24958:	0bad0000 	.word	0x0bad0000
   2495c:	00044c13 	.word	0x00044c13

00024960 <i2c_nrfx_twim_configure>:
{
   24960:	b538      	push	{r3, r4, r5, lr}
	if (I2C_ADDR_10_BITS & i2c_config) {
   24962:	07cb      	lsls	r3, r1, #31
{
   24964:	4604      	mov	r4, r0
	if (I2C_ADDR_10_BITS & i2c_config) {
   24966:	d409      	bmi.n	2497c <i2c_nrfx_twim_configure+0x1c>
	switch (I2C_SPEED_GET(i2c_config)) {
   24968:	f3c1 0142 	ubfx	r1, r1, #1, #3
   2496c:	2901      	cmp	r1, #1
   2496e:	d008      	beq.n	24982 <i2c_nrfx_twim_configure+0x22>
   24970:	2902      	cmp	r1, #2
   24972:	d01b      	beq.n	249ac <i2c_nrfx_twim_configure+0x4c>
		LOG_ERR("unsupported speed");
   24974:	2145      	movs	r1, #69	; 0x45
   24976:	4810      	ldr	r0, [pc, #64]	; (249b8 <i2c_nrfx_twim_configure+0x58>)
   24978:	f018 f89a 	bl	3cab0 <z_log_minimal_printk>
		return -EINVAL;
   2497c:	f06f 0015 	mvn.w	r0, #21
}
   24980:	bd38      	pop	{r3, r4, r5, pc}
		frequency = NRF_TWIM_FREQ_100K;
   24982:	f04f 73cc 	mov.w	r3, #26738688	; 0x1980000
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   24986:	6925      	ldr	r5, [r4, #16]
	if (frequency != dev_data->twim_config.frequency) {
   24988:	6baa      	ldr	r2, [r5, #56]	; 0x38
   2498a:	4293      	cmp	r3, r2
   2498c:	d011      	beq.n	249b2 <i2c_nrfx_twim_configure+0x52>
		dev_data->twim_config.frequency = frequency;
   2498e:	63ab      	str	r3, [r5, #56]	; 0x38
	if (dev_data->twim_initialized) {
   24990:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   24994:	b12b      	cbz	r3, 249a2 <i2c_nrfx_twim_configure+0x42>
		nrfx_twim_uninit(&dev_config->twim);
   24996:	6860      	ldr	r0, [r4, #4]
   24998:	f00e fbbc 	bl	33114 <nrfx_twim_uninit>
		dev_data->twim_initialized = false;
   2499c:	2300      	movs	r3, #0
   2499e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
		return init_twim(dev);
   249a2:	4620      	mov	r0, r4
}
   249a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return init_twim(dev);
   249a8:	f7ff bfba 	b.w	24920 <init_twim>
	switch (I2C_SPEED_GET(i2c_config)) {
   249ac:	f04f 63c8 	mov.w	r3, #104857600	; 0x6400000
   249b0:	e7e9      	b.n	24986 <i2c_nrfx_twim_configure+0x26>
	return 0;
   249b2:	2000      	movs	r0, #0
   249b4:	e7e4      	b.n	24980 <i2c_nrfx_twim_configure+0x20>
   249b6:	bf00      	nop
   249b8:	00044c38 	.word	0x00044c38

000249bc <event_handler>:
	switch (p_event->type) {
   249bc:	7803      	ldrb	r3, [r0, #0]
   249be:	2b01      	cmp	r3, #1
   249c0:	d008      	beq.n	249d4 <event_handler+0x18>
   249c2:	2b02      	cmp	r3, #2
   249c4:	d008      	beq.n	249d8 <event_handler+0x1c>
   249c6:	b94b      	cbnz	r3, 249dc <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   249c8:	4b05      	ldr	r3, [pc, #20]	; (249e0 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   249ca:	644b      	str	r3, [r1, #68]	; 0x44
	z_impl_k_sem_give(sem);
   249cc:	f101 0018 	add.w	r0, r1, #24
   249d0:	f012 b9c2 	b.w	36d58 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   249d4:	4b03      	ldr	r3, [pc, #12]	; (249e4 <event_handler+0x28>)
   249d6:	e7f8      	b.n	249ca <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   249d8:	4b03      	ldr	r3, [pc, #12]	; (249e8 <event_handler+0x2c>)
   249da:	e7f6      	b.n	249ca <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   249dc:	4b03      	ldr	r3, [pc, #12]	; (249ec <event_handler+0x30>)
   249de:	e7f4      	b.n	249ca <event_handler+0xe>
   249e0:	0bad0000 	.word	0x0bad0000
   249e4:	0bae0001 	.word	0x0bae0001
   249e8:	0bae0002 	.word	0x0bae0002
   249ec:	0bad0001 	.word	0x0bad0001

000249f0 <i2c_nrfx_twim_transfer>:
{
   249f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   249f4:	461d      	mov	r5, r3
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   249f6:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   249fa:	b08d      	sub	sp, #52	; 0x34
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   249fc:	6906      	ldr	r6, [r0, #16]
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   249fe:	f8b8 3008 	ldrh.w	r3, [r8, #8]
{
   24a02:	9205      	str	r2, [sp, #20]
   24a04:	4607      	mov	r7, r0
   24a06:	460c      	mov	r4, r1
	nrfx_twim_xfer_desc_t cur_xfer = {
   24a08:	2214      	movs	r2, #20
   24a0a:	2100      	movs	r1, #0
   24a0c:	a807      	add	r0, sp, #28
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   24a0e:	9304      	str	r3, [sp, #16]
	uint8_t *msg_buf = dev_data->msg_buf;
   24a10:	f8d6 a048 	ldr.w	sl, [r6, #72]	; 0x48
	nrfx_twim_xfer_desc_t cur_xfer = {
   24a14:	f01c fce6 	bl	413e4 <memset>
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
   24a18:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
	nrfx_twim_xfer_desc_t cur_xfer = {
   24a1c:	f88d 501d 	strb.w	r5, [sp, #29]
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
   24a20:	b1c3      	cbz	r3, 24a54 <i2c_nrfx_twim_transfer+0x64>
	return z_impl_k_sem_take(sem, timeout);
   24a22:	f04f 32ff 	mov.w	r2, #4294967295
   24a26:	f04f 33ff 	mov.w	r3, #4294967295
   24a2a:	4630      	mov	r0, r6
   24a2c:	f012 f9d0 	bl	36dd0 <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
   24a30:	f106 0b18 	add.w	fp, r6, #24
	for (size_t i = 0; i < num_msgs; i++) {
   24a34:	f04f 0900 	mov.w	r9, #0
   24a38:	2200      	movs	r2, #0
   24a3a:	2300      	movs	r3, #0
   24a3c:	4658      	mov	r0, fp
   24a3e:	f012 f9c7 	bl	36dd0 <z_impl_k_sem_take>
	nrfx_twim_enable(&dev_config->twim);
   24a42:	4640      	mov	r0, r8
   24a44:	f00e fb0a 	bl	3305c <nrfx_twim_enable>
	uint16_t msg_buf_used = 0;
   24a48:	464d      	mov	r5, r9
	for (size_t i = 0; i < num_msgs; i++) {
   24a4a:	9b05      	ldr	r3, [sp, #20]
   24a4c:	4599      	cmp	r9, r3
   24a4e:	d309      	bcc.n	24a64 <i2c_nrfx_twim_transfer+0x74>
   24a50:	2400      	movs	r4, #0
   24a52:	e02e      	b.n	24ab2 <i2c_nrfx_twim_transfer+0xc2>
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
   24a54:	4638      	mov	r0, r7
   24a56:	f7ff ff63 	bl	24920 <init_twim>
   24a5a:	2800      	cmp	r0, #0
   24a5c:	dae1      	bge.n	24a22 <i2c_nrfx_twim_transfer+0x32>
		return -EIO;
   24a5e:	f06f 0404 	mvn.w	r4, #4
   24a62:	e02c      	b.n	24abe <i2c_nrfx_twim_transfer+0xce>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   24a64:	7a21      	ldrb	r1, [r4, #8]
   24a66:	070b      	lsls	r3, r1, #28
   24a68:	f100 80b7 	bmi.w	24bda <i2c_nrfx_twim_transfer+0x1ea>
				&& ((msgs[i].flags & I2C_MSG_READ)
   24a6c:	9a05      	ldr	r2, [sp, #20]
		bool concat_next = ((i + 1) < num_msgs)
   24a6e:	f109 0301 	add.w	r3, r9, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
   24a72:	4293      	cmp	r3, r2
		bool concat_next = ((i + 1) < num_msgs)
   24a74:	9302      	str	r3, [sp, #8]
				&& ((msgs[i].flags & I2C_MSG_READ)
   24a76:	d20a      	bcs.n	24a8e <i2c_nrfx_twim_transfer+0x9e>
				&& !(msgs[i].flags & I2C_MSG_STOP)
   24a78:	0788      	lsls	r0, r1, #30
   24a7a:	d408      	bmi.n	24a8e <i2c_nrfx_twim_transfer+0x9e>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
   24a7c:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
   24a7e:	ea81 0203 	eor.w	r2, r1, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
   24a82:	f002 0201 	and.w	r2, r2, #1
   24a86:	f003 0304 	and.w	r3, r3, #4
   24a8a:	4313      	orrs	r3, r2
   24a8c:	d01b      	beq.n	24ac6 <i2c_nrfx_twim_transfer+0xd6>
		if (concat_next || (msg_buf_used != 0)) {
   24a8e:	b375      	cbz	r5, 24aee <i2c_nrfx_twim_transfer+0xfe>
				&& ((msgs[i].flags & I2C_MSG_READ)
   24a90:	2300      	movs	r3, #0
   24a92:	9303      	str	r3, [sp, #12]
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
   24a94:	6863      	ldr	r3, [r4, #4]
   24a96:	9804      	ldr	r0, [sp, #16]
   24a98:	18ea      	adds	r2, r5, r3
   24a9a:	4282      	cmp	r2, r0
   24a9c:	d915      	bls.n	24aca <i2c_nrfx_twim_transfer+0xda>
				LOG_ERR("Need to use concatenation buffer and "
   24a9e:	683a      	ldr	r2, [r7, #0]
   24aa0:	9000      	str	r0, [sp, #0]
   24aa2:	9201      	str	r2, [sp, #4]
   24aa4:	2145      	movs	r1, #69	; 0x45
   24aa6:	462a      	mov	r2, r5
   24aa8:	484d      	ldr	r0, [pc, #308]	; (24be0 <i2c_nrfx_twim_transfer+0x1f0>)
   24aaa:	f018 f801 	bl	3cab0 <z_log_minimal_printk>
				ret = -ENOSPC;
   24aae:	f06f 041b 	mvn.w	r4, #27
	nrfx_twim_disable(&dev_config->twim);
   24ab2:	4640      	mov	r0, r8
   24ab4:	f00e fafa 	bl	330ac <nrfx_twim_disable>
	z_impl_k_sem_give(sem);
   24ab8:	4630      	mov	r0, r6
   24aba:	f012 f94d 	bl	36d58 <z_impl_k_sem_give>
}
   24abe:	4620      	mov	r0, r4
   24ac0:	b00d      	add	sp, #52	; 0x34
   24ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				&& ((msgs[i].flags & I2C_MSG_READ)
   24ac6:	2301      	movs	r3, #1
   24ac8:	e7e3      	b.n	24a92 <i2c_nrfx_twim_transfer+0xa2>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
   24aca:	07c9      	lsls	r1, r1, #31
   24acc:	d405      	bmi.n	24ada <i2c_nrfx_twim_transfer+0xea>
   24ace:	461a      	mov	r2, r3
   24ad0:	6821      	ldr	r1, [r4, #0]
   24ad2:	eb0a 0005 	add.w	r0, sl, r5
   24ad6:	f01c fc65 	bl	413a4 <memcpy>
			msg_buf_used += msgs[i].len;
   24ada:	6863      	ldr	r3, [r4, #4]
   24adc:	441d      	add	r5, r3
		if (concat_next) {
   24ade:	9b03      	ldr	r3, [sp, #12]
			msg_buf_used += msgs[i].len;
   24ae0:	b2ad      	uxth	r5, r5
		if (concat_next) {
   24ae2:	2b00      	cmp	r3, #0
   24ae4:	d03a      	beq.n	24b5c <i2c_nrfx_twim_transfer+0x16c>
		bool concat_next = ((i + 1) < num_msgs)
   24ae6:	f8dd 9008 	ldr.w	r9, [sp, #8]
   24aea:	340c      	adds	r4, #12
   24aec:	e7ad      	b.n	24a4a <i2c_nrfx_twim_transfer+0x5a>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   24aee:	07ca      	lsls	r2, r1, #31
   24af0:	d51d      	bpl.n	24b2e <i2c_nrfx_twim_transfer+0x13e>
			cur_xfer.p_primary_buf = msgs[i].buf;
   24af2:	2500      	movs	r5, #0
   24af4:	6823      	ldr	r3, [r4, #0]
   24af6:	930a      	str	r3, [sp, #40]	; 0x28
			cur_xfer.primary_length = msgs[i].len;
   24af8:	6863      	ldr	r3, [r4, #4]
   24afa:	9308      	str	r3, [sp, #32]
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   24afc:	7a23      	ldrb	r3, [r4, #8]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   24afe:	4640      	mov	r0, r8
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
   24b00:	f003 0201 	and.w	r2, r3, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   24b04:	f013 0f02 	tst.w	r3, #2
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   24b08:	f88d 201c 	strb.w	r2, [sp, #28]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   24b0c:	a907      	add	r1, sp, #28
   24b0e:	bf0c      	ite	eq
   24b10:	2220      	moveq	r2, #32
   24b12:	2200      	movne	r2, #0
   24b14:	f00e fb4e 	bl	331b4 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   24b18:	4b32      	ldr	r3, [pc, #200]	; (24be4 <i2c_nrfx_twim_transfer+0x1f4>)
   24b1a:	4298      	cmp	r0, r3
   24b1c:	d024      	beq.n	24b68 <i2c_nrfx_twim_transfer+0x178>
			if (res == NRFX_ERROR_BUSY) {
   24b1e:	330b      	adds	r3, #11
				ret = -EIO;
   24b20:	4298      	cmp	r0, r3
   24b22:	bf0c      	ite	eq
   24b24:	f06f 040f 	mvneq.w	r4, #15
   24b28:	f06f 0404 	mvnne.w	r4, #4
   24b2c:	e7c1      	b.n	24ab2 <i2c_nrfx_twim_transfer+0xc2>
			   !nrfx_is_in_ram(msgs[i].buf)) {
   24b2e:	6821      	ldr	r1, [r4, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   24b30:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   24b34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   24b38:	d0db      	beq.n	24af2 <i2c_nrfx_twim_transfer+0x102>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
   24b3a:	6862      	ldr	r2, [r4, #4]
   24b3c:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   24b40:	4293      	cmp	r3, r2
   24b42:	d207      	bcs.n	24b54 <i2c_nrfx_twim_transfer+0x164>
				LOG_ERR("Cannot copy flash buffer of size: %u. "
   24b44:	2145      	movs	r1, #69	; 0x45
   24b46:	683b      	ldr	r3, [r7, #0]
   24b48:	4827      	ldr	r0, [pc, #156]	; (24be8 <i2c_nrfx_twim_transfer+0x1f8>)
   24b4a:	f017 ffb1 	bl	3cab0 <z_log_minimal_printk>
				ret = -EINVAL;
   24b4e:	f06f 0415 	mvn.w	r4, #21
				break;
   24b52:	e7ae      	b.n	24ab2 <i2c_nrfx_twim_transfer+0xc2>
   24b54:	4650      	mov	r0, sl
   24b56:	f01c fc25 	bl	413a4 <memcpy>
			msg_buf_used = msgs[i].len;
   24b5a:	88a5      	ldrh	r5, [r4, #4]
		if (msg_buf_used == 0) {
   24b5c:	2d00      	cmp	r5, #0
   24b5e:	d0c8      	beq.n	24af2 <i2c_nrfx_twim_transfer+0x102>
			cur_xfer.p_primary_buf = msg_buf;
   24b60:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
			cur_xfer.primary_length = msg_buf_used;
   24b64:	9508      	str	r5, [sp, #32]
   24b66:	e7c9      	b.n	24afc <i2c_nrfx_twim_transfer+0x10c>
	return z_impl_k_sem_take(sem, timeout);
   24b68:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   24b6c:	2300      	movs	r3, #0
   24b6e:	4658      	mov	r0, fp
   24b70:	f012 f92e 	bl	36dd0 <z_impl_k_sem_take>
		if (ret != 0) {
   24b74:	b170      	cbz	r0, 24b94 <i2c_nrfx_twim_transfer+0x1a4>
			LOG_ERR("Error on I2C line occurred for message %d", i);
   24b76:	2145      	movs	r1, #69	; 0x45
   24b78:	464a      	mov	r2, r9
   24b7a:	481c      	ldr	r0, [pc, #112]	; (24bec <i2c_nrfx_twim_transfer+0x1fc>)
   24b7c:	f017 ff98 	bl	3cab0 <z_log_minimal_printk>
			nrfx_twim_disable(&dev_config->twim);
   24b80:	4640      	mov	r0, r8
   24b82:	f00e fa93 	bl	330ac <nrfx_twim_disable>
   24b86:	e9d6 010c 	ldrd	r0, r1, [r6, #48]	; 0x30
   24b8a:	f00e fdff 	bl	3378c <nrfx_twi_twim_bus_recover>
			ret = -EIO;
   24b8e:	f06f 0404 	mvn.w	r4, #4
			break;
   24b92:	e78e      	b.n	24ab2 <i2c_nrfx_twim_transfer+0xc2>
		res = dev_data->res;
   24b94:	6c72      	ldr	r2, [r6, #68]	; 0x44
		if (res != NRFX_SUCCESS) {
   24b96:	4b13      	ldr	r3, [pc, #76]	; (24be4 <i2c_nrfx_twim_transfer+0x1f4>)
   24b98:	429a      	cmp	r2, r3
   24b9a:	d005      	beq.n	24ba8 <i2c_nrfx_twim_transfer+0x1b8>
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
   24b9c:	464b      	mov	r3, r9
   24b9e:	2145      	movs	r1, #69	; 0x45
   24ba0:	4813      	ldr	r0, [pc, #76]	; (24bf0 <i2c_nrfx_twim_transfer+0x200>)
   24ba2:	f017 ff85 	bl	3cab0 <z_log_minimal_printk>
   24ba6:	e7f2      	b.n	24b8e <i2c_nrfx_twim_transfer+0x19e>
		if ((msgs[i].flags & I2C_MSG_READ)
   24ba8:	7a23      	ldrb	r3, [r4, #8]
   24baa:	07db      	lsls	r3, r3, #31
   24bac:	d401      	bmi.n	24bb2 <i2c_nrfx_twim_transfer+0x1c2>
		msg_buf_used = 0;
   24bae:	2500      	movs	r5, #0
   24bb0:	e799      	b.n	24ae6 <i2c_nrfx_twim_transfer+0xf6>
		    && cur_xfer.p_primary_buf == msg_buf) {
   24bb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   24bb4:	459a      	cmp	sl, r3
   24bb6:	d1fa      	bne.n	24bae <i2c_nrfx_twim_transfer+0x1be>
   24bb8:	46a1      	mov	r9, r4
   24bba:	e007      	b.n	24bcc <i2c_nrfx_twim_transfer+0x1dc>
				msg_buf_used -= msgs[j].len;
   24bbc:	1aa9      	subs	r1, r5, r2
   24bbe:	b28d      	uxth	r5, r1
   24bc0:	f8d9 000c 	ldr.w	r0, [r9, #12]
   24bc4:	fa1a f181 	uxtah	r1, sl, r1
   24bc8:	f01c fbec 	bl	413a4 <memcpy>
			while (msg_buf_used >= msgs[j].len) {
   24bcc:	f8d9 2004 	ldr.w	r2, [r9, #4]
   24bd0:	f1a9 090c 	sub.w	r9, r9, #12
   24bd4:	4295      	cmp	r5, r2
   24bd6:	d2f1      	bcs.n	24bbc <i2c_nrfx_twim_transfer+0x1cc>
   24bd8:	e7e9      	b.n	24bae <i2c_nrfx_twim_transfer+0x1be>
			ret = -ENOTSUP;
   24bda:	f06f 0485 	mvn.w	r4, #133	; 0x85
   24bde:	e768      	b.n	24ab2 <i2c_nrfx_twim_transfer+0xc2>
   24be0:	00044c4f 	.word	0x00044c4f
   24be4:	0bad0000 	.word	0x0bad0000
   24be8:	00044ce4 	.word	0x00044ce4
   24bec:	00044d4f 	.word	0x00044d4f
   24bf0:	00044d7e 	.word	0x00044d7e

00024bf4 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   24bf4:	4b02      	ldr	r3, [pc, #8]	; (24c00 <flash_nrf_pages_layout+0xc>)
   24bf6:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   24bf8:	2301      	movs	r3, #1
   24bfa:	6013      	str	r3, [r2, #0]
}
   24bfc:	4770      	bx	lr
   24bfe:	bf00      	nop
   24c00:	20019268 	.word	0x20019268

00024c04 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   24c04:	4800      	ldr	r0, [pc, #0]	; (24c08 <flash_nrf_get_parameters+0x4>)
   24c06:	4770      	bx	lr
   24c08:	00042b78 	.word	0x00042b78

00024c0c <flash_nrf_read>:
{
   24c0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   24c0e:	460c      	mov	r4, r1
	if (is_regular_addr_valid(addr, len)) {
   24c10:	4619      	mov	r1, r3
   24c12:	4620      	mov	r0, r4
{
   24c14:	4615      	mov	r5, r2
	if (is_regular_addr_valid(addr, len)) {
   24c16:	9301      	str	r3, [sp, #4]
   24c18:	f019 fd8e 	bl	3e738 <is_regular_addr_valid>
   24c1c:	9a01      	ldr	r2, [sp, #4]
   24c1e:	b948      	cbnz	r0, 24c34 <flash_nrf_read+0x28>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   24c20:	4613      	mov	r3, r2
   24c22:	480d      	ldr	r0, [pc, #52]	; (24c58 <flash_nrf_read+0x4c>)
   24c24:	4622      	mov	r2, r4
   24c26:	2145      	movs	r1, #69	; 0x45
   24c28:	f017 ff42 	bl	3cab0 <z_log_minimal_printk>
		return -EINVAL;
   24c2c:	f06f 0015 	mvn.w	r0, #21
}
   24c30:	b003      	add	sp, #12
   24c32:	bd30      	pop	{r4, r5, pc}
	if (!len) {
   24c34:	b16a      	cbz	r2, 24c52 <flash_nrf_read+0x46>
	if (addr < PM_APP_ADDRESS) {
   24c36:	f5b4 3fe1 	cmp.w	r4, #115200	; 0x1c200
		return soc_secure_mem_read(data, (void *)addr, len);
   24c3a:	4621      	mov	r1, r4
   24c3c:	4628      	mov	r0, r5
	if (addr < PM_APP_ADDRESS) {
   24c3e:	da04      	bge.n	24c4a <flash_nrf_read+0x3e>
}
   24c40:	b003      	add	sp, #12
   24c42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return soc_secure_mem_read(data, (void *)addr, len);
   24c46:	f017 bf19 	b.w	3ca7c <soc_secure_mem_read>
   24c4a:	f01c fbab 	bl	413a4 <memcpy>
	return 0;
   24c4e:	2000      	movs	r0, #0
   24c50:	e7ee      	b.n	24c30 <flash_nrf_read+0x24>
		return 0;
   24c52:	4610      	mov	r0, r2
   24c54:	e7ec      	b.n	24c30 <flash_nrf_read+0x24>
   24c56:	bf00      	nop
   24c58:	00044db6 	.word	0x00044db6

00024c5c <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   24c5c:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   24c5e:	2201      	movs	r2, #1
   24c60:	4806      	ldr	r0, [pc, #24]	; (24c7c <nrf_flash_init+0x20>)
   24c62:	4611      	mov	r1, r2
   24c64:	f01c f992 	bl	40f8c <z_impl_k_sem_init>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   24c68:	f01b f8fa 	bl	3fe60 <nrfx_nvmc_flash_page_count_get>
   24c6c:	4c04      	ldr	r4, [pc, #16]	; (24c80 <nrf_flash_init+0x24>)
   24c6e:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   24c70:	f01b f8f3 	bl	3fe5a <nrfx_nvmc_flash_page_size_get>
   24c74:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   24c76:	2000      	movs	r0, #0
   24c78:	bd10      	pop	{r4, pc}
   24c7a:	bf00      	nop
   24c7c:	20019270 	.word	0x20019270
   24c80:	20019268 	.word	0x20019268

00024c84 <flash_nrf_erase>:
{
   24c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24c86:	460e      	mov	r6, r1
   24c88:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   24c8a:	f01b f8e6 	bl	3fe5a <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   24c8e:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   24c90:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
   24c92:	4630      	mov	r0, r6
   24c94:	f019 fd50 	bl	3e738 <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   24c98:	4637      	mov	r7, r6
	if (is_regular_addr_valid(addr, size)) {
   24c9a:	b348      	cbz	r0, 24cf0 <flash_nrf_erase+0x6c>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   24c9c:	fbb6 f3f5 	udiv	r3, r6, r5
   24ca0:	fb05 6313 	mls	r3, r5, r3, r6
   24ca4:	b923      	cbnz	r3, 24cb0 <flash_nrf_erase+0x2c>
   24ca6:	fbb4 f3f5 	udiv	r3, r4, r5
   24caa:	fb05 4013 	mls	r0, r5, r3, r4
   24cae:	b140      	cbz	r0, 24cc2 <flash_nrf_erase+0x3e>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   24cb0:	4623      	mov	r3, r4
   24cb2:	4632      	mov	r2, r6
   24cb4:	2145      	movs	r1, #69	; 0x45
   24cb6:	4811      	ldr	r0, [pc, #68]	; (24cfc <flash_nrf_erase+0x78>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   24cb8:	f017 fefa 	bl	3cab0 <z_log_minimal_printk>
		return -EINVAL;
   24cbc:	f06f 0015 	mvn.w	r0, #21
   24cc0:	e015      	b.n	24cee <flash_nrf_erase+0x6a>
		if (!n_pages) {
   24cc2:	42a5      	cmp	r5, r4
   24cc4:	d813      	bhi.n	24cee <flash_nrf_erase+0x6a>
	return z_impl_k_sem_take(sem, timeout);
   24cc6:	f04f 32ff 	mov.w	r2, #4294967295
   24cca:	f04f 33ff 	mov.w	r3, #4294967295
   24cce:	480c      	ldr	r0, [pc, #48]	; (24d00 <flash_nrf_erase+0x7c>)
   24cd0:	f012 f87e 	bl	36dd0 <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   24cd4:	f01b f8c1 	bl	3fe5a <nrfx_nvmc_flash_page_size_get>
   24cd8:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   24cda:	4638      	mov	r0, r7
   24cdc:	f00e f8bc 	bl	32e58 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
   24ce0:	1b64      	subs	r4, r4, r5
   24ce2:	442f      	add	r7, r5
   24ce4:	d1f9      	bne.n	24cda <flash_nrf_erase+0x56>
	z_impl_k_sem_give(sem);
   24ce6:	4806      	ldr	r0, [pc, #24]	; (24d00 <flash_nrf_erase+0x7c>)
   24ce8:	f012 f836 	bl	36d58 <z_impl_k_sem_give>
	return ret;
   24cec:	4620      	mov	r0, r4
}
   24cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LOG_ERR("invalid address: 0x%08lx:%zu",
   24cf0:	4623      	mov	r3, r4
   24cf2:	4632      	mov	r2, r6
   24cf4:	2145      	movs	r1, #69	; 0x45
   24cf6:	4803      	ldr	r0, [pc, #12]	; (24d04 <flash_nrf_erase+0x80>)
   24cf8:	e7de      	b.n	24cb8 <flash_nrf_erase+0x34>
   24cfa:	bf00      	nop
   24cfc:	00044dd8 	.word	0x00044dd8
   24d00:	20019270 	.word	0x20019270
   24d04:	00044db6 	.word	0x00044db6

00024d08 <flash_nrf_write>:
{
   24d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24d0a:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
   24d0c:	4619      	mov	r1, r3
   24d0e:	4630      	mov	r0, r6
{
   24d10:	4617      	mov	r7, r2
   24d12:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   24d14:	f019 fd10 	bl	3e738 <is_regular_addr_valid>
   24d18:	b940      	cbnz	r0, 24d2c <flash_nrf_write+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   24d1a:	4623      	mov	r3, r4
   24d1c:	4632      	mov	r2, r6
   24d1e:	2145      	movs	r1, #69	; 0x45
   24d20:	4817      	ldr	r0, [pc, #92]	; (24d80 <flash_nrf_write+0x78>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   24d22:	f017 fec5 	bl	3cab0 <z_log_minimal_printk>
		return -EINVAL;
   24d26:	f06f 0015 	mvn.w	r0, #21
}
   24d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (data & 0x3) ? false : true;
   24d2c:	ea44 0506 	orr.w	r5, r4, r6
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   24d30:	f015 0503 	ands.w	r5, r5, #3
   24d34:	d004      	beq.n	24d40 <flash_nrf_write+0x38>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   24d36:	4623      	mov	r3, r4
   24d38:	4632      	mov	r2, r6
   24d3a:	2145      	movs	r1, #69	; 0x45
   24d3c:	4811      	ldr	r0, [pc, #68]	; (24d84 <flash_nrf_write+0x7c>)
   24d3e:	e7f0      	b.n	24d22 <flash_nrf_write+0x1a>
	if (!len) {
   24d40:	b1dc      	cbz	r4, 24d7a <flash_nrf_write+0x72>
	return z_impl_k_sem_take(sem, timeout);
   24d42:	f04f 32ff 	mov.w	r2, #4294967295
   24d46:	f04f 33ff 	mov.w	r3, #4294967295
   24d4a:	480f      	ldr	r0, [pc, #60]	; (24d88 <flash_nrf_write+0x80>)
   24d4c:	f012 f840 	bl	36dd0 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
   24d50:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
   24d54:	42ac      	cmp	r4, r5
   24d56:	eb05 0006 	add.w	r0, r5, r6
   24d5a:	d109      	bne.n	24d70 <flash_nrf_write+0x68>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   24d5c:	4a0b      	ldr	r2, [pc, #44]	; (24d8c <flash_nrf_write+0x84>)
   24d5e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   24d62:	07db      	lsls	r3, r3, #31
   24d64:	d5fb      	bpl.n	24d5e <flash_nrf_write+0x56>
	z_impl_k_sem_give(sem);
   24d66:	4808      	ldr	r0, [pc, #32]	; (24d88 <flash_nrf_write+0x80>)
   24d68:	f011 fff6 	bl	36d58 <z_impl_k_sem_give>
	return ret;
   24d6c:	2000      	movs	r0, #0
}
   24d6e:	e7dc      	b.n	24d2a <flash_nrf_write+0x22>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
   24d70:	5979      	ldr	r1, [r7, r5]
   24d72:	f00e f8a1 	bl	32eb8 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   24d76:	3504      	adds	r5, #4
}
   24d78:	e7ec      	b.n	24d54 <flash_nrf_write+0x4c>
		return 0;
   24d7a:	4620      	mov	r0, r4
   24d7c:	e7d5      	b.n	24d2a <flash_nrf_write+0x22>
   24d7e:	bf00      	nop
   24d80:	00044db6 	.word	0x00044db6
   24d84:	00044dfc 	.word	0x00044dfc
   24d88:	20019270 	.word	0x20019270
   24d8c:	40039000 	.word	0x40039000

00024d90 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   24d90:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   24d92:	794b      	ldrb	r3, [r1, #5]
   24d94:	2b01      	cmp	r3, #1
   24d96:	d026      	beq.n	24de6 <uarte_nrfx_configure+0x56>
   24d98:	2b03      	cmp	r3, #3
   24d9a:	d121      	bne.n	24de0 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   24d9c:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   24d9e:	798b      	ldrb	r3, [r1, #6]
   24da0:	2b03      	cmp	r3, #3
   24da2:	d11d      	bne.n	24de0 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   24da4:	79cc      	ldrb	r4, [r1, #7]
   24da6:	b10c      	cbz	r4, 24dac <uarte_nrfx_configure+0x1c>
   24da8:	2c01      	cmp	r4, #1
   24daa:	d119      	bne.n	24de0 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   24dac:	790a      	ldrb	r2, [r1, #4]
   24dae:	b112      	cbz	r2, 24db6 <uarte_nrfx_configure+0x26>
   24db0:	2a02      	cmp	r2, #2
   24db2:	d115      	bne.n	24de0 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   24db4:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   24db6:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   24db8:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   24dba:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   24dbe:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   24dc0:	d065      	beq.n	24e8e <uarte_nrfx_configure+0xfe>
   24dc2:	d82d      	bhi.n	24e20 <uarte_nrfx_configure+0x90>
   24dc4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   24dc8:	d064      	beq.n	24e94 <uarte_nrfx_configure+0x104>
   24dca:	d816      	bhi.n	24dfa <uarte_nrfx_configure+0x6a>
   24dcc:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   24dd0:	d062      	beq.n	24e98 <uarte_nrfx_configure+0x108>
   24dd2:	d80a      	bhi.n	24dea <uarte_nrfx_configure+0x5a>
   24dd4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   24dd8:	d061      	beq.n	24e9e <uarte_nrfx_configure+0x10e>
   24dda:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   24dde:	d061      	beq.n	24ea4 <uarte_nrfx_configure+0x114>
   24de0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   24de4:	e052      	b.n	24e8c <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
   24de6:	2600      	movs	r6, #0
   24de8:	e7d9      	b.n	24d9e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   24dea:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   24dee:	d05c      	beq.n	24eaa <uarte_nrfx_configure+0x11a>
   24df0:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   24df4:	d1f4      	bne.n	24de0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   24df6:	4b37      	ldr	r3, [pc, #220]	; (24ed4 <uarte_nrfx_configure+0x144>)
   24df8:	e03c      	b.n	24e74 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   24dfa:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   24dfe:	d057      	beq.n	24eb0 <uarte_nrfx_configure+0x120>
   24e00:	d807      	bhi.n	24e12 <uarte_nrfx_configure+0x82>
   24e02:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   24e06:	d055      	beq.n	24eb4 <uarte_nrfx_configure+0x124>
   24e08:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   24e0c:	d1e8      	bne.n	24de0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   24e0e:	4b32      	ldr	r3, [pc, #200]	; (24ed8 <uarte_nrfx_configure+0x148>)
   24e10:	e030      	b.n	24e74 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   24e12:	f647 2712 	movw	r7, #31250	; 0x7a12
   24e16:	42bb      	cmp	r3, r7
   24e18:	d1e2      	bne.n	24de0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   24e1a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   24e1e:	e029      	b.n	24e74 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   24e20:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   24e24:	d048      	beq.n	24eb8 <uarte_nrfx_configure+0x128>
   24e26:	d813      	bhi.n	24e50 <uarte_nrfx_configure+0xc0>
   24e28:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   24e2c:	d047      	beq.n	24ebe <uarte_nrfx_configure+0x12e>
   24e2e:	d809      	bhi.n	24e44 <uarte_nrfx_configure+0xb4>
   24e30:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   24e34:	42bb      	cmp	r3, r7
   24e36:	d044      	beq.n	24ec2 <uarte_nrfx_configure+0x132>
   24e38:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   24e3c:	d1d0      	bne.n	24de0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   24e3e:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   24e42:	e017      	b.n	24e74 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   24e44:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   24e48:	d1ca      	bne.n	24de0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   24e4a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   24e4e:	e011      	b.n	24e74 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   24e50:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   24e54:	d038      	beq.n	24ec8 <uarte_nrfx_configure+0x138>
   24e56:	d808      	bhi.n	24e6a <uarte_nrfx_configure+0xda>
   24e58:	4f20      	ldr	r7, [pc, #128]	; (24edc <uarte_nrfx_configure+0x14c>)
   24e5a:	42bb      	cmp	r3, r7
   24e5c:	d037      	beq.n	24ece <uarte_nrfx_configure+0x13e>
   24e5e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   24e62:	d1bd      	bne.n	24de0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   24e64:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   24e68:	e004      	b.n	24e74 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   24e6a:	4f1d      	ldr	r7, [pc, #116]	; (24ee0 <uarte_nrfx_configure+0x150>)
   24e6c:	42bb      	cmp	r3, r7
   24e6e:	d1b7      	bne.n	24de0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   24e70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   24e74:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->stop
#endif
#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
                    | (uint32_t)p_cfg->paritytype
#endif
                    | (uint32_t)p_cfg->hwfc;
   24e76:	4334      	orrs	r4, r6
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   24e78:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   24e7c:	4322      	orrs	r2, r4
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   24e7e:	1d03      	adds	r3, r0, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   24e80:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   24e84:	c903      	ldmia	r1, {r0, r1}
   24e86:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   24e8a:	2000      	movs	r0, #0
}
   24e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   24e8e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   24e92:	e7ef      	b.n	24e74 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   24e94:	4b13      	ldr	r3, [pc, #76]	; (24ee4 <uarte_nrfx_configure+0x154>)
   24e96:	e7ed      	b.n	24e74 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   24e98:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   24e9c:	e7ea      	b.n	24e74 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   24e9e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   24ea2:	e7e7      	b.n	24e74 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   24ea4:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   24ea8:	e7e4      	b.n	24e74 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   24eaa:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   24eae:	e7e1      	b.n	24e74 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   24eb0:	4b0d      	ldr	r3, [pc, #52]	; (24ee8 <uarte_nrfx_configure+0x158>)
   24eb2:	e7df      	b.n	24e74 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   24eb4:	4b0d      	ldr	r3, [pc, #52]	; (24eec <uarte_nrfx_configure+0x15c>)
   24eb6:	e7dd      	b.n	24e74 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   24eb8:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   24ebc:	e7da      	b.n	24e74 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   24ebe:	4b0c      	ldr	r3, [pc, #48]	; (24ef0 <uarte_nrfx_configure+0x160>)
   24ec0:	e7d8      	b.n	24e74 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   24ec2:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   24ec6:	e7d5      	b.n	24e74 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   24ec8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   24ecc:	e7d2      	b.n	24e74 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   24ece:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   24ed2:	e7cf      	b.n	24e74 <uarte_nrfx_configure+0xe4>
   24ed4:	0013b000 	.word	0x0013b000
   24ed8:	004ea000 	.word	0x004ea000
   24edc:	0003d090 	.word	0x0003d090
   24ee0:	000f4240 	.word	0x000f4240
   24ee4:	00275000 	.word	0x00275000
   24ee8:	0075c000 	.word	0x0075c000
   24eec:	003af000 	.word	0x003af000
   24ef0:	013a9000 	.word	0x013a9000

00024ef4 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   24ef4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   24ef8:	4607      	mov	r7, r0
   24efa:	2200      	movs	r2, #0
   24efc:	2101      	movs	r1, #1
   24efe:	2008      	movs	r0, #8
   24f00:	f7fd fe4a 	bl	22b98 <z_arm_irq_priority_set>
   24f04:	2008      	movs	r0, #8
   24f06:	f7fd fe15 	bl	22b34 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   24f0a:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
   24f0c:	f8d7 8004 	ldr.w	r8, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   24f10:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
   24f12:	f8d8 4000 	ldr.w	r4, [r8]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   24f16:	f8d8 900c 	ldr.w	r9, [r8, #12]
   24f1a:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   24f1e:	4648      	mov	r0, r9
	data->dev = dev;
   24f20:	6037      	str	r7, [r6, #0]
   24f22:	aa01      	add	r2, sp, #4
   24f24:	f019 fdfb 	bl	3eb1e <pinctrl_lookup_state>
	if (ret < 0) {
   24f28:	1e05      	subs	r5, r0, #0
   24f2a:	db1f      	blt.n	24f6c <uarte_0_init+0x78>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   24f2c:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   24f2e:	f8d9 2000 	ldr.w	r2, [r9]
   24f32:	7919      	ldrb	r1, [r3, #4]
   24f34:	6818      	ldr	r0, [r3, #0]
   24f36:	f019 fe48 	bl	3ebca <pinctrl_configure_pins>
	if (err < 0) {
   24f3a:	1e05      	subs	r5, r0, #0
   24f3c:	db16      	blt.n	24f6c <uarte_0_init+0x78>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   24f3e:	4638      	mov	r0, r7
   24f40:	1d31      	adds	r1, r6, #4
   24f42:	f7ff ff25 	bl	24d90 <uarte_nrfx_configure>
	if (err) {
   24f46:	4605      	mov	r5, r0
   24f48:	b980      	cbnz	r0, 24f6c <uarte_0_init+0x78>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   24f4a:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   24f4e:	0799      	lsls	r1, r3, #30
   24f50:	d52b      	bpl.n	24faa <uarte_0_init+0xb6>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   24f52:	f106 0016 	add.w	r0, r6, #22
   24f56:	f00d fa95 	bl	32484 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   24f5a:	4b29      	ldr	r3, [pc, #164]	; (25000 <uarte_0_init+0x10c>)
   24f5c:	4298      	cmp	r0, r3
   24f5e:	d009      	beq.n	24f74 <uarte_0_init+0x80>
		LOG_ERR("Failed to allocate PPI Channel");
   24f60:	2145      	movs	r1, #69	; 0x45
   24f62:	4828      	ldr	r0, [pc, #160]	; (25004 <uarte_0_init+0x110>)
   24f64:	f017 fda4 	bl	3cab0 <z_log_minimal_printk>
		return -EIO;
   24f68:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
   24f6c:	4628      	mov	r0, r5
   24f6e:	b003      	add	sp, #12
   24f70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   24f74:	7db7      	ldrb	r7, [r6, #22]
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
   24f76:	f114 0f0c 	cmn.w	r4, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   24f7a:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
   24f7e:	f8c4 71a0 	str.w	r7, [r4, #416]	; 0x1a0
    NRFX_ASSERT(tep);
   24f82:	d10a      	bne.n	24f9a <uarte_0_init+0xa6>
   24f84:	4920      	ldr	r1, [pc, #128]	; (25008 <uarte_0_init+0x114>)
   24f86:	4821      	ldr	r0, [pc, #132]	; (2500c <uarte_0_init+0x118>)
   24f88:	f240 224e 	movw	r2, #590	; 0x24e
   24f8c:	f017 fd56 	bl	3ca3c <assert_print>
   24f90:	f240 214e 	movw	r1, #590	; 0x24e
   24f94:	481c      	ldr	r0, [pc, #112]	; (25008 <uarte_0_init+0x114>)
   24f96:	f017 fd4a 	bl	3ca2e <assert_post_action>
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   24f9a:	2301      	movs	r3, #1
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   24f9c:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
   24fa0:	7db2      	ldrb	r2, [r6, #22]
   24fa2:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   24fa4:	4a1a      	ldr	r2, [pc, #104]	; (25010 <uarte_0_init+0x11c>)
   24fa6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   24faa:	2308      	movs	r3, #8
   24fac:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   24fb0:	f898 3008 	ldrb.w	r3, [r8, #8]
   24fb4:	b95b      	cbnz	r3, 24fce <uarte_0_init+0xda>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24fb6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   24fba:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   24fbe:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   24fc2:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   24fc6:	2301      	movs	r3, #1
   24fc8:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24fcc:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   24fce:	f8d8 3004 	ldr.w	r3, [r8, #4]
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   24fd2:	3614      	adds	r6, #20
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   24fd4:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   24fd6:	bf5c      	itt	pl
   24fd8:	f44f 7280 	movpl.w	r2, #256	; 0x100
   24fdc:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   24fe0:	06db      	lsls	r3, r3, #27
   24fe2:	bf44      	itt	mi
   24fe4:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   24fe8:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   24fec:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   24fee:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   24ff2:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24ff6:	2301      	movs	r3, #1
   24ff8:	60a3      	str	r3, [r4, #8]
   24ffa:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   24ffc:	e7b6      	b.n	24f6c <uarte_0_init+0x78>
   24ffe:	bf00      	nop
   25000:	0bad0000 	.word	0x0bad0000
   25004:	00044e29 	.word	0x00044e29
   25008:	00044e4d 	.word	0x00044e4d
   2500c:	00043ff2 	.word	0x00043ff2
   25010:	40017000 	.word	0x40017000

00025014 <uarte_nrfx_poll_out>:
{
   25014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25016:	4605      	mov	r5, r0
   25018:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = dev->data;
   2501a:	6906      	ldr	r6, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   2501c:	f01b ff7c 	bl	40f18 <k_is_in_isr>
   25020:	b910      	cbnz	r0, 25028 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   25022:	4b20      	ldr	r3, [pc, #128]	; (250a4 <uarte_nrfx_poll_out+0x90>)
	if (isr_mode) {
   25024:	781b      	ldrb	r3, [r3, #0]
   25026:	b983      	cbnz	r3, 2504a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   25028:	f04f 0320 	mov.w	r3, #32
   2502c:	f3ef 8411 	mrs	r4, BASEPRI
   25030:	f383 8812 	msr	BASEPRI_MAX, r3
   25034:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   25038:	6868      	ldr	r0, [r5, #4]
   2503a:	f019 fcbb 	bl	3e9b4 <is_tx_ready.isra.0>
   2503e:	bb28      	cbnz	r0, 2508c <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   25040:	f384 8811 	msr	BASEPRI, r4
   25044:	f3bf 8f6f 	isb	sy
}
   25048:	e7ee      	b.n	25028 <uarte_nrfx_poll_out+0x14>
{
   2504a:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   2504c:	6868      	ldr	r0, [r5, #4]
   2504e:	f019 fcb1 	bl	3e9b4 <is_tx_ready.isra.0>
   25052:	b970      	cbnz	r0, 25072 <uarte_nrfx_poll_out+0x5e>
   25054:	2001      	movs	r0, #1
   25056:	f01a fe86 	bl	3fd66 <nrfx_busy_wait>
   2505a:	3c01      	subs	r4, #1
   2505c:	d1f6      	bne.n	2504c <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
   2505e:	2100      	movs	r1, #0
   25060:	2021      	movs	r0, #33	; 0x21
   25062:	f013 fac5 	bl	385f0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   25066:	e7f0      	b.n	2504a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   25068:	f384 8811 	msr	BASEPRI, r4
   2506c:	f3bf 8f6f 	isb	sy
}
   25070:	e7f5      	b.n	2505e <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   25072:	f04f 0320 	mov.w	r3, #32
   25076:	f3ef 8411 	mrs	r4, BASEPRI
   2507a:	f383 8812 	msr	BASEPRI_MAX, r3
   2507e:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   25082:	6868      	ldr	r0, [r5, #4]
   25084:	f019 fc96 	bl	3e9b4 <is_tx_ready.isra.0>
   25088:	2800      	cmp	r0, #0
   2508a:	d0ed      	beq.n	25068 <uarte_nrfx_poll_out+0x54>
	data->char_out = c;
   2508c:	4631      	mov	r1, r6
   2508e:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
   25092:	2201      	movs	r2, #1
   25094:	6868      	ldr	r0, [r5, #4]
   25096:	f019 fc72 	bl	3e97e <tx_start.isra.0>
	__asm__ volatile(
   2509a:	f384 8811 	msr	BASEPRI, r4
   2509e:	f3bf 8f6f 	isb	sy
}
   250a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   250a4:	2001d3cc 	.word	0x2001d3cc

000250a8 <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   250a8:	b538      	push	{r3, r4, r5, lr}
   250aa:	460c      	mov	r4, r1
   250ac:	4615      	mov	r5, r2
	__ASSERT_NO_MSG(dev != NULL);
   250ae:	b940      	cbnz	r0, 250c2 <entropy_cc3xx_rng_get_entropy+0x1a>
   250b0:	490d      	ldr	r1, [pc, #52]	; (250e8 <entropy_cc3xx_rng_get_entropy+0x40>)
   250b2:	480e      	ldr	r0, [pc, #56]	; (250ec <entropy_cc3xx_rng_get_entropy+0x44>)
   250b4:	2220      	movs	r2, #32
   250b6:	f017 fcc1 	bl	3ca3c <assert_print>
   250ba:	2120      	movs	r1, #32
   250bc:	480a      	ldr	r0, [pc, #40]	; (250e8 <entropy_cc3xx_rng_get_entropy+0x40>)
   250be:	f017 fcb6 	bl	3ca2e <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   250c2:	b944      	cbnz	r4, 250d6 <entropy_cc3xx_rng_get_entropy+0x2e>
   250c4:	4908      	ldr	r1, [pc, #32]	; (250e8 <entropy_cc3xx_rng_get_entropy+0x40>)
   250c6:	4809      	ldr	r0, [pc, #36]	; (250ec <entropy_cc3xx_rng_get_entropy+0x44>)
   250c8:	2221      	movs	r2, #33	; 0x21
   250ca:	f017 fcb7 	bl	3ca3c <assert_print>
   250ce:	2121      	movs	r1, #33	; 0x21
   250d0:	4805      	ldr	r0, [pc, #20]	; (250e8 <entropy_cc3xx_rng_get_entropy+0x40>)
   250d2:	f017 fcac 	bl	3ca2e <assert_post_action>
	int err = EINVAL;

#if defined(CONFIG_BUILD_WITH_TFM)
	psa_status_t status = PSA_ERROR_GENERIC_ERROR;

	status = psa_generate_random(buffer, length);
   250d6:	4629      	mov	r1, r5
   250d8:	4620      	mov	r0, r4
   250da:	f014 fc29 	bl	39930 <psa_generate_random>
	int err = EINVAL;
   250de:	2800      	cmp	r0, #0
		err = 0;
	}

	return err;
#endif /* defined(CONFIG_BUILD_WITH_TFM) */
}
   250e0:	bf18      	it	ne
   250e2:	2016      	movne	r0, #22
   250e4:	bd38      	pop	{r3, r4, r5, pc}
   250e6:	bf00      	nop
   250e8:	00044e9c 	.word	0x00044e9c
   250ec:	00043ff2 	.word	0x00043ff2

000250f0 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   250f0:	2301      	movs	r3, #1
   250f2:	4083      	lsls	r3, r0
{
   250f4:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   250f6:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   250f8:	4a0c      	ldr	r2, [pc, #48]	; (2512c <compare_int_lock+0x3c>)
   250fa:	e8d2 1fef 	ldaex	r1, [r2]
   250fe:	ea01 0c04 	and.w	ip, r1, r4
   25102:	e8c2 cfee 	stlex	lr, ip, [r2]
   25106:	f1be 0f00 	cmp.w	lr, #0
   2510a:	d1f6      	bne.n	250fa <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   2510c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   25110:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   25114:	4a06      	ldr	r2, [pc, #24]	; (25130 <compare_int_lock+0x40>)
   25116:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
   2511a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2511e:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   25122:	420b      	tst	r3, r1
}
   25124:	bf14      	ite	ne
   25126:	2001      	movne	r0, #1
   25128:	2000      	moveq	r0, #0
   2512a:	bd10      	pop	{r4, pc}
   2512c:	2001928c 	.word	0x2001928c
   25130:	40015000 	.word	0x40015000

00025134 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   25134:	4919      	ldr	r1, [pc, #100]	; (2519c <sys_clock_timeout_handler+0x68>)
{
   25136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25138:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   2513a:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   2513e:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   25140:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   25144:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   25148:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   2514a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   2514e:	d222      	bcs.n	25196 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   25150:	4b13      	ldr	r3, [pc, #76]	; (251a0 <sys_clock_timeout_handler+0x6c>)
   25152:	681b      	ldr	r3, [r3, #0]
   25154:	0a1a      	lsrs	r2, r3, #8
   25156:	061b      	lsls	r3, r3, #24
   25158:	195e      	adds	r6, r3, r5
   2515a:	4b12      	ldr	r3, [pc, #72]	; (251a4 <sys_clock_timeout_handler+0x70>)
   2515c:	f142 0700 	adc.w	r7, r2, #0
   25160:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
   25164:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   25166:	f013 fd89 	bl	38c7c <sys_clock_announce>
    return p_reg->CC[ch];
   2516a:	00a3      	lsls	r3, r4, #2
   2516c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   25170:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   25174:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   25178:	42aa      	cmp	r2, r5
   2517a:	d10b      	bne.n	25194 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   2517c:	b91e      	cbnz	r6, 25186 <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
   2517e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   25182:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   25186:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   2518a:	4b07      	ldr	r3, [pc, #28]	; (251a8 <sys_clock_timeout_handler+0x74>)
   2518c:	fa00 f404 	lsl.w	r4, r0, r4
   25190:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   25194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
   25196:	2600      	movs	r6, #0
   25198:	e7e5      	b.n	25166 <sys_clock_timeout_handler+0x32>
   2519a:	bf00      	nop
   2519c:	200153e8 	.word	0x200153e8
   251a0:	20019290 	.word	0x20019290
   251a4:	200153d0 	.word	0x200153d0
   251a8:	40015000 	.word	0x40015000

000251ac <compare_int_unlock>:
	if (key) {
   251ac:	b1e1      	cbz	r1, 251e8 <compare_int_unlock+0x3c>
		atomic_or(&int_mask, BIT(chan));
   251ae:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   251b0:	4a0e      	ldr	r2, [pc, #56]	; (251ec <compare_int_unlock+0x40>)
   251b2:	4083      	lsls	r3, r0
   251b4:	e8d2 1fef 	ldaex	r1, [r2]
   251b8:	4319      	orrs	r1, r3
   251ba:	e8c2 1fec 	stlex	ip, r1, [r2]
   251be:	f1bc 0f00 	cmp.w	ip, #0
   251c2:	d1f7      	bne.n	251b4 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   251c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   251c8:	4a09      	ldr	r2, [pc, #36]	; (251f0 <compare_int_unlock+0x44>)
   251ca:	4083      	lsls	r3, r0
   251cc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   251d0:	4b08      	ldr	r3, [pc, #32]	; (251f4 <compare_int_unlock+0x48>)
   251d2:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   251d6:	fa23 f000 	lsr.w	r0, r3, r0
   251da:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   251dc:	bf42      	ittt	mi
   251de:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   251e2:	4b05      	ldrmi	r3, [pc, #20]	; (251f8 <compare_int_unlock+0x4c>)
   251e4:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   251e8:	4770      	bx	lr
   251ea:	bf00      	nop
   251ec:	2001928c 	.word	0x2001928c
   251f0:	40015000 	.word	0x40015000
   251f4:	20019288 	.word	0x20019288
   251f8:	e000e100 	.word	0xe000e100

000251fc <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   251fc:	4b0d      	ldr	r3, [pc, #52]	; (25234 <z_nrf_rtc_timer_read+0x38>)
   251fe:	6818      	ldr	r0, [r3, #0]
   25200:	0a01      	lsrs	r1, r0, #8
   25202:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   25204:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   25208:	4b0b      	ldr	r3, [pc, #44]	; (25238 <z_nrf_rtc_timer_read+0x3c>)
   2520a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   2520e:	1818      	adds	r0, r3, r0
   25210:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   25214:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   25218:	d20a      	bcs.n	25230 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   2521a:	4b08      	ldr	r3, [pc, #32]	; (2523c <z_nrf_rtc_timer_read+0x40>)
   2521c:	e9d3 2300 	ldrd	r2, r3, [r3]
   25220:	4290      	cmp	r0, r2
   25222:	eb71 0303 	sbcs.w	r3, r1, r3
   25226:	d203      	bcs.n	25230 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   25228:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   2522c:	f141 0100 	adc.w	r1, r1, #0
}
   25230:	4770      	bx	lr
   25232:	bf00      	nop
   25234:	20019290 	.word	0x20019290
   25238:	40015000 	.word	0x40015000
   2523c:	200153d0 	.word	0x200153d0

00025240 <compare_set>:
{
   25240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25244:	ed2d 8b02 	vpush	{d8}
   25248:	b085      	sub	sp, #20
   2524a:	4616      	mov	r6, r2
   2524c:	4698      	mov	r8, r3
   2524e:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   25250:	f7ff ff4e 	bl	250f0 <compare_int_lock>
   25254:	ee08 0a10 	vmov	s16, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   25258:	f7ff ffd0 	bl	251fc <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   2525c:	42b0      	cmp	r0, r6
   2525e:	eb71 0308 	sbcs.w	r3, r1, r8
   25262:	d279      	bcs.n	25358 <compare_set+0x118>
		if (target_time - curr_time > COUNTER_SPAN) {
   25264:	4b44      	ldr	r3, [pc, #272]	; (25378 <compare_set+0x138>)
   25266:	1a30      	subs	r0, r6, r0
   25268:	eb68 0101 	sbc.w	r1, r8, r1
   2526c:	4298      	cmp	r0, r3
   2526e:	f171 0300 	sbcs.w	r3, r1, #0
   25272:	d27e      	bcs.n	25372 <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
   25274:	4b41      	ldr	r3, [pc, #260]	; (2537c <compare_set+0x13c>)
   25276:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   2527a:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
   2527e:	45d8      	cmp	r8, fp
   25280:	bf08      	it	eq
   25282:	4556      	cmpeq	r6, sl
   25284:	d050      	beq.n	25328 <compare_set+0xe8>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   25286:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
   2528a:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   2528e:	4614      	mov	r4, r2
   25290:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   25294:	f105 0750 	add.w	r7, r5, #80	; 0x50
   25298:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
   2529c:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   2529e:	40ab      	lsls	r3, r5
   252a0:	f509 39a8 	add.w	r9, r9, #86016	; 0x15000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   252a4:	b2bf      	uxth	r7, r7
   252a6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
   252aa:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   252ac:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   252b0:	4b33      	ldr	r3, [pc, #204]	; (25380 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   252b2:	f507 37a8 	add.w	r7, r7, #86016	; 0x15000
     return p_reg->COUNTER;
   252b6:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   252ba:	1a40      	subs	r0, r0, r1
   252bc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   252c0:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   252c4:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   252c6:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   252ca:	d107      	bne.n	252dc <compare_set+0x9c>
   252cc:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
   252d0:	2013      	movs	r0, #19
   252d2:	f01b fef9 	bl	410c8 <z_impl_k_busy_wait>
   252d6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   252da:	4b29      	ldr	r3, [pc, #164]	; (25380 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   252dc:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
   252e0:	eba4 000c 	sub.w	r0, r4, ip
   252e4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   252e8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   252ec:	bf88      	it	hi
   252ee:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   252f0:	2000      	movs	r0, #0
   252f2:	6038      	str	r0, [r7, #0]
   252f4:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
   252f6:	9801      	ldr	r0, [sp, #4]
   252f8:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   252fc:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   25300:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   25304:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   25308:	4281      	cmp	r1, r0
   2530a:	d006      	beq.n	2531a <compare_set+0xda>
	return (a - b) & COUNTER_MAX;
   2530c:	1a20      	subs	r0, r4, r0
   2530e:	3802      	subs	r0, #2
   25310:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   25314:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   25318:	d81c      	bhi.n	25354 <compare_set+0x114>
	return (a - b) & COUNTER_MAX;
   2531a:	1aa4      	subs	r4, r4, r2
   2531c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   25320:	eb14 0a06 	adds.w	sl, r4, r6
   25324:	f148 0b00 	adc.w	fp, r8, #0
	return ret;
   25328:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
   2532a:	4914      	ldr	r1, [pc, #80]	; (2537c <compare_set+0x13c>)
	cc_data[chan].callback = handler;
   2532c:	9810      	ldr	r0, [sp, #64]	; 0x40
	cc_data[chan].target_time = target_time;
   2532e:	012b      	lsls	r3, r5, #4
   25330:	eb01 1205 	add.w	r2, r1, r5, lsl #4
	cc_data[chan].callback = handler;
   25334:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
   25336:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].user_context = user_data;
   2533a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2533c:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
   2533e:	4628      	mov	r0, r5
   25340:	ee18 1a10 	vmov	r1, s16
   25344:	f7ff ff32 	bl	251ac <compare_int_unlock>
}
   25348:	4620      	mov	r0, r4
   2534a:	b005      	add	sp, #20
   2534c:	ecbd 8b02 	vpop	{d8}
   25350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25354:	4620      	mov	r0, r4
   25356:	e7ae      	b.n	252b6 <compare_set+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
   25358:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2535a:	4a0a      	ldr	r2, [pc, #40]	; (25384 <compare_set+0x144>)
   2535c:	40ab      	lsls	r3, r5
   2535e:	e8d2 1fef 	ldaex	r1, [r2]
   25362:	4319      	orrs	r1, r3
   25364:	e8c2 1fe0 	stlex	r0, r1, [r2]
   25368:	2800      	cmp	r0, #0
   2536a:	d1f8      	bne.n	2535e <compare_set+0x11e>
   2536c:	46b2      	mov	sl, r6
   2536e:	46c3      	mov	fp, r8
   25370:	e7da      	b.n	25328 <compare_set+0xe8>
			return -EINVAL;
   25372:	f06f 0415 	mvn.w	r4, #21
   25376:	e7e2      	b.n	2533e <compare_set+0xfe>
   25378:	01000001 	.word	0x01000001
   2537c:	200153d8 	.word	0x200153d8
   25380:	40015000 	.word	0x40015000
   25384:	20019288 	.word	0x20019288

00025388 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   25388:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
   2538a:	2400      	movs	r4, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   2538c:	f04f 30ff 	mov.w	r0, #4294967295
   25390:	f04f 31ff 	mov.w	r1, #4294967295
   25394:	4d16      	ldr	r5, [pc, #88]	; (253f0 <sys_clock_driver_init+0x68>)
   25396:	4b17      	ldr	r3, [pc, #92]	; (253f4 <sys_clock_driver_init+0x6c>)
   25398:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   2539c:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   253a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   253a4:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   253a6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   253aa:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   253ae:	4b12      	ldr	r3, [pc, #72]	; (253f8 <sys_clock_driver_init+0x70>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   253b0:	2101      	movs	r1, #1
   253b2:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   253b6:	2015      	movs	r0, #21
   253b8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   253bc:	4622      	mov	r2, r4
   253be:	f7fd fbeb 	bl	22b98 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   253c2:	2015      	movs	r0, #21
   253c4:	f7fd fbb6 	bl	22b34 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   253c8:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   253ca:	4a0c      	ldr	r2, [pc, #48]	; (253fc <sys_clock_driver_init+0x74>)
   253cc:	60ab      	str	r3, [r5, #8]
   253ce:	602b      	str	r3, [r5, #0]
   253d0:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   253d2:	4b0b      	ldr	r3, [pc, #44]	; (25400 <sys_clock_driver_init+0x78>)
   253d4:	4a0b      	ldr	r2, [pc, #44]	; (25404 <sys_clock_driver_init+0x7c>)
   253d6:	9300      	str	r3, [sp, #0]
   253d8:	4620      	mov	r0, r4
   253da:	2300      	movs	r3, #0
   253dc:	9401      	str	r4, [sp, #4]
   253de:	f7ff ff2f 	bl	25240 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   253e2:	4630      	mov	r0, r6
   253e4:	f7ff f802 	bl	243ec <z_nrf_clock_control_lf_on>

	return 0;
}
   253e8:	4620      	mov	r0, r4
   253ea:	b002      	add	sp, #8
   253ec:	bd70      	pop	{r4, r5, r6, pc}
   253ee:	bf00      	nop
   253f0:	40015000 	.word	0x40015000
   253f4:	200153d8 	.word	0x200153d8
   253f8:	e000e100 	.word	0xe000e100
   253fc:	2001928c 	.word	0x2001928c
   25400:	00025135 	.word	0x00025135
   25404:	007fffff 	.word	0x007fffff

00025408 <rtc_nrf_isr>:
    return p_reg->INTENSET & mask;
   25408:	4b35      	ldr	r3, [pc, #212]	; (254e0 <rtc_nrf_isr+0xd8>)
{
   2540a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2540e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   25412:	0791      	lsls	r1, r2, #30
   25414:	d50b      	bpl.n	2542e <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   25416:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   2541a:	b142      	cbz	r2, 2542e <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2541c:	2200      	movs	r2, #0
   2541e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
   25422:	4a30      	ldr	r2, [pc, #192]	; (254e4 <rtc_nrf_isr+0xdc>)
   25424:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   25428:	6813      	ldr	r3, [r2, #0]
   2542a:	3301      	adds	r3, #1
   2542c:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   2542e:	f04f 0320 	mov.w	r3, #32
   25432:	f3ef 8111 	mrs	r1, BASEPRI
   25436:	f383 8812 	msr	BASEPRI_MAX, r3
   2543a:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   2543e:	4b28      	ldr	r3, [pc, #160]	; (254e0 <rtc_nrf_isr+0xd8>)
   25440:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   25444:	03d2      	lsls	r2, r2, #15
   25446:	d50d      	bpl.n	25464 <rtc_nrf_isr+0x5c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25448:	4a27      	ldr	r2, [pc, #156]	; (254e8 <rtc_nrf_isr+0xe0>)
   2544a:	e8d2 0fef 	ldaex	r0, [r2]
   2544e:	f020 0401 	bic.w	r4, r0, #1
   25452:	e8c2 4fe5 	stlex	r5, r4, [r2]
   25456:	2d00      	cmp	r5, #0
   25458:	d1f7      	bne.n	2544a <rtc_nrf_isr+0x42>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   2545a:	2800      	cmp	r0, #0
   2545c:	d136      	bne.n	254cc <rtc_nrf_isr+0xc4>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2545e:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
		if (result) {
   25462:	bb9a      	cbnz	r2, 254cc <rtc_nrf_isr+0xc4>
{
   25464:	2300      	movs	r3, #0
	__asm__ volatile(
   25466:	f381 8811 	msr	BASEPRI, r1
   2546a:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
   2546e:	b353      	cbz	r3, 254c6 <rtc_nrf_isr+0xbe>
		curr_time = z_nrf_rtc_timer_read();
   25470:	f7ff fec4 	bl	251fc <z_nrf_rtc_timer_read>
	__asm__ volatile(
   25474:	f04f 0320 	mov.w	r3, #32
   25478:	f3ef 8711 	mrs	r7, BASEPRI
   2547c:	f383 8812 	msr	BASEPRI_MAX, r3
   25480:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   25484:	4b19      	ldr	r3, [pc, #100]	; (254ec <rtc_nrf_isr+0xe4>)
   25486:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
		if (curr_time >= expire_time) {
   2548a:	42a0      	cmp	r0, r4
   2548c:	eb71 0205 	sbcs.w	r2, r1, r5
   25490:	f04f 0200 	mov.w	r2, #0
   25494:	d321      	bcc.n	254da <rtc_nrf_isr+0xd2>
			user_context = cc_data[chan].user_context;
   25496:	e9d3 1600 	ldrd	r1, r6, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   2549a:	f04f 38ff 	mov.w	r8, #4294967295
   2549e:	f04f 39ff 	mov.w	r9, #4294967295
			cc_data[chan].callback = NULL;
   254a2:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   254a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   254a8:	e9c3 8902 	strd	r8, r9, [r3, #8]
   254ac:	4b0c      	ldr	r3, [pc, #48]	; (254e0 <rtc_nrf_isr+0xd8>)
   254ae:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	__asm__ volatile(
   254b2:	f387 8811 	msr	BASEPRI, r7
   254b6:	f3bf 8f6f 	isb	sy
		if (handler) {
   254ba:	b121      	cbz	r1, 254c6 <rtc_nrf_isr+0xbe>
			handler(chan, expire_time, user_context);
   254bc:	4622      	mov	r2, r4
   254be:	462b      	mov	r3, r5
   254c0:	2000      	movs	r0, #0
   254c2:	9600      	str	r6, [sp, #0]
   254c4:	4788      	blx	r1
}
   254c6:	b003      	add	sp, #12
   254c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   254cc:	2200      	movs	r2, #0
   254ce:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
   254d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   254d6:	2301      	movs	r3, #1
}
   254d8:	e7c5      	b.n	25466 <rtc_nrf_isr+0x5e>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   254da:	4611      	mov	r1, r2
   254dc:	e7e9      	b.n	254b2 <rtc_nrf_isr+0xaa>
   254de:	bf00      	nop
   254e0:	40015000 	.word	0x40015000
   254e4:	20019290 	.word	0x20019290
   254e8:	20019288 	.word	0x20019288
   254ec:	200153d8 	.word	0x200153d8

000254f0 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   254f0:	1c43      	adds	r3, r0, #1
{
   254f2:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   254f4:	d020      	beq.n	25538 <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   254f6:	2801      	cmp	r0, #1
   254f8:	dd20      	ble.n	2553c <sys_clock_set_timeout+0x4c>
   254fa:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   254fe:	da1f      	bge.n	25540 <sys_clock_set_timeout+0x50>
   25500:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   25502:	f7ff fe7b 	bl	251fc <z_nrf_rtc_timer_read>
   25506:	4b0f      	ldr	r3, [pc, #60]	; (25544 <sys_clock_set_timeout+0x54>)
   25508:	e9d3 1300 	ldrd	r1, r3, [r3]
   2550c:	1a40      	subs	r0, r0, r1
		ticks = 0;
   2550e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   25512:	bf28      	it	cs
   25514:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   25516:	3001      	adds	r0, #1
   25518:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
   2551a:	480b      	ldr	r0, [pc, #44]	; (25548 <sys_clock_set_timeout+0x58>)
   2551c:	4282      	cmp	r2, r0
   2551e:	bf28      	it	cs
   25520:	4602      	movcs	r2, r0
   25522:	2000      	movs	r0, #0
   25524:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   25526:	4909      	ldr	r1, [pc, #36]	; (2554c <sys_clock_set_timeout+0x5c>)
   25528:	9001      	str	r0, [sp, #4]
   2552a:	9100      	str	r1, [sp, #0]
   2552c:	f143 0300 	adc.w	r3, r3, #0
   25530:	f7ff fe86 	bl	25240 <compare_set>
}
   25534:	b002      	add	sp, #8
   25536:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   25538:	4803      	ldr	r0, [pc, #12]	; (25548 <sys_clock_set_timeout+0x58>)
   2553a:	e7e1      	b.n	25500 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   2553c:	2400      	movs	r4, #0
   2553e:	e7e0      	b.n	25502 <sys_clock_set_timeout+0x12>
   25540:	4c01      	ldr	r4, [pc, #4]	; (25548 <sys_clock_set_timeout+0x58>)
   25542:	e7de      	b.n	25502 <sys_clock_set_timeout+0x12>
   25544:	200153e8 	.word	0x200153e8
   25548:	007fffff 	.word	0x007fffff
   2554c:	00025135 	.word	0x00025135

00025550 <sys_clock_elapsed>:
{
   25550:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   25552:	f7ff fe53 	bl	251fc <z_nrf_rtc_timer_read>
   25556:	4b02      	ldr	r3, [pc, #8]	; (25560 <sys_clock_elapsed+0x10>)
   25558:	681b      	ldr	r3, [r3, #0]
}
   2555a:	1ac0      	subs	r0, r0, r3
   2555c:	bd08      	pop	{r3, pc}
   2555e:	bf00      	nop
   25560:	200153e8 	.word	0x200153e8

00025564 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   25564:	6803      	ldr	r3, [r0, #0]
{
   25566:	b510      	push	{r4, lr}
    switch (port)
   25568:	095a      	lsrs	r2, r3, #5
   2556a:	bf0c      	ite	eq
   2556c:	f04f 32ff 	moveq.w	r2, #4294967295
   25570:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   25572:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   25576:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2557a:	07db      	lsls	r3, r3, #31
{
   2557c:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2557e:	d40a      	bmi.n	25596 <nrf_gpio_pin_port_decode+0x32>
   25580:	490e      	ldr	r1, [pc, #56]	; (255bc <nrf_gpio_pin_port_decode+0x58>)
   25582:	480f      	ldr	r0, [pc, #60]	; (255c0 <nrf_gpio_pin_port_decode+0x5c>)
   25584:	f240 2229 	movw	r2, #553	; 0x229
   25588:	f017 fa58 	bl	3ca3c <assert_print>
   2558c:	f240 2129 	movw	r1, #553	; 0x229
   25590:	480a      	ldr	r0, [pc, #40]	; (255bc <nrf_gpio_pin_port_decode+0x58>)
   25592:	f017 fa4c 	bl	3ca2e <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   25596:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   25598:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2559c:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   2559e:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   255a0:	d00a      	beq.n	255b8 <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
   255a2:	4906      	ldr	r1, [pc, #24]	; (255bc <nrf_gpio_pin_port_decode+0x58>)
   255a4:	4806      	ldr	r0, [pc, #24]	; (255c0 <nrf_gpio_pin_port_decode+0x5c>)
   255a6:	f240 222e 	movw	r2, #558	; 0x22e
   255aa:	f017 fa47 	bl	3ca3c <assert_print>
   255ae:	f240 212e 	movw	r1, #558	; 0x22e
   255b2:	4802      	ldr	r0, [pc, #8]	; (255bc <nrf_gpio_pin_port_decode+0x58>)
   255b4:	f017 fa3b 	bl	3ca2e <assert_post_action>
}
   255b8:	4802      	ldr	r0, [pc, #8]	; (255c4 <nrf_gpio_pin_port_decode+0x60>)
   255ba:	bd10      	pop	{r4, pc}
   255bc:	00044bd5 	.word	0x00044bd5
   255c0:	00043ff2 	.word	0x00043ff2
   255c4:	40842500 	.word	0x40842500

000255c8 <nrf_modem_fault_handler>:
 */

#if defined CONFIG_NRF_MODEM_LIB_ON_FAULT_DO_NOTHING
void nrf_modem_fault_handler(struct nrf_modem_fault_info *fault_info)
{
	LOG_ERR("Modem error: 0x%x, PC: 0x%x", fault_info->reason, fault_info->program_counter);
   255c8:	e9d0 2300 	ldrd	r2, r3, [r0]
   255cc:	2145      	movs	r1, #69	; 0x45
   255ce:	4801      	ldr	r0, [pc, #4]	; (255d4 <nrf_modem_fault_handler+0xc>)
   255d0:	f017 ba6e 	b.w	3cab0 <z_log_minimal_printk>
   255d4:	00044eda 	.word	0x00044eda

000255d8 <_nrf_modem_lib_init>:
{
   255d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!first_time_init) {
   255da:	4d21      	ldr	r5, [pc, #132]	; (25660 <_nrf_modem_lib_init+0x88>)
   255dc:	4c21      	ldr	r4, [pc, #132]	; (25664 <_nrf_modem_lib_init+0x8c>)
   255de:	782b      	ldrb	r3, [r5, #0]
   255e0:	b933      	cbnz	r3, 255f0 <_nrf_modem_lib_init+0x18>
	list->tail = NULL;
   255e2:	e9c4 3300 	strd	r3, r3, [r4]
	return z_impl_k_mutex_init(mutex);
   255e6:	4820      	ldr	r0, [pc, #128]	; (25668 <_nrf_modem_lib_init+0x90>)
   255e8:	f01b fcb2 	bl	40f50 <z_impl_k_mutex_init>
		first_time_init = true;
   255ec:	2301      	movs	r3, #1
   255ee:	702b      	strb	r3, [r5, #0]
	IRQ_CONNECT(NRF_MODEM_NETWORK_IRQ, NRF_MODEM_NETWORK_IRQ_PRIORITY,
   255f0:	2200      	movs	r2, #0
   255f2:	202a      	movs	r0, #42	; 0x2a
   255f4:	4611      	mov	r1, r2
   255f6:	f7fd facf 	bl	22b98 <z_arm_irq_priority_set>
	init_ret = nrf_modem_init(&init_params, NORMAL_MODE);
   255fa:	2100      	movs	r1, #0
   255fc:	481b      	ldr	r0, [pc, #108]	; (2566c <_nrf_modem_lib_init+0x94>)
   255fe:	f010 fbb7 	bl	35d70 <nrf_modem_init>
   25602:	4f1b      	ldr	r7, [pc, #108]	; (25670 <_nrf_modem_lib_init+0x98>)
   25604:	6038      	str	r0, [r7, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   25606:	f04f 32ff 	mov.w	r2, #4294967295
   2560a:	f04f 33ff 	mov.w	r3, #4294967295
   2560e:	4816      	ldr	r0, [pc, #88]	; (25668 <_nrf_modem_lib_init+0x90>)
   25610:	f011 f950 	bl	368b4 <z_impl_k_mutex_lock>
	return list->head;
   25614:	6820      	ldr	r0, [r4, #0]
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   25616:	b1d8      	cbz	r0, 25650 <_nrf_modem_lib_init+0x78>
	return node->next;
   25618:	6804      	ldr	r4, [r0, #0]
	z_impl_k_sem_give(sem);
   2561a:	3004      	adds	r0, #4
   2561c:	f011 fb9c 	bl	36d58 <z_impl_k_sem_give>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   25620:	b1b4      	cbz	r4, 25650 <_nrf_modem_lib_init+0x78>
   25622:	4620      	mov	r0, r4
   25624:	6824      	ldr	r4, [r4, #0]
   25626:	e7f8      	b.n	2561a <_nrf_modem_lib_init+0x42>
		e->callback(init_ret, e->context);
   25628:	e9d4 3100 	ldrd	r3, r1, [r4]
   2562c:	6838      	ldr	r0, [r7, #0]
   2562e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
   25630:	3408      	adds	r4, #8
   25632:	42b4      	cmp	r4, r6
   25634:	d908      	bls.n	25648 <_nrf_modem_lib_init+0x70>
   25636:	4629      	mov	r1, r5
   25638:	480e      	ldr	r0, [pc, #56]	; (25674 <_nrf_modem_lib_init+0x9c>)
   2563a:	229b      	movs	r2, #155	; 0x9b
   2563c:	f017 f9fe 	bl	3ca3c <assert_print>
   25640:	219b      	movs	r1, #155	; 0x9b
   25642:	4628      	mov	r0, r5
   25644:	f017 f9f3 	bl	3ca2e <assert_post_action>
   25648:	42b4      	cmp	r4, r6
   2564a:	d3ed      	bcc.n	25628 <_nrf_modem_lib_init+0x50>
}
   2564c:	2000      	movs	r0, #0
   2564e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return z_impl_k_mutex_unlock(mutex);
   25650:	4805      	ldr	r0, [pc, #20]	; (25668 <_nrf_modem_lib_init+0x90>)
   25652:	f011 fa01 	bl	36a58 <z_impl_k_mutex_unlock>
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
   25656:	4c08      	ldr	r4, [pc, #32]	; (25678 <_nrf_modem_lib_init+0xa0>)
   25658:	4e08      	ldr	r6, [pc, #32]	; (2567c <_nrf_modem_lib_init+0xa4>)
   2565a:	4d09      	ldr	r5, [pc, #36]	; (25680 <_nrf_modem_lib_init+0xa8>)
   2565c:	e7e9      	b.n	25632 <_nrf_modem_lib_init+0x5a>
   2565e:	bf00      	nop
   25660:	2001a5d4 	.word	0x2001a5d4
   25664:	20019298 	.word	0x20019298
   25668:	200192a0 	.word	0x200192a0
   2566c:	00042c08 	.word	0x00042c08
   25670:	20019294 	.word	0x20019294
   25674:	00043ff2 	.word	0x00043ff2
   25678:	0004bf90 	.word	0x0004bf90
   2567c:	0004bfa8 	.word	0x0004bfa8
   25680:	00044efb 	.word	0x00044efb

00025684 <nrf_modem_lib_get_init_ret>:
}
   25684:	4b01      	ldr	r3, [pc, #4]	; (2568c <nrf_modem_lib_get_init_ret+0x8>)
   25686:	6818      	ldr	r0, [r3, #0]
   25688:	4770      	bx	lr
   2568a:	bf00      	nop
   2568c:	20019294 	.word	0x20019294

00025690 <thread_monitor_entry_get>:
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   25690:	4b10      	ldr	r3, [pc, #64]	; (256d4 <thread_monitor_entry_get+0x44>)
{
   25692:	b5f0      	push	{r4, r5, r6, r7, lr}
		entry_age = rpc_event_cnt - entry->cnt;
   25694:	681a      	ldr	r2, [r3, #0]
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   25696:	4b10      	ldr	r3, [pc, #64]	; (256d8 <thread_monitor_entry_get+0x48>)
{
   25698:	4601      	mov	r1, r0
		entry_age = rpc_event_cnt - entry->cnt;
   2569a:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   2569c:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   2569e:	4618      	mov	r0, r3
   256a0:	461f      	mov	r7, r3
		if (entry->id == id) {
   256a2:	6804      	ldr	r4, [r0, #0]
   256a4:	428c      	cmp	r4, r1
   256a6:	d011      	beq.n	256cc <thread_monitor_entry_get+0x3c>
		} else if (entry->id == 0) {
   256a8:	b18c      	cbz	r4, 256ce <thread_monitor_entry_get+0x3e>
		entry_age = rpc_event_cnt - entry->cnt;
   256aa:	6844      	ldr	r4, [r0, #4]
   256ac:	1b14      	subs	r4, r2, r4
		if (entry_age > oldest_entry_age) {
   256ae:	42b4      	cmp	r4, r6
   256b0:	bfc8      	it	gt
   256b2:	4603      	movgt	r3, r0
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   256b4:	f100 0008 	add.w	r0, r0, #8
		if (entry_age > oldest_entry_age) {
   256b8:	bfc8      	it	gt
   256ba:	4626      	movgt	r6, r4
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   256bc:	42b8      	cmp	r0, r7
   256be:	d301      	bcc.n	256c4 <thread_monitor_entry_get+0x34>
   256c0:	3d01      	subs	r5, #1
   256c2:	d1ee      	bne.n	256a2 <thread_monitor_entry_get+0x12>
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;

	return new_entry;
   256c4:	4618      	mov	r0, r3
	new_entry->cnt = rpc_event_cnt - 1;
   256c6:	3a01      	subs	r2, #1
	new_entry->id = id;
   256c8:	6019      	str	r1, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   256ca:	605a      	str	r2, [r3, #4]
}
   256cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   256ce:	4603      	mov	r3, r0
   256d0:	e7f8      	b.n	256c4 <thread_monitor_entry_get+0x34>
   256d2:	bf00      	nop
   256d4:	20019318 	.word	0x20019318
   256d8:	20019340 	.word	0x20019340

000256dc <on_init>:
	list->head = NULL;
   256dc:	2000      	movs	r0, #0
   256de:	4b05      	ldr	r3, [pc, #20]	; (256f4 <on_init+0x18>)
	list->tail = NULL;
   256e0:	e9c3 0000 	strd	r0, r0, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   256e4:	4b04      	ldr	r3, [pc, #16]	; (256f8 <on_init+0x1c>)
   256e6:	e8d3 2fef 	ldaex	r2, [r3]
   256ea:	e8c3 0fe1 	stlex	r1, r0, [r3]
   256ee:	2900      	cmp	r1, #0
   256f0:	d1f9      	bne.n	256e6 <on_init+0xa>
	 */
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	return 0;
}
   256f2:	4770      	bx	lr
   256f4:	20019338 	.word	0x20019338
   256f8:	20019318 	.word	0x20019318

000256fc <nrf_modem_os_timedwait>:
{
   256fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25700:	b088      	sub	sp, #32
   25702:	460c      	mov	r4, r1
	if (!nrf_modem_is_initialized()) {
   25704:	f01b fbe4 	bl	40ed0 <nrf_modem_is_initialized>
   25708:	4681      	mov	r9, r0
   2570a:	b920      	cbnz	r0, 25716 <nrf_modem_os_timedwait+0x1a>
		return -NRF_ESHUTDOWN;
   2570c:	f06f 006d 	mvn.w	r0, #109	; 0x6d
}
   25710:	b008      	add	sp, #32
   25712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return z_impl_k_uptime_ticks();
   25716:	f01b fcd5 	bl	410c4 <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   2571a:	6823      	ldr	r3, [r4, #0]
   2571c:	4605      	mov	r5, r0
   2571e:	2b00      	cmp	r3, #0
   25720:	460f      	mov	r7, r1
   25722:	d104      	bne.n	2572e <nrf_modem_os_timedwait+0x32>
	z_impl_k_yield();
   25724:	f012 fe56 	bl	383d4 <z_impl_k_yield>
		return -NRF_EAGAIN;
   25728:	f06f 000a 	mvn.w	r0, #10
   2572c:	e7f0      	b.n	25710 <nrf_modem_os_timedwait+0x14>
		*timeout = SYS_FOREVER_MS;
   2572e:	bfbc      	itt	lt
   25730:	f04f 33ff 	movlt.w	r3, #4294967295
   25734:	6023      	strlt	r3, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   25736:	2201      	movs	r2, #1
   25738:	2100      	movs	r1, #0
   2573a:	a802      	add	r0, sp, #8
   2573c:	f01b fc26 	bl	40f8c <z_impl_k_sem_init>
   25740:	ae01      	add	r6, sp, #4
	__asm__ volatile(
   25742:	f04f 0320 	mov.w	r3, #32
   25746:	f3ef 8a11 	mrs	sl, BASEPRI
   2574a:	f383 8812 	msr	BASEPRI_MAX, r3
   2574e:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   25752:	f012 ff7d 	bl	38650 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   25756:	f7ff ff9b 	bl	25690 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   2575a:	f8df 8120 	ldr.w	r8, [pc, #288]	; 2587c <nrf_modem_os_timedwait+0x180>
   2575e:	6843      	ldr	r3, [r0, #4]
   25760:	f8d8 2000 	ldr.w	r2, [r8]
   25764:	4293      	cmp	r3, r2
   25766:	f04f 0300 	mov.w	r3, #0
   2576a:	d107      	bne.n	2577c <nrf_modem_os_timedwait+0x80>
	parent->next = child;
   2576c:	9301      	str	r3, [sp, #4]
	return list->tail;
   2576e:	4b42      	ldr	r3, [pc, #264]	; (25878 <nrf_modem_os_timedwait+0x17c>)
   25770:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   25772:	2a00      	cmp	r2, #0
   25774:	d170      	bne.n	25858 <nrf_modem_os_timedwait+0x15c>
	list->head = node;
   25776:	e9c3 6600 	strd	r6, r6, [r3]
}
   2577a:	e001      	b.n	25780 <nrf_modem_os_timedwait+0x84>
	bool allow_to_sleep = false;
   2577c:	4699      	mov	r9, r3
	entry->cnt = rpc_event_cnt;
   2577e:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   25780:	f38a 8811 	msr	BASEPRI, sl
   25784:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   25788:	f1b9 0f00 	cmp.w	r9, #0
   2578c:	d062      	beq.n	25854 <nrf_modem_os_timedwait+0x158>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   2578e:	6823      	ldr	r3, [r4, #0]
   25790:	1c5a      	adds	r2, r3, #1
   25792:	d064      	beq.n	2585e <nrf_modem_os_timedwait+0x162>
			return ((t * to_hz + off) / from_hz);
   25794:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   25798:	f240 30e7 	movw	r0, #999	; 0x3e7
   2579c:	2100      	movs	r1, #0
   2579e:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   257a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   257a6:	2300      	movs	r3, #0
   257a8:	fbcc 010e 	smlal	r0, r1, ip, lr
   257ac:	f7f7 fb9c 	bl	1cee8 <__aeabi_uldivmod>
   257b0:	4602      	mov	r2, r0
   257b2:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   257b4:	a802      	add	r0, sp, #8
   257b6:	f011 fb0b 	bl	36dd0 <z_impl_k_sem_take>
	__asm__ volatile(
   257ba:	f04f 0320 	mov.w	r3, #32
   257be:	f3ef 8911 	mrs	r9, BASEPRI
   257c2:	f383 8812 	msr	BASEPRI_MAX, r3
   257c6:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   257ca:	2100      	movs	r1, #0
	return list->head;
   257cc:	4a2a      	ldr	r2, [pc, #168]	; (25878 <nrf_modem_os_timedwait+0x17c>)
   257ce:	6813      	ldr	r3, [r2, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   257d0:	b15b      	cbz	r3, 257ea <nrf_modem_os_timedwait+0xee>
   257d2:	42b3      	cmp	r3, r6
   257d4:	d14c      	bne.n	25870 <nrf_modem_os_timedwait+0x174>
	return node->next;
   257d6:	9801      	ldr	r0, [sp, #4]
	return list->tail;
   257d8:	6856      	ldr	r6, [r2, #4]
Z_GENLIST_REMOVE(slist, snode)
   257da:	2900      	cmp	r1, #0
   257dc:	d143      	bne.n	25866 <nrf_modem_os_timedwait+0x16a>
   257de:	429e      	cmp	r6, r3
	list->head = node;
   257e0:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   257e2:	d100      	bne.n	257e6 <nrf_modem_os_timedwait+0xea>
	list->tail = node;
   257e4:	6050      	str	r0, [r2, #4]
	parent->next = child;
   257e6:	2300      	movs	r3, #0
   257e8:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   257ea:	f012 ff31 	bl	38650 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   257ee:	f7ff ff4f 	bl	25690 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   257f2:	f8d8 3000 	ldr.w	r3, [r8]
   257f6:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   257f8:	f389 8811 	msr	BASEPRI, r9
   257fc:	f3bf 8f6f 	isb	sy
	if (!nrf_modem_is_initialized()) {
   25800:	f01b fb66 	bl	40ed0 <nrf_modem_is_initialized>
   25804:	2800      	cmp	r0, #0
   25806:	d081      	beq.n	2570c <nrf_modem_os_timedwait+0x10>
	if (*timeout == SYS_FOREVER_MS) {
   25808:	6826      	ldr	r6, [r4, #0]
   2580a:	1c73      	adds	r3, r6, #1
   2580c:	d022      	beq.n	25854 <nrf_modem_os_timedwait+0x158>
	return z_impl_k_uptime_ticks();
   2580e:	f01b fc59 	bl	410c4 <z_impl_k_uptime_ticks>
   25812:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
   25816:	fba0 300e 	umull	r3, r0, r0, lr
   2581a:	fba5 250e 	umull	r2, r5, r5, lr
   2581e:	fb0e 0101 	mla	r1, lr, r1, r0
   25822:	fb0e 5707 	mla	r7, lr, r7, r5
   25826:	0bdb      	lsrs	r3, r3, #15
   25828:	0bd2      	lsrs	r2, r2, #15
   2582a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   2582e:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
	delta = uptime - *reftime;
   25832:	1a9b      	subs	r3, r3, r2
   25834:	ea4f 31d1 	mov.w	r1, r1, lsr #15
   25838:	eb61 31d7 	sbc.w	r1, r1, r7, lsr #15
	remaining = *timeout - k_uptime_delta(&start);
   2583c:	ea4f 7ce6 	mov.w	ip, r6, asr #31
   25840:	1af3      	subs	r3, r6, r3
   25842:	eb6c 0101 	sbc.w	r1, ip, r1
	*timeout = remaining > 0 ? remaining : 0;
   25846:	2900      	cmp	r1, #0
   25848:	bfb8      	it	lt
   2584a:	2300      	movlt	r3, #0
   2584c:	6023      	str	r3, [r4, #0]
	if (*timeout == 0) {
   2584e:	2b00      	cmp	r3, #0
   25850:	f43f af6a 	beq.w	25728 <nrf_modem_os_timedwait+0x2c>
	return 0;
   25854:	2000      	movs	r0, #0
   25856:	e75b      	b.n	25710 <nrf_modem_os_timedwait+0x14>
   25858:	6016      	str	r6, [r2, #0]
	list->tail = node;
   2585a:	605e      	str	r6, [r3, #4]
}
   2585c:	e790      	b.n	25780 <nrf_modem_os_timedwait+0x84>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   2585e:	f04f 32ff 	mov.w	r2, #4294967295
   25862:	4613      	mov	r3, r2
   25864:	e7a6      	b.n	257b4 <nrf_modem_os_timedwait+0xb8>
Z_GENLIST_REMOVE(slist, snode)
   25866:	429e      	cmp	r6, r3
	parent->next = child;
   25868:	6008      	str	r0, [r1, #0]
	list->tail = node;
   2586a:	bf08      	it	eq
   2586c:	6051      	streq	r1, [r2, #4]
}
   2586e:	e7ba      	b.n	257e6 <nrf_modem_os_timedwait+0xea>
	return node->next;
   25870:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25872:	681b      	ldr	r3, [r3, #0]
   25874:	e7ac      	b.n	257d0 <nrf_modem_os_timedwait+0xd4>
   25876:	bf00      	nop
   25878:	20019338 	.word	0x20019338
   2587c:	20019318 	.word	0x20019318

00025880 <nrf_modem_os_errno_set>:
{
   25880:	b510      	push	{r4, lr}
	__ASSERT(err_code > 0, "Tried to set negative error code, %d", err_code);
   25882:	1e04      	subs	r4, r0, #0
   25884:	dc08      	bgt.n	25898 <nrf_modem_os_errno_set+0x18>
   25886:	4906      	ldr	r1, [pc, #24]	; (258a0 <nrf_modem_os_errno_set+0x20>)
   25888:	4806      	ldr	r0, [pc, #24]	; (258a4 <nrf_modem_os_errno_set+0x24>)
   2588a:	22f1      	movs	r2, #241	; 0xf1
   2588c:	f017 f8d6 	bl	3ca3c <assert_print>
   25890:	21f1      	movs	r1, #241	; 0xf1
   25892:	4803      	ldr	r0, [pc, #12]	; (258a0 <nrf_modem_os_errno_set+0x20>)
   25894:	f017 f8cb 	bl	3ca2e <assert_post_action>
	errno = err_code;
   25898:	f017 ff49 	bl	3d72e <__errno>
   2589c:	6004      	str	r4, [r0, #0]
}
   2589e:	bd10      	pop	{r4, pc}
   258a0:	00044f2d 	.word	0x00044f2d
   258a4:	00043ff2 	.word	0x00043ff2

000258a8 <nrf_modem_os_sem_init>:
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
   258a8:	6803      	ldr	r3, [r0, #0]
{
   258aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   258ae:	4604      	mov	r4, r0
   258b0:	460e      	mov	r6, r1
   258b2:	4617      	mov	r7, r2
   258b4:	4d14      	ldr	r5, [pc, #80]	; (25908 <nrf_modem_os_sem_init+0x60>)
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
   258b6:	b12b      	cbz	r3, 258c4 <nrf_modem_os_sem_init+0x1c>
   258b8:	42ab      	cmp	r3, r5
   258ba:	d303      	bcc.n	258c4 <nrf_modem_os_sem_init+0x1c>
   258bc:	f105 0260 	add.w	r2, r5, #96	; 0x60
   258c0:	4293      	cmp	r3, r2
   258c2:	d31a      	bcc.n	258fa <nrf_modem_os_sem_init+0x52>
	__ASSERT(used < NRF_MODEM_OS_NUM_SEM_REQUIRED,
   258c4:	f8df 804c 	ldr.w	r8, [pc, #76]	; 25914 <nrf_modem_os_sem_init+0x6c>
   258c8:	f898 3000 	ldrb.w	r3, [r8]
   258cc:	2b03      	cmp	r3, #3
   258ce:	d90a      	bls.n	258e6 <nrf_modem_os_sem_init+0x3e>
   258d0:	490e      	ldr	r1, [pc, #56]	; (2590c <nrf_modem_os_sem_init+0x64>)
   258d2:	480f      	ldr	r0, [pc, #60]	; (25910 <nrf_modem_os_sem_init+0x68>)
   258d4:	f240 1205 	movw	r2, #261	; 0x105
   258d8:	f017 f8b0 	bl	3ca3c <assert_print>
   258dc:	f240 1105 	movw	r1, #261	; 0x105
   258e0:	480a      	ldr	r0, [pc, #40]	; (2590c <nrf_modem_os_sem_init+0x64>)
   258e2:	f017 f8a4 	bl	3ca2e <assert_post_action>
	*sem = &nrf_modem_os_sems[used++];
   258e6:	f898 3000 	ldrb.w	r3, [r8]
   258ea:	1c5a      	adds	r2, r3, #1
   258ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   258f0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   258f4:	f888 2000 	strb.w	r2, [r8]
   258f8:	6025      	str	r5, [r4, #0]
	return k_sem_init((struct k_sem *)*sem, initial_count, limit);
   258fa:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   258fc:	463a      	mov	r2, r7
   258fe:	4631      	mov	r1, r6
}
   25900:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   25904:	f01b bb42 	b.w	40f8c <z_impl_k_sem_init>
   25908:	200192b8 	.word	0x200192b8
   2590c:	00044f2d 	.word	0x00044f2d
   25910:	00043ff2 	.word	0x00043ff2
   25914:	2001a5d5 	.word	0x2001a5d5

00025918 <nrf_modem_os_sem_give>:
{
   25918:	b510      	push	{r4, lr}
	__ASSERT(PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)sem),
   2591a:	4604      	mov	r4, r0
   2591c:	b128      	cbz	r0, 2592a <nrf_modem_os_sem_give+0x12>
   2591e:	4b0b      	ldr	r3, [pc, #44]	; (2594c <nrf_modem_os_sem_give+0x34>)
   25920:	4298      	cmp	r0, r3
   25922:	d302      	bcc.n	2592a <nrf_modem_os_sem_give+0x12>
   25924:	3360      	adds	r3, #96	; 0x60
   25926:	4298      	cmp	r0, r3
   25928:	d30a      	bcc.n	25940 <nrf_modem_os_sem_give+0x28>
   2592a:	4909      	ldr	r1, [pc, #36]	; (25950 <nrf_modem_os_sem_give+0x38>)
   2592c:	4809      	ldr	r0, [pc, #36]	; (25954 <nrf_modem_os_sem_give+0x3c>)
   2592e:	f44f 7288 	mov.w	r2, #272	; 0x110
   25932:	f017 f883 	bl	3ca3c <assert_print>
   25936:	f44f 7188 	mov.w	r1, #272	; 0x110
   2593a:	4805      	ldr	r0, [pc, #20]	; (25950 <nrf_modem_os_sem_give+0x38>)
   2593c:	f017 f877 	bl	3ca2e <assert_post_action>
	z_impl_k_sem_give(sem);
   25940:	4620      	mov	r0, r4
}
   25942:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   25946:	f011 ba07 	b.w	36d58 <z_impl_k_sem_give>
   2594a:	bf00      	nop
   2594c:	200192b8 	.word	0x200192b8
   25950:	00044f2d 	.word	0x00044f2d
   25954:	00043ff2 	.word	0x00043ff2

00025958 <nrf_modem_os_sem_take>:
{
   25958:	b570      	push	{r4, r5, r6, lr}
   2595a:	460c      	mov	r4, r1
	__ASSERT(PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)sem),
   2595c:	4605      	mov	r5, r0
   2595e:	b128      	cbz	r0, 2596c <nrf_modem_os_sem_take+0x14>
   25960:	4b17      	ldr	r3, [pc, #92]	; (259c0 <nrf_modem_os_sem_take+0x68>)
   25962:	4298      	cmp	r0, r3
   25964:	d302      	bcc.n	2596c <nrf_modem_os_sem_take+0x14>
   25966:	3360      	adds	r3, #96	; 0x60
   25968:	4298      	cmp	r0, r3
   2596a:	d30a      	bcc.n	25982 <nrf_modem_os_sem_take+0x2a>
   2596c:	4915      	ldr	r1, [pc, #84]	; (259c4 <nrf_modem_os_sem_take+0x6c>)
   2596e:	4816      	ldr	r0, [pc, #88]	; (259c8 <nrf_modem_os_sem_take+0x70>)
   25970:	f44f 728d 	mov.w	r2, #282	; 0x11a
   25974:	f017 f862 	bl	3ca3c <assert_print>
   25978:	f44f 718d 	mov.w	r1, #282	; 0x11a
   2597c:	4811      	ldr	r0, [pc, #68]	; (259c4 <nrf_modem_os_sem_take+0x6c>)
   2597e:	f017 f856 	bl	3ca2e <assert_post_action>
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   25982:	1c63      	adds	r3, r4, #1
   25984:	d017      	beq.n	259b6 <nrf_modem_os_sem_take+0x5e>
   25986:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2598a:	f240 30e7 	movw	r0, #999	; 0x3e7
   2598e:	2100      	movs	r1, #0
   25990:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   25994:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   25998:	2300      	movs	r3, #0
   2599a:	fbc4 0106 	smlal	r0, r1, r4, r6
   2599e:	f7f7 faa3 	bl	1cee8 <__aeabi_uldivmod>
   259a2:	4602      	mov	r2, r0
   259a4:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   259a6:	4628      	mov	r0, r5
   259a8:	f011 fa12 	bl	36dd0 <z_impl_k_sem_take>
		return -NRF_EAGAIN;
   259ac:	2800      	cmp	r0, #0
}
   259ae:	bf18      	it	ne
   259b0:	f06f 000a 	mvnne.w	r0, #10
   259b4:	bd70      	pop	{r4, r5, r6, pc}
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   259b6:	f04f 32ff 	mov.w	r2, #4294967295
   259ba:	4613      	mov	r3, r2
   259bc:	e7f3      	b.n	259a6 <nrf_modem_os_sem_take+0x4e>
   259be:	bf00      	nop
   259c0:	200192b8 	.word	0x200192b8
   259c4:	00044f2d 	.word	0x00044f2d
   259c8:	00043ff2 	.word	0x00043ff2

000259cc <nrf_modem_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   259cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   259d0:	4b01      	ldr	r3, [pc, #4]	; (259d8 <nrf_modem_os_application_irq_set+0xc>)
   259d2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   259d6:	4770      	bx	lr
   259d8:	e000e100 	.word	0xe000e100

000259dc <nrf_modem_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   259dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   259e0:	4b01      	ldr	r3, [pc, #4]	; (259e8 <nrf_modem_os_application_irq_clear+0xc>)
   259e2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   259e6:	4770      	bx	lr
   259e8:	e000e100 	.word	0xe000e100

000259ec <nrf_modem_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   259ec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   259f0:	4b01      	ldr	r3, [pc, #4]	; (259f8 <nrf_modem_os_trace_irq_set+0xc>)
   259f2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   259f6:	4770      	bx	lr
   259f8:	e000e100 	.word	0xe000e100

000259fc <nrf_modem_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   259fc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   25a00:	4b01      	ldr	r3, [pc, #4]	; (25a08 <nrf_modem_os_trace_irq_clear+0xc>)
   25a02:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   25a06:	4770      	bx	lr
   25a08:	e000e100 	.word	0xe000e100

00025a0c <nrf_modem_os_event_notify>:
{
   25a0c:	b510      	push	{r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   25a0e:	4b08      	ldr	r3, [pc, #32]	; (25a30 <nrf_modem_os_event_notify+0x24>)
   25a10:	e8d3 2fef 	ldaex	r2, [r3]
   25a14:	3201      	adds	r2, #1
   25a16:	e8c3 2fe1 	stlex	r1, r2, [r3]
   25a1a:	2900      	cmp	r1, #0
   25a1c:	d1f8      	bne.n	25a10 <nrf_modem_os_event_notify+0x4>
	return list->head;
   25a1e:	4b05      	ldr	r3, [pc, #20]	; (25a34 <nrf_modem_os_event_notify+0x28>)
   25a20:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   25a22:	b124      	cbz	r4, 25a2e <nrf_modem_os_event_notify+0x22>
	z_impl_k_sem_give(sem);
   25a24:	1d20      	adds	r0, r4, #4
   25a26:	f011 f997 	bl	36d58 <z_impl_k_sem_give>
	return node->next;
   25a2a:	6824      	ldr	r4, [r4, #0]
   25a2c:	e7f9      	b.n	25a22 <nrf_modem_os_event_notify+0x16>
}
   25a2e:	bd10      	pop	{r4, pc}
   25a30:	20019318 	.word	0x20019318
   25a34:	20019338 	.word	0x20019338

00025a38 <nrf_modem_os_alloc>:
{
   25a38:	4601      	mov	r1, r0
	void *addr = k_heap_alloc(&library_heap, bytes, K_NO_WAIT);
   25a3a:	2200      	movs	r2, #0
   25a3c:	2300      	movs	r3, #0
   25a3e:	4801      	ldr	r0, [pc, #4]	; (25a44 <nrf_modem_os_alloc+0xc>)
   25a40:	f01b ba60 	b.w	40f04 <k_heap_alloc>
   25a44:	20014e98 	.word	0x20014e98

00025a48 <nrf_modem_os_free>:
{
   25a48:	4601      	mov	r1, r0
	k_heap_free(&library_heap, mem);
   25a4a:	4801      	ldr	r0, [pc, #4]	; (25a50 <nrf_modem_os_free+0x8>)
   25a4c:	f010 bc2a 	b.w	362a4 <k_heap_free>
   25a50:	20014e98 	.word	0x20014e98

00025a54 <nrf_modem_os_trace_alloc>:
{
   25a54:	4601      	mov	r1, r0
	void *addr = k_heap_alloc(&trace_heap, bytes, K_NO_WAIT);
   25a56:	2200      	movs	r2, #0
   25a58:	2300      	movs	r3, #0
   25a5a:	4801      	ldr	r0, [pc, #4]	; (25a60 <nrf_modem_os_trace_alloc+0xc>)
   25a5c:	f01b ba52 	b.w	40f04 <k_heap_alloc>
   25a60:	20014eb0 	.word	0x20014eb0

00025a64 <nrf_modem_os_trace_free>:
{
   25a64:	4601      	mov	r1, r0
	k_heap_free(&trace_heap, mem);
   25a66:	4801      	ldr	r0, [pc, #4]	; (25a6c <nrf_modem_os_trace_free+0x8>)
   25a68:	f010 bc1c 	b.w	362a4 <k_heap_free>
   25a6c:	20014eb0 	.word	0x20014eb0

00025a70 <nrf_modem_os_shm_tx_alloc>:
{
   25a70:	4601      	mov	r1, r0
	void *addr = k_heap_alloc(&shmem_heap, bytes, K_NO_WAIT);
   25a72:	2200      	movs	r2, #0
   25a74:	2300      	movs	r3, #0
   25a76:	4801      	ldr	r0, [pc, #4]	; (25a7c <nrf_modem_os_shm_tx_alloc+0xc>)
   25a78:	f01b ba44 	b.w	40f04 <k_heap_alloc>
   25a7c:	20019320 	.word	0x20019320

00025a80 <nrf_modem_os_shm_tx_free>:
{
   25a80:	4601      	mov	r1, r0
	k_heap_free(&shmem_heap, mem);
   25a82:	4801      	ldr	r0, [pc, #4]	; (25a88 <nrf_modem_os_shm_tx_free+0x8>)
   25a84:	f010 bc0e 	b.w	362a4 <k_heap_free>
   25a88:	20019320 	.word	0x20019320

00025a8c <nrf_modem_os_init>:

/* On modem initialization.
 * This function is called by nrf_modem_init()
 */
void nrf_modem_os_init(void)
{
   25a8c:	b508      	push	{r3, lr}
	read_task_create();
   25a8e:	f019 f92d 	bl	3ecec <read_task_create>
		LOG_ERR("nrf_modem_lib_trace_init failed with error %d.", err);
	}

#endif

	memset(&heap_diag, 0x00, sizeof(heap_diag));
   25a92:	2300      	movs	r3, #0
   25a94:	4a05      	ldr	r2, [pc, #20]	; (25aac <nrf_modem_os_init+0x20>)
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));

	/* Initialize TX heap */
	k_heap_init(&shmem_heap,
   25a96:	4906      	ldr	r1, [pc, #24]	; (25ab0 <nrf_modem_os_init+0x24>)
	memset(&heap_diag, 0x00, sizeof(heap_diag));
   25a98:	6013      	str	r3, [r2, #0]
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));
   25a9a:	4a06      	ldr	r2, [pc, #24]	; (25ab4 <nrf_modem_os_init+0x28>)
	k_heap_init(&shmem_heap,
   25a9c:	4806      	ldr	r0, [pc, #24]	; (25ab8 <nrf_modem_os_init+0x2c>)
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));
   25a9e:	6013      	str	r3, [r2, #0]
#ifdef CONFIG_NRF_MODEM_LIB_TRACE_HEAP_DUMP_PERIODIC
	k_work_init_delayable(&trace_heap_task.work, diag_task);
	k_work_reschedule(&trace_heap_task.work,
		K_MSEC(CONFIG_NRF_MODEM_LIB_TRACE_HEAP_DUMP_PERIOD_MS));
#endif
}
   25aa0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_heap_init(&shmem_heap,
   25aa4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   25aa8:	f01b ba23 	b.w	40ef2 <k_heap_init>
   25aac:	200192b4 	.word	0x200192b4
   25ab0:	200104e8 	.word	0x200104e8
   25ab4:	2001931c 	.word	0x2001931c
   25ab8:	20019320 	.word	0x20019320

00025abc <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   25abc:	2801      	cmp	r0, #1
   25abe:	d021      	beq.n	25b04 <z_to_nrf_optname+0x48>
   25ac0:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   25ac4:	d126      	bne.n	25b14 <z_to_nrf_optname+0x58>
	case SOL_TLS:
		switch (z_in_optname) {
   25ac6:	3901      	subs	r1, #1
   25ac8:	290b      	cmp	r1, #11
   25aca:	d823      	bhi.n	25b14 <z_to_nrf_optname+0x58>
   25acc:	e8df f001 	tbb	[pc, r1]
   25ad0:	0e0c0a06 	.word	0x0e0c0a06
   25ad4:	22221210 	.word	0x22221210
   25ad8:	18161422 	.word	0x18161422
		case TLS_SEC_TAG_LIST:
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
   25adc:	2302      	movs	r3, #2
			break;
		case TLS_HOSTNAME:
			*nrf_out_optname = NRF_SO_SEC_HOSTNAME;
   25ade:	6013      	str	r3, [r2, #0]
	int retval = 0;
   25ae0:	2000      	movs	r0, #0
			break;
   25ae2:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_SEC_HOSTNAME;
   25ae4:	2305      	movs	r3, #5
   25ae6:	e7fa      	b.n	25ade <z_to_nrf_optname+0x22>
		case TLS_CIPHERSUITE_LIST:
			*nrf_out_optname = NRF_SO_SEC_CIPHERSUITE_LIST;
   25ae8:	2306      	movs	r3, #6
   25aea:	e7f8      	b.n	25ade <z_to_nrf_optname+0x22>
			break;
		case TLS_CIPHERSUITE_USED:
			*nrf_out_optname = NRF_SO_SEC_CIPHER_IN_USE;
   25aec:	2307      	movs	r3, #7
   25aee:	e7f6      	b.n	25ade <z_to_nrf_optname+0x22>
			break;
		case TLS_PEER_VERIFY:
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
   25af0:	2304      	movs	r3, #4
   25af2:	e7f4      	b.n	25ade <z_to_nrf_optname+0x22>
			break;
		case TLS_DTLS_ROLE:
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   25af4:	2301      	movs	r3, #1
   25af6:	e7f2      	b.n	25ade <z_to_nrf_optname+0x22>
			break;
		case TLS_SESSION_CACHE:
			*nrf_out_optname = NRF_SO_SEC_SESSION_CACHE;
   25af8:	2303      	movs	r3, #3
   25afa:	e7f0      	b.n	25ade <z_to_nrf_optname+0x22>
			break;
		case TLS_SESSION_CACHE_PURGE:
			*nrf_out_optname = NRF_SO_SEC_SESSION_CACHE_PURGE;
   25afc:	2309      	movs	r3, #9
   25afe:	e7ee      	b.n	25ade <z_to_nrf_optname+0x22>
			break;
		case TLS_DTLS_HANDSHAKE_TIMEO:
			*nrf_out_optname = NRF_SO_SEC_DTLS_HANDSHAKE_TIMEO;
   25b00:	2308      	movs	r3, #8
   25b02:	e7ec      	b.n	25ade <z_to_nrf_optname+0x22>
			break;
		}
		break;

	case SOL_SOCKET:
		switch (z_in_optname) {
   25b04:	2937      	cmp	r1, #55	; 0x37
   25b06:	dc05      	bgt.n	25b14 <z_to_nrf_optname+0x58>
   25b08:	2913      	cmp	r1, #19
   25b0a:	dc06      	bgt.n	25b1a <z_to_nrf_optname+0x5e>
   25b0c:	2902      	cmp	r1, #2
   25b0e:	d059      	beq.n	25bc4 <z_to_nrf_optname+0x108>
   25b10:	2904      	cmp	r1, #4
   25b12:	d0ed      	beq.n	25af0 <z_to_nrf_optname+0x34>
   25b14:	f04f 30ff 	mov.w	r0, #4294967295
		retval = -1;
		break;
	}

	return retval;
}
   25b18:	4770      	bx	lr
   25b1a:	3914      	subs	r1, #20
   25b1c:	2923      	cmp	r1, #35	; 0x23
   25b1e:	d8f9      	bhi.n	25b14 <z_to_nrf_optname+0x58>
   25b20:	a301      	add	r3, pc, #4	; (adr r3, 25b28 <z_to_nrf_optname+0x6c>)
   25b22:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   25b26:	bf00      	nop
   25b28:	00025bb9 	.word	0x00025bb9
   25b2c:	00025bbd 	.word	0x00025bbd
   25b30:	00025b15 	.word	0x00025b15
   25b34:	00025b15 	.word	0x00025b15
   25b38:	00025b15 	.word	0x00025b15
   25b3c:	00025bc1 	.word	0x00025bc1
   25b40:	00025b15 	.word	0x00025b15
   25b44:	00025b15 	.word	0x00025b15
   25b48:	00025b15 	.word	0x00025b15
   25b4c:	00025b15 	.word	0x00025b15
   25b50:	00025bc9 	.word	0x00025bc9
   25b54:	00025bcd 	.word	0x00025bcd
   25b58:	00025bd1 	.word	0x00025bd1
   25b5c:	00025b15 	.word	0x00025b15
   25b60:	00025b15 	.word	0x00025b15
   25b64:	00025b15 	.word	0x00025b15
   25b68:	00025b15 	.word	0x00025b15
   25b6c:	00025b15 	.word	0x00025b15
   25b70:	00025b15 	.word	0x00025b15
   25b74:	00025b15 	.word	0x00025b15
   25b78:	00025b15 	.word	0x00025b15
   25b7c:	00025b15 	.word	0x00025b15
   25b80:	00025b15 	.word	0x00025b15
   25b84:	00025b15 	.word	0x00025b15
   25b88:	00025b15 	.word	0x00025b15
   25b8c:	00025b15 	.word	0x00025b15
   25b90:	00025b15 	.word	0x00025b15
   25b94:	00025b15 	.word	0x00025b15
   25b98:	00025b15 	.word	0x00025b15
   25b9c:	00025b15 	.word	0x00025b15
   25ba0:	00025bd9 	.word	0x00025bd9
   25ba4:	00025bdd 	.word	0x00025bdd
   25ba8:	00025be1 	.word	0x00025be1
   25bac:	00025be5 	.word	0x00025be5
   25bb0:	00025be9 	.word	0x00025be9
   25bb4:	00025bd5 	.word	0x00025bd5
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   25bb8:	2314      	movs	r3, #20
   25bba:	e790      	b.n	25ade <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_SNDTIMEO;
   25bbc:	2315      	movs	r3, #21
   25bbe:	e78e      	b.n	25ade <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   25bc0:	2319      	movs	r3, #25
   25bc2:	e78c      	b.n	25ade <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_REUSEADDR;
   25bc4:	6011      	str	r1, [r2, #0]
			break;
   25bc6:	e78b      	b.n	25ae0 <z_to_nrf_optname+0x24>
			*nrf_out_optname = NRF_SO_SILENCE_ALL;
   25bc8:	231e      	movs	r3, #30
   25bca:	e788      	b.n	25ade <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_IP_ECHO_REPLY;
   25bcc:	231f      	movs	r3, #31
   25bce:	e786      	b.n	25ade <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_IPV6_ECHO_REPLY;
   25bd0:	2320      	movs	r3, #32
   25bd2:	e784      	b.n	25ade <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_TCP_SRV_SESSTIMEO;
   25bd4:	2337      	movs	r3, #55	; 0x37
   25bd6:	e782      	b.n	25ade <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_RAI_LAST;
   25bd8:	2333      	movs	r3, #51	; 0x33
   25bda:	e780      	b.n	25ade <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_RAI_NO_DATA;
   25bdc:	2332      	movs	r3, #50	; 0x32
   25bde:	e77e      	b.n	25ade <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_RAI_ONE_RESP;
   25be0:	2334      	movs	r3, #52	; 0x34
   25be2:	e77c      	b.n	25ade <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_RAI_ONGOING;
   25be4:	2335      	movs	r3, #53	; 0x35
   25be6:	e77a      	b.n	25ade <z_to_nrf_optname+0x22>
			*nrf_out_optname = NRF_SO_RAI_WAIT_MORE;
   25be8:	2336      	movs	r3, #54	; 0x36
   25bea:	e778      	b.n	25ade <z_to_nrf_optname+0x22>

00025bec <nrf91_nrf_modem_lib_socket_offload_init>:
static int nrf91_nrf_modem_lib_socket_offload_init(const struct device *arg)
{
	ARG_UNUSED(arg);

	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
		offload_ctx[i].nrf_fd = -1;
   25bec:	f04f 32ff 	mov.w	r2, #4294967295
   25bf0:	4b05      	ldr	r3, [pc, #20]	; (25c08 <nrf91_nrf_modem_lib_socket_offload_init+0x1c>)
	}

	return 0;
}
   25bf2:	2000      	movs	r0, #0
		offload_ctx[i].nrf_fd = -1;
   25bf4:	601a      	str	r2, [r3, #0]
   25bf6:	609a      	str	r2, [r3, #8]
   25bf8:	611a      	str	r2, [r3, #16]
   25bfa:	619a      	str	r2, [r3, #24]
   25bfc:	621a      	str	r2, [r3, #32]
   25bfe:	629a      	str	r2, [r3, #40]	; 0x28
   25c00:	631a      	str	r2, [r3, #48]	; 0x30
   25c02:	639a      	str	r2, [r3, #56]	; 0x38
}
   25c04:	4770      	bx	lr
   25c06:	bf00      	nop
   25c08:	20019394 	.word	0x20019394

00025c0c <nrf91_socket_offload_ioctl>:
{
   25c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (request) {
   25c10:	f5a1 7381 	sub.w	r3, r1, #258	; 0x102
{
   25c14:	b091      	sub	sp, #68	; 0x44
	switch (request) {
   25c16:	2b03      	cmp	r3, #3
   25c18:	d878      	bhi.n	25d0c <nrf91_socket_offload_ioctl+0x100>
   25c1a:	e8df f003 	tbb	[pc, r3]
   25c1e:	0294      	.short	0x0294
   25c20:	7308      	.short	0x7308
   25c22:	f06f 045e 	mvn.w	r4, #94	; 0x5e
}
   25c26:	4620      	mov	r0, r4
   25c28:	b011      	add	sp, #68	; 0x44
   25c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < nfds; i++) {
   25c2e:	f04f 0a00 	mov.w	sl, #0
		nfds = va_arg(args, int);
   25c32:	e9d2 9800 	ldrd	r9, r8, [r2]
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   25c36:	2100      	movs	r1, #0
		timeout = va_arg(args, int);
   25c38:	f8d2 b008 	ldr.w	fp, [r2, #8]
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   25c3c:	4668      	mov	r0, sp
   25c3e:	2240      	movs	r2, #64	; 0x40
   25c40:	f01b fbd0 	bl	413e4 <memset>
	for (int i = 0; i < nfds; i++) {
   25c44:	466e      	mov	r6, sp
   25c46:	464d      	mov	r5, r9
   25c48:	464f      	mov	r7, r9
	int retval = 0;
   25c4a:	4654      	mov	r4, sl
		tmp[i].events = 0;
   25c4c:	4653      	mov	r3, sl
			obj = z_get_fd_obj(fds[i].fd,
   25c4e:	493f      	ldr	r1, [pc, #252]	; (25d4c <nrf91_socket_offload_ioctl+0x140>)
	for (int i = 0; i < nfds; i++) {
   25c50:	45d0      	cmp	r8, sl
   25c52:	dc0a      	bgt.n	25c6a <nrf91_socket_offload_ioctl+0x5e>
	if (retval > 0) {
   25c54:	2c00      	cmp	r4, #0
   25c56:	d1e6      	bne.n	25c26 <nrf91_socket_offload_ioctl+0x1a>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   25c58:	465a      	mov	r2, fp
   25c5a:	4641      	mov	r1, r8
   25c5c:	4668      	mov	r0, sp
   25c5e:	f01a ffdd 	bl	40c1c <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   25c62:	45a0      	cmp	r8, r4
   25c64:	dc26      	bgt.n	25cb4 <nrf91_socket_offload_ioctl+0xa8>
	return retval;
   25c66:	4604      	mov	r4, r0
		return nrf91_socket_offload_poll(fds, nfds, timeout);
   25c68:	e7dd      	b.n	25c26 <nrf91_socket_offload_ioctl+0x1a>
		if (fds[i].fd < 0) {
   25c6a:	6838      	ldr	r0, [r7, #0]
		tmp[i].events = 0;
   25c6c:	80b3      	strh	r3, [r6, #4]
		if (fds[i].fd < 0) {
   25c6e:	2800      	cmp	r0, #0
		fds[i].revents = 0;
   25c70:	80fb      	strh	r3, [r7, #6]
		if (fds[i].fd < 0) {
   25c72:	da05      	bge.n	25c80 <nrf91_socket_offload_ioctl+0x74>
			tmp[i].fd = fds[i].fd;
   25c74:	6030      	str	r0, [r6, #0]
	for (int i = 0; i < nfds; i++) {
   25c76:	f10a 0a01 	add.w	sl, sl, #1
   25c7a:	3608      	adds	r6, #8
   25c7c:	3708      	adds	r7, #8
   25c7e:	e7e7      	b.n	25c50 <nrf91_socket_offload_ioctl+0x44>
			obj = z_get_fd_obj(fds[i].fd,
   25c80:	2286      	movs	r2, #134	; 0x86
   25c82:	f7fa feb9 	bl	209f8 <z_get_fd_obj>
			if (obj != NULL) {
   25c86:	2300      	movs	r3, #0
   25c88:	4930      	ldr	r1, [pc, #192]	; (25d4c <nrf91_socket_offload_ioctl+0x140>)
   25c8a:	b178      	cbz	r0, 25cac <nrf91_socket_offload_ioctl+0xa0>
				tmp[i].fd = OBJ_TO_SD(obj);
   25c8c:	6802      	ldr	r2, [r0, #0]
   25c8e:	6032      	str	r2, [r6, #0]
		if (fds[i].events & POLLIN) {
   25c90:	88b8      	ldrh	r0, [r7, #4]
   25c92:	07c2      	lsls	r2, r0, #31
			tmp[i].events |= NRF_POLLIN;
   25c94:	bf42      	ittt	mi
   25c96:	88b2      	ldrhmi	r2, [r6, #4]
   25c98:	f042 0201 	orrmi.w	r2, r2, #1
   25c9c:	80b2      	strhmi	r2, [r6, #4]
		if (fds[i].events & POLLOUT) {
   25c9e:	0742      	lsls	r2, r0, #29
			tmp[i].events |= NRF_POLLOUT;
   25ca0:	bf42      	ittt	mi
   25ca2:	88b2      	ldrhmi	r2, [r6, #4]
   25ca4:	f042 0204 	orrmi.w	r2, r2, #4
   25ca8:	80b2      	strhmi	r2, [r6, #4]
   25caa:	e7e4      	b.n	25c76 <nrf91_socket_offload_ioctl+0x6a>
				fds[i].revents = POLLNVAL;
   25cac:	2220      	movs	r2, #32
				retval++;
   25cae:	3401      	adds	r4, #1
				fds[i].revents = POLLNVAL;
   25cb0:	80fa      	strh	r2, [r7, #6]
				retval++;
   25cb2:	e7ed      	b.n	25c90 <nrf91_socket_offload_ioctl+0x84>
		if (fds[i].fd < 0) {
   25cb4:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
   25cb8:	2b00      	cmp	r3, #0
   25cba:	db20      	blt.n	25cfe <nrf91_socket_offload_ioctl+0xf2>
		if (tmp[i].revents & NRF_POLLIN) {
   25cbc:	eb0d 03c4 	add.w	r3, sp, r4, lsl #3
   25cc0:	88db      	ldrh	r3, [r3, #6]
   25cc2:	07df      	lsls	r7, r3, #31
			fds[i].revents |= POLLIN;
   25cc4:	bf42      	ittt	mi
   25cc6:	88ea      	ldrhmi	r2, [r5, #6]
   25cc8:	f042 0201 	orrmi.w	r2, r2, #1
   25ccc:	80ea      	strhmi	r2, [r5, #6]
		if (tmp[i].revents & NRF_POLLOUT) {
   25cce:	075e      	lsls	r6, r3, #29
			fds[i].revents |= POLLOUT;
   25cd0:	bf42      	ittt	mi
   25cd2:	88ea      	ldrhmi	r2, [r5, #6]
   25cd4:	f042 0204 	orrmi.w	r2, r2, #4
   25cd8:	80ea      	strhmi	r2, [r5, #6]
		if (tmp[i].revents & NRF_POLLERR) {
   25cda:	0719      	lsls	r1, r3, #28
			fds[i].revents |= POLLERR;
   25cdc:	bf42      	ittt	mi
   25cde:	88ea      	ldrhmi	r2, [r5, #6]
   25ce0:	f042 0208 	orrmi.w	r2, r2, #8
   25ce4:	80ea      	strhmi	r2, [r5, #6]
		if (tmp[i].revents & NRF_POLLNVAL) {
   25ce6:	069a      	lsls	r2, r3, #26
			fds[i].revents |= POLLNVAL;
   25ce8:	bf42      	ittt	mi
   25cea:	88ea      	ldrhmi	r2, [r5, #6]
   25cec:	f042 0220 	orrmi.w	r2, r2, #32
   25cf0:	80ea      	strhmi	r2, [r5, #6]
		if (tmp[i].revents & NRF_POLLHUP) {
   25cf2:	06db      	lsls	r3, r3, #27
			fds[i].revents |= POLLHUP;
   25cf4:	bf42      	ittt	mi
   25cf6:	88eb      	ldrhmi	r3, [r5, #6]
   25cf8:	f043 0310 	orrmi.w	r3, r3, #16
   25cfc:	80eb      	strhmi	r3, [r5, #6]
	for (int i = 0; i < nfds; i++) {
   25cfe:	3401      	adds	r4, #1
   25d00:	3508      	adds	r5, #8
   25d02:	e7ae      	b.n	25c62 <nrf91_socket_offload_ioctl+0x56>
		ctx->lock = va_arg(args, struct k_mutex *);
   25d04:	6813      	ldr	r3, [r2, #0]
		return 0;
   25d06:	2400      	movs	r4, #0
		ctx->lock = va_arg(args, struct k_mutex *);
   25d08:	6043      	str	r3, [r0, #4]
		return 0;
   25d0a:	e78c      	b.n	25c26 <nrf91_socket_offload_ioctl+0x1a>
	switch (cmd) {
   25d0c:	2903      	cmp	r1, #3
	int sd = OBJ_TO_SD(obj);
   25d0e:	6800      	ldr	r0, [r0, #0]
	switch (cmd) {
   25d10:	d00b      	beq.n	25d2a <nrf91_socket_offload_ioctl+0x11e>
   25d12:	2904      	cmp	r1, #4
   25d14:	d110      	bne.n	25d38 <nrf91_socket_offload_ioctl+0x12c>
		flags = va_arg(args, int);
   25d16:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   25d18:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   25d1c:	d10c      	bne.n	25d38 <nrf91_socket_offload_ioctl+0x12c>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   25d1e:	1392      	asrs	r2, r2, #14
}
   25d20:	b011      	add	sp, #68	; 0x44
   25d22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   25d26:	f01b b80e 	b.w	40d46 <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   25d2a:	2200      	movs	r2, #0
   25d2c:	f01b f80b 	bl	40d46 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   25d30:	0380      	lsls	r0, r0, #14
   25d32:	f400 4480 	and.w	r4, r0, #16384	; 0x4000
		break;
   25d36:	e776      	b.n	25c26 <nrf91_socket_offload_ioctl+0x1a>
	errno = EINVAL;
   25d38:	f017 fcf9 	bl	3d72e <__errno>
   25d3c:	2316      	movs	r3, #22
	return retval;
   25d3e:	f04f 34ff 	mov.w	r4, #4294967295
	errno = EINVAL;
   25d42:	6003      	str	r3, [r0, #0]
		return nrf91_socket_offload_fcntl(sd, request, args);
   25d44:	e76f      	b.n	25c26 <nrf91_socket_offload_ioctl+0x1a>
		return -EXDEV;
   25d46:	f06f 0411 	mvn.w	r4, #17
   25d4a:	e76c      	b.n	25c26 <nrf91_socket_offload_ioctl+0x1a>
   25d4c:	00042c38 	.word	0x00042c38

00025d50 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   25d50:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   25d52:	4b03      	ldr	r3, [pc, #12]	; (25d60 <nrf91_socket_iface_init+0x10>)
   25d54:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   25d56:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   25d58:	4802      	ldr	r0, [pc, #8]	; (25d64 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   25d5a:	769a      	strb	r2, [r3, #26]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   25d5c:	f7fb bef0 	b.w	21b40 <socket_offload_dns_register>
   25d60:	20019390 	.word	0x20019390
   25d64:	00042c30 	.word	0x00042c30

00025d68 <nrf91_socket_is_supported>:
	if (offload_disabled) {
   25d68:	4b0c      	ldr	r3, [pc, #48]	; (25d9c <nrf91_socket_is_supported+0x34>)
   25d6a:	781b      	ldrb	r3, [r3, #0]
   25d6c:	b98b      	cbnz	r3, 25d92 <nrf91_socket_is_supported+0x2a>
	if (tls_offload_disabled && proto_is_secure(proto)) {
   25d6e:	4b0c      	ldr	r3, [pc, #48]	; (25da0 <nrf91_socket_is_supported+0x38>)
   25d70:	781b      	ldrb	r3, [r3, #0]
   25d72:	b183      	cbz	r3, 25d96 <nrf91_socket_is_supported+0x2e>
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   25d74:	f5a2 7380 	sub.w	r3, r2, #256	; 0x100
   25d78:	2b02      	cmp	r3, #2
   25d7a:	d908      	bls.n	25d8e <nrf91_socket_is_supported+0x26>
	       (proto >= IPPROTO_DTLS_1_0 && proto <= IPPROTO_DTLS_1_2);
   25d7c:	f5a2 7088 	sub.w	r0, r2, #272	; 0x110
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   25d80:	2801      	cmp	r0, #1
   25d82:	bf8c      	ite	hi
   25d84:	2000      	movhi	r0, #0
   25d86:	2001      	movls	r0, #1
	if (tls_offload_disabled && proto_is_secure(proto)) {
   25d88:	f080 0001 	eor.w	r0, r0, #1
   25d8c:	4770      	bx	lr
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   25d8e:	2001      	movs	r0, #1
   25d90:	e7fa      	b.n	25d88 <nrf91_socket_is_supported+0x20>
		return false;
   25d92:	2000      	movs	r0, #0
   25d94:	4770      	bx	lr
	return true;
   25d96:	2001      	movs	r0, #1
}
   25d98:	4770      	bx	lr
   25d9a:	bf00      	nop
   25d9c:	2001a656 	.word	0x2001a656
   25da0:	2001a657 	.word	0x2001a657

00025da4 <nrf91_socket_offload_getaddrinfo>:
{
   25da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25da8:	4614      	mov	r4, r2
   25daa:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   25dac:	2100      	movs	r1, #0
{
   25dae:	b08b      	sub	sp, #44	; 0x2c
   25db0:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   25db2:	2220      	movs	r2, #32
   25db4:	a802      	add	r0, sp, #8
{
   25db6:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   25db8:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   25dba:	f01b fb13 	bl	413e4 <memset>
	if (hints != NULL) {
   25dbe:	b1fc      	cbz	r4, 25e00 <nrf91_socket_offload_getaddrinfo+0x5c>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   25dc0:	6862      	ldr	r2, [r4, #4]
		nrf_flags |= NRF_AI_NUMERICSERV;
   25dc2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
	if (flags & AI_PDNSERV) {
   25dc6:	04d2      	lsls	r2, r2, #19
		nrf_flags |= NRF_AI_PDNSERV;
   25dc8:	bf48      	it	mi
   25dca:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   25dce:	9302      	str	r3, [sp, #8]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   25dd0:	68e3      	ldr	r3, [r4, #12]
   25dd2:	9304      	str	r3, [sp, #16]
	family = z_to_nrf_family(z_in->ai_family);
   25dd4:	8923      	ldrh	r3, [r4, #8]
	switch (z_family) {
   25dd6:	2b03      	cmp	r3, #3
   25dd8:	f200 80d5 	bhi.w	25f86 <nrf91_socket_offload_getaddrinfo+0x1e2>
   25ddc:	4a6d      	ldr	r2, [pc, #436]	; (25f94 <nrf91_socket_offload_getaddrinfo+0x1f0>)
   25dde:	56d3      	ldrsb	r3, [r2, r3]
	if (family == -EAFNOSUPPORT) {
   25de0:	f113 0f6a 	cmn.w	r3, #106	; 0x6a
   25de4:	f000 80cf 	beq.w	25f86 <nrf91_socket_offload_getaddrinfo+0x1e2>
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   25de8:	6920      	ldr	r0, [r4, #16]
	nrf_out->ai_family = family;
   25dea:	9303      	str	r3, [sp, #12]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   25dec:	f018 ff97 	bl	3ed1e <nrf_to_z_protocol>
   25df0:	9005      	str	r0, [sp, #20]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   25df2:	307b      	adds	r0, #123	; 0x7b
   25df4:	f000 80ca 	beq.w	25f8c <nrf91_socket_offload_getaddrinfo+0x1e8>
	if (z_in->ai_canonname != NULL) {
   25df8:	69e3      	ldr	r3, [r4, #28]
   25dfa:	b103      	cbz	r3, 25dfe <nrf91_socket_offload_getaddrinfo+0x5a>
		nrf_out->ai_canonname = z_in->ai_canonname;
   25dfc:	9308      	str	r3, [sp, #32]
		nrf_hints_ptr = &nrf_hints;
   25dfe:	ac02      	add	r4, sp, #8
	k_mutex_lock(&getaddrinfo_lock, K_FOREVER);
   25e00:	f04f 32ff 	mov.w	r2, #4294967295
   25e04:	f04f 33ff 	mov.w	r3, #4294967295
   25e08:	4863      	ldr	r0, [pc, #396]	; (25f98 <nrf91_socket_offload_getaddrinfo+0x1f4>)
   25e0a:	f019 f8cc 	bl	3efa6 <k_mutex_lock.constprop.0.isra.0>
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   25e0e:	4622      	mov	r2, r4
   25e10:	4631      	mov	r1, r6
   25e12:	4628      	mov	r0, r5
   25e14:	ab01      	add	r3, sp, #4
   25e16:	f00e fa0d 	bl	34234 <nrf_getaddrinfo>
	if (retval != 0) {
   25e1a:	4604      	mov	r4, r0
   25e1c:	2800      	cmp	r0, #0
   25e1e:	d043      	beq.n	25ea8 <nrf91_socket_offload_getaddrinfo+0x104>
	switch (nrf_gai_err) {
   25e20:	f46f 7380 	mvn.w	r3, #256	; 0x100
   25e24:	441c      	add	r4, r3
   25e26:	2c14      	cmp	r4, #20
   25e28:	d830      	bhi.n	25e8c <nrf91_socket_offload_getaddrinfo+0xe8>
   25e2a:	e8df f004 	tbb	[pc, r4]
   25e2e:	0ba9      	.short	0x0ba9
   25e30:	2f2f143a 	.word	0x2f2f143a
   25e34:	2f2f2f2f 	.word	0x2f2f2f2f
   25e38:	172f2f2f 	.word	0x172f2f2f
   25e3c:	23201d1a 	.word	0x23201d1a
   25e40:	2926      	.short	0x2926
   25e42:	2c          	.byte	0x2c
   25e43:	00          	.byte	0x00
   25e44:	f06f 0402 	mvn.w	r4, #2
	k_mutex_unlock(&getaddrinfo_lock);
   25e48:	4853      	ldr	r0, [pc, #332]	; (25f98 <nrf91_socket_offload_getaddrinfo+0x1f4>)
   25e4a:	f019 f8ae 	bl	3efaa <k_mutex_unlock.isra.0>
}
   25e4e:	4620      	mov	r0, r4
   25e50:	b00b      	add	sp, #44	; 0x2c
   25e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return DNS_EAI_FAIL;
   25e56:	f06f 0403 	mvn.w	r4, #3
   25e5a:	e7f5      	b.n	25e48 <nrf91_socket_offload_getaddrinfo+0xa4>
		return DNS_EAI_FAMILY;
   25e5c:	f06f 0405 	mvn.w	r4, #5
   25e60:	e7f2      	b.n	25e48 <nrf91_socket_offload_getaddrinfo+0xa4>
		return DNS_EAI_MEMORY;
   25e62:	f06f 0409 	mvn.w	r4, #9
   25e66:	e7ef      	b.n	25e48 <nrf91_socket_offload_getaddrinfo+0xa4>
		return DNS_EAI_NODATA;
   25e68:	f06f 0404 	mvn.w	r4, #4
   25e6c:	e7ec      	b.n	25e48 <nrf91_socket_offload_getaddrinfo+0xa4>
		return DNS_EAI_NONAME;
   25e6e:	f06f 0401 	mvn.w	r4, #1
   25e72:	e7e9      	b.n	25e48 <nrf91_socket_offload_getaddrinfo+0xa4>
		return DNS_EAI_SERVICE;
   25e74:	f06f 0407 	mvn.w	r4, #7
   25e78:	e7e6      	b.n	25e48 <nrf91_socket_offload_getaddrinfo+0xa4>
		return DNS_EAI_SOCKTYPE;
   25e7a:	f06f 0406 	mvn.w	r4, #6
   25e7e:	e7e3      	b.n	25e48 <nrf91_socket_offload_getaddrinfo+0xa4>
		return DNS_EAI_INPROGRESS;
   25e80:	f06f 0463 	mvn.w	r4, #99	; 0x63
   25e84:	e7e0      	b.n	25e48 <nrf91_socket_offload_getaddrinfo+0xa4>
		return DNS_EAI_SYSTEM;
   25e86:	f06f 040a 	mvn.w	r4, #10
   25e8a:	e7dd      	b.n	25e48 <nrf91_socket_offload_getaddrinfo+0xa4>
		__ASSERT(false, "Untranslated nrf_getaddrinfo() return value %d", nrf_gai_err);
   25e8c:	4943      	ldr	r1, [pc, #268]	; (25f9c <nrf91_socket_offload_getaddrinfo+0x1f8>)
   25e8e:	4844      	ldr	r0, [pc, #272]	; (25fa0 <nrf91_socket_offload_getaddrinfo+0x1fc>)
   25e90:	f240 12a5 	movw	r2, #421	; 0x1a5
   25e94:	f016 fdd2 	bl	3ca3c <assert_print>
   25e98:	f240 11a5 	movw	r1, #421	; 0x1a5
   25e9c:	483f      	ldr	r0, [pc, #252]	; (25f9c <nrf91_socket_offload_getaddrinfo+0x1f8>)
   25e9e:	f016 fdc6 	bl	3ca2e <assert_post_action>
		return -1;
   25ea2:	f04f 34ff 	mov.w	r4, #4294967295
   25ea6:	e7cf      	b.n	25e48 <nrf91_socket_offload_getaddrinfo+0xa4>
	struct zsock_addrinfo *latest_z_res = NULL;
   25ea8:	4681      	mov	r9, r0
	z_out->ai_next = NULL;
   25eaa:	4680      	mov	r8, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   25eac:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   25eae:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 25fa4 <nrf91_socket_offload_getaddrinfo+0x200>
   25eb2:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   25eb4:	b91e      	cbnz	r6, 25ebe <nrf91_socket_offload_getaddrinfo+0x11a>
	nrf_freeaddrinfo(nrf_res);
   25eb6:	9801      	ldr	r0, [sp, #4]
   25eb8:	f01a fad6 	bl	40468 <nrf_freeaddrinfo>
   25ebc:	e7c4      	b.n	25e48 <nrf91_socket_offload_getaddrinfo+0xa4>
					k_malloc(sizeof(struct zsock_addrinfo));
   25ebe:	2050      	movs	r0, #80	; 0x50
   25ec0:	f01b f9e6 	bl	41290 <k_malloc>
		if (next_z_res == NULL) {
   25ec4:	4605      	mov	r5, r0
   25ec6:	2800      	cmp	r0, #0
   25ec8:	d049      	beq.n	25f5e <nrf91_socket_offload_getaddrinfo+0x1ba>
	family = nrf_to_z_family(nrf_in->ai_family);
   25eca:	f8d6 b004 	ldr.w	fp, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   25ece:	68b3      	ldr	r3, [r6, #8]
   25ed0:	f1bb 0f05 	cmp.w	fp, #5
	z_out->ai_next = NULL;
   25ed4:	f8c0 8000 	str.w	r8, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   25ed8:	f8c0 801c 	str.w	r8, [r0, #28]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   25edc:	f8c0 8004 	str.w	r8, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   25ee0:	60c3      	str	r3, [r0, #12]
	switch (nrf_family) {
   25ee2:	d83f      	bhi.n	25f64 <nrf91_socket_offload_getaddrinfo+0x1c0>
   25ee4:	f91a 300b 	ldrsb.w	r3, [sl, fp]
	if (family == -EAFNOSUPPORT) {
   25ee8:	f113 0f6a 	cmn.w	r3, #106	; 0x6a
   25eec:	d03a      	beq.n	25f64 <nrf91_socket_offload_getaddrinfo+0x1c0>
	z_out->ai_family = family;
   25eee:	6083      	str	r3, [r0, #8]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   25ef0:	68f0      	ldr	r0, [r6, #12]
   25ef2:	f018 ff14 	bl	3ed1e <nrf_to_z_protocol>
   25ef6:	6128      	str	r0, [r5, #16]
	if (z_out->ai_protocol == -EPROTONOSUPPORT) {
   25ef8:	307b      	adds	r0, #123	; 0x7b
   25efa:	d107      	bne.n	25f0c <nrf91_socket_offload_getaddrinfo+0x168>
		z_out->ai_addr = NULL;
   25efc:	f8c5 8018 	str.w	r8, [r5, #24]
			k_free(next_z_res);
   25f00:	4628      	mov	r0, r5
   25f02:	f01b f9be 	bl	41282 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   25f06:	f06f 0406 	mvn.w	r4, #6
   25f0a:	e030      	b.n	25f6e <nrf91_socket_offload_getaddrinfo+0x1ca>
	if (nrf_in->ai_family == NRF_AF_INET) {
   25f0c:	f1bb 0f01 	cmp.w	fp, #1
   25f10:	d114      	bne.n	25f3c <nrf91_socket_offload_getaddrinfo+0x198>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   25f12:	2008      	movs	r0, #8
   25f14:	f01b f9bc 	bl	41290 <k_malloc>
   25f18:	61a8      	str	r0, [r5, #24]
		if (z_out->ai_addr == NULL) {
   25f1a:	b1e8      	cbz	r0, 25f58 <nrf91_socket_offload_getaddrinfo+0x1b4>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   25f1c:	2308      	movs	r3, #8
   25f1e:	616b      	str	r3, [r5, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   25f20:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   25f22:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   25f24:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   25f26:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   25f28:	f8a0 b000 	strh.w	fp, [r0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   25f2c:	6043      	str	r3, [r0, #4]
		if (latest_z_res == NULL) {
   25f2e:	f1b9 0f00 	cmp.w	r9, #0
   25f32:	d122      	bne.n	25f7a <nrf91_socket_offload_getaddrinfo+0x1d6>
			*res = next_z_res;
   25f34:	603d      	str	r5, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   25f36:	46a9      	mov	r9, r5
   25f38:	69f6      	ldr	r6, [r6, #28]
   25f3a:	e7bb      	b.n	25eb4 <nrf91_socket_offload_getaddrinfo+0x110>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   25f3c:	f1bb 0f02 	cmp.w	fp, #2
   25f40:	d1de      	bne.n	25f00 <nrf91_socket_offload_getaddrinfo+0x15c>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   25f42:	2018      	movs	r0, #24
   25f44:	f01b f9a4 	bl	41290 <k_malloc>
   25f48:	61a8      	str	r0, [r5, #24]
		if (z_out->ai_addr == NULL) {
   25f4a:	b128      	cbz	r0, 25f58 <nrf91_socket_offload_getaddrinfo+0x1b4>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   25f4c:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   25f4e:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   25f50:	616b      	str	r3, [r5, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   25f52:	f018 ff5a 	bl	3ee0a <nrf_to_z_ipv6>
		} else if (error == -EAFNOSUPPORT) {
   25f56:	e7ea      	b.n	25f2e <nrf91_socket_offload_getaddrinfo+0x18a>
			k_free(next_z_res);
   25f58:	4628      	mov	r0, r5
   25f5a:	f01b f992 	bl	41282 <k_free>
			retval = DNS_EAI_MEMORY;
   25f5e:	f06f 0409 	mvn.w	r4, #9
   25f62:	e004      	b.n	25f6e <nrf91_socket_offload_getaddrinfo+0x1ca>
			k_free(next_z_res);
   25f64:	4628      	mov	r0, r5
   25f66:	f01b f98c 	bl	41282 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   25f6a:	f06f 0408 	mvn.w	r4, #8
		nrf91_socket_offload_freeaddrinfo(*res);
   25f6e:	6838      	ldr	r0, [r7, #0]
   25f70:	f018 ff3e 	bl	3edf0 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   25f74:	2300      	movs	r3, #0
   25f76:	603b      	str	r3, [r7, #0]
   25f78:	e79d      	b.n	25eb6 <nrf91_socket_offload_getaddrinfo+0x112>
			latest_z_res->ai_next = next_z_res;
   25f7a:	f8c9 5000 	str.w	r5, [r9]
   25f7e:	e7da      	b.n	25f36 <nrf91_socket_offload_getaddrinfo+0x192>
		return DNS_EAI_ADDRFAMILY;
   25f80:	f06f 0408 	mvn.w	r4, #8
   25f84:	e760      	b.n	25e48 <nrf91_socket_offload_getaddrinfo+0xa4>
			return DNS_EAI_ADDRFAMILY;
   25f86:	f06f 0408 	mvn.w	r4, #8
   25f8a:	e760      	b.n	25e4e <nrf91_socket_offload_getaddrinfo+0xaa>
			return DNS_EAI_SOCKTYPE;
   25f8c:	f06f 0406 	mvn.w	r4, #6
   25f90:	e75d      	b.n	25e4e <nrf91_socket_offload_getaddrinfo+0xaa>
   25f92:	bf00      	nop
   25f94:	00044fa7 	.word	0x00044fa7
   25f98:	20014f2c 	.word	0x20014f2c
   25f9c:	00044f68 	.word	0x00044f68
   25fa0:	00043ff2 	.word	0x00043ff2
   25fa4:	00044fab 	.word	0x00044fab

00025fa8 <nrf91_socket_offload_sendmsg>:
{
   25fa8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   25fac:	4680      	mov	r8, r0
   25fae:	4691      	mov	r9, r2
	if (msg == NULL) {
   25fb0:	460c      	mov	r4, r1
   25fb2:	b1f9      	cbz	r1, 25ff4 <nrf91_socket_offload_sendmsg+0x4c>
	for (i = 0; i < msg->msg_iovlen; i++) {
   25fb4:	2300      	movs	r3, #0
	ssize_t len = 0;
   25fb6:	461a      	mov	r2, r3
   25fb8:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   25fba:	4298      	cmp	r0, r3
   25fbc:	d124      	bne.n	26008 <nrf91_socket_offload_sendmsg+0x60>
	if (len <= sizeof(buf)) {
   25fbe:	2a80      	cmp	r2, #128	; 0x80
   25fc0:	d86d      	bhi.n	2609e <nrf91_socket_offload_sendmsg+0xf6>
		for (i = 0; i < msg->msg_iovlen; i++) {
   25fc2:	2500      	movs	r5, #0
		k_mutex_lock(&sendmsg_lock, K_FOREVER);
   25fc4:	f04f 32ff 	mov.w	r2, #4294967295
   25fc8:	f04f 33ff 	mov.w	r3, #4294967295
   25fcc:	4836      	ldr	r0, [pc, #216]	; (260a8 <nrf91_socket_offload_sendmsg+0x100>)
   25fce:	f018 ffea 	bl	3efa6 <k_mutex_lock.constprop.0.isra.0>
		len = 0;
   25fd2:	462f      	mov	r7, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   25fd4:	4e35      	ldr	r6, [pc, #212]	; (260ac <nrf91_socket_offload_sendmsg+0x104>)
		for (i = 0; i < msg->msg_iovlen; i++) {
   25fd6:	68e3      	ldr	r3, [r4, #12]
   25fd8:	429d      	cmp	r5, r3
   25fda:	d31c      	bcc.n	26016 <nrf91_socket_offload_sendmsg+0x6e>
		offset = 0;
   25fdc:	2600      	movs	r6, #0
		ret = 0;
   25fde:	4635      	mov	r5, r6
			ret = nrf91_socket_offload_sendto(obj,
   25fe0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 260ac <nrf91_socket_offload_sendmsg+0x104>
		while ((offset < len) && (ret >= 0)) {
   25fe4:	42b7      	cmp	r7, r6
   25fe6:	dd01      	ble.n	25fec <nrf91_socket_offload_sendmsg+0x44>
   25fe8:	2d00      	cmp	r5, #0
   25fea:	da25      	bge.n	26038 <nrf91_socket_offload_sendmsg+0x90>
		k_mutex_unlock(&sendmsg_lock);
   25fec:	482e      	ldr	r0, [pc, #184]	; (260a8 <nrf91_socket_offload_sendmsg+0x100>)
   25fee:	f018 ffdc 	bl	3efaa <k_mutex_unlock.isra.0>
		return ret;
   25ff2:	e005      	b.n	26000 <nrf91_socket_offload_sendmsg+0x58>
		errno = EINVAL;
   25ff4:	f017 fb9b 	bl	3d72e <__errno>
   25ff8:	2316      	movs	r3, #22
		return -1;
   25ffa:	f04f 35ff 	mov.w	r5, #4294967295
		errno = EINVAL;
   25ffe:	6003      	str	r3, [r0, #0]
}
   26000:	4628      	mov	r0, r5
   26002:	b002      	add	sp, #8
   26004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   26008:	68a1      	ldr	r1, [r4, #8]
   2600a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   2600e:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   26010:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   26012:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   26014:	e7d1      	b.n	25fba <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   26016:	68a1      	ldr	r1, [r4, #8]
   26018:	19f0      	adds	r0, r6, r7
   2601a:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
   2601e:	685a      	ldr	r2, [r3, #4]
   26020:	f851 1035 	ldr.w	r1, [r1, r5, lsl #3]
   26024:	f01b f9be 	bl	413a4 <memcpy>
			len += msg->msg_iov[i].iov_len;
   26028:	68a3      	ldr	r3, [r4, #8]
   2602a:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   2602e:	4453      	add	r3, sl
   26030:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   26032:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   26034:	441f      	add	r7, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   26036:	e7ce      	b.n	25fd6 <nrf91_socket_offload_sendmsg+0x2e>
			ret = nrf91_socket_offload_sendto(obj,
   26038:	6863      	ldr	r3, [r4, #4]
   2603a:	1bba      	subs	r2, r7, r6
   2603c:	9301      	str	r3, [sp, #4]
   2603e:	6823      	ldr	r3, [r4, #0]
   26040:	eb0a 0106 	add.w	r1, sl, r6
   26044:	9300      	str	r3, [sp, #0]
   26046:	4640      	mov	r0, r8
   26048:	464b      	mov	r3, r9
   2604a:	f018 ff0b 	bl	3ee64 <nrf91_socket_offload_sendto>
			if (ret > 0) {
   2604e:	1e05      	subs	r5, r0, #0
				offset += ret;
   26050:	bfc8      	it	gt
   26052:	1976      	addgt	r6, r6, r5
   26054:	e7c6      	b.n	25fe4 <nrf91_socket_offload_sendmsg+0x3c>
		if (msg->msg_iov[i].iov_len == 0) {
   26056:	68a3      	ldr	r3, [r4, #8]
   26058:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
   2605c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   26060:	685b      	ldr	r3, [r3, #4]
   26062:	b133      	cbz	r3, 26072 <nrf91_socket_offload_sendmsg+0xca>
		offset = 0;
   26064:	2700      	movs	r7, #0
		while (offset < msg->msg_iov[i].iov_len) {
   26066:	68a3      	ldr	r3, [r4, #8]
   26068:	eb03 020a 	add.w	r2, r3, sl
   2606c:	6852      	ldr	r2, [r2, #4]
   2606e:	4297      	cmp	r7, r2
   26070:	d304      	bcc.n	2607c <nrf91_socket_offload_sendmsg+0xd4>
	for (i = 0; i < msg->msg_iovlen; i++) {
   26072:	3601      	adds	r6, #1
   26074:	68e3      	ldr	r3, [r4, #12]
   26076:	42b3      	cmp	r3, r6
   26078:	d8ed      	bhi.n	26056 <nrf91_socket_offload_sendmsg+0xae>
   2607a:	e7c1      	b.n	26000 <nrf91_socket_offload_sendmsg+0x58>
			ret = nrf91_socket_offload_sendto(obj,
   2607c:	f853 100a 	ldr.w	r1, [r3, sl]
   26080:	6863      	ldr	r3, [r4, #4]
   26082:	4439      	add	r1, r7
   26084:	9301      	str	r3, [sp, #4]
   26086:	6823      	ldr	r3, [r4, #0]
   26088:	4640      	mov	r0, r8
   2608a:	9300      	str	r3, [sp, #0]
   2608c:	1bd2      	subs	r2, r2, r7
   2608e:	464b      	mov	r3, r9
   26090:	f018 fee8 	bl	3ee64 <nrf91_socket_offload_sendto>
			if (ret < 0) {
   26094:	1e01      	subs	r1, r0, #0
   26096:	db05      	blt.n	260a4 <nrf91_socket_offload_sendmsg+0xfc>
			offset += ret;
   26098:	440f      	add	r7, r1
			len += ret;
   2609a:	440d      	add	r5, r1
   2609c:	e7e3      	b.n	26066 <nrf91_socket_offload_sendmsg+0xbe>
	for (i = 0; i < msg->msg_iovlen; i++) {
   2609e:	2600      	movs	r6, #0
	len = 0;
   260a0:	4635      	mov	r5, r6
   260a2:	e7e7      	b.n	26074 <nrf91_socket_offload_sendmsg+0xcc>
   260a4:	460d      	mov	r5, r1
   260a6:	e7ab      	b.n	26000 <nrf91_socket_offload_sendmsg+0x58>
   260a8:	20014f7c 	.word	0x20014f7c
   260ac:	2001a5d6 	.word	0x2001a5d6

000260b0 <allocate_ctx>:
{
   260b0:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&ctx_lock, K_FOREVER);
   260b2:	f04f 32ff 	mov.w	r2, #4294967295
   260b6:	f04f 33ff 	mov.w	r3, #4294967295
{
   260ba:	4604      	mov	r4, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   260bc:	480b      	ldr	r0, [pc, #44]	; (260ec <allocate_ctx+0x3c>)
   260be:	f018 ff72 	bl	3efa6 <k_mutex_lock.constprop.0.isra.0>
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   260c2:	2300      	movs	r3, #0
		if (offload_ctx[i].nrf_fd == -1) {
   260c4:	4a0a      	ldr	r2, [pc, #40]	; (260f0 <allocate_ctx+0x40>)
   260c6:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
   260ca:	3101      	adds	r1, #1
   260cc:	d108      	bne.n	260e0 <allocate_ctx+0x30>
			ctx = &offload_ctx[i];
   260ce:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
			ctx->nrf_fd = nrf_fd;
   260d2:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
	k_mutex_unlock(&ctx_lock);
   260d6:	4805      	ldr	r0, [pc, #20]	; (260ec <allocate_ctx+0x3c>)
   260d8:	f018 ff67 	bl	3efaa <k_mutex_unlock.isra.0>
}
   260dc:	4628      	mov	r0, r5
   260de:	bd38      	pop	{r3, r4, r5, pc}
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   260e0:	3301      	adds	r3, #1
   260e2:	2b08      	cmp	r3, #8
   260e4:	d1ef      	bne.n	260c6 <allocate_ctx+0x16>
	struct nrf_sock_ctx *ctx = NULL;
   260e6:	2500      	movs	r5, #0
   260e8:	e7f5      	b.n	260d6 <allocate_ctx+0x26>
   260ea:	bf00      	nop
   260ec:	20014f04 	.word	0x20014f04
   260f0:	20019394 	.word	0x20019394

000260f4 <release_ctx>:
{
   260f4:	b510      	push	{r4, lr}
	k_mutex_lock(&ctx_lock, K_FOREVER);
   260f6:	f04f 32ff 	mov.w	r2, #4294967295
{
   260fa:	4604      	mov	r4, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   260fc:	f04f 33ff 	mov.w	r3, #4294967295
   26100:	4806      	ldr	r0, [pc, #24]	; (2611c <release_ctx+0x28>)
   26102:	f018 ff50 	bl	3efa6 <k_mutex_lock.constprop.0.isra.0>
	ctx->lock = NULL;
   26106:	f04f 32ff 	mov.w	r2, #4294967295
   2610a:	2300      	movs	r3, #0
	k_mutex_unlock(&ctx_lock);
   2610c:	4803      	ldr	r0, [pc, #12]	; (2611c <release_ctx+0x28>)
	ctx->lock = NULL;
   2610e:	e9c4 2300 	strd	r2, r3, [r4]
}
   26112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_mutex_unlock(&ctx_lock);
   26116:	f018 bf48 	b.w	3efaa <k_mutex_unlock.isra.0>
   2611a:	bf00      	nop
   2611c:	20014f04 	.word	0x20014f04

00026120 <nrf91_socket_offload_accept>:
{
   26120:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26124:	b08b      	sub	sp, #44	; 0x2c
   26126:	4607      	mov	r7, r0
   26128:	460c      	mov	r4, r1
   2612a:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   2612c:	f7fa fc96 	bl	20a5c <z_reserve_fd>
   26130:	4606      	mov	r6, r0
	if (fd < 0) {
   26132:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   26134:	6838      	ldr	r0, [r7, #0]
	if (fd < 0) {
   26136:	db23      	blt.n	26180 <nrf91_socket_offload_accept+0x60>
	if ((addr != NULL) && (addrlen != NULL)) {
   26138:	b32c      	cbz	r4, 26186 <nrf91_socket_offload_accept+0x66>
   2613a:	b33d      	cbz	r5, 2618c <nrf91_socket_offload_accept+0x6c>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   2613c:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   2613e:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   26140:	2b08      	cmp	r3, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   26142:	bf0c      	ite	eq
   26144:	2310      	moveq	r3, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   26146:	2324      	movne	r3, #36	; 0x24
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   26148:	af01      	add	r7, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   2614a:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   2614c:	4639      	mov	r1, r7
   2614e:	f01a fab1 	bl	406b4 <nrf_accept>
	if (new_sd < 0) {
   26152:	f1b0 0900 	subs.w	r9, r0, #0
   26156:	db3b      	blt.n	261d0 <nrf91_socket_offload_accept+0xb0>
	ctx = allocate_ctx(new_sd);
   26158:	f7ff ffaa 	bl	260b0 <allocate_ctx>
	if (ctx == NULL) {
   2615c:	4680      	mov	r8, r0
   2615e:	b9c0      	cbnz	r0, 26192 <nrf91_socket_offload_accept+0x72>
		errno = ENOMEM;
   26160:	f017 fae5 	bl	3d72e <__errno>
   26164:	230c      	movs	r3, #12
   26166:	6003      	str	r3, [r0, #0]
		nrf_close(new_sd);
   26168:	4648      	mov	r0, r9
   2616a:	f01a f9f0 	bl	4054e <nrf_close>
	if (ctx != NULL) {
   2616e:	f1b8 0f00 	cmp.w	r8, #0
   26172:	d002      	beq.n	2617a <nrf91_socket_offload_accept+0x5a>
		release_ctx(ctx);
   26174:	4640      	mov	r0, r8
   26176:	f7ff ffbd 	bl	260f4 <release_ctx>
	z_free_fd(fd);
   2617a:	4630      	mov	r0, r6
   2617c:	f7fa fcbe 	bl	20afc <z_free_fd>
		return -1;
   26180:	f04f 36ff 	mov.w	r6, #4294967295
   26184:	e017      	b.n	261b6 <nrf91_socket_offload_accept+0x96>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   26186:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   26188:	4627      	mov	r7, r4
   2618a:	e7df      	b.n	2614c <nrf91_socket_offload_accept+0x2c>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   2618c:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   2618e:	462f      	mov	r7, r5
   26190:	e7dc      	b.n	2614c <nrf91_socket_offload_accept+0x2c>
	if ((addr != NULL) && (addrlen != NULL)) {
   26192:	b15c      	cbz	r4, 261ac <nrf91_socket_offload_accept+0x8c>
   26194:	b155      	cbz	r5, 261ac <nrf91_socket_offload_accept+0x8c>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   26196:	687b      	ldr	r3, [r7, #4]
   26198:	2b01      	cmp	r3, #1
   2619a:	d110      	bne.n	261be <nrf91_socket_offload_accept+0x9e>
			*addrlen = sizeof(struct sockaddr_in);
   2619c:	2208      	movs	r2, #8
   2619e:	602a      	str	r2, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   261a0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
	ptr->sin_family = AF_INET;
   261a4:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   261a6:	9b04      	ldr	r3, [sp, #16]
	ptr->sin_port = nrf_in->sin_port;
   261a8:	8062      	strh	r2, [r4, #2]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   261aa:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, ctx,
   261ac:	4641      	mov	r1, r8
   261ae:	4630      	mov	r0, r6
   261b0:	4a0a      	ldr	r2, [pc, #40]	; (261dc <nrf91_socket_offload_accept+0xbc>)
   261b2:	f7fa fc89 	bl	20ac8 <z_finalize_fd>
}
   261b6:	4630      	mov	r0, r6
   261b8:	b00b      	add	sp, #44	; 0x2c
   261ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   261be:	2b02      	cmp	r3, #2
   261c0:	d1d2      	bne.n	26168 <nrf91_socket_offload_accept+0x48>
			*addrlen = sizeof(struct sockaddr_in6);
   261c2:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   261c4:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
   261c6:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
   261c8:	a901      	add	r1, sp, #4
   261ca:	f018 fe1e 	bl	3ee0a <nrf_to_z_ipv6>
   261ce:	e7ed      	b.n	261ac <nrf91_socket_offload_accept+0x8c>
	if (new_sd != -1) {
   261d0:	f1b9 3fff 	cmp.w	r9, #4294967295
   261d4:	d0d1      	beq.n	2617a <nrf91_socket_offload_accept+0x5a>
	struct nrf_sock_ctx *ctx = NULL;
   261d6:	f04f 0800 	mov.w	r8, #0
   261da:	e7c5      	b.n	26168 <nrf91_socket_offload_accept+0x48>
   261dc:	00042c38 	.word	0x00042c38

000261e0 <nrf91_socket_create>:
{
   261e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (type & SOCK_NATIVE) {
   261e2:	1e0e      	subs	r6, r1, #0
{
   261e4:	4605      	mov	r5, r0
   261e6:	9201      	str	r2, [sp, #4]
	if (type & SOCK_NATIVE) {
   261e8:	da12      	bge.n	26210 <nrf91_socket_create+0x30>
	k_sched_lock();
   261ea:	f011 fbab 	bl	37944 <k_sched_lock>
	*offload_lock = true;
   261ee:	4f28      	ldr	r7, [pc, #160]	; (26290 <nrf91_socket_create+0xb0>)
   261f0:	2301      	movs	r3, #1
   261f2:	703b      	strb	r3, [r7, #0]
	return z_impl_zsock_socket(family, type, proto);
   261f4:	4628      	mov	r0, r5
   261f6:	9a01      	ldr	r2, [sp, #4]
   261f8:	f026 4140 	bic.w	r1, r6, #3221225472	; 0xc0000000
   261fc:	f7fb fb48 	bl	21890 <z_impl_zsock_socket>
	*offload_lock = false;
   26200:	2300      	movs	r3, #0
   26202:	703b      	strb	r3, [r7, #0]
   26204:	4604      	mov	r4, r0
	k_sched_unlock();
   26206:	f012 f83f 	bl	38288 <k_sched_unlock>
}
   2620a:	4620      	mov	r0, r4
   2620c:	b003      	add	sp, #12
   2620e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (type & SOCK_NATIVE_TLS) {
   26210:	0073      	lsls	r3, r6, #1
   26212:	d503      	bpl.n	2621c <nrf91_socket_create+0x3c>
	k_sched_lock();
   26214:	f011 fb96 	bl	37944 <k_sched_lock>
	*offload_lock = true;
   26218:	4f1e      	ldr	r7, [pc, #120]	; (26294 <nrf91_socket_create+0xb4>)
   2621a:	e7e9      	b.n	261f0 <nrf91_socket_create+0x10>
	fd = z_reserve_fd();
   2621c:	f7fa fc1e 	bl	20a5c <z_reserve_fd>
	if (fd < 0) {
   26220:	1e04      	subs	r4, r0, #0
   26222:	db0f      	blt.n	26244 <nrf91_socket_create+0x64>
	family = z_to_nrf_family(family);
   26224:	b2ad      	uxth	r5, r5
	switch (z_family) {
   26226:	2d03      	cmp	r5, #3
   26228:	d805      	bhi.n	26236 <nrf91_socket_create+0x56>
   2622a:	4b1b      	ldr	r3, [pc, #108]	; (26298 <nrf91_socket_create+0xb8>)
	if (family == -EAFNOSUPPORT) {
   2622c:	9a01      	ldr	r2, [sp, #4]
   2622e:	575d      	ldrsb	r5, [r3, r5]
   26230:	f115 0f6a 	cmn.w	r5, #106	; 0x6a
   26234:	d109      	bne.n	2624a <nrf91_socket_create+0x6a>
		errno = EAFNOSUPPORT;
   26236:	f017 fa7a 	bl	3d72e <__errno>
   2623a:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   2623c:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
   2623e:	4620      	mov	r0, r4
   26240:	f7fa fc5c 	bl	20afc <z_free_fd>
		return -1;
   26244:	f04f 34ff 	mov.w	r4, #4294967295
   26248:	e7df      	b.n	2620a <nrf91_socket_create+0x2a>
	proto = z_to_nrf_protocol(proto);
   2624a:	4610      	mov	r0, r2
   2624c:	f018 fd67 	bl	3ed1e <nrf_to_z_protocol>
	if (proto == -EPROTONOSUPPORT) {
   26250:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   26254:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   26256:	d103      	bne.n	26260 <nrf91_socket_create+0x80>
		errno = EPROTONOSUPPORT;
   26258:	f017 fa69 	bl	3d72e <__errno>
   2625c:	237b      	movs	r3, #123	; 0x7b
   2625e:	e7ed      	b.n	2623c <nrf91_socket_create+0x5c>
	retval = nrf_socket(family, type, proto);
   26260:	4628      	mov	r0, r5
   26262:	4631      	mov	r1, r6
   26264:	f01a f911 	bl	4048a <nrf_socket>
	if (sd < 0) {
   26268:	1e05      	subs	r5, r0, #0
   2626a:	dbe8      	blt.n	2623e <nrf91_socket_create+0x5e>
	ctx = allocate_ctx(sd);
   2626c:	f7ff ff20 	bl	260b0 <allocate_ctx>
	if (ctx == NULL) {
   26270:	4601      	mov	r1, r0
   26272:	b938      	cbnz	r0, 26284 <nrf91_socket_create+0xa4>
		errno = ENOMEM;
   26274:	f017 fa5b 	bl	3d72e <__errno>
   26278:	230c      	movs	r3, #12
   2627a:	6003      	str	r3, [r0, #0]
		nrf_close(sd);
   2627c:	4628      	mov	r0, r5
   2627e:	f01a f966 	bl	4054e <nrf_close>
   26282:	e7dc      	b.n	2623e <nrf91_socket_create+0x5e>
	z_finalize_fd(fd, ctx,
   26284:	4620      	mov	r0, r4
   26286:	4a05      	ldr	r2, [pc, #20]	; (2629c <nrf91_socket_create+0xbc>)
   26288:	f7fa fc1e 	bl	20ac8 <z_finalize_fd>
	return fd;
   2628c:	e7bd      	b.n	2620a <nrf91_socket_create+0x2a>
   2628e:	bf00      	nop
   26290:	2001a656 	.word	0x2001a656
   26294:	2001a657 	.word	0x2001a657
   26298:	00044fa7 	.word	0x00044fa7
   2629c:	00042c38 	.word	0x00042c38

000262a0 <at_monitor_sys_init>:
		k_heap_free(&at_monitor_heap, at_notif);
	}
}

static int at_monitor_sys_init(const struct device *unused)
{
   262a0:	b508      	push	{r3, lr}
	int err;

	err = nrf_modem_at_notif_handler_set(at_monitor_dispatch);
   262a2:	4805      	ldr	r0, [pc, #20]	; (262b8 <at_monitor_sys_init+0x18>)
   262a4:	f00e feaa 	bl	34ffc <nrf_modem_at_notif_handler_set>
	if (err) {
   262a8:	4602      	mov	r2, r0
   262aa:	b118      	cbz	r0, 262b4 <at_monitor_sys_init+0x14>
		LOG_ERR("Failed to hook the dispatch function, err %d", err);
   262ac:	2145      	movs	r1, #69	; 0x45
   262ae:	4803      	ldr	r0, [pc, #12]	; (262bc <at_monitor_sys_init+0x1c>)
   262b0:	f016 fbfe 	bl	3cab0 <z_log_minimal_printk>
	}

	return 0;
}
   262b4:	2000      	movs	r0, #0
   262b6:	bd08      	pop	{r3, pc}
   262b8:	000262c1 	.word	0x000262c1
   262bc:	00044fb1 	.word	0x00044fb1

000262c0 <at_monitor_dispatch>:
{
   262c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT_NO_MSG(notif != NULL);
   262c2:	4604      	mov	r4, r0
   262c4:	b940      	cbnz	r0, 262d8 <at_monitor_dispatch+0x18>
   262c6:	4931      	ldr	r1, [pc, #196]	; (2638c <at_monitor_dispatch+0xcc>)
   262c8:	4831      	ldr	r0, [pc, #196]	; (26390 <at_monitor_dispatch+0xd0>)
   262ca:	2224      	movs	r2, #36	; 0x24
   262cc:	f016 fbb6 	bl	3ca3c <assert_print>
   262d0:	2124      	movs	r1, #36	; 0x24
   262d2:	482e      	ldr	r0, [pc, #184]	; (2638c <at_monitor_dispatch+0xcc>)
   262d4:	f016 fbab 	bl	3ca2e <assert_post_action>
{
   262d8:	4d2e      	ldr	r5, [pc, #184]	; (26394 <at_monitor_dispatch+0xd4>)
	STRUCT_SECTION_FOREACH(at_monitor_isr_entry, e) {
   262da:	4e2f      	ldr	r6, [pc, #188]	; (26398 <at_monitor_dispatch+0xd8>)
   262dc:	4f2b      	ldr	r7, [pc, #172]	; (2638c <at_monitor_dispatch+0xcc>)
   262de:	42b5      	cmp	r5, r6
   262e0:	d908      	bls.n	262f4 <at_monitor_dispatch+0x34>
   262e2:	4639      	mov	r1, r7
   262e4:	482a      	ldr	r0, [pc, #168]	; (26390 <at_monitor_dispatch+0xd0>)
   262e6:	222a      	movs	r2, #42	; 0x2a
   262e8:	f016 fba8 	bl	3ca3c <assert_print>
   262ec:	212a      	movs	r1, #42	; 0x2a
   262ee:	4638      	mov	r0, r7
   262f0:	f016 fb9d 	bl	3ca2e <assert_post_action>
   262f4:	42b5      	cmp	r5, r6
   262f6:	d310      	bcc.n	2631a <at_monitor_dispatch+0x5a>
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   262f8:	4d28      	ldr	r5, [pc, #160]	; (2639c <at_monitor_dispatch+0xdc>)
   262fa:	4e29      	ldr	r6, [pc, #164]	; (263a0 <at_monitor_dispatch+0xe0>)
   262fc:	4f23      	ldr	r7, [pc, #140]	; (2638c <at_monitor_dispatch+0xcc>)
   262fe:	42b5      	cmp	r5, r6
   26300:	d908      	bls.n	26314 <at_monitor_dispatch+0x54>
   26302:	4639      	mov	r1, r7
   26304:	4822      	ldr	r0, [pc, #136]	; (26390 <at_monitor_dispatch+0xd0>)
   26306:	2232      	movs	r2, #50	; 0x32
   26308:	f016 fb98 	bl	3ca3c <assert_print>
   2630c:	2132      	movs	r1, #50	; 0x32
   2630e:	4638      	mov	r0, r7
   26310:	f016 fb8d 	bl	3ca2e <assert_post_action>
   26314:	42b5      	cmp	r5, r6
   26316:	d30f      	bcc.n	26338 <at_monitor_dispatch+0x78>
}
   26318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!e->paused && (e->filter == ANY || strstr(notif, e->filter))) {
   2631a:	7a2b      	ldrb	r3, [r5, #8]
   2631c:	b923      	cbnz	r3, 26328 <at_monitor_dispatch+0x68>
   2631e:	6829      	ldr	r1, [r5, #0]
   26320:	b921      	cbnz	r1, 2632c <at_monitor_dispatch+0x6c>
			e->handler(notif);
   26322:	4620      	mov	r0, r4
   26324:	686b      	ldr	r3, [r5, #4]
   26326:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(at_monitor_isr_entry, e) {
   26328:	350c      	adds	r5, #12
   2632a:	e7d8      	b.n	262de <at_monitor_dispatch+0x1e>
		if (!e->paused && (e->filter == ANY || strstr(notif, e->filter))) {
   2632c:	4620      	mov	r0, r4
   2632e:	f01b fa73 	bl	41818 <strstr>
   26332:	2800      	cmp	r0, #0
   26334:	d1f5      	bne.n	26322 <at_monitor_dispatch+0x62>
   26336:	e7f7      	b.n	26328 <at_monitor_dispatch+0x68>
		if (!e->paused && (e->filter == ANY || strstr(notif, e->filter))) {
   26338:	7a2b      	ldrb	r3, [r5, #8]
   2633a:	b9c3      	cbnz	r3, 2636e <at_monitor_dispatch+0xae>
   2633c:	6829      	ldr	r1, [r5, #0]
   2633e:	b989      	cbnz	r1, 26364 <at_monitor_dispatch+0xa4>
	sz_needed = sizeof(struct at_notif_fifo) + strlen(notif) + sizeof(char);
   26340:	4620      	mov	r0, r4
   26342:	f7f6 ff7e 	bl	1d242 <strlen>
	at_notif = k_heap_alloc(&at_monitor_heap, sz_needed, K_NO_WAIT);
   26346:	2200      	movs	r2, #0
   26348:	1d41      	adds	r1, r0, #5
   2634a:	2300      	movs	r3, #0
   2634c:	4815      	ldr	r0, [pc, #84]	; (263a4 <at_monitor_dispatch+0xe4>)
   2634e:	f01a fdd9 	bl	40f04 <k_heap_alloc>
	if (!at_notif) {
   26352:	4605      	mov	r5, r0
   26354:	b968      	cbnz	r0, 26372 <at_monitor_dispatch+0xb2>
		LOG_WRN("No heap space for incoming notification: %s",
   26356:	4622      	mov	r2, r4
}
   26358:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		LOG_WRN("No heap space for incoming notification: %s",
   2635c:	2157      	movs	r1, #87	; 0x57
   2635e:	4812      	ldr	r0, [pc, #72]	; (263a8 <at_monitor_dispatch+0xe8>)
   26360:	f016 bba6 	b.w	3cab0 <z_log_minimal_printk>
		if (!e->paused && (e->filter == ANY || strstr(notif, e->filter))) {
   26364:	4620      	mov	r0, r4
   26366:	f01b fa57 	bl	41818 <strstr>
   2636a:	2800      	cmp	r0, #0
   2636c:	d1e8      	bne.n	26340 <at_monitor_dispatch+0x80>
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   2636e:	350c      	adds	r5, #12
   26370:	e7c5      	b.n	262fe <at_monitor_dispatch+0x3e>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   26372:	4621      	mov	r1, r4
   26374:	3004      	adds	r0, #4
   26376:	f01b fa00 	bl	4177a <strcpy>
	k_fifo_put(&at_monitor_fifo, at_notif);
   2637a:	4629      	mov	r1, r5
   2637c:	480b      	ldr	r0, [pc, #44]	; (263ac <at_monitor_dispatch+0xec>)
   2637e:	f01a fdfa 	bl	40f76 <k_queue_append>
}
   26382:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_work_submit(&at_monitor_work);
   26386:	480a      	ldr	r0, [pc, #40]	; (263b0 <at_monitor_dispatch+0xf0>)
   26388:	f011 b800 	b.w	3738c <k_work_submit>
   2638c:	00044fe3 	.word	0x00044fe3
   26390:	00043ff2 	.word	0x00043ff2
   26394:	20014cec 	.word	0x20014cec
   26398:	20014cec 	.word	0x20014cec
   2639c:	20014c74 	.word	0x20014c74
   263a0:	20014cec 	.word	0x20014cec
   263a4:	20014e80 	.word	0x20014e80
   263a8:	0004500f 	.word	0x0004500f
   263ac:	20015110 	.word	0x20015110
   263b0:	200146a0 	.word	0x200146a0

000263b4 <at_monitor_task>:
{
   263b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_queue_get(queue, timeout);
   263b8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 2642c <at_monitor_task+0x78>
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   263bc:	4f17      	ldr	r7, [pc, #92]	; (2641c <at_monitor_task+0x68>)
   263be:	2200      	movs	r2, #0
   263c0:	2300      	movs	r3, #0
   263c2:	4648      	mov	r0, r9
   263c4:	f010 fc6c 	bl	36ca0 <z_impl_k_queue_get>
	while ((at_notif = k_fifo_get(&at_monitor_fifo, K_NO_WAIT))) {
   263c8:	4605      	mov	r5, r0
   263ca:	bb10      	cbnz	r0, 26412 <at_monitor_task+0x5e>
}
   263cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (!e->paused &&
   263d0:	7a23      	ldrb	r3, [r4, #8]
   263d2:	b92b      	cbnz	r3, 263e0 <at_monitor_task+0x2c>
			   (e->filter == ANY || strstr(at_notif->data, e->filter))) {
   263d4:	6821      	ldr	r1, [r4, #0]
   263d6:	1d2e      	adds	r6, r5, #4
			if (!e->paused &&
   263d8:	b9a9      	cbnz	r1, 26406 <at_monitor_task+0x52>
				e->handler(at_notif->data);
   263da:	4630      	mov	r0, r6
   263dc:	6863      	ldr	r3, [r4, #4]
   263de:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   263e0:	340c      	adds	r4, #12
   263e2:	42bc      	cmp	r4, r7
   263e4:	d908      	bls.n	263f8 <at_monitor_task+0x44>
   263e6:	4641      	mov	r1, r8
   263e8:	480d      	ldr	r0, [pc, #52]	; (26420 <at_monitor_task+0x6c>)
   263ea:	2253      	movs	r2, #83	; 0x53
   263ec:	f016 fb26 	bl	3ca3c <assert_print>
   263f0:	2153      	movs	r1, #83	; 0x53
   263f2:	4640      	mov	r0, r8
   263f4:	f016 fb1b 	bl	3ca2e <assert_post_action>
   263f8:	42bc      	cmp	r4, r7
   263fa:	d3e9      	bcc.n	263d0 <at_monitor_task+0x1c>
		k_heap_free(&at_monitor_heap, at_notif);
   263fc:	4629      	mov	r1, r5
   263fe:	4809      	ldr	r0, [pc, #36]	; (26424 <at_monitor_task+0x70>)
   26400:	f00f ff50 	bl	362a4 <k_heap_free>
   26404:	e7db      	b.n	263be <at_monitor_task+0xa>
			   (e->filter == ANY || strstr(at_notif->data, e->filter))) {
   26406:	4630      	mov	r0, r6
   26408:	f01b fa06 	bl	41818 <strstr>
   2640c:	2800      	cmp	r0, #0
   2640e:	d1e4      	bne.n	263da <at_monitor_task+0x26>
   26410:	e7e6      	b.n	263e0 <at_monitor_task+0x2c>
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   26412:	4c05      	ldr	r4, [pc, #20]	; (26428 <at_monitor_task+0x74>)
   26414:	f8df 8018 	ldr.w	r8, [pc, #24]	; 26430 <at_monitor_task+0x7c>
   26418:	e7e3      	b.n	263e2 <at_monitor_task+0x2e>
   2641a:	bf00      	nop
   2641c:	20014cec 	.word	0x20014cec
   26420:	00043ff2 	.word	0x00043ff2
   26424:	20014e80 	.word	0x20014e80
   26428:	20014c74 	.word	0x20014c74
   2642c:	20015110 	.word	0x20015110
   26430:	00044fe3 	.word	0x00044fe3

00026434 <write_uart_string>:
static char at_buf[AT_BUF_SIZE]; /* AT command and modem response buffer */
static struct k_work_q at_host_work_q;
static struct k_work cmd_send_work;

static inline void write_uart_string(const char *str)
{
   26434:	b538      	push	{r3, r4, r5, lr}
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
		uart_poll_out(uart_dev, str[i]);
   26436:	4d05      	ldr	r5, [pc, #20]	; (2644c <write_uart_string+0x18>)
   26438:	1e44      	subs	r4, r0, #1
	for (size_t i = 0; str[i]; i++) {
   2643a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   2643e:	b901      	cbnz	r1, 26442 <write_uart_string+0xe>
	}
}
   26440:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_dev, str[i]);
   26442:	6828      	ldr	r0, [r5, #0]
   26444:	6883      	ldr	r3, [r0, #8]
   26446:	685b      	ldr	r3, [r3, #4]
   26448:	4798      	blx	r3
	for (size_t i = 0; str[i]; i++) {
   2644a:	e7f6      	b.n	2643a <write_uart_string+0x6>
   2644c:	200193e8 	.word	0x200193e8

00026450 <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
   26450:	b508      	push	{r3, lr}
	ARG_UNUSED(work);

    /* Sending through string format rather than raw buffer in case
     * the buffer contains characters that need to be escaped
     */
	err = nrf_modem_at_cmd(at_buf, sizeof(at_buf), "%s", at_buf);
   26452:	4b0c      	ldr	r3, [pc, #48]	; (26484 <cmd_send+0x34>)
   26454:	4a0c      	ldr	r2, [pc, #48]	; (26488 <cmd_send+0x38>)
   26456:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   2645a:	4618      	mov	r0, r3
   2645c:	f00e fdfa 	bl	35054 <nrf_modem_at_cmd>
	if (err < 0) {
   26460:	1e02      	subs	r2, r0, #0
   26462:	da03      	bge.n	2646c <cmd_send+0x1c>
		LOG_ERR("Error while processing AT command: %d", err);
   26464:	2145      	movs	r1, #69	; 0x45
   26466:	4809      	ldr	r0, [pc, #36]	; (2648c <cmd_send+0x3c>)
   26468:	f016 fb22 	bl	3cab0 <z_log_minimal_printk>
	}

	write_uart_string(at_buf);
   2646c:	4805      	ldr	r0, [pc, #20]	; (26484 <cmd_send+0x34>)
   2646e:	f7ff ffe1 	bl	26434 <write_uart_string>

	at_buf_busy = false;
   26472:	2200      	movs	r2, #0
   26474:	4b06      	ldr	r3, [pc, #24]	; (26490 <cmd_send+0x40>)
   26476:	701a      	strb	r2, [r3, #0]
	uart_irq_rx_enable(uart_dev);
   26478:	4b06      	ldr	r3, [pc, #24]	; (26494 <cmd_send+0x44>)
   2647a:	6818      	ldr	r0, [r3, #0]
}
   2647c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
   26480:	f018 be36 	b.w	3f0f0 <z_impl_uart_irq_rx_enable>
   26484:	2001a658 	.word	0x2001a658
   26488:	0004a259 	.word	0x0004a259
   2648c:	0004504b 	.word	0x0004504b
   26490:	2001b658 	.word	0x2001b658
   26494:	200193e8 	.word	0x200193e8

00026498 <at_host_init>:

	ARG_UNUSED(arg);

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   26498:	2201      	movs	r2, #1
{
   2649a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		term_mode = mode;
   2649e:	4b3a      	ldr	r3, [pc, #232]	; (26588 <at_host_init+0xf0>)
{
   264a0:	b085      	sub	sp, #20
		term_mode = mode;
   264a2:	701a      	strb	r2, [r3, #0]
   264a4:	4839      	ldr	r0, [pc, #228]	; (2658c <at_host_init+0xf4>)
   264a6:	f00f fd01 	bl	35eac <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
   264aa:	4e39      	ldr	r6, [pc, #228]	; (26590 <at_host_init+0xf8>)
   264ac:	6030      	str	r0, [r6, #0]
	if (uart_dev == NULL) {
   264ae:	b980      	cbnz	r0, 264d2 <at_host_init+0x3a>
		LOG_ERR("Cannot bind %s\n", uart_dev_name);
   264b0:	4a36      	ldr	r2, [pc, #216]	; (2658c <at_host_init+0xf4>)
   264b2:	2145      	movs	r1, #69	; 0x45
   264b4:	4837      	ldr	r0, [pc, #220]	; (26594 <at_host_init+0xfc>)
   264b6:	f016 fafb 	bl	3cab0 <z_log_minimal_printk>
		return -EINVAL;
   264ba:	f06f 0215 	mvn.w	r2, #21
	}

	/* Initialize the UART module */
	err = at_uart_init(uart_dev_name);
	if (err) {
		LOG_ERR("UART could not be initialized: %d", err);
   264be:	2145      	movs	r1, #69	; 0x45
   264c0:	4835      	ldr	r0, [pc, #212]	; (26598 <at_host_init+0x100>)
   264c2:	f016 faf5 	bl	3cab0 <z_log_minimal_printk>
		return -EFAULT;
   264c6:	f06f 050d 	mvn.w	r5, #13
			   K_THREAD_STACK_SIZEOF(at_host_stack_area),
			   CONFIG_AT_HOST_THREAD_PRIO, NULL);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   264ca:	4628      	mov	r0, r5
   264cc:	b005      	add	sp, #20
   264ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   264d2:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
	return z_impl_k_uptime_ticks();
   264d6:	f01a fdf5 	bl	410c4 <z_impl_k_uptime_ticks>
   264da:	46b8      	mov	r8, r7
   264dc:	fba0 0307 	umull	r0, r3, r0, r7
   264e0:	fb07 3101 	mla	r1, r7, r1, r3
   264e4:	0bc0      	lsrs	r0, r0, #15
			LOG_INF("UART check failed: %d. "
   264e6:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 265b4 <at_host_init+0x11c>
   264ea:	ea40 4441 	orr.w	r4, r0, r1, lsl #17
		err = uart_err_check(uart_dev);
   264ee:	6830      	ldr	r0, [r6, #0]
	if (api->err_check == NULL) {
   264f0:	6883      	ldr	r3, [r0, #8]
   264f2:	689b      	ldr	r3, [r3, #8]
   264f4:	b1bb      	cbz	r3, 26526 <at_host_init+0x8e>
	return api->err_check(dev);
   264f6:	4798      	blx	r3
		if (err) {
   264f8:	4605      	mov	r5, r0
   264fa:	b360      	cbz	r0, 26556 <at_host_init+0xbe>
   264fc:	f01a fde2 	bl	410c4 <z_impl_k_uptime_ticks>
   26500:	fba0 3008 	umull	r3, r0, r0, r8
   26504:	fb07 0001 	mla	r0, r7, r1, r0
   26508:	0bdb      	lsrs	r3, r3, #15
   2650a:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
			if (k_uptime_get_32() - start_time >
   2650e:	1b1b      	subs	r3, r3, r4
   26510:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
				LOG_ERR("UART check failed: %d. "
   26514:	462a      	mov	r2, r5
			if (k_uptime_get_32() - start_time >
   26516:	d909      	bls.n	2652c <at_host_init+0x94>
				LOG_ERR("UART check failed: %d. "
   26518:	2145      	movs	r1, #69	; 0x45
   2651a:	4820      	ldr	r0, [pc, #128]	; (2659c <at_host_init+0x104>)
   2651c:	f016 fac8 	bl	3cab0 <z_log_minimal_printk>
				return -EIO;
   26520:	f06f 0204 	mvn.w	r2, #4
   26524:	e7cb      	b.n	264be <at_host_init+0x26>
		return -ENOSYS;
   26526:	f06f 0557 	mvn.w	r5, #87	; 0x57
   2652a:	e7e7      	b.n	264fc <at_host_init+0x64>
			LOG_INF("UART check failed: %d. "
   2652c:	2149      	movs	r1, #73	; 0x49
   2652e:	4648      	mov	r0, r9
   26530:	f016 fabe 	bl	3cab0 <z_log_minimal_printk>
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   26534:	6830      	ldr	r0, [r6, #0]
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->fifo_read == NULL) {
   26536:	6883      	ldr	r3, [r0, #8]
   26538:	699b      	ldr	r3, [r3, #24]
   2653a:	b903      	cbnz	r3, 2653e <at_host_init+0xa6>
   2653c:	e7fe      	b.n	2653c <at_host_init+0xa4>
		return -ENOSYS;
	}

	return api->fifo_read(dev, rx_data, size);
   2653e:	2201      	movs	r2, #1
   26540:	f10d 010f 	add.w	r1, sp, #15
   26544:	4798      	blx	r3
   26546:	2800      	cmp	r0, #0
   26548:	d1f4      	bne.n	26534 <at_host_init+0x9c>
	return z_impl_k_sleep(timeout);
   2654a:	2100      	movs	r1, #0
   2654c:	f44f 70a4 	mov.w	r0, #328	; 0x148
   26550:	f012 f84e 	bl	385f0 <z_impl_k_sleep>
	} while (err);
   26554:	e7cb      	b.n	264ee <at_host_init+0x56>
	uart_irq_callback_set(uart_dev, isr);
   26556:	6830      	ldr	r0, [r6, #0]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   26558:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   2655a:	b123      	cbz	r3, 26566 <at_host_init+0xce>
   2655c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2655e:	b113      	cbz	r3, 26566 <at_host_init+0xce>
		api->irq_callback_set(dev, cb, user_data);
   26560:	462a      	mov	r2, r5
   26562:	490f      	ldr	r1, [pc, #60]	; (265a0 <at_host_init+0x108>)
   26564:	4798      	blx	r3
	k_work_init(&cmd_send_work, cmd_send);
   26566:	490f      	ldr	r1, [pc, #60]	; (265a4 <at_host_init+0x10c>)
   26568:	480f      	ldr	r0, [pc, #60]	; (265a8 <at_host_init+0x110>)
   2656a:	f010 fe63 	bl	37234 <k_work_init>
	k_work_queue_start(&at_host_work_q, at_host_stack_area,
   2656e:	2300      	movs	r3, #0
   26570:	f44f 6280 	mov.w	r2, #1024	; 0x400
   26574:	9300      	str	r3, [sp, #0]
   26576:	490d      	ldr	r1, [pc, #52]	; (265ac <at_host_init+0x114>)
   26578:	230a      	movs	r3, #10
   2657a:	480d      	ldr	r0, [pc, #52]	; (265b0 <at_host_init+0x118>)
   2657c:	f010 ff60 	bl	37440 <k_work_queue_start>
	uart_irq_rx_enable(uart_dev);
   26580:	6830      	ldr	r0, [r6, #0]
   26582:	f018 fdb5 	bl	3f0f0 <z_impl_uart_irq_rx_enable>
}
   26586:	e7a0      	b.n	264ca <at_host_init+0x32>
   26588:	2001b65a 	.word	0x2001b65a
   2658c:	00044e85 	.word	0x00044e85
   26590:	200193e8 	.word	0x200193e8
   26594:	00045076 	.word	0x00045076
   26598:	00045100 	.word	0x00045100
   2659c:	0004508b 	.word	0x0004508b
   265a0:	000265b9 	.word	0x000265b9
   265a4:	00026451 	.word	0x00026451
   265a8:	200193d8 	.word	0x200193d8
   265ac:	2001f100 	.word	0x2001f100
   265b0:	200153f0 	.word	0x200153f0
   265b4:	000450c6 	.word	0x000450c6

000265b8 <isr>:
{
   265b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   265ba:	4604      	mov	r4, r0
	if (api->irq_update == NULL) {
   265bc:	6883      	ldr	r3, [r0, #8]
   265be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   265c0:	b103      	cbz	r3, 265c4 <isr+0xc>
	return api->irq_update(dev);
   265c2:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
   265c4:	68a3      	ldr	r3, [r4, #8]
   265c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   265c8:	b9c3      	cbnz	r3, 265fc <isr+0x44>
	while ((!at_buf_busy) &&
   265ca:	4e3a      	ldr	r6, [pc, #232]	; (266b4 <isr+0xfc>)
		if (at_cmd_len > 0) {
   265cc:	4d3a      	ldr	r5, [pc, #232]	; (266b8 <isr+0x100>)
	while ((!at_buf_busy) &&
   265ce:	7833      	ldrb	r3, [r6, #0]
   265d0:	b9c3      	cbnz	r3, 26604 <isr+0x4c>
	if (api->fifo_read == NULL) {
   265d2:	68a3      	ldr	r3, [r4, #8]
   265d4:	699b      	ldr	r3, [r3, #24]
   265d6:	b12b      	cbz	r3, 265e4 <isr+0x2c>
	return api->fifo_read(dev, rx_data, size);
   265d8:	2201      	movs	r2, #1
   265da:	4620      	mov	r0, r4
   265dc:	f10d 0107 	add.w	r1, sp, #7
   265e0:	4798      	blx	r3
   265e2:	b178      	cbz	r0, 26604 <isr+0x4c>
		uart_rx_handler(character);
   265e4:	f89d 2007 	ldrb.w	r2, [sp, #7]
	switch (character) {
   265e8:	2a08      	cmp	r2, #8
   265ea:	d001      	beq.n	265f0 <isr+0x38>
   265ec:	2a7f      	cmp	r2, #127	; 0x7f
   265ee:	d10b      	bne.n	26608 <isr+0x50>
		if (at_cmd_len > 0) {
   265f0:	682b      	ldr	r3, [r5, #0]
   265f2:	2b00      	cmp	r3, #0
   265f4:	d0eb      	beq.n	265ce <isr+0x16>
			at_cmd_len--;
   265f6:	3b01      	subs	r3, #1
   265f8:	602b      	str	r3, [r5, #0]
   265fa:	e7e8      	b.n	265ce <isr+0x16>
	return api->irq_rx_ready(dev);
   265fc:	4620      	mov	r0, r4
   265fe:	4798      	blx	r3
	if (!uart_irq_rx_ready(dev)) {
   26600:	2800      	cmp	r0, #0
   26602:	d1e2      	bne.n	265ca <isr+0x12>
}
   26604:	b003      	add	sp, #12
   26606:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!inside_quotes) {
   26608:	492c      	ldr	r1, [pc, #176]	; (266bc <isr+0x104>)
   2660a:	780b      	ldrb	r3, [r1, #0]
   2660c:	b983      	cbnz	r3, 26630 <isr+0x78>
		switch (character) {
   2660e:	2a0a      	cmp	r2, #10
   26610:	d018      	beq.n	26644 <isr+0x8c>
   26612:	2a0d      	cmp	r2, #13
   26614:	d008      	beq.n	26628 <isr+0x70>
   26616:	b95a      	cbnz	r2, 26630 <isr+0x78>
			if (term_mode == MODE_NULL_TERM) {
   26618:	4b29      	ldr	r3, [pc, #164]	; (266c0 <isr+0x108>)
   2661a:	781b      	ldrb	r3, [r3, #0]
   2661c:	b363      	cbz	r3, 26678 <isr+0xc0>
			LOG_WRN("Ignored null; would terminate string early.");
   2661e:	2157      	movs	r1, #87	; 0x57
   26620:	4828      	ldr	r0, [pc, #160]	; (266c4 <isr+0x10c>)
   26622:	f016 fa45 	bl	3cab0 <z_log_minimal_printk>
			return;
   26626:	e7d2      	b.n	265ce <isr+0x16>
			if (term_mode == MODE_CR) {
   26628:	4825      	ldr	r0, [pc, #148]	; (266c0 <isr+0x108>)
   2662a:	7800      	ldrb	r0, [r0, #0]
   2662c:	2801      	cmp	r0, #1
			    at_cmd_len > 0 &&
   2662e:	d023      	beq.n	26678 <isr+0xc0>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   26630:	682f      	ldr	r7, [r5, #0]
   26632:	1c78      	adds	r0, r7, #1
   26634:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   26638:	d313      	bcc.n	26662 <isr+0xaa>
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   2663a:	2145      	movs	r1, #69	; 0x45
   2663c:	4822      	ldr	r0, [pc, #136]	; (266c8 <isr+0x110>)
   2663e:	f016 fa37 	bl	3cab0 <z_log_minimal_printk>
		return;
   26642:	e7c4      	b.n	265ce <isr+0x16>
			if (term_mode == MODE_LF) {
   26644:	481e      	ldr	r0, [pc, #120]	; (266c0 <isr+0x108>)
   26646:	7800      	ldrb	r0, [r0, #0]
   26648:	2802      	cmp	r0, #2
   2664a:	d015      	beq.n	26678 <isr+0xc0>
			if (term_mode == MODE_CR_LF &&
   2664c:	2803      	cmp	r0, #3
   2664e:	d1ef      	bne.n	26630 <isr+0x78>
		if (at_cmd_len > 0) {
   26650:	682f      	ldr	r7, [r5, #0]
			if (term_mode == MODE_CR_LF &&
   26652:	2f00      	cmp	r7, #0
   26654:	d0ec      	beq.n	26630 <isr+0x78>
			    at_buf[at_cmd_len - 1] == '\r') {
   26656:	481d      	ldr	r0, [pc, #116]	; (266cc <isr+0x114>)
   26658:	4438      	add	r0, r7
			    at_cmd_len > 0 &&
   2665a:	f810 0c01 	ldrb.w	r0, [r0, #-1]
   2665e:	280d      	cmp	r0, #13
   26660:	e7e5      	b.n	2662e <isr+0x76>
	at_buf[at_cmd_len] = character;
   26662:	f8df c068 	ldr.w	ip, [pc, #104]	; 266cc <isr+0x114>
	if (character == '"') {
   26666:	2a22      	cmp	r2, #34	; 0x22
	at_buf[at_cmd_len] = character;
   26668:	f80c 2007 	strb.w	r2, [ip, r7]
	at_cmd_len++;
   2666c:	6028      	str	r0, [r5, #0]
	if (character == '"') {
   2666e:	d1ae      	bne.n	265ce <isr+0x16>
	if (!inside_quotes) {
   26670:	f083 0301 	eor.w	r3, r3, #1
		inside_quotes = !inside_quotes;
   26674:	700b      	strb	r3, [r1, #0]
   26676:	e7aa      	b.n	265ce <isr+0x16>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   26678:	2200      	movs	r2, #0
   2667a:	4b14      	ldr	r3, [pc, #80]	; (266cc <isr+0x114>)
	inside_quotes = false;
   2667c:	700a      	strb	r2, [r1, #0]
   2667e:	4619      	mov	r1, r3
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   26680:	6828      	ldr	r0, [r5, #0]
	at_cmd_len = 0;
   26682:	602a      	str	r2, [r5, #0]
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   26684:	541a      	strb	r2, [r3, r0]
		if (*c > ' ') {
   26686:	f813 2b01 	ldrb.w	r2, [r3], #1
   2668a:	2a20      	cmp	r2, #32
   2668c:	d802      	bhi.n	26694 <isr+0xdc>
		} else if (*c == '\0') {
   2668e:	2a00      	cmp	r2, #0
   26690:	d1f9      	bne.n	26686 <isr+0xce>
   26692:	e79c      	b.n	265ce <isr+0x16>
	if (at_buf[0]) {
   26694:	780b      	ldrb	r3, [r1, #0]
   26696:	2b00      	cmp	r3, #0
   26698:	d099      	beq.n	265ce <isr+0x16>
		uart_irq_rx_disable(uart_dev); /* Stop UART to protect at_buf */
   2669a:	4b0d      	ldr	r3, [pc, #52]	; (266d0 <isr+0x118>)
   2669c:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable != NULL) {
   2669e:	6883      	ldr	r3, [r0, #8]
   266a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   266a2:	b103      	cbz	r3, 266a6 <isr+0xee>
		api->irq_rx_disable(dev);
   266a4:	4798      	blx	r3
		at_buf_busy = true;
   266a6:	2301      	movs	r3, #1
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
   266a8:	490a      	ldr	r1, [pc, #40]	; (266d4 <isr+0x11c>)
   266aa:	480b      	ldr	r0, [pc, #44]	; (266d8 <isr+0x120>)
		at_buf_busy = true;
   266ac:	7033      	strb	r3, [r6, #0]
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
   266ae:	f010 fe19 	bl	372e4 <k_work_submit_to_queue>
   266b2:	e78c      	b.n	265ce <isr+0x16>
   266b4:	2001b658 	.word	0x2001b658
   266b8:	200193d4 	.word	0x200193d4
   266bc:	2001b659 	.word	0x2001b659
   266c0:	2001b65a 	.word	0x2001b65a
   266c4:	00045127 	.word	0x00045127
   266c8:	00045158 	.word	0x00045158
   266cc:	2001a658 	.word	0x2001a658
   266d0:	200193e8 	.word	0x200193e8
   266d4:	200193d8 	.word	0x200193d8
   266d8:	200153f0 	.word	0x200153f0

000266dc <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   266dc:	4b06      	ldr	r3, [pc, #24]	; (266f8 <is_valid_notification_char+0x1c>)
   266de:	5cc3      	ldrb	r3, [r0, r3]
   266e0:	f003 0303 	and.w	r3, r3, #3
   266e4:	2b02      	cmp	r3, #2
   266e6:	bf08      	it	eq
   266e8:	3820      	subeq	r0, #32

	if ((chr >= 'A') && (chr <= 'Z')) {
   266ea:	3841      	subs	r0, #65	; 0x41
   266ec:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
   266ee:	2819      	cmp	r0, #25
   266f0:	bf8c      	ite	hi
   266f2:	2000      	movhi	r0, #0
   266f4:	2001      	movls	r0, #1
   266f6:	4770      	bx	lr
   266f8:	0004bc8c 	.word	0x0004bc8c

000266fc <is_result>:

	return retval;
}

static bool is_result(const char *str)
{
   266fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   266fe:	4605      	mov	r5, r0
		"ERROR\r\n",
		"+CME ERROR",
		"+CMS ERROR"
	};

	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   26700:	2400      	movs	r4, #0
   26702:	4e0a      	ldr	r6, [pc, #40]	; (2672c <is_result+0x30>)
		diff = strncmp(str, toclip[i], strlen(toclip[i]));
   26704:	f856 1b04 	ldr.w	r1, [r6], #4
   26708:	4608      	mov	r0, r1
   2670a:	9101      	str	r1, [sp, #4]
   2670c:	f7f6 fd99 	bl	1d242 <strlen>
   26710:	9901      	ldr	r1, [sp, #4]
   26712:	4602      	mov	r2, r0
   26714:	4628      	mov	r0, r5
   26716:	f01b f838 	bl	4178a <strncmp>
		if (!diff) {
   2671a:	b128      	cbz	r0, 26728 <is_result+0x2c>
	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   2671c:	3401      	adds	r4, #1
   2671e:	2c04      	cmp	r4, #4
   26720:	d1f0      	bne.n	26704 <is_result+0x8>
			return true;
		}
	}

	return false;
   26722:	2000      	movs	r0, #0
}
   26724:	b002      	add	sp, #8
   26726:	bd70      	pop	{r4, r5, r6, pc}
			return true;
   26728:	2001      	movs	r0, #1
   2672a:	e7fb      	b.n	26724 <is_result+0x28>
   2672c:	00042c78 	.word	0x00042c78

00026730 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   26730:	b510      	push	{r4, lr}
   26732:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   26734:	f7f6 fd85 	bl	1d242 <strlen>
   26738:	2801      	cmp	r0, #1
   2673a:	d921      	bls.n	26780 <is_command+0x50>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   2673c:	7823      	ldrb	r3, [r4, #0]
   2673e:	4912      	ldr	r1, [pc, #72]	; (26788 <is_command+0x58>)
   26740:	5c5a      	ldrb	r2, [r3, r1]
   26742:	f002 0203 	and.w	r2, r2, #3
   26746:	2a02      	cmp	r2, #2
   26748:	bf08      	it	eq
   2674a:	3b20      	subeq	r3, #32
   2674c:	2b41      	cmp	r3, #65	; 0x41
   2674e:	d117      	bne.n	26780 <is_command+0x50>
   26750:	7863      	ldrb	r3, [r4, #1]
   26752:	5cca      	ldrb	r2, [r1, r3]
   26754:	f002 0203 	and.w	r2, r2, #3
   26758:	2a02      	cmp	r2, #2
   2675a:	bf08      	it	eq
   2675c:	3b20      	subeq	r3, #32
   2675e:	2b54      	cmp	r3, #84	; 0x54
   26760:	d10e      	bne.n	26780 <is_command+0x50>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   26762:	78a2      	ldrb	r2, [r4, #2]
   26764:	2a25      	cmp	r2, #37	; 0x25
   26766:	d00d      	beq.n	26784 <is_command+0x54>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   26768:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   2676c:	2b23      	cmp	r3, #35	; 0x23
   2676e:	d009      	beq.n	26784 <is_command+0x54>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   26770:	4610      	mov	r0, r2
   26772:	f018 fcc4 	bl	3f0fe <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   26776:	b910      	cbnz	r0, 2677e <is_command+0x4e>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   26778:	fab2 f082 	clz	r0, r2
   2677c:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   2677e:	bd10      	pop	{r4, pc}
		return false;
   26780:	2000      	movs	r0, #0
   26782:	e7fc      	b.n	2677e <is_command+0x4e>
		return true;
   26784:	2001      	movs	r0, #1
   26786:	e7fa      	b.n	2677e <is_command+0x4e>
   26788:	0004bc8c 	.word	0x0004bc8c

0002678c <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   2678c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   26790:	6805      	ldr	r5, [r0, #0]
{
   26792:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   26794:	9500      	str	r5, [sp, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   26796:	782b      	ldrb	r3, [r5, #0]
{
   26798:	4680      	mov	r8, r0
   2679a:	460f      	mov	r7, r1
   2679c:	4616      	mov	r6, r2
   2679e:	2b00      	cmp	r3, #0
   267a0:	f000 80ca 	beq.w	26938 <at_parse_process_element+0x1ac>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   267a4:	4b66      	ldr	r3, [pc, #408]	; (26940 <at_parse_process_element+0x1b4>)
   267a6:	781c      	ldrb	r4, [r3, #0]
   267a8:	2c06      	cmp	r4, #6
   267aa:	d110      	bne.n	267ce <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   267ac:	1c6b      	adds	r3, r5, #1
   267ae:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   267b0:	9a00      	ldr	r2, [sp, #0]
   267b2:	7810      	ldrb	r0, [r2, #0]
   267b4:	f7ff ff92 	bl	266dc <is_valid_notification_char>
   267b8:	b930      	cbnz	r0, 267c8 <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   267ba:	1b53      	subs	r3, r2, r5

		while (!is_terminated(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   267bc:	462a      	mov	r2, r5
   267be:	4639      	mov	r1, r7
   267c0:	4630      	mov	r0, r6
   267c2:	f018 fd05 	bl	3f1d0 <at_params_string_put>
   267c6:	e01c      	b.n	26802 <at_parse_process_element+0x76>
			tmpstr++;
   267c8:	3201      	adds	r2, #1
   267ca:	9200      	str	r2, [sp, #0]
   267cc:	e7f0      	b.n	267b0 <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   267ce:	2c07      	cmp	r4, #7
   267d0:	d125      	bne.n	2681e <at_parse_process_element+0x92>
		skip_command_prefix(&tmpstr);
   267d2:	4668      	mov	r0, sp
   267d4:	f018 fc9c 	bl	3f110 <skip_command_prefix>
	if (isalpha((int)chr) || isdigit((int)chr)) {
   267d8:	4a5a      	ldr	r2, [pc, #360]	; (26944 <at_parse_process_element+0x1b8>)
		while (is_valid_command_char(*tmpstr)) {
   267da:	9b00      	ldr	r3, [sp, #0]
   267dc:	7819      	ldrb	r1, [r3, #0]
   267de:	5c89      	ldrb	r1, [r1, r2]
   267e0:	0749      	lsls	r1, r1, #29
   267e2:	d115      	bne.n	26810 <at_parse_process_element+0x84>
		at_params_string_put(list, index, start_ptr,
   267e4:	462a      	mov	r2, r5
   267e6:	1b5b      	subs	r3, r3, r5
   267e8:	4639      	mov	r1, r7
   267ea:	4630      	mov	r0, r6
   267ec:	f018 fcf0 	bl	3f1d0 <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   267f0:	9b00      	ldr	r3, [sp, #0]
   267f2:	781a      	ldrb	r2, [r3, #0]
   267f4:	2a3d      	cmp	r2, #61	; 0x3d
   267f6:	d10e      	bne.n	26816 <at_parse_process_element+0x8a>
   267f8:	785a      	ldrb	r2, [r3, #1]
   267fa:	2a3f      	cmp	r2, #63	; 0x3f
   267fc:	d101      	bne.n	26802 <at_parse_process_element+0x76>
			tmpstr += 2;
   267fe:	3302      	adds	r3, #2
			tmpstr++;
   26800:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   26802:	2000      	movs	r0, #0
	*str = tmpstr;
   26804:	9b00      	ldr	r3, [sp, #0]
   26806:	f8c8 3000 	str.w	r3, [r8]
}
   2680a:	b023      	add	sp, #140	; 0x8c
   2680c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   26810:	3301      	adds	r3, #1
   26812:	9300      	str	r3, [sp, #0]
   26814:	e7e1      	b.n	267da <at_parse_process_element+0x4e>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   26816:	2a3f      	cmp	r2, #63	; 0x3f
   26818:	d1f3      	bne.n	26802 <at_parse_process_element+0x76>
			tmpstr++;
   2681a:	3301      	adds	r3, #1
   2681c:	e7f0      	b.n	26800 <at_parse_process_element+0x74>
	} else if (state == OPTIONAL) {
   2681e:	2c08      	cmp	r4, #8
   26820:	d103      	bne.n	2682a <at_parse_process_element+0x9e>
		at_params_empty_put(list, index);
   26822:	4610      	mov	r0, r2
   26824:	f018 fca6 	bl	3f174 <at_params_empty_put>
   26828:	e7eb      	b.n	26802 <at_parse_process_element+0x76>
	} else if (state == STRING) {
   2682a:	2c02      	cmp	r4, #2
   2682c:	d111      	bne.n	26852 <at_parse_process_element+0xc6>
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   2682e:	9a00      	ldr	r2, [sp, #0]
   26830:	7811      	ldrb	r1, [r2, #0]
   26832:	4608      	mov	r0, r1
   26834:	f018 fc63 	bl	3f0fe <is_lfcr>
   26838:	b918      	cbnz	r0, 26842 <at_parse_process_element+0xb6>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2683a:	b111      	cbz	r1, 26842 <at_parse_process_element+0xb6>
			tmpstr++;
   2683c:	3201      	adds	r2, #1
   2683e:	9200      	str	r2, [sp, #0]
   26840:	e7f5      	b.n	2682e <at_parse_process_element+0xa2>
		at_params_string_put(list, index, start_ptr,
   26842:	1b53      	subs	r3, r2, r5
		at_params_string_put(list, index, start_ptr,
   26844:	462a      	mov	r2, r5
   26846:	4639      	mov	r1, r7
   26848:	4630      	mov	r0, r6
   2684a:	f018 fcc1 	bl	3f1d0 <at_params_string_put>
		tmpstr++;
   2684e:	9b00      	ldr	r3, [sp, #0]
   26850:	e7e3      	b.n	2681a <at_parse_process_element+0x8e>
	} else if (state == QUOTED_STRING) {
   26852:	2c03      	cmp	r4, #3
   26854:	d109      	bne.n	2686a <at_parse_process_element+0xde>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   26856:	9b00      	ldr	r3, [sp, #0]
   26858:	781a      	ldrb	r2, [r3, #0]
	if (chr == '"') {
   2685a:	2a22      	cmp	r2, #34	; 0x22
   2685c:	d003      	beq.n	26866 <at_parse_process_element+0xda>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2685e:	b112      	cbz	r2, 26866 <at_parse_process_element+0xda>
			tmpstr++;
   26860:	3301      	adds	r3, #1
   26862:	9300      	str	r3, [sp, #0]
   26864:	e7f7      	b.n	26856 <at_parse_process_element+0xca>
		at_params_string_put(list, index, start_ptr,
   26866:	1b5b      	subs	r3, r3, r5
   26868:	e7ec      	b.n	26844 <at_parse_process_element+0xb8>
	} else if (state == ARRAY) {
   2686a:	2c01      	cmp	r4, #1
   2686c:	d13c      	bne.n	268e8 <at_parse_process_element+0x15c>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   2686e:	4628      	mov	r0, r5
   26870:	220a      	movs	r2, #10
   26872:	a901      	add	r1, sp, #4
   26874:	f014 f8f8 	bl	3aa68 <strtoul>
		tmpstr = next;
   26878:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   2687a:	4d33      	ldr	r5, [pc, #204]	; (26948 <at_parse_process_element+0x1bc>)
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   2687c:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   2687e:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   26880:	9800      	ldr	r0, [sp, #0]
   26882:	7803      	ldrb	r3, [r0, #0]
	if (chr == ')') {
   26884:	2b29      	cmp	r3, #41	; 0x29
   26886:	d01f      	beq.n	268c8 <at_parse_process_element+0x13c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   26888:	b1f3      	cbz	r3, 268c8 <at_parse_process_element+0x13c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   2688a:	3b2c      	subs	r3, #44	; 0x2c
   2688c:	b2db      	uxtb	r3, r3
   2688e:	3001      	adds	r0, #1
   26890:	2b11      	cmp	r3, #17
				tmparray[i++] =
   26892:	9000      	str	r0, [sp, #0]
   26894:	d826      	bhi.n	268e4 <at_parse_process_element+0x158>
   26896:	fa25 f303 	lsr.w	r3, r5, r3
   2689a:	07db      	lsls	r3, r3, #31
   2689c:	d522      	bpl.n	268e4 <at_parse_process_element+0x158>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   2689e:	220a      	movs	r2, #10
   268a0:	a901      	add	r1, sp, #4
   268a2:	f014 f8e1 	bl	3aa68 <strtoul>
				tmparray[i++] =
   268a6:	ab22      	add	r3, sp, #136	; 0x88
   268a8:	f104 0901 	add.w	r9, r4, #1
   268ac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   268b0:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   268b4:	9800      	ldr	r0, [sp, #0]
   268b6:	f7f6 fcc4 	bl	1d242 <strlen>
   268ba:	4604      	mov	r4, r0
   268bc:	9801      	ldr	r0, [sp, #4]
   268be:	f7f6 fcc0 	bl	1d242 <strlen>
   268c2:	4284      	cmp	r4, r0
   268c4:	d107      	bne.n	268d6 <at_parse_process_element+0x14a>
				tmparray[i++] =
   268c6:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   268c8:	4639      	mov	r1, r7
   268ca:	4630      	mov	r0, r6
   268cc:	00a3      	lsls	r3, r4, #2
   268ce:	aa02      	add	r2, sp, #8
   268d0:	f018 fca4 	bl	3f21c <at_params_array_put>
		tmpstr++;
   268d4:	e7bb      	b.n	2684e <at_parse_process_element+0xc2>
					tmpstr = next;
   268d6:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   268d8:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   268dc:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   268de:	d0f2      	beq.n	268c6 <at_parse_process_element+0x13a>
				tmpstr++;
   268e0:	464c      	mov	r4, r9
   268e2:	e7cd      	b.n	26880 <at_parse_process_element+0xf4>
   268e4:	46a1      	mov	r9, r4
   268e6:	e7fb      	b.n	268e0 <at_parse_process_element+0x154>
	} else if (state == NUMBER) {
   268e8:	2c04      	cmp	r4, #4
   268ea:	d10d      	bne.n	26908 <at_parse_process_element+0x17c>
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   268ec:	220a      	movs	r2, #10
   268ee:	4628      	mov	r0, r5
   268f0:	a902      	add	r1, sp, #8
   268f2:	f014 f83d 	bl	3a970 <strtoll>
   268f6:	460b      	mov	r3, r1
		tmpstr = next;
   268f8:	9902      	ldr	r1, [sp, #8]
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   268fa:	4602      	mov	r2, r0
		tmpstr = next;
   268fc:	9100      	str	r1, [sp, #0]
		at_params_int_put(list, index, value);
   268fe:	4630      	mov	r0, r6
   26900:	4639      	mov	r1, r7
   26902:	f018 fc4e 	bl	3f1a2 <at_params_int_put>
   26906:	e77c      	b.n	26802 <at_parse_process_element+0x76>
	} else if (state == SMS_PDU) {
   26908:	2c05      	cmp	r4, #5
   2690a:	d10b      	bne.n	26924 <at_parse_process_element+0x198>
		while (isxdigit((int)*tmpstr)) {
   2690c:	490d      	ldr	r1, [pc, #52]	; (26944 <at_parse_process_element+0x1b8>)
   2690e:	9b00      	ldr	r3, [sp, #0]
   26910:	781a      	ldrb	r2, [r3, #0]
   26912:	5c52      	ldrb	r2, [r2, r1]
   26914:	f012 0f44 	tst.w	r2, #68	; 0x44
   26918:	d101      	bne.n	2691e <at_parse_process_element+0x192>
		at_params_string_put(list, index, start_ptr,
   2691a:	1b5b      	subs	r3, r3, r5
   2691c:	e74e      	b.n	267bc <at_parse_process_element+0x30>
			tmpstr++;
   2691e:	3301      	adds	r3, #1
   26920:	9300      	str	r3, [sp, #0]
   26922:	e7f4      	b.n	2690e <at_parse_process_element+0x182>
	} else if (state == CLAC) {
   26924:	2c09      	cmp	r4, #9
   26926:	f47f af6c 	bne.w	26802 <at_parse_process_element+0x76>
		while (!is_terminated(*tmpstr)) {
   2692a:	9b00      	ldr	r3, [sp, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2692c:	781a      	ldrb	r2, [r3, #0]
   2692e:	2a00      	cmp	r2, #0
   26930:	d0f3      	beq.n	2691a <at_parse_process_element+0x18e>
			tmpstr++;
   26932:	3301      	adds	r3, #1
   26934:	9300      	str	r3, [sp, #0]
   26936:	e7f8      	b.n	2692a <at_parse_process_element+0x19e>
		return -1;
   26938:	f04f 30ff 	mov.w	r0, #4294967295
   2693c:	e765      	b.n	2680a <at_parse_process_element+0x7e>
   2693e:	bf00      	nop
   26940:	2001b65c 	.word	0x2001b65c
   26944:	0004bc8c 	.word	0x0004bc8c
   26948:	00024001 	.word	0x00024001

0002694c <at_parse_detect_type>:
{
   2694c:	b570      	push	{r4, r5, r6, lr}
   2694e:	4605      	mov	r5, r0
	const char *tmpstr = *str;
   26950:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   26952:	4e64      	ldr	r6, [pc, #400]	; (26ae4 <at_parse_detect_type+0x198>)
   26954:	2900      	cmp	r1, #0
   26956:	d137      	bne.n	269c8 <at_parse_detect_type+0x7c>
   26958:	7823      	ldrb	r3, [r4, #0]
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2695a:	2b2b      	cmp	r3, #43	; 0x2b
   2695c:	d001      	beq.n	26962 <at_parse_detect_type+0x16>
   2695e:	2b25      	cmp	r3, #37	; 0x25
   26960:	d132      	bne.n	269c8 <at_parse_detect_type+0x7c>
	state = new_state;
   26962:	2206      	movs	r2, #6
   26964:	4b60      	ldr	r3, [pc, #384]	; (26ae8 <at_parse_detect_type+0x19c>)
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   26966:	4620      	mov	r0, r4
	state = new_state;
   26968:	701a      	strb	r2, [r3, #0]
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   2696a:	4960      	ldr	r1, [pc, #384]	; (26aec <at_parse_detect_type+0x1a0>)
   2696c:	2205      	movs	r2, #5
   2696e:	f01a ff0c 	bl	4178a <strncmp>
   26972:	b920      	cbnz	r0, 2697e <at_parse_detect_type+0x32>
			retval = true;
   26974:	2001      	movs	r0, #1
		set_type_string = check_response_for_forced_string(tmpstr);
   26976:	7030      	strb	r0, [r6, #0]
	return 0;
   26978:	2000      	movs	r0, #0
	*str = tmpstr;
   2697a:	602c      	str	r4, [r5, #0]
	return 0;
   2697c:	e064      	b.n	26a48 <at_parse_detect_type+0xfc>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   2697e:	2205      	movs	r2, #5
   26980:	4620      	mov	r0, r4
   26982:	495b      	ldr	r1, [pc, #364]	; (26af0 <at_parse_detect_type+0x1a4>)
   26984:	f01a ff01 	bl	4178a <strncmp>
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   26988:	2800      	cmp	r0, #0
   2698a:	d0f3      	beq.n	26974 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   2698c:	220b      	movs	r2, #11
   2698e:	4620      	mov	r0, r4
   26990:	4958      	ldr	r1, [pc, #352]	; (26af4 <at_parse_detect_type+0x1a8>)
   26992:	f01a fefa 	bl	4178a <strncmp>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   26996:	2800      	cmp	r0, #0
   26998:	d0ec      	beq.n	26974 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   2699a:	220a      	movs	r2, #10
   2699c:	4620      	mov	r0, r4
   2699e:	4956      	ldr	r1, [pc, #344]	; (26af8 <at_parse_detect_type+0x1ac>)
   269a0:	f01a fef3 	bl	4178a <strncmp>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   269a4:	2800      	cmp	r0, #0
   269a6:	d0e5      	beq.n	26974 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   269a8:	220b      	movs	r2, #11
   269aa:	4620      	mov	r0, r4
   269ac:	4953      	ldr	r1, [pc, #332]	; (26afc <at_parse_detect_type+0x1b0>)
   269ae:	f01a feec 	bl	4178a <strncmp>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   269b2:	2800      	cmp	r0, #0
   269b4:	d0de      	beq.n	26974 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%XICCID", AT_CMD_XICCID_LEN)) {
   269b6:	2207      	movs	r2, #7
   269b8:	4620      	mov	r0, r4
   269ba:	4951      	ldr	r1, [pc, #324]	; (26b00 <at_parse_detect_type+0x1b4>)
   269bc:	f01a fee5 	bl	4178a <strncmp>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   269c0:	fab0 f080 	clz	r0, r0
   269c4:	0940      	lsrs	r0, r0, #5
   269c6:	e7d6      	b.n	26976 <at_parse_detect_type+0x2a>
	} else if (set_type_string) {
   269c8:	7833      	ldrb	r3, [r6, #0]
   269ca:	b113      	cbz	r3, 269d2 <at_parse_detect_type+0x86>
	state = new_state;
   269cc:	4b46      	ldr	r3, [pc, #280]	; (26ae8 <at_parse_detect_type+0x19c>)
   269ce:	2202      	movs	r2, #2
   269d0:	e043      	b.n	26a5a <at_parse_detect_type+0x10e>
	} else if ((index > 0) && is_clac(tmpstr)) {
   269d2:	2900      	cmp	r1, #0
   269d4:	dd39      	ble.n	26a4a <at_parse_detect_type+0xfe>
   269d6:	4622      	mov	r2, r4
   269d8:	4616      	mov	r6, r2
 * @retval false Otherwise
 */
static bool is_clac(const char *str)
{
	/* skip leading <CR><LF>, if any, as check not from index 0 */
	while (is_lfcr(*str)) {
   269da:	f812 0b01 	ldrb.w	r0, [r2], #1
   269de:	f018 fb8e 	bl	3f0fe <is_lfcr>
   269e2:	2800      	cmp	r0, #0
   269e4:	d1f8      	bne.n	269d8 <at_parse_detect_type+0x8c>
		str++;
	}

	if (strlen(str) < 4) {
   269e6:	4630      	mov	r0, r6
   269e8:	f7f6 fc2b 	bl	1d242 <strlen>
   269ec:	2803      	cmp	r0, #3
   269ee:	d970      	bls.n	26ad2 <at_parse_detect_type+0x186>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   269f0:	7833      	ldrb	r3, [r6, #0]
   269f2:	4a44      	ldr	r2, [pc, #272]	; (26b04 <at_parse_detect_type+0x1b8>)
   269f4:	5c99      	ldrb	r1, [r3, r2]
   269f6:	f001 0103 	and.w	r1, r1, #3
   269fa:	2902      	cmp	r1, #2
   269fc:	bf08      	it	eq
   269fe:	3b20      	subeq	r3, #32
   26a00:	2b41      	cmp	r3, #65	; 0x41
   26a02:	d166      	bne.n	26ad2 <at_parse_detect_type+0x186>
   26a04:	7873      	ldrb	r3, [r6, #1]
   26a06:	5cd1      	ldrb	r1, [r2, r3]
   26a08:	f001 0103 	and.w	r1, r1, #3
   26a0c:	2902      	cmp	r1, #2
   26a0e:	bf08      	it	eq
   26a10:	3b20      	subeq	r3, #32
   26a12:	2b54      	cmp	r3, #84	; 0x54
   26a14:	d15d      	bne.n	26ad2 <at_parse_detect_type+0x186>
		/* Not an AT command */
		return false;
	}

	if ((toupper(str[2]) != '+') && (toupper(str[2]) != '%')) {
   26a16:	78b3      	ldrb	r3, [r6, #2]
   26a18:	5cd1      	ldrb	r1, [r2, r3]
   26a1a:	f001 0103 	and.w	r1, r1, #3
   26a1e:	2902      	cmp	r1, #2
   26a20:	bf08      	it	eq
   26a22:	3b20      	subeq	r3, #32
   26a24:	2b2b      	cmp	r3, #43	; 0x2b
   26a26:	d00a      	beq.n	26a3e <at_parse_detect_type+0xf2>
   26a28:	2b25      	cmp	r3, #37	; 0x25
   26a2a:	d152      	bne.n	26ad2 <at_parse_detect_type+0x186>
		/* Neither AT+ nor AT% */
		return false;
	}

	if ((toupper(str[2]) == '%') && (toupper(str[3]) == 'X')) {
   26a2c:	78f3      	ldrb	r3, [r6, #3]
   26a2e:	5cd2      	ldrb	r2, [r2, r3]
   26a30:	f002 0203 	and.w	r2, r2, #3
   26a34:	2a02      	cmp	r2, #2
   26a36:	bf08      	it	eq
   26a38:	3b20      	subeq	r3, #32
   26a3a:	2b58      	cmp	r3, #88	; 0x58
   26a3c:	d049      	beq.n	26ad2 <at_parse_detect_type+0x186>
	state = new_state;
   26a3e:	2209      	movs	r2, #9
		return -2;
   26a40:	f06f 0001 	mvn.w	r0, #1
	state = new_state;
   26a44:	4b28      	ldr	r3, [pc, #160]	; (26ae8 <at_parse_detect_type+0x19c>)
   26a46:	701a      	strb	r2, [r3, #0]
}
   26a48:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   26a4a:	d108      	bne.n	26a5e <at_parse_detect_type+0x112>
   26a4c:	4620      	mov	r0, r4
   26a4e:	f7ff fe6f 	bl	26730 <is_command>
   26a52:	4b25      	ldr	r3, [pc, #148]	; (26ae8 <at_parse_detect_type+0x19c>)
   26a54:	2800      	cmp	r0, #0
   26a56:	d0ba      	beq.n	269ce <at_parse_detect_type+0x82>
	state = new_state;
   26a58:	2207      	movs	r2, #7
   26a5a:	701a      	strb	r2, [r3, #0]
}
   26a5c:	e78c      	b.n	26978 <at_parse_detect_type+0x2c>
	} else if (is_number(*tmpstr)) {
   26a5e:	7822      	ldrb	r2, [r4, #0]
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   26a60:	4b28      	ldr	r3, [pc, #160]	; (26b04 <at_parse_detect_type+0x1b8>)
   26a62:	5cd3      	ldrb	r3, [r2, r3]
   26a64:	0759      	lsls	r1, r3, #29
   26a66:	d403      	bmi.n	26a70 <at_parse_detect_type+0x124>
   26a68:	2a2d      	cmp	r2, #45	; 0x2d
   26a6a:	d001      	beq.n	26a70 <at_parse_detect_type+0x124>
   26a6c:	2a2b      	cmp	r2, #43	; 0x2b
   26a6e:	d102      	bne.n	26a76 <at_parse_detect_type+0x12a>
	state = new_state;
   26a70:	2204      	movs	r2, #4
   26a72:	4b1d      	ldr	r3, [pc, #116]	; (26ae8 <at_parse_detect_type+0x19c>)
   26a74:	e7f1      	b.n	26a5a <at_parse_detect_type+0x10e>
	if (chr == '"') {
   26a76:	2a22      	cmp	r2, #34	; 0x22
   26a78:	d006      	beq.n	26a88 <at_parse_detect_type+0x13c>
	if (chr == '(') {
   26a7a:	2a28      	cmp	r2, #40	; 0x28
   26a7c:	d109      	bne.n	26a92 <at_parse_detect_type+0x146>
   26a7e:	2201      	movs	r2, #1
   26a80:	4b19      	ldr	r3, [pc, #100]	; (26ae8 <at_parse_detect_type+0x19c>)
		tmpstr++;
   26a82:	4414      	add	r4, r2
	state = new_state;
   26a84:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   26a86:	e777      	b.n	26978 <at_parse_detect_type+0x2c>
	state = new_state;
   26a88:	2203      	movs	r2, #3
   26a8a:	4b17      	ldr	r3, [pc, #92]	; (26ae8 <at_parse_detect_type+0x19c>)
		tmpstr++;
   26a8c:	3401      	adds	r4, #1
	state = new_state;
   26a8e:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   26a90:	e772      	b.n	26978 <at_parse_detect_type+0x2c>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   26a92:	4610      	mov	r0, r2
   26a94:	f018 fb33 	bl	3f0fe <is_lfcr>
   26a98:	b178      	cbz	r0, 26aba <at_parse_detect_type+0x16e>
   26a9a:	4913      	ldr	r1, [pc, #76]	; (26ae8 <at_parse_detect_type+0x19c>)
   26a9c:	780b      	ldrb	r3, [r1, #0]
   26a9e:	2b04      	cmp	r3, #4
   26aa0:	d108      	bne.n	26ab4 <at_parse_detect_type+0x168>
		while (is_lfcr(*tmpstr)) {
   26aa2:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   26aa6:	f018 fb2a 	bl	3f0fe <is_lfcr>
   26aaa:	2800      	cmp	r0, #0
   26aac:	d1f9      	bne.n	26aa2 <at_parse_detect_type+0x156>
	state = new_state;
   26aae:	2305      	movs	r3, #5
   26ab0:	700b      	strb	r3, [r1, #0]
}
   26ab2:	e761      	b.n	26978 <at_parse_detect_type+0x2c>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   26ab4:	2b08      	cmp	r3, #8
   26ab6:	f43f af5f 	beq.w	26978 <at_parse_detect_type+0x2c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   26aba:	3a2c      	subs	r2, #44	; 0x2c
   26abc:	b2d2      	uxtb	r2, r2
   26abe:	2a11      	cmp	r2, #17
   26ac0:	d80c      	bhi.n	26adc <at_parse_detect_type+0x190>
   26ac2:	4b11      	ldr	r3, [pc, #68]	; (26b08 <at_parse_detect_type+0x1bc>)
   26ac4:	fa23 f202 	lsr.w	r2, r3, r2
   26ac8:	07d3      	lsls	r3, r2, #31
   26aca:	d507      	bpl.n	26adc <at_parse_detect_type+0x190>
	state = new_state;
   26acc:	2208      	movs	r2, #8
   26ace:	4b06      	ldr	r3, [pc, #24]	; (26ae8 <at_parse_detect_type+0x19c>)
   26ad0:	e7c3      	b.n	26a5a <at_parse_detect_type+0x10e>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   26ad2:	7823      	ldrb	r3, [r4, #0]
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   26ad4:	2b2b      	cmp	r3, #43	; 0x2b
   26ad6:	d001      	beq.n	26adc <at_parse_detect_type+0x190>
   26ad8:	2b25      	cmp	r3, #37	; 0x25
   26ada:	d1c0      	bne.n	26a5e <at_parse_detect_type+0x112>
		return -1;
   26adc:	f04f 30ff 	mov.w	r0, #4294967295
		*str = tmpstr;
   26ae0:	602c      	str	r4, [r5, #0]
		return -1;
   26ae2:	e7b1      	b.n	26a48 <at_parse_detect_type+0xfc>
   26ae4:	2001b65b 	.word	0x2001b65b
   26ae8:	2001b65c 	.word	0x2001b65c
   26aec:	00045185 	.word	0x00045185
   26af0:	0004518b 	.word	0x0004518b
   26af4:	00045191 	.word	0x00045191
   26af8:	0004519d 	.word	0x0004519d
   26afc:	000451a8 	.word	0x000451a8
   26b00:	000451b4 	.word	0x000451b4
   26b04:	0004bc8c 	.word	0x0004bc8c
   26b08:	00024001 	.word	0x00024001

00026b0c <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   26b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26b10:	4689      	mov	r9, r1
   26b12:	4616      	mov	r6, r2
   26b14:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   26b16:	4680      	mov	r8, r0
{
   26b18:	b085      	sub	sp, #20
	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   26b1a:	2800      	cmp	r0, #0
   26b1c:	f000 8097 	beq.w	26c4e <at_parser_max_params_from_str+0x142>
   26b20:	2a00      	cmp	r2, #0
   26b22:	f000 8094 	beq.w	26c4e <at_parser_max_params_from_str+0x142>
   26b26:	6853      	ldr	r3, [r2, #4]
   26b28:	2b00      	cmp	r3, #0
   26b2a:	f000 8090 	beq.w	26c4e <at_parser_max_params_from_str+0x142>
	state = IDLE;
   26b2e:	2500      	movs	r5, #0
	int index = 0;
   26b30:	462c      	mov	r4, r5
		return -EINVAL;
	}

	at_params_list_clear(list);
   26b32:	4610      	mov	r0, r2
   26b34:	f000 f8e8 	bl	26d08 <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   26b38:	6833      	ldr	r3, [r6, #0]
	const char *str = *at_params_str;
   26b3a:	f8cd 800c 	str.w	r8, [sp, #12]
	max_params_count = MIN(max_params_count, list->param_count);
   26b3e:	429f      	cmp	r7, r3
   26b40:	bf28      	it	cs
   26b42:	461f      	movcs	r7, r3
	state = IDLE;
   26b44:	4b43      	ldr	r3, [pc, #268]	; (26c54 <at_parser_max_params_from_str+0x148>)
   26b46:	701d      	strb	r5, [r3, #0]
	set_type_string = false;
   26b48:	4b43      	ldr	r3, [pc, #268]	; (26c58 <at_parser_max_params_from_str+0x14c>)
   26b4a:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   26b4c:	9b03      	ldr	r3, [sp, #12]
   26b4e:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   26b50:	2a00      	cmp	r2, #0
   26b52:	d055      	beq.n	26c00 <at_parser_max_params_from_str+0xf4>
   26b54:	42a7      	cmp	r7, r4
   26b56:	d953      	bls.n	26c00 <at_parser_max_params_from_str+0xf4>
		if (isspace((int)*str)) {
   26b58:	4940      	ldr	r1, [pc, #256]	; (26c5c <at_parser_max_params_from_str+0x150>)
		ret = at_parse_detect_type(&str, index);
   26b5a:	a803      	add	r0, sp, #12
		if (isspace((int)*str)) {
   26b5c:	5c52      	ldrb	r2, [r2, r1]
   26b5e:	0711      	lsls	r1, r2, #28
			str++;
   26b60:	bf48      	it	mi
   26b62:	3301      	addmi	r3, #1
		ret = at_parse_detect_type(&str, index);
   26b64:	4621      	mov	r1, r4
			str++;
   26b66:	bf48      	it	mi
   26b68:	9303      	strmi	r3, [sp, #12]
		ret = at_parse_detect_type(&str, index);
   26b6a:	f7ff feef 	bl	2694c <at_parse_detect_type>
		if (ret == -1) {
   26b6e:	1c42      	adds	r2, r0, #1
   26b70:	d046      	beq.n	26c00 <at_parser_max_params_from_str+0xf4>
		if (ret == -2) {
   26b72:	3002      	adds	r0, #2
			index = 0;
   26b74:	bf08      	it	eq
   26b76:	2400      	moveq	r4, #0
		if (at_parse_process_element(&str, index, list) == -1) {
   26b78:	4632      	mov	r2, r6
   26b7a:	4621      	mov	r1, r4
   26b7c:	a803      	add	r0, sp, #12
			str = *at_params_str;
   26b7e:	bf08      	it	eq
   26b80:	f8cd 800c 	streq.w	r8, [sp, #12]
		if (at_parse_process_element(&str, index, list) == -1) {
   26b84:	f7ff fe02 	bl	2678c <at_parse_process_element>
   26b88:	3001      	adds	r0, #1
   26b8a:	d039      	beq.n	26c00 <at_parser_max_params_from_str+0xf4>
		if (is_separator(*str)) {
   26b8c:	9a03      	ldr	r2, [sp, #12]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   26b8e:	7813      	ldrb	r3, [r2, #0]
   26b90:	3b2c      	subs	r3, #44	; 0x2c
   26b92:	b2db      	uxtb	r3, r3
   26b94:	2b11      	cmp	r3, #17
   26b96:	d81b      	bhi.n	26bd0 <at_parser_max_params_from_str+0xc4>
   26b98:	4931      	ldr	r1, [pc, #196]	; (26c60 <at_parser_max_params_from_str+0x154>)
   26b9a:	fa21 f303 	lsr.w	r3, r1, r3
   26b9e:	07db      	lsls	r3, r3, #31
   26ba0:	d516      	bpl.n	26bd0 <at_parser_max_params_from_str+0xc4>
			if (is_lfcr(*(str + 1))) {
   26ba2:	7850      	ldrb	r0, [r2, #1]
   26ba4:	f018 faab 	bl	3f0fe <is_lfcr>
   26ba8:	b178      	cbz	r0, 26bca <at_parser_max_params_from_str+0xbe>
				index++;
   26baa:	3401      	adds	r4, #1
				if (index == max_params) {
   26bac:	42bc      	cmp	r4, r7
   26bae:	d046      	beq.n	26c3e <at_parser_max_params_from_str+0x132>
				if (at_parse_detect_type(&str, index) == -1) {
   26bb0:	4621      	mov	r1, r4
   26bb2:	a803      	add	r0, sp, #12
   26bb4:	f7ff feca 	bl	2694c <at_parse_detect_type>
   26bb8:	3001      	adds	r0, #1
   26bba:	d021      	beq.n	26c00 <at_parser_max_params_from_str+0xf4>
				if (at_parse_process_element(&str, index,
   26bbc:	4632      	mov	r2, r6
   26bbe:	4621      	mov	r1, r4
   26bc0:	a803      	add	r0, sp, #12
   26bc2:	f7ff fde3 	bl	2678c <at_parse_process_element>
   26bc6:	3001      	adds	r0, #1
   26bc8:	d01a      	beq.n	26c00 <at_parser_max_params_from_str+0xf4>
			str++;
   26bca:	9b03      	ldr	r3, [sp, #12]
   26bcc:	3301      	adds	r3, #1
   26bce:	9303      	str	r3, [sp, #12]
		if (is_lfcr(*str)) {
   26bd0:	f8dd b00c 	ldr.w	fp, [sp, #12]
   26bd4:	f89b 0000 	ldrb.w	r0, [fp]
   26bd8:	f018 fa91 	bl	3f0fe <is_lfcr>
   26bdc:	b350      	cbz	r0, 26c34 <at_parser_max_params_from_str+0x128>
   26bde:	f10b 0101 	add.w	r1, fp, #1
			while (is_lfcr(str[++i])) {
   26be2:	9101      	str	r1, [sp, #4]
   26be4:	eba1 0a0b 	sub.w	sl, r1, fp
   26be8:	f811 2b01 	ldrb.w	r2, [r1], #1
   26bec:	4610      	mov	r0, r2
   26bee:	f018 fa86 	bl	3f0fe <is_lfcr>
   26bf2:	9b01      	ldr	r3, [sp, #4]
   26bf4:	2800      	cmp	r0, #0
   26bf6:	d1f4      	bne.n	26be2 <at_parser_max_params_from_str+0xd6>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   26bf8:	b99a      	cbnz	r2, 26c22 <at_parser_max_params_from_str+0x116>
				str += i;
   26bfa:	9b03      	ldr	r3, [sp, #12]
   26bfc:	4453      	add	r3, sl
   26bfe:	9303      	str	r3, [sp, #12]
	*at_params_str = str;
   26c00:	9c03      	ldr	r4, [sp, #12]
	if (oversized) {
   26c02:	b9f5      	cbnz	r5, 26c42 <at_parser_max_params_from_str+0x136>
   26c04:	7823      	ldrb	r3, [r4, #0]
   26c06:	b11b      	cbz	r3, 26c10 <at_parser_max_params_from_str+0x104>
	if (!is_terminated(*str) && !is_result(str)) {
   26c08:	4620      	mov	r0, r4
   26c0a:	f7ff fd77 	bl	266fc <is_result>
   26c0e:	b1d8      	cbz	r0, 26c48 <at_parser_max_params_from_str+0x13c>
	return 0;
   26c10:	2000      	movs	r0, #0

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   26c12:	f1b9 0f00 	cmp.w	r9, #0
   26c16:	d001      	beq.n	26c1c <at_parser_max_params_from_str+0x110>
		*next_param_str = (char *)at_params_str;
   26c18:	f8c9 4000 	str.w	r4, [r9]
	}

	return err;
}
   26c1c:	b005      	add	sp, #20
   26c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   26c22:	2a2b      	cmp	r2, #43	; 0x2b
   26c24:	d0e9      	beq.n	26bfa <at_parser_max_params_from_str+0xee>
   26c26:	2a25      	cmp	r2, #37	; 0x25
   26c28:	d0e7      	beq.n	26bfa <at_parser_max_params_from_str+0xee>
			    is_result(str + i)) {
   26c2a:	4618      	mov	r0, r3
   26c2c:	f7ff fd66 	bl	266fc <is_result>
			if (is_terminated(str[i]) || is_notification(str[i]) ||
   26c30:	2800      	cmp	r0, #0
   26c32:	d1e2      	bne.n	26bfa <at_parser_max_params_from_str+0xee>
		index++;
   26c34:	3401      	adds	r4, #1
			oversized = true;
   26c36:	42bc      	cmp	r4, r7
   26c38:	bf08      	it	eq
   26c3a:	2501      	moveq	r5, #1
   26c3c:	e786      	b.n	26b4c <at_parser_max_params_from_str+0x40>
					oversized = true;
   26c3e:	4605      	mov	r5, r0
   26c40:	e7de      	b.n	26c00 <at_parser_max_params_from_str+0xf4>
		return -E2BIG;
   26c42:	f06f 0006 	mvn.w	r0, #6
   26c46:	e7e4      	b.n	26c12 <at_parser_max_params_from_str+0x106>
		return -EAGAIN;
   26c48:	f06f 000a 	mvn.w	r0, #10
   26c4c:	e7e1      	b.n	26c12 <at_parser_max_params_from_str+0x106>
		return -EINVAL;
   26c4e:	f06f 0015 	mvn.w	r0, #21
   26c52:	e7e3      	b.n	26c1c <at_parser_max_params_from_str+0x110>
   26c54:	2001b65c 	.word	0x2001b65c
   26c58:	2001b65b 	.word	0x2001b65b
   26c5c:	0004bc8c 	.word	0x0004bc8c
   26c60:	00024001 	.word	0x00024001

00026c64 <at_params_get>:
}

/* Internal function. Parameter cannot be null. */
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
   26c64:	b538      	push	{r3, r4, r5, lr}
   26c66:	460d      	mov	r5, r1
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");
   26c68:	4604      	mov	r4, r0
   26c6a:	b940      	cbnz	r0, 26c7e <at_params_get+0x1a>
   26c6c:	4908      	ldr	r1, [pc, #32]	; (26c90 <at_params_get+0x2c>)
   26c6e:	4809      	ldr	r0, [pc, #36]	; (26c94 <at_params_get+0x30>)
   26c70:	222b      	movs	r2, #43	; 0x2b
   26c72:	f015 fee3 	bl	3ca3c <assert_print>
   26c76:	212b      	movs	r1, #43	; 0x2b
   26c78:	4805      	ldr	r0, [pc, #20]	; (26c90 <at_params_get+0x2c>)
   26c7a:	f015 fed8 	bl	3ca2e <assert_post_action>

	if (index >= list->param_count) {
   26c7e:	6823      	ldr	r3, [r4, #0]
   26c80:	42ab      	cmp	r3, r5
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   26c82:	bf8a      	itet	hi
   26c84:	6860      	ldrhi	r0, [r4, #4]
		return NULL;
   26c86:	2000      	movls	r0, #0
	return &param[index];
   26c88:	eb00 1005 	addhi.w	r0, r0, r5, lsl #4
}
   26c8c:	bd38      	pop	{r3, r4, r5, pc}
   26c8e:	bf00      	nop
   26c90:	000451df 	.word	0x000451df
   26c94:	00043ff2 	.word	0x00043ff2

00026c98 <at_param_size>:

/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
   26c98:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   26c9a:	4604      	mov	r4, r0
   26c9c:	b940      	cbnz	r0, 26cb0 <at_param_size+0x18>
   26c9e:	490a      	ldr	r1, [pc, #40]	; (26cc8 <at_param_size+0x30>)
   26ca0:	480a      	ldr	r0, [pc, #40]	; (26ccc <at_param_size+0x34>)
   26ca2:	2239      	movs	r2, #57	; 0x39
   26ca4:	f015 feca 	bl	3ca3c <assert_print>
   26ca8:	2139      	movs	r1, #57	; 0x39
   26caa:	4807      	ldr	r0, [pc, #28]	; (26cc8 <at_param_size+0x30>)
   26cac:	f015 febf 	bl	3ca2e <assert_post_action>

	if (param->type == AT_PARAM_TYPE_NUM_INT) {
   26cb0:	7823      	ldrb	r3, [r4, #0]
   26cb2:	2b01      	cmp	r3, #1
   26cb4:	d004      	beq.n	26cc0 <at_param_size+0x28>
		return sizeof(uint64_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   26cb6:	3b02      	subs	r3, #2
   26cb8:	2b01      	cmp	r3, #1
   26cba:	d803      	bhi.n	26cc4 <at_param_size+0x2c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   26cbc:	6860      	ldr	r0, [r4, #4]
	}

	return 0;
}
   26cbe:	bd10      	pop	{r4, pc}
		return sizeof(uint64_t);
   26cc0:	2008      	movs	r0, #8
   26cc2:	e7fc      	b.n	26cbe <at_param_size+0x26>
	return 0;
   26cc4:	2000      	movs	r0, #0
   26cc6:	e7fa      	b.n	26cbe <at_param_size+0x26>
   26cc8:	000451df 	.word	0x000451df
   26ccc:	00043ff2 	.word	0x00043ff2

00026cd0 <at_param_clear>:
{
   26cd0:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   26cd2:	4604      	mov	r4, r0
   26cd4:	b940      	cbnz	r0, 26ce8 <at_param_clear+0x18>
   26cd6:	490a      	ldr	r1, [pc, #40]	; (26d00 <at_param_clear+0x30>)
   26cd8:	480a      	ldr	r0, [pc, #40]	; (26d04 <at_param_clear+0x34>)
   26cda:	221d      	movs	r2, #29
   26cdc:	f015 feae 	bl	3ca3c <assert_print>
   26ce0:	211d      	movs	r1, #29
   26ce2:	4807      	ldr	r0, [pc, #28]	; (26d00 <at_param_clear+0x30>)
   26ce4:	f015 fea3 	bl	3ca2e <assert_post_action>
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   26ce8:	7823      	ldrb	r3, [r4, #0]
   26cea:	3b02      	subs	r3, #2
   26cec:	2b01      	cmp	r3, #1
   26cee:	d802      	bhi.n	26cf6 <at_param_clear+0x26>
		k_free(param->value.str_val);
   26cf0:	68a0      	ldr	r0, [r4, #8]
   26cf2:	f01a fac6 	bl	41282 <k_free>
	param->value.int_val = 0;
   26cf6:	2200      	movs	r2, #0
   26cf8:	2300      	movs	r3, #0
   26cfa:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   26cfe:	bd10      	pop	{r4, pc}
   26d00:	000451df 	.word	0x000451df
   26d04:	00043ff2 	.word	0x00043ff2

00026d08 <at_params_list_clear>:
	list->param_count = max_params_count;
	return 0;
}

void at_params_list_clear(struct at_param_list *list)
{
   26d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (list == NULL || list->params == NULL) {
   26d0c:	4604      	mov	r4, r0
   26d0e:	b140      	cbz	r0, 26d22 <at_params_list_clear+0x1a>
   26d10:	6843      	ldr	r3, [r0, #4]
   26d12:	b133      	cbz	r3, 26d22 <at_params_list_clear+0x1a>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   26d14:	2600      	movs	r6, #0
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   26d16:	4f0f      	ldr	r7, [pc, #60]	; (26d54 <at_params_list_clear+0x4c>)
   26d18:	f8df 803c 	ldr.w	r8, [pc, #60]	; 26d58 <at_params_list_clear+0x50>
	for (size_t i = 0; i < list->param_count; ++i) {
   26d1c:	6823      	ldr	r3, [r4, #0]
   26d1e:	429e      	cmp	r6, r3
   26d20:	d301      	bcc.n	26d26 <at_params_list_clear+0x1e>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   26d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		at_param_clear(&params[i]);
   26d26:	6865      	ldr	r5, [r4, #4]
   26d28:	eb05 1506 	add.w	r5, r5, r6, lsl #4
   26d2c:	4628      	mov	r0, r5
   26d2e:	f7ff ffcf 	bl	26cd0 <at_param_clear>
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   26d32:	b945      	cbnz	r5, 26d46 <at_params_list_clear+0x3e>
   26d34:	4639      	mov	r1, r7
   26d36:	4640      	mov	r0, r8
   26d38:	2214      	movs	r2, #20
   26d3a:	f015 fe7f 	bl	3ca3c <assert_print>
   26d3e:	2114      	movs	r1, #20
   26d40:	4638      	mov	r0, r7
   26d42:	f015 fe74 	bl	3ca2e <assert_post_action>
__ssp_bos_icheck3(memset, void *, int)
   26d46:	2210      	movs	r2, #16
   26d48:	2100      	movs	r1, #0
   26d4a:	4628      	mov	r0, r5
   26d4c:	f01a fb4a 	bl	413e4 <memset>
	for (size_t i = 0; i < list->param_count; ++i) {
   26d50:	3601      	adds	r6, #1
   26d52:	e7e3      	b.n	26d1c <at_params_list_clear+0x14>
   26d54:	000451df 	.word	0x000451df
   26d58:	00043ff2 	.word	0x00043ff2

00026d5c <at_handler_cscon>:
		event_handler_list_dispatch(&evt);
	}
}

static void at_handler_cscon(const char *response)
{
   26d5c:	b510      	push	{r4, lr}
   26d5e:	4604      	mov	r4, r0
   26d60:	b090      	sub	sp, #64	; 0x40
	int err;
	struct lte_lc_evt evt = {0};
   26d62:	2240      	movs	r2, #64	; 0x40
   26d64:	2100      	movs	r1, #0
   26d66:	4668      	mov	r0, sp
   26d68:	f01a fb3c 	bl	413e4 <memset>

	__ASSERT_NO_MSG(response != NULL);
   26d6c:	b954      	cbnz	r4, 26d84 <at_handler_cscon+0x28>
   26d6e:	490f      	ldr	r1, [pc, #60]	; (26dac <at_handler_cscon+0x50>)
   26d70:	480f      	ldr	r0, [pc, #60]	; (26db0 <at_handler_cscon+0x54>)
   26d72:	f240 120b 	movw	r2, #267	; 0x10b
   26d76:	f015 fe61 	bl	3ca3c <assert_print>
   26d7a:	f240 110b 	movw	r1, #267	; 0x10b
   26d7e:	480b      	ldr	r0, [pc, #44]	; (26dac <at_handler_cscon+0x50>)
   26d80:	f015 fe55 	bl	3ca2e <assert_post_action>

	LOG_DBG("+CSCON notification");

	err = parse_rrc_mode(response, &evt.rrc_mode, AT_CSCON_RRC_MODE_INDEX);
   26d84:	2201      	movs	r2, #1
   26d86:	4620      	mov	r0, r4
   26d88:	a902      	add	r1, sp, #8
   26d8a:	f000 fe6f 	bl	27a6c <parse_rrc_mode>
	if (err) {
   26d8e:	4602      	mov	r2, r0
   26d90:	b128      	cbz	r0, 26d9e <at_handler_cscon+0x42>
		LOG_ERR("Can't parse signalling mode, error: %d", err);
   26d92:	2145      	movs	r1, #69	; 0x45
   26d94:	4807      	ldr	r0, [pc, #28]	; (26db4 <at_handler_cscon+0x58>)
   26d96:	f015 fe8b 	bl	3cab0 <z_log_minimal_printk>
	}

	evt.type = LTE_LC_EVT_RRC_UPDATE;

	event_handler_list_dispatch(&evt);
}
   26d9a:	b010      	add	sp, #64	; 0x40
   26d9c:	bd10      	pop	{r4, pc}
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   26d9e:	2303      	movs	r3, #3
	event_handler_list_dispatch(&evt);
   26da0:	4668      	mov	r0, sp
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   26da2:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   26da6:	f000 fd95 	bl	278d4 <event_handler_list_dispatch>
   26daa:	e7f6      	b.n	26d9a <at_handler_cscon+0x3e>
   26dac:	0004520d 	.word	0x0004520d
   26db0:	00043ff2 	.word	0x00043ff2
   26db4:	0004523b 	.word	0x0004523b

00026db8 <at_handler_cedrxp>:

static void at_handler_cedrxp(const char *response)
{
   26db8:	b510      	push	{r4, lr}
   26dba:	4604      	mov	r4, r0
   26dbc:	b090      	sub	sp, #64	; 0x40
	int err;
	struct lte_lc_evt evt = {0};
   26dbe:	2240      	movs	r2, #64	; 0x40
   26dc0:	2100      	movs	r1, #0
   26dc2:	4668      	mov	r0, sp
   26dc4:	f01a fb0e 	bl	413e4 <memset>

	__ASSERT_NO_MSG(response != NULL);
   26dc8:	b954      	cbnz	r4, 26de0 <at_handler_cedrxp+0x28>
   26dca:	490f      	ldr	r1, [pc, #60]	; (26e08 <at_handler_cedrxp+0x50>)
   26dcc:	480f      	ldr	r0, [pc, #60]	; (26e0c <at_handler_cedrxp+0x54>)
   26dce:	f240 1225 	movw	r2, #293	; 0x125
   26dd2:	f015 fe33 	bl	3ca3c <assert_print>
   26dd6:	f240 1125 	movw	r1, #293	; 0x125
   26dda:	480b      	ldr	r0, [pc, #44]	; (26e08 <at_handler_cedrxp+0x50>)
   26ddc:	f015 fe27 	bl	3ca2e <assert_post_action>

	LOG_DBG("+CEDRXP notification");

	err = parse_edrx(response, &evt.edrx_cfg);
   26de0:	4620      	mov	r0, r4
   26de2:	a902      	add	r1, sp, #8
   26de4:	f7f7 f920 	bl	1e028 <parse_edrx>
	if (err) {
   26de8:	4602      	mov	r2, r0
   26dea:	b128      	cbz	r0, 26df8 <at_handler_cedrxp+0x40>
		LOG_ERR("Can't parse eDRX, error: %d", err);
   26dec:	2145      	movs	r1, #69	; 0x45
   26dee:	4808      	ldr	r0, [pc, #32]	; (26e10 <at_handler_cedrxp+0x58>)
   26df0:	f015 fe5e 	bl	3cab0 <z_log_minimal_printk>
	}

	evt.type = LTE_LC_EVT_EDRX_UPDATE;

	event_handler_list_dispatch(&evt);
}
   26df4:	b010      	add	sp, #64	; 0x40
   26df6:	bd10      	pop	{r4, pc}
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   26df8:	2302      	movs	r3, #2
	event_handler_list_dispatch(&evt);
   26dfa:	4668      	mov	r0, sp
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   26dfc:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   26e00:	f000 fd68 	bl	278d4 <event_handler_list_dispatch>
   26e04:	e7f6      	b.n	26df4 <at_handler_cedrxp+0x3c>
   26e06:	bf00      	nop
   26e08:	0004520d 	.word	0x0004520d
   26e0c:	00043ff2 	.word	0x00043ff2
   26e10:	00045267 	.word	0x00045267

00026e14 <at_handler_xt3412>:

static void at_handler_xt3412(const char *response)
{
   26e14:	b510      	push	{r4, lr}
   26e16:	4604      	mov	r4, r0
   26e18:	b090      	sub	sp, #64	; 0x40
	int err;
	struct lte_lc_evt evt = {0};
   26e1a:	2240      	movs	r2, #64	; 0x40
   26e1c:	2100      	movs	r1, #0
   26e1e:	4668      	mov	r0, sp
   26e20:	f01a fae0 	bl	413e4 <memset>

	__ASSERT_NO_MSG(response != NULL);
   26e24:	b954      	cbnz	r4, 26e3c <at_handler_xt3412+0x28>
   26e26:	4912      	ldr	r1, [pc, #72]	; (26e70 <at_handler_xt3412+0x5c>)
   26e28:	4812      	ldr	r0, [pc, #72]	; (26e74 <at_handler_xt3412+0x60>)
   26e2a:	f240 1239 	movw	r2, #313	; 0x139
   26e2e:	f015 fe05 	bl	3ca3c <assert_print>
   26e32:	f240 1139 	movw	r1, #313	; 0x139
   26e36:	480e      	ldr	r0, [pc, #56]	; (26e70 <at_handler_xt3412+0x5c>)
   26e38:	f015 fdf9 	bl	3ca2e <assert_post_action>

	LOG_DBG("%%XT3412 notification");

	err = parse_xt3412(response, &evt.time);
   26e3c:	4620      	mov	r0, r4
   26e3e:	a902      	add	r1, sp, #8
   26e40:	f000 ff30 	bl	27ca4 <parse_xt3412>
	if (err) {
   26e44:	4602      	mov	r2, r0
   26e46:	b128      	cbz	r0, 26e54 <at_handler_xt3412+0x40>
		LOG_ERR("Can't parse TAU pre-warning notification, error: %d", err);
   26e48:	2145      	movs	r1, #69	; 0x45
   26e4a:	480b      	ldr	r0, [pc, #44]	; (26e78 <at_handler_xt3412+0x64>)
   26e4c:	f015 fe30 	bl	3cab0 <z_log_minimal_printk>
	}

	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;

	event_handler_list_dispatch(&evt);
}
   26e50:	b010      	add	sp, #64	; 0x40
   26e52:	bd10      	pop	{r4, pc}
	if (evt.time != CONFIG_LTE_LC_TAU_PRE_WARNING_TIME_MS) {
   26e54:	9b02      	ldr	r3, [sp, #8]
   26e56:	9a03      	ldr	r2, [sp, #12]
   26e58:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
   26e5c:	3b08      	subs	r3, #8
   26e5e:	4313      	orrs	r3, r2
   26e60:	d1f6      	bne.n	26e50 <at_handler_xt3412+0x3c>
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   26e62:	2306      	movs	r3, #6
	event_handler_list_dispatch(&evt);
   26e64:	4668      	mov	r0, sp
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   26e66:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   26e6a:	f000 fd33 	bl	278d4 <event_handler_list_dispatch>
   26e6e:	e7ef      	b.n	26e50 <at_handler_xt3412+0x3c>
   26e70:	0004520d 	.word	0x0004520d
   26e74:	00043ff2 	.word	0x00043ff2
   26e78:	00045288 	.word	0x00045288

00026e7c <at_handler_ncellmeas>:

static void at_handler_ncellmeas(const char *response)
{
   26e7c:	b530      	push	{r4, r5, lr}
   26e7e:	4605      	mov	r5, r0
   26e80:	b091      	sub	sp, #68	; 0x44
	int err;
	struct lte_lc_evt evt = {0};
   26e82:	2240      	movs	r2, #64	; 0x40
   26e84:	2100      	movs	r1, #0
   26e86:	4668      	mov	r0, sp
   26e88:	f01a faac 	bl	413e4 <memset>

	__ASSERT_NO_MSG(response != NULL);
   26e8c:	b955      	cbnz	r5, 26ea4 <at_handler_ncellmeas+0x28>
   26e8e:	4921      	ldr	r1, [pc, #132]	; (26f14 <at_handler_ncellmeas+0x98>)
   26e90:	4821      	ldr	r0, [pc, #132]	; (26f18 <at_handler_ncellmeas+0x9c>)
   26e92:	f44f 72aa 	mov.w	r2, #340	; 0x154
   26e96:	f015 fdd1 	bl	3ca3c <assert_print>
   26e9a:	f44f 71aa 	mov.w	r1, #340	; 0x154
   26e9e:	481d      	ldr	r0, [pc, #116]	; (26f14 <at_handler_ncellmeas+0x98>)
   26ea0:	f015 fdc5 	bl	3ca2e <assert_post_action>

	int ncell_count = neighborcell_count_get(response);
   26ea4:	4628      	mov	r0, r5
   26ea6:	f000 ff4b 	bl	27d40 <neighborcell_count_get>
   26eaa:	4604      	mov	r4, r0
	struct lte_lc_ncell *neighbor_cells = NULL;

	LOG_DBG("%%NCELLMEAS notification");
	LOG_DBG("Neighbor cell count: %d", ncell_count);

	if (event_handler_list_is_empty()) {
   26eac:	f000 fcda 	bl	27864 <event_handler_list_is_empty>
   26eb0:	b950      	cbnz	r0, 26ec8 <at_handler_ncellmeas+0x4c>
		 * to receive the parsed data.
		 */
		return;
	}

	if (ncell_count != 0) {
   26eb2:	b15c      	cbz	r4, 26ecc <at_handler_ncellmeas+0x50>
		neighbor_cells = k_calloc(ncell_count, sizeof(struct lte_lc_ncell));
   26eb4:	4620      	mov	r0, r4
   26eb6:	2110      	movs	r1, #16
   26eb8:	f01a f9ee 	bl	41298 <k_calloc>
		if (neighbor_cells == NULL) {
   26ebc:	4604      	mov	r4, r0
   26ebe:	b928      	cbnz	r0, 26ecc <at_handler_ncellmeas+0x50>
			LOG_ERR("Failed to allocate memory for neighbor cells");
   26ec0:	2145      	movs	r1, #69	; 0x45
   26ec2:	4816      	ldr	r0, [pc, #88]	; (26f1c <at_handler_ncellmeas+0xa0>)
   26ec4:	f015 fdf4 	bl	3cab0 <z_log_minimal_printk>
	}

	if (neighbor_cells) {
		k_free(neighbor_cells);
	}
}
   26ec8:	b011      	add	sp, #68	; 0x44
   26eca:	bd30      	pop	{r4, r5, pc}
	err = parse_ncellmeas(response, &evt.cells_info);
   26ecc:	4628      	mov	r0, r5
   26ece:	a902      	add	r1, sp, #8
	evt.cells_info.neighbor_cells = neighbor_cells;
   26ed0:	940f      	str	r4, [sp, #60]	; 0x3c
	err = parse_ncellmeas(response, &evt.cells_info);
   26ed2:	f000 ff51 	bl	27d78 <parse_ncellmeas>
	switch (err) {
   26ed6:	1dc3      	adds	r3, r0, #7
	err = parse_ncellmeas(response, &evt.cells_info);
   26ed8:	4602      	mov	r2, r0
	switch (err) {
   26eda:	d006      	beq.n	26eea <at_handler_ncellmeas+0x6e>
   26edc:	2801      	cmp	r0, #1
   26ede:	d90d      	bls.n	26efc <at_handler_ncellmeas+0x80>
		LOG_ERR("Parsing of neighbor cells failed, err: %d", err);
   26ee0:	2145      	movs	r1, #69	; 0x45
   26ee2:	480f      	ldr	r0, [pc, #60]	; (26f20 <at_handler_ncellmeas+0xa4>)
   26ee4:	f015 fde4 	bl	3cab0 <z_log_minimal_printk>
   26ee8:	e00e      	b.n	26f08 <at_handler_ncellmeas+0x8c>
		LOG_WRN("Not all neighbor cells could be parsed");
   26eea:	2157      	movs	r1, #87	; 0x57
   26eec:	480d      	ldr	r0, [pc, #52]	; (26f24 <at_handler_ncellmeas+0xa8>)
   26eee:	f015 fddf 	bl	3cab0 <z_log_minimal_printk>
		LOG_WRN("More cells than the configured max count of %d were found",
   26ef2:	220a      	movs	r2, #10
   26ef4:	2157      	movs	r1, #87	; 0x57
   26ef6:	480c      	ldr	r0, [pc, #48]	; (26f28 <at_handler_ncellmeas+0xac>)
   26ef8:	f015 fdda 	bl	3cab0 <z_log_minimal_printk>
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   26efc:	2307      	movs	r3, #7
		event_handler_list_dispatch(&evt);
   26efe:	4668      	mov	r0, sp
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   26f00:	f88d 3000 	strb.w	r3, [sp]
		event_handler_list_dispatch(&evt);
   26f04:	f000 fce6 	bl	278d4 <event_handler_list_dispatch>
	if (neighbor_cells) {
   26f08:	2c00      	cmp	r4, #0
   26f0a:	d0dd      	beq.n	26ec8 <at_handler_ncellmeas+0x4c>
		k_free(neighbor_cells);
   26f0c:	4620      	mov	r0, r4
   26f0e:	f01a f9b8 	bl	41282 <k_free>
   26f12:	e7d9      	b.n	26ec8 <at_handler_ncellmeas+0x4c>
   26f14:	0004520d 	.word	0x0004520d
   26f18:	00043ff2 	.word	0x00043ff2
   26f1c:	000452c1 	.word	0x000452c1
   26f20:	0004535e 	.word	0x0004535e
   26f24:	000452f3 	.word	0x000452f3
   26f28:	0004531f 	.word	0x0004531f

00026f2c <at_handler_xmodemsleep>:

static void at_handler_xmodemsleep(const char *response)
{
   26f2c:	b510      	push	{r4, lr}
   26f2e:	4604      	mov	r4, r0
   26f30:	b090      	sub	sp, #64	; 0x40
	int err;
	struct lte_lc_evt evt = {0};
   26f32:	2240      	movs	r2, #64	; 0x40
   26f34:	2100      	movs	r1, #0
   26f36:	4668      	mov	r0, sp
   26f38:	f01a fa54 	bl	413e4 <memset>

	__ASSERT_NO_MSG(response != NULL);
   26f3c:	b954      	cbnz	r4, 26f54 <at_handler_xmodemsleep+0x28>
   26f3e:	4919      	ldr	r1, [pc, #100]	; (26fa4 <at_handler_xmodemsleep+0x78>)
   26f40:	4819      	ldr	r0, [pc, #100]	; (26fa8 <at_handler_xmodemsleep+0x7c>)
   26f42:	f240 1289 	movw	r2, #393	; 0x189
   26f46:	f015 fd79 	bl	3ca3c <assert_print>
   26f4a:	f240 1189 	movw	r1, #393	; 0x189
   26f4e:	4815      	ldr	r0, [pc, #84]	; (26fa4 <at_handler_xmodemsleep+0x78>)
   26f50:	f015 fd6d 	bl	3ca2e <assert_post_action>

	LOG_DBG("%%XMODEMSLEEP notification");

	err = parse_xmodemsleep(response, &evt.modem_sleep);
   26f54:	4620      	mov	r0, r4
   26f56:	a902      	add	r1, sp, #8
   26f58:	f001 f858 	bl	2800c <parse_xmodemsleep>
	if (err) {
   26f5c:	4602      	mov	r2, r0
   26f5e:	b128      	cbz	r0, 26f6c <at_handler_xmodemsleep+0x40>
		LOG_ERR("Can't parse modem sleep pre-warning notification, error: %d", err);
   26f60:	2145      	movs	r1, #69	; 0x45
   26f62:	4812      	ldr	r0, [pc, #72]	; (26fac <at_handler_xmodemsleep+0x80>)
   26f64:	f015 fda4 	bl	3cab0 <z_log_minimal_printk>

		evt.type = LTE_LC_EVT_MODEM_SLEEP_ENTER;
	}

	event_handler_list_dispatch(&evt);
}
   26f68:	b010      	add	sp, #64	; 0x40
   26f6a:	bd10      	pop	{r4, pc}
	if ((evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_PSM) &&
   26f6c:	f89d 3008 	ldrb.w	r3, [sp, #8]
   26f70:	1e5a      	subs	r2, r3, #1
   26f72:	2a01      	cmp	r2, #1
   26f74:	d901      	bls.n	26f7a <at_handler_xmodemsleep+0x4e>
		(evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_RF_INACTIVITY) &&
   26f76:	2b04      	cmp	r3, #4
   26f78:	d1f6      	bne.n	26f68 <at_handler_xmodemsleep+0x3c>
	if (evt.modem_sleep.time == CONFIG_LTE_LC_MODEM_SLEEP_PRE_WARNING_TIME_MS) {
   26f7a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   26f7e:	f5a1 539c 	sub.w	r3, r1, #4992	; 0x1380
   26f82:	3b08      	subs	r3, #8
   26f84:	4313      	orrs	r3, r2
   26f86:	d106      	bne.n	26f96 <at_handler_xmodemsleep+0x6a>
		evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT_PRE_WARNING;
   26f88:	2308      	movs	r3, #8
	event_handler_list_dispatch(&evt);
   26f8a:	4668      	mov	r0, sp
		evt.type = LTE_LC_EVT_MODEM_SLEEP_ENTER;
   26f8c:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   26f90:	f000 fca0 	bl	278d4 <event_handler_list_dispatch>
   26f94:	e7e8      	b.n	26f68 <at_handler_xmodemsleep+0x3c>
	} else if (evt.modem_sleep.time == 0) {
   26f96:	ea51 0302 	orrs.w	r3, r1, r2
		evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT;
   26f9a:	bf0c      	ite	eq
   26f9c:	2309      	moveq	r3, #9
		evt.type = LTE_LC_EVT_MODEM_SLEEP_ENTER;
   26f9e:	230a      	movne	r3, #10
   26fa0:	e7f3      	b.n	26f8a <at_handler_xmodemsleep+0x5e>
   26fa2:	bf00      	nop
   26fa4:	0004520d 	.word	0x0004520d
   26fa8:	00043ff2 	.word	0x00043ff2
   26fac:	0004538d 	.word	0x0004538d

00026fb0 <at_handler_mdmev>:

static void at_handler_mdmev(const char *response)
{
   26fb0:	b510      	push	{r4, lr}
   26fb2:	4604      	mov	r4, r0
   26fb4:	b090      	sub	sp, #64	; 0x40
	int err;
	struct lte_lc_evt evt = {0};
   26fb6:	2240      	movs	r2, #64	; 0x40
   26fb8:	2100      	movs	r1, #0
   26fba:	4668      	mov	r0, sp
   26fbc:	f01a fa12 	bl	413e4 <memset>

	__ASSERT_NO_MSG(response != NULL);
   26fc0:	b954      	cbnz	r4, 26fd8 <at_handler_mdmev+0x28>
   26fc2:	490f      	ldr	r1, [pc, #60]	; (27000 <at_handler_mdmev+0x50>)
   26fc4:	480f      	ldr	r0, [pc, #60]	; (27004 <at_handler_mdmev+0x54>)
   26fc6:	f240 12b1 	movw	r2, #433	; 0x1b1
   26fca:	f015 fd37 	bl	3ca3c <assert_print>
   26fce:	f240 11b1 	movw	r1, #433	; 0x1b1
   26fd2:	480b      	ldr	r0, [pc, #44]	; (27000 <at_handler_mdmev+0x50>)
   26fd4:	f015 fd2b 	bl	3ca2e <assert_post_action>

	LOG_DBG("%%MDMEV notification");

	err = parse_mdmev(response, &evt.modem_evt);
   26fd8:	4620      	mov	r0, r4
   26fda:	a902      	add	r1, sp, #8
   26fdc:	f001 f872 	bl	280c4 <parse_mdmev>
	if (err) {
   26fe0:	4602      	mov	r2, r0
   26fe2:	b128      	cbz	r0, 26ff0 <at_handler_mdmev+0x40>
		LOG_ERR("Can't parse modem event notification, error: %d", err);
   26fe4:	2145      	movs	r1, #69	; 0x45
   26fe6:	4808      	ldr	r0, [pc, #32]	; (27008 <at_handler_mdmev+0x58>)
   26fe8:	f015 fd62 	bl	3cab0 <z_log_minimal_printk>
	}

	evt.type = LTE_LC_EVT_MODEM_EVENT;

	event_handler_list_dispatch(&evt);
}
   26fec:	b010      	add	sp, #64	; 0x40
   26fee:	bd10      	pop	{r4, pc}
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   26ff0:	230b      	movs	r3, #11
	event_handler_list_dispatch(&evt);
   26ff2:	4668      	mov	r0, sp
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   26ff4:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   26ff8:	f000 fc6c 	bl	278d4 <event_handler_list_dispatch>
   26ffc:	e7f6      	b.n	26fec <at_handler_mdmev+0x3c>
   26ffe:	bf00      	nop
   27000:	0004520d 	.word	0x0004520d
   27004:	00043ff2 	.word	0x00043ff2
   27008:	000453ce 	.word	0x000453ce

0002700c <enable_notifications>:

static int enable_notifications(void)
{
   2700c:	b510      	push	{r4, lr}
	int err;

	/* +CEREG notifications, level 5 */
	err = nrf_modem_at_printf(AT_CEREG_5);
   2700e:	4818      	ldr	r0, [pc, #96]	; (27070 <enable_notifications+0x64>)
{
   27010:	b08e      	sub	sp, #56	; 0x38
	err = nrf_modem_at_printf(AT_CEREG_5);
   27012:	f00d fff9 	bl	35008 <nrf_modem_at_printf>
	if (err) {
   27016:	4602      	mov	r2, r0
   27018:	b138      	cbz	r0, 2702a <enable_notifications+0x1e>
		LOG_ERR("Failed to subscribe to CEREG notifications, error: %d", err);
   2701a:	4816      	ldr	r0, [pc, #88]	; (27074 <enable_notifications+0x68>)
   2701c:	2145      	movs	r1, #69	; 0x45
   2701e:	f015 fd47 	bl	3cab0 <z_log_minimal_printk>
		return -EFAULT;
   27022:	f06f 000d 	mvn.w	r0, #13
			LOG_WRN("Current modem firmware version: %s", log_strdup(buf));
		}
	}

	return 0;
}
   27026:	b00e      	add	sp, #56	; 0x38
   27028:	bd10      	pop	{r4, pc}
	err = nrf_modem_at_printf(cscon);
   2702a:	4813      	ldr	r0, [pc, #76]	; (27078 <enable_notifications+0x6c>)
   2702c:	f00d ffec 	bl	35008 <nrf_modem_at_printf>
	if (err) {
   27030:	2800      	cmp	r0, #0
   27032:	d0f8      	beq.n	27026 <enable_notifications+0x1a>
		LOG_WRN("AT+CSCON failed (%d), RRC notifications are not enabled", err);
   27034:	4602      	mov	r2, r0
   27036:	2157      	movs	r1, #87	; 0x57
   27038:	4810      	ldr	r0, [pc, #64]	; (2707c <enable_notifications+0x70>)
   2703a:	f015 fd39 	bl	3cab0 <z_log_minimal_printk>
		LOG_WRN("AT+CSCON is supported in nRF9160 modem >= v1.1.0");
   2703e:	2157      	movs	r1, #87	; 0x57
   27040:	480f      	ldr	r0, [pc, #60]	; (27080 <enable_notifications+0x74>)
   27042:	f015 fd35 	bl	3cab0 <z_log_minimal_printk>
		err = nrf_modem_at_cmd(buf, sizeof(buf), "AT+CGMR");
   27046:	2132      	movs	r1, #50	; 0x32
   27048:	4a0e      	ldr	r2, [pc, #56]	; (27084 <enable_notifications+0x78>)
   2704a:	a801      	add	r0, sp, #4
   2704c:	f00e f802 	bl	35054 <nrf_modem_at_cmd>
		if (err == 0) {
   27050:	4604      	mov	r4, r0
   27052:	b950      	cbnz	r0, 2706a <enable_notifications+0x5e>
			char *end = strstr(buf, "\r\nOK");
   27054:	490c      	ldr	r1, [pc, #48]	; (27088 <enable_notifications+0x7c>)
   27056:	a801      	add	r0, sp, #4
   27058:	f01a fbde 	bl	41818 <strstr>
			if (end) {
   2705c:	b100      	cbz	r0, 27060 <enable_notifications+0x54>
				*end = '\0';
   2705e:	7004      	strb	r4, [r0, #0]
			LOG_WRN("Current modem firmware version: %s", log_strdup(buf));
   27060:	2157      	movs	r1, #87	; 0x57
   27062:	480a      	ldr	r0, [pc, #40]	; (2708c <enable_notifications+0x80>)
   27064:	aa01      	add	r2, sp, #4
   27066:	f015 fd23 	bl	3cab0 <z_log_minimal_printk>
	return 0;
   2706a:	2000      	movs	r0, #0
   2706c:	e7db      	b.n	27026 <enable_notifications+0x1a>
   2706e:	bf00      	nop
   27070:	00045403 	.word	0x00045403
   27074:	0004540e 	.word	0x0004540e
   27078:	00045a78 	.word	0x00045a78
   2707c:	00045449 	.word	0x00045449
   27080:	00045486 	.word	0x00045486
   27084:	000454bc 	.word	0x000454bc
   27088:	000454c4 	.word	0x000454c4
   2708c:	000454c9 	.word	0x000454c9

00027090 <lte_lc_register_handler>:
	return err ? -EFAULT : 0;
}

void lte_lc_register_handler(lte_lc_evt_handler_t handler)
{
	if (handler == NULL) {
   27090:	b918      	cbnz	r0, 2709a <lte_lc_register_handler+0xa>
		LOG_INF("NULL as a handler received: Nothing to be done.\n"
   27092:	2149      	movs	r1, #73	; 0x49
   27094:	4802      	ldr	r0, [pc, #8]	; (270a0 <lte_lc_register_handler+0x10>)
   27096:	f015 bd0b 	b.w	3cab0 <z_log_minimal_printk>
			"The handler can be deregistered using lte_lc_deregister_handler()");
		return;
	}

	event_handler_list_append_handler(handler);
   2709a:	f000 bbeb 	b.w	27874 <event_handler_list_append_handler>
   2709e:	bf00      	nop
   270a0:	000454f1 	.word	0x000454f1

000270a4 <lte_lc_psm_get>:

int lte_lc_psm_get(int *tau, int *active_time)
{
	int err;
	struct lte_lc_psm_cfg psm_cfg;
	char active_time_str[9] = {0};
   270a4:	2300      	movs	r3, #0
{
   270a6:	b5f0      	push	{r4, r5, r6, r7, lr}
   270a8:	b08d      	sub	sp, #52	; 0x34
   270aa:	460d      	mov	r5, r1
	char tau_legacy_str[9] = {0};
	static char response[160] = { 0 };
	const char ch = ',';
	char *comma_ptr;

	if ((tau == NULL) || (active_time == NULL)) {
   270ac:	4606      	mov	r6, r0
	char active_time_str[9] = {0};
   270ae:	e9cd 3303 	strd	r3, r3, [sp, #12]
	char tau_ext_str[9] = {0};
   270b2:	e9cd 3306 	strd	r3, r3, [sp, #24]
	char tau_legacy_str[9] = {0};
   270b6:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
	char active_time_str[9] = {0};
   270ba:	f88d 3014 	strb.w	r3, [sp, #20]
	char tau_ext_str[9] = {0};
   270be:	f88d 3020 	strb.w	r3, [sp, #32]
	char tau_legacy_str[9] = {0};
   270c2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	if ((tau == NULL) || (active_time == NULL)) {
   270c6:	2800      	cmp	r0, #0
   270c8:	d054      	beq.n	27174 <lte_lc_psm_get+0xd0>
   270ca:	2900      	cmp	r1, #0
   270cc:	d052      	beq.n	27174 <lte_lc_psm_get+0xd0>
	 * <Periodic-TAUext>,<Periodic-TAU>]
	 * We need to parse the three last parameters, Active-Time, Periodic-TAU-ext and
	 * Periodic-TAU. N.B. Periodic-TAU will not be present on modem firmwares < 1.2.0.
	 */

	response[0] = '\0';
   270ce:	4c2b      	ldr	r4, [pc, #172]	; (2717c <lte_lc_psm_get+0xd8>)

	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   270d0:	4a2b      	ldr	r2, [pc, #172]	; (27180 <lte_lc_psm_get+0xdc>)
   270d2:	21a0      	movs	r1, #160	; 0xa0
   270d4:	4620      	mov	r0, r4
	response[0] = '\0';
   270d6:	7023      	strb	r3, [r4, #0]
	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   270d8:	f00d ffbc 	bl	35054 <nrf_modem_at_cmd>
	if (err < 0) {
   270dc:	1e02      	subs	r2, r0, #0
   270de:	da08      	bge.n	270f2 <lte_lc_psm_get+0x4e>
		LOG_ERR("AT command failed, error: %d", err);
   270e0:	2145      	movs	r1, #69	; 0x45
   270e2:	4828      	ldr	r0, [pc, #160]	; (27184 <lte_lc_psm_get+0xe0>)
   270e4:	f015 fce4 	bl	3cab0 <z_log_minimal_printk>
	for (int i = 0; i < 12; i++) {
		if (comma_ptr) {
			comma_ptr = strchr(comma_ptr + 1, ch);
		} else {
			LOG_ERR("AT command parsing failed");
			return -EFAULT;
   270e8:	f06f 040d 	mvn.w	r4, #13
	*active_time = psm_cfg.active_time;

	LOG_DBG("TAU: %d sec, active time: %d sec\n", *tau, *active_time);

	return 0;
}
   270ec:	4620      	mov	r0, r4
   270ee:	b00d      	add	sp, #52	; 0x34
   270f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	comma_ptr = strchr(response, ch);
   270f2:	4620      	mov	r0, r4
   270f4:	212c      	movs	r1, #44	; 0x2c
   270f6:	f01a fb33 	bl	41760 <strchr>
   270fa:	270c      	movs	r7, #12
   270fc:	4604      	mov	r4, r0
		if (comma_ptr) {
   270fe:	b37c      	cbz	r4, 27160 <lte_lc_psm_get+0xbc>
			comma_ptr = strchr(comma_ptr + 1, ch);
   27100:	1c60      	adds	r0, r4, #1
   27102:	212c      	movs	r1, #44	; 0x2c
   27104:	f01a fb2c 	bl	41760 <strchr>
	for (int i = 0; i < 12; i++) {
   27108:	3f01      	subs	r7, #1
			comma_ptr = strchr(comma_ptr + 1, ch);
   2710a:	4604      	mov	r4, r0
	for (int i = 0; i < 12; i++) {
   2710c:	d1f7      	bne.n	270fe <lte_lc_psm_get+0x5a>
	if (comma_ptr) {
   2710e:	b338      	cbz	r0, 27160 <lte_lc_psm_get+0xbc>
		strncpy(active_time_str, comma_ptr + 2, 8);
   27110:	1c81      	adds	r1, r0, #2
   27112:	2208      	movs	r2, #8
   27114:	a803      	add	r0, sp, #12
   27116:	f01a fb4c 	bl	417b2 <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
   2711a:	1c60      	adds	r0, r4, #1
   2711c:	212c      	movs	r1, #44	; 0x2c
   2711e:	f01a fb1f 	bl	41760 <strchr>
	if (comma_ptr) {
   27122:	4604      	mov	r4, r0
   27124:	b1e0      	cbz	r0, 27160 <lte_lc_psm_get+0xbc>
		strncpy(tau_ext_str, comma_ptr + 2, 8);
   27126:	1c81      	adds	r1, r0, #2
   27128:	2208      	movs	r2, #8
   2712a:	a806      	add	r0, sp, #24
   2712c:	f01a fb41 	bl	417b2 <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
   27130:	212c      	movs	r1, #44	; 0x2c
   27132:	1c60      	adds	r0, r4, #1
   27134:	f01a fb14 	bl	41760 <strchr>
	if (comma_ptr) {
   27138:	b120      	cbz	r0, 27144 <lte_lc_psm_get+0xa0>
		strncpy(tau_legacy_str, comma_ptr + 2, 8);
   2713a:	1c81      	adds	r1, r0, #2
   2713c:	2208      	movs	r2, #8
   2713e:	a809      	add	r0, sp, #36	; 0x24
   27140:	f01a fb37 	bl	417b2 <strncpy>
	err = parse_psm(active_time_str, tau_ext_str, tau_legacy_str, &psm_cfg);
   27144:	ab01      	add	r3, sp, #4
   27146:	aa09      	add	r2, sp, #36	; 0x24
   27148:	a906      	add	r1, sp, #24
   2714a:	a803      	add	r0, sp, #12
   2714c:	f000 fc00 	bl	27950 <parse_psm>
	if (err) {
   27150:	4604      	mov	r4, r0
   27152:	b150      	cbz	r0, 2716a <lte_lc_psm_get+0xc6>
		LOG_ERR("Failed to parse PSM configuration, error: %d", err);
   27154:	4602      	mov	r2, r0
   27156:	2145      	movs	r1, #69	; 0x45
   27158:	480b      	ldr	r0, [pc, #44]	; (27188 <lte_lc_psm_get+0xe4>)
   2715a:	f015 fca9 	bl	3cab0 <z_log_minimal_printk>
		return err;
   2715e:	e7c5      	b.n	270ec <lte_lc_psm_get+0x48>
			LOG_ERR("AT command parsing failed");
   27160:	2145      	movs	r1, #69	; 0x45
   27162:	480a      	ldr	r0, [pc, #40]	; (2718c <lte_lc_psm_get+0xe8>)
   27164:	f015 fca4 	bl	3cab0 <z_log_minimal_printk>
   27168:	e7be      	b.n	270e8 <lte_lc_psm_get+0x44>
	*tau = psm_cfg.tau;
   2716a:	9b01      	ldr	r3, [sp, #4]
   2716c:	6033      	str	r3, [r6, #0]
	*active_time = psm_cfg.active_time;
   2716e:	9b02      	ldr	r3, [sp, #8]
   27170:	602b      	str	r3, [r5, #0]
	return 0;
   27172:	e7bb      	b.n	270ec <lte_lc_psm_get+0x48>
		return -EINVAL;
   27174:	f06f 0415 	mvn.w	r4, #21
   27178:	e7b8      	b.n	270ec <lte_lc_psm_get+0x48>
   2717a:	bf00      	nop
   2717c:	2001b662 	.word	0x2001b662
   27180:	00045568 	.word	0x00045568
   27184:	00045575 	.word	0x00045575
   27188:	000455b6 	.word	0x000455b6
   2718c:	00045597 	.word	0x00045597

00027190 <at_handler_cereg>:
{
   27190:	b5f0      	push	{r4, r5, r6, r7, lr}
   27192:	4604      	mov	r4, r0
   27194:	b0a3      	sub	sp, #140	; 0x8c
	struct lte_lc_evt evt = {0};
   27196:	2240      	movs	r2, #64	; 0x40
   27198:	2100      	movs	r1, #0
   2719a:	a812      	add	r0, sp, #72	; 0x48
   2719c:	f01a f922 	bl	413e4 <memset>
	__ASSERT_NO_MSG(response != NULL);
   271a0:	b944      	cbnz	r4, 271b4 <at_handler_cereg+0x24>
   271a2:	494e      	ldr	r1, [pc, #312]	; (272dc <at_handler_cereg+0x14c>)
   271a4:	484e      	ldr	r0, [pc, #312]	; (272e0 <at_handler_cereg+0x150>)
   271a6:	2292      	movs	r2, #146	; 0x92
   271a8:	f015 fc48 	bl	3ca3c <assert_print>
   271ac:	2192      	movs	r1, #146	; 0x92
   271ae:	484b      	ldr	r0, [pc, #300]	; (272dc <at_handler_cereg+0x14c>)
   271b0:	f015 fc3d 	bl	3ca2e <assert_post_action>
	enum lte_lc_nw_reg_status reg_status = 0;
   271b4:	2500      	movs	r5, #0
	struct lte_lc_cell cell = {0};
   271b6:	2230      	movs	r2, #48	; 0x30
   271b8:	4629      	mov	r1, r5
   271ba:	a806      	add	r0, sp, #24
	enum lte_lc_nw_reg_status reg_status = 0;
   271bc:	f88d 500e 	strb.w	r5, [sp, #14]
	struct lte_lc_psm_cfg psm_cfg = {0};
   271c0:	af04      	add	r7, sp, #16
	struct lte_lc_cell cell = {0};
   271c2:	f01a f90f 	bl	413e4 <memset>
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   271c6:	f10d 030f 	add.w	r3, sp, #15
	struct lte_lc_psm_cfg psm_cfg = {0};
   271ca:	607d      	str	r5, [r7, #4]
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   271cc:	f10d 020e 	add.w	r2, sp, #14
   271d0:	9300      	str	r3, [sp, #0]
   271d2:	2101      	movs	r1, #1
   271d4:	4620      	mov	r0, r4
   271d6:	ab06      	add	r3, sp, #24
	struct lte_lc_psm_cfg psm_cfg = {0};
   271d8:	9504      	str	r5, [sp, #16]
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   271da:	f000 fc8f 	bl	27afc <parse_cereg>
	if (err) {
   271de:	4602      	mov	r2, r0
   271e0:	b130      	cbz	r0, 271f0 <at_handler_cereg+0x60>
		LOG_ERR("Failed to parse notification (error %d): %s",
   271e2:	4623      	mov	r3, r4
   271e4:	2145      	movs	r1, #69	; 0x45
   271e6:	483f      	ldr	r0, [pc, #252]	; (272e4 <at_handler_cereg+0x154>)
   271e8:	f015 fc62 	bl	3cab0 <z_log_minimal_printk>
}
   271ec:	b023      	add	sp, #140	; 0x8c
   271ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   271f0:	f89d 300e 	ldrb.w	r3, [sp, #14]
   271f4:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   271f8:	2b01      	cmp	r3, #1
   271fa:	d105      	bne.n	27208 <at_handler_cereg+0x78>
	if (cellid == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   271fc:	9b08      	ldr	r3, [sp, #32]
   271fe:	3301      	adds	r3, #1
   27200:	d053      	beq.n	272aa <at_handler_cereg+0x11a>
	z_impl_k_sem_give(sem);
   27202:	4839      	ldr	r0, [pc, #228]	; (272e8 <at_handler_cereg+0x158>)
   27204:	f00f fda8 	bl	36d58 <z_impl_k_sem_give>
	if (event_handler_list_is_empty()) {
   27208:	f000 fb2c 	bl	27864 <event_handler_list_is_empty>
   2720c:	2800      	cmp	r0, #0
   2720e:	d1ed      	bne.n	271ec <at_handler_cereg+0x5c>
	if (reg_status != prev_reg_status) {
   27210:	4a36      	ldr	r2, [pc, #216]	; (272ec <at_handler_cereg+0x15c>)
   27212:	f89d 300e 	ldrb.w	r3, [sp, #14]
   27216:	7811      	ldrb	r1, [r2, #0]
   27218:	4299      	cmp	r1, r3
   2721a:	d007      	beq.n	2722c <at_handler_cereg+0x9c>
		evt.type = LTE_LC_EVT_NW_REG_STATUS;
   2721c:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
		event_handler_list_dispatch(&evt);
   27220:	a812      	add	r0, sp, #72	; 0x48
		prev_reg_status = reg_status;
   27222:	7013      	strb	r3, [r2, #0]
		evt.nw_reg_status = reg_status;
   27224:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
		event_handler_list_dispatch(&evt);
   27228:	f000 fb54 	bl	278d4 <event_handler_list_dispatch>
	if (memcmp(&cell, &prev_cell, sizeof(struct lte_lc_cell))) {
   2722c:	2230      	movs	r2, #48	; 0x30
   2722e:	4930      	ldr	r1, [pc, #192]	; (272f0 <at_handler_cereg+0x160>)
   27230:	a806      	add	r0, sp, #24
   27232:	f01a f8a7 	bl	41384 <memcmp>
   27236:	b1c8      	cbz	r0, 2726c <at_handler_cereg+0xdc>
		evt.type = LTE_LC_EVT_CELL_UPDATE;
   27238:	2304      	movs	r3, #4
   2723a:	4d2d      	ldr	r5, [pc, #180]	; (272f0 <at_handler_cereg+0x160>)
   2723c:	ac06      	add	r4, sp, #24
   2723e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   27242:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   27244:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   27246:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   27248:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2724a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   2724e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		memcpy(&evt.cell, &cell, sizeof(struct lte_lc_cell));
   27252:	ae14      	add	r6, sp, #80	; 0x50
   27254:	ad06      	add	r5, sp, #24
   27256:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   27258:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   2725a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2725c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   2725e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   27262:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		event_handler_list_dispatch(&evt);
   27266:	a812      	add	r0, sp, #72	; 0x48
   27268:	f000 fb34 	bl	278d4 <event_handler_list_dispatch>
	if (lte_mode != prev_lte_mode) {
   2726c:	4a21      	ldr	r2, [pc, #132]	; (272f4 <at_handler_cereg+0x164>)
   2726e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   27272:	7811      	ldrb	r1, [r2, #0]
   27274:	4299      	cmp	r1, r3
   27276:	d008      	beq.n	2728a <at_handler_cereg+0xfa>
		prev_lte_mode = lte_mode;
   27278:	7013      	strb	r3, [r2, #0]
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   2727a:	2205      	movs	r2, #5
		event_handler_list_dispatch(&evt);
   2727c:	a812      	add	r0, sp, #72	; 0x48
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   2727e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
		evt.lte_mode = lte_mode;
   27282:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
		event_handler_list_dispatch(&evt);
   27286:	f000 fb25 	bl	278d4 <event_handler_list_dispatch>
	if ((reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
   2728a:	f89d 400e 	ldrb.w	r4, [sp, #14]
   2728e:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
   27292:	2c01      	cmp	r4, #1
   27294:	d1aa      	bne.n	271ec <at_handler_cereg+0x5c>
	err = lte_lc_psm_get(&psm_cfg.tau, &psm_cfg.active_time);
   27296:	4638      	mov	r0, r7
   27298:	a905      	add	r1, sp, #20
   2729a:	f7ff ff03 	bl	270a4 <lte_lc_psm_get>
	if (err) {
   2729e:	b140      	cbz	r0, 272b2 <at_handler_cereg+0x122>
		LOG_ERR("Failed to get PSM information");
   272a0:	2145      	movs	r1, #69	; 0x45
   272a2:	4815      	ldr	r0, [pc, #84]	; (272f8 <at_handler_cereg+0x168>)
   272a4:	f015 fc04 	bl	3cab0 <z_log_minimal_printk>
		return;
   272a8:	e7a0      	b.n	271ec <at_handler_cereg+0x5c>
			reg_status = LTE_LC_NW_REG_UNKNOWN;
   272aa:	2304      	movs	r3, #4
   272ac:	f88d 300e 	strb.w	r3, [sp, #14]
   272b0:	e7aa      	b.n	27208 <at_handler_cereg+0x78>
	if (memcmp(&psm_cfg, &prev_psm_cfg, sizeof(struct lte_lc_psm_cfg))) {
   272b2:	4d12      	ldr	r5, [pc, #72]	; (272fc <at_handler_cereg+0x16c>)
   272b4:	2208      	movs	r2, #8
   272b6:	4629      	mov	r1, r5
   272b8:	4638      	mov	r0, r7
   272ba:	f01a f863 	bl	41384 <memcmp>
   272be:	2800      	cmp	r0, #0
   272c0:	d094      	beq.n	271ec <at_handler_cereg+0x5c>
		evt.type = LTE_LC_EVT_PSM_UPDATE;
   272c2:	e897 0003 	ldmia.w	r7, {r0, r1}
   272c6:	ab14      	add	r3, sp, #80	; 0x50
   272c8:	e885 0003 	stmia.w	r5, {r0, r1}
   272cc:	e883 0003 	stmia.w	r3, {r0, r1}
		event_handler_list_dispatch(&evt);
   272d0:	a812      	add	r0, sp, #72	; 0x48
		evt.type = LTE_LC_EVT_PSM_UPDATE;
   272d2:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
		event_handler_list_dispatch(&evt);
   272d6:	f000 fafd 	bl	278d4 <event_handler_list_dispatch>
   272da:	e787      	b.n	271ec <at_handler_cereg+0x5c>
   272dc:	0004520d 	.word	0x0004520d
   272e0:	00043ff2 	.word	0x00043ff2
   272e4:	000455e8 	.word	0x000455e8
   272e8:	200193f0 	.word	0x200193f0
   272ec:	2001b661 	.word	0x2001b661
   272f0:	200154e0 	.word	0x200154e0
   272f4:	2001b660 	.word	0x2001b660
   272f8:	00045619 	.word	0x00045619
   272fc:	20019408 	.word	0x20019408

00027300 <lte_lc_nw_reg_status_get>:

	return 0;
}

int lte_lc_nw_reg_status_get(enum lte_lc_nw_reg_status *status)
{
   27300:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;
	uint16_t status_tmp;
	uint32_t cell_id = 0;
   27302:	2400      	movs	r4, #0

	if (status == NULL) {
   27304:	4605      	mov	r5, r0
	uint32_t cell_id = 0;
   27306:	9401      	str	r4, [sp, #4]
	if (status == NULL) {
   27308:	b1a8      	cbz	r0, 27336 <lte_lc_nw_reg_status_get+0x36>
		return -EINVAL;
	}

	/* Read network registration status */
	err = nrf_modem_at_scanf("AT+CEREG?",
   2730a:	f10d 0202 	add.w	r2, sp, #2
   2730e:	490b      	ldr	r1, [pc, #44]	; (2733c <lte_lc_nw_reg_status_get+0x3c>)
   27310:	480b      	ldr	r0, [pc, #44]	; (27340 <lte_lc_nw_reg_status_get+0x40>)
   27312:	ab01      	add	r3, sp, #4
   27314:	f00d ff0a 	bl	3512c <nrf_modem_at_scanf>
		"%u,"		/* <stat> */
		"%*[^,],"	/* <tac> */
		"\"%x\",",	/* <ci> */
		&status_tmp,
		&cell_id);
	if (err < 1) {
   27318:	1e02      	subs	r2, r0, #0
   2731a:	dc07      	bgt.n	2732c <lte_lc_nw_reg_status_get+0x2c>
		LOG_ERR("Could not get registration status, error: %d", err);
   2731c:	4809      	ldr	r0, [pc, #36]	; (27344 <lte_lc_nw_reg_status_get+0x44>)
   2731e:	2145      	movs	r1, #69	; 0x45
   27320:	f015 fbc6 	bl	3cab0 <z_log_minimal_printk>
		return -EFAULT;
   27324:	f06f 000d 	mvn.w	r0, #13
	}

	*status = status_tmp;

	return 0;
}
   27328:	b003      	add	sp, #12
   2732a:	bd30      	pop	{r4, r5, pc}
	*status = status_tmp;
   2732c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
	return 0;
   27330:	4620      	mov	r0, r4
	*status = status_tmp;
   27332:	702b      	strb	r3, [r5, #0]
	return 0;
   27334:	e7f8      	b.n	27328 <lte_lc_nw_reg_status_get+0x28>
		return -EINVAL;
   27336:	f06f 0015 	mvn.w	r0, #21
   2733a:	e7f5      	b.n	27328 <lte_lc_nw_reg_status_get+0x28>
   2733c:	0004563c 	.word	0x0004563c
   27340:	00045658 	.word	0x00045658
   27344:	00045662 	.word	0x00045662

00027348 <lte_lc_system_mode_set>:
int lte_lc_system_mode_set(enum lte_lc_system_mode mode,
			   enum lte_lc_system_mode_preference preference)
{
	int err;

	switch (mode) {
   27348:	2807      	cmp	r0, #7
{
   2734a:	b538      	push	{r3, r4, r5, lr}
   2734c:	4605      	mov	r5, r0
   2734e:	460c      	mov	r4, r1
	switch (mode) {
   27350:	d907      	bls.n	27362 <lte_lc_system_mode_set+0x1a>
	case LTE_LC_SYSTEM_MODE_GPS:
	case LTE_LC_SYSTEM_MODE_LTEM_NBIOT:
	case LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS:
		break;
	default:
		LOG_ERR("Invalid system mode requested: %d", mode);
   27352:	2145      	movs	r1, #69	; 0x45
   27354:	4602      	mov	r2, r0
   27356:	4813      	ldr	r0, [pc, #76]	; (273a4 <lte_lc_system_mode_set+0x5c>)
	case LTE_LC_SYSTEM_MODE_PREFER_NBIOT:
	case LTE_LC_SYSTEM_MODE_PREFER_LTEM_PLMN_PRIO:
	case LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO:
		break;
	default:
		LOG_ERR("Invalid LTE preference requested: %d", preference);
   27358:	f015 fbaa 	bl	3cab0 <z_log_minimal_printk>
		return -EINVAL;
   2735c:	f06f 0015 	mvn.w	r0, #21
	sys_mode_target = mode;
	mode_pref_current = preference;
	mode_pref_target = preference;

	return 0;
}
   27360:	bd38      	pop	{r3, r4, r5, pc}
	switch (preference) {
   27362:	2904      	cmp	r1, #4
   27364:	d903      	bls.n	2736e <lte_lc_system_mode_set+0x26>
		LOG_ERR("Invalid LTE preference requested: %d", preference);
   27366:	460a      	mov	r2, r1
   27368:	480f      	ldr	r0, [pc, #60]	; (273a8 <lte_lc_system_mode_set+0x60>)
   2736a:	2145      	movs	r1, #69	; 0x45
   2736c:	e7f4      	b.n	27358 <lte_lc_system_mode_set+0x10>
	err = nrf_modem_at_printf("AT%%XSYSTEMMODE=%s,%c",
   2736e:	4b0f      	ldr	r3, [pc, #60]	; (273ac <lte_lc_system_mode_set+0x64>)
   27370:	5c5a      	ldrb	r2, [r3, r1]
   27372:	4b0f      	ldr	r3, [pc, #60]	; (273b0 <lte_lc_system_mode_set+0x68>)
   27374:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   27378:	480e      	ldr	r0, [pc, #56]	; (273b4 <lte_lc_system_mode_set+0x6c>)
   2737a:	f00d fe45 	bl	35008 <nrf_modem_at_printf>
	if (err) {
   2737e:	b138      	cbz	r0, 27390 <lte_lc_system_mode_set+0x48>
		LOG_ERR("Could not send AT command, error: %d", err);
   27380:	4602      	mov	r2, r0
   27382:	2145      	movs	r1, #69	; 0x45
   27384:	480c      	ldr	r0, [pc, #48]	; (273b8 <lte_lc_system_mode_set+0x70>)
   27386:	f015 fb93 	bl	3cab0 <z_log_minimal_printk>
		return -EFAULT;
   2738a:	f06f 000d 	mvn.w	r0, #13
   2738e:	e7e7      	b.n	27360 <lte_lc_system_mode_set+0x18>
	sys_mode_current = mode;
   27390:	4b0a      	ldr	r3, [pc, #40]	; (273bc <lte_lc_system_mode_set+0x74>)
   27392:	701d      	strb	r5, [r3, #0]
	sys_mode_target = mode;
   27394:	4b0a      	ldr	r3, [pc, #40]	; (273c0 <lte_lc_system_mode_set+0x78>)
   27396:	701d      	strb	r5, [r3, #0]
	mode_pref_current = preference;
   27398:	4b0a      	ldr	r3, [pc, #40]	; (273c4 <lte_lc_system_mode_set+0x7c>)
   2739a:	701c      	strb	r4, [r3, #0]
	mode_pref_target = preference;
   2739c:	4b0a      	ldr	r3, [pc, #40]	; (273c8 <lte_lc_system_mode_set+0x80>)
   2739e:	701c      	strb	r4, [r3, #0]
	return 0;
   273a0:	e7de      	b.n	27360 <lte_lc_system_mode_set+0x18>
   273a2:	bf00      	nop
   273a4:	00045694 	.word	0x00045694
   273a8:	000456bb 	.word	0x000456bb
   273ac:	00045a83 	.word	0x00045a83
   273b0:	00042c88 	.word	0x00042c88
   273b4:	000456e5 	.word	0x000456e5
   273b8:	000456fb 	.word	0x000456fb
   273bc:	2001b702 	.word	0x2001b702
   273c0:	20014c44 	.word	0x20014c44
   273c4:	2001b65e 	.word	0x2001b65e
   273c8:	2001b65f 	.word	0x2001b65f

000273cc <lte_lc_system_mode_get>:

int lte_lc_system_mode_get(enum lte_lc_system_mode *mode,
			   enum lte_lc_system_mode_preference *preference)
{
   273cc:	b530      	push	{r4, r5, lr}
   273ce:	460c      	mov	r4, r1
	int err, mode_bitmask = 0;
	int ltem_mode, nbiot_mode, gps_mode, mode_preference;

	if (mode == NULL) {
   273d0:	4605      	mov	r5, r0
{
   273d2:	b087      	sub	sp, #28
	if (mode == NULL) {
   273d4:	2800      	cmp	r0, #0
   273d6:	d06b      	beq.n	274b0 <lte_lc_system_mode_get+0xe4>
		return -EINVAL;
	}

	/* It's expected to have all 4 arguments matched */
	err = nrf_modem_at_scanf(AT_XSYSTEMMODE_READ, "%%XSYSTEMMODE: %d,%d,%d,%d",
   273d8:	ab05      	add	r3, sp, #20
   273da:	9301      	str	r3, [sp, #4]
   273dc:	ab04      	add	r3, sp, #16
   273de:	9300      	str	r3, [sp, #0]
   273e0:	aa02      	add	r2, sp, #8
   273e2:	4935      	ldr	r1, [pc, #212]	; (274b8 <lte_lc_system_mode_get+0xec>)
   273e4:	4835      	ldr	r0, [pc, #212]	; (274bc <lte_lc_system_mode_get+0xf0>)
   273e6:	ab03      	add	r3, sp, #12
   273e8:	f00d fea0 	bl	3512c <nrf_modem_at_scanf>
				 &ltem_mode, &nbiot_mode, &gps_mode, &mode_preference);
	if (err != 4) {
   273ec:	2804      	cmp	r0, #4
	err = nrf_modem_at_scanf(AT_XSYSTEMMODE_READ, "%%XSYSTEMMODE: %d,%d,%d,%d",
   273ee:	4602      	mov	r2, r0
	if (err != 4) {
   273f0:	d004      	beq.n	273fc <lte_lc_system_mode_get+0x30>
		LOG_ERR("Failed to get system mode, error: %d", err);
   273f2:	2145      	movs	r1, #69	; 0x45
   273f4:	4832      	ldr	r0, [pc, #200]	; (274c0 <lte_lc_system_mode_get+0xf4>)
			break;
		case 4:
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
			break;
		default:
			LOG_ERR("Unsupported LTE preference: %d", mode_preference);
   273f6:	f015 fb5b 	bl	3cab0 <z_log_minimal_printk>
			return -EFAULT;
   273fa:	e039      	b.n	27470 <lte_lc_system_mode_get+0xa4>
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   273fc:	9b02      	ldr	r3, [sp, #8]
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   273fe:	9a03      	ldr	r2, [sp, #12]
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   27400:	2b00      	cmp	r3, #0
   27402:	bf14      	ite	ne
   27404:	2302      	movne	r3, #2
   27406:	2300      	moveq	r3, #0
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   27408:	2a00      	cmp	r2, #0
   2740a:	bf14      	ite	ne
   2740c:	2204      	movne	r2, #4
   2740e:	2200      	moveq	r2, #0
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   27410:	4313      	orrs	r3, r2
		       (gps_mode ? BIT(AT_XSYSTEMMODE_READ_GPS_INDEX) : 0);
   27412:	9a04      	ldr	r2, [sp, #16]
   27414:	2a00      	cmp	r2, #0
   27416:	bf14      	ite	ne
   27418:	2208      	movne	r2, #8
   2741a:	2200      	moveq	r2, #0
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   2741c:	4313      	orrs	r3, r2
	switch (mode_bitmask) {
   2741e:	2b0e      	cmp	r3, #14
   27420:	d822      	bhi.n	27468 <lte_lc_system_mode_get+0x9c>
   27422:	e8df f003 	tbb	[pc, r3]
   27426:	2108      	.short	0x2108
   27428:	21152113 	.word	0x21152113
   2742c:	2117211d 	.word	0x2117211d
   27430:	211b2119 	.word	0x211b2119
   27434:	1f          	.byte	0x1f
   27435:	00          	.byte	0x00
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   27436:	2300      	movs	r3, #0
		*mode = LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS;
   27438:	702b      	strb	r3, [r5, #0]
	if (preference != NULL) {
   2743a:	b1fc      	cbz	r4, 2747c <lte_lc_system_mode_get+0xb0>
		switch (mode_preference) {
   2743c:	9a05      	ldr	r2, [sp, #20]
   2743e:	2a04      	cmp	r2, #4
   27440:	d833      	bhi.n	274aa <lte_lc_system_mode_get+0xde>
   27442:	e8df f002 	tbb	[pc, r2]
   27446:	2a19      	.short	0x2a19
   27448:	2e2c      	.short	0x2e2c
   2744a:	30          	.byte	0x30
   2744b:	00          	.byte	0x00
		*mode = LTE_LC_SYSTEM_MODE_LTEM;
   2744c:	2301      	movs	r3, #1
   2744e:	e7f3      	b.n	27438 <lte_lc_system_mode_get+0x6c>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT;
   27450:	2302      	movs	r3, #2
   27452:	e7f1      	b.n	27438 <lte_lc_system_mode_get+0x6c>
		*mode = LTE_LC_SYSTEM_MODE_GPS;
   27454:	2303      	movs	r3, #3
   27456:	e7ef      	b.n	27438 <lte_lc_system_mode_get+0x6c>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
   27458:	2304      	movs	r3, #4
   2745a:	e7ed      	b.n	27438 <lte_lc_system_mode_get+0x6c>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   2745c:	2305      	movs	r3, #5
   2745e:	e7eb      	b.n	27438 <lte_lc_system_mode_get+0x6c>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_NBIOT;
   27460:	2306      	movs	r3, #6
   27462:	e7e9      	b.n	27438 <lte_lc_system_mode_get+0x6c>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS;
   27464:	2307      	movs	r3, #7
   27466:	e7e7      	b.n	27438 <lte_lc_system_mode_get+0x6c>
		LOG_ERR("Invalid system mode, assuming parsing error");
   27468:	2145      	movs	r1, #69	; 0x45
   2746a:	4816      	ldr	r0, [pc, #88]	; (274c4 <lte_lc_system_mode_get+0xf8>)
   2746c:	f015 fb20 	bl	3cab0 <z_log_minimal_printk>
		return -EFAULT;
   27470:	f06f 000d 	mvn.w	r0, #13
			mode_pref_current, *preference);
		mode_pref_current = *preference;
	}

	return 0;
}
   27474:	b007      	add	sp, #28
   27476:	bd30      	pop	{r4, r5, pc}
			*preference = LTE_LC_SYSTEM_MODE_PREFER_AUTO;
   27478:	2300      	movs	r3, #0
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
   2747a:	7023      	strb	r3, [r4, #0]
	if (sys_mode_current != *mode) {
   2747c:	4b12      	ldr	r3, [pc, #72]	; (274c8 <lte_lc_system_mode_get+0xfc>)
   2747e:	782a      	ldrb	r2, [r5, #0]
   27480:	7819      	ldrb	r1, [r3, #0]
   27482:	4291      	cmp	r1, r2
		sys_mode_current = *mode;
   27484:	bf18      	it	ne
   27486:	701a      	strbne	r2, [r3, #0]
	if ((preference != NULL) && (mode_pref_current != *preference)) {
   27488:	b12c      	cbz	r4, 27496 <lte_lc_system_mode_get+0xca>
   2748a:	4b10      	ldr	r3, [pc, #64]	; (274cc <lte_lc_system_mode_get+0x100>)
   2748c:	7822      	ldrb	r2, [r4, #0]
   2748e:	7819      	ldrb	r1, [r3, #0]
   27490:	4291      	cmp	r1, r2
   27492:	d000      	beq.n	27496 <lte_lc_system_mode_get+0xca>
		mode_pref_current = *preference;
   27494:	701a      	strb	r2, [r3, #0]
	return 0;
   27496:	2000      	movs	r0, #0
   27498:	e7ec      	b.n	27474 <lte_lc_system_mode_get+0xa8>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM;
   2749a:	2301      	movs	r3, #1
   2749c:	e7ed      	b.n	2747a <lte_lc_system_mode_get+0xae>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT;
   2749e:	2302      	movs	r3, #2
   274a0:	e7eb      	b.n	2747a <lte_lc_system_mode_get+0xae>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM_PLMN_PRIO;
   274a2:	2303      	movs	r3, #3
   274a4:	e7e9      	b.n	2747a <lte_lc_system_mode_get+0xae>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
   274a6:	2304      	movs	r3, #4
   274a8:	e7e7      	b.n	2747a <lte_lc_system_mode_get+0xae>
			LOG_ERR("Unsupported LTE preference: %d", mode_preference);
   274aa:	2145      	movs	r1, #69	; 0x45
   274ac:	4808      	ldr	r0, [pc, #32]	; (274d0 <lte_lc_system_mode_get+0x104>)
   274ae:	e7a2      	b.n	273f6 <lte_lc_system_mode_get+0x2a>
		return -EINVAL;
   274b0:	f06f 0015 	mvn.w	r0, #21
   274b4:	e7de      	b.n	27474 <lte_lc_system_mode_get+0xa8>
   274b6:	bf00      	nop
   274b8:	00045725 	.word	0x00045725
   274bc:	00045740 	.word	0x00045740
   274c0:	00045750 	.word	0x00045750
   274c4:	0004577a 	.word	0x0004577a
   274c8:	2001b702 	.word	0x2001b702
   274cc:	2001b65e 	.word	0x2001b65e
   274d0:	000457ab 	.word	0x000457ab

000274d4 <init_and_config>:
{
   274d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (is_initialized) {
   274d6:	4d1b      	ldr	r5, [pc, #108]	; (27544 <init_and_config+0x70>)
   274d8:	7829      	ldrb	r1, [r5, #0]
   274da:	bb81      	cbnz	r1, 2753e <init_and_config+0x6a>
	err = lte_lc_system_mode_get(&sys_mode_current, &mode_pref_current);
   274dc:	4e1a      	ldr	r6, [pc, #104]	; (27548 <init_and_config+0x74>)
   274de:	4f1b      	ldr	r7, [pc, #108]	; (2754c <init_and_config+0x78>)
	return z_impl_k_sem_init(sem, initial_count, limit);
   274e0:	2201      	movs	r2, #1
   274e2:	481b      	ldr	r0, [pc, #108]	; (27550 <init_and_config+0x7c>)
   274e4:	f019 fd52 	bl	40f8c <z_impl_k_sem_init>
   274e8:	4631      	mov	r1, r6
   274ea:	4638      	mov	r0, r7
   274ec:	f7ff ff6e 	bl	273cc <lte_lc_system_mode_get>
	if (err) {
   274f0:	4604      	mov	r4, r0
   274f2:	b130      	cbz	r0, 27502 <init_and_config+0x2e>
		LOG_ERR("Could not get current system mode, error: %d", err);
   274f4:	2145      	movs	r1, #69	; 0x45
   274f6:	4602      	mov	r2, r0
   274f8:	4816      	ldr	r0, [pc, #88]	; (27554 <init_and_config+0x80>)
			LOG_ERR("Could not set system mode, error: %d", err);
   274fa:	f015 fad9 	bl	3cab0 <z_log_minimal_printk>
}
   274fe:	4620      	mov	r0, r4
   27500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((sys_mode_current != sys_mode_target) ||
   27502:	4b15      	ldr	r3, [pc, #84]	; (27558 <init_and_config+0x84>)
   27504:	7818      	ldrb	r0, [r3, #0]
	    (mode_pref_current != mode_pref_target)) {
   27506:	4b15      	ldr	r3, [pc, #84]	; (2755c <init_and_config+0x88>)
   27508:	7819      	ldrb	r1, [r3, #0]
	if ((sys_mode_current != sys_mode_target) ||
   2750a:	783b      	ldrb	r3, [r7, #0]
   2750c:	4283      	cmp	r3, r0
   2750e:	d102      	bne.n	27516 <init_and_config+0x42>
   27510:	7833      	ldrb	r3, [r6, #0]
   27512:	428b      	cmp	r3, r1
   27514:	d007      	beq.n	27526 <init_and_config+0x52>
		err = lte_lc_system_mode_set(sys_mode_target, mode_pref_target);
   27516:	f7ff ff17 	bl	27348 <lte_lc_system_mode_set>
		if (err) {
   2751a:	4604      	mov	r4, r0
   2751c:	b118      	cbz	r0, 27526 <init_and_config+0x52>
			LOG_ERR("Could not set system mode, error: %d", err);
   2751e:	4602      	mov	r2, r0
   27520:	2145      	movs	r1, #69	; 0x45
   27522:	480f      	ldr	r0, [pc, #60]	; (27560 <init_and_config+0x8c>)
   27524:	e7e9      	b.n	274fa <init_and_config+0x26>
	err = enable_notifications();
   27526:	f7ff fd71 	bl	2700c <enable_notifications>
	if (err) {
   2752a:	4604      	mov	r4, r0
   2752c:	b120      	cbz	r0, 27538 <init_and_config+0x64>
		LOG_ERR("Failed to enable notifications");
   2752e:	2145      	movs	r1, #69	; 0x45
   27530:	480c      	ldr	r0, [pc, #48]	; (27564 <init_and_config+0x90>)
   27532:	f015 fabd 	bl	3cab0 <z_log_minimal_printk>
		return err;
   27536:	e7e2      	b.n	274fe <init_and_config+0x2a>
	is_initialized = true;
   27538:	2301      	movs	r3, #1
   2753a:	702b      	strb	r3, [r5, #0]
	return 0;
   2753c:	e7df      	b.n	274fe <init_and_config+0x2a>
		return 0;
   2753e:	2400      	movs	r4, #0
   27540:	e7dd      	b.n	274fe <init_and_config+0x2a>
   27542:	bf00      	nop
   27544:	2001b65d 	.word	0x2001b65d
   27548:	2001b65e 	.word	0x2001b65e
   2754c:	2001b702 	.word	0x2001b702
   27550:	200193f0 	.word	0x200193f0
   27554:	000457cf 	.word	0x000457cf
   27558:	20014c44 	.word	0x20014c44
   2755c:	2001b65f 	.word	0x2001b65f
   27560:	00045801 	.word	0x00045801
   27564:	0004582b 	.word	0x0004582b

00027568 <lte_lc_func_mode_get>:

int lte_lc_func_mode_get(enum lte_lc_func_mode *mode)
{
   27568:	b513      	push	{r0, r1, r4, lr}
	int err;
	uint16_t mode_tmp;

	if (mode == NULL) {
   2756a:	4604      	mov	r4, r0
   2756c:	b1a8      	cbz	r0, 2759a <lte_lc_func_mode_get+0x32>
		return -EINVAL;
	}

	/* Exactly one parameter is expected to match. */
	err = nrf_modem_at_scanf(AT_CFUN_READ, "+CFUN: %hu", &mode_tmp);
   2756e:	f10d 0206 	add.w	r2, sp, #6
   27572:	490b      	ldr	r1, [pc, #44]	; (275a0 <lte_lc_func_mode_get+0x38>)
   27574:	480b      	ldr	r0, [pc, #44]	; (275a4 <lte_lc_func_mode_get+0x3c>)
   27576:	f00d fdd9 	bl	3512c <nrf_modem_at_scanf>
	if (err != 1) {
   2757a:	2801      	cmp	r0, #1
	err = nrf_modem_at_scanf(AT_CFUN_READ, "+CFUN: %hu", &mode_tmp);
   2757c:	4602      	mov	r2, r0
	if (err != 1) {
   2757e:	d007      	beq.n	27590 <lte_lc_func_mode_get+0x28>
		LOG_ERR("AT command failed, nrf_modem_at_scanf() returned error: %d", err);
   27580:	4809      	ldr	r0, [pc, #36]	; (275a8 <lte_lc_func_mode_get+0x40>)
   27582:	2145      	movs	r1, #69	; 0x45
   27584:	f015 fa94 	bl	3cab0 <z_log_minimal_printk>
		return -EFAULT;
   27588:	f06f 000d 	mvn.w	r0, #13
	}

	*mode = mode_tmp;

	return 0;
}
   2758c:	b002      	add	sp, #8
   2758e:	bd10      	pop	{r4, pc}
	*mode = mode_tmp;
   27590:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return 0;
   27594:	2000      	movs	r0, #0
	*mode = mode_tmp;
   27596:	7023      	strb	r3, [r4, #0]
	return 0;
   27598:	e7f8      	b.n	2758c <lte_lc_func_mode_get+0x24>
		return -EINVAL;
   2759a:	f06f 0015 	mvn.w	r0, #21
   2759e:	e7f5      	b.n	2758c <lte_lc_func_mode_get+0x24>
   275a0:	0004584f 	.word	0x0004584f
   275a4:	0004585a 	.word	0x0004585a
   275a8:	00045863 	.word	0x00045863

000275ac <lte_lc_func_mode_set>:

int lte_lc_func_mode_set(enum lte_lc_func_mode mode)
{
	int err;

	switch (mode) {
   275ac:	2804      	cmp	r0, #4
{
   275ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   275b2:	4604      	mov	r4, r0
	switch (mode) {
   275b4:	d819      	bhi.n	275ea <lte_lc_func_mode_set+0x3e>
   275b6:	2804      	cmp	r0, #4
   275b8:	d81c      	bhi.n	275f4 <lte_lc_func_mode_set+0x48>
   275ba:	e8df f000 	tbb	[pc, r0]
   275be:	0b25      	.short	0x0b25
   275c0:	1b25      	.short	0x1b25
   275c2:	25          	.byte	0x25
   275c3:	00          	.byte	0x00
   275c4:	2201      	movs	r2, #1
   275c6:	fa02 f303 	lsl.w	r3, r2, r3
   275ca:	4a1f      	ldr	r2, [pc, #124]	; (27648 <lte_lc_func_mode_set+0x9c>)
   275cc:	4213      	tst	r3, r2
   275ce:	d11b      	bne.n	27608 <lte_lc_func_mode_set+0x5c>
   275d0:	079b      	lsls	r3, r3, #30
   275d2:	d50f      	bpl.n	275f4 <lte_lc_func_mode_set+0x48>

		break;
	case LTE_LC_FUNC_MODE_NORMAL:
		LTE_LC_TRACE(LTE_LC_TRACE_FUNC_MODE_NORMAL);

		err = enable_notifications();
   275d4:	f7ff fd1a 	bl	2700c <enable_notifications>
		if (err) {
   275d8:	4602      	mov	r2, r0
   275da:	b1a8      	cbz	r0, 27608 <lte_lc_func_mode_set+0x5c>
			LOG_ERR("Failed to enable notifications, error: %d", err);
   275dc:	2145      	movs	r1, #69	; 0x45
   275de:	481b      	ldr	r0, [pc, #108]	; (2764c <lte_lc_func_mode_set+0xa0>)
   275e0:	f015 fa66 	bl	3cab0 <z_log_minimal_printk>
		return -EINVAL;
	}

	err = nrf_modem_at_printf("AT+CFUN=%d", mode);
	if (err) {
		return -EFAULT;
   275e4:	f06f 050d 	mvn.w	r5, #13
   275e8:	e00b      	b.n	27602 <lte_lc_func_mode_set+0x56>
	switch (mode) {
   275ea:	f1a0 0314 	sub.w	r3, r0, #20
   275ee:	b2db      	uxtb	r3, r3
   275f0:	2b18      	cmp	r3, #24
   275f2:	d9e7      	bls.n	275c4 <lte_lc_func_mode_set+0x18>
		LOG_ERR("Invalid functional mode: %d", mode);
   275f4:	4622      	mov	r2, r4
   275f6:	2145      	movs	r1, #69	; 0x45
   275f8:	4815      	ldr	r0, [pc, #84]	; (27650 <lte_lc_func_mode_set+0xa4>)
   275fa:	f015 fa59 	bl	3cab0 <z_log_minimal_printk>
		return -EINVAL;
   275fe:	f06f 0515 	mvn.w	r5, #21
		LOG_DBG("CFUN monitor callback: %p", e->callback);
		e->callback(mode, e->context);
	}

	return 0;
}
   27602:	4628      	mov	r0, r5
   27604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = nrf_modem_at_printf("AT+CFUN=%d", mode);
   27608:	4621      	mov	r1, r4
   2760a:	4812      	ldr	r0, [pc, #72]	; (27654 <lte_lc_func_mode_set+0xa8>)
   2760c:	f00d fcfc 	bl	35008 <nrf_modem_at_printf>
	if (err) {
   27610:	4605      	mov	r5, r0
   27612:	2800      	cmp	r0, #0
   27614:	d1e6      	bne.n	275e4 <lte_lc_func_mode_set+0x38>
	STRUCT_SECTION_FOREACH(lte_lc_cfun_cb, e) {
   27616:	4e10      	ldr	r6, [pc, #64]	; (27658 <lte_lc_func_mode_set+0xac>)
   27618:	4f10      	ldr	r7, [pc, #64]	; (2765c <lte_lc_func_mode_set+0xb0>)
   2761a:	f8df 8048 	ldr.w	r8, [pc, #72]	; 27664 <lte_lc_func_mode_set+0xb8>
   2761e:	42be      	cmp	r6, r7
   27620:	d90a      	bls.n	27638 <lte_lc_func_mode_set+0x8c>
   27622:	4641      	mov	r1, r8
   27624:	480e      	ldr	r0, [pc, #56]	; (27660 <lte_lc_func_mode_set+0xb4>)
   27626:	f240 5229 	movw	r2, #1321	; 0x529
   2762a:	f015 fa07 	bl	3ca3c <assert_print>
   2762e:	f240 5129 	movw	r1, #1321	; 0x529
   27632:	4640      	mov	r0, r8
   27634:	f015 f9fb 	bl	3ca2e <assert_post_action>
   27638:	42be      	cmp	r6, r7
   2763a:	d2e2      	bcs.n	27602 <lte_lc_func_mode_set+0x56>
		e->callback(mode, e->context);
   2763c:	e9d6 3100 	ldrd	r3, r1, [r6]
   27640:	4620      	mov	r0, r4
   27642:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(lte_lc_cfun_cb, e) {
   27644:	3608      	adds	r6, #8
   27646:	e7ea      	b.n	2761e <lte_lc_func_mode_set+0x72>
   27648:	01300c01 	.word	0x01300c01
   2764c:	000458a3 	.word	0x000458a3
   27650:	000458d2 	.word	0x000458d2
   27654:	000458f3 	.word	0x000458f3
   27658:	0004bf90 	.word	0x0004bf90
   2765c:	0004bf90 	.word	0x0004bf90
   27660:	00043ff2 	.word	0x00043ff2
   27664:	0004520d 	.word	0x0004520d

00027668 <connect_lte>:
	if (!is_initialized) {
   27668:	4b3e      	ldr	r3, [pc, #248]	; (27764 <connect_lte+0xfc>)
{
   2766a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!is_initialized) {
   2766e:	781b      	ldrb	r3, [r3, #0]
{
   27670:	4605      	mov	r5, r0
	if (!is_initialized) {
   27672:	b943      	cbnz	r3, 27686 <connect_lte+0x1e>
		LOG_ERR("The LTE link controller is not initialized");
   27674:	483c      	ldr	r0, [pc, #240]	; (27768 <connect_lte+0x100>)
   27676:	2145      	movs	r1, #69	; 0x45
   27678:	f015 fa1a 	bl	3cab0 <z_log_minimal_printk>
		return -EPERM;
   2767c:	f04f 30ff 	mov.w	r0, #4294967295
}
   27680:	b002      	add	sp, #8
   27682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   27686:	2601      	movs	r6, #1
   27688:	4c38      	ldr	r4, [pc, #224]	; (2776c <connect_lte+0x104>)
   2768a:	e8d4 3fef 	ldaex	r3, [r4]
   2768e:	e8c4 6fe2 	stlex	r2, r6, [r4]
   27692:	2a00      	cmp	r2, #0
   27694:	d1f9      	bne.n	2768a <connect_lte+0x22>
	if (atomic_set(&in_progress, 1)) {
   27696:	2b00      	cmp	r3, #0
   27698:	d160      	bne.n	2775c <connect_lte+0xf4>
	err = lte_lc_nw_reg_status_get(&reg_status);
   2769a:	f10d 0007 	add.w	r0, sp, #7
   2769e:	f7ff fe2f 	bl	27300 <lte_lc_nw_reg_status_get>
	if (err) {
   276a2:	b130      	cbz	r0, 276b2 <connect_lte+0x4a>
		LOG_ERR("Failed to get current registration status");
   276a4:	4832      	ldr	r0, [pc, #200]	; (27770 <connect_lte+0x108>)
   276a6:	2145      	movs	r1, #69	; 0x45
   276a8:	f015 fa02 	bl	3cab0 <z_log_minimal_printk>
		return -EFAULT;
   276ac:	f06f 000d 	mvn.w	r0, #13
   276b0:	e7e6      	b.n	27680 <connect_lte+0x18>
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   276b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   276b6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   276ba:	2b01      	cmp	r3, #1
   276bc:	d0e0      	beq.n	27680 <connect_lte+0x18>
	if (blocking) {
   276be:	b125      	cbz	r5, 276ca <connect_lte+0x62>
   276c0:	4601      	mov	r1, r0
   276c2:	4632      	mov	r2, r6
   276c4:	482b      	ldr	r0, [pc, #172]	; (27774 <connect_lte+0x10c>)
   276c6:	f019 fc61 	bl	40f8c <z_impl_k_sem_init>
{
   276ca:	2702      	movs	r7, #2
			err = lte_lc_system_mode_set(sys_mode_target, mode_pref_current);
   276cc:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 27784 <connect_lte+0x11c>
   276d0:	4e29      	ldr	r6, [pc, #164]	; (27778 <connect_lte+0x110>)
		err = lte_lc_func_mode_get(&current_func_mode);
   276d2:	f10d 0006 	add.w	r0, sp, #6
   276d6:	f7ff ff47 	bl	27568 <lte_lc_func_mode_get>
		if (err) {
   276da:	b9b8      	cbnz	r0, 2770c <connect_lte+0xa4>
		if (!IS_ENABLED(CONFIG_LTE_NETWORK_DEFAULT) &&
   276dc:	f89d 3006 	ldrb.w	r3, [sp, #6]
   276e0:	f013 0ffb 	tst.w	r3, #251	; 0xfb
   276e4:	d00b      	beq.n	276fe <connect_lte+0x96>
		err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_NORMAL);
   276e6:	2001      	movs	r0, #1
   276e8:	f7ff ff60 	bl	275ac <lte_lc_func_mode_set>
		if (err || !blocking) {
   276ec:	b188      	cbz	r0, 27712 <connect_lte+0xaa>
   276ee:	2300      	movs	r3, #0
   276f0:	e8d4 2fef 	ldaex	r2, [r4]
   276f4:	e8c4 3fe1 	stlex	r1, r3, [r4]
   276f8:	2900      	cmp	r1, #0
   276fa:	d0c1      	beq.n	27680 <connect_lte+0x18>
   276fc:	e7f8      	b.n	276f0 <connect_lte+0x88>
			err = lte_lc_system_mode_set(sys_mode_target, mode_pref_current);
   276fe:	f898 1000 	ldrb.w	r1, [r8]
   27702:	7830      	ldrb	r0, [r6, #0]
   27704:	f7ff fe20 	bl	27348 <lte_lc_system_mode_set>
			if (err) {
   27708:	2800      	cmp	r0, #0
   2770a:	d0ec      	beq.n	276e6 <connect_lte+0x7e>
			err = -EFAULT;
   2770c:	f06f 000d 	mvn.w	r0, #13
   27710:	e7ed      	b.n	276ee <connect_lte+0x86>
		if (err || !blocking) {
   27712:	2d00      	cmp	r5, #0
   27714:	d0eb      	beq.n	276ee <connect_lte+0x86>
	return z_impl_k_sem_take(sem, timeout);
   27716:	f04f 7296 	mov.w	r2, #19660800	; 0x12c0000
   2771a:	2300      	movs	r3, #0
   2771c:	4815      	ldr	r0, [pc, #84]	; (27774 <connect_lte+0x10c>)
   2771e:	f00f fb57 	bl	36dd0 <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   27722:	f110 0f0b 	cmn.w	r0, #11
   27726:	d1e2      	bne.n	276ee <connect_lte+0x86>
			LOG_INF("Network connection attempt timed out");
   27728:	2149      	movs	r1, #73	; 0x49
   2772a:	4814      	ldr	r0, [pc, #80]	; (2777c <connect_lte+0x114>)
   2772c:	f015 f9c0 	bl	3cab0 <z_log_minimal_printk>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   27730:	2f01      	cmp	r7, #1
   27732:	d010      	beq.n	27756 <connect_lte+0xee>
				if (sys_mode_target == sys_mode_preferred) {
   27734:	7833      	ldrb	r3, [r6, #0]
				err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_OFFLINE);
   27736:	2004      	movs	r0, #4
					sys_mode_target = sys_mode_preferred;
   27738:	2b04      	cmp	r3, #4
   2773a:	bf0c      	ite	eq
   2773c:	2305      	moveq	r3, #5
   2773e:	2304      	movne	r3, #4
   27740:	7033      	strb	r3, [r6, #0]
				err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_OFFLINE);
   27742:	f7ff ff33 	bl	275ac <lte_lc_func_mode_set>
				if (err) {
   27746:	2800      	cmp	r0, #0
   27748:	d1e0      	bne.n	2770c <connect_lte+0xa4>
				LOG_INF("Using fallback network mode");
   2774a:	2149      	movs	r1, #73	; 0x49
   2774c:	480c      	ldr	r0, [pc, #48]	; (27780 <connect_lte+0x118>)
   2774e:	f015 f9af 	bl	3cab0 <z_log_minimal_printk>
   27752:	2701      	movs	r7, #1
   27754:	e7bd      	b.n	276d2 <connect_lte+0x6a>
				err = -ETIMEDOUT;
   27756:	f06f 0073 	mvn.w	r0, #115	; 0x73
   2775a:	e7c8      	b.n	276ee <connect_lte+0x86>
		return -EINPROGRESS;
   2775c:	f06f 0076 	mvn.w	r0, #118	; 0x76
   27760:	e78e      	b.n	27680 <connect_lte+0x18>
   27762:	bf00      	nop
   27764:	2001b65d 	.word	0x2001b65d
   27768:	000458fe 	.word	0x000458fe
   2776c:	200193ec 	.word	0x200193ec
   27770:	0004592e 	.word	0x0004592e
   27774:	200193f0 	.word	0x200193f0
   27778:	20014c44 	.word	0x20014c44
   2777c:	0004595d 	.word	0x0004595d
   27780:	00045987 	.word	0x00045987
   27784:	2001b65e 	.word	0x2001b65e

00027788 <lte_lc_connect_async>:
{
   27788:	b508      	push	{r3, lr}
	if (handler) {
   2778a:	b130      	cbz	r0, 2779a <lte_lc_connect_async+0x12>
		event_handler_list_append_handler(handler);
   2778c:	f000 f872 	bl	27874 <event_handler_list_append_handler>
}
   27790:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return connect_lte(false);
   27794:	2000      	movs	r0, #0
   27796:	f7ff bf67 	b.w	27668 <connect_lte>
	} else if (event_handler_list_is_empty()) {
   2779a:	f000 f863 	bl	27864 <event_handler_list_is_empty>
   2779e:	2800      	cmp	r0, #0
   277a0:	d0f6      	beq.n	27790 <lte_lc_connect_async+0x8>
		LOG_ERR("No handler registered");
   277a2:	2145      	movs	r1, #69	; 0x45
   277a4:	4802      	ldr	r0, [pc, #8]	; (277b0 <lte_lc_connect_async+0x28>)
   277a6:	f015 f983 	bl	3cab0 <z_log_minimal_printk>
}
   277aa:	f06f 0015 	mvn.w	r0, #21
   277ae:	bd08      	pop	{r3, pc}
   277b0:	000459a8 	.word	0x000459a8

000277b4 <lte_lc_deinit>:
{
   277b4:	b508      	push	{r3, lr}
	if (is_initialized) {
   277b6:	4b06      	ldr	r3, [pc, #24]	; (277d0 <lte_lc_deinit+0x1c>)
   277b8:	781a      	ldrb	r2, [r3, #0]
   277ba:	b122      	cbz	r2, 277c6 <lte_lc_deinit+0x12>
		is_initialized = false;
   277bc:	2000      	movs	r0, #0
   277be:	7018      	strb	r0, [r3, #0]
		return lte_lc_func_mode_set(LTE_LC_FUNC_MODE_POWER_OFF) ? -EFAULT : 0;
   277c0:	f7ff fef4 	bl	275ac <lte_lc_func_mode_set>
   277c4:	b908      	cbnz	r0, 277ca <lte_lc_deinit+0x16>
   277c6:	2000      	movs	r0, #0
}
   277c8:	bd08      	pop	{r3, pc}
		return lte_lc_func_mode_set(LTE_LC_FUNC_MODE_POWER_OFF) ? -EFAULT : 0;
   277ca:	f06f 000d 	mvn.w	r0, #13
   277ce:	e7fb      	b.n	277c8 <lte_lc_deinit+0x14>
   277d0:	2001b65d 	.word	0x2001b65d

000277d4 <lte_lc_neighbor_cell_measurement>:
	 * the type of search.
	 * If the type is LTE_LC_NEIGHBOR_SEARCH_TYPE_DEFAULT, we therefore use the AT
	 * command without parameters to avoid error messages for older firmware version.
	 */

	if (type == LTE_LC_NEIGHBOR_SEARCH_TYPE_EXTENDED_LIGHT) {
   277d4:	2801      	cmp	r0, #1
{
   277d6:	b508      	push	{r3, lr}
	if (type == LTE_LC_NEIGHBOR_SEARCH_TYPE_EXTENDED_LIGHT) {
   277d8:	d107      	bne.n	277ea <lte_lc_neighbor_cell_measurement+0x16>
		err = nrf_modem_at_printf("AT%%NCELLMEAS=1");
   277da:	4806      	ldr	r0, [pc, #24]	; (277f4 <lte_lc_neighbor_cell_measurement+0x20>)
	} else if (type == LTE_LC_NEIGHBOR_SEARCH_TYPE_EXTENDED_COMPLETE) {
		err = nrf_modem_at_printf("AT%%NCELLMEAS=2");
	} else {
		/* Defaulting to use LTE_LC_NEIGHBOR_SEARCH_TYPE_DEFAULT */
		err = nrf_modem_at_printf("AT%%NCELLMEAS");
   277dc:	f00d fc14 	bl	35008 <nrf_modem_at_printf>
	}

	return err ? -EFAULT : 0;
   277e0:	2800      	cmp	r0, #0
}
   277e2:	bf18      	it	ne
   277e4:	f06f 000d 	mvnne.w	r0, #13
   277e8:	bd08      	pop	{r3, pc}
	} else if (type == LTE_LC_NEIGHBOR_SEARCH_TYPE_EXTENDED_COMPLETE) {
   277ea:	2802      	cmp	r0, #2
		err = nrf_modem_at_printf("AT%%NCELLMEAS=2");
   277ec:	bf0c      	ite	eq
   277ee:	4802      	ldreq	r0, [pc, #8]	; (277f8 <lte_lc_neighbor_cell_measurement+0x24>)
		err = nrf_modem_at_printf("AT%%NCELLMEAS");
   277f0:	4802      	ldrne	r0, [pc, #8]	; (277fc <lte_lc_neighbor_cell_measurement+0x28>)
   277f2:	e7f3      	b.n	277dc <lte_lc_neighbor_cell_measurement+0x8>
   277f4:	000459c3 	.word	0x000459c3
   277f8:	000459d3 	.word	0x000459d3
   277fc:	000459e3 	.word	0x000459e3

00027800 <lte_lc_neighbor_cell_measurement_cancel>:

int lte_lc_neighbor_cell_measurement_cancel(void)
{
   27800:	b508      	push	{r3, lr}
	return nrf_modem_at_printf(AT_NCELLMEAS_STOP) ? -EFAULT : 0;
   27802:	4804      	ldr	r0, [pc, #16]	; (27814 <lte_lc_neighbor_cell_measurement_cancel+0x14>)
   27804:	f00d fc00 	bl	35008 <nrf_modem_at_printf>
   27808:	2800      	cmp	r0, #0
}
   2780a:	bf18      	it	ne
   2780c:	f06f 000d 	mvnne.w	r0, #13
   27810:	bd08      	pop	{r3, pc}
   27812:	bf00      	nop
   27814:	000459f1 	.word	0x000459f1

00027818 <lte_lc_modem_events_enable>:

	return 0;
}

int lte_lc_modem_events_enable(void)
{
   27818:	b508      	push	{r3, lr}
	return nrf_modem_at_printf(AT_MDMEV_ENABLE) ? -EFAULT : 0;
   2781a:	4804      	ldr	r0, [pc, #16]	; (2782c <lte_lc_modem_events_enable+0x14>)
   2781c:	f00d fbf4 	bl	35008 <nrf_modem_at_printf>
   27820:	2800      	cmp	r0, #0
}
   27822:	bf18      	it	ne
   27824:	f06f 000d 	mvnne.w	r0, #13
   27828:	bd08      	pop	{r3, pc}
   2782a:	bf00      	nop
   2782c:	00045a03 	.word	0x00045a03

00027830 <event_handler_list_find_node>:
	return list->head;
   27830:	4b08      	ldr	r3, [pc, #32]	; (27854 <event_handler_list_find_node+0x24>)
{
   27832:	4602      	mov	r2, r0
   27834:	6818      	ldr	r0, [r3, #0]
   27836:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&handler_list, curr, node) {
   27838:	b120      	cbz	r0, 27844 <event_handler_list_find_node+0x14>
   2783a:	2400      	movs	r4, #0
		if (curr->handler == handler) {
   2783c:	6843      	ldr	r3, [r0, #4]
   2783e:	428b      	cmp	r3, r1
   27840:	d101      	bne.n	27846 <event_handler_list_find_node+0x16>
			*prev_out = prev;
   27842:	6014      	str	r4, [r2, #0]
}
   27844:	bd10      	pop	{r4, pc}
	return node->next;
   27846:	6803      	ldr	r3, [r0, #0]
   27848:	4604      	mov	r4, r0
   2784a:	4618      	mov	r0, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&handler_list, curr, node) {
   2784c:	2b00      	cmp	r3, #0
   2784e:	d1f5      	bne.n	2783c <event_handler_list_find_node+0xc>
   27850:	e7f8      	b.n	27844 <event_handler_list_find_node+0x14>
   27852:	bf00      	nop
   27854:	20019410 	.word	0x20019410

00027858 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   27858:	4801      	ldr	r0, [pc, #4]	; (27860 <k_mutex_unlock.constprop.0.isra.0+0x8>)
   2785a:	f00f b8fd 	b.w	36a58 <z_impl_k_mutex_unlock>
   2785e:	bf00      	nop
   27860:	20014f40 	.word	0x20014f40

00027864 <event_handler_list_is_empty>:
	return list->head;
   27864:	4b02      	ldr	r3, [pc, #8]	; (27870 <event_handler_list_is_empty+0xc>)
Z_GENLIST_IS_EMPTY(slist)
   27866:	6818      	ldr	r0, [r3, #0]
}
   27868:	fab0 f080 	clz	r0, r0
   2786c:	0940      	lsrs	r0, r0, #5
   2786e:	4770      	bx	lr
   27870:	20019410 	.word	0x20019410

00027874 <event_handler_list_append_handler>:
{
   27874:	b537      	push	{r0, r1, r2, r4, r5, lr}
   27876:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   27878:	f04f 32ff 	mov.w	r2, #4294967295
   2787c:	f04f 33ff 	mov.w	r3, #4294967295
   27880:	4812      	ldr	r0, [pc, #72]	; (278cc <event_handler_list_append_handler+0x58>)
   27882:	f00f f817 	bl	368b4 <z_impl_k_mutex_lock>
	if (event_handler_list_find_node(&to_ins, handler) != NULL) {
   27886:	4629      	mov	r1, r5
   27888:	a801      	add	r0, sp, #4
   2788a:	f7ff ffd1 	bl	27830 <event_handler_list_find_node>
   2788e:	4604      	mov	r4, r0
   27890:	b120      	cbz	r0, 2789c <event_handler_list_append_handler+0x28>
		k_mutex_unlock(&list_mtx);
   27892:	f7ff ffe1 	bl	27858 <k_mutex_unlock.constprop.0.isra.0>
		return 0;
   27896:	2000      	movs	r0, #0
}
   27898:	b003      	add	sp, #12
   2789a:	bd30      	pop	{r4, r5, pc}
	to_ins = (struct event_handler *)k_malloc(sizeof(struct event_handler));
   2789c:	2008      	movs	r0, #8
   2789e:	f019 fcf7 	bl	41290 <k_malloc>
   278a2:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   278a4:	b920      	cbnz	r0, 278b0 <event_handler_list_append_handler+0x3c>
		k_mutex_unlock(&list_mtx);
   278a6:	f7ff ffd7 	bl	27858 <k_mutex_unlock.constprop.0.isra.0>
		return -ENOBUFS;
   278aa:	f06f 0068 	mvn.w	r0, #104	; 0x68
   278ae:	e7f3      	b.n	27898 <event_handler_list_append_handler+0x24>
	return list->tail;
   278b0:	4a07      	ldr	r2, [pc, #28]	; (278d0 <event_handler_list_append_handler+0x5c>)
   278b2:	6004      	str	r4, [r0, #0]
   278b4:	6044      	str	r4, [r0, #4]
	to_ins->handler = handler;
   278b6:	9b01      	ldr	r3, [sp, #4]
   278b8:	6851      	ldr	r1, [r2, #4]
	parent->next = child;
   278ba:	e9c3 4500 	strd	r4, r5, [r3]
Z_GENLIST_APPEND(slist, snode)
   278be:	b911      	cbnz	r1, 278c6 <event_handler_list_append_handler+0x52>
	list->head = node;
   278c0:	e9c2 3300 	strd	r3, r3, [r2]
}
   278c4:	e7e5      	b.n	27892 <event_handler_list_append_handler+0x1e>
	parent->next = child;
   278c6:	600b      	str	r3, [r1, #0]
	list->tail = node;
   278c8:	6053      	str	r3, [r2, #4]
}
   278ca:	e7e2      	b.n	27892 <event_handler_list_append_handler+0x1e>
   278cc:	20014f40 	.word	0x20014f40
   278d0:	20019410 	.word	0x20019410

000278d4 <event_handler_list_dispatch>:
{
   278d4:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   278d6:	4c0d      	ldr	r4, [pc, #52]	; (2790c <event_handler_list_dispatch+0x38>)
   278d8:	4605      	mov	r5, r0
	if (event_handler_list_is_empty()) {
   278da:	6823      	ldr	r3, [r4, #0]
   278dc:	b1ab      	cbz	r3, 2790a <event_handler_list_dispatch+0x36>
   278de:	f04f 33ff 	mov.w	r3, #4294967295
   278e2:	f04f 32ff 	mov.w	r2, #4294967295
   278e6:	480a      	ldr	r0, [pc, #40]	; (27910 <event_handler_list_dispatch+0x3c>)
   278e8:	f00e ffe4 	bl	368b4 <z_impl_k_mutex_lock>
   278ec:	6823      	ldr	r3, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   278ee:	b91b      	cbnz	r3, 278f8 <event_handler_list_dispatch+0x24>
}
   278f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   278f4:	f7ff bfb0 	b.w	27858 <k_mutex_unlock.constprop.0.isra.0>
	return node->next;
   278f8:	681c      	ldr	r4, [r3, #0]
		curr->handler(evt);
   278fa:	4628      	mov	r0, r5
   278fc:	685b      	ldr	r3, [r3, #4]
   278fe:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   27900:	2c00      	cmp	r4, #0
   27902:	d0f5      	beq.n	278f0 <event_handler_list_dispatch+0x1c>
   27904:	4623      	mov	r3, r4
   27906:	6824      	ldr	r4, [r4, #0]
   27908:	e7f7      	b.n	278fa <event_handler_list_dispatch+0x26>
}
   2790a:	bd38      	pop	{r3, r4, r5, pc}
   2790c:	20019410 	.word	0x20019410
   27910:	20014f40 	.word	0x20014f40

00027914 <response_is_valid>:
{
   27914:	b537      	push	{r0, r1, r2, r4, r5, lr}
   27916:	460d      	mov	r5, r1
	if ((response == NULL) || (check == NULL)) {
   27918:	4604      	mov	r4, r0
   2791a:	b100      	cbz	r0, 2791e <response_is_valid+0xa>
   2791c:	b92a      	cbnz	r2, 2792a <response_is_valid+0x16>
		LOG_ERR("Invalid pointer provided");
   2791e:	2145      	movs	r1, #69	; 0x45
   27920:	480a      	ldr	r0, [pc, #40]	; (2794c <response_is_valid+0x38>)
   27922:	f015 f8c5 	bl	3cab0 <z_log_minimal_printk>
		return false;
   27926:	2000      	movs	r0, #0
   27928:	e00d      	b.n	27946 <response_is_valid+0x32>
	if ((response_len < strlen(check)) ||
   2792a:	4610      	mov	r0, r2
   2792c:	9201      	str	r2, [sp, #4]
   2792e:	f7f5 fc88 	bl	1d242 <strlen>
   27932:	4285      	cmp	r5, r0
   27934:	d3f7      	bcc.n	27926 <response_is_valid+0x12>
	    (memcmp(response, check, response_len) != 0)) {
   27936:	462a      	mov	r2, r5
   27938:	4620      	mov	r0, r4
   2793a:	9901      	ldr	r1, [sp, #4]
   2793c:	f019 fd22 	bl	41384 <memcmp>
	if ((response_len < strlen(check)) ||
   27940:	fab0 f080 	clz	r0, r0
   27944:	0940      	lsrs	r0, r0, #5
}
   27946:	b003      	add	sp, #12
   27948:	bd30      	pop	{r4, r5, pc}
   2794a:	bf00      	nop
   2794c:	00045a88 	.word	0x00045a88

00027950 <parse_psm>:

int parse_psm(const char *active_time_str, const char *tau_ext_str,
	      const char *tau_legacy_str, struct lte_lc_psm_cfg *psm_cfg)
{
   27950:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	char unit_str[4] = {0};
   27954:	f04f 0800 	mov.w	r8, #0
{
   27958:	4607      	mov	r7, r0
   2795a:	460e      	mov	r6, r1
   2795c:	4614      	mov	r4, r2
   2795e:	461d      	mov	r5, r3
	char unit_str[4] = {0};
   27960:	f8cd 8004 	str.w	r8, [sp, #4]
	/* Lookup table for T3412 (legacy) timer used for periodic TAU. Unit is seconds.
	 * Ref: GPRS Timer in 3GPP TS 24.008 Table 10.5.172/3GPP TS 24.008.
	 */
	static const uint32_t t3412_lookup[8] = {2, 60, 360, 60, 60, 60, 60, 0};

	if ((strlen(active_time_str) != 8) || (strlen(tau_ext_str) != 8)) {
   27964:	f7f5 fc6d 	bl	1d242 <strlen>
   27968:	2808      	cmp	r0, #8
   2796a:	d004      	beq.n	27976 <parse_psm+0x26>
	memcpy(unit_str, active_time_str, unit_str_len);

	lut_idx = strtoul(unit_str, NULL, 2);
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
		LOG_ERR("Unable to parse active time string");
		return -EINVAL;
   2796c:	f06f 0015 	mvn.w	r0, #21

	LOG_DBG("TAU: %d sec, active time: %d sec\n",
		psm_cfg->tau, psm_cfg->active_time);

	return 0;
}
   27970:	b003      	add	sp, #12
   27972:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if ((strlen(active_time_str) != 8) || (strlen(tau_ext_str) != 8)) {
   27976:	4630      	mov	r0, r6
   27978:	f7f5 fc63 	bl	1d242 <strlen>
   2797c:	2808      	cmp	r0, #8
   2797e:	d1f5      	bne.n	2796c <parse_psm+0x1c>
	memcpy(unit_str, tau_ext_str, unit_str_len);
   27980:	8832      	ldrh	r2, [r6, #0]
   27982:	78b3      	ldrb	r3, [r6, #2]
   27984:	f8ad 2004 	strh.w	r2, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
   27988:	4641      	mov	r1, r8
   2798a:	2202      	movs	r2, #2
   2798c:	a801      	add	r0, sp, #4
	memcpy(unit_str, tau_ext_str, unit_str_len);
   2798e:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   27992:	f013 f869 	bl	3aa68 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_ext_lookup) - 1)) {
   27996:	2807      	cmp	r0, #7
   27998:	d904      	bls.n	279a4 <parse_psm+0x54>
		LOG_ERR("Unable to parse periodic TAU string (T3412 extended)");
   2799a:	2145      	movs	r1, #69	; 0x45
   2799c:	482d      	ldr	r0, [pc, #180]	; (27a54 <parse_psm+0x104>)
		LOG_ERR("Unable to parse active time string");
   2799e:	f015 f887 	bl	3cab0 <z_log_minimal_printk>
   279a2:	e7e3      	b.n	2796c <parse_psm+0x1c>
	timer_unit = t3412_ext_lookup[lut_idx];
   279a4:	4b2c      	ldr	r3, [pc, #176]	; (27a58 <parse_psm+0x108>)
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   279a6:	2202      	movs	r2, #2
	timer_unit = t3412_ext_lookup[lut_idx];
   279a8:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   279ac:	4641      	mov	r1, r8
   279ae:	1cf0      	adds	r0, r6, #3
   279b0:	f013 f85a 	bl	3aa68 <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   279b4:	f1b9 0f00 	cmp.w	r9, #0
   279b8:	d118      	bne.n	279ec <parse_psm+0x9c>
   279ba:	f04f 33ff 	mov.w	r3, #4294967295
   279be:	602b      	str	r3, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   279c0:	b1cc      	cbz	r4, 279f6 <parse_psm+0xa6>
   279c2:	4620      	mov	r0, r4
   279c4:	f7f5 fc3d 	bl	1d242 <strlen>
   279c8:	2808      	cmp	r0, #8
   279ca:	d114      	bne.n	279f6 <parse_psm+0xa6>
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   279cc:	8822      	ldrh	r2, [r4, #0]
   279ce:	78a3      	ldrb	r3, [r4, #2]
   279d0:	f8ad 2004 	strh.w	r2, [sp, #4]
		lut_idx = strtoul(unit_str, NULL, 2);
   279d4:	2100      	movs	r1, #0
   279d6:	2202      	movs	r2, #2
   279d8:	a801      	add	r0, sp, #4
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   279da:	f88d 3006 	strb.w	r3, [sp, #6]
		lut_idx = strtoul(unit_str, NULL, 2);
   279de:	f013 f843 	bl	3aa68 <strtoul>
		if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   279e2:	2807      	cmp	r0, #7
   279e4:	d917      	bls.n	27a16 <parse_psm+0xc6>
			LOG_ERR("Unable to parse periodic TAU string (T3412)");
   279e6:	2145      	movs	r1, #69	; 0x45
   279e8:	481c      	ldr	r0, [pc, #112]	; (27a5c <parse_psm+0x10c>)
   279ea:	e7d8      	b.n	2799e <parse_psm+0x4e>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   279ec:	fb09 f000 	mul.w	r0, r9, r0
   279f0:	6028      	str	r0, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   279f2:	3001      	adds	r0, #1
   279f4:	d0e4      	beq.n	279c0 <parse_psm+0x70>
	memcpy(unit_str, active_time_str, unit_str_len);
   279f6:	883a      	ldrh	r2, [r7, #0]
   279f8:	78bb      	ldrb	r3, [r7, #2]
   279fa:	f8ad 2004 	strh.w	r2, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
   279fe:	2100      	movs	r1, #0
   27a00:	2202      	movs	r2, #2
   27a02:	a801      	add	r0, sp, #4
	memcpy(unit_str, active_time_str, unit_str_len);
   27a04:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   27a08:	f013 f82e 	bl	3aa68 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   27a0c:	2807      	cmp	r0, #7
   27a0e:	d911      	bls.n	27a34 <parse_psm+0xe4>
		LOG_ERR("Unable to parse active time string");
   27a10:	2145      	movs	r1, #69	; 0x45
   27a12:	4813      	ldr	r0, [pc, #76]	; (27a60 <parse_psm+0x110>)
   27a14:	e7c3      	b.n	2799e <parse_psm+0x4e>
		timer_unit = t3412_lookup[lut_idx];
   27a16:	4b13      	ldr	r3, [pc, #76]	; (27a64 <parse_psm+0x114>)
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   27a18:	2202      	movs	r2, #2
		timer_unit = t3412_lookup[lut_idx];
   27a1a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   27a1e:	2100      	movs	r1, #0
   27a20:	1ce0      	adds	r0, r4, #3
   27a22:	f013 f821 	bl	3aa68 <strtoul>
		psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   27a26:	b116      	cbz	r6, 27a2e <parse_psm+0xde>
   27a28:	4346      	muls	r6, r0
   27a2a:	602e      	str	r6, [r5, #0]
   27a2c:	e7e3      	b.n	279f6 <parse_psm+0xa6>
   27a2e:	f04f 36ff 	mov.w	r6, #4294967295
   27a32:	e7fa      	b.n	27a2a <parse_psm+0xda>
	timer_unit = t3324_lookup[lut_idx];
   27a34:	4b0c      	ldr	r3, [pc, #48]	; (27a68 <parse_psm+0x118>)
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   27a36:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
   27a38:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   27a3c:	2100      	movs	r1, #0
   27a3e:	1cf8      	adds	r0, r7, #3
   27a40:	f013 f812 	bl	3aa68 <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   27a44:	b11c      	cbz	r4, 27a4e <parse_psm+0xfe>
   27a46:	4344      	muls	r4, r0
	return 0;
   27a48:	2000      	movs	r0, #0
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   27a4a:	606c      	str	r4, [r5, #4]
	return 0;
   27a4c:	e790      	b.n	27970 <parse_psm+0x20>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   27a4e:	f04f 34ff 	mov.w	r4, #4294967295
   27a52:	e7f9      	b.n	27a48 <parse_psm+0xf8>
   27a54:	00045c05 	.word	0x00045c05
   27a58:	00042cdc 	.word	0x00042cdc
   27a5c:	00045c3f 	.word	0x00045c3f
   27a60:	00045c70 	.word	0x00045c70
   27a64:	00042cbc 	.word	0x00042cbc
   27a68:	00042cbc 	.word	0x00042cbc

00027a6c <parse_rrc_mode>:
int parse_rrc_mode(const char *at_response,
		   enum lte_lc_rrc_mode *mode,
		   size_t mode_index)
{
	int err, temp_mode;
	struct at_param_list resp_list = {0};
   27a6c:	2300      	movs	r3, #0
{
   27a6e:	b5f0      	push	{r4, r5, r6, r7, lr}
   27a70:	b085      	sub	sp, #20
   27a72:	4607      	mov	r7, r0
   27a74:	460d      	mov	r5, r1

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   27a76:	a802      	add	r0, sp, #8
   27a78:	2104      	movs	r1, #4
{
   27a7a:	4616      	mov	r6, r2
	struct at_param_list resp_list = {0};
   27a7c:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   27a80:	f017 fb57 	bl	3f132 <at_params_list_init>
	if (err) {
   27a84:	4604      	mov	r4, r0
   27a86:	b138      	cbz	r0, 27a98 <parse_rrc_mode+0x2c>
		LOG_ERR("Could not init AT params list, error: %d", err);
   27a88:	4602      	mov	r2, r0
   27a8a:	2145      	movs	r1, #69	; 0x45
   27a8c:	4817      	ldr	r0, [pc, #92]	; (27aec <parse_rrc_mode+0x80>)
   27a8e:	f015 f80f 	bl	3cab0 <z_log_minimal_printk>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   27a92:	4620      	mov	r0, r4
   27a94:	b005      	add	sp, #20
   27a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response,
   27a98:	4601      	mov	r1, r0
   27a9a:	aa02      	add	r2, sp, #8
   27a9c:	4638      	mov	r0, r7
   27a9e:	f017 fb45 	bl	3f12c <at_parser_params_from_str>
	if (err) {
   27aa2:	4604      	mov	r4, r0
   27aa4:	b140      	cbz	r0, 27ab8 <parse_rrc_mode+0x4c>
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
   27aa6:	2145      	movs	r1, #69	; 0x45
   27aa8:	4602      	mov	r2, r0
   27aaa:	4811      	ldr	r0, [pc, #68]	; (27af0 <parse_rrc_mode+0x84>)
		LOG_ERR("Could not get signalling mode, error: %d", err);
   27aac:	f015 f800 	bl	3cab0 <z_log_minimal_printk>
	at_params_list_free(&resp_list);
   27ab0:	a802      	add	r0, sp, #8
   27ab2:	f017 fb51 	bl	3f158 <at_params_list_free>
	return err;
   27ab6:	e7ec      	b.n	27a92 <parse_rrc_mode+0x26>
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
   27ab8:	4631      	mov	r1, r6
   27aba:	aa01      	add	r2, sp, #4
   27abc:	a802      	add	r0, sp, #8
   27abe:	f017 fc0f 	bl	3f2e0 <at_params_int_get>
	if (err) {
   27ac2:	4604      	mov	r4, r0
   27ac4:	b118      	cbz	r0, 27ace <parse_rrc_mode+0x62>
		LOG_ERR("Could not get signalling mode, error: %d", err);
   27ac6:	4602      	mov	r2, r0
   27ac8:	2145      	movs	r1, #69	; 0x45
   27aca:	480a      	ldr	r0, [pc, #40]	; (27af4 <parse_rrc_mode+0x88>)
   27acc:	e7ee      	b.n	27aac <parse_rrc_mode+0x40>
	if (temp_mode == 0) {
   27ace:	9a01      	ldr	r2, [sp, #4]
   27ad0:	b90a      	cbnz	r2, 27ad6 <parse_rrc_mode+0x6a>
		*mode = LTE_LC_RRC_MODE_IDLE;
   27ad2:	7028      	strb	r0, [r5, #0]
   27ad4:	e7ec      	b.n	27ab0 <parse_rrc_mode+0x44>
	} else if (temp_mode == 1) {
   27ad6:	2a01      	cmp	r2, #1
   27ad8:	d101      	bne.n	27ade <parse_rrc_mode+0x72>
		*mode = LTE_LC_RRC_MODE_CONNECTED;
   27ada:	702a      	strb	r2, [r5, #0]
   27adc:	e7e8      	b.n	27ab0 <parse_rrc_mode+0x44>
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
   27ade:	2145      	movs	r1, #69	; 0x45
   27ae0:	4805      	ldr	r0, [pc, #20]	; (27af8 <parse_rrc_mode+0x8c>)
   27ae2:	f014 ffe5 	bl	3cab0 <z_log_minimal_printk>
		err = -EINVAL;
   27ae6:	f06f 0415 	mvn.w	r4, #21
   27aea:	e7e1      	b.n	27ab0 <parse_rrc_mode+0x44>
   27aec:	00045aa6 	.word	0x00045aa6
   27af0:	00045c98 	.word	0x00045c98
   27af4:	00045cc8 	.word	0x00045cc8
   27af8:	00045cf6 	.word	0x00045cf6

00027afc <parse_cereg>:
int parse_cereg(const char *at_response,
		bool is_notif,
		enum lte_lc_nw_reg_status *reg_status,
		struct lte_lc_cell *cell,
		enum lte_lc_lte_mode *lte_mode)
{
   27afc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27b00:	461e      	mov	r6, r3
	int err, status;
	struct at_param_list resp_list;
	char str_buf[10];
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   27b02:	2300      	movs	r3, #0
{
   27b04:	b08b      	sub	sp, #44	; 0x2c
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   27b06:	9303      	str	r3, [sp, #12]
   27b08:	f8ad 3010 	strh.w	r3, [sp, #16]
   27b0c:	f88d 3012 	strb.w	r3, [sp, #18]
{
   27b10:	4691      	mov	r9, r2
	size_t response_prefix_len = sizeof(response_prefix);
	size_t len = sizeof(str_buf) - 1;
   27b12:	2309      	movs	r3, #9
   27b14:	2207      	movs	r2, #7
{
   27b16:	4605      	mov	r5, r0
   27b18:	460f      	mov	r7, r1

	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   27b1a:	a805      	add	r0, sp, #20
   27b1c:	210b      	movs	r1, #11
	size_t len = sizeof(str_buf) - 1;
   27b1e:	e9cd 2300 	strd	r2, r3, [sp]
{
   27b22:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   27b26:	f017 fb04 	bl	3f132 <at_params_list_init>
	if (err) {
   27b2a:	4604      	mov	r4, r0
   27b2c:	b140      	cbz	r0, 27b40 <parse_cereg+0x44>
		LOG_ERR("Could not init AT params list, error: %d", err);
   27b2e:	4602      	mov	r2, r0
   27b30:	2145      	movs	r1, #69	; 0x45
   27b32:	4854      	ldr	r0, [pc, #336]	; (27c84 <parse_cereg+0x188>)
   27b34:	f014 ffbc 	bl	3cab0 <z_log_minimal_printk>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   27b38:	4620      	mov	r0, r4
   27b3a:	b00b      	add	sp, #44	; 0x2c
   27b3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = at_parser_params_from_str(at_response,
   27b40:	4601      	mov	r1, r0
   27b42:	aa05      	add	r2, sp, #20
   27b44:	4628      	mov	r0, r5
   27b46:	f017 faf1 	bl	3f12c <at_parser_params_from_str>
	if (err) {
   27b4a:	4604      	mov	r4, r0
   27b4c:	b140      	cbz	r0, 27b60 <parse_cereg+0x64>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   27b4e:	2145      	movs	r1, #69	; 0x45
   27b50:	4602      	mov	r2, r0
   27b52:	484d      	ldr	r0, [pc, #308]	; (27c88 <parse_cereg+0x18c>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   27b54:	f014 ffac 	bl	3cab0 <z_log_minimal_printk>
	at_params_list_free(&resp_list);
   27b58:	a805      	add	r0, sp, #20
   27b5a:	f017 fafd 	bl	3f158 <at_params_list_free>
	return err;
   27b5e:	e7eb      	b.n	27b38 <parse_cereg+0x3c>
	err = at_params_string_get(&resp_list,
   27b60:	4601      	mov	r1, r0
   27b62:	466b      	mov	r3, sp
   27b64:	aa03      	add	r2, sp, #12
   27b66:	a805      	add	r0, sp, #20
   27b68:	f017 fbef 	bl	3f34a <at_params_string_get>
	if (err) {
   27b6c:	4604      	mov	r4, r0
   27b6e:	b118      	cbz	r0, 27b78 <parse_cereg+0x7c>
		LOG_ERR("Could not get response prefix, error: %d", err);
   27b70:	4602      	mov	r2, r0
   27b72:	2145      	movs	r1, #69	; 0x45
   27b74:	4845      	ldr	r0, [pc, #276]	; (27c8c <parse_cereg+0x190>)
   27b76:	e7ed      	b.n	27b54 <parse_cereg+0x58>
	if (!response_is_valid(response_prefix, response_prefix_len,
   27b78:	4a45      	ldr	r2, [pc, #276]	; (27c90 <parse_cereg+0x194>)
   27b7a:	9900      	ldr	r1, [sp, #0]
   27b7c:	a803      	add	r0, sp, #12
   27b7e:	f7ff fec9 	bl	27914 <response_is_valid>
   27b82:	2800      	cmp	r0, #0
   27b84:	d0e8      	beq.n	27b58 <parse_cereg+0x5c>
	size_t reg_status_index = is_notif ? AT_CEREG_REG_STATUS_INDEX :
   27b86:	2f00      	cmp	r7, #0
	err = at_params_int_get(list, reg_status_index, &reg_status);
   27b88:	bf14      	ite	ne
   27b8a:	2101      	movne	r1, #1
   27b8c:	2102      	moveq	r1, #2
   27b8e:	aa07      	add	r2, sp, #28
   27b90:	a805      	add	r0, sp, #20
   27b92:	f017 fba5 	bl	3f2e0 <at_params_int_get>
	if (err) {
   27b96:	1e05      	subs	r5, r0, #0
   27b98:	d132      	bne.n	27c00 <parse_cereg+0x104>
	switch (reg_status) {
   27b9a:	9d07      	ldr	r5, [sp, #28]
   27b9c:	2d08      	cmp	r5, #8
   27b9e:	d012      	beq.n	27bc6 <parse_cereg+0xca>
   27ba0:	dc0f      	bgt.n	27bc2 <parse_cereg+0xc6>
   27ba2:	2d05      	cmp	r5, #5
   27ba4:	d90f      	bls.n	27bc6 <parse_cereg+0xca>
		LOG_ERR("Invalid network registration status: %d", reg_status);
   27ba6:	462a      	mov	r2, r5
   27ba8:	2145      	movs	r1, #69	; 0x45
   27baa:	483a      	ldr	r0, [pc, #232]	; (27c94 <parse_cereg+0x198>)
   27bac:	f014 ff80 	bl	3cab0 <z_log_minimal_printk>
		return -EINVAL;
   27bb0:	f06f 0515 	mvn.w	r5, #21
		LOG_ERR("Could not get registration status, error: %d", status);
   27bb4:	462a      	mov	r2, r5
   27bb6:	2145      	movs	r1, #69	; 0x45
   27bb8:	4837      	ldr	r0, [pc, #220]	; (27c98 <parse_cereg+0x19c>)
			LOG_ERR("Could not get cell ID, error: %d", err);
   27bba:	f014 ff79 	bl	3cab0 <z_log_minimal_printk>
			goto clean_exit;
   27bbe:	462c      	mov	r4, r5
   27bc0:	e7ca      	b.n	27b58 <parse_cereg+0x5c>
	switch (reg_status) {
   27bc2:	2d5a      	cmp	r5, #90	; 0x5a
   27bc4:	d1ef      	bne.n	27ba6 <parse_cereg+0xaa>
	if (reg_status) {
   27bc6:	f1b9 0f00 	cmp.w	r9, #0
   27bca:	d001      	beq.n	27bd0 <parse_cereg+0xd4>
		*reg_status = status;
   27bcc:	f889 5000 	strb.w	r5, [r9]
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   27bd0:	2e00      	cmp	r6, #0
   27bd2:	d03e      	beq.n	27c52 <parse_cereg+0x156>
   27bd4:	2d5a      	cmp	r5, #90	; 0x5a
   27bd6:	d050      	beq.n	27c7a <parse_cereg+0x17e>
	    (at_params_valid_count_get(&resp_list) > AT_CEREG_CELL_ID_INDEX)) {
   27bd8:	a805      	add	r0, sp, #20
   27bda:	f017 fbdd 	bl	3f398 <at_params_valid_count_get>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   27bde:	2803      	cmp	r0, #3
   27be0:	d94b      	bls.n	27c7a <parse_cereg+0x17e>
		err = at_params_string_get(
   27be2:	2f00      	cmp	r7, #0
   27be4:	bf14      	ite	ne
   27be6:	2102      	movne	r1, #2
   27be8:	2103      	moveq	r1, #3
   27bea:	ab01      	add	r3, sp, #4
   27bec:	aa07      	add	r2, sp, #28
   27bee:	a805      	add	r0, sp, #20
   27bf0:	f017 fbab 	bl	3f34a <at_params_string_get>
		if (err) {
   27bf4:	4605      	mov	r5, r0
   27bf6:	b128      	cbz	r0, 27c04 <parse_cereg+0x108>
			LOG_ERR("Could not get tracking area code, error: %d", err);
   27bf8:	4602      	mov	r2, r0
   27bfa:	2145      	movs	r1, #69	; 0x45
   27bfc:	4827      	ldr	r0, [pc, #156]	; (27c9c <parse_cereg+0x1a0>)
   27bfe:	e7dc      	b.n	27bba <parse_cereg+0xbe>
	if (status < 0) {
   27c00:	dae1      	bge.n	27bc6 <parse_cereg+0xca>
   27c02:	e7d7      	b.n	27bb4 <parse_cereg+0xb8>
		str_buf[len] = '\0';
   27c04:	9b01      	ldr	r3, [sp, #4]
   27c06:	aa0a      	add	r2, sp, #40	; 0x28
   27c08:	4413      	add	r3, r2
		cell->tac = strtoul(str_buf, NULL, 16);
   27c0a:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   27c0c:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->tac = strtoul(str_buf, NULL, 16);
   27c10:	2210      	movs	r2, #16
   27c12:	a807      	add	r0, sp, #28
   27c14:	f012 ff28 	bl	3aa68 <strtoul>
		len = sizeof(str_buf) - 1;
   27c18:	2309      	movs	r3, #9
		err = at_params_string_get(&resp_list,
   27c1a:	2f00      	cmp	r7, #0
		cell->tac = strtoul(str_buf, NULL, 16);
   27c1c:	60f0      	str	r0, [r6, #12]
		len = sizeof(str_buf) - 1;
   27c1e:	9301      	str	r3, [sp, #4]
		err = at_params_string_get(&resp_list,
   27c20:	bf14      	ite	ne
   27c22:	2103      	movne	r1, #3
   27c24:	2104      	moveq	r1, #4
   27c26:	ab01      	add	r3, sp, #4
   27c28:	aa07      	add	r2, sp, #28
   27c2a:	a805      	add	r0, sp, #20
   27c2c:	f017 fb8d 	bl	3f34a <at_params_string_get>
		if (err) {
   27c30:	4605      	mov	r5, r0
   27c32:	b118      	cbz	r0, 27c3c <parse_cereg+0x140>
			LOG_ERR("Could not get cell ID, error: %d", err);
   27c34:	4602      	mov	r2, r0
   27c36:	2145      	movs	r1, #69	; 0x45
   27c38:	4819      	ldr	r0, [pc, #100]	; (27ca0 <parse_cereg+0x1a4>)
   27c3a:	e7be      	b.n	27bba <parse_cereg+0xbe>
		str_buf[len] = '\0';
   27c3c:	9b01      	ldr	r3, [sp, #4]
   27c3e:	aa0a      	add	r2, sp, #40	; 0x28
   27c40:	4413      	add	r3, r2
		cell->id = strtoul(str_buf, NULL, 16);
   27c42:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   27c44:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->id = strtoul(str_buf, NULL, 16);
   27c48:	2210      	movs	r2, #16
   27c4a:	a807      	add	r0, sp, #28
   27c4c:	f012 ff0c 	bl	3aa68 <strtoul>
   27c50:	60b0      	str	r0, [r6, #8]
	if (lte_mode) {
   27c52:	f1b8 0f00 	cmp.w	r8, #0
   27c56:	f43f af7f 	beq.w	27b58 <parse_cereg+0x5c>
		err = at_params_int_get(&resp_list,
   27c5a:	2f00      	cmp	r7, #0
   27c5c:	bf14      	ite	ne
   27c5e:	2104      	movne	r1, #4
   27c60:	2105      	moveq	r1, #5
   27c62:	aa02      	add	r2, sp, #8
   27c64:	a805      	add	r0, sp, #20
   27c66:	f017 fb3b 	bl	3f2e0 <at_params_int_get>
		if (err) {
   27c6a:	b920      	cbnz	r0, 27c76 <parse_cereg+0x17a>
			*lte_mode = mode;
   27c6c:	f89d 3008 	ldrb.w	r3, [sp, #8]
			LOG_DBG("LTE mode: %d", *lte_mode);
   27c70:	f888 3000 	strb.w	r3, [r8]
   27c74:	e770      	b.n	27b58 <parse_cereg+0x5c>
			*lte_mode = LTE_LC_LTE_MODE_NONE;
   27c76:	2300      	movs	r3, #0
   27c78:	e7fa      	b.n	27c70 <parse_cereg+0x174>
		cell->tac = UINT32_MAX;
   27c7a:	f04f 33ff 	mov.w	r3, #4294967295
		cell->id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   27c7e:	e9c6 3302 	strd	r3, r3, [r6, #8]
   27c82:	e7e6      	b.n	27c52 <parse_cereg+0x156>
   27c84:	00045aa6 	.word	0x00045aa6
   27c88:	00045d17 	.word	0x00045d17
   27c8c:	00045d49 	.word	0x00045d49
   27c90:	00045a3a 	.word	0x00045a3a
   27c94:	00045d77 	.word	0x00045d77
   27c98:	00045662 	.word	0x00045662
   27c9c:	00045da4 	.word	0x00045da4
   27ca0:	00045dd5 	.word	0x00045dd5

00027ca4 <parse_xt3412>:

int parse_xt3412(const char *at_response, uint64_t *time)
{
	int err;
	struct at_param_list resp_list = {0};
   27ca4:	2300      	movs	r3, #0
{
   27ca6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   27ca8:	4606      	mov	r6, r0

	if (time == NULL || at_response == NULL) {
   27caa:	460d      	mov	r5, r1
	struct at_param_list resp_list = {0};
   27cac:	e9cd 3300 	strd	r3, r3, [sp]
	if (time == NULL || at_response == NULL) {
   27cb0:	b3c9      	cbz	r1, 27d26 <parse_xt3412+0x82>
   27cb2:	b3c0      	cbz	r0, 27d26 <parse_xt3412+0x82>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XT3412_PARAMS_COUNT_MAX);
   27cb4:	2104      	movs	r1, #4
   27cb6:	4668      	mov	r0, sp
   27cb8:	f017 fa3b 	bl	3f132 <at_params_list_init>
	if (err) {
   27cbc:	4604      	mov	r4, r0
   27cbe:	b138      	cbz	r0, 27cd0 <parse_xt3412+0x2c>
		LOG_ERR("Could not init AT params list, error: %d", err);
   27cc0:	4602      	mov	r2, r0
   27cc2:	2145      	movs	r1, #69	; 0x45
   27cc4:	4819      	ldr	r0, [pc, #100]	; (27d2c <parse_xt3412+0x88>)
   27cc6:	f014 fef3 	bl	3cab0 <z_log_minimal_printk>
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   27cca:	4620      	mov	r0, r4
   27ccc:	b002      	add	sp, #8
   27cce:	bd70      	pop	{r4, r5, r6, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   27cd0:	4601      	mov	r1, r0
   27cd2:	466a      	mov	r2, sp
   27cd4:	4630      	mov	r0, r6
   27cd6:	f017 fa29 	bl	3f12c <at_parser_params_from_str>
	if (err) {
   27cda:	4604      	mov	r4, r0
   27cdc:	b140      	cbz	r0, 27cf0 <parse_xt3412+0x4c>
		LOG_ERR("Could not parse %%XT3412 response, error: %d", err);
   27cde:	2145      	movs	r1, #69	; 0x45
   27ce0:	4602      	mov	r2, r0
   27ce2:	4813      	ldr	r0, [pc, #76]	; (27d30 <parse_xt3412+0x8c>)
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   27ce4:	f014 fee4 	bl	3cab0 <z_log_minimal_printk>
	at_params_list_free(&resp_list);
   27ce8:	4668      	mov	r0, sp
   27cea:	f017 fa35 	bl	3f158 <at_params_list_free>
	return err;
   27cee:	e7ec      	b.n	27cca <parse_xt3412+0x26>
	err = at_params_int64_get(&resp_list, AT_XT3412_TIME_INDEX, time);
   27cf0:	462a      	mov	r2, r5
   27cf2:	2102      	movs	r1, #2
   27cf4:	4668      	mov	r0, sp
   27cf6:	f017 fb10 	bl	3f31a <at_params_int64_get>
	if (err) {
   27cfa:	4604      	mov	r4, r0
   27cfc:	b118      	cbz	r0, 27d06 <parse_xt3412+0x62>
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   27cfe:	4602      	mov	r2, r0
   27d00:	2145      	movs	r1, #69	; 0x45
   27d02:	480c      	ldr	r0, [pc, #48]	; (27d34 <parse_xt3412+0x90>)
   27d04:	e7ee      	b.n	27ce4 <parse_xt3412+0x40>
	if ((*time > T3412_MAX) || *time < 0) {
   27d06:	490c      	ldr	r1, [pc, #48]	; (27d38 <parse_xt3412+0x94>)
   27d08:	e9d5 2300 	ldrd	r2, r3, [r5]
   27d0c:	4291      	cmp	r1, r2
   27d0e:	f04f 0208 	mov.w	r2, #8
   27d12:	eb72 0303 	sbcs.w	r3, r2, r3
   27d16:	d2e7      	bcs.n	27ce8 <parse_xt3412+0x44>
		LOG_WRN("Parsed time parameter not within valid range");
   27d18:	2157      	movs	r1, #87	; 0x57
   27d1a:	4808      	ldr	r0, [pc, #32]	; (27d3c <parse_xt3412+0x98>)
   27d1c:	f014 fec8 	bl	3cab0 <z_log_minimal_printk>
		err = -EINVAL;
   27d20:	f06f 0415 	mvn.w	r4, #21
   27d24:	e7e0      	b.n	27ce8 <parse_xt3412+0x44>
		return -EINVAL;
   27d26:	f06f 0415 	mvn.w	r4, #21
   27d2a:	e7ce      	b.n	27cca <parse_xt3412+0x26>
   27d2c:	00045aa6 	.word	0x00045aa6
   27d30:	00045dfb 	.word	0x00045dfb
   27d34:	00045e2d 	.word	0x00045e2d
   27d38:	5099e000 	.word	0x5099e000
   27d3c:	00045e5f 	.word	0x00045e5f

00027d40 <neighborcell_count_get>:

uint32_t neighborcell_count_get(const char *at_response)
{
   27d40:	b510      	push	{r4, lr}
	uint32_t comma_count, ncell_elements, ncell_count;

	if (at_response == NULL) {
   27d42:	4604      	mov	r4, r0
   27d44:	b928      	cbnz	r0, 27d52 <neighborcell_count_get+0x12>
		LOG_ERR("at_response is NULL, can't get cell count");
   27d46:	480b      	ldr	r0, [pc, #44]	; (27d74 <neighborcell_count_get+0x34>)
   27d48:	2145      	movs	r1, #69	; 0x45
   27d4a:	f014 feb1 	bl	3cab0 <z_log_minimal_printk>
   27d4e:	4620      	mov	r0, r4
	/* Add one, as there's no comma after the last element. */
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;

	return ncell_count;
}
   27d50:	bd10      	pop	{r4, pc}
	uint32_t count = 0;
   27d52:	2400      	movs	r4, #0
   27d54:	1e43      	subs	r3, r0, #1
		if (*str == c) {
   27d56:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   27d5a:	282c      	cmp	r0, #44	; 0x2c
   27d5c:	d101      	bne.n	27d62 <neighborcell_count_get+0x22>
			count++;
   27d5e:	3401      	adds	r4, #1
	} while (*(str++) != '\0');
   27d60:	e7f9      	b.n	27d56 <neighborcell_count_get+0x16>
   27d62:	2800      	cmp	r0, #0
   27d64:	d1f7      	bne.n	27d56 <neighborcell_count_get+0x16>
	if (comma_count < AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT) {
   27d66:	2c0a      	cmp	r4, #10
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   27d68:	bf82      	ittt	hi
   27d6a:	2005      	movhi	r0, #5
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
   27d6c:	3c09      	subhi	r4, #9
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   27d6e:	fbb4 f0f0 	udivhi	r0, r4, r0
	return ncell_count;
   27d72:	e7ed      	b.n	27d50 <neighborcell_count_get+0x10>
   27d74:	00045e91 	.word	0x00045e91

00027d78 <parse_ncellmeas>:
 * Returns 1 on measurement failure
 * Returns -E2BIG if not all cells were parsed due to memory limitations
 * Returns otherwise a negative error code.
 */
int parse_ncellmeas(const char *at_response, struct lte_lc_cells_info *cells)
{
   27d78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int err, status, tmp, len;
	struct at_param_list resp_list;
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   27d7c:	230b      	movs	r3, #11
{
   27d7e:	460d      	mov	r5, r1
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   27d80:	2100      	movs	r1, #0
{
   27d82:	4606      	mov	r6, r0
   27d84:	b08d      	sub	sp, #52	; 0x34
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   27d86:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
	size_t response_prefix_len = sizeof(response_prefix);
   27d8a:	9304      	str	r3, [sp, #16]
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   27d8c:	f8cd 102b 	str.w	r1, [sp, #43]	; 0x2b
static uint32_t get_char_frequency(const char *str, char c)
   27d90:	1e42      	subs	r2, r0, #1
		if (*str == c) {
   27d92:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   27d96:	2b2c      	cmp	r3, #44	; 0x2c
   27d98:	d101      	bne.n	27d9e <parse_ncellmeas+0x26>
			count++;
   27d9a:	3101      	adds	r1, #1
	} while (*(str++) != '\0');
   27d9c:	e7f9      	b.n	27d92 <parse_ncellmeas+0x1a>
   27d9e:	2b00      	cmp	r3, #0
   27da0:	d1f7      	bne.n	27d92 <parse_ncellmeas+0x1a>
	 * 3 is added to account for the parameters that do not have a trailng
	 * comma.
	 */
	size_t param_count = get_char_frequency(at_response, ',') + 3;

	cells->ncells_count = 0;
   27da2:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   27da6:	f04f 33ff 	mov.w	r3, #4294967295

	err = at_params_list_init(&resp_list, param_count);
   27daa:	3103      	adds	r1, #3
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   27dac:	60ab      	str	r3, [r5, #8]
	err = at_params_list_init(&resp_list, param_count);
   27dae:	a807      	add	r0, sp, #28
   27db0:	f017 f9bf 	bl	3f132 <at_params_list_init>
	if (err) {
   27db4:	4604      	mov	r4, r0
   27db6:	b140      	cbz	r0, 27dca <parse_ncellmeas+0x52>
		LOG_ERR("Could not init AT params list, error: %d", err);
   27db8:	4602      	mov	r2, r0
   27dba:	2145      	movs	r1, #69	; 0x45
   27dbc:	488f      	ldr	r0, [pc, #572]	; (27ffc <parse_ncellmeas+0x284>)
   27dbe:	f014 fe77 	bl	3cab0 <z_log_minimal_printk>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   27dc2:	4620      	mov	r0, r4
   27dc4:	b00d      	add	sp, #52	; 0x34
   27dc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = at_parser_params_from_str(at_response,
   27dca:	4601      	mov	r1, r0
   27dcc:	aa07      	add	r2, sp, #28
   27dce:	4630      	mov	r0, r6
   27dd0:	f017 f9ac 	bl	3f12c <at_parser_params_from_str>
	if (err && err != -E2BIG) {
   27dd4:	4604      	mov	r4, r0
   27dd6:	b150      	cbz	r0, 27dee <parse_ncellmeas+0x76>
   27dd8:	1dc3      	adds	r3, r0, #7
   27dda:	d015      	beq.n	27e08 <parse_ncellmeas+0x90>
		LOG_ERR("Could not parse AT%%NCELLMEAS response, error: %d", err);
   27ddc:	2145      	movs	r1, #69	; 0x45
   27dde:	4602      	mov	r2, r0
   27de0:	4887      	ldr	r0, [pc, #540]	; (28000 <parse_ncellmeas+0x288>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   27de2:	f014 fe65 	bl	3cab0 <z_log_minimal_printk>
	at_params_list_free(&resp_list);
   27de6:	a807      	add	r0, sp, #28
   27de8:	f017 f9b6 	bl	3f158 <at_params_list_free>
	return err;
   27dec:	e7e9      	b.n	27dc2 <parse_ncellmeas+0x4a>
	bool incomplete = false;
   27dee:	4607      	mov	r7, r0
	err = at_params_string_get(&resp_list,
   27df0:	2100      	movs	r1, #0
   27df2:	ab04      	add	r3, sp, #16
   27df4:	aa09      	add	r2, sp, #36	; 0x24
   27df6:	a807      	add	r0, sp, #28
   27df8:	f017 faa7 	bl	3f34a <at_params_string_get>
	if (err) {
   27dfc:	4604      	mov	r4, r0
   27dfe:	b128      	cbz	r0, 27e0c <parse_ncellmeas+0x94>
		LOG_ERR("Could not get response prefix, error: %d", err);
   27e00:	4602      	mov	r2, r0
   27e02:	2145      	movs	r1, #69	; 0x45
   27e04:	487f      	ldr	r0, [pc, #508]	; (28004 <parse_ncellmeas+0x28c>)
   27e06:	e7ec      	b.n	27de2 <parse_ncellmeas+0x6a>
		incomplete = true;
   27e08:	2701      	movs	r7, #1
   27e0a:	e7f1      	b.n	27df0 <parse_ncellmeas+0x78>
	if (!response_is_valid(response_prefix, response_prefix_len,
   27e0c:	4a7e      	ldr	r2, [pc, #504]	; (28008 <parse_ncellmeas+0x290>)
   27e0e:	9904      	ldr	r1, [sp, #16]
   27e10:	a809      	add	r0, sp, #36	; 0x24
   27e12:	f7ff fd7f 	bl	27914 <response_is_valid>
   27e16:	2800      	cmp	r0, #0
   27e18:	d0e5      	beq.n	27de6 <parse_ncellmeas+0x6e>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_STATUS_INDEX, &status);
   27e1a:	2101      	movs	r1, #1
   27e1c:	aa01      	add	r2, sp, #4
   27e1e:	a807      	add	r0, sp, #28
   27e20:	f017 fa5e 	bl	3f2e0 <at_params_int_get>
	if (err) {
   27e24:	4604      	mov	r4, r0
   27e26:	2800      	cmp	r0, #0
   27e28:	d1dd      	bne.n	27de6 <parse_ncellmeas+0x6e>
	if (status != AT_NCELLMEAS_STATUS_VALUE_SUCCESS) {
   27e2a:	9b01      	ldr	r3, [sp, #4]
   27e2c:	2b00      	cmp	r3, #0
   27e2e:	f040 80e2 	bne.w	27ff6 <parse_ncellmeas+0x27e>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_CELL_ID_INDEX, &tmp, 16);
   27e32:	2102      	movs	r1, #2
   27e34:	aa02      	add	r2, sp, #8
   27e36:	a807      	add	r0, sp, #28
   27e38:	f017 faf8 	bl	3f42c <string_param_to_int.constprop.0>
	if (err) {
   27e3c:	4604      	mov	r4, r0
   27e3e:	2800      	cmp	r0, #0
   27e40:	d1d1      	bne.n	27de6 <parse_ncellmeas+0x6e>
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   27e42:	9b02      	ldr	r3, [sp, #8]
	len = sizeof(tmp_str);
   27e44:	f04f 0807 	mov.w	r8, #7
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   27e48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
		tmp = LTE_LC_CELL_EUTRAN_ID_INVALID;
   27e4c:	bfa4      	itt	ge
   27e4e:	f04f 33ff 	movge.w	r3, #4294967295
   27e52:	9302      	strge	r3, [sp, #8]
	cells->current_cell.id = tmp;
   27e54:	9b02      	ldr	r3, [sp, #8]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   27e56:	2103      	movs	r1, #3
	cells->current_cell.id = tmp;
   27e58:	60ab      	str	r3, [r5, #8]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   27e5a:	aa05      	add	r2, sp, #20
   27e5c:	ab03      	add	r3, sp, #12
   27e5e:	a807      	add	r0, sp, #28
	len = sizeof(tmp_str);
   27e60:	f8cd 800c 	str.w	r8, [sp, #12]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   27e64:	f017 fa71 	bl	3f34a <at_params_string_get>
	if (err) {
   27e68:	4604      	mov	r4, r0
   27e6a:	2800      	cmp	r0, #0
   27e6c:	d1bb      	bne.n	27de6 <parse_ncellmeas+0x6e>
	tmp_str[len] = '\0';
   27e6e:	9b03      	ldr	r3, [sp, #12]
   27e70:	aa0c      	add	r2, sp, #48	; 0x30
   27e72:	4413      	add	r3, r2
   27e74:	f803 0c1c 	strb.w	r0, [r3, #-28]
	err = string_to_int(&tmp_str[3], 10, &cells->current_cell.mnc);
   27e78:	210a      	movs	r1, #10
   27e7a:	1d2a      	adds	r2, r5, #4
   27e7c:	f10d 0017 	add.w	r0, sp, #23
   27e80:	f017 faae 	bl	3f3e0 <string_to_int>
	if (err) {
   27e84:	4604      	mov	r4, r0
   27e86:	2800      	cmp	r0, #0
   27e88:	d1ad      	bne.n	27de6 <parse_ncellmeas+0x6e>
	tmp_str[3] = '\0';
   27e8a:	f88d 0017 	strb.w	r0, [sp, #23]
	err = string_to_int(tmp_str, 10, &cells->current_cell.mcc);
   27e8e:	462a      	mov	r2, r5
   27e90:	210a      	movs	r1, #10
   27e92:	a805      	add	r0, sp, #20
   27e94:	f017 faa4 	bl	3f3e0 <string_to_int>
	if (err) {
   27e98:	4604      	mov	r4, r0
   27e9a:	2800      	cmp	r0, #0
   27e9c:	d1a3      	bne.n	27de6 <parse_ncellmeas+0x6e>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_TAC_INDEX, &tmp, 16);
   27e9e:	2104      	movs	r1, #4
   27ea0:	aa02      	add	r2, sp, #8
   27ea2:	a807      	add	r0, sp, #28
   27ea4:	f017 fac2 	bl	3f42c <string_param_to_int.constprop.0>
	if (err) {
   27ea8:	4604      	mov	r4, r0
   27eaa:	2800      	cmp	r0, #0
   27eac:	d19b      	bne.n	27de6 <parse_ncellmeas+0x6e>
	cells->current_cell.tac = tmp;
   27eae:	9b02      	ldr	r3, [sp, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   27eb0:	2105      	movs	r1, #5
	cells->current_cell.tac = tmp;
   27eb2:	60eb      	str	r3, [r5, #12]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   27eb4:	aa02      	add	r2, sp, #8
   27eb6:	a807      	add	r0, sp, #28
   27eb8:	f017 fa12 	bl	3f2e0 <at_params_int_get>
	if (err) {
   27ebc:	4604      	mov	r4, r0
   27ebe:	2800      	cmp	r0, #0
   27ec0:	d191      	bne.n	27de6 <parse_ncellmeas+0x6e>
	cells->current_cell.timing_advance = tmp;
   27ec2:	9b02      	ldr	r3, [sp, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   27ec4:	2106      	movs	r1, #6
	cells->current_cell.timing_advance = tmp;
   27ec6:	82ab      	strh	r3, [r5, #20]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   27ec8:	f105 0210 	add.w	r2, r5, #16
   27ecc:	a807      	add	r0, sp, #28
   27ece:	f017 fa07 	bl	3f2e0 <at_params_int_get>
	if (err) {
   27ed2:	4604      	mov	r4, r0
   27ed4:	2800      	cmp	r0, #0
   27ed6:	d186      	bne.n	27de6 <parse_ncellmeas+0x6e>
	err = at_params_short_get(&resp_list, AT_NCELLMEAS_PHYS_CELL_ID_INDEX,
   27ed8:	4641      	mov	r1, r8
   27eda:	f105 0228 	add.w	r2, r5, #40	; 0x28
   27ede:	a807      	add	r0, sp, #28
   27ee0:	f017 f9c2 	bl	3f268 <at_params_short_get>
	if (err) {
   27ee4:	4604      	mov	r4, r0
   27ee6:	2800      	cmp	r0, #0
   27ee8:	f47f af7d 	bne.w	27de6 <parse_ncellmeas+0x6e>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRP_INDEX, &tmp);
   27eec:	2108      	movs	r1, #8
   27eee:	aa02      	add	r2, sp, #8
   27ef0:	a807      	add	r0, sp, #28
   27ef2:	f017 f9f5 	bl	3f2e0 <at_params_int_get>
	if (err) {
   27ef6:	4604      	mov	r4, r0
   27ef8:	2800      	cmp	r0, #0
   27efa:	f47f af74 	bne.w	27de6 <parse_ncellmeas+0x6e>
	cells->current_cell.rsrp = tmp;
   27efe:	9b02      	ldr	r3, [sp, #8]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   27f00:	2109      	movs	r1, #9
	cells->current_cell.rsrp = tmp;
   27f02:	856b      	strh	r3, [r5, #42]	; 0x2a
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   27f04:	aa02      	add	r2, sp, #8
   27f06:	a807      	add	r0, sp, #28
   27f08:	f017 f9ea 	bl	3f2e0 <at_params_int_get>
	if (err) {
   27f0c:	4604      	mov	r4, r0
   27f0e:	2800      	cmp	r0, #0
   27f10:	f47f af69 	bne.w	27de6 <parse_ncellmeas+0x6e>
	cells->current_cell.rsrq = tmp;
   27f14:	9b02      	ldr	r3, [sp, #8]
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   27f16:	210a      	movs	r1, #10
	cells->current_cell.rsrq = tmp;
   27f18:	85ab      	strh	r3, [r5, #44]	; 0x2c
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   27f1a:	f105 0220 	add.w	r2, r5, #32
   27f1e:	a807      	add	r0, sp, #28
   27f20:	f017 f9fb 	bl	3f31a <at_params_int64_get>
	if (err) {
   27f24:	4604      	mov	r4, r0
   27f26:	2800      	cmp	r0, #0
   27f28:	f47f af5d 	bne.w	27de6 <parse_ncellmeas+0x6e>
	cells->ncells_count = neighborcell_count_get(at_response);
   27f2c:	4630      	mov	r0, r6
   27f2e:	f7ff ff07 	bl	27d40 <neighborcell_count_get>
   27f32:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
			cells->ncells_count * AT_NCELLMEAS_N_PARAMS_COUNT;
   27f36:	b2c6      	uxtb	r6, r0
	if (at_params_valid_count_get(&resp_list) > ta_meas_time_index) {
   27f38:	a807      	add	r0, sp, #28
   27f3a:	f017 fa2d 	bl	3f398 <at_params_valid_count_get>
			cells->ncells_count * AT_NCELLMEAS_N_PARAMS_COUNT;
   27f3e:	eb06 0686 	add.w	r6, r6, r6, lsl #2
	size_t ta_meas_time_index = AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT +
   27f42:	360b      	adds	r6, #11
	if (at_params_valid_count_get(&resp_list) > ta_meas_time_index) {
   27f44:	4286      	cmp	r6, r0
   27f46:	d208      	bcs.n	27f5a <parse_ncellmeas+0x1e2>
		err = at_params_int64_get(&resp_list, ta_meas_time_index,
   27f48:	4631      	mov	r1, r6
   27f4a:	f105 0218 	add.w	r2, r5, #24
   27f4e:	a807      	add	r0, sp, #28
   27f50:	f017 f9e3 	bl	3f31a <at_params_int64_get>
		if (err) {
   27f54:	b128      	cbz	r0, 27f62 <parse_ncellmeas+0x1ea>
   27f56:	4604      	mov	r4, r0
   27f58:	e745      	b.n	27de6 <parse_ncellmeas+0x6e>
		cells->current_cell.timing_advance_meas_time = 0;
   27f5a:	2200      	movs	r2, #0
   27f5c:	2300      	movs	r3, #0
   27f5e:	e9c5 2306 	strd	r2, r3, [r5, #24]
	if ((cells->ncells_count == 0) || (cells->neighbor_cells == NULL)) {
   27f62:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   27f66:	2b00      	cmp	r3, #0
   27f68:	f43f af3d 	beq.w	27de6 <parse_ncellmeas+0x6e>
   27f6c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   27f6e:	2b00      	cmp	r3, #0
   27f70:	f43f af39 	beq.w	27de6 <parse_ncellmeas+0x6e>
   27f74:	260f      	movs	r6, #15
	for (size_t i = 0; i < cells->ncells_count; i++) {
   27f76:	f04f 0800 	mov.w	r8, #0
   27f7a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   27f7e:	4598      	cmp	r8, r3
   27f80:	d304      	bcc.n	27f8c <parse_ncellmeas+0x214>
		err = -E2BIG;
   27f82:	2f00      	cmp	r7, #0
   27f84:	bf18      	it	ne
   27f86:	f06f 0406 	mvnne.w	r4, #6
   27f8a:	e72c      	b.n	27de6 <parse_ncellmeas+0x6e>
					&cells->neighbor_cells[i].earfcn);
   27f8c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_int_get(&resp_list,
   27f8e:	1f31      	subs	r1, r6, #4
   27f90:	eb02 1208 	add.w	r2, r2, r8, lsl #4
   27f94:	a807      	add	r0, sp, #28
   27f96:	ea4f 1908 	mov.w	r9, r8, lsl #4
   27f9a:	f017 f9a1 	bl	3f2e0 <at_params_int_get>
		if (err) {
   27f9e:	2800      	cmp	r0, #0
   27fa0:	d1d9      	bne.n	27f56 <parse_ncellmeas+0x1de>
					  &cells->neighbor_cells[i].phys_cell_id);
   27fa2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_short_get(&resp_list,
   27fa4:	1ef1      	subs	r1, r6, #3
					  &cells->neighbor_cells[i].phys_cell_id);
   27fa6:	444a      	add	r2, r9
		err = at_params_short_get(&resp_list,
   27fa8:	3208      	adds	r2, #8
   27faa:	a807      	add	r0, sp, #28
   27fac:	f017 f95c 	bl	3f268 <at_params_short_get>
		if (err) {
   27fb0:	2800      	cmp	r0, #0
   27fb2:	d1d0      	bne.n	27f56 <parse_ncellmeas+0x1de>
		err = at_params_int_get(&resp_list,
   27fb4:	aa02      	add	r2, sp, #8
   27fb6:	1eb1      	subs	r1, r6, #2
   27fb8:	a807      	add	r0, sp, #28
   27fba:	f017 f991 	bl	3f2e0 <at_params_int_get>
		if (err) {
   27fbe:	2800      	cmp	r0, #0
   27fc0:	d1c9      	bne.n	27f56 <parse_ncellmeas+0x1de>
		cells->neighbor_cells[i].rsrp = tmp;
   27fc2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   27fc4:	9a02      	ldr	r2, [sp, #8]
   27fc6:	444b      	add	r3, r9
   27fc8:	815a      	strh	r2, [r3, #10]
		err = at_params_int_get(&resp_list,
   27fca:	1e71      	subs	r1, r6, #1
   27fcc:	aa02      	add	r2, sp, #8
   27fce:	a807      	add	r0, sp, #28
   27fd0:	f017 f986 	bl	3f2e0 <at_params_int_get>
		if (err) {
   27fd4:	2800      	cmp	r0, #0
   27fd6:	d1be      	bne.n	27f56 <parse_ncellmeas+0x1de>
		cells->neighbor_cells[i].rsrq = tmp;
   27fd8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   27fda:	9b02      	ldr	r3, [sp, #8]
   27fdc:	444a      	add	r2, r9
		err = at_params_int_get(&resp_list,
   27fde:	4631      	mov	r1, r6
		cells->neighbor_cells[i].rsrq = tmp;
   27fe0:	8193      	strh	r3, [r2, #12]
		err = at_params_int_get(&resp_list,
   27fe2:	a807      	add	r0, sp, #28
   27fe4:	3204      	adds	r2, #4
   27fe6:	f017 f97b 	bl	3f2e0 <at_params_int_get>
		if (err) {
   27fea:	3605      	adds	r6, #5
   27fec:	2800      	cmp	r0, #0
   27fee:	d1b2      	bne.n	27f56 <parse_ncellmeas+0x1de>
	for (size_t i = 0; i < cells->ncells_count; i++) {
   27ff0:	f108 0801 	add.w	r8, r8, #1
   27ff4:	e7c1      	b.n	27f7a <parse_ncellmeas+0x202>
		err = 1;
   27ff6:	2401      	movs	r4, #1
   27ff8:	e6f5      	b.n	27de6 <parse_ncellmeas+0x6e>
   27ffa:	bf00      	nop
   27ffc:	00045aa6 	.word	0x00045aa6
   28000:	00045ec0 	.word	0x00045ec0
   28004:	00045d49 	.word	0x00045d49
   28008:	000459e6 	.word	0x000459e6

0002800c <parse_xmodemsleep>:

int parse_xmodemsleep(const char *at_response, struct lte_lc_modem_sleep *modem_sleep)
{
   2800c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;
	struct at_param_list resp_list = {0};
   2800e:	2300      	movs	r3, #0
{
   28010:	4606      	mov	r6, r0
	uint16_t type;

	if (modem_sleep == NULL || at_response == NULL) {
   28012:	460d      	mov	r5, r1
	struct at_param_list resp_list = {0};
   28014:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (modem_sleep == NULL || at_response == NULL) {
   28018:	2900      	cmp	r1, #0
   2801a:	d047      	beq.n	280ac <parse_xmodemsleep+0xa0>
   2801c:	2800      	cmp	r0, #0
   2801e:	d045      	beq.n	280ac <parse_xmodemsleep+0xa0>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XMODEMSLEEP_PARAMS_COUNT_MAX);
   28020:	2104      	movs	r1, #4
   28022:	a802      	add	r0, sp, #8
   28024:	f017 f885 	bl	3f132 <at_params_list_init>
	if (err) {
   28028:	4604      	mov	r4, r0
   2802a:	b138      	cbz	r0, 2803c <parse_xmodemsleep+0x30>
		LOG_ERR("Could not init AT params list, error: %d", err);
   2802c:	4602      	mov	r2, r0
   2802e:	2145      	movs	r1, #69	; 0x45
   28030:	4820      	ldr	r0, [pc, #128]	; (280b4 <parse_xmodemsleep+0xa8>)
   28032:	f014 fd3d 	bl	3cab0 <z_log_minimal_printk>
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   28036:	4620      	mov	r0, r4
   28038:	b004      	add	sp, #16
   2803a:	bd70      	pop	{r4, r5, r6, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   2803c:	4601      	mov	r1, r0
   2803e:	aa02      	add	r2, sp, #8
   28040:	4630      	mov	r0, r6
   28042:	f017 f873 	bl	3f12c <at_parser_params_from_str>
	if (err) {
   28046:	4604      	mov	r4, r0
   28048:	b128      	cbz	r0, 28056 <parse_xmodemsleep+0x4a>
		LOG_ERR("Could not parse %%XMODEMSLEEP response, error: %d", err);
   2804a:	2145      	movs	r1, #69	; 0x45
   2804c:	4602      	mov	r2, r0
   2804e:	481a      	ldr	r0, [pc, #104]	; (280b8 <parse_xmodemsleep+0xac>)
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   28050:	f014 fd2e 	bl	3cab0 <z_log_minimal_printk>
		goto clean_exit;
   28054:	e019      	b.n	2808a <parse_xmodemsleep+0x7e>
	err = at_params_unsigned_short_get(&resp_list, AT_XMODEMSLEEP_TYPE_INDEX, &type);
   28056:	2101      	movs	r1, #1
   28058:	f10d 0206 	add.w	r2, sp, #6
   2805c:	a802      	add	r0, sp, #8
   2805e:	f017 f923 	bl	3f2a8 <at_params_unsigned_short_get>
	if (err) {
   28062:	4604      	mov	r4, r0
   28064:	b118      	cbz	r0, 2806e <parse_xmodemsleep+0x62>
		LOG_ERR("Could not get mode sleep type, error: %d", err);
   28066:	4602      	mov	r2, r0
   28068:	2145      	movs	r1, #69	; 0x45
   2806a:	4814      	ldr	r0, [pc, #80]	; (280bc <parse_xmodemsleep+0xb0>)
   2806c:	e7f0      	b.n	28050 <parse_xmodemsleep+0x44>
	modem_sleep->type = type;
   2806e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   28072:	a802      	add	r0, sp, #8
	modem_sleep->type = type;
   28074:	702b      	strb	r3, [r5, #0]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   28076:	f017 f98f 	bl	3f398 <at_params_valid_count_get>
   2807a:	2802      	cmp	r0, #2
   2807c:	d809      	bhi.n	28092 <parse_xmodemsleep+0x86>
		modem_sleep->time = -1;
   2807e:	f04f 32ff 	mov.w	r2, #4294967295
   28082:	f04f 33ff 	mov.w	r3, #4294967295
   28086:	e9c5 2302 	strd	r2, r3, [r5, #8]
	at_params_list_free(&resp_list);
   2808a:	a802      	add	r0, sp, #8
   2808c:	f017 f864 	bl	3f158 <at_params_list_free>
	return err;
   28090:	e7d1      	b.n	28036 <parse_xmodemsleep+0x2a>
	err = at_params_int64_get(&resp_list, AT_XMODEMSLEEP_TIME_INDEX, &modem_sleep->time);
   28092:	2102      	movs	r1, #2
   28094:	f105 0208 	add.w	r2, r5, #8
   28098:	a802      	add	r0, sp, #8
   2809a:	f017 f93e 	bl	3f31a <at_params_int64_get>
	if (err) {
   2809e:	4604      	mov	r4, r0
   280a0:	2800      	cmp	r0, #0
   280a2:	d0f2      	beq.n	2808a <parse_xmodemsleep+0x7e>
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   280a4:	4602      	mov	r2, r0
   280a6:	2145      	movs	r1, #69	; 0x45
   280a8:	4805      	ldr	r0, [pc, #20]	; (280c0 <parse_xmodemsleep+0xb4>)
   280aa:	e7d1      	b.n	28050 <parse_xmodemsleep+0x44>
		return -EINVAL;
   280ac:	f06f 0415 	mvn.w	r4, #21
   280b0:	e7c1      	b.n	28036 <parse_xmodemsleep+0x2a>
   280b2:	bf00      	nop
   280b4:	00045aa6 	.word	0x00045aa6
   280b8:	00045ef7 	.word	0x00045ef7
   280bc:	00045f2e 	.word	0x00045f2e
   280c0:	00045f5c 	.word	0x00045f5c

000280c4 <parse_mdmev>:

int parse_mdmev(const char *at_response, enum lte_lc_modem_evt *modem_evt)
{
   280c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   280c6:	460e      	mov	r6, r1
		[LTE_LC_MODEM_EVT_RESET_LOOP] = AT_MDMEV_RESET_LOOP,
		[LTE_LC_MODEM_EVT_BATTERY_LOW] = AT_MDMEV_BATTERY_LOW,
		[LTE_LC_MODEM_EVT_OVERHEATED] = AT_MDMEV_OVERHEATED,
	};

	if (at_response == NULL || modem_evt == NULL) {
   280c8:	4604      	mov	r4, r0
   280ca:	b1e8      	cbz	r0, 28108 <parse_mdmev+0x44>
   280cc:	b1e1      	cbz	r1, 28108 <parse_mdmev+0x44>
		return -EINVAL;
	}

	if (!response_is_valid(at_response, sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1,
   280ce:	2108      	movs	r1, #8
   280d0:	4a0f      	ldr	r2, [pc, #60]	; (28110 <parse_mdmev+0x4c>)
   280d2:	f7ff fc1f 	bl	27914 <response_is_valid>
   280d6:	b930      	cbnz	r0, 280e6 <parse_mdmev+0x22>
			       AT_MDMEV_RESPONSE_PREFIX)) {
		LOG_ERR("Invalid MDMEV response");
   280d8:	480e      	ldr	r0, [pc, #56]	; (28114 <parse_mdmev+0x50>)
   280da:	2145      	movs	r1, #69	; 0x45
   280dc:	f014 fce8 	bl	3cab0 <z_log_minimal_printk>
		return -EIO;
   280e0:	f06f 0004 	mvn.w	r0, #4
	}

	LOG_DBG("No modem event type found: %s", log_strdup(at_response));

	return -ENODATA;
}
   280e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   280e6:	2500      	movs	r5, #0
   280e8:	4f0b      	ldr	r7, [pc, #44]	; (28118 <parse_mdmev+0x54>)
	const char *start_ptr = at_response + sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1;
   280ea:	3408      	adds	r4, #8
		if (strcmp(event_types[i], start_ptr) == 0) {
   280ec:	4621      	mov	r1, r4
   280ee:	f857 0b04 	ldr.w	r0, [r7], #4
   280f2:	f7f5 f89c 	bl	1d22e <strcmp>
   280f6:	b908      	cbnz	r0, 280fc <parse_mdmev+0x38>
			*modem_evt = i;
   280f8:	7035      	strb	r5, [r6, #0]
			return 0;
   280fa:	e7f3      	b.n	280e4 <parse_mdmev+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   280fc:	3501      	adds	r5, #1
   280fe:	2d05      	cmp	r5, #5
   28100:	d1f4      	bne.n	280ec <parse_mdmev+0x28>
	return -ENODATA;
   28102:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   28106:	e7ed      	b.n	280e4 <parse_mdmev+0x20>
		return -EINVAL;
   28108:	f06f 0015 	mvn.w	r0, #21
   2810c:	e7ea      	b.n	280e4 <parse_mdmev+0x20>
   2810e:	bf00      	nop
   28110:	00045f96 	.word	0x00045f96
   28114:	00045f9f 	.word	0x00045f9f
   28118:	00042ca8 	.word	0x00042ca8

0002811c <modem_info_parse>:
	}
}

static int modem_info_parse(const struct modem_info_data *modem_data,
			    const char *buf)
{
   2811c:	b510      	push	{r4, lr}
   2811e:	4604      	mov	r4, r0
	int err;
	uint32_t param_index;

	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   28120:	4a09      	ldr	r2, [pc, #36]	; (28148 <modem_info_parse+0x2c>)
{
   28122:	4608      	mov	r0, r1
	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   28124:	7a63      	ldrb	r3, [r4, #9]
   28126:	2100      	movs	r1, #0
   28128:	f7fe fcf0 	bl	26b0c <at_parser_max_params_from_str>
					    modem_data->param_count);

	if (err == -EAGAIN) {
   2812c:	f110 0f0b 	cmn.w	r0, #11
   28130:	d000      	beq.n	28134 <modem_info_parse+0x18>
		LOG_DBG("More items exist to parse for: %s",
			modem_data->data_name);
		err = 0;
	} else if (err != 0) {
   28132:	b940      	cbnz	r0, 28146 <modem_info_parse+0x2a>
		return err;
	}

	param_index = at_params_valid_count_get(&m_param_list);
   28134:	4804      	ldr	r0, [pc, #16]	; (28148 <modem_info_parse+0x2c>)
   28136:	f017 f92f 	bl	3f398 <at_params_valid_count_get>
	if (param_index > modem_data->param_count) {
   2813a:	7a63      	ldrb	r3, [r4, #9]
		return -EAGAIN;
   2813c:	4298      	cmp	r0, r3
   2813e:	bf94      	ite	ls
   28140:	2000      	movls	r0, #0
   28142:	f06f 000a 	mvnhi.w	r0, #10
	}

	return err;
}
   28146:	bd10      	pop	{r4, pc}
   28148:	20019418 	.word	0x20019418

0002814c <modem_info_rsrp_subscribe_handler>:

	return len <= 0 ? -ENOTSUP : len;
}

static void modem_info_rsrp_subscribe_handler(const char *notif)
{
   2814c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2814e:	4604      	mov	r4, r0
	int err;
	uint16_t param_value;

	const struct modem_info_data rsrp_notify_data = {
   28150:	4a11      	ldr	r2, [pc, #68]	; (28198 <modem_info_rsrp_subscribe_handler+0x4c>)
   28152:	ab01      	add	r3, sp, #4
   28154:	ca07      	ldmia	r2, {r0, r1, r2}
   28156:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.param_index	= RSRP_NOTIFY_PARAM_INDEX,
		.param_count	= RSRP_NOTIFY_PARAM_COUNT,
		.data_type	= AT_PARAM_TYPE_NUM_INT,
	};

	err = modem_info_parse(&rsrp_notify_data, notif);
   2815a:	4621      	mov	r1, r4
   2815c:	4618      	mov	r0, r3
   2815e:	f7ff ffdd 	bl	2811c <modem_info_parse>
	if (err != 0) {
   28162:	4602      	mov	r2, r0
   28164:	b128      	cbz	r0, 28172 <modem_info_rsrp_subscribe_handler+0x26>
		LOG_ERR("modem_info_parse failed to parse "
   28166:	2145      	movs	r1, #69	; 0x45
   28168:	480c      	ldr	r0, [pc, #48]	; (2819c <modem_info_rsrp_subscribe_handler+0x50>)

	err = at_params_unsigned_short_get(&m_param_list,
					   rsrp_notify_data.param_index,
					   &param_value);
	if (err != 0) {
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   2816a:	f014 fca1 	bl	3cab0 <z_log_minimal_printk>
		return;
	}

	modem_info_rsrp_cb(param_value);
}
   2816e:	b004      	add	sp, #16
   28170:	bd10      	pop	{r4, pc}
	err = at_params_unsigned_short_get(&m_param_list,
   28172:	f10d 0202 	add.w	r2, sp, #2
   28176:	f89d 100c 	ldrb.w	r1, [sp, #12]
   2817a:	4809      	ldr	r0, [pc, #36]	; (281a0 <modem_info_rsrp_subscribe_handler+0x54>)
   2817c:	f017 f894 	bl	3f2a8 <at_params_unsigned_short_get>
	if (err != 0) {
   28180:	4602      	mov	r2, r0
   28182:	b110      	cbz	r0, 2818a <modem_info_rsrp_subscribe_handler+0x3e>
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   28184:	2145      	movs	r1, #69	; 0x45
   28186:	4807      	ldr	r0, [pc, #28]	; (281a4 <modem_info_rsrp_subscribe_handler+0x58>)
   28188:	e7ef      	b.n	2816a <modem_info_rsrp_subscribe_handler+0x1e>
	modem_info_rsrp_cb(param_value);
   2818a:	4b07      	ldr	r3, [pc, #28]	; (281a8 <modem_info_rsrp_subscribe_handler+0x5c>)
   2818c:	f89d 0002 	ldrb.w	r0, [sp, #2]
   28190:	681b      	ldr	r3, [r3, #0]
   28192:	4798      	blx	r3
   28194:	e7eb      	b.n	2816e <modem_info_rsrp_subscribe_handler+0x22>
   28196:	bf00      	nop
   28198:	000427b0 	.word	0x000427b0
   2819c:	00046178 	.word	0x00046178
   281a0:	20019418 	.word	0x20019418
   281a4:	000461b4 	.word	0x000461b4
   281a8:	20019420 	.word	0x20019420

000281ac <modem_info_type_get>:
	if (info_type >= MODEM_INFO_COUNT) {
   281ac:	2815      	cmp	r0, #21
	return modem_data[info_type]->data_type;
   281ae:	bf9d      	ittte	ls
   281b0:	4b02      	ldrls	r3, [pc, #8]	; (281bc <modem_info_type_get+0x10>)
   281b2:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
   281b6:	7a98      	ldrbls	r0, [r3, #10]
		return -EINVAL;
   281b8:	20ea      	movhi	r0, #234	; 0xea
}
   281ba:	4770      	bx	lr
   281bc:	00042dc8 	.word	0x00042dc8

000281c0 <modem_info_name_get>:
{
   281c0:	b570      	push	{r4, r5, r6, lr}
	if (name == NULL) {
   281c2:	460d      	mov	r5, r1
   281c4:	b919      	cbnz	r1, 281ce <modem_info_name_get+0xe>
		return -EINVAL;
   281c6:	f06f 0415 	mvn.w	r4, #21
}
   281ca:	4620      	mov	r0, r4
   281cc:	bd70      	pop	{r4, r5, r6, pc}
	len = strlen(modem_data[info]->data_name);
   281ce:	4b07      	ldr	r3, [pc, #28]	; (281ec <modem_info_name_get+0x2c>)
   281d0:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   281d4:	6870      	ldr	r0, [r6, #4]
   281d6:	f7f5 f834 	bl	1d242 <strlen>
	if (len <= 0) {
   281da:	1e04      	subs	r4, r0, #0
   281dc:	ddf3      	ble.n	281c6 <modem_info_name_get+0x6>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   281de:	4622      	mov	r2, r4
   281e0:	4628      	mov	r0, r5
   281e2:	6871      	ldr	r1, [r6, #4]
   281e4:	f019 f8de 	bl	413a4 <memcpy>
   281e8:	e7ef      	b.n	281ca <modem_info_name_get+0xa>
   281ea:	bf00      	nop
   281ec:	00042dc8 	.word	0x00042dc8

000281f0 <modem_info_short_get>:
{
   281f0:	b530      	push	{r4, r5, lr}
   281f2:	460d      	mov	r5, r1
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   281f4:	2100      	movs	r1, #0
{
   281f6:	b0a1      	sub	sp, #132	; 0x84
   281f8:	4604      	mov	r4, r0
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   281fa:	227c      	movs	r2, #124	; 0x7c
   281fc:	a801      	add	r0, sp, #4
   281fe:	9100      	str	r1, [sp, #0]
   28200:	f019 f8f0 	bl	413e4 <memset>
	if (buf == NULL) {
   28204:	b1d5      	cbz	r5, 2823c <modem_info_short_get+0x4c>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   28206:	4b10      	ldr	r3, [pc, #64]	; (28248 <modem_info_short_get+0x58>)
   28208:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
   2820c:	7aa3      	ldrb	r3, [r4, #10]
   2820e:	2b02      	cmp	r3, #2
   28210:	d014      	beq.n	2823c <modem_info_short_get+0x4c>
	err = nrf_modem_at_cmd(recv_buf, CONFIG_MODEM_INFO_BUFFER_SIZE, modem_data[info]->cmd);
   28212:	2180      	movs	r1, #128	; 0x80
   28214:	4668      	mov	r0, sp
   28216:	6822      	ldr	r2, [r4, #0]
   28218:	f00c ff1c 	bl	35054 <nrf_modem_at_cmd>
	if (err != 0) {
   2821c:	b988      	cbnz	r0, 28242 <modem_info_short_get+0x52>
	err = modem_info_parse(modem_data[info], recv_buf);
   2821e:	4669      	mov	r1, sp
   28220:	4620      	mov	r0, r4
   28222:	f7ff ff7b 	bl	2811c <modem_info_parse>
	if (err) {
   28226:	b938      	cbnz	r0, 28238 <modem_info_short_get+0x48>
	err = at_params_unsigned_short_get(&m_param_list,
   28228:	462a      	mov	r2, r5
   2822a:	7a21      	ldrb	r1, [r4, #8]
   2822c:	4807      	ldr	r0, [pc, #28]	; (2824c <modem_info_short_get+0x5c>)
   2822e:	f017 f83b 	bl	3f2a8 <at_params_unsigned_short_get>
	return sizeof(uint16_t);
   28232:	2800      	cmp	r0, #0
   28234:	bf08      	it	eq
   28236:	2002      	moveq	r0, #2
}
   28238:	b021      	add	sp, #132	; 0x84
   2823a:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2823c:	f06f 0015 	mvn.w	r0, #21
   28240:	e7fa      	b.n	28238 <modem_info_short_get+0x48>
		return -EIO;
   28242:	f06f 0004 	mvn.w	r0, #4
   28246:	e7f7      	b.n	28238 <modem_info_short_get+0x48>
   28248:	00042dc8 	.word	0x00042dc8
   2824c:	20019418 	.word	0x20019418

00028250 <modem_info_string_get>:
{
   28250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   28254:	2700      	movs	r7, #0
{
   28256:	460d      	mov	r5, r1
   28258:	b0b5      	sub	sp, #212	; 0xd4
   2825a:	4604      	mov	r4, r0
   2825c:	4616      	mov	r6, r2
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   2825e:	4639      	mov	r1, r7
   28260:	227c      	movs	r2, #124	; 0x7c
   28262:	a815      	add	r0, sp, #84	; 0x54
   28264:	9714      	str	r7, [sp, #80]	; 0x50
   28266:	f019 f8bd 	bl	413e4 <memset>
	size_t len = 0;
   2826a:	9702      	str	r7, [sp, #8]
	if ((buf == NULL) || (buf_size == 0)) {
   2826c:	2d00      	cmp	r5, #0
   2826e:	f000 8118 	beq.w	284a2 <modem_info_string_get+0x252>
   28272:	2e00      	cmp	r6, #0
   28274:	f000 8115 	beq.w	284a2 <modem_info_string_get+0x252>
	err = nrf_modem_at_cmd(recv_buf, CONFIG_MODEM_INFO_BUFFER_SIZE, modem_data[info]->cmd);
   28278:	4b8e      	ldr	r3, [pc, #568]	; (284b4 <modem_info_string_get+0x264>)
	buf[0] = '\0';
   2827a:	702f      	strb	r7, [r5, #0]
	err = nrf_modem_at_cmd(recv_buf, CONFIG_MODEM_INFO_BUFFER_SIZE, modem_data[info]->cmd);
   2827c:	f853 7024 	ldr.w	r7, [r3, r4, lsl #2]
   28280:	2180      	movs	r1, #128	; 0x80
   28282:	683a      	ldr	r2, [r7, #0]
   28284:	a814      	add	r0, sp, #80	; 0x50
   28286:	f00c fee5 	bl	35054 <nrf_modem_at_cmd>
	if (err != 0) {
   2828a:	4680      	mov	r8, r0
   2828c:	2800      	cmp	r0, #0
   2828e:	f040 810b 	bne.w	284a8 <modem_info_string_get+0x258>
	if (info == MODEM_INFO_SUP_BAND) {
   28292:	2c02      	cmp	r4, #2
   28294:	d123      	bne.n	282de <modem_info_string_get+0x8e>
		char *str_begin = strchr(recv_buf, '(');
   28296:	2128      	movs	r1, #40	; 0x28
   28298:	a814      	add	r0, sp, #80	; 0x50
   2829a:	f019 fa61 	bl	41760 <strchr>
   2829e:	4607      	mov	r7, r0
		str_end = strchr(recv_buf, ')');
   282a0:	2129      	movs	r1, #41	; 0x29
   282a2:	a814      	add	r0, sp, #80	; 0x50
   282a4:	f019 fa5c 	bl	41760 <strchr>
		if (!str_begin || !str_end) {
   282a8:	2f00      	cmp	r7, #0
   282aa:	f000 8100 	beq.w	284ae <modem_info_string_get+0x25e>
   282ae:	2800      	cmp	r0, #0
   282b0:	f000 80fd 	beq.w	284ae <modem_info_string_get+0x25e>
		*(str_end + 1) = 0;
   282b4:	f880 8001 	strb.w	r8, [r0, #1]
		len = strlen(str_begin);
   282b8:	4638      	mov	r0, r7
   282ba:	f7f4 ffc2 	bl	1d242 <strlen>
		if (len >= buf_size) {
   282be:	42b0      	cmp	r0, r6
		len = strlen(str_begin);
   282c0:	4604      	mov	r4, r0
   282c2:	9002      	str	r0, [sp, #8]
		if (len >= buf_size) {
   282c4:	d302      	bcc.n	282cc <modem_info_string_get+0x7c>
		return -EMSGSIZE;
   282c6:	f06f 0979 	mvn.w	r9, #121	; 0x79
   282ca:	e004      	b.n	282d6 <modem_info_string_get+0x86>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   282cc:	4639      	mov	r1, r7
   282ce:	4628      	mov	r0, r5
   282d0:	f019 fa53 	bl	4177a <strcpy>
		return len;
   282d4:	46a1      	mov	r9, r4
}
   282d6:	4648      	mov	r0, r9
   282d8:	b035      	add	sp, #212	; 0xd4
   282da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	err = modem_info_parse(modem_data[info], recv_buf);
   282de:	4638      	mov	r0, r7
   282e0:	a914      	add	r1, sp, #80	; 0x50
   282e2:	f7ff ff1b 	bl	2811c <modem_info_parse>
	if (err) {
   282e6:	4681      	mov	r9, r0
   282e8:	b128      	cbz	r0, 282f6 <modem_info_string_get+0xa6>
		LOG_ERR("Unable to parse data: %d", err);
   282ea:	464a      	mov	r2, r9
   282ec:	2145      	movs	r1, #69	; 0x45
   282ee:	4872      	ldr	r0, [pc, #456]	; (284b8 <modem_info_string_get+0x268>)
			LOG_ERR("Unable to obtain short: %d", err);
   282f0:	f014 fbde 	bl	3cab0 <z_log_minimal_printk>
			return err;
   282f4:	e7ef      	b.n	282d6 <modem_info_string_get+0x86>
	if (info == MODEM_INFO_IP_ADDRESS) {
   282f6:	2c09      	cmp	r4, #9
   282f8:	d17e      	bne.n	283f8 <modem_info_string_get+0x1a8>
	size_t len = 0;
   282fa:	9003      	str	r0, [sp, #12]
	p = strstr(in_buf, "OK\r\n");
   282fc:	496f      	ldr	r1, [pc, #444]	; (284bc <modem_info_string_get+0x26c>)
   282fe:	a814      	add	r0, sp, #80	; 0x50
   28300:	f019 fa8a 	bl	41818 <strstr>
	if (!p) {
   28304:	2800      	cmp	r0, #0
   28306:	f000 80cc 	beq.w	284a2 <modem_info_string_get+0x252>
	while ((str_end = strstr(str_end, AT_CMD_RSP_DELIM)) != NULL) {
   2830a:	4f6d      	ldr	r7, [pc, #436]	; (284c0 <modem_info_string_get+0x270>)
	*p = '\0';
   2830c:	f880 9000 	strb.w	r9, [r0]
	char *str_end = in_buf;
   28310:	a814      	add	r0, sp, #80	; 0x50
	while ((str_end = strstr(str_end, AT_CMD_RSP_DELIM)) != NULL) {
   28312:	4639      	mov	r1, r7
   28314:	f019 fa80 	bl	41818 <strstr>
   28318:	4604      	mov	r4, r0
   2831a:	2800      	cmp	r0, #0
   2831c:	d13a      	bne.n	28394 <modem_info_string_get+0x144>
	if (total_ip_count == 0) {
   2831e:	f1b9 0f00 	cmp.w	r9, #0
   28322:	d0d8      	beq.n	282d6 <modem_info_string_get+0x86>
	first_address = true;
   28324:	f04f 0801 	mov.w	r8, #1
	err = at_params_string_get(&m_param_list,
   28328:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 284d8 <modem_info_string_get+0x288>
   2832c:	f109 37ff 	add.w	r7, r9, #4294967295
	str_end = strstr(&in_buf[line_start_idx], AT_CMD_RSP_DELIM);
   28330:	ab14      	add	r3, sp, #80	; 0x50
   28332:	eb03 0904 	add.w	r9, r3, r4
   28336:	4648      	mov	r0, r9
   28338:	4961      	ldr	r1, [pc, #388]	; (284c0 <modem_info_string_get+0x270>)
   2833a:	f019 fa6d 	bl	41818 <strstr>
	if (str_end == NULL) {
   2833e:	2800      	cmp	r0, #0
   28340:	f000 80b5 	beq.w	284ae <modem_info_string_get+0x25e>
	in_buf[++line_len + line_start_idx] = '\0';
   28344:	2100      	movs	r1, #0
	line_len = str_end - &in_buf[line_start_idx];
   28346:	eba0 0009 	sub.w	r0, r0, r9
	in_buf[++line_len + line_start_idx] = '\0';
   2834a:	3401      	adds	r4, #1
   2834c:	4404      	add	r4, r0
   2834e:	ab34      	add	r3, sp, #208	; 0xd0
   28350:	191a      	adds	r2, r3, r4
   28352:	f802 1c80 	strb.w	r1, [r2, #-128]
	err = modem_info_parse(modem_data[MODEM_INFO_IP_ADDRESS], &in_buf[line_start_idx]);
   28356:	485b      	ldr	r0, [pc, #364]	; (284c4 <modem_info_string_get+0x274>)
   28358:	4649      	mov	r1, r9
   2835a:	f7ff fedf 	bl	2811c <modem_info_parse>
	if (err) {
   2835e:	4681      	mov	r9, r0
   28360:	2800      	cmp	r0, #0
   28362:	d1c2      	bne.n	282ea <modem_info_string_get+0x9a>
	len = sizeof(ip_buf);
   28364:	2340      	movs	r3, #64	; 0x40
	err = at_params_string_get(&m_param_list,
   28366:	f10d 0a10 	add.w	sl, sp, #16
	len = sizeof(ip_buf);
   2836a:	9303      	str	r3, [sp, #12]
	err = at_params_string_get(&m_param_list,
   2836c:	4652      	mov	r2, sl
   2836e:	2104      	movs	r1, #4
   28370:	4658      	mov	r0, fp
   28372:	ab03      	add	r3, sp, #12
   28374:	f016 ffe9 	bl	3f34a <at_params_string_get>
	if (err != 0) {
   28378:	4681      	mov	r9, r0
   2837a:	2800      	cmp	r0, #0
   2837c:	d1ab      	bne.n	282d6 <modem_info_string_get+0x86>
	} else if (len >= sizeof(ip_buf)) {
   2837e:	9903      	ldr	r1, [sp, #12]
   28380:	293f      	cmp	r1, #63	; 0x3f
   28382:	d8a0      	bhi.n	282c6 <modem_info_string_get+0x76>
	if (len == 0) {
   28384:	b951      	cbnz	r1, 2839c <modem_info_string_get+0x14c>
		line_start_idx += line_len + 1;
   28386:	3401      	adds	r4, #1
		if (--current_ip_idx) {
   28388:	bba7      	cbnz	r7, 283f4 <modem_info_string_get+0x1a4>
	return strlen(out_buf);
   2838a:	4628      	mov	r0, r5
   2838c:	f7f4 ff59 	bl	1d242 <strlen>
   28390:	4681      	mov	r9, r0
   28392:	e7a0      	b.n	282d6 <modem_info_string_get+0x86>
		str_end++;
   28394:	1c60      	adds	r0, r4, #1
		total_ip_count++;
   28396:	f109 0901 	add.w	r9, r9, #1
   2839a:	e7ba      	b.n	28312 <modem_info_string_get+0xc2>
	ip_buf[len] = '\0';
   2839c:	ab34      	add	r3, sp, #208	; 0xd0
   2839e:	4419      	add	r1, r3
   283a0:	f801 0cc0 	strb.w	r0, [r1, #-192]
	ip_v6_str = strstr(ip_buf, " ");
   283a4:	4650      	mov	r0, sl
   283a6:	4948      	ldr	r1, [pc, #288]	; (284c8 <modem_info_string_get+0x278>)
   283a8:	f019 fa36 	bl	41818 <strstr>
	if (ip_v6_str) {
   283ac:	b128      	cbz	r0, 283ba <modem_info_string_get+0x16a>
		*ip_v6_str = '\0';
   283ae:	f880 9000 	strb.w	r9, [r0]
		len = strlen(ip_buf);
   283b2:	4650      	mov	r0, sl
   283b4:	f7f4 ff45 	bl	1d242 <strlen>
   283b8:	9003      	str	r0, [sp, #12]
	out_buf_len = strlen(out_buf);
   283ba:	4628      	mov	r0, r5
   283bc:	f7f4 ff41 	bl	1d242 <strlen>
	err = snprintk(out_buf + out_buf_len,
   283c0:	4a42      	ldr	r2, [pc, #264]	; (284cc <modem_info_string_get+0x27c>)
   283c2:	4b43      	ldr	r3, [pc, #268]	; (284d0 <modem_info_string_get+0x280>)
   283c4:	eba6 0900 	sub.w	r9, r6, r0
   283c8:	f1b8 0f00 	cmp.w	r8, #0
   283cc:	bf18      	it	ne
   283ce:	4613      	movne	r3, r2
   283d0:	4649      	mov	r1, r9
   283d2:	4a40      	ldr	r2, [pc, #256]	; (284d4 <modem_info_string_get+0x284>)
   283d4:	f8cd a000 	str.w	sl, [sp]
   283d8:	4428      	add	r0, r5
   283da:	f014 f959 	bl	3c690 <snprintk>
	if ((err <= 0) || (err > (out_buf_size - out_buf_len))) {
   283de:	2800      	cmp	r0, #0
   283e0:	f77f af71 	ble.w	282c6 <modem_info_string_get+0x76>
   283e4:	4581      	cmp	r9, r0
   283e6:	f4ff af6e 	bcc.w	282c6 <modem_info_string_get+0x76>
	if (--current_ip_idx) {
   283ea:	2f00      	cmp	r7, #0
   283ec:	d0cd      	beq.n	2838a <modem_info_string_get+0x13a>
	first_address = false;
   283ee:	f04f 0800 	mov.w	r8, #0
		line_start_idx  += line_len + 1;
   283f2:	3401      	adds	r4, #1
		goto parse_line;
   283f4:	3f01      	subs	r7, #1
   283f6:	e79b      	b.n	28330 <modem_info_string_get+0xe0>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_NUM_INT) {
   283f8:	7abb      	ldrb	r3, [r7, #10]
   283fa:	2b01      	cmp	r3, #1
   283fc:	d133      	bne.n	28466 <modem_info_string_get+0x216>
		err = at_params_unsigned_short_get(&m_param_list,
   283fe:	7a39      	ldrb	r1, [r7, #8]
   28400:	4835      	ldr	r0, [pc, #212]	; (284d8 <modem_info_string_get+0x288>)
   28402:	aa04      	add	r2, sp, #16
   28404:	f016 ff50 	bl	3f2a8 <at_params_unsigned_short_get>
		if (err) {
   28408:	4681      	mov	r9, r0
   2840a:	b118      	cbz	r0, 28414 <modem_info_string_get+0x1c4>
			LOG_ERR("Unable to obtain short: %d", err);
   2840c:	4602      	mov	r2, r0
   2840e:	2145      	movs	r1, #69	; 0x45
   28410:	4832      	ldr	r0, [pc, #200]	; (284dc <modem_info_string_get+0x28c>)
   28412:	e76d      	b.n	282f0 <modem_info_string_get+0xa0>
		len = snprintf(buf, buf_size, "%d", param_value);
   28414:	4631      	mov	r1, r6
   28416:	4628      	mov	r0, r5
   28418:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   2841c:	4a30      	ldr	r2, [pc, #192]	; (284e0 <modem_info_string_get+0x290>)
   2841e:	f012 f919 	bl	3a654 <sniprintf>
   28422:	9002      	str	r0, [sp, #8]
		if ((len <= 0) || (len > buf_size)) {
   28424:	2800      	cmp	r0, #0
   28426:	f43f af4e 	beq.w	282c6 <modem_info_string_get+0x76>
   2842a:	4286      	cmp	r6, r0
   2842c:	f4ff af4b 	bcc.w	282c6 <modem_info_string_get+0x76>
	if (info == MODEM_INFO_ICCID) {
   28430:	2c0e      	cmp	r4, #14
   28432:	d111      	bne.n	28458 <modem_info_string_get+0x208>
   28434:	462c      	mov	r4, r5
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   28436:	4628      	mov	r0, r5
   28438:	f7f4 ff03 	bl	1d242 <strlen>
   2843c:	1ca3      	adds	r3, r4, #2
   2843e:	1b64      	subs	r4, r4, r5
   28440:	42a0      	cmp	r0, r4
   28442:	d824      	bhi.n	2848e <modem_info_string_get+0x23e>
		if ((len == ICCID_LEN) &&
   28444:	9b02      	ldr	r3, [sp, #8]
   28446:	2b14      	cmp	r3, #20
   28448:	d106      	bne.n	28458 <modem_info_string_get+0x208>
   2844a:	7ceb      	ldrb	r3, [r5, #19]
   2844c:	2b46      	cmp	r3, #70	; 0x46
			buf[len - 1] = '\0';
   2844e:	bf01      	itttt	eq
   28450:	2300      	moveq	r3, #0
   28452:	74eb      	strbeq	r3, [r5, #19]
			--len;
   28454:	2313      	moveq	r3, #19
   28456:	9302      	streq	r3, [sp, #8]
	return len <= 0 ? -ENOTSUP : len;
   28458:	9802      	ldr	r0, [sp, #8]
   2845a:	2800      	cmp	r0, #0
   2845c:	bf14      	ite	ne
   2845e:	4681      	movne	r9, r0
   28460:	f06f 0985 	mvneq.w	r9, #133	; 0x85
   28464:	e737      	b.n	282d6 <modem_info_string_get+0x86>
	} else if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   28466:	2b02      	cmp	r3, #2
   28468:	d1e2      	bne.n	28430 <modem_info_string_get+0x1e0>
		err = at_params_string_get(&m_param_list,
   2846a:	462a      	mov	r2, r5
   2846c:	7a39      	ldrb	r1, [r7, #8]
   2846e:	481a      	ldr	r0, [pc, #104]	; (284d8 <modem_info_string_get+0x288>)
   28470:	ab02      	add	r3, sp, #8
		len = buf_size - out_buf_len;
   28472:	9602      	str	r6, [sp, #8]
		err = at_params_string_get(&m_param_list,
   28474:	f016 ff69 	bl	3f34a <at_params_string_get>
		if (err != 0) {
   28478:	4681      	mov	r9, r0
   2847a:	2800      	cmp	r0, #0
   2847c:	f47f af2b 	bne.w	282d6 <modem_info_string_get+0x86>
		} else if (len >= buf_size) {
   28480:	9b02      	ldr	r3, [sp, #8]
   28482:	429e      	cmp	r6, r3
   28484:	f67f af1f 	bls.w	282c6 <modem_info_string_get+0x76>
		buf[accumulated_len] = '\0';
   28488:	2200      	movs	r2, #0
   2848a:	54ea      	strb	r2, [r5, r3]
   2848c:	e7d0      	b.n	28430 <modem_info_string_get+0x1e0>
		current_char = buf[i];
   2848e:	f813 2c02 	ldrb.w	r2, [r3, #-2]
		buf[i] = next_char;
   28492:	f813 1c01 	ldrb.w	r1, [r3, #-1]
		buf[i + 1] = current_char;
   28496:	461c      	mov	r4, r3
		buf[i] = next_char;
   28498:	f803 1c02 	strb.w	r1, [r3, #-2]
		buf[i + 1] = current_char;
   2849c:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   284a0:	e7c9      	b.n	28436 <modem_info_string_get+0x1e6>
		return -EINVAL;
   284a2:	f06f 0915 	mvn.w	r9, #21
   284a6:	e716      	b.n	282d6 <modem_info_string_get+0x86>
		return -EIO;
   284a8:	f06f 0904 	mvn.w	r9, #4
   284ac:	e713      	b.n	282d6 <modem_info_string_get+0x86>
			return -EFAULT;
   284ae:	f06f 090d 	mvn.w	r9, #13
   284b2:	e710      	b.n	282d6 <modem_info_string_get+0x86>
   284b4:	00042dc8 	.word	0x00042dc8
   284b8:	000461dc 	.word	0x000461dc
   284bc:	000451bc 	.word	0x000451bc
   284c0:	0004ad1c 	.word	0x0004ad1c
   284c4:	00042d8c 	.word	0x00042d8c
   284c8:	000440ba 	.word	0x000440ba
   284cc:	0004517c 	.word	0x0004517c
   284d0:	000461d9 	.word	0x000461d9
   284d4:	0004a257 	.word	0x0004a257
   284d8:	20019418 	.word	0x20019418
   284dc:	000461fa 	.word	0x000461fa
   284e0:	000463e0 	.word	0x000463e0

000284e4 <modem_info_init>:

int modem_info_init(void)
{
	int err = 0;

	if (m_param_list.params == NULL) {
   284e4:	4803      	ldr	r0, [pc, #12]	; (284f4 <modem_info_init+0x10>)
   284e6:	6843      	ldr	r3, [r0, #4]
   284e8:	b913      	cbnz	r3, 284f0 <modem_info_init+0xc>
		/* Init at_cmd_parser storage module */
		err = at_params_list_init(&m_param_list,
   284ea:	210a      	movs	r1, #10
   284ec:	f016 be21 	b.w	3f132 <at_params_list_init>
					  CONFIG_MODEM_INFO_MAX_AT_PARAMS_RSP);
	}

	return err;
}
   284f0:	2000      	movs	r0, #0
   284f2:	4770      	bx	lr
   284f4:	20019418 	.word	0x20019418

000284f8 <modem_data_get>:

	return 0;
}

static int modem_data_get(struct lte_param *param)
{
   284f8:	b538      	push	{r3, r4, r5, lr}
   284fa:	4605      	mov	r5, r0
	enum at_param_type data_type;
	int ret;

	data_type = modem_info_type_get(param->type);
   284fc:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
   28500:	f7ff fe54 	bl	281ac <modem_info_type_get>

	if (data_type < 0) {
		return -EINVAL;
	}

	if (data_type == AT_PARAM_TYPE_STRING) {
   28504:	2802      	cmp	r0, #2
   28506:	d112      	bne.n	2852e <modem_data_get+0x36>
		ret = modem_info_string_get(param->type,
   28508:	2264      	movs	r2, #100	; 0x64
   2850a:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   2850e:	1ca9      	adds	r1, r5, #2
   28510:	f7ff fe9e 	bl	28250 <modem_info_string_get>
				param->value_string,
				sizeof(param->value_string));
		if (ret < 0) {
   28514:	1e04      	subs	r4, r0, #0
   28516:	db02      	blt.n	2851e <modem_data_get+0x26>
			LOG_ERR("Link data not obtained: %d", ret);
			return ret;
		}
	}

	return 0;
   28518:	2400      	movs	r4, #0
}
   2851a:	4620      	mov	r0, r4
   2851c:	bd38      	pop	{r3, r4, r5, pc}
			LOG_ERR("Link data not obtained: %d %d", param->type, ret);
   2851e:	4623      	mov	r3, r4
   28520:	2145      	movs	r1, #69	; 0x45
   28522:	f895 206c 	ldrb.w	r2, [r5, #108]	; 0x6c
   28526:	4809      	ldr	r0, [pc, #36]	; (2854c <modem_data_get+0x54>)
   28528:	f014 fac2 	bl	3cab0 <z_log_minimal_printk>
			return ret;
   2852c:	e7f5      	b.n	2851a <modem_data_get+0x22>
	} else if (data_type == AT_PARAM_TYPE_NUM_INT) {
   2852e:	2801      	cmp	r0, #1
   28530:	d1f2      	bne.n	28518 <modem_data_get+0x20>
		ret = modem_info_short_get(param->type, &param->value);
   28532:	4629      	mov	r1, r5
   28534:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   28538:	f7ff fe5a 	bl	281f0 <modem_info_short_get>
		if (ret < 0) {
   2853c:	1e04      	subs	r4, r0, #0
   2853e:	daeb      	bge.n	28518 <modem_data_get+0x20>
			LOG_ERR("Link data not obtained: %d", ret);
   28540:	4622      	mov	r2, r4
   28542:	2145      	movs	r1, #69	; 0x45
   28544:	4802      	ldr	r0, [pc, #8]	; (28550 <modem_data_get+0x58>)
   28546:	f014 fab3 	bl	3cab0 <z_log_minimal_printk>
			return ret;
   2854a:	e7e6      	b.n	2851a <modem_data_get+0x22>
   2854c:	0004621a 	.word	0x0004621a
   28550:	0004623d 	.word	0x0004623d

00028554 <modem_info_params_init>:
	if (modem == NULL) {
   28554:	2800      	cmp	r0, #0
   28556:	d049      	beq.n	285ec <modem_info_params_init+0x98>
	modem->network.current_band.type	= MODEM_INFO_CUR_BAND;
   28558:	2301      	movs	r3, #1
   2855a:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
	modem->network.sup_band.type		= MODEM_INFO_SUP_BAND;
   2855e:	2302      	movs	r3, #2
   28560:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
	modem->network.area_code.type		= MODEM_INFO_AREA_CODE;
   28564:	2303      	movs	r3, #3
   28566:	f880 314c 	strb.w	r3, [r0, #332]	; 0x14c
	modem->network.current_operator.type	= MODEM_INFO_OPERATOR;
   2856a:	2305      	movs	r3, #5
   2856c:	f880 31bc 	strb.w	r3, [r0, #444]	; 0x1bc
	modem->network.mcc.type			= MODEM_INFO_MCC;
   28570:	2306      	movs	r3, #6
   28572:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
	modem->network.mnc.type			= MODEM_INFO_MNC;
   28576:	2307      	movs	r3, #7
   28578:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
	modem->network.cellid_hex.type		= MODEM_INFO_CELLID;
   2857c:	2308      	movs	r3, #8
   2857e:	f880 330c 	strb.w	r3, [r0, #780]	; 0x30c
	modem->network.ip_address.type		= MODEM_INFO_IP_ADDRESS;
   28582:	2309      	movs	r3, #9
   28584:	f880 337c 	strb.w	r3, [r0, #892]	; 0x37c
	modem->network.ue_mode.type		= MODEM_INFO_UE_MODE;
   28588:	2304      	movs	r3, #4
	modem->sim.uicc.type			= MODEM_INFO_UICC;
   2858a:	220a      	movs	r2, #10
	modem->network.ue_mode.type		= MODEM_INFO_UE_MODE;
   2858c:	f880 33ec 	strb.w	r3, [r0, #1004]	; 0x3ec
	modem->network.lte_mode.type		= MODEM_INFO_LTE_MODE;
   28590:	230f      	movs	r3, #15
	modem->sim.uicc.type			= MODEM_INFO_UICC;
   28592:	f880 2714 	strb.w	r2, [r0, #1812]	; 0x714
	modem->sim.iccid.type			= MODEM_INFO_ICCID;
   28596:	220e      	movs	r2, #14
	modem->network.lte_mode.type		= MODEM_INFO_LTE_MODE;
   28598:	f880 345c 	strb.w	r3, [r0, #1116]	; 0x45c
	modem->network.nbiot_mode.type		= MODEM_INFO_NBIOT_MODE;
   2859c:	2310      	movs	r3, #16
	modem->sim.iccid.type			= MODEM_INFO_ICCID;
   2859e:	f880 2784 	strb.w	r2, [r0, #1924]	; 0x784
	modem->sim.imsi.type		        = MODEM_INFO_IMSI;
   285a2:	2212      	movs	r2, #18
	modem->network.nbiot_mode.type		= MODEM_INFO_NBIOT_MODE;
   285a4:	f880 34cc 	strb.w	r3, [r0, #1228]	; 0x4cc
	modem->network.gps_mode.type		= MODEM_INFO_GPS_MODE;
   285a8:	2311      	movs	r3, #17
	modem->sim.imsi.type		        = MODEM_INFO_IMSI;
   285aa:	f880 27f4 	strb.w	r2, [r0, #2036]	; 0x7f4
	modem->device.modem_fw.type		= MODEM_INFO_FW_VERSION;
   285ae:	220d      	movs	r2, #13
	modem->network.gps_mode.type		= MODEM_INFO_GPS_MODE;
   285b0:	f880 353c 	strb.w	r3, [r0, #1340]	; 0x53c
	modem->network.date_time.type		= MODEM_INFO_DATE_TIME;
   285b4:	2314      	movs	r3, #20
	modem->device.modem_fw.type		= MODEM_INFO_FW_VERSION;
   285b6:	f880 2864 	strb.w	r2, [r0, #2148]	; 0x864
	modem->device.battery.type		= MODEM_INFO_BATTERY;
   285ba:	220b      	movs	r2, #11
	modem->network.date_time.type		= MODEM_INFO_DATE_TIME;
   285bc:	f880 35ac 	strb.w	r3, [r0, #1452]	; 0x5ac
	modem->network.apn.type			= MODEM_INFO_APN;
   285c0:	2315      	movs	r3, #21
	modem->device.battery.type		= MODEM_INFO_BATTERY;
   285c2:	f880 28d4 	strb.w	r2, [r0, #2260]	; 0x8d4
	modem->device.imei.type			= MODEM_INFO_IMEI;
   285c6:	2213      	movs	r2, #19
	modem->network.apn.type			= MODEM_INFO_APN;
   285c8:	f880 361c 	strb.w	r3, [r0, #1564]	; 0x61c
	modem->network.rsrp.type		= MODEM_INFO_RSRP;
   285cc:	2300      	movs	r3, #0
	modem->device.imei.type			= MODEM_INFO_IMEI;
   285ce:	f880 2944 	strb.w	r2, [r0, #2372]	; 0x944
	modem->device.board			= CONFIG_BOARD;
   285d2:	4a08      	ldr	r2, [pc, #32]	; (285f4 <modem_info_params_init+0xa0>)
	modem->network.rsrp.type		= MODEM_INFO_RSRP;
   285d4:	f880 368c 	strb.w	r3, [r0, #1676]	; 0x68c
	modem->device.board			= CONFIG_BOARD;
   285d8:	f8c0 2948 	str.w	r2, [r0, #2376]	; 0x948
	modem->device.app_version		= STRINGIFY(APP_VERSION);
   285dc:	4a06      	ldr	r2, [pc, #24]	; (285f8 <modem_info_params_init+0xa4>)
   285de:	f8c0 294c 	str.w	r2, [r0, #2380]	; 0x94c
	modem->device.app_name			= STRINGIFY(PROJECT_NAME);
   285e2:	4a06      	ldr	r2, [pc, #24]	; (285fc <modem_info_params_init+0xa8>)
   285e4:	f8c0 2950 	str.w	r2, [r0, #2384]	; 0x950
	return 0;
   285e8:	4618      	mov	r0, r3
   285ea:	4770      	bx	lr
		return -EINVAL;
   285ec:	f06f 0015 	mvn.w	r0, #21
}
   285f0:	4770      	bx	lr
   285f2:	bf00      	nop
   285f4:	0004625d 	.word	0x0004625d
   285f8:	0004626f 	.word	0x0004626f
   285fc:	00046276 	.word	0x00046276

00028600 <modem_info_params_get>:

int modem_info_params_get(struct modem_param_info *modem)
{
   28600:	b570      	push	{r4, r5, r6, lr}
	int ret;

	if (modem == NULL) {
   28602:	4604      	mov	r4, r0
   28604:	2800      	cmp	r0, #0
   28606:	f000 80a1 	beq.w	2874c <modem_info_params_get+0x14c>
		return -EINVAL;
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK)) {
		ret = modem_data_get(&modem->network.current_band);
   2860a:	f7ff ff75 	bl	284f8 <modem_data_get>
   2860e:	4605      	mov	r5, r0
		ret += modem_data_get(&modem->network.sup_band);
   28610:	f104 0070 	add.w	r0, r4, #112	; 0x70
   28614:	f7ff ff70 	bl	284f8 <modem_data_get>
   28618:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.ip_address);
   2861a:	f504 7044 	add.w	r0, r4, #784	; 0x310
   2861e:	f7ff ff6b 	bl	284f8 <modem_data_get>
   28622:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.ue_mode);
   28624:	f504 7060 	add.w	r0, r4, #896	; 0x380
   28628:	f7ff ff66 	bl	284f8 <modem_data_get>
   2862c:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.current_operator);
   2862e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   28632:	f7ff ff61 	bl	284f8 <modem_data_get>
   28636:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.cellid_hex);
   28638:	f504 7028 	add.w	r0, r4, #672	; 0x2a0
   2863c:	f7ff ff5c 	bl	284f8 <modem_data_get>
   28640:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.area_code);
   28642:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   28646:	f7ff ff57 	bl	284f8 <modem_data_get>
   2864a:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.lte_mode);
   2864c:	f504 707c 	add.w	r0, r4, #1008	; 0x3f0
   28650:	f7ff ff52 	bl	284f8 <modem_data_get>
   28654:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.nbiot_mode);
   28656:	f504 608c 	add.w	r0, r4, #1120	; 0x460
   2865a:	f7ff ff4d 	bl	284f8 <modem_data_get>
   2865e:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.gps_mode);
   28660:	f504 609a 	add.w	r0, r4, #1232	; 0x4d0
   28664:	f7ff ff48 	bl	284f8 <modem_data_get>
   28668:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.apn);
   2866a:	f504 60b6 	add.w	r0, r4, #1456	; 0x5b0
   2866e:	f7ff ff43 	bl	284f8 <modem_data_get>
   28672:	4405      	add	r5, r0

		if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DATE_TIME)) {
			ret += modem_data_get(&modem->network.date_time);
   28674:	f504 60a8 	add.w	r0, r4, #1344	; 0x540
   28678:	f7ff ff3e 	bl	284f8 <modem_data_get>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2867c:	f8b4 3152 	ldrh.w	r3, [r4, #338]	; 0x152
   28680:	4405      	add	r5, r0
   28682:	f8a4 31c2 	strh.w	r3, [r4, #450]	; 0x1c2
   28686:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   2868a:	220a      	movs	r2, #10
   2868c:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
   28690:	f8b4 3155 	ldrh.w	r3, [r4, #341]	; 0x155
   28694:	2100      	movs	r1, #0
   28696:	f8a4 3232 	strh.w	r3, [r4, #562]	; 0x232
   2869a:	f894 3157 	ldrb.w	r3, [r4, #343]	; 0x157
	memcpy(mcc->value_string, current_operator->value_string, 3);
   2869e:	f504 70e1 	add.w	r0, r4, #450	; 0x1c2
   286a2:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   286a6:	f012 f8c3 	bl	3a830 <strtol>
		memcpy(&mnc->value_string, &current_operator->value_string[3], 3);
   286aa:	f204 2632 	addw	r6, r4, #562	; 0x232
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   286ae:	220a      	movs	r2, #10
   286b0:	2100      	movs	r1, #0
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   286b2:	f8a4 01c0 	strh.w	r0, [r4, #448]	; 0x1c0
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   286b6:	4630      	mov	r0, r6
   286b8:	f012 f8ba 	bl	3a830 <strtol>
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   286bc:	2210      	movs	r2, #16
   286be:	2100      	movs	r1, #0
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   286c0:	f8a4 0230 	strh.w	r0, [r4, #560]	; 0x230
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   286c4:	f204 20a2 	addw	r0, r4, #674	; 0x2a2
   286c8:	f012 f8b2 	bl	3a830 <strtol>
   286cc:	f7f4 f80a 	bl	1c6e4 <__aeabi_i2d>
   286d0:	f504 66d2 	add.w	r6, r4, #1680	; 0x690
   286d4:	e9c6 0100 	strd	r0, r1, [r6]
	area_code->value_string[4] = '\0';
   286d8:	2100      	movs	r1, #0
	area_code->value = strtol(area_code->value_string, NULL, 16);
   286da:	2210      	movs	r2, #16
	area_code->value_string[4] = '\0';
   286dc:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
	area_code->value = strtol(area_code->value_string, NULL, 16);
   286e0:	f104 00e2 	add.w	r0, r4, #226	; 0xe2
   286e4:	f012 f8a4 	bl	3a830 <strtol>
   286e8:	f8a4 00e0 	strh.w	r0, [r4, #224]	; 0xe0
				&modem->network.mcc,
				&modem->network.mnc);
		ret += cellid_to_dec(&modem->network.cellid_hex,
				&modem->network.cellid_dec);
		ret += area_code_parse(&modem->network.area_code);
		if (ret) {
   286ec:	b13d      	cbz	r5, 286fe <modem_info_params_get+0xfe>
			LOG_ERR("Network data not obtained: %d", ret);
   286ee:	462a      	mov	r2, r5
   286f0:	2145      	movs	r1, #69	; 0x45
   286f2:	4818      	ldr	r0, [pc, #96]	; (28754 <modem_info_params_get+0x154>)
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE)) {
		ret = modem_data_get(&modem->device.modem_fw);
		ret += modem_data_get(&modem->device.battery);
		ret += modem_data_get(&modem->device.imei);
		if (ret) {
			LOG_ERR("Device data not obtained: %d", ret);
   286f4:	f014 f9dc 	bl	3cab0 <z_log_minimal_printk>
			return -EAGAIN;
   286f8:	f06f 000a 	mvn.w	r0, #10
		}
	}

	return 0;
}
   286fc:	bd70      	pop	{r4, r5, r6, pc}
		ret = modem_data_get(&modem->sim.uicc);
   286fe:	f504 60d5 	add.w	r0, r4, #1704	; 0x6a8
   28702:	f7ff fef9 	bl	284f8 <modem_data_get>
   28706:	4605      	mov	r5, r0
			ret += modem_data_get(&modem->sim.iccid);
   28708:	f504 60e3 	add.w	r0, r4, #1816	; 0x718
   2870c:	f7ff fef4 	bl	284f8 <modem_data_get>
   28710:	4405      	add	r5, r0
			ret += modem_data_get(&modem->sim.imsi);
   28712:	f504 60f1 	add.w	r0, r4, #1928	; 0x788
   28716:	f7ff feef 	bl	284f8 <modem_data_get>
		if (ret) {
   2871a:	182a      	adds	r2, r5, r0
   2871c:	d002      	beq.n	28724 <modem_info_params_get+0x124>
			LOG_ERR("Sim data not obtained: %d", ret);
   2871e:	2145      	movs	r1, #69	; 0x45
   28720:	480d      	ldr	r0, [pc, #52]	; (28758 <modem_info_params_get+0x158>)
   28722:	e7e7      	b.n	286f4 <modem_info_params_get+0xf4>
		ret = modem_data_get(&modem->device.modem_fw);
   28724:	f504 60ff 	add.w	r0, r4, #2040	; 0x7f8
   28728:	f7ff fee6 	bl	284f8 <modem_data_get>
   2872c:	4605      	mov	r5, r0
		ret += modem_data_get(&modem->device.battery);
   2872e:	f604 0068 	addw	r0, r4, #2152	; 0x868
   28732:	f7ff fee1 	bl	284f8 <modem_data_get>
   28736:	4405      	add	r5, r0
		ret += modem_data_get(&modem->device.imei);
   28738:	f604 00d8 	addw	r0, r4, #2264	; 0x8d8
   2873c:	f7ff fedc 	bl	284f8 <modem_data_get>
		if (ret) {
   28740:	1940      	adds	r0, r0, r5
   28742:	d0db      	beq.n	286fc <modem_info_params_get+0xfc>
			LOG_ERR("Device data not obtained: %d", ret);
   28744:	4602      	mov	r2, r0
   28746:	2145      	movs	r1, #69	; 0x45
   28748:	4804      	ldr	r0, [pc, #16]	; (2875c <modem_info_params_get+0x15c>)
   2874a:	e7d3      	b.n	286f4 <modem_info_params_get+0xf4>
		return -EINVAL;
   2874c:	f06f 0015 	mvn.w	r0, #21
   28750:	e7d4      	b.n	286fc <modem_info_params_get+0xfc>
   28752:	bf00      	nop
   28754:	00046283 	.word	0x00046283
   28758:	000462a6 	.word	0x000462a6
   2875c:	000462c5 	.word	0x000462c5

00028760 <device_data_add>:

	return total_len;
}

static int device_data_add(struct device_param *device, cJSON *json_obj)
{
   28760:	e92d 4230 	stmdb	sp!, {r4, r5, r9, lr}
   28764:	4681      	mov	r9, r0
	int total_len;

	if (device == NULL || json_obj == NULL) {
   28766:	460c      	mov	r4, r1
   28768:	b329      	cbz	r1, 287b6 <device_data_add+0x56>
		return -EINVAL;
	}

	total_len = json_add_data(&device->modem_fw, json_obj);
   2876a:	f016 fe93 	bl	3f494 <json_add_data>
	total_len += json_add_data(&device->battery, json_obj);
   2876e:	4621      	mov	r1, r4
	total_len = json_add_data(&device->modem_fw, json_obj);
   28770:	4605      	mov	r5, r0
	total_len += json_add_data(&device->battery, json_obj);
   28772:	f109 0070 	add.w	r0, r9, #112	; 0x70
   28776:	f016 fe8d 	bl	3f494 <json_add_data>
	total_len += json_add_data(&device->imei, json_obj);
   2877a:	4621      	mov	r1, r4
	total_len += json_add_data(&device->battery, json_obj);
   2877c:	4405      	add	r5, r0
	total_len += json_add_data(&device->imei, json_obj);
   2877e:	f109 00e0 	add.w	r0, r9, #224	; 0xe0
   28782:	f016 fe87 	bl	3f494 <json_add_data>
	total_len += json_add_str(json_obj, "board", device->board);
   28786:	f8d9 2150 	ldr.w	r2, [r9, #336]	; 0x150
   2878a:	490c      	ldr	r1, [pc, #48]	; (287bc <device_data_add+0x5c>)
	total_len += json_add_data(&device->imei, json_obj);
   2878c:	4405      	add	r5, r0
	total_len += json_add_str(json_obj, "board", device->board);
   2878e:	4620      	mov	r0, r4
   28790:	f016 fe69 	bl	3f466 <json_add_str>
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   28794:	f8d9 2154 	ldr.w	r2, [r9, #340]	; 0x154
   28798:	4909      	ldr	r1, [pc, #36]	; (287c0 <device_data_add+0x60>)
	total_len += json_add_str(json_obj, "board", device->board);
   2879a:	4405      	add	r5, r0
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   2879c:	4620      	mov	r0, r4
   2879e:	f016 fe62 	bl	3f466 <json_add_str>
	total_len += json_add_str(json_obj, "appName", device->app_name);
   287a2:	f8d9 2158 	ldr.w	r2, [r9, #344]	; 0x158
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   287a6:	4405      	add	r5, r0
	total_len += json_add_str(json_obj, "appName", device->app_name);
   287a8:	4906      	ldr	r1, [pc, #24]	; (287c4 <device_data_add+0x64>)
   287aa:	4620      	mov	r0, r4
   287ac:	f016 fe5b 	bl	3f466 <json_add_str>
   287b0:	4428      	add	r0, r5

	return total_len;
}
   287b2:	e8bd 8230 	ldmia.w	sp!, {r4, r5, r9, pc}
		return -EINVAL;
   287b6:	f06f 0015 	mvn.w	r0, #21
   287ba:	e7fa      	b.n	287b2 <device_data_add+0x52>
   287bc:	000462f9 	.word	0x000462f9
   287c0:	000462ff 	.word	0x000462ff
   287c4:	0004630a 	.word	0x0004630a

000287c8 <network_data_add>:
{
   287c8:	b5d0      	push	{r4, r6, r7, lr}
   287ca:	460e      	mov	r6, r1
	if (network == NULL || json_obj == NULL) {
   287cc:	4604      	mov	r4, r0
{
   287ce:	b09a      	sub	sp, #104	; 0x68
	if (network == NULL || json_obj == NULL) {
   287d0:	2800      	cmp	r0, #0
   287d2:	d06b      	beq.n	288ac <network_data_add+0xe4>
   287d4:	2900      	cmp	r1, #0
   287d6:	d069      	beq.n	288ac <network_data_add+0xe4>
	total_len = json_add_data(&network->current_band, json_obj);
   287d8:	f016 fe5c 	bl	3f494 <json_add_data>
	total_len += json_add_data(&network->sup_band, json_obj);
   287dc:	4631      	mov	r1, r6
	total_len = json_add_data(&network->current_band, json_obj);
   287de:	4607      	mov	r7, r0
	total_len += json_add_data(&network->sup_band, json_obj);
   287e0:	f104 0070 	add.w	r0, r4, #112	; 0x70
   287e4:	f016 fe56 	bl	3f494 <json_add_data>
	total_len += json_add_data(&network->area_code, json_obj);
   287e8:	4631      	mov	r1, r6
	total_len += json_add_data(&network->sup_band, json_obj);
   287ea:	4407      	add	r7, r0
	total_len += json_add_data(&network->area_code, json_obj);
   287ec:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   287f0:	f016 fe50 	bl	3f494 <json_add_data>
	total_len += json_add_data(&network->current_operator, json_obj);
   287f4:	4631      	mov	r1, r6
	total_len += json_add_data(&network->area_code, json_obj);
   287f6:	4407      	add	r7, r0
	total_len += json_add_data(&network->current_operator, json_obj);
   287f8:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   287fc:	f016 fe4a 	bl	3f494 <json_add_data>
	total_len += json_add_data(&network->ip_address, json_obj);
   28800:	4631      	mov	r1, r6
	total_len += json_add_data(&network->current_operator, json_obj);
   28802:	4407      	add	r7, r0
	total_len += json_add_data(&network->ip_address, json_obj);
   28804:	f504 7044 	add.w	r0, r4, #784	; 0x310
   28808:	f016 fe44 	bl	3f494 <json_add_data>
	total_len += json_add_data(&network->ue_mode, json_obj);
   2880c:	4631      	mov	r1, r6
	total_len += json_add_data(&network->ip_address, json_obj);
   2880e:	4407      	add	r7, r0
	total_len += json_add_data(&network->ue_mode, json_obj);
   28810:	f504 7060 	add.w	r0, r4, #896	; 0x380
   28814:	f016 fe3e 	bl	3f494 <json_add_data>
	len = modem_info_name_get(network->cellid_hex.type, data_name);
   28818:	a901      	add	r1, sp, #4
	total_len += json_add_data(&network->ue_mode, json_obj);
   2881a:	4407      	add	r7, r0
	len = modem_info_name_get(network->cellid_hex.type, data_name);
   2881c:	f894 030c 	ldrb.w	r0, [r4, #780]	; 0x30c
   28820:	f7ff fcce 	bl	281c0 <modem_info_name_get>
	if (len > 0) {
   28824:	2800      	cmp	r0, #0
   28826:	dd11      	ble.n	2884c <network_data_add+0x84>
		data_name[len] = '\0';
   28828:	ab1a      	add	r3, sp, #104	; 0x68
   2882a:	4418      	add	r0, r3
   2882c:	2300      	movs	r3, #0
   2882e:	f800 3c64 	strb.w	r3, [r0, #-100]
		ret = json_add_num(json_obj, data_name, network->cellid_dec);
   28832:	f504 63d2 	add.w	r3, r4, #1680	; 0x690
	json_num = cJSON_CreateNumber(num);
   28836:	e9d3 0100 	ldrd	r0, r1, [r3]
   2883a:	f7f5 fe5d 	bl	1e4f8 <cJSON_CreateNumber>
	if (json_num == NULL) {
   2883e:	4602      	mov	r2, r0
   28840:	b120      	cbz	r0, 2884c <network_data_add+0x84>
	cJSON_AddItemToObject(parent, str, item);
   28842:	4630      	mov	r0, r6
   28844:	a901      	add	r1, sp, #4
   28846:	f017 f971 	bl	3fb2c <cJSON_AddItemToObject>
			total_len += sizeof(double);
   2884a:	3708      	adds	r7, #8
	network->network_mode[0] = '\0';
   2884c:	2300      	movs	r3, #0
   2884e:	f884 3698 	strb.w	r3, [r4, #1688]	; 0x698
	if (network->lte_mode.value == 1) {
   28852:	f8b4 33f0 	ldrh.w	r3, [r4, #1008]	; 0x3f0
		strcat(network->network_mode, lte_string);
   28856:	f504 62d3 	add.w	r2, r4, #1688	; 0x698
	if (network->lte_mode.value == 1) {
   2885a:	2b01      	cmp	r3, #1
   2885c:	d11b      	bne.n	28896 <network_data_add+0xce>
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
   2885e:	4610      	mov	r0, r2
   28860:	4914      	ldr	r1, [pc, #80]	; (288b4 <network_data_add+0xec>)
   28862:	f018 ff6e 	bl	41742 <strcat>
   28866:	4602      	mov	r2, r0
		total_len += sizeof(lte_string);
   28868:	3706      	adds	r7, #6
	if (network->gps_mode.value == 1) {
   2886a:	f8b4 34d0 	ldrh.w	r3, [r4, #1232]	; 0x4d0
   2886e:	2b01      	cmp	r3, #1
   28870:	d105      	bne.n	2887e <network_data_add+0xb6>
   28872:	4610      	mov	r0, r2
   28874:	4910      	ldr	r1, [pc, #64]	; (288b8 <network_data_add+0xf0>)
   28876:	f018 ff64 	bl	41742 <strcat>
   2887a:	4602      	mov	r2, r0
		total_len += sizeof(gps_string);
   2887c:	3705      	adds	r7, #5
	ret = json_add_str(json_obj, "networkMode", network->network_mode);
   2887e:	4630      	mov	r0, r6
   28880:	490e      	ldr	r1, [pc, #56]	; (288bc <network_data_add+0xf4>)
   28882:	f016 fdf0 	bl	3f466 <json_add_str>
	if (ret) {
   28886:	b118      	cbz	r0, 28890 <network_data_add+0xc8>
		LOG_ERR("Unable to add the network mode");
   28888:	2145      	movs	r1, #69	; 0x45
   2888a:	480d      	ldr	r0, [pc, #52]	; (288c0 <network_data_add+0xf8>)
   2888c:	f014 f910 	bl	3cab0 <z_log_minimal_printk>
}
   28890:	4638      	mov	r0, r7
   28892:	b01a      	add	sp, #104	; 0x68
   28894:	bdd0      	pop	{r4, r6, r7, pc}
	} else if (network->nbiot_mode.value == 1) {
   28896:	f8b4 3460 	ldrh.w	r3, [r4, #1120]	; 0x460
   2889a:	2b01      	cmp	r3, #1
   2889c:	d1e5      	bne.n	2886a <network_data_add+0xa2>
   2889e:	4610      	mov	r0, r2
   288a0:	4908      	ldr	r1, [pc, #32]	; (288c4 <network_data_add+0xfc>)
   288a2:	f018 ff4e 	bl	41742 <strcat>
		total_len += sizeof(nbiot_string);
   288a6:	3707      	adds	r7, #7
   288a8:	4602      	mov	r2, r0
   288aa:	e7de      	b.n	2886a <network_data_add+0xa2>
		return -EINVAL;
   288ac:	f06f 0715 	mvn.w	r7, #21
   288b0:	e7ee      	b.n	28890 <network_data_add+0xc8>
   288b2:	bf00      	nop
   288b4:	00046376 	.word	0x00046376
   288b8:	00046371 	.word	0x00046371
   288bc:	00046312 	.word	0x00046312
   288c0:	0004631e 	.word	0x0004631e
   288c4:	0004637c 	.word	0x0004637c

000288c8 <modem_info_json_object_encode>:

int modem_info_json_object_encode(struct modem_param_info *modem,
				  cJSON *root_obj)
{
   288c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   288cc:	4681      	mov	r9, r0
	if (root_obj == NULL || modem == NULL) {
   288ce:	460d      	mov	r5, r1
   288d0:	2900      	cmp	r1, #0
   288d2:	d04f      	beq.n	28974 <modem_info_json_object_encode+0xac>
   288d4:	2800      	cmp	r0, #0
   288d6:	d04d      	beq.n	28974 <modem_info_json_object_encode+0xac>
		return -EINVAL;
	}

	int obj_count = cJSON_GetArraySize(root_obj);
   288d8:	4608      	mov	r0, r1
   288da:	f017 f90d 	bl	3faf8 <cJSON_GetArraySize>
   288de:	4604      	mov	r4, r0

	cJSON *network_obj	= cJSON_CreateObject();
   288e0:	f009 fbee 	bl	320c0 <cJSON_CreateObject>
   288e4:	4680      	mov	r8, r0
	cJSON *sim_obj		= cJSON_CreateObject();
   288e6:	f009 fbeb 	bl	320c0 <cJSON_CreateObject>
   288ea:	4607      	mov	r7, r0
	cJSON *device_obj	= cJSON_CreateObject();
   288ec:	f009 fbe8 	bl	320c0 <cJSON_CreateObject>
   288f0:	4606      	mov	r6, r0

	if (network_obj == NULL || sim_obj == NULL || device_obj == NULL) {
   288f2:	f1b8 0f00 	cmp.w	r8, #0
   288f6:	d03a      	beq.n	2896e <modem_info_json_object_encode+0xa6>
   288f8:	b3cf      	cbz	r7, 2896e <modem_info_json_object_encode+0xa6>
   288fa:	b3c0      	cbz	r0, 2896e <modem_info_json_object_encode+0xa6>
		obj_count = -ENOMEM;
		goto delete_object;
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK) &&
	    (network_data_add(&modem->network, network_obj) > 0)) {
   288fc:	4641      	mov	r1, r8
   288fe:	4648      	mov	r0, r9
   28900:	f7ff ff62 	bl	287c8 <network_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK) &&
   28904:	2800      	cmp	r0, #0
   28906:	dd06      	ble.n	28916 <modem_info_json_object_encode+0x4e>
	cJSON_AddItemToObject(parent, str, item);
   28908:	4642      	mov	r2, r8
   2890a:	4628      	mov	r0, r5
   2890c:	491b      	ldr	r1, [pc, #108]	; (2897c <modem_info_json_object_encode+0xb4>)
   2890e:	f017 f90d 	bl	3fb2c <cJSON_AddItemToObject>

		json_add_obj(root_obj, MODEM_INFO_JSON_KEY_NET_INF, network_obj);
		network_obj = NULL;
   28912:	f04f 0800 	mov.w	r8, #0
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_SIM) &&
	    (sim_data_add(&modem->sim, sim_obj) > 0)) {
   28916:	4639      	mov	r1, r7
   28918:	f509 60d5 	add.w	r0, r9, #1704	; 0x6a8
   2891c:	f016 fdfd 	bl	3f51a <sim_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_SIM) &&
   28920:	2800      	cmp	r0, #0
   28922:	dd05      	ble.n	28930 <modem_info_json_object_encode+0x68>
	cJSON_AddItemToObject(parent, str, item);
   28924:	463a      	mov	r2, r7
   28926:	4628      	mov	r0, r5
   28928:	4915      	ldr	r1, [pc, #84]	; (28980 <modem_info_json_object_encode+0xb8>)
   2892a:	f017 f8ff 	bl	3fb2c <cJSON_AddItemToObject>

		json_add_obj(root_obj, MODEM_INFO_JSON_KEY_SIM_INF, sim_obj);
		sim_obj = NULL;
   2892e:	2700      	movs	r7, #0
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE) &&
	    (device_data_add(&modem->device, device_obj) > 0)) {
   28930:	4631      	mov	r1, r6
   28932:	f509 60ff 	add.w	r0, r9, #2040	; 0x7f8
   28936:	f7ff ff13 	bl	28760 <device_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE) &&
   2893a:	2800      	cmp	r0, #0
   2893c:	dd05      	ble.n	2894a <modem_info_json_object_encode+0x82>
	cJSON_AddItemToObject(parent, str, item);
   2893e:	4632      	mov	r2, r6
   28940:	4628      	mov	r0, r5
   28942:	4910      	ldr	r1, [pc, #64]	; (28984 <modem_info_json_object_encode+0xbc>)
   28944:	f017 f8f2 	bl	3fb2c <cJSON_AddItemToObject>

		json_add_obj(root_obj, MODEM_INFO_JSON_KEY_DEV_INF, device_obj);
		device_obj = NULL;
   28948:	2600      	movs	r6, #0
	}

delete_object:
	cJSON_Delete(network_obj);
   2894a:	4640      	mov	r0, r8
   2894c:	f009 faf6 	bl	31f3c <cJSON_Delete>
	cJSON_Delete(sim_obj);
   28950:	4638      	mov	r0, r7
   28952:	f009 faf3 	bl	31f3c <cJSON_Delete>
	cJSON_Delete(device_obj);
   28956:	4630      	mov	r0, r6
   28958:	f009 faf0 	bl	31f3c <cJSON_Delete>

	if (obj_count >= 0) {
   2895c:	2c00      	cmp	r4, #0
   2895e:	db03      	blt.n	28968 <modem_info_json_object_encode+0xa0>
		obj_count = cJSON_GetArraySize(root_obj) - obj_count;
   28960:	4628      	mov	r0, r5
   28962:	f017 f8c9 	bl	3faf8 <cJSON_GetArraySize>
   28966:	1b04      	subs	r4, r0, r4
	}

	return obj_count;
}
   28968:	4620      	mov	r0, r4
   2896a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		obj_count = -ENOMEM;
   2896e:	f06f 040b 	mvn.w	r4, #11
   28972:	e7ea      	b.n	2894a <modem_info_json_object_encode+0x82>
		return -EINVAL;
   28974:	f06f 0415 	mvn.w	r4, #21
   28978:	e7f6      	b.n	28968 <modem_info_json_object_encode+0xa0>
   2897a:	bf00      	nop
   2897c:	00046342 	.word	0x00046342
   28980:	0004634e 	.word	0x0004634e
   28984:	00046356 	.word	0x00046356

00028988 <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   28988:	4803      	ldr	r0, [pc, #12]	; (28998 <k_sys_fatal_error_handler+0x10>)
   2898a:	2145      	movs	r1, #69	; 0x45
{
   2898c:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
   2898e:	f014 f88f 	bl	3cab0 <z_log_minimal_printk>
		sys_arch_reboot(0);
   28992:	2000      	movs	r0, #0
   28994:	f7fa fcda 	bl	2334c <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   28998:	00046383 	.word	0x00046383

0002899c <translate_error>:
{
	cmee_control(DISABLE);
}

static int translate_error(int err)
{
   2899c:	b508      	push	{r3, lr}
	/* In case of CME error translate the error value to
	 * an errno value.
	 */
	switch (err) {
   2899e:	f46f 7300 	mvn.w	r3, #512	; 0x200
   289a2:	4418      	add	r0, r3
   289a4:	2805      	cmp	r0, #5
   289a6:	d80d      	bhi.n	289c4 <translate_error+0x28>
   289a8:	e8df f000 	tbb	[pc, r0]
   289ac:	0c060317 	.word	0x0c060317
   289b0:	090c      	.short	0x090c
   289b2:	f04f 30ff 	mov.w	r0, #4294967295
		__ASSERT(false, "Untranslated CME error %d!", err);
		return 0xBAADBAAD;
	}

	return err;
}
   289b6:	bd08      	pop	{r3, pc}
		return -ENOMEM;
   289b8:	f06f 000b 	mvn.w	r0, #11
   289bc:	e7fb      	b.n	289b6 <translate_error+0x1a>
		return -EACCES;
   289be:	f06f 000c 	mvn.w	r0, #12
   289c2:	e7f8      	b.n	289b6 <translate_error+0x1a>
		__ASSERT(false, "Untranslated CME error %d!", err);
   289c4:	224c      	movs	r2, #76	; 0x4c
   289c6:	4906      	ldr	r1, [pc, #24]	; (289e0 <translate_error+0x44>)
   289c8:	4806      	ldr	r0, [pc, #24]	; (289e4 <translate_error+0x48>)
   289ca:	f014 f837 	bl	3ca3c <assert_print>
   289ce:	4804      	ldr	r0, [pc, #16]	; (289e0 <translate_error+0x44>)
   289d0:	214c      	movs	r1, #76	; 0x4c
   289d2:	f014 f82c 	bl	3ca2e <assert_post_action>
   289d6:	4804      	ldr	r0, [pc, #16]	; (289e8 <translate_error+0x4c>)
   289d8:	e7ed      	b.n	289b6 <translate_error+0x1a>
		return -ENOENT;
   289da:	f06f 0001 	mvn.w	r0, #1
   289de:	e7ea      	b.n	289b6 <translate_error+0x1a>
   289e0:	000463a5 	.word	0x000463a5
   289e4:	00043ff2 	.word	0x00043ff2
   289e8:	baadbaad 	.word	0xbaadbaad

000289ec <cmee_enable>:
{
   289ec:	b513      	push	{r0, r1, r4, lr}
   289ee:	4604      	mov	r4, r0
	err = nrf_modem_at_scanf("AT+CMEE?", "+CMEE: %d", &active);
   289f0:	aa01      	add	r2, sp, #4
   289f2:	490d      	ldr	r1, [pc, #52]	; (28a28 <cmee_enable+0x3c>)
   289f4:	480d      	ldr	r0, [pc, #52]	; (28a2c <cmee_enable+0x40>)
   289f6:	f00c fb99 	bl	3512c <nrf_modem_at_scanf>
	if (err < 0) {
   289fa:	1e02      	subs	r2, r0, #0
   289fc:	da0c      	bge.n	28a18 <cmee_enable+0x2c>
		LOG_WRN("Failed to retrieve CMEE status, err %d", err);
   289fe:	2157      	movs	r1, #87	; 0x57
   28a00:	480b      	ldr	r0, [pc, #44]	; (28a30 <cmee_enable+0x44>)
   28a02:	f014 f855 	bl	3cab0 <z_log_minimal_printk>
		*was_enabled = false;
   28a06:	2300      	movs	r3, #0
	return nrf_modem_at_printf("AT+CMEE=%d", state);
   28a08:	2101      	movs	r1, #1
   28a0a:	480a      	ldr	r0, [pc, #40]	; (28a34 <cmee_enable+0x48>)
		*was_enabled = false;
   28a0c:	7023      	strb	r3, [r4, #0]
}
   28a0e:	b002      	add	sp, #8
   28a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return nrf_modem_at_printf("AT+CMEE=%d", state);
   28a14:	f00c baf8 	b.w	35008 <nrf_modem_at_printf>
	return active ? true : false;
   28a18:	9b01      	ldr	r3, [sp, #4]
	if (!cmee_is_active()) {
   28a1a:	2b00      	cmp	r3, #0
   28a1c:	d0f3      	beq.n	28a06 <cmee_enable+0x1a>
		*was_enabled = true;
   28a1e:	2301      	movs	r3, #1
   28a20:	7023      	strb	r3, [r4, #0]
}
   28a22:	b002      	add	sp, #8
   28a24:	bd10      	pop	{r4, pc}
   28a26:	bf00      	nop
   28a28:	000463d9 	.word	0x000463d9
   28a2c:	000463e3 	.word	0x000463e3
   28a30:	000463ec 	.word	0x000463ec
   28a34:	00046418 	.word	0x00046418

00028a38 <cmee_disable>:
	return nrf_modem_at_printf("AT+CMEE=%d", state);
   28a38:	2100      	movs	r1, #0
   28a3a:	4801      	ldr	r0, [pc, #4]	; (28a40 <cmee_disable+0x8>)
   28a3c:	f00c bae4 	b.w	35008 <nrf_modem_at_printf>
   28a40:	00046418 	.word	0x00046418

00028a44 <modem_key_mgmt_write>:
}

int modem_key_mgmt_write(nrf_sec_tag_t sec_tag,
			 enum modem_key_mgmt_cred_type cred_type,
			 const void *buf, size_t len)
{
   28a44:	b5f0      	push	{r4, r5, r6, r7, lr}
   28a46:	4606      	mov	r6, r0
   28a48:	460f      	mov	r7, r1
   28a4a:	461c      	mov	r4, r3
	int err;
	bool cmee_was_enabled;

	if (buf == NULL || len == 0) {
   28a4c:	4615      	mov	r5, r2
{
   28a4e:	b085      	sub	sp, #20
	if (buf == NULL || len == 0) {
   28a50:	b1d2      	cbz	r2, 28a88 <modem_key_mgmt_write+0x44>
   28a52:	b1cb      	cbz	r3, 28a88 <modem_key_mgmt_write+0x44>
		return -EINVAL;
	}

	cmee_enable(&cmee_was_enabled);
   28a54:	f10d 000f 	add.w	r0, sp, #15
   28a58:	f7ff ffc8 	bl	289ec <cmee_enable>

	err = nrf_modem_at_printf("AT%%CMNG=0,%d,%d,\"%.*s\"",
   28a5c:	4623      	mov	r3, r4
   28a5e:	463a      	mov	r2, r7
   28a60:	4631      	mov	r1, r6
   28a62:	480b      	ldr	r0, [pc, #44]	; (28a90 <modem_key_mgmt_write+0x4c>)
   28a64:	9500      	str	r5, [sp, #0]
   28a66:	f00c facf 	bl	35008 <nrf_modem_at_printf>
				  sec_tag, cred_type, len, (const char *)buf);

	if (!cmee_was_enabled) {
   28a6a:	f89d 300f 	ldrb.w	r3, [sp, #15]
	err = nrf_modem_at_printf("AT%%CMNG=0,%d,%d,\"%.*s\"",
   28a6e:	4604      	mov	r4, r0
	if (!cmee_was_enabled) {
   28a70:	b90b      	cbnz	r3, 28a76 <modem_key_mgmt_write+0x32>
		cmee_disable();
   28a72:	f7ff ffe1 	bl	28a38 <cmee_disable>
	}

	if (err) {
   28a76:	b124      	cbz	r4, 28a82 <modem_key_mgmt_write+0x3e>
		return translate_error(nrf_modem_at_err(err));
   28a78:	f424 007f 	bic.w	r0, r4, #16711680	; 0xff0000
   28a7c:	f7ff ff8e 	bl	2899c <translate_error>
   28a80:	4604      	mov	r4, r0
	}

	return 0;
}
   28a82:	4620      	mov	r0, r4
   28a84:	b005      	add	sp, #20
   28a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   28a88:	f06f 0415 	mvn.w	r4, #21
   28a8c:	e7f9      	b.n	28a82 <modem_key_mgmt_write+0x3e>
   28a8e:	bf00      	nop
   28a90:	00046423 	.word	0x00046423

00028a94 <modem_key_mgmt_delete>:
	return 0;
}

int modem_key_mgmt_delete(nrf_sec_tag_t sec_tag,
			  enum modem_key_mgmt_cred_type cred_type)
{
   28a94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   28a96:	4604      	mov	r4, r0
	int err;
	bool cmee_was_enabled;

	cmee_enable(&cmee_was_enabled);
   28a98:	f10d 000f 	add.w	r0, sp, #15
{
   28a9c:	9101      	str	r1, [sp, #4]
	cmee_enable(&cmee_was_enabled);
   28a9e:	f7ff ffa5 	bl	289ec <cmee_enable>

	err = nrf_modem_at_printf("AT%%CMNG=3,%d,%d", sec_tag, cred_type);
   28aa2:	4621      	mov	r1, r4
   28aa4:	9a01      	ldr	r2, [sp, #4]
   28aa6:	4809      	ldr	r0, [pc, #36]	; (28acc <modem_key_mgmt_delete+0x38>)
   28aa8:	f00c faae 	bl	35008 <nrf_modem_at_printf>

	if (!cmee_was_enabled) {
   28aac:	f89d 300f 	ldrb.w	r3, [sp, #15]
	err = nrf_modem_at_printf("AT%%CMNG=3,%d,%d", sec_tag, cred_type);
   28ab0:	4604      	mov	r4, r0
	if (!cmee_was_enabled) {
   28ab2:	b90b      	cbnz	r3, 28ab8 <modem_key_mgmt_delete+0x24>
		cmee_disable();
   28ab4:	f7ff ffc0 	bl	28a38 <cmee_disable>
	}

	if (err) {
   28ab8:	b124      	cbz	r4, 28ac4 <modem_key_mgmt_delete+0x30>
		return translate_error(nrf_modem_at_err(err));
   28aba:	f424 007f 	bic.w	r0, r4, #16711680	; 0xff0000
   28abe:	f7ff ff6d 	bl	2899c <translate_error>
   28ac2:	4604      	mov	r4, r0
	}

	return 0;
}
   28ac4:	4620      	mov	r0, r4
   28ac6:	b004      	add	sp, #16
   28ac8:	bd10      	pop	{r4, pc}
   28aca:	bf00      	nop
   28acc:	0004643b 	.word	0x0004643b

00028ad0 <modem_key_mgmt_exists>:

int modem_key_mgmt_exists(nrf_sec_tag_t sec_tag,
			  enum modem_key_mgmt_cred_type cred_type,
			  bool *exists)
{
   28ad0:	b570      	push	{r4, r5, r6, lr}
   28ad2:	b086      	sub	sp, #24
   28ad4:	460c      	mov	r4, r1
	int err;
	bool cmee_was_active;

	if (exists == NULL) {
   28ad6:	4615      	mov	r5, r2
{
   28ad8:	9003      	str	r0, [sp, #12]
	if (exists == NULL) {
   28ada:	b34a      	cbz	r2, 28b30 <modem_key_mgmt_exists+0x60>
		return -EINVAL;
	}

	cmee_enable(&cmee_was_active);
   28adc:	f10d 0017 	add.w	r0, sp, #23
   28ae0:	f7ff ff84 	bl	289ec <cmee_enable>

	scratch_buf[0] = '\0';
   28ae4:	2200      	movs	r2, #0
   28ae6:	4814      	ldr	r0, [pc, #80]	; (28b38 <modem_key_mgmt_exists+0x68>)
	err = nrf_modem_at_cmd(scratch_buf, sizeof(scratch_buf),
   28ae8:	9b03      	ldr	r3, [sp, #12]
	scratch_buf[0] = '\0';
   28aea:	7002      	strb	r2, [r0, #0]
	err = nrf_modem_at_cmd(scratch_buf, sizeof(scratch_buf),
   28aec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   28af0:	9400      	str	r4, [sp, #0]
   28af2:	4a12      	ldr	r2, [pc, #72]	; (28b3c <modem_key_mgmt_exists+0x6c>)
   28af4:	f00c faae 	bl	35054 <nrf_modem_at_cmd>
			       "AT%%CMNG=1,%d,%d", sec_tag, cred_type);

	if (!cmee_was_active) {
   28af8:	f89d 3017 	ldrb.w	r3, [sp, #23]
	err = nrf_modem_at_cmd(scratch_buf, sizeof(scratch_buf),
   28afc:	4604      	mov	r4, r0
	if (!cmee_was_active) {
   28afe:	b90b      	cbnz	r3, 28b04 <modem_key_mgmt_exists+0x34>
		cmee_disable();
   28b00:	f7ff ff9a 	bl	28a38 <cmee_disable>
	}

	if (err) {
   28b04:	b13c      	cbz	r4, 28b16 <modem_key_mgmt_exists+0x46>
		return translate_error(nrf_modem_at_err(err));
   28b06:	f424 007f 	bic.w	r0, r4, #16711680	; 0xff0000
   28b0a:	f7ff ff47 	bl	2899c <translate_error>
   28b0e:	4604      	mov	r4, r0
	} else {
		*exists = false;
	}

	return 0;
}
   28b10:	4620      	mov	r0, r4
   28b12:	b006      	add	sp, #24
   28b14:	bd70      	pop	{r4, r5, r6, pc}
	if (strlen(scratch_buf) > strlen("OK\r\n")) {
   28b16:	4808      	ldr	r0, [pc, #32]	; (28b38 <modem_key_mgmt_exists+0x68>)
   28b18:	f7f4 fb93 	bl	1d242 <strlen>
   28b1c:	4606      	mov	r6, r0
   28b1e:	4808      	ldr	r0, [pc, #32]	; (28b40 <modem_key_mgmt_exists+0x70>)
   28b20:	f7f4 fb8f 	bl	1d242 <strlen>
   28b24:	4286      	cmp	r6, r0
		*exists = true;
   28b26:	bf8a      	itet	hi
   28b28:	2301      	movhi	r3, #1
		*exists = false;
   28b2a:	702c      	strbls	r4, [r5, #0]
		*exists = true;
   28b2c:	702b      	strbhi	r3, [r5, #0]
		*exists = false;
   28b2e:	e7ef      	b.n	28b10 <modem_key_mgmt_exists+0x40>
		return -EINVAL;
   28b30:	f06f 0415 	mvn.w	r4, #21
   28b34:	e7ec      	b.n	28b10 <modem_key_mgmt_exists+0x40>
   28b36:	bf00      	nop
   28b38:	2001b703 	.word	0x2001b703
   28b3c:	0004644c 	.word	0x0004644c
   28b40:	000451bc 	.word	0x000451bc

00028b44 <date_time_now>:

	return 0;
}

int date_time_now(int64_t *unix_time_ms)
{
   28b44:	b510      	push	{r4, lr}
	int err;

	if (unix_time_ms == NULL) {
   28b46:	4604      	mov	r4, r0
   28b48:	b930      	cbnz	r0, 28b58 <date_time_now+0x14>
		LOG_ERR("The passed in pointer cannot be NULL");
   28b4a:	480b      	ldr	r0, [pc, #44]	; (28b78 <date_time_now+0x34>)
   28b4c:	2145      	movs	r1, #69	; 0x45
   28b4e:	f013 ffaf 	bl	3cab0 <z_log_minimal_printk>
   28b52:	f06f 0015 	mvn.w	r0, #21
	}

	err = date_time_core_now(unix_time_ms);

	return err;
}
   28b56:	bd10      	pop	{r4, pc}

bool date_time_is_valid(void)
{
	return date_time_core_is_valid();
   28b58:	f000 f88e 	bl	28c78 <date_time_core_is_valid>
	if (!date_time_is_valid()) {
   28b5c:	b930      	cbnz	r0, 28b6c <date_time_now+0x28>
		LOG_WRN("Valid time not currently available");
   28b5e:	4807      	ldr	r0, [pc, #28]	; (28b7c <date_time_now+0x38>)
   28b60:	2157      	movs	r1, #87	; 0x57
   28b62:	f013 ffa5 	bl	3cab0 <z_log_minimal_printk>
		return -ENODATA;
   28b66:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   28b6a:	e7f4      	b.n	28b56 <date_time_now+0x12>
	err = date_time_core_now(unix_time_ms);
   28b6c:	4620      	mov	r0, r4
}
   28b6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = date_time_core_now(unix_time_ms);
   28b72:	f000 b851 	b.w	28c18 <date_time_core_now>
   28b76:	bf00      	nop
   28b78:	0004646c 	.word	0x0004646c
   28b7c:	000465c9 	.word	0x000465c9

00028b80 <date_time_core_notify_event>:
static void date_time_core_notify_event(enum date_time_evt_type time_source)
{
	static struct date_time_evt evt;

	/* Update time source to the event if not requesting previous time source */
	if (time_source != DATE_TIME_EVT_TYPE_PREVIOUS) {
   28b80:	28ff      	cmp	r0, #255	; 0xff
		evt.type = time_source;
   28b82:	bf1c      	itt	ne
   28b84:	4b03      	ldrne	r3, [pc, #12]	; (28b94 <date_time_core_notify_event+0x14>)
   28b86:	7018      	strbne	r0, [r3, #0]
	}

	if (app_evt_handler != NULL) {
   28b88:	4b03      	ldr	r3, [pc, #12]	; (28b98 <date_time_core_notify_event+0x18>)
   28b8a:	681b      	ldr	r3, [r3, #0]
   28b8c:	b10b      	cbz	r3, 28b92 <date_time_core_notify_event+0x12>
		app_evt_handler(&evt);
   28b8e:	4801      	ldr	r0, [pc, #4]	; (28b94 <date_time_core_notify_event+0x14>)
   28b90:	4718      	bx	r3
	}
}
   28b92:	4770      	bx	lr
   28b94:	2001c703 	.word	0x2001c703
   28b98:	20019424 	.word	0x20019424

00028b9c <date_time_lte_ind_handler>:
{
	k_sem_give(&time_fetch_sem);
}

void date_time_lte_ind_handler(const struct lte_lc_evt *const evt)
{
   28b9c:	b510      	push	{r4, lr}
#if defined(CONFIG_DATE_TIME_AUTO_UPDATE) && defined(CONFIG_LTE_LINK_CONTROL)
	switch (evt->type) {
   28b9e:	7803      	ldrb	r3, [r0, #0]
   28ba0:	b9c3      	cbnz	r3, 28bd4 <date_time_lte_ind_handler+0x38>
	case LTE_LC_EVT_NW_REG_STATUS:

		switch (evt->nw_reg_status) {
   28ba2:	7a03      	ldrb	r3, [r0, #8]
   28ba4:	3b01      	subs	r3, #1
   28ba6:	2b07      	cmp	r3, #7
   28ba8:	d814      	bhi.n	28bd4 <date_time_lte_ind_handler+0x38>
   28baa:	e8df f003 	tbb	[pc, r3]
   28bae:	0f04      	.short	0x0f04
   28bb0:	13041313 	.word	0x13041313
   28bb4:	0413      	.short	0x0413
		case LTE_LC_NW_REG_REGISTERED_EMERGENCY:
		case LTE_LC_NW_REG_REGISTERED_HOME:
		case LTE_LC_NW_REG_REGISTERED_ROAMING:
			if (!date_time_is_valid()) {
   28bb6:	f016 fccc 	bl	3f552 <date_time_is_valid>
   28bba:	b958      	cbnz	r0, 28bd4 <date_time_lte_ind_handler+0x38>
		break;
	default:
		break;
	}
#endif /* defined(CONFIG_DATE_TIME_AUTO_UPDATE) && defined(CONFIG_LTE_LINK_CONTROL) */
}
   28bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				k_work_reschedule(&time_work, K_SECONDS(1));
   28bc0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   28bc4:	2300      	movs	r3, #0
   28bc6:	4804      	ldr	r0, [pc, #16]	; (28bd8 <date_time_lte_ind_handler+0x3c>)
   28bc8:	f00e bd9a 	b.w	37700 <k_work_reschedule>
}
   28bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			date_time_modem_xtime_subscribe();
   28bd0:	f000 ba80 	b.w	290d4 <date_time_modem_xtime_subscribe>
}
   28bd4:	bd10      	pop	{r4, pc}
   28bd6:	bf00      	nop
   28bd8:	20014500 	.word	0x20014500

00028bdc <date_time_core_schedule_update>:
{
   28bdc:	b510      	push	{r4, lr}
		if (check_pending && k_work_delayable_is_pending(&time_work)) {
   28bde:	b118      	cbz	r0, 28be8 <date_time_core_schedule_update+0xc>
	return k_work_delayable_busy_get(dwork) != 0;
   28be0:	4806      	ldr	r0, [pc, #24]	; (28bfc <date_time_core_schedule_update+0x20>)
   28be2:	f018 fa34 	bl	4104e <k_work_delayable_busy_get>
   28be6:	b938      	cbnz	r0, 28bf8 <date_time_core_schedule_update+0x1c>
}
   28be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_work_reschedule(&time_work, K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));
   28bec:	f04f 52e1 	mov.w	r2, #471859200	; 0x1c200000
   28bf0:	2300      	movs	r3, #0
   28bf2:	4802      	ldr	r0, [pc, #8]	; (28bfc <date_time_core_schedule_update+0x20>)
   28bf4:	f00e bd84 	b.w	37700 <k_work_reschedule>
}
   28bf8:	bd10      	pop	{r4, pc}
   28bfa:	bf00      	nop
   28bfc:	20014500 	.word	0x20014500

00028c00 <date_time_handler>:
	z_impl_k_sem_give(sem);
   28c00:	4801      	ldr	r0, [pc, #4]	; (28c08 <date_time_handler+0x8>)
   28c02:	f00e b8a9 	b.w	36d58 <z_impl_k_sem_give>
   28c06:	bf00      	nop
   28c08:	200150c0 	.word	0x200150c0

00028c0c <date_time_core_init>:

void date_time_core_init(void)
{
	if (IS_ENABLED(CONFIG_DATE_TIME_AUTO_UPDATE) && IS_ENABLED(CONFIG_LTE_LINK_CONTROL)) {
		lte_lc_register_handler(date_time_lte_ind_handler);
   28c0c:	4801      	ldr	r0, [pc, #4]	; (28c14 <date_time_core_init+0x8>)
   28c0e:	f7fe ba3f 	b.w	27090 <lte_lc_register_handler>
   28c12:	bf00      	nop
   28c14:	00028b9d 	.word	0x00028b9d

00028c18 <date_time_core_now>:
		date_time_core_schedule_update(false);
	}
}

int date_time_core_now(int64_t *unix_time_ms)
{
   28c18:	b530      	push	{r4, r5, lr}
   28c1a:	4604      	mov	r4, r0
   28c1c:	b085      	sub	sp, #20
		union { uintptr_t x; struct timespec * val; } parm1 = { .val = ts };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_CLOCK_GETTIME);
	}
#endif
	compiler_barrier();
	return z_impl_clock_gettime(clock_id, ts);
   28c1e:	2001      	movs	r0, #1
   28c20:	4669      	mov	r1, sp
   28c22:	f7fa fec9 	bl	239b8 <z_impl_clock_gettime>
	int err;
	struct timespec tp;

	err = clock_gettime(CLOCK_REALTIME, &tp);
	if (err) {
   28c26:	b150      	cbz	r0, 28c3e <date_time_core_now+0x26>
		LOG_WRN("clock_gettime failed, errno %d", errno);
   28c28:	f014 fd81 	bl	3d72e <__errno>
   28c2c:	2157      	movs	r1, #87	; 0x57
   28c2e:	6802      	ldr	r2, [r0, #0]
   28c30:	480c      	ldr	r0, [pc, #48]	; (28c64 <date_time_core_now+0x4c>)
   28c32:	f013 ff3d 	bl	3cab0 <z_log_minimal_printk>
		return -ENODATA;
   28c36:	f06f 003c 	mvn.w	r0, #60	; 0x3c
	}
	*unix_time_ms = tp.tv_sec * 1000 + tp.tv_nsec / 1000000;

	return 0;
}
   28c3a:	b005      	add	sp, #20
   28c3c:	bd30      	pop	{r4, r5, pc}
	*unix_time_ms = tp.tv_sec * 1000 + tp.tv_nsec / 1000000;
   28c3e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   28c42:	9b00      	ldr	r3, [sp, #0]
   28c44:	9d01      	ldr	r5, [sp, #4]
   28c46:	fba3 3201 	umull	r3, r2, r3, r1
   28c4a:	fb01 2205 	mla	r2, r1, r5, r2
   28c4e:	9902      	ldr	r1, [sp, #8]
   28c50:	4d05      	ldr	r5, [pc, #20]	; (28c68 <date_time_core_now+0x50>)
   28c52:	fb91 f1f5 	sdiv	r1, r1, r5
   28c56:	185b      	adds	r3, r3, r1
   28c58:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
   28c5c:	e9c4 3200 	strd	r3, r2, [r4]
	return 0;
   28c60:	e7eb      	b.n	28c3a <date_time_core_now+0x22>
   28c62:	bf00      	nop
   28c64:	000465fb 	.word	0x000465fb
   28c68:	000f4240 	.word	0x000f4240

00028c6c <date_time_core_register_handler>:
	return 0;
}

void date_time_core_register_handler(date_time_evt_handler_t evt_handler)
{
	if (evt_handler == NULL) {
   28c6c:	4b01      	ldr	r3, [pc, #4]	; (28c74 <date_time_core_register_handler+0x8>)
   28c6e:	6018      	str	r0, [r3, #0]
	}

	LOG_DBG("Registering handler %p", evt_handler);

	app_evt_handler = evt_handler;
}
   28c70:	4770      	bx	lr
   28c72:	bf00      	nop
   28c74:	20019424 	.word	0x20019424

00028c78 <date_time_core_is_valid>:

bool date_time_core_is_valid(void)
{
	return (date_time_last_update_uptime != 0);
   28c78:	4b03      	ldr	r3, [pc, #12]	; (28c88 <date_time_core_is_valid+0x10>)
   28c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   28c7e:	4313      	orrs	r3, r2
}
   28c80:	bf14      	ite	ne
   28c82:	2001      	movne	r0, #1
   28c84:	2000      	moveq	r0, #0
   28c86:	4770      	bx	lr
   28c88:	200155e0 	.word	0x200155e0

00028c8c <date_time_core_current_check>:
{
	date_time_last_update_uptime = 0;
}

int date_time_core_current_check(void)
{
   28c8c:	b510      	push	{r4, lr}
	if (date_time_last_update_uptime == 0) {
   28c8e:	4c10      	ldr	r4, [pc, #64]	; (28cd0 <date_time_core_current_check+0x44>)
   28c90:	e9d4 2300 	ldrd	r2, r3, [r4]
   28c94:	4313      	orrs	r3, r2
   28c96:	d016      	beq.n	28cc6 <date_time_core_current_check+0x3a>
	return z_impl_k_uptime_ticks();
   28c98:	f018 fa14 	bl	410c4 <z_impl_k_uptime_ticks>
   28c9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28ca0:	fba0 0302 	umull	r0, r3, r0, r2
   28ca4:	fb02 3101 	mla	r1, r2, r1, r3
		LOG_DBG("Date time never set");
		return -ENODATA;
	}

	if ((k_uptime_get() - date_time_last_update_uptime) >=
   28ca8:	e9d4 3200 	ldrd	r3, r2, [r4]
   28cac:	0bc0      	lsrs	r0, r0, #15
   28cae:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   28cb2:	1ac0      	subs	r0, r0, r3
   28cb4:	4b07      	ldr	r3, [pc, #28]	; (28cd4 <date_time_core_current_check+0x48>)
   28cb6:	ea4f 31d1 	mov.w	r1, r1, lsr #15
   28cba:	eb61 0102 	sbc.w	r1, r1, r2
   28cbe:	4298      	cmp	r0, r3
   28cc0:	f171 0300 	sbcs.w	r3, r1, #0
   28cc4:	db02      	blt.n	28ccc <date_time_core_current_check+0x40>
	    CONFIG_DATE_TIME_TOO_OLD_SECONDS * MSEC_PER_SEC) {
		LOG_DBG("Current date time too old");
		return -ENODATA;
   28cc6:	f06f 003c 	mvn.w	r0, #60	; 0x3c
	}

	return 0;
}
   28cca:	bd10      	pop	{r4, pc}
	return 0;
   28ccc:	2000      	movs	r0, #0
   28cce:	e7fc      	b.n	28cca <date_time_core_current_check+0x3e>
   28cd0:	200155e0 	.word	0x200155e0
   28cd4:	0036ee80 	.word	0x0036ee80

00028cd8 <date_time_core_store>:

void date_time_core_store(int64_t curr_time_ms, enum date_time_evt_type time_source)
{
   28cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   28cda:	b08f      	sub	sp, #60	; 0x3c
   28cdc:	4606      	mov	r6, r0
   28cde:	460d      	mov	r5, r1
   28ce0:	4617      	mov	r7, r2
	struct timespec tp = { 0 };
   28ce2:	2100      	movs	r1, #0
   28ce4:	2210      	movs	r2, #16
   28ce6:	4668      	mov	r0, sp
   28ce8:	f018 fb7c 	bl	413e4 <memset>
	struct tm ltm = { 0 };
   28cec:	2224      	movs	r2, #36	; 0x24
   28cee:	2100      	movs	r1, #0
   28cf0:	a805      	add	r0, sp, #20
   28cf2:	f018 fb77 	bl	413e4 <memset>
   28cf6:	f018 f9e5 	bl	410c4 <z_impl_k_uptime_ticks>
   28cfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28cfe:	fba0 3002 	umull	r3, r0, r0, r2
   28d02:	fb02 0401 	mla	r4, r2, r1, r0
	int ret;

	date_time_last_update_uptime = k_uptime_get();
   28d06:	f8df c074 	ldr.w	ip, [pc, #116]	; 28d7c <date_time_core_store+0xa4>
   28d0a:	0bdb      	lsrs	r3, r3, #15
   28d0c:	ea43 4344 	orr.w	r3, r3, r4, lsl #17

	date_time_core_schedule_update(false);
   28d10:	2000      	movs	r0, #0
   28d12:	0be4      	lsrs	r4, r4, #15
	date_time_last_update_uptime = k_uptime_get();
   28d14:	e9cc 3400 	strd	r3, r4, [ip]
	date_time_core_schedule_update(false);
   28d18:	f7ff ff60 	bl	28bdc <date_time_core_schedule_update>

	tp.tv_sec = curr_time_ms / 1000;
   28d1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   28d20:	2300      	movs	r3, #0
   28d22:	4630      	mov	r0, r6
   28d24:	4629      	mov	r1, r5
   28d26:	f7f4 f88f 	bl	1ce48 <__aeabi_ldivmod>
	tp.tv_nsec = (curr_time_ms % 1000) * 1000000;
   28d2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	tp.tv_sec = curr_time_ms / 1000;
   28d2e:	e9cd 0100 	strd	r0, r1, [sp]
	tp.tv_nsec = (curr_time_ms % 1000) * 1000000;
   28d32:	2300      	movs	r3, #0
   28d34:	4630      	mov	r0, r6
   28d36:	4629      	mov	r1, r5
   28d38:	f7f4 f886 	bl	1ce48 <__aeabi_ldivmod>
   28d3c:	4b0d      	ldr	r3, [pc, #52]	; (28d74 <date_time_core_store+0x9c>)

	ret = clock_settime(CLOCK_REALTIME, &tp);
   28d3e:	4669      	mov	r1, sp
	tp.tv_nsec = (curr_time_ms % 1000) * 1000000;
   28d40:	435a      	muls	r2, r3
	ret = clock_settime(CLOCK_REALTIME, &tp);
   28d42:	2001      	movs	r0, #1
	tp.tv_nsec = (curr_time_ms % 1000) * 1000000;
   28d44:	9202      	str	r2, [sp, #8]
	ret = clock_settime(CLOCK_REALTIME, &tp);
   28d46:	f7f5 f8ef 	bl	1df28 <clock_settime>
	if (ret != 0) {
   28d4a:	4602      	mov	r2, r0
   28d4c:	b140      	cbz	r0, 28d60 <date_time_core_store+0x88>
		LOG_ERR("Could not set system time, %d", ret);
   28d4e:	480a      	ldr	r0, [pc, #40]	; (28d78 <date_time_core_store+0xa0>)
   28d50:	2145      	movs	r1, #69	; 0x45
   28d52:	f013 fead 	bl	3cab0 <z_log_minimal_printk>
		date_time_core_notify_event(DATE_TIME_NOT_OBTAINED);
   28d56:	2003      	movs	r0, #3

#if defined(CONFIG_DATE_TIME_MODEM)
	date_time_modem_store(&ltm);
#endif

	date_time_core_notify_event(time_source);
   28d58:	f7ff ff12 	bl	28b80 <date_time_core_notify_event>
}
   28d5c:	b00f      	add	sp, #60	; 0x3c
   28d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	gmtime_r(&tp.tv_sec, &ltm);
   28d60:	a905      	add	r1, sp, #20
   28d62:	4668      	mov	r0, sp
   28d64:	f010 fe6e 	bl	39a44 <gmtime_r>
	date_time_modem_store(&ltm);
   28d68:	a805      	add	r0, sp, #20
   28d6a:	f000 f989 	bl	29080 <date_time_modem_store>
	date_time_core_notify_event(time_source);
   28d6e:	4638      	mov	r0, r7
   28d70:	e7f2      	b.n	28d58 <date_time_core_store+0x80>
   28d72:	bf00      	nop
   28d74:	000f4240 	.word	0x000f4240
   28d78:	0004661f 	.word	0x0004661f
   28d7c:	200155e0 	.word	0x200155e0

00028d80 <date_time_update_thread>:
{
   28d80:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		int64_t date_time_ms_modem = 0;
   28d82:	2400      	movs	r4, #0
   28d84:	2500      	movs	r5, #0
	return z_impl_k_sem_take(sem, timeout);
   28d86:	4e16      	ldr	r6, [pc, #88]	; (28de0 <date_time_update_thread+0x60>)
   28d88:	f04f 32ff 	mov.w	r2, #4294967295
   28d8c:	f04f 33ff 	mov.w	r3, #4294967295
   28d90:	4630      	mov	r0, r6
   28d92:	f00e f81d 	bl	36dd0 <z_impl_k_sem_take>
		err = date_time_core_current_check();
   28d96:	f7ff ff79 	bl	28c8c <date_time_core_current_check>
		if (err == 0) {
   28d9a:	b930      	cbnz	r0, 28daa <date_time_update_thread+0x2a>
			date_time_core_schedule_update(true);
   28d9c:	2001      	movs	r0, #1
   28d9e:	f7ff ff1d 	bl	28bdc <date_time_core_schedule_update>
			date_time_core_notify_event(DATE_TIME_EVT_TYPE_PREVIOUS);
   28da2:	20ff      	movs	r0, #255	; 0xff
		date_time_core_notify_event(DATE_TIME_NOT_OBTAINED);
   28da4:	f7ff feec 	bl	28b80 <date_time_core_notify_event>
   28da8:	e7ee      	b.n	28d88 <date_time_update_thread+0x8>
		err = date_time_modem_get(&date_time_ms_modem);
   28daa:	4668      	mov	r0, sp
		int64_t date_time_ms_modem = 0;
   28dac:	e9cd 4500 	strd	r4, r5, [sp]
		err = date_time_modem_get(&date_time_ms_modem);
   28db0:	f000 f92c 	bl	2900c <date_time_modem_get>
		if (err == 0) {
   28db4:	4602      	mov	r2, r0
   28db6:	b920      	cbnz	r0, 28dc2 <date_time_update_thread+0x42>
			date_time_core_store(date_time_ms_modem, DATE_TIME_OBTAINED_MODEM);
   28db8:	e9dd 0100 	ldrd	r0, r1, [sp]
			date_time_core_store(date_time_ms_ntp, DATE_TIME_OBTAINED_NTP);
   28dbc:	f7ff ff8c 	bl	28cd8 <date_time_core_store>
			continue;
   28dc0:	e7e2      	b.n	28d88 <date_time_update_thread+0x8>
		err = date_time_ntp_get(&date_time_ms_ntp);
   28dc2:	a802      	add	r0, sp, #8
		int64_t date_time_ms_ntp = 0;
   28dc4:	e9cd 4502 	strd	r4, r5, [sp, #8]
		err = date_time_ntp_get(&date_time_ms_ntp);
   28dc8:	f000 f80c 	bl	28de4 <date_time_ntp_get>
		if (err == 0) {
   28dcc:	b918      	cbnz	r0, 28dd6 <date_time_update_thread+0x56>
			date_time_core_store(date_time_ms_ntp, DATE_TIME_OBTAINED_NTP);
   28dce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   28dd2:	2201      	movs	r2, #1
   28dd4:	e7f2      	b.n	28dbc <date_time_update_thread+0x3c>
		date_time_core_schedule_update(true);
   28dd6:	2001      	movs	r0, #1
   28dd8:	f7ff ff00 	bl	28bdc <date_time_core_schedule_update>
		date_time_core_notify_event(DATE_TIME_NOT_OBTAINED);
   28ddc:	2003      	movs	r0, #3
   28dde:	e7e1      	b.n	28da4 <date_time_update_thread+0x24>
   28de0:	200150c0 	.word	0x200150c0

00028de4 <date_time_ntp_get>:
	return false;
}
#endif /* defined(CONFIG_LTE_LINK_CONTROL) */

int date_time_ntp_get(int64_t *date_time_ms)
{
   28de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28de8:	b09a      	sub	sp, #104	; 0x68
   28dea:	4606      	mov	r6, r0
	err = lte_lc_nw_reg_status_get(&reg_status);
   28dec:	a806      	add	r0, sp, #24
   28dee:	f7fe fa87 	bl	27300 <lte_lc_nw_reg_status_get>
	if (err) {
   28df2:	4605      	mov	r5, r0
   28df4:	b138      	cbz	r0, 28e06 <date_time_ntp_get+0x22>
		LOG_WRN("Failed getting LTE network registration status, error: %d", err);
   28df6:	4602      	mov	r2, r0
   28df8:	2157      	movs	r1, #87	; 0x57
   28dfa:	4832      	ldr	r0, [pc, #200]	; (28ec4 <date_time_ntp_get+0xe0>)
   28dfc:	f013 fe58 	bl	3cab0 <z_log_minimal_printk>
		return 0;
	}

	LOG_WRN("Did not get time from any NTP server");

	return -ENODATA;
   28e00:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   28e04:	e04d      	b.n	28ea2 <date_time_ntp_get+0xbe>
	if (reg_status == LTE_LC_NW_REG_REGISTERED_EMERGENCY ||
   28e06:	f89d 3018 	ldrb.w	r3, [sp, #24]
   28e0a:	2b08      	cmp	r3, #8
   28e0c:	d003      	beq.n	28e16 <date_time_ntp_get+0x32>
   28e0e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   28e12:	2b01      	cmp	r3, #1
   28e14:	d1f4      	bne.n	28e00 <date_time_ntp_get+0x1c>
	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   28e16:	4f2c      	ldr	r7, [pc, #176]	; (28ec8 <date_time_ntp_get+0xe4>)

static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
   28e18:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 28edc <date_time_ntp_get+0xf8>
	err = sntp_query(&sntp_ctx, timeout, time);
   28e1c:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 28ed8 <date_time_ntp_get+0xf4>
		LOG_WRN("sntp_query, error: %d", err);
   28e20:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 28ee0 <date_time_ntp_get+0xfc>
	struct addrinfo hints = {
   28e24:	2250      	movs	r2, #80	; 0x50
   28e26:	2100      	movs	r1, #0
   28e28:	a806      	add	r0, sp, #24
		err =  sntp_time_request(servers[i],
   28e2a:	f857 4b04 	ldr.w	r4, [r7], #4
	struct addrinfo hints = {
   28e2e:	f018 fad9 	bl	413e4 <memset>
   28e32:	f44f 6380 	mov.w	r3, #1024	; 0x400
   28e36:	aa06      	add	r2, sp, #24
   28e38:	9307      	str	r3, [sp, #28]
   28e3a:	4641      	mov	r1, r8
   28e3c:	466b      	mov	r3, sp
   28e3e:	4620      	mov	r0, r4
   28e40:	f014 f968 	bl	3d114 <zsock_getaddrinfo>
	if (err) {
   28e44:	4602      	mov	r2, r0
   28e46:	b160      	cbz	r0, 28e62 <date_time_ntp_get+0x7e>
		LOG_WRN("getaddrinfo, error: %d", err);
   28e48:	2157      	movs	r1, #87	; 0x57
   28e4a:	4820      	ldr	r0, [pc, #128]	; (28ecc <date_time_ntp_get+0xe8>)
   28e4c:	f013 fe30 	bl	3cab0 <z_log_minimal_printk>
	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   28e50:	2d01      	cmp	r5, #1
   28e52:	d104      	bne.n	28e5e <date_time_ntp_get+0x7a>
	LOG_WRN("Did not get time from any NTP server");
   28e54:	2157      	movs	r1, #87	; 0x57
   28e56:	481e      	ldr	r0, [pc, #120]	; (28ed0 <date_time_ntp_get+0xec>)
   28e58:	f013 fe2a 	bl	3cab0 <z_log_minimal_printk>
   28e5c:	e7d0      	b.n	28e00 <date_time_ntp_get+0x1c>
   28e5e:	2501      	movs	r5, #1
   28e60:	e7e0      	b.n	28e24 <date_time_ntp_get+0x40>
	err = sntp_init(&sntp_ctx, addrinfo->ai_addr, addrinfo->ai_addrlen);
   28e62:	9b00      	ldr	r3, [sp, #0]
   28e64:	a801      	add	r0, sp, #4
   28e66:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   28e6a:	f014 f91f 	bl	3d0ac <sntp_init>
	if (err) {
   28e6e:	4604      	mov	r4, r0
   28e70:	b1d8      	cbz	r0, 28eaa <date_time_ntp_get+0xc6>
		LOG_WRN("sntp_init, error: %d", err);
   28e72:	2157      	movs	r1, #87	; 0x57
   28e74:	4602      	mov	r2, r0
   28e76:	4817      	ldr	r0, [pc, #92]	; (28ed4 <date_time_ntp_get+0xf0>)
		LOG_WRN("sntp_query, error: %d", err);
   28e78:	f013 fe1a 	bl	3cab0 <z_log_minimal_printk>
}

static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
   28e7c:	9800      	ldr	r0, [sp, #0]
   28e7e:	f014 f94b 	bl	3d118 <zsock_freeaddrinfo>
	sntp_close(&sntp_ctx);
   28e82:	a801      	add	r0, sp, #4
   28e84:	f014 f941 	bl	3d10a <sntp_close>
		if (err) {
   28e88:	2c00      	cmp	r4, #0
   28e8a:	d1e1      	bne.n	28e50 <date_time_ntp_get+0x6c>
		*date_time_ms = (int64_t)sntp_time.seconds * 1000;
   28e8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   28e90:	4811      	ldr	r0, [pc, #68]	; (28ed8 <date_time_ntp_get+0xf4>)
   28e92:	6803      	ldr	r3, [r0, #0]
   28e94:	6845      	ldr	r5, [r0, #4]
   28e96:	fba3 3201 	umull	r3, r2, r3, r1
   28e9a:	fb01 2205 	mla	r2, r1, r5, r2
   28e9e:	e9c6 3200 	strd	r3, r2, [r6]
}
   28ea2:	4620      	mov	r0, r4
   28ea4:	b01a      	add	sp, #104	; 0x68
   28ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	err = sntp_query(&sntp_ctx, timeout, time);
   28eaa:	464a      	mov	r2, r9
   28eac:	f241 3188 	movw	r1, #5000	; 0x1388
   28eb0:	a801      	add	r0, sp, #4
   28eb2:	f7f8 fc51 	bl	21758 <sntp_query>
	if (err) {
   28eb6:	4604      	mov	r4, r0
   28eb8:	2800      	cmp	r0, #0
   28eba:	d0df      	beq.n	28e7c <date_time_ntp_get+0x98>
		LOG_WRN("sntp_query, error: %d", err);
   28ebc:	4602      	mov	r2, r0
   28ebe:	2157      	movs	r1, #87	; 0x57
   28ec0:	4650      	mov	r0, sl
   28ec2:	e7d9      	b.n	28e78 <date_time_ntp_get+0x94>
   28ec4:	0004664e 	.word	0x0004664e
   28ec8:	00042e5c 	.word	0x00042e5c
   28ecc:	00046691 	.word	0x00046691
   28ed0:	000466e2 	.word	0x000466e2
   28ed4:	000466ad 	.word	0x000466ad
   28ed8:	200155e8 	.word	0x200155e8
   28edc:	0004668d 	.word	0x0004668d
   28ee0:	000466c7 	.word	0x000466c7

00028ee4 <date_time_at_xtime_handler>:
	/* 4 MSBs represent decimal that should be added as is. */
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
}

static void date_time_at_xtime_handler(const char *notif)
{
   28ee4:	b530      	push	{r4, r5, lr}
	uint8_t time_buf[6];
	size_t time_buf_len;
	char *time_str_start;
	int err;

	if (notif == NULL) {
   28ee6:	4604      	mov	r4, r0
{
   28ee8:	b08d      	sub	sp, #52	; 0x34
	if (notif == NULL) {
   28eea:	2800      	cmp	r0, #0
   28eec:	f000 8082 	beq.w	28ff4 <date_time_at_xtime_handler+0x110>
		return;
	}
	modem_valid_network_time = true;
   28ef0:	2201      	movs	r2, #1
   28ef2:	4b41      	ldr	r3, [pc, #260]	; (28ff8 <date_time_at_xtime_handler+0x114>)
   28ef4:	701a      	strb	r2, [r3, #0]

	/* Check if current time is valid */
	err = date_time_core_current_check();
   28ef6:	f7ff fec9 	bl	28c8c <date_time_core_current_check>
	if (err == 0) {
   28efa:	2800      	cmp	r0, #0
   28efc:	d07a      	beq.n	28ff4 <date_time_at_xtime_handler+0x110>
	 *                 and received from network.
	 * Examples of modem time response:
	 * %XTIME: "08","81109251714208","01"
	 * %XTIME: ,"81109251714208",
	 */
	time_str_start = strchr(notif, ',');
   28efe:	212c      	movs	r1, #44	; 0x2c
   28f00:	4620      	mov	r0, r4
   28f02:	f018 fc2d 	bl	41760 <strchr>
	if (time_str_start == NULL) {
   28f06:	4605      	mov	r5, r0
   28f08:	b938      	cbnz	r0, 28f1a <date_time_at_xtime_handler+0x36>
		LOG_ERR("%%XTIME notification doesn't contain ',': %s", notif);
   28f0a:	4622      	mov	r2, r4
   28f0c:	2145      	movs	r1, #69	; 0x45
   28f0e:	483b      	ldr	r0, [pc, #236]	; (28ffc <date_time_at_xtime_handler+0x118>)
	date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;

	LOG_DBG("Time obtained from cellular network (XTIME notification)");

	date_time_core_store(date_time_ms, DATE_TIME_OBTAINED_MODEM);
}
   28f10:	b00d      	add	sp, #52	; 0x34
   28f12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		LOG_ERR("%%XTIME notification doesn't contain '\"' after ',': %s", notif);
   28f16:	f013 bdcb 	b.w	3cab0 <z_log_minimal_printk>
	if (strlen(time_str_start) < 17) {
   28f1a:	f7f4 f992 	bl	1d242 <strlen>
   28f1e:	2810      	cmp	r0, #16
   28f20:	d803      	bhi.n	28f2a <date_time_at_xtime_handler+0x46>
		LOG_ERR("%%XTIME notification too short: %s", notif);
   28f22:	4622      	mov	r2, r4
   28f24:	2145      	movs	r1, #69	; 0x45
   28f26:	4836      	ldr	r0, [pc, #216]	; (29000 <date_time_at_xtime_handler+0x11c>)
   28f28:	e7f2      	b.n	28f10 <date_time_at_xtime_handler+0x2c>
	if (*(time_str_start + 1) != '"') {
   28f2a:	786b      	ldrb	r3, [r5, #1]
   28f2c:	2b22      	cmp	r3, #34	; 0x22
   28f2e:	d003      	beq.n	28f38 <date_time_at_xtime_handler+0x54>
		LOG_ERR("%%XTIME notification doesn't contain '\"' after ',': %s", notif);
   28f30:	4622      	mov	r2, r4
   28f32:	2145      	movs	r1, #69	; 0x45
   28f34:	4833      	ldr	r0, [pc, #204]	; (29004 <date_time_at_xtime_handler+0x120>)
   28f36:	e7eb      	b.n	28f10 <date_time_at_xtime_handler+0x2c>
	time_buf_len = hex2bin(time_str_start, 12, time_buf, sizeof(time_buf));
   28f38:	aa01      	add	r2, sp, #4
   28f3a:	2306      	movs	r3, #6
   28f3c:	210c      	movs	r1, #12
   28f3e:	1ca8      	adds	r0, r5, #2
   28f40:	f013 fb38 	bl	3c5b4 <hex2bin>
	if (time_buf_len < sizeof(time_buf)) {
   28f44:	2805      	cmp	r0, #5
	time_buf_len = hex2bin(time_str_start, 12, time_buf, sizeof(time_buf));
   28f46:	4602      	mov	r2, r0
	if (time_buf_len < sizeof(time_buf)) {
   28f48:	d804      	bhi.n	28f54 <date_time_at_xtime_handler+0x70>
		LOG_ERR("%%XTIME notification decoding failed (ret=%d): %s", time_buf_len, notif);
   28f4a:	4623      	mov	r3, r4
   28f4c:	2145      	movs	r1, #69	; 0x45
   28f4e:	482e      	ldr	r0, [pc, #184]	; (29008 <date_time_at_xtime_handler+0x124>)
   28f50:	f013 fdae 	bl	3cab0 <z_log_minimal_printk>
	date_time.tm_mday = semioctet_to_dec(time_buf[2]);
   28f54:	f89d 1006 	ldrb.w	r1, [sp, #6]
	date_time.tm_year = semioctet_to_dec(time_buf[0]);
   28f58:	f89d 2004 	ldrb.w	r2, [sp, #4]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   28f5c:	f001 000f 	and.w	r0, r1, #15
   28f60:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   28f64:	0909      	lsrs	r1, r1, #4
   28f66:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	date_time.tm_mday = semioctet_to_dec(time_buf[2]);
   28f6a:	b2c9      	uxtb	r1, r1
   28f6c:	9106      	str	r1, [sp, #24]
	date_time.tm_hour = semioctet_to_dec(time_buf[3]);
   28f6e:	f89d 1007 	ldrb.w	r1, [sp, #7]
	date_time.tm_mon  = semioctet_to_dec(time_buf[1]);
   28f72:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   28f76:	f001 000f 	and.w	r0, r1, #15
   28f7a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   28f7e:	0909      	lsrs	r1, r1, #4
   28f80:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	date_time.tm_hour = semioctet_to_dec(time_buf[3]);
   28f84:	b2c9      	uxtb	r1, r1
   28f86:	9105      	str	r1, [sp, #20]
	date_time.tm_min  = semioctet_to_dec(time_buf[4]);
   28f88:	f89d 1008 	ldrb.w	r1, [sp, #8]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   28f8c:	f001 000f 	and.w	r0, r1, #15
   28f90:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   28f94:	0909      	lsrs	r1, r1, #4
   28f96:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	date_time.tm_min  = semioctet_to_dec(time_buf[4]);
   28f9a:	b2c9      	uxtb	r1, r1
   28f9c:	9104      	str	r1, [sp, #16]
	date_time.tm_sec  = semioctet_to_dec(time_buf[5]);
   28f9e:	f89d 1009 	ldrb.w	r1, [sp, #9]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   28fa2:	f001 000f 	and.w	r0, r1, #15
   28fa6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   28faa:	0909      	lsrs	r1, r1, #4
   28fac:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	date_time.tm_sec  = semioctet_to_dec(time_buf[5]);
   28fb0:	b2c9      	uxtb	r1, r1
   28fb2:	9103      	str	r1, [sp, #12]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   28fb4:	f002 010f 	and.w	r1, r2, #15
   28fb8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   28fbc:	0912      	lsrs	r2, r2, #4
   28fbe:	eb02 0241 	add.w	r2, r2, r1, lsl #1
	date_time.tm_year = semioctet_to_dec(time_buf[0]);
   28fc2:	b2d2      	uxtb	r2, r2
	date_time.tm_year = date_time.tm_year + 2000 - 1900;
   28fc4:	3264      	adds	r2, #100	; 0x64
   28fc6:	9208      	str	r2, [sp, #32]
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   28fc8:	f003 020f 	and.w	r2, r3, #15
   28fcc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   28fd0:	091b      	lsrs	r3, r3, #4
   28fd2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	date_time.tm_mon  = semioctet_to_dec(time_buf[1]);
   28fd6:	b2db      	uxtb	r3, r3
	date_time.tm_mon = date_time.tm_mon - 1;
   28fd8:	3b01      	subs	r3, #1
	date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;
   28fda:	a803      	add	r0, sp, #12
	date_time.tm_mon = date_time.tm_mon - 1;
   28fdc:	9307      	str	r3, [sp, #28]
	date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;
   28fde:	f7f8 f885 	bl	210ec <timeutil_timegm64>
   28fe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   28fe6:	fba0 0403 	umull	r0, r4, r0, r3
	date_time_core_store(date_time_ms, DATE_TIME_OBTAINED_MODEM);
   28fea:	2200      	movs	r2, #0
   28fec:	fb03 4101 	mla	r1, r3, r1, r4
   28ff0:	f7ff fe72 	bl	28cd8 <date_time_core_store>
}
   28ff4:	b00d      	add	sp, #52	; 0x34
   28ff6:	bd30      	pop	{r4, r5, pc}
   28ff8:	2001c704 	.word	0x2001c704
   28ffc:	00046727 	.word	0x00046727
   29000:	00046759 	.word	0x00046759
   29004:	00046781 	.word	0x00046781
   29008:	000467bd 	.word	0x000467bd

0002900c <date_time_modem_get>:
{
   2900c:	b530      	push	{r4, r5, lr}
	if (!modem_valid_network_time) {
   2900e:	4b18      	ldr	r3, [pc, #96]	; (29070 <date_time_modem_get+0x64>)
{
   29010:	4604      	mov	r4, r0
	if (!modem_valid_network_time) {
   29012:	781b      	ldrb	r3, [r3, #0]
{
   29014:	b08f      	sub	sp, #60	; 0x3c
	if (!modem_valid_network_time) {
   29016:	b1a3      	cbz	r3, 29042 <date_time_modem_get+0x36>
	rc = nrf_modem_at_scanf("AT+CCLK?",
   29018:	ab06      	add	r3, sp, #24
   2901a:	9302      	str	r3, [sp, #8]
   2901c:	ab07      	add	r3, sp, #28
   2901e:	9301      	str	r3, [sp, #4]
   29020:	ad05      	add	r5, sp, #20
   29022:	ab08      	add	r3, sp, #32
   29024:	9300      	str	r3, [sp, #0]
   29026:	aa0a      	add	r2, sp, #40	; 0x28
   29028:	4912      	ldr	r1, [pc, #72]	; (29074 <date_time_modem_get+0x68>)
   2902a:	4813      	ldr	r0, [pc, #76]	; (29078 <date_time_modem_get+0x6c>)
   2902c:	9503      	str	r5, [sp, #12]
   2902e:	ab09      	add	r3, sp, #36	; 0x24
   29030:	f00c f87c 	bl	3512c <nrf_modem_at_scanf>
	if (rc != 6) {
   29034:	2806      	cmp	r0, #6
	rc = nrf_modem_at_scanf("AT+CCLK?",
   29036:	4602      	mov	r2, r0
	if (rc != 6) {
   29038:	d006      	beq.n	29048 <date_time_modem_get+0x3c>
		LOG_WRN("Did not get time from cellular network (error: %d). "
   2903a:	2157      	movs	r1, #87	; 0x57
   2903c:	480f      	ldr	r0, [pc, #60]	; (2907c <date_time_modem_get+0x70>)
   2903e:	f013 fd37 	bl	3cab0 <z_log_minimal_printk>
		return -ENODATA;
   29042:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   29046:	e011      	b.n	2906c <date_time_modem_get+0x60>
	date_time.tm_year = date_time.tm_year + 2000 - 1900;
   29048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	*date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;
   2904a:	4628      	mov	r0, r5
	date_time.tm_year = date_time.tm_year + 2000 - 1900;
   2904c:	3364      	adds	r3, #100	; 0x64
   2904e:	930a      	str	r3, [sp, #40]	; 0x28
	date_time.tm_mon = date_time.tm_mon - 1;
   29050:	9b09      	ldr	r3, [sp, #36]	; 0x24
   29052:	3b01      	subs	r3, #1
   29054:	9309      	str	r3, [sp, #36]	; 0x24
	*date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;
   29056:	f7f8 f849 	bl	210ec <timeutil_timegm64>
   2905a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2905e:	fba0 3002 	umull	r3, r0, r0, r2
   29062:	fb02 0001 	mla	r0, r2, r1, r0
   29066:	e9c4 3000 	strd	r3, r0, [r4]
	return 0;
   2906a:	2000      	movs	r0, #0
}
   2906c:	b00f      	add	sp, #60	; 0x3c
   2906e:	bd30      	pop	{r4, r5, pc}
   29070:	2001c704 	.word	0x2001c704
   29074:	000467f4 	.word	0x000467f4
   29078:	0004603f 	.word	0x0004603f
   2907c:	0004680e 	.word	0x0004680e

00029080 <date_time_modem_store>:
#endif /* defined(CONFIG_DATE_TIME_AUTO_UPDATE) */

void date_time_modem_store(struct tm *ltm)
{
   29080:	b530      	push	{r4, r5, lr}
	int ret;

	/* Set modem time if modem has not got it from the LTE network */
	if (!modem_valid_network_time) {
   29082:	4b11      	ldr	r3, [pc, #68]	; (290c8 <date_time_modem_store+0x48>)
{
   29084:	b085      	sub	sp, #20
	if (!modem_valid_network_time) {
   29086:	781b      	ldrb	r3, [r3, #0]
   29088:	b9db      	cbnz	r3, 290c2 <date_time_modem_store+0x42>
		/* Time zone is not known and it's mandatory so setting to zero.
		 * POSIX year is relative to 1900 which doesn't affect as last two digits are taken
		 * with modulo 100.
		 * POSIX month is in range 0-11 so adding 1.
		 */
		ret = nrf_modem_at_printf("AT+CCLK=\"%02u/%02u/%02u,%02u:%02u:%02u+%02u\"",
   2908a:	e9d0 2104 	ldrd	r2, r1, [r0, #16]
   2908e:	2464      	movs	r4, #100	; 0x64
   29090:	fb91 f5f4 	sdiv	r5, r1, r4
   29094:	9303      	str	r3, [sp, #12]
   29096:	6803      	ldr	r3, [r0, #0]
   29098:	3201      	adds	r2, #1
   2909a:	9302      	str	r3, [sp, #8]
   2909c:	6843      	ldr	r3, [r0, #4]
   2909e:	fb04 1115 	mls	r1, r4, r5, r1
   290a2:	9301      	str	r3, [sp, #4]
   290a4:	6883      	ldr	r3, [r0, #8]
   290a6:	9300      	str	r3, [sp, #0]
   290a8:	68c3      	ldr	r3, [r0, #12]
   290aa:	4808      	ldr	r0, [pc, #32]	; (290cc <date_time_modem_store+0x4c>)
   290ac:	f00b ffac 	bl	35008 <nrf_modem_at_printf>
			ltm->tm_year % 100, ltm->tm_mon + 1, ltm->tm_mday,
			ltm->tm_hour, ltm->tm_min, ltm->tm_sec, 0);
		if (ret) {
   290b0:	4602      	mov	r2, r0
   290b2:	b130      	cbz	r0, 290c2 <date_time_modem_store+0x42>
			LOG_ERR("Setting modem time failed, %d", ret);
   290b4:	2145      	movs	r1, #69	; 0x45
   290b6:	4806      	ldr	r0, [pc, #24]	; (290d0 <date_time_modem_store+0x50>)
			return;
		}

		LOG_DBG("Modem time updated");
	}
}
   290b8:	b005      	add	sp, #20
   290ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			LOG_ERR("Setting modem time failed, %d", ret);
   290be:	f013 bcf7 	b.w	3cab0 <z_log_minimal_printk>
}
   290c2:	b005      	add	sp, #20
   290c4:	bd30      	pop	{r4, r5, pc}
   290c6:	bf00      	nop
   290c8:	2001c704 	.word	0x2001c704
   290cc:	000468a3 	.word	0x000468a3
   290d0:	000468d0 	.word	0x000468d0

000290d4 <date_time_modem_xtime_subscribe>:

void date_time_modem_xtime_subscribe(void)
{
   290d4:	b508      	push	{r3, lr}
	/* Subscribe to modem time notifications */
	int err = nrf_modem_at_printf("AT%%XTIME=1");
   290d6:	4806      	ldr	r0, [pc, #24]	; (290f0 <date_time_modem_xtime_subscribe+0x1c>)
   290d8:	f00b ff96 	bl	35008 <nrf_modem_at_printf>

	if (err) {
   290dc:	4602      	mov	r2, r0
   290de:	b128      	cbz	r0, 290ec <date_time_modem_xtime_subscribe+0x18>
		LOG_ERR("Subscribing to modem AT%%XTIME notifications failed, err=%d", err);
	}
}
   290e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("Subscribing to modem AT%%XTIME notifications failed, err=%d", err);
   290e4:	2145      	movs	r1, #69	; 0x45
   290e6:	4803      	ldr	r0, [pc, #12]	; (290f4 <date_time_modem_xtime_subscribe+0x20>)
   290e8:	f013 bce2 	b.w	3cab0 <z_log_minimal_printk>
}
   290ec:	bd08      	pop	{r3, pc}
   290ee:	bf00      	nop
   290f0:	000468f3 	.word	0x000468f3
   290f4:	000468ff 	.word	0x000468ff

000290f8 <multicell_location_get>:


int multicell_location_get(enum multicell_service service,
			   const struct lte_lc_cells_info *cell_data,
			   struct multicell_location *location)
{
   290f8:	b570      	push	{r4, r5, r6, lr}
   290fa:	4606      	mov	r6, r0
   290fc:	4615      	mov	r5, r2
	if ((cell_data == NULL) || (location == NULL)) {
   290fe:	460c      	mov	r4, r1
   29100:	b1f1      	cbz	r1, 29140 <multicell_location_get+0x48>
   29102:	b1ea      	cbz	r2, 29140 <multicell_location_get+0x48>
		return -EINVAL;
	}

	if (cell_data->current_cell.id == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   29104:	688b      	ldr	r3, [r1, #8]
   29106:	3301      	adds	r3, #1
   29108:	d106      	bne.n	29118 <multicell_location_get+0x20>
		LOG_WRN("Invalid cell ID, device may not be connected to a network");
   2910a:	480f      	ldr	r0, [pc, #60]	; (29148 <multicell_location_get+0x50>)
   2910c:	2157      	movs	r1, #87	; 0x57
   2910e:	f013 fccf 	bl	3cab0 <z_log_minimal_printk>
		return -ENOENT;
   29112:	f06f 0001 	mvn.w	r0, #1
			cell_data->ncells_count, CONFIG_MULTICELL_LOCATION_MAX_NEIGHBORS);
		LOG_WRN("Increase CONFIG_MULTICELL_LOCATION_MAX_NEIGHBORS to use more cells");
	}

	return location_service_get_cell_location(service, cell_data, location);
}
   29116:	bd70      	pop	{r4, r5, r6, pc}
	if (cell_data->ncells_count > CONFIG_MULTICELL_LOCATION_MAX_NEIGHBORS) {
   29118:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
   2911c:	2a08      	cmp	r2, #8
   2911e:	d908      	bls.n	29132 <multicell_location_get+0x3a>
		LOG_WRN("Found %d neighbor cells, but %d cells will be used in location request",
   29120:	2157      	movs	r1, #87	; 0x57
   29122:	480a      	ldr	r0, [pc, #40]	; (2914c <multicell_location_get+0x54>)
   29124:	2308      	movs	r3, #8
   29126:	f013 fcc3 	bl	3cab0 <z_log_minimal_printk>
		LOG_WRN("Increase CONFIG_MULTICELL_LOCATION_MAX_NEIGHBORS to use more cells");
   2912a:	2157      	movs	r1, #87	; 0x57
   2912c:	4808      	ldr	r0, [pc, #32]	; (29150 <multicell_location_get+0x58>)
   2912e:	f013 fcbf 	bl	3cab0 <z_log_minimal_printk>
	return location_service_get_cell_location(service, cell_data, location);
   29132:	462a      	mov	r2, r5
   29134:	4621      	mov	r1, r4
   29136:	4630      	mov	r0, r6
}
   29138:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return location_service_get_cell_location(service, cell_data, location);
   2913c:	f000 b858 	b.w	291f0 <location_service_get_cell_location>
		return -EINVAL;
   29140:	f06f 0015 	mvn.w	r0, #21
   29144:	e7e7      	b.n	29116 <multicell_location_get+0x1e>
   29146:	bf00      	nop
   29148:	00046947 	.word	0x00046947
   2914c:	00046986 	.word	0x00046986
   29150:	000469d2 	.word	0x000469d2

00029154 <multicell_location_provision_certificate>:

	return 0;
}

int multicell_location_provision_certificate(bool overwrite)
{
   29154:	b573      	push	{r0, r1, r4, r5, r6, lr}
   29156:	4606      	mov	r6, r0
	int ret = -ENOTSUP;

#if defined(CONFIG_MULTICELL_LOCATION_SERVICE_NRF_CLOUD)
	ret = multicell_location_provision_service_certificate(
   29158:	2001      	movs	r0, #1
   2915a:	f016 f9fe 	bl	3f55a <location_service_get_certificate>
	if (certificate == NULL) {
   2915e:	4605      	mov	r5, r0
   29160:	b940      	cbnz	r0, 29174 <multicell_location_provision_certificate+0x20>
		LOG_ERR("No certificate was provided by the location service");
   29162:	2145      	movs	r1, #69	; 0x45
   29164:	481c      	ldr	r0, [pc, #112]	; (291d8 <multicell_location_provision_certificate+0x84>)
   29166:	f013 fca3 	bl	3cab0 <z_log_minimal_printk>
		return -EFAULT;
   2916a:	f06f 040d 	mvn.w	r4, #13
	if (ret) {
		return ret;
	}
#endif
	return ret;
}
   2916e:	4620      	mov	r0, r4
   29170:	b002      	add	sp, #8
   29172:	bd70      	pop	{r4, r5, r6, pc}
	err = modem_key_mgmt_exists(sec_tag, MODEM_KEY_MGMT_CRED_TYPE_CA_CHAIN, &exists);
   29174:	2100      	movs	r1, #0
   29176:	4819      	ldr	r0, [pc, #100]	; (291dc <multicell_location_provision_certificate+0x88>)
   29178:	f10d 0207 	add.w	r2, sp, #7
   2917c:	f7ff fca8 	bl	28ad0 <modem_key_mgmt_exists>
	if (err) {
   29180:	4604      	mov	r4, r0
   29182:	b128      	cbz	r0, 29190 <multicell_location_provision_certificate+0x3c>
		LOG_ERR("Failed to check for certificates err %d", err);
   29184:	2145      	movs	r1, #69	; 0x45
   29186:	4602      	mov	r2, r0
   29188:	4815      	ldr	r0, [pc, #84]	; (291e0 <multicell_location_provision_certificate+0x8c>)
		LOG_ERR("Failed to provision certificate, err %d", err);
   2918a:	f013 fc91 	bl	3cab0 <z_log_minimal_printk>
		return err;
   2918e:	e7ee      	b.n	2916e <multicell_location_provision_certificate+0x1a>
	if (exists && overwrite) {
   29190:	f89d 3007 	ldrb.w	r3, [sp, #7]
   29194:	b15b      	cbz	r3, 291ae <multicell_location_provision_certificate+0x5a>
   29196:	2e00      	cmp	r6, #0
   29198:	d0e9      	beq.n	2916e <multicell_location_provision_certificate+0x1a>
		err = modem_key_mgmt_delete(sec_tag, MODEM_KEY_MGMT_CRED_TYPE_CA_CHAIN);
   2919a:	4601      	mov	r1, r0
   2919c:	480f      	ldr	r0, [pc, #60]	; (291dc <multicell_location_provision_certificate+0x88>)
   2919e:	f7ff fc79 	bl	28a94 <modem_key_mgmt_delete>
		if (err) {
   291a2:	4602      	mov	r2, r0
   291a4:	b118      	cbz	r0, 291ae <multicell_location_provision_certificate+0x5a>
			LOG_ERR("Failed to delete existing certificate, err %d", err);
   291a6:	2145      	movs	r1, #69	; 0x45
   291a8:	480e      	ldr	r0, [pc, #56]	; (291e4 <multicell_location_provision_certificate+0x90>)
   291aa:	f013 fc81 	bl	3cab0 <z_log_minimal_printk>
	LOG_INF("Provisioning certificate");
   291ae:	2149      	movs	r1, #73	; 0x49
   291b0:	480d      	ldr	r0, [pc, #52]	; (291e8 <multicell_location_provision_certificate+0x94>)
   291b2:	f013 fc7d 	bl	3cab0 <z_log_minimal_printk>
	err = modem_key_mgmt_write(sec_tag,
   291b6:	4628      	mov	r0, r5
   291b8:	f7f4 f843 	bl	1d242 <strlen>
   291bc:	462a      	mov	r2, r5
   291be:	4603      	mov	r3, r0
   291c0:	2100      	movs	r1, #0
   291c2:	4806      	ldr	r0, [pc, #24]	; (291dc <multicell_location_provision_certificate+0x88>)
   291c4:	f7ff fc3e 	bl	28a44 <modem_key_mgmt_write>
	if (err) {
   291c8:	4604      	mov	r4, r0
   291ca:	2800      	cmp	r0, #0
   291cc:	d0cf      	beq.n	2916e <multicell_location_provision_certificate+0x1a>
		LOG_ERR("Failed to provision certificate, err %d", err);
   291ce:	4602      	mov	r2, r0
   291d0:	2145      	movs	r1, #69	; 0x45
   291d2:	4806      	ldr	r0, [pc, #24]	; (291ec <multicell_location_provision_certificate+0x98>)
   291d4:	e7d9      	b.n	2918a <multicell_location_provision_certificate+0x36>
   291d6:	bf00      	nop
   291d8:	00046a1a 	.word	0x00046a1a
   291dc:	01010001 	.word	0x01010001
   291e0:	00046a53 	.word	0x00046a53
   291e4:	00046a80 	.word	0x00046a80
   291e8:	00046ab3 	.word	0x00046ab3
   291ec:	00046ad1 	.word	0x00046ad1

000291f0 <location_service_get_cell_location>:

int location_service_get_cell_location(
	enum multicell_service service,
	const struct lte_lc_cells_info *cell_data,
	struct multicell_location *const location)
{
   291f0:	b410      	push	{r4}
   291f2:	4604      	mov	r4, r0
#if defined(CONFIG_MULTICELL_LOCATION_SERVICE_NRF_CLOUD)
	if (service == MULTICELL_SERVICE_NRF_CLOUD || service == MULTICELL_SERVICE_ANY) {
   291f4:	2c01      	cmp	r4, #1
{
   291f6:	4608      	mov	r0, r1
   291f8:	4613      	mov	r3, r2
	if (service == MULTICELL_SERVICE_NRF_CLOUD || service == MULTICELL_SERVICE_ANY) {
   291fa:	d806      	bhi.n	2920a <location_service_get_cell_location+0x1a>
		return location_service_get_cell_location_nrf_cloud(
   291fc:	f44f 7200 	mov.w	r2, #512	; 0x200
   29200:	4904      	ldr	r1, [pc, #16]	; (29214 <location_service_get_cell_location+0x24>)
			cell_data, recv_buf, sizeof(recv_buf), location);
	}
#endif
	/* We should never get here as at least one service must be enabled */
	return -ENOTSUP;
}
   29202:	f85d 4b04 	ldr.w	r4, [sp], #4
		return location_service_get_cell_location_nrf_cloud(
   29206:	f000 b835 	b.w	29274 <location_service_get_cell_location_nrf_cloud>
}
   2920a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2920e:	f85d 4b04 	ldr.w	r4, [sp], #4
   29212:	4770      	bx	lr
   29214:	2001c705 	.word	0x2001c705

00029218 <location_service_location_ready_cb>:
	return tls_certificate;
}

#if defined(CONFIG_NRF_CLOUD_MQTT)
static void location_service_location_ready_cb(const struct nrf_cloud_cell_pos_result *const result)
{
   29218:	b538      	push	{r3, r4, r5, lr}
	if ((result != NULL) && (result->err == NRF_CLOUD_ERROR_NONE)) {
   2921a:	4604      	mov	r4, r0
   2921c:	b1d8      	cbz	r0, 29256 <location_service_location_ready_cb+0x3e>
   2921e:	69c2      	ldr	r2, [r0, #28]
   29220:	b9aa      	cbnz	r2, 2924e <location_service_location_ready_cb+0x36>
		nrf_cloud_location.latitude = result->lat;
   29222:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   29226:	f7f3 fdbf 	bl	1cda8 <__aeabi_d2f>
   2922a:	4d0d      	ldr	r5, [pc, #52]	; (29260 <location_service_location_ready_cb+0x48>)
   2922c:	6028      	str	r0, [r5, #0]
		nrf_cloud_location.longitude = result->lon;
   2922e:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   29232:	f7f3 fdb9 	bl	1cda8 <__aeabi_d2f>
   29236:	6068      	str	r0, [r5, #4]
		nrf_cloud_location.accuracy = (double)result->unc;
   29238:	69a0      	ldr	r0, [r4, #24]
   2923a:	f7f3 fa43 	bl	1c6c4 <__aeabi_ui2d>
   2923e:	f7f3 fdb3 	bl	1cda8 <__aeabi_d2f>
   29242:	60a8      	str	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   29244:	4807      	ldr	r0, [pc, #28]	; (29264 <location_service_location_ready_cb+0x4c>)
		/* Reset the semaphore to unblock location_service_get_cell_location_nrf_cloud()
		 * and make it return an error.
		 */
		k_sem_reset(&location_ready);
	}
}
   29246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2924a:	f00d bd85 	b.w	36d58 <z_impl_k_sem_give>
			LOG_ERR("Unable to determine location from cellular data, error: %d",
   2924e:	2145      	movs	r1, #69	; 0x45
   29250:	4805      	ldr	r0, [pc, #20]	; (29268 <location_service_location_ready_cb+0x50>)
   29252:	f013 fc2d 	bl	3cab0 <z_log_minimal_printk>
}
   29256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_sem_reset(sem);
   2925a:	4802      	ldr	r0, [pc, #8]	; (29264 <location_service_location_ready_cb+0x4c>)
   2925c:	f00d be22 	b.w	36ea4 <z_impl_k_sem_reset>
   29260:	20019428 	.word	0x20019428
   29264:	20015090 	.word	0x20015090
   29268:	00046b11 	.word	0x00046b11

0002926c <location_service_get_certificate_nrf_cloud>:
}
   2926c:	4800      	ldr	r0, [pc, #0]	; (29270 <location_service_get_certificate_nrf_cloud+0x4>)
   2926e:	4770      	bx	lr
   29270:	00046c4e 	.word	0x00046c4e

00029274 <location_service_get_cell_location_nrf_cloud>:
int location_service_get_cell_location_nrf_cloud(
	const struct lte_lc_cells_info *cell_data,
	char * const rcv_buf,
	const size_t rcv_buf_len,
	struct multicell_location *const location)
{
   29274:	b538      	push	{r3, r4, r5, lr}
   29276:	4604      	mov	r4, r0
   29278:	461d      	mov	r5, r3
   2927a:	4819      	ldr	r0, [pc, #100]	; (292e0 <location_service_get_cell_location_nrf_cloud+0x6c>)
   2927c:	f00d fe12 	bl	36ea4 <z_impl_k_sem_reset>
	int err;

	k_sem_reset(&location_ready);

	LOG_DBG("Sending cellular positioning request (MQTT)");
	err = nrf_cloud_cell_pos_request(cell_data, true, location_service_location_ready_cb);
   29280:	4620      	mov	r0, r4
   29282:	2101      	movs	r1, #1
   29284:	4a17      	ldr	r2, [pc, #92]	; (292e4 <location_service_get_cell_location_nrf_cloud+0x70>)
   29286:	f016 fa43 	bl	3f710 <nrf_cloud_cell_pos_request>
	if (err == -EACCES) {
   2928a:	f110 0f0d 	cmn.w	r0, #13
	err = nrf_cloud_cell_pos_request(cell_data, true, location_service_location_ready_cb);
   2928e:	4604      	mov	r4, r0
	if (err == -EACCES) {
   29290:	d105      	bne.n	2929e <location_service_get_cell_location_nrf_cloud+0x2a>
		LOG_ERR("Cloud connection is not established");
   29292:	2145      	movs	r1, #69	; 0x45
   29294:	4814      	ldr	r0, [pc, #80]	; (292e8 <location_service_get_cell_location_nrf_cloud+0x74>)
   29296:	f013 fc0b 	bl	3cab0 <z_log_minimal_printk>
	}

	*location = nrf_cloud_location;

	return err;
}
   2929a:	4620      	mov	r0, r4
   2929c:	bd38      	pop	{r3, r4, r5, pc}
	} else if (err) {
   2929e:	b128      	cbz	r0, 292ac <location_service_get_cell_location_nrf_cloud+0x38>
		LOG_ERR("Failed to request cellular positioning data, error: %d", err);
   292a0:	4602      	mov	r2, r0
   292a2:	2145      	movs	r1, #69	; 0x45
   292a4:	4811      	ldr	r0, [pc, #68]	; (292ec <location_service_get_cell_location_nrf_cloud+0x78>)
   292a6:	f013 fc03 	bl	3cab0 <z_log_minimal_printk>
		return err;
   292aa:	e7f6      	b.n	2929a <location_service_get_cell_location_nrf_cloud+0x26>
	LOG_INF("Cellular positioning request sent");
   292ac:	2149      	movs	r1, #73	; 0x49
   292ae:	4810      	ldr	r0, [pc, #64]	; (292f0 <location_service_get_cell_location_nrf_cloud+0x7c>)
   292b0:	f013 fbfe 	bl	3cab0 <z_log_minimal_printk>
	return z_impl_k_sem_take(sem, timeout);
   292b4:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   292b8:	2300      	movs	r3, #0
   292ba:	4809      	ldr	r0, [pc, #36]	; (292e0 <location_service_get_cell_location_nrf_cloud+0x6c>)
   292bc:	f00d fd88 	bl	36dd0 <z_impl_k_sem_take>
	if (k_sem_take(&location_ready, K_SECONDS(20)) == -EAGAIN) {
   292c0:	300b      	adds	r0, #11
   292c2:	d106      	bne.n	292d2 <location_service_get_cell_location_nrf_cloud+0x5e>
		LOG_ERR("Cellular positioning data request timed out or "
   292c4:	2145      	movs	r1, #69	; 0x45
   292c6:	480b      	ldr	r0, [pc, #44]	; (292f4 <location_service_get_cell_location_nrf_cloud+0x80>)
   292c8:	f013 fbf2 	bl	3cab0 <z_log_minimal_printk>
		return -ETIMEDOUT;
   292cc:	f06f 0473 	mvn.w	r4, #115	; 0x73
   292d0:	e7e3      	b.n	2929a <location_service_get_cell_location_nrf_cloud+0x26>
	*location = nrf_cloud_location;
   292d2:	4b09      	ldr	r3, [pc, #36]	; (292f8 <location_service_get_cell_location_nrf_cloud+0x84>)
   292d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   292d8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	return err;
   292dc:	e7dd      	b.n	2929a <location_service_get_cell_location_nrf_cloud+0x26>
   292de:	bf00      	nop
   292e0:	20015090 	.word	0x20015090
   292e4:	00029219 	.word	0x00029219
   292e8:	00046b51 	.word	0x00046b51
   292ec:	00046b7a 	.word	0x00046b7a
   292f0:	00046bb6 	.word	0x00046bb6
   292f4:	00046bdd 	.word	0x00046bdd
   292f8:	20019428 	.word	0x20019428

000292fc <location_init>:
static const char LOCATION_METHOD_GNSS_STR[] = "GNSS";
static const char LOCATION_METHOD_WIFI_STR[] = "Wi-Fi";
static const char LOCATION_METHOD_UNKNOWN_STR[] = "Unknown";

int location_init(location_event_handler_t handler)
{
   292fc:	b510      	push	{r4, lr}
	int err;

	err = location_core_event_handler_set(handler);
   292fe:	f000 f8e5 	bl	294cc <location_core_event_handler_set>
	if (err) {
   29302:	b938      	cbnz	r0, 29314 <location_init+0x18>
		return err;
	}
	if (initialized) {
   29304:	4c04      	ldr	r4, [pc, #16]	; (29318 <location_init+0x1c>)
   29306:	7823      	ldrb	r3, [r4, #0]
   29308:	b923      	cbnz	r3, 29314 <location_init+0x18>
		/* Already initialized so library is ready. We just updated the event handler. */
		return 0;
	}

	err = location_core_init();
   2930a:	f000 f8f1 	bl	294f0 <location_core_init>
	if (err) {
   2930e:	b908      	cbnz	r0, 29314 <location_init+0x18>
		return err;
	}

	initialized = true;
   29310:	2301      	movs	r3, #1
   29312:	7023      	strb	r3, [r4, #0]

	LOG_DBG("Location library initialized");

	return 0;
}
   29314:	bd10      	pop	{r4, pc}
   29316:	bf00      	nop
   29318:	2001c905 	.word	0x2001c905

0002931c <location_config_defaults_set>:

void location_config_defaults_set(
	struct location_config *config,
	uint8_t methods_count,
	enum location_method *method_types)
{
   2931c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2931e:	460d      	mov	r5, r1
   29320:	4616      	mov	r6, r2
	if (config == NULL) {
   29322:	4604      	mov	r4, r0
   29324:	b928      	cbnz	r0, 29332 <location_config_defaults_set+0x16>
		LOG_ERR("Configuration must not be NULL");
   29326:	2145      	movs	r1, #69	; 0x45
	config->methods_count = methods_count;
	config->mode = LOCATION_REQ_MODE_FALLBACK;
	for (int i = 0; i < methods_count; i++) {
		location_config_method_defaults_set(&config->methods[i], method_types[i]);
	}
}
   29328:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		LOG_ERR("Configuration must not be NULL");
   2932c:	4814      	ldr	r0, [pc, #80]	; (29380 <location_config_defaults_set+0x64>)
   2932e:	f013 bbbf 	b.w	3cab0 <z_log_minimal_printk>
__ssp_bos_icheck3(memset, void *, int)
   29332:	221e      	movs	r2, #30
   29334:	2100      	movs	r1, #0
   29336:	f018 f855 	bl	413e4 <memset>
	for (int i = 0; i < methods_count; i++) {
   2933a:	2300      	movs	r3, #0
   2933c:	4620      	mov	r0, r4
	config->methods_count = methods_count;
   2933e:	7025      	strb	r5, [r4, #0]
		method->wifi.service = LOCATION_SERVICE_ANY;
   29340:	461a      	mov	r2, r3
		method->wifi.timeout = 30;
   29342:	241e      	movs	r4, #30
		method->gnss.timeout = 120;
   29344:	2778      	movs	r7, #120	; 0x78
		method->gnss.accuracy = LOCATION_ACCURACY_NORMAL;
   29346:	f04f 0c01 	mov.w	ip, #1
		method->gnss.num_consecutive_fixes = 3;
   2934a:	f04f 0e03 	mov.w	lr, #3
	for (int i = 0; i < methods_count; i++) {
   2934e:	42ab      	cmp	r3, r5
   29350:	db00      	blt.n	29354 <location_config_defaults_set+0x38>
}
   29352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		location_config_method_defaults_set(&config->methods[i], method_types[i]);
   29354:	5cf1      	ldrb	r1, [r6, r3]
	if (method_type == LOCATION_METHOD_GNSS) {
   29356:	2902      	cmp	r1, #2
	method->method = method_type;
   29358:	7081      	strb	r1, [r0, #2]
	if (method_type == LOCATION_METHOD_GNSS) {
   2935a:	d108      	bne.n	2936e <location_config_defaults_set+0x52>
		method->gnss.timeout = 120;
   2935c:	8087      	strh	r7, [r0, #4]
		method->gnss.accuracy = LOCATION_ACCURACY_NORMAL;
   2935e:	f880 c006 	strb.w	ip, [r0, #6]
		method->gnss.num_consecutive_fixes = 3;
   29362:	f880 e007 	strb.w	lr, [r0, #7]
		method->gnss.visibility_detection = false;
   29366:	7202      	strb	r2, [r0, #8]
	for (int i = 0; i < methods_count; i++) {
   29368:	3301      	adds	r3, #1
   2936a:	3008      	adds	r0, #8
   2936c:	e7ef      	b.n	2934e <location_config_defaults_set+0x32>
	} else if (method_type == LOCATION_METHOD_CELLULAR) {
   2936e:	2901      	cmp	r1, #1
   29370:	d102      	bne.n	29378 <location_config_defaults_set+0x5c>
		method->wifi.timeout = 30;
   29372:	8084      	strh	r4, [r0, #4]
		method->wifi.service = LOCATION_SERVICE_ANY;
   29374:	7182      	strb	r2, [r0, #6]
   29376:	e7f7      	b.n	29368 <location_config_defaults_set+0x4c>
	} else if (method_type == LOCATION_METHOD_WIFI) {
   29378:	2903      	cmp	r1, #3
   2937a:	d1f5      	bne.n	29368 <location_config_defaults_set+0x4c>
   2937c:	e7f9      	b.n	29372 <location_config_defaults_set+0x56>
   2937e:	bf00      	nop
   29380:	000472cb 	.word	0x000472cb

00029384 <location_request>:
{
   29384:	b530      	push	{r4, r5, lr}
   29386:	b08b      	sub	sp, #44	; 0x2c
   29388:	4604      	mov	r4, r0
	struct location_config default_config = { 0 };
   2938a:	221e      	movs	r2, #30
   2938c:	2100      	movs	r1, #0
   2938e:	a802      	add	r0, sp, #8
   29390:	f018 f828 	bl	413e4 <memset>
	enum location_method methods[] = {
   29394:	4b17      	ldr	r3, [pc, #92]	; (293f4 <location_request+0x70>)
   29396:	881b      	ldrh	r3, [r3, #0]
   29398:	f8ad 3004 	strh.w	r3, [sp, #4]
	if (!initialized) {
   2939c:	4b16      	ldr	r3, [pc, #88]	; (293f8 <location_request+0x74>)
   2939e:	781b      	ldrb	r3, [r3, #0]
   293a0:	b94b      	cbnz	r3, 293b6 <location_request+0x32>
		LOG_ERR("Location library not initialized when calling %s", __func__);
   293a2:	2145      	movs	r1, #69	; 0x45
   293a4:	4a15      	ldr	r2, [pc, #84]	; (293fc <location_request+0x78>)
   293a6:	4816      	ldr	r0, [pc, #88]	; (29400 <location_request+0x7c>)
   293a8:	f013 fb82 	bl	3cab0 <z_log_minimal_printk>
		return -EPERM;
   293ac:	f04f 35ff 	mov.w	r5, #4294967295
}
   293b0:	4628      	mov	r0, r5
   293b2:	b00b      	add	sp, #44	; 0x2c
   293b4:	bd30      	pop	{r4, r5, pc}
	if (config == NULL || config->methods_count == 0) {
   293b6:	b10c      	cbz	r4, 293bc <location_request+0x38>
   293b8:	7823      	ldrb	r3, [r4, #0]
   293ba:	b94b      	cbnz	r3, 293d0 <location_request+0x4c>
		location_config_defaults_set(&default_config, ARRAY_SIZE(methods), methods);
   293bc:	2102      	movs	r1, #2
   293be:	aa01      	add	r2, sp, #4
   293c0:	a802      	add	r0, sp, #8
   293c2:	f7ff ffab 	bl	2931c <location_config_defaults_set>
		if (config != NULL) {
   293c6:	b114      	cbz	r4, 293ce <location_request+0x4a>
			default_config.interval = config->interval;
   293c8:	8b63      	ldrh	r3, [r4, #26]
   293ca:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		config = &default_config;
   293ce:	ac02      	add	r4, sp, #8
	location_core_config_log(config);
   293d0:	4620      	mov	r0, r4
   293d2:	f016 f8c8 	bl	3f566 <location_core_config_log>
	err = location_core_validate_params(config);
   293d6:	4620      	mov	r0, r4
   293d8:	f000 f8b6 	bl	29548 <location_core_validate_params>
	if (err) {
   293dc:	4605      	mov	r5, r0
   293de:	b120      	cbz	r0, 293ea <location_request+0x66>
		LOG_ERR("Invalid parameters given.");
   293e0:	2145      	movs	r1, #69	; 0x45
   293e2:	4808      	ldr	r0, [pc, #32]	; (29404 <location_request+0x80>)
   293e4:	f013 fb64 	bl	3cab0 <z_log_minimal_printk>
		return err;
   293e8:	e7e2      	b.n	293b0 <location_request+0x2c>
	err = location_core_location_get(config);
   293ea:	4620      	mov	r0, r4
   293ec:	f000 f8ea 	bl	295c4 <location_core_location_get>
   293f0:	4605      	mov	r5, r0
	return err;
   293f2:	e7dd      	b.n	293b0 <location_request+0x2c>
   293f4:	00042812 	.word	0x00042812
   293f8:	2001c905 	.word	0x2001c905
   293fc:	0004730e 	.word	0x0004730e
   29400:	00047295 	.word	0x00047295
   29404:	000472ef 	.word	0x000472ef

00029408 <location_method_api_get>:
static const struct location_method_api *location_method_api_get(enum location_method method)
{
	const struct location_method_api *method_api = NULL;

	for (int i = 0; methods_supported[i] != NULL; i++) {
		if (method == methods_supported[i]->method) {
   29408:	2802      	cmp	r0, #2
   2940a:	d004      	beq.n	29416 <location_method_api_get+0xe>
	const struct location_method_api *method_api = NULL;
   2940c:	2801      	cmp	r0, #1
   2940e:	4803      	ldr	r0, [pc, #12]	; (2941c <location_method_api_get+0x14>)
   29410:	bf18      	it	ne
   29412:	2000      	movne	r0, #0
   29414:	4770      	bx	lr
	for (int i = 0; methods_supported[i] != NULL; i++) {
   29416:	4802      	ldr	r0, [pc, #8]	; (29420 <location_method_api_get+0x18>)
			break;
		}
	}

	return method_api;
}
   29418:	4770      	bx	lr
   2941a:	bf00      	nop
   2941c:	00042e64 	.word	0x00042e64
   29420:	00042e80 	.word	0x00042e80

00029424 <location_core_current_config_clear>:
	memset(&current_config, 0, sizeof(current_config));
   29424:	221e      	movs	r2, #30
   29426:	2100      	movs	r1, #0
   29428:	4801      	ldr	r0, [pc, #4]	; (29430 <location_core_current_config_clear+0xc>)
   2942a:	f017 bfdb 	b.w	413e4 <memset>
   2942e:	bf00      	nop
   29430:	2001a56c 	.word	0x2001a56c

00029434 <location_core_current_event_data_init>:
	memset(&current_event_data, 0, sizeof(current_event_data));
   29434:	4b04      	ldr	r3, [pc, #16]	; (29448 <location_core_current_event_data_init+0x14>)
{
   29436:	b510      	push	{r4, lr}
	memset(&current_event_data, 0, sizeof(current_event_data));
   29438:	2230      	movs	r2, #48	; 0x30
{
   2943a:	4604      	mov	r4, r0
	memset(&current_event_data, 0, sizeof(current_event_data));
   2943c:	2100      	movs	r1, #0
   2943e:	4618      	mov	r0, r3
   29440:	f017 ffd0 	bl	413e4 <memset>
	current_event_data.location.method = method;
   29444:	7204      	strb	r4, [r0, #8]
}
   29446:	bd10      	pop	{r4, pc}
   29448:	200155f8 	.word	0x200155f8

0002944c <location_core_location_get_pos>:

	memcpy(&current_config, config, sizeof(struct location_config));
}

static int location_core_location_get_pos(const struct location_config *config)
{
   2944c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(config->methods_count <= CONFIG_LOCATION_METHODS_LIST_SIZE);
   2944e:	7803      	ldrb	r3, [r0, #0]
{
   29450:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(config->methods_count <= CONFIG_LOCATION_METHODS_LIST_SIZE);
   29452:	2b03      	cmp	r3, #3
   29454:	d90a      	bls.n	2946c <location_core_location_get_pos+0x20>
   29456:	4916      	ldr	r1, [pc, #88]	; (294b0 <location_core_location_get_pos+0x64>)
   29458:	4816      	ldr	r0, [pc, #88]	; (294b4 <location_core_location_get_pos+0x68>)
   2945a:	f240 1231 	movw	r2, #305	; 0x131
   2945e:	f013 faed 	bl	3ca3c <assert_print>
   29462:	f240 1131 	movw	r1, #305	; 0x131
   29466:	4812      	ldr	r0, [pc, #72]	; (294b0 <location_core_location_get_pos+0x64>)
   29468:	f013 fae1 	bl	3ca2e <assert_post_action>
	if (config == &current_config) {
   2946c:	4d12      	ldr	r5, [pc, #72]	; (294b8 <location_core_location_get_pos+0x6c>)
   2946e:	42ac      	cmp	r4, r5
   29470:	d00d      	beq.n	2948e <location_core_location_get_pos+0x42>
	location_core_current_config_clear();
   29472:	f7ff ffd7 	bl	29424 <location_core_current_config_clear>
	memcpy(&current_config, config, sizeof(struct location_config));
   29476:	4622      	mov	r2, r4
   29478:	462b      	mov	r3, r5
   2947a:	f104 011c 	add.w	r1, r4, #28
   2947e:	f852 0b04 	ldr.w	r0, [r2], #4
   29482:	428a      	cmp	r2, r1
   29484:	f843 0b04 	str.w	r0, [r3], #4
   29488:	d1f9      	bne.n	2947e <location_core_location_get_pos+0x32>
   2948a:	8812      	ldrh	r2, [r2, #0]
   2948c:	801a      	strh	r2, [r3, #0]
	int err;
	enum location_method requested_method;

	location_core_current_config_set(config);
	/* Location request starts from the first method */
	current_method_index = 0;
   2948e:	2200      	movs	r2, #0
	requested_method = config->methods[current_method_index].method;
   29490:	f814 0f02 	ldrb.w	r0, [r4, #2]!
	current_method_index = 0;
   29494:	4b09      	ldr	r3, [pc, #36]	; (294bc <location_core_location_get_pos+0x70>)
	LOG_DBG("Requesting location with '%s' method",
		(char *)location_method_api_get(requested_method)->method_string);
	location_core_current_event_data_init(requested_method);
   29496:	9001      	str	r0, [sp, #4]
	current_method_index = 0;
   29498:	601a      	str	r2, [r3, #0]
	location_core_current_event_data_init(requested_method);
   2949a:	f7ff ffcb 	bl	29434 <location_core_current_event_data_init>
	err = location_method_api_get(requested_method)->location_get(
   2949e:	9801      	ldr	r0, [sp, #4]
   294a0:	f7ff ffb2 	bl	29408 <location_method_api_get>
   294a4:	6943      	ldr	r3, [r0, #20]
   294a6:	4620      	mov	r0, r4
		&config->methods[current_method_index]);

	return err;
}
   294a8:	b003      	add	sp, #12
   294aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	err = location_method_api_get(requested_method)->location_get(
   294ae:	4718      	bx	r3
   294b0:	0004731f 	.word	0x0004731f
   294b4:	00043ff2 	.word	0x00043ff2
   294b8:	2001a56c 	.word	0x2001a56c
   294bc:	20019434 	.word	0x20019434

000294c0 <location_core_periodic_work_fn>:
}

static void location_core_periodic_work_fn(struct k_work *work)
{
	ARG_UNUSED(work);
	location_core_location_get_pos(&current_config);
   294c0:	4801      	ldr	r0, [pc, #4]	; (294c8 <location_core_periodic_work_fn+0x8>)
   294c2:	f7ff bfc3 	b.w	2944c <location_core_location_get_pos>
   294c6:	bf00      	nop
   294c8:	2001a56c 	.word	0x2001a56c

000294cc <location_core_event_handler_set>:
{
   294cc:	b508      	push	{r3, lr}
	if (handler == NULL) {
   294ce:	b930      	cbnz	r0, 294de <location_core_event_handler_set+0x12>
		LOG_ERR("No event handler given");
   294d0:	4805      	ldr	r0, [pc, #20]	; (294e8 <location_core_event_handler_set+0x1c>)
   294d2:	2145      	movs	r1, #69	; 0x45
   294d4:	f013 faec 	bl	3cab0 <z_log_minimal_printk>
		return -EINVAL;
   294d8:	f06f 0015 	mvn.w	r0, #21
}
   294dc:	bd08      	pop	{r3, pc}
	event_handler = handler;
   294de:	4b03      	ldr	r3, [pc, #12]	; (294ec <location_core_event_handler_set+0x20>)
   294e0:	6018      	str	r0, [r3, #0]
	return 0;
   294e2:	2000      	movs	r0, #0
   294e4:	e7fa      	b.n	294dc <location_core_event_handler_set+0x10>
   294e6:	bf00      	nop
   294e8:	0004734c 	.word	0x0004734c
   294ec:	20019438 	.word	0x20019438

000294f0 <location_core_init>:
{
   294f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_work_queue_config cfg = {
   294f2:	2300      	movs	r3, #0
   294f4:	9303      	str	r3, [sp, #12]
   294f6:	4b0f      	ldr	r3, [pc, #60]	; (29534 <location_core_init+0x44>)
	k_work_queue_start(
   294f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	struct k_work_queue_config cfg = {
   294fc:	9302      	str	r3, [sp, #8]
	k_work_queue_start(
   294fe:	ab02      	add	r3, sp, #8
   29500:	9300      	str	r3, [sp, #0]
   29502:	490d      	ldr	r1, [pc, #52]	; (29538 <location_core_init+0x48>)
   29504:	2305      	movs	r3, #5
   29506:	480d      	ldr	r0, [pc, #52]	; (2953c <location_core_init+0x4c>)
   29508:	f00d ff9a 	bl	37440 <k_work_queue_start>
	for (int i = 0; methods_supported[i] != NULL; i++) {
   2950c:	4e0c      	ldr	r6, [pc, #48]	; (29540 <location_core_init+0x50>)
   2950e:	f856 5b04 	ldr.w	r5, [r6], #4
   29512:	b90d      	cbnz	r5, 29518 <location_core_init+0x28>
	return 0;
   29514:	462c      	mov	r4, r5
   29516:	e009      	b.n	2952c <location_core_init+0x3c>
		err = methods_supported[i]->init();
   29518:	68eb      	ldr	r3, [r5, #12]
   2951a:	4798      	blx	r3
		if (err) {
   2951c:	4604      	mov	r4, r0
   2951e:	2800      	cmp	r0, #0
   29520:	d0f5      	beq.n	2950e <location_core_init+0x1e>
			LOG_ERR("Failed to initialize '%s' method",
   29522:	2145      	movs	r1, #69	; 0x45
   29524:	4807      	ldr	r0, [pc, #28]	; (29544 <location_core_init+0x54>)
   29526:	1c6a      	adds	r2, r5, #1
   29528:	f013 fac2 	bl	3cab0 <z_log_minimal_printk>
}
   2952c:	4620      	mov	r0, r4
   2952e:	b004      	add	sp, #16
   29530:	bd70      	pop	{r4, r5, r6, pc}
   29532:	bf00      	nop
   29534:	00047368 	.word	0x00047368
   29538:	2001fa00 	.word	0x2001fa00
   2953c:	20015628 	.word	0x20015628
   29540:	00042e9c 	.word	0x00042e9c
   29544:	0004737b 	.word	0x0004737b

00029548 <location_core_validate_params>:
{
   29548:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(config != NULL);
   2954a:	4604      	mov	r4, r0
   2954c:	b940      	cbnz	r0, 29560 <location_core_validate_params+0x18>
   2954e:	4918      	ldr	r1, [pc, #96]	; (295b0 <location_core_validate_params+0x68>)
   29550:	4818      	ldr	r0, [pc, #96]	; (295b4 <location_core_validate_params+0x6c>)
   29552:	22ea      	movs	r2, #234	; 0xea
   29554:	f013 fa72 	bl	3ca3c <assert_print>
   29558:	21ea      	movs	r1, #234	; 0xea
   2955a:	4815      	ldr	r0, [pc, #84]	; (295b0 <location_core_validate_params+0x68>)
   2955c:	f013 fa67 	bl	3ca2e <assert_post_action>
	if (config->methods_count > CONFIG_LOCATION_METHODS_LIST_SIZE) {
   29560:	7823      	ldrb	r3, [r4, #0]
   29562:	2b03      	cmp	r3, #3
   29564:	d907      	bls.n	29576 <location_core_validate_params+0x2e>
		LOG_ERR("Maximum number of methods (%d) exceeded: %d",
   29566:	2203      	movs	r2, #3
   29568:	2145      	movs	r1, #69	; 0x45
   2956a:	4813      	ldr	r0, [pc, #76]	; (295b8 <location_core_validate_params+0x70>)
   2956c:	f013 faa0 	bl	3cab0 <z_log_minimal_printk>
			return -EINVAL;
   29570:	f06f 0015 	mvn.w	r0, #21
}
   29574:	bd10      	pop	{r4, pc}
	if ((config->interval > 0) && (config->interval < 10)) {
   29576:	8b62      	ldrh	r2, [r4, #26]
   29578:	3a01      	subs	r2, #1
   2957a:	b292      	uxth	r2, r2
   2957c:	2a08      	cmp	r2, #8
   2957e:	d814      	bhi.n	295aa <location_core_validate_params+0x62>
		LOG_ERR("Interval for periodic location updates must be longer than 10 seconds");
   29580:	2145      	movs	r1, #69	; 0x45
   29582:	480e      	ldr	r0, [pc, #56]	; (295bc <location_core_validate_params+0x74>)
   29584:	f013 fa94 	bl	3cab0 <z_log_minimal_printk>
		return -EINVAL;
   29588:	e7f2      	b.n	29570 <location_core_validate_params+0x28>
		method_api = location_method_api_get(config->methods[i].method);
   2958a:	f814 2031 	ldrb.w	r2, [r4, r1, lsl #3]
   2958e:	4610      	mov	r0, r2
   29590:	f7ff ff3a 	bl	29408 <location_method_api_get>
		if (method_api == NULL) {
   29594:	b920      	cbnz	r0, 295a0 <location_core_validate_params+0x58>
			LOG_ERR("Location method (%d) not supported", config->methods[i].method);
   29596:	2145      	movs	r1, #69	; 0x45
   29598:	4809      	ldr	r0, [pc, #36]	; (295c0 <location_core_validate_params+0x78>)
   2959a:	f013 fa89 	bl	3cab0 <z_log_minimal_printk>
   2959e:	e7e7      	b.n	29570 <location_core_validate_params+0x28>
	for (int i = 0; i < config->methods_count; i++) {
   295a0:	3101      	adds	r1, #1
   295a2:	4299      	cmp	r1, r3
   295a4:	dbf1      	blt.n	2958a <location_core_validate_params+0x42>
	return 0;
   295a6:	2000      	movs	r0, #0
   295a8:	e7e4      	b.n	29574 <location_core_validate_params+0x2c>
	for (int i = 0; i < config->methods_count; i++) {
   295aa:	2100      	movs	r1, #0
		method_api = location_method_api_get(config->methods[i].method);
   295ac:	3402      	adds	r4, #2
   295ae:	e7f8      	b.n	295a2 <location_core_validate_params+0x5a>
   295b0:	0004731f 	.word	0x0004731f
   295b4:	00043ff2 	.word	0x00043ff2
   295b8:	000473a1 	.word	0x000473a1
   295bc:	000473d2 	.word	0x000473d2
   295c0:	0004741d 	.word	0x0004741d

000295c4 <location_core_location_get>:
{
   295c4:	b510      	push	{r4, lr}
   295c6:	4604      	mov	r4, r0
   295c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   295cc:	2300      	movs	r3, #0
   295ce:	4808      	ldr	r0, [pc, #32]	; (295f0 <location_core_location_get+0x2c>)
   295d0:	f00d fbfe 	bl	36dd0 <z_impl_k_sem_take>
	if (err) {
   295d4:	b920      	cbnz	r0, 295e0 <location_core_location_get+0x1c>
	return location_core_location_get_pos(config);
   295d6:	4620      	mov	r0, r4
}
   295d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return location_core_location_get_pos(config);
   295dc:	f7ff bf36 	b.w	2944c <location_core_location_get_pos>
		LOG_ERR("Location request already ongoing");
   295e0:	2145      	movs	r1, #69	; 0x45
   295e2:	4804      	ldr	r0, [pc, #16]	; (295f4 <location_core_location_get+0x30>)
   295e4:	f013 fa64 	bl	3cab0 <z_log_minimal_printk>
}
   295e8:	f06f 000f 	mvn.w	r0, #15
   295ec:	bd10      	pop	{r4, pc}
   295ee:	bf00      	nop
   295f0:	20015078 	.word	0x20015078
   295f4:	00047445 	.word	0x00047445

000295f8 <location_core_event_cb>:
{
   295f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   295fc:	4604      	mov	r4, r0
   295fe:	b08c      	sub	sp, #48	; 0x30
	k_work_cancel_delayable(&location_timeout_work);
   29600:	485c      	ldr	r0, [pc, #368]	; (29774 <location_core_event_cb+0x17c>)
   29602:	f00e f883 	bl	3770c <k_work_cancel_delayable>
	if (location != NULL) {
   29606:	4f5c      	ldr	r7, [pc, #368]	; (29778 <location_core_event_cb+0x180>)
   29608:	4e5c      	ldr	r6, [pc, #368]	; (2977c <location_core_event_cb+0x184>)
   2960a:	2c00      	cmp	r4, #0
   2960c:	d07a      	beq.n	29704 <location_core_event_cb+0x10c>
		current_event_data.id = LOCATION_EVT_LOCATION;
   2960e:	463d      	mov	r5, r7
   29610:	2301      	movs	r3, #1
   29612:	f805 3b08 	strb.w	r3, [r5], #8
		current_event_data.location = *location;
   29616:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   29618:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2961a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   2961c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
		sprintf(latitude_str, "%.06f", current_event_data.location.latitude);
   2961e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
		current_event_data.location = *location;
   29622:	e894 0003 	ldmia.w	r4, {r0, r1}
   29626:	e885 0003 	stmia.w	r5, {r0, r1}
		sprintf(latitude_str, "%.06f", current_event_data.location.latitude);
   2962a:	e9cd 2300 	strd	r2, r3, [sp]
   2962e:	220c      	movs	r2, #12
   29630:	2100      	movs	r1, #0
   29632:	4b53      	ldr	r3, [pc, #332]	; (29780 <location_core_event_cb+0x188>)
   29634:	eb0d 0002 	add.w	r0, sp, r2
   29638:	f018 f824 	bl	41684 <__sprintf_chk>
		sprintf(longitude_str, "%.06f", current_event_data.location.longitude);
   2963c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   29640:	2100      	movs	r1, #0
   29642:	e9cd 2300 	strd	r2, r3, [sp]
   29646:	a806      	add	r0, sp, #24
   29648:	220c      	movs	r2, #12
   2964a:	4b4d      	ldr	r3, [pc, #308]	; (29780 <location_core_event_cb+0x188>)
   2964c:	f018 f81a 	bl	41684 <__sprintf_chk>
		sprintf(accuracy_str, "%.01f", current_event_data.location.accuracy);
   29650:	6a38      	ldr	r0, [r7, #32]
   29652:	f7f3 f859 	bl	1c708 <__aeabi_f2d>
   29656:	4b4b      	ldr	r3, [pc, #300]	; (29784 <location_core_event_cb+0x18c>)
   29658:	e9cd 0100 	strd	r0, r1, [sp]
   2965c:	220c      	movs	r2, #12
   2965e:	2100      	movs	r1, #0
   29660:	a809      	add	r0, sp, #36	; 0x24
   29662:	f018 f80f 	bl	41684 <__sprintf_chk>
		if (current_config.mode == LOCATION_REQ_MODE_ALL) {
   29666:	7f33      	ldrb	r3, [r6, #28]
   29668:	2b01      	cmp	r3, #1
   2966a:	d12e      	bne.n	296ca <location_core_event_cb+0xd2>
			current_method_index++;
   2966c:	4c46      	ldr	r4, [pc, #280]	; (29788 <location_core_event_cb+0x190>)
			if (current_method_index < current_config.methods_count) {
   2966e:	7832      	ldrb	r2, [r6, #0]
			current_method_index++;
   29670:	6823      	ldr	r3, [r4, #0]
			previous_method = current_event_data.location.method;
   29672:	7a38      	ldrb	r0, [r7, #8]
			current_method_index++;
   29674:	3301      	adds	r3, #1
			if (current_method_index < current_config.methods_count) {
   29676:	4293      	cmp	r3, r2
			current_method_index++;
   29678:	6023      	str	r3, [r4, #0]
			if (current_method_index < current_config.methods_count) {
   2967a:	da20      	bge.n	296be <location_core_event_cb+0xc6>
				LOG_INF("LOCATION_REQ_MODE_ALL: acquired location using '%s', "
   2967c:	f7ff fec4 	bl	29408 <location_method_api_get>
				requested_method =
   29680:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
   29684:	f893 8002 	ldrb.w	r8, [r3, #2]
				LOG_INF("LOCATION_REQ_MODE_ALL: acquired location using '%s', "
   29688:	4602      	mov	r2, r0
   2968a:	4640      	mov	r0, r8
   2968c:	f7ff febc 	bl	29408 <location_method_api_get>
   29690:	4605      	mov	r5, r0
   29692:	2149      	movs	r1, #73	; 0x49
   29694:	1c43      	adds	r3, r0, #1
   29696:	3201      	adds	r2, #1
   29698:	483c      	ldr	r0, [pc, #240]	; (2978c <location_core_event_cb+0x194>)
   2969a:	f013 fa09 	bl	3cab0 <z_log_minimal_printk>
				event_handler(&current_event_data);
   2969e:	4b3c      	ldr	r3, [pc, #240]	; (29790 <location_core_event_cb+0x198>)
   296a0:	4638      	mov	r0, r7
   296a2:	681b      	ldr	r3, [r3, #0]
   296a4:	4798      	blx	r3
				location_core_current_event_data_init(requested_method);
   296a6:	4640      	mov	r0, r8
   296a8:	f7ff fec4 	bl	29434 <location_core_current_event_data_init>
					&current_config.methods[current_method_index]);
   296ac:	6820      	ldr	r0, [r4, #0]
				err = location_method_api_get(requested_method)->location_get(
   296ae:	696b      	ldr	r3, [r5, #20]
					&current_config.methods[current_method_index]);
   296b0:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
				err = location_method_api_get(requested_method)->location_get(
   296b4:	3002      	adds	r0, #2
   296b6:	4798      	blx	r3
}
   296b8:	b00c      	add	sp, #48	; 0x30
   296ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LOG_INF("LOCATION_REQ_MODE_ALL: all methods done");
   296be:	2149      	movs	r1, #73	; 0x49
   296c0:	4834      	ldr	r0, [pc, #208]	; (29794 <location_core_event_cb+0x19c>)
   296c2:	f013 f9f5 	bl	3cab0 <z_log_minimal_printk>
			current_method_index = 0;
   296c6:	2300      	movs	r3, #0
   296c8:	6023      	str	r3, [r4, #0]
	event_handler(&current_event_data);
   296ca:	4b31      	ldr	r3, [pc, #196]	; (29790 <location_core_event_cb+0x198>)
   296cc:	482a      	ldr	r0, [pc, #168]	; (29778 <location_core_event_cb+0x180>)
   296ce:	681b      	ldr	r3, [r3, #0]
   296d0:	4798      	blx	r3
	if (current_config.interval > 0) {
   296d2:	8b74      	ldrh	r4, [r6, #26]
   296d4:	2c00      	cmp	r4, #0
   296d6:	d046      	beq.n	29766 <location_core_event_cb+0x16e>
			K_SECONDS(current_config.interval));
   296d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   296dc:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   296e0:	f240 30e7 	movw	r0, #999	; 0x3e7
   296e4:	2100      	movs	r1, #0
   296e6:	435c      	muls	r4, r3
   296e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   296ec:	2300      	movs	r3, #0
   296ee:	fbe4 0105 	umlal	r0, r1, r4, r5
   296f2:	f7f3 fbf9 	bl	1cee8 <__aeabi_uldivmod>
   296f6:	4602      	mov	r2, r0
   296f8:	460b      	mov	r3, r1
		k_work_schedule_for_queue(
   296fa:	4827      	ldr	r0, [pc, #156]	; (29798 <location_core_event_cb+0x1a0>)
   296fc:	4927      	ldr	r1, [pc, #156]	; (2979c <location_core_event_cb+0x1a4>)
   296fe:	f00d ff33 	bl	37568 <k_work_schedule_for_queue>
   29702:	e7d9      	b.n	296b8 <location_core_event_cb+0xc0>
		current_method_index++;
   29704:	4d20      	ldr	r5, [pc, #128]	; (29788 <location_core_event_cb+0x190>)
		if (current_method_index < current_config.methods_count) {
   29706:	7832      	ldrb	r2, [r6, #0]
		current_method_index++;
   29708:	682b      	ldr	r3, [r5, #0]
		previous_method = current_event_data.location.method;
   2970a:	7a38      	ldrb	r0, [r7, #8]
		current_method_index++;
   2970c:	3301      	adds	r3, #1
		if (current_method_index < current_config.methods_count) {
   2970e:	4293      	cmp	r3, r2
		current_method_index++;
   29710:	602b      	str	r3, [r5, #0]
		if (current_method_index < current_config.methods_count) {
   29712:	da23      	bge.n	2975c <location_core_event_cb+0x164>
			LOG_WRN("Failed to acquire location using '%s', "
   29714:	f7ff fe78 	bl	29408 <location_method_api_get>
			requested_method = current_config.methods[current_method_index].method;
   29718:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
   2971c:	f893 8002 	ldrb.w	r8, [r3, #2]
			LOG_WRN("Failed to acquire location using '%s', "
   29720:	4602      	mov	r2, r0
   29722:	4640      	mov	r0, r8
   29724:	f7ff fe70 	bl	29408 <location_method_api_get>
   29728:	2157      	movs	r1, #87	; 0x57
   2972a:	1c43      	adds	r3, r0, #1
   2972c:	4604      	mov	r4, r0
   2972e:	3201      	adds	r2, #1
   29730:	481b      	ldr	r0, [pc, #108]	; (297a0 <location_core_event_cb+0x1a8>)
   29732:	f013 f9bd 	bl	3cab0 <z_log_minimal_printk>
			if (current_config.mode == LOCATION_REQ_MODE_ALL) {
   29736:	7f33      	ldrb	r3, [r6, #28]
   29738:	2b01      	cmp	r3, #1
   2973a:	d103      	bne.n	29744 <location_core_event_cb+0x14c>
				event_handler(&current_event_data);
   2973c:	4b14      	ldr	r3, [pc, #80]	; (29790 <location_core_event_cb+0x198>)
   2973e:	4638      	mov	r0, r7
   29740:	681b      	ldr	r3, [r3, #0]
   29742:	4798      	blx	r3
			location_core_current_event_data_init(requested_method);
   29744:	4640      	mov	r0, r8
   29746:	f7ff fe75 	bl	29434 <location_core_current_event_data_init>
				&current_config.methods[current_method_index]);
   2974a:	6828      	ldr	r0, [r5, #0]
			err = location_method_api_get(requested_method)->location_get(
   2974c:	6963      	ldr	r3, [r4, #20]
				&current_config.methods[current_method_index]);
   2974e:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
			err = location_method_api_get(requested_method)->location_get(
   29752:	3002      	adds	r0, #2
}
   29754:	b00c      	add	sp, #48	; 0x30
   29756:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			err = location_method_api_get(requested_method)->location_get(
   2975a:	4718      	bx	r3
		LOG_ERR("Location acquisition failed and fallbacks are also done");
   2975c:	2145      	movs	r1, #69	; 0x45
   2975e:	4811      	ldr	r0, [pc, #68]	; (297a4 <location_core_event_cb+0x1ac>)
   29760:	f013 f9a6 	bl	3cab0 <z_log_minimal_printk>
   29764:	e7b1      	b.n	296ca <location_core_event_cb+0xd2>
		location_core_current_config_clear();
   29766:	f7ff fe5d 	bl	29424 <location_core_current_config_clear>
	z_impl_k_sem_give(sem);
   2976a:	480f      	ldr	r0, [pc, #60]	; (297a8 <location_core_event_cb+0x1b0>)
   2976c:	f00d faf4 	bl	36d58 <z_impl_k_sem_give>
}
   29770:	e7a2      	b.n	296b8 <location_core_event_cb+0xc0>
   29772:	bf00      	nop
   29774:	20014560 	.word	0x20014560
   29778:	200155f8 	.word	0x200155f8
   2977c:	2001a56c 	.word	0x2001a56c
   29780:	0004746b 	.word	0x0004746b
   29784:	00047471 	.word	0x00047471
   29788:	20019434 	.word	0x20019434
   2978c:	00047477 	.word	0x00047477
   29790:	20019438 	.word	0x20019438
   29794:	000474c7 	.word	0x000474c7
   29798:	20015628 	.word	0x20015628
   2979c:	20014530 	.word	0x20014530
   297a0:	000474f4 	.word	0x000474f4
   297a4:	00047536 	.word	0x00047536
   297a8:	20015078 	.word	0x20015078

000297ac <location_core_event_cb_error>:
	current_event_data.id = LOCATION_EVT_ERROR;
   297ac:	2203      	movs	r2, #3
   297ae:	4b02      	ldr	r3, [pc, #8]	; (297b8 <location_core_event_cb_error+0xc>)
	location_core_event_cb(NULL);
   297b0:	2000      	movs	r0, #0
	current_event_data.id = LOCATION_EVT_ERROR;
   297b2:	701a      	strb	r2, [r3, #0]
	location_core_event_cb(NULL);
   297b4:	f7ff bf20 	b.w	295f8 <location_core_event_cb>
   297b8:	200155f8 	.word	0x200155f8

000297bc <location_core_event_cb_timeout>:
	current_event_data.id = LOCATION_EVT_TIMEOUT;
   297bc:	2202      	movs	r2, #2
   297be:	4b02      	ldr	r3, [pc, #8]	; (297c8 <location_core_event_cb_timeout+0xc>)
	location_core_event_cb(NULL);
   297c0:	2000      	movs	r0, #0
	current_event_data.id = LOCATION_EVT_TIMEOUT;
   297c2:	701a      	strb	r2, [r3, #0]
	location_core_event_cb(NULL);
   297c4:	f7ff bf18 	b.w	295f8 <location_core_event_cb>
   297c8:	200155f8 	.word	0x200155f8

000297cc <location_core_timeout_work_fn>:
}

static void location_core_timeout_work_fn(struct k_work *work)
{
   297cc:	b510      	push	{r4, lr}
	enum location_method current_method =
		current_config.methods[current_method_index].method;
   297ce:	4b09      	ldr	r3, [pc, #36]	; (297f4 <location_core_timeout_work_fn+0x28>)

	ARG_UNUSED(work);

	LOG_WRN("Timeout occurred");
   297d0:	2157      	movs	r1, #87	; 0x57
	enum location_method current_method =
   297d2:	681a      	ldr	r2, [r3, #0]
   297d4:	4b08      	ldr	r3, [pc, #32]	; (297f8 <location_core_timeout_work_fn+0x2c>)
	LOG_WRN("Timeout occurred");
   297d6:	4809      	ldr	r0, [pc, #36]	; (297fc <location_core_timeout_work_fn+0x30>)
	enum location_method current_method =
   297d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   297dc:	789c      	ldrb	r4, [r3, #2]
	LOG_WRN("Timeout occurred");
   297de:	f013 f967 	bl	3cab0 <z_log_minimal_printk>

	location_method_api_get(current_method)->cancel();
   297e2:	4620      	mov	r0, r4
   297e4:	f7ff fe10 	bl	29408 <location_method_api_get>
   297e8:	6983      	ldr	r3, [r0, #24]
   297ea:	4798      	blx	r3
	location_core_event_cb_timeout();
}
   297ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	location_core_event_cb_timeout();
   297f0:	f7ff bfe4 	b.w	297bc <location_core_event_cb_timeout>
   297f4:	20019434 	.word	0x20019434
   297f8:	2001a56c 	.word	0x2001a56c
   297fc:	00047573 	.word	0x00047573

00029800 <location_core_work_queue_get>:
}
   29800:	4800      	ldr	r0, [pc, #0]	; (29804 <location_core_work_queue_get+0x4>)
   29802:	4770      	bx	lr
   29804:	20015628 	.word	0x20015628

00029808 <location_core_timer_start>:

void location_core_timer_start(uint16_t timeout)
{
   29808:	b570      	push	{r4, r5, r6, lr}
	if (timeout > 0) {
   2980a:	b1a8      	cbz	r0, 29838 <location_core_timer_start+0x30>
		 * their operation, blocking waiting of semaphores will block the timeout from
		 * expiring and canceling methods.
		 */
		k_work_schedule(
			&location_timeout_work,
			K_SECONDS(timeout));
   2980c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   29810:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   29814:	4344      	muls	r4, r0
   29816:	2100      	movs	r1, #0
   29818:	f240 30e7 	movw	r0, #999	; 0x3e7
   2981c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   29820:	2300      	movs	r3, #0
   29822:	fbe4 0105 	umlal	r0, r1, r4, r5
   29826:	f7f3 fb5f 	bl	1cee8 <__aeabi_uldivmod>
	}
}
   2982a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2982e:	4602      	mov	r2, r0
   29830:	460b      	mov	r3, r1
		k_work_schedule(
   29832:	4802      	ldr	r0, [pc, #8]	; (2983c <location_core_timer_start+0x34>)
   29834:	f00d befc 	b.w	37630 <k_work_schedule>
}
   29838:	bd70      	pop	{r4, r5, r6, pc}
   2983a:	bf00      	nop
   2983c:	20014560 	.word	0x20014560

00029840 <location_utils_modem_params_read>:
	}
	return is_active;
}

int location_utils_modem_params_read(struct location_utils_modem_params_info *modem_params)
{
   29840:	b530      	push	{r4, r5, lr}
	/* Parsed strings include double quotes */
	char plmn_str[MODEM_PARAM_STR_MAX_LEN + 1] = { 0 };
   29842:	2400      	movs	r4, #0
{
   29844:	4605      	mov	r5, r0
   29846:	b093      	sub	sp, #76	; 0x4c
	char plmn_str[MODEM_PARAM_STR_MAX_LEN + 1] = { 0 };
   29848:	220d      	movs	r2, #13
   2984a:	4621      	mov	r1, r4
   2984c:	a804      	add	r0, sp, #16
   2984e:	9403      	str	r4, [sp, #12]
   29850:	f017 fdc8 	bl	413e4 <memset>
	char tac_str[MODEM_PARAM_STR_MAX_LEN + 1] = { 0 };
   29854:	220d      	movs	r2, #13
   29856:	4621      	mov	r1, r4
   29858:	a809      	add	r0, sp, #36	; 0x24
   2985a:	9408      	str	r4, [sp, #32]
   2985c:	f017 fdc2 	bl	413e4 <memset>
	char cell_id_str[MODEM_PARAM_STR_MAX_LEN + 1] = { 0 };
   29860:	220d      	movs	r2, #13
   29862:	4621      	mov	r1, r4
   29864:	a80e      	add	r0, sp, #56	; 0x38
   29866:	940d      	str	r4, [sp, #52]	; 0x34
   29868:	f017 fdbc 	bl	413e4 <memset>
	int err = 0;

	__ASSERT_NO_MSG(modem_params != NULL);
   2986c:	b945      	cbnz	r5, 29880 <location_utils_modem_params_read+0x40>
   2986e:	491f      	ldr	r1, [pc, #124]	; (298ec <location_utils_modem_params_read+0xac>)
   29870:	481f      	ldr	r0, [pc, #124]	; (298f0 <location_utils_modem_params_read+0xb0>)
   29872:	223f      	movs	r2, #63	; 0x3f
   29874:	f013 f8e2 	bl	3ca3c <assert_print>
   29878:	213f      	movs	r1, #63	; 0x3f
   2987a:	481c      	ldr	r0, [pc, #112]	; (298ec <location_utils_modem_params_read+0xac>)
   2987c:	f013 f8d7 	bl	3ca2e <assert_post_action>

	err = nrf_modem_at_scanf(
   29880:	f105 0310 	add.w	r3, r5, #16
   29884:	9301      	str	r3, [sp, #4]
   29886:	ab0d      	add	r3, sp, #52	; 0x34
   29888:	9300      	str	r3, [sp, #0]
   2988a:	491a      	ldr	r1, [pc, #104]	; (298f4 <location_utils_modem_params_read+0xb4>)
   2988c:	481a      	ldr	r0, [pc, #104]	; (298f8 <location_utils_modem_params_read+0xb8>)
   2988e:	ab08      	add	r3, sp, #32
   29890:	aa03      	add	r2, sp, #12
   29892:	f00b fc4b 	bl	3512c <nrf_modem_at_scanf>
		",%*d"                                /* <band>: ignored */
		",%"L(MODEM_PARAM_STR_MAX_LEN)"[^,]"  /* <cell_id> */
		",%d",                                /* <phys_cell_id> */
		plmn_str, tac_str, cell_id_str, &modem_params->phys_cell_id);

	if (err <= 2) {
   29896:	2802      	cmp	r0, #2
	err = nrf_modem_at_scanf(
   29898:	4604      	mov	r4, r0
	if (err <= 2) {
   2989a:	dc07      	bgt.n	298ac <location_utils_modem_params_read+0x6c>
		LOG_ERR("Cannot get modem parameters, err %d", err);
   2989c:	4602      	mov	r2, r0
   2989e:	2145      	movs	r1, #69	; 0x45
   298a0:	4816      	ldr	r0, [pc, #88]	; (298fc <location_utils_modem_params_read+0xbc>)
   298a2:	f013 f905 	bl	3cab0 <z_log_minimal_printk>
			modem_params->mcc, modem_params->mnc, modem_params->tac,
			log_strdup(tac_str), modem_params->cell_id, log_strdup(cell_id_str),
			modem_params->phys_cell_id);
	}
	return err;
}
   298a6:	4620      	mov	r0, r4
   298a8:	b013      	add	sp, #76	; 0x4c
   298aa:	bd30      	pop	{r4, r5, pc}
		modem_params->mnc = strtol(&plmn_str[4], NULL, 10);
   298ac:	220a      	movs	r2, #10
   298ae:	2100      	movs	r1, #0
   298b0:	a804      	add	r0, sp, #16
   298b2:	f010 ffbd 	bl	3a830 <strtol>
		plmn_str[4] = '\0';
   298b6:	2400      	movs	r4, #0
		modem_params->mcc = strtol(plmn_str + 1, NULL, 10);
   298b8:	220a      	movs	r2, #10
   298ba:	4621      	mov	r1, r4
		modem_params->mnc = strtol(&plmn_str[4], NULL, 10);
   298bc:	6068      	str	r0, [r5, #4]
		modem_params->mcc = strtol(plmn_str + 1, NULL, 10);
   298be:	f10d 000d 	add.w	r0, sp, #13
		plmn_str[4] = '\0';
   298c2:	f88d 4010 	strb.w	r4, [sp, #16]
		modem_params->mcc = strtol(plmn_str + 1, NULL, 10);
   298c6:	f010 ffb3 	bl	3a830 <strtol>
		modem_params->tac = strtol(tac_str + 1, NULL, 16);
   298ca:	2210      	movs	r2, #16
   298cc:	4621      	mov	r1, r4
		modem_params->mcc = strtol(plmn_str + 1, NULL, 10);
   298ce:	6028      	str	r0, [r5, #0]
		modem_params->tac = strtol(tac_str + 1, NULL, 16);
   298d0:	f10d 0021 	add.w	r0, sp, #33	; 0x21
   298d4:	f010 ffac 	bl	3a830 <strtol>
		modem_params->cell_id = strtol(cell_id_str + 1, NULL, 16);
   298d8:	2210      	movs	r2, #16
		modem_params->tac = strtol(tac_str + 1, NULL, 16);
   298da:	60e8      	str	r0, [r5, #12]
		modem_params->cell_id = strtol(cell_id_str + 1, NULL, 16);
   298dc:	4621      	mov	r1, r4
   298de:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   298e2:	f010 ffa5 	bl	3a830 <strtol>
   298e6:	60a8      	str	r0, [r5, #8]
	return err;
   298e8:	e7dd      	b.n	298a6 <location_utils_modem_params_read+0x66>
   298ea:	bf00      	nop
   298ec:	00047589 	.word	0x00047589
   298f0:	00043ff2 	.word	0x00043ff2
   298f4:	000475b7 	.word	0x000475b7
   298f8:	000475f8 	.word	0x000475f8
   298fc:	00047604 	.word	0x00047604

00029900 <location_utils_systime_to_location_datetime>:

	return jwt_buf;
}

void location_utils_systime_to_location_datetime(struct location_datetime *datetime)
{
   29900:	b510      	push	{r4, lr}
   29902:	4604      	mov	r4, r0
   29904:	b08e      	sub	sp, #56	; 0x38
	struct timespec tp;
	struct tm ltm = { 0 };
   29906:	2224      	movs	r2, #36	; 0x24
   29908:	2100      	movs	r1, #0
   2990a:	a805      	add	r0, sp, #20
   2990c:	f017 fd6a 	bl	413e4 <memset>

	__ASSERT_NO_MSG(datetime != NULL);
   29910:	b944      	cbnz	r4, 29924 <location_utils_systime_to_location_datetime+0x24>
   29912:	4914      	ldr	r1, [pc, #80]	; (29964 <location_utils_systime_to_location_datetime+0x64>)
   29914:	4814      	ldr	r0, [pc, #80]	; (29968 <location_utils_systime_to_location_datetime+0x68>)
   29916:	227f      	movs	r2, #127	; 0x7f
   29918:	f013 f890 	bl	3ca3c <assert_print>
   2991c:	217f      	movs	r1, #127	; 0x7f
   2991e:	4811      	ldr	r0, [pc, #68]	; (29964 <location_utils_systime_to_location_datetime+0x64>)
   29920:	f013 f885 	bl	3ca2e <assert_post_action>
   29924:	2001      	movs	r0, #1
   29926:	4669      	mov	r1, sp
   29928:	f7fa f846 	bl	239b8 <z_impl_clock_gettime>

	clock_gettime(CLOCK_REALTIME, &tp);
	gmtime_r(&tp.tv_sec, &ltm);
   2992c:	4668      	mov	r0, sp
   2992e:	a905      	add	r1, sp, #20
   29930:	f010 f888 	bl	39a44 <gmtime_r>

	/* System time should have been set when date_time lib is in use */
	if (IS_ENABLED(CONFIG_DATE_TIME)) {
		datetime->valid = true;
   29934:	2301      	movs	r3, #1
   29936:	7023      	strb	r3, [r4, #0]
	} else {
		datetime->valid = false;
	}

	/* Relative to 1900, as per POSIX */
	datetime->year = 1900 + ltm.tm_year;
   29938:	9b0a      	ldr	r3, [sp, #40]	; 0x28

	datetime->day = ltm.tm_mday;
	datetime->hour = ltm.tm_hour;
	datetime->minute = ltm.tm_min;
	datetime->second = ltm.tm_sec;
	datetime->ms = tp.tv_nsec / 1000000;
   2993a:	4a0c      	ldr	r2, [pc, #48]	; (2996c <location_utils_systime_to_location_datetime+0x6c>)
	datetime->year = 1900 + ltm.tm_year;
   2993c:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   29940:	8063      	strh	r3, [r4, #2]
	datetime->month = ltm.tm_mon + 1;
   29942:	9b09      	ldr	r3, [sp, #36]	; 0x24
   29944:	3301      	adds	r3, #1
   29946:	7123      	strb	r3, [r4, #4]
	datetime->day = ltm.tm_mday;
   29948:	9b08      	ldr	r3, [sp, #32]
   2994a:	7163      	strb	r3, [r4, #5]
	datetime->hour = ltm.tm_hour;
   2994c:	9b07      	ldr	r3, [sp, #28]
   2994e:	71a3      	strb	r3, [r4, #6]
	datetime->minute = ltm.tm_min;
   29950:	9b06      	ldr	r3, [sp, #24]
   29952:	71e3      	strb	r3, [r4, #7]
	datetime->second = ltm.tm_sec;
   29954:	9b05      	ldr	r3, [sp, #20]
   29956:	7223      	strb	r3, [r4, #8]
	datetime->ms = tp.tv_nsec / 1000000;
   29958:	9b02      	ldr	r3, [sp, #8]
   2995a:	fb93 f3f2 	sdiv	r3, r3, r2
   2995e:	8163      	strh	r3, [r4, #10]
}
   29960:	b00e      	add	sp, #56	; 0x38
   29962:	bd10      	pop	{r4, pc}
   29964:	00047589 	.word	0x00047589
   29968:	00043ff2 	.word	0x00043ff2
   2996c:	000f4240 	.word	0x000f4240

00029970 <method_gnss_notify_pgps>:
#endif
	}
}

static void method_gnss_notify_pgps(struct k_work *work)
{
   29970:	b508      	push	{r3, lr}
	ARG_UNUSED(work);
	int err = nrf_cloud_pgps_notify_prediction();
   29972:	f004 f93b 	bl	2dbec <nrf_cloud_pgps_notify_prediction>

	if (err) {
   29976:	4602      	mov	r2, r0
   29978:	b128      	cbz	r0, 29986 <method_gnss_notify_pgps+0x16>
		LOG_ERR("Error requesting notification of prediction availability: %d", err);
	}
}
   2997a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("Error requesting notification of prediction availability: %d", err);
   2997e:	2145      	movs	r1, #69	; 0x45
   29980:	4801      	ldr	r0, [pc, #4]	; (29988 <method_gnss_notify_pgps+0x18>)
   29982:	f013 b895 	b.w	3cab0 <z_log_minimal_printk>
}
   29986:	bd08      	pop	{r3, pc}
   29988:	0004762d 	.word	0x0004762d

0002998c <method_gnss_manage_pgps>:
{
   2998c:	b508      	push	{r3, lr}
	err = nrf_cloud_pgps_inject(prediction, &pgps_agps_request);
   2998e:	4b0b      	ldr	r3, [pc, #44]	; (299bc <method_gnss_manage_pgps+0x30>)
   29990:	490b      	ldr	r1, [pc, #44]	; (299c0 <method_gnss_manage_pgps+0x34>)
   29992:	6818      	ldr	r0, [r3, #0]
   29994:	f004 fc52 	bl	2e23c <nrf_cloud_pgps_inject>
	if (err) {
   29998:	4602      	mov	r2, r0
   2999a:	b118      	cbz	r0, 299a4 <method_gnss_manage_pgps+0x18>
		LOG_ERR("Unable to send prediction to modem: %d", err);
   2999c:	2145      	movs	r1, #69	; 0x45
   2999e:	4809      	ldr	r0, [pc, #36]	; (299c4 <method_gnss_manage_pgps+0x38>)
   299a0:	f013 f886 	bl	3cab0 <z_log_minimal_printk>
	err = nrf_cloud_pgps_preemptive_updates();
   299a4:	f004 fb92 	bl	2e0cc <nrf_cloud_pgps_preemptive_updates>
	if (err) {
   299a8:	4602      	mov	r2, r0
   299aa:	b128      	cbz	r0, 299b8 <method_gnss_manage_pgps+0x2c>
}
   299ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("Error requesting updates: %d", err);
   299b0:	2145      	movs	r1, #69	; 0x45
   299b2:	4805      	ldr	r0, [pc, #20]	; (299c8 <method_gnss_manage_pgps+0x3c>)
   299b4:	f013 b87c 	b.w	3cab0 <z_log_minimal_printk>
}
   299b8:	bd08      	pop	{r3, pc}
   299ba:	bf00      	nop
   299bc:	200194b8 	.word	0x200194b8
   299c0:	200194ac 	.word	0x200194ac
   299c4:	0004766f 	.word	0x0004766f
   299c8:	0004769b 	.word	0x0004769b

000299cc <method_gnss_agps_request_work_fn>:
}

#if defined(CONFIG_NRF_CLOUD_AGPS) && !defined(CONFIG_LOCATION_METHOD_GNSS_AGPS_EXTERNAL)
#if defined(CONFIG_NRF_CLOUD_MQTT)
static void method_gnss_agps_request_work_fn(struct k_work *item)
{
   299cc:	b508      	push	{r3, lr}
	int err = nrf_cloud_agps_request(&agps_request);
   299ce:	4806      	ldr	r0, [pc, #24]	; (299e8 <method_gnss_agps_request_work_fn+0x1c>)
   299d0:	f002 ffea 	bl	2c9a8 <nrf_cloud_agps_request>

	if (err) {
   299d4:	4602      	mov	r2, r0
   299d6:	b128      	cbz	r0, 299e4 <method_gnss_agps_request_work_fn+0x18>
		LOG_ERR("nRF Cloud A-GPS request failed, error: %d", err);
		return;
	}

	LOG_DBG("A-GPS data requested");
}
   299d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("nRF Cloud A-GPS request failed, error: %d", err);
   299dc:	2145      	movs	r1, #69	; 0x45
   299de:	4803      	ldr	r0, [pc, #12]	; (299ec <method_gnss_agps_request_work_fn+0x20>)
   299e0:	f013 b866 	b.w	3cab0 <z_log_minimal_printk>
}
   299e4:	bd08      	pop	{r3, pc}
   299e6:	bf00      	nop
   299e8:	2001943c 	.word	0x2001943c
   299ec:	000476bd 	.word	0x000476bd

000299f0 <method_gnss_pgps_handler>:
{
   299f0:	b508      	push	{r3, lr}
	if ((event->type == PGPS_EVT_AVAILABLE) ||
   299f2:	7803      	ldrb	r3, [r0, #0]
   299f4:	2b03      	cmp	r3, #3
   299f6:	d003      	beq.n	29a00 <method_gnss_pgps_handler+0x10>
   299f8:	2b04      	cmp	r3, #4
   299fa:	d10b      	bne.n	29a14 <method_gnss_pgps_handler+0x24>
	    ((event->type == PGPS_EVT_READY) && (event->prediction != NULL))) {
   299fc:	6843      	ldr	r3, [r0, #4]
   299fe:	b17b      	cbz	r3, 29a20 <method_gnss_pgps_handler+0x30>
		prediction = event->prediction;
   29a00:	6842      	ldr	r2, [r0, #4]
   29a02:	4b08      	ldr	r3, [pc, #32]	; (29a24 <method_gnss_pgps_handler+0x34>)
   29a04:	601a      	str	r2, [r3, #0]
		k_work_submit_to_queue(location_core_work_queue_get(),
   29a06:	f7ff fefb 	bl	29800 <location_core_work_queue_get>
   29a0a:	4907      	ldr	r1, [pc, #28]	; (29a28 <method_gnss_pgps_handler+0x38>)
}
   29a0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_work_submit_to_queue(location_core_work_queue_get(),
   29a10:	f00d bc68 	b.w	372e4 <k_work_submit_to_queue>
	} else if (event->type == PGPS_EVT_REQUEST) {
   29a14:	2b05      	cmp	r3, #5
   29a16:	d103      	bne.n	29a20 <method_gnss_pgps_handler+0x30>
		k_work_submit_to_queue(location_core_work_queue_get(),
   29a18:	f7ff fef2 	bl	29800 <location_core_work_queue_get>
   29a1c:	4903      	ldr	r1, [pc, #12]	; (29a2c <method_gnss_pgps_handler+0x3c>)
   29a1e:	e7f5      	b.n	29a0c <method_gnss_pgps_handler+0x1c>
}
   29a20:	bd08      	pop	{r3, pc}
   29a22:	bf00      	nop
   29a24:	200194b8 	.word	0x200194b8
   29a28:	2001945c 	.word	0x2001945c
   29a2c:	2001947c 	.word	0x2001947c

00029a30 <method_gnss_positioning_work_fn>:
	location_core_event_cb_pgps_request(&pgps_request);
}
#endif

static void method_gnss_positioning_work_fn(struct k_work *work)
{
   29a30:	b537      	push	{r0, r1, r2, r4, r5, lr}
	lte_lc_system_mode_get(&mode, NULL);
   29a32:	2100      	movs	r1, #0
   29a34:	f10d 0007 	add.w	r0, sp, #7
   29a38:	f7fd fcc8 	bl	273cc <lte_lc_system_mode_get>
	if (mode == LTE_LC_SYSTEM_MODE_GPS) {
   29a3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   29a40:	2b03      	cmp	r3, #3
   29a42:	d00f      	beq.n	29a64 <method_gnss_positioning_work_fn+0x34>
	return z_impl_k_sem_take(sem, timeout);
   29a44:	f44f 0216 	mov.w	r2, #9830400	; 0x960000
   29a48:	2300      	movs	r3, #0
   29a4a:	4821      	ldr	r0, [pc, #132]	; (29ad0 <method_gnss_positioning_work_fn+0xa0>)
   29a4c:	f00d f9c0 	bl	36dd0 <z_impl_k_sem_take>
	if (k_sem_take(&entered_rrc_idle, K_MINUTES(SLEEP_WAIT_BACKSTOP)) == -EAGAIN) {
   29a50:	300b      	adds	r0, #11
   29a52:	d124      	bne.n	29a9e <method_gnss_positioning_work_fn+0x6e>
		if (!running) { /* Location request was cancelled */
   29a54:	4b1f      	ldr	r3, [pc, #124]	; (29ad4 <method_gnss_positioning_work_fn+0xa4>)
   29a56:	781b      	ldrb	r3, [r3, #0]
   29a58:	b1fb      	cbz	r3, 29a9a <method_gnss_positioning_work_fn+0x6a>
		LOG_WRN("RRC connection was not released in %d minutes. Starting GNSS anyway.",
   29a5a:	2205      	movs	r2, #5
   29a5c:	2157      	movs	r1, #87	; 0x57
   29a5e:	481e      	ldr	r0, [pc, #120]	; (29ad8 <method_gnss_positioning_work_fn+0xa8>)
   29a60:	f013 f826 	bl	3cab0 <z_log_minimal_printk>
		/* Location request was cancelled while waiting for RRC idle or PSM. Do nothing. */
		return;
	}

	/* Configure GNSS to continuous tracking mode */
	err = nrf_modem_gnss_fix_interval_set(1);
   29a64:	2001      	movs	r0, #1
   29a66:	f00c f8ab 	bl	35bc0 <nrf_modem_gnss_fix_interval_set>
   29a6a:	4604      	mov	r4, r0

#if defined(CONFIG_NRF_CLOUD_AGPS_ELEVATION_MASK)
	err |= nrf_modem_gnss_elevation_threshold_set(CONFIG_NRF_CLOUD_AGPS_ELEVATION_MASK);
#endif
	/* By default we take the first fix. */
	fixes_remaining = 1;
   29a6c:	2001      	movs	r0, #1

	uint8_t use_case = NRF_MODEM_GNSS_USE_CASE_MULTIPLE_HOT_START;

	switch (gnss_config.accuracy) {
   29a6e:	4d1b      	ldr	r5, [pc, #108]	; (29adc <method_gnss_positioning_work_fn+0xac>)
	fixes_remaining = 1;
   29a70:	4b1b      	ldr	r3, [pc, #108]	; (29ae0 <method_gnss_positioning_work_fn+0xb0>)
	switch (gnss_config.accuracy) {
   29a72:	78aa      	ldrb	r2, [r5, #2]
	fixes_remaining = 1;
   29a74:	6018      	str	r0, [r3, #0]
	switch (gnss_config.accuracy) {
   29a76:	b1b2      	cbz	r2, 29aa6 <method_gnss_positioning_work_fn+0x76>
   29a78:	2a02      	cmp	r2, #2
   29a7a:	d101      	bne.n	29a80 <method_gnss_positioning_work_fn+0x50>
	case LOCATION_ACCURACY_NORMAL:
		break;

	case LOCATION_ACCURACY_HIGH:
		/* In high accuracy mode, use the configured fix count. */
		fixes_remaining = gnss_config.num_consecutive_fixes;
   29a7c:	78ea      	ldrb	r2, [r5, #3]
   29a7e:	601a      	str	r2, [r3, #0]
		break;
	}

	err |= nrf_modem_gnss_use_case_set(use_case);
   29a80:	f00c f880 	bl	35b84 <nrf_modem_gnss_use_case_set>

	if (err) {
   29a84:	4304      	orrs	r4, r0
   29a86:	d010      	beq.n	29aaa <method_gnss_positioning_work_fn+0x7a>
		LOG_ERR("Failed to configure GNSS");
   29a88:	2145      	movs	r1, #69	; 0x45
   29a8a:	4816      	ldr	r0, [pc, #88]	; (29ae4 <method_gnss_positioning_work_fn+0xb4>)
   29a8c:	f013 f810 	bl	3cab0 <z_log_minimal_printk>
		location_core_event_cb_error();
   29a90:	f7ff fe8c 	bl	297ac <location_core_event_cb_error>
		running = false;
   29a94:	2200      	movs	r2, #0
   29a96:	4b0f      	ldr	r3, [pc, #60]	; (29ad4 <method_gnss_positioning_work_fn+0xa4>)
   29a98:	701a      	strb	r2, [r3, #0]
		running = false;
		return;
	}

	location_core_timer_start(gnss_config.timeout);
}
   29a9a:	b003      	add	sp, #12
   29a9c:	bd30      	pop	{r4, r5, pc}
	z_impl_k_sem_give(sem);
   29a9e:	480c      	ldr	r0, [pc, #48]	; (29ad0 <method_gnss_positioning_work_fn+0xa0>)
   29aa0:	f00d f95a 	bl	36d58 <z_impl_k_sem_give>
   29aa4:	e7de      	b.n	29a64 <method_gnss_positioning_work_fn+0x34>
	switch (gnss_config.accuracy) {
   29aa6:	2003      	movs	r0, #3
   29aa8:	e7ea      	b.n	29a80 <method_gnss_positioning_work_fn+0x50>
	err = nrf_modem_gnss_start();
   29aaa:	f00b fffb 	bl	35aa4 <nrf_modem_gnss_start>
	if (err) {
   29aae:	b140      	cbz	r0, 29ac2 <method_gnss_positioning_work_fn+0x92>
		LOG_ERR("Failed to start GNSS");
   29ab0:	2145      	movs	r1, #69	; 0x45
   29ab2:	480d      	ldr	r0, [pc, #52]	; (29ae8 <method_gnss_positioning_work_fn+0xb8>)
   29ab4:	f012 fffc 	bl	3cab0 <z_log_minimal_printk>
		location_core_event_cb_error();
   29ab8:	f7ff fe78 	bl	297ac <location_core_event_cb_error>
		running = false;
   29abc:	4b05      	ldr	r3, [pc, #20]	; (29ad4 <method_gnss_positioning_work_fn+0xa4>)
   29abe:	701c      	strb	r4, [r3, #0]
		return;
   29ac0:	e7eb      	b.n	29a9a <method_gnss_positioning_work_fn+0x6a>
	location_core_timer_start(gnss_config.timeout);
   29ac2:	8828      	ldrh	r0, [r5, #0]
}
   29ac4:	b003      	add	sp, #12
   29ac6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	location_core_timer_start(gnss_config.timeout);
   29aca:	f7ff be9d 	b.w	29808 <location_core_timer_start>
   29ace:	bf00      	nop
   29ad0:	20015060 	.word	0x20015060
   29ad4:	2001c907 	.word	0x2001c907
   29ad8:	000476ec 	.word	0x000476ec
   29adc:	2001a58a 	.word	0x2001a58a
   29ae0:	20019448 	.word	0x20019448
   29ae4:	00047736 	.word	0x00047736
   29ae8:	00047754 	.word	0x00047754

00029aec <method_gnss_lte_ind_handler>:
	switch (evt->type) {
   29aec:	7803      	ldrb	r3, [r0, #0]
   29aee:	3b01      	subs	r3, #1
   29af0:	2b09      	cmp	r3, #9
   29af2:	d821      	bhi.n	29b38 <method_gnss_lte_ind_handler+0x4c>
   29af4:	e8df f003 	tbb	[pc, r3]
   29af8:	2018200e 	.word	0x2018200e
   29afc:	20202020 	.word	0x20202020
   29b00:	050b      	.short	0x050b
		if (evt->modem_sleep.type == LTE_LC_MODEM_SLEEP_PSM) {
   29b02:	7a03      	ldrb	r3, [r0, #8]
   29b04:	2b01      	cmp	r3, #1
   29b06:	d117      	bne.n	29b38 <method_gnss_lte_ind_handler+0x4c>
   29b08:	480c      	ldr	r0, [pc, #48]	; (29b3c <method_gnss_lte_ind_handler+0x50>)
   29b0a:	f00d b925 	b.w	36d58 <z_impl_k_sem_give>
	z_impl_k_sem_reset(sem);
   29b0e:	480b      	ldr	r0, [pc, #44]	; (29b3c <method_gnss_lte_ind_handler+0x50>)
   29b10:	f00d b9c8 	b.w	36ea4 <z_impl_k_sem_reset>
		if (evt->psm_cfg.active_time == -1) {
   29b14:	68c3      	ldr	r3, [r0, #12]
   29b16:	1c5a      	adds	r2, r3, #1
   29b18:	d0f6      	beq.n	29b08 <method_gnss_lte_ind_handler+0x1c>
		} else if (evt->psm_cfg.active_time > 0) {
   29b1a:	2b00      	cmp	r3, #0
   29b1c:	dd0c      	ble.n	29b38 <method_gnss_lte_ind_handler+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   29b1e:	2200      	movs	r2, #0
   29b20:	2300      	movs	r3, #0
   29b22:	4806      	ldr	r0, [pc, #24]	; (29b3c <method_gnss_lte_ind_handler+0x50>)
   29b24:	f00d b954 	b.w	36dd0 <z_impl_k_sem_take>
		if (evt->rrc_mode == LTE_LC_RRC_MODE_CONNECTED) {
   29b28:	7a03      	ldrb	r3, [r0, #8]
   29b2a:	2b01      	cmp	r3, #1
   29b2c:	d101      	bne.n	29b32 <method_gnss_lte_ind_handler+0x46>
	z_impl_k_sem_reset(sem);
   29b2e:	4804      	ldr	r0, [pc, #16]	; (29b40 <method_gnss_lte_ind_handler+0x54>)
   29b30:	e7ee      	b.n	29b10 <method_gnss_lte_ind_handler+0x24>
		} else if (evt->rrc_mode == LTE_LC_RRC_MODE_IDLE) {
   29b32:	b90b      	cbnz	r3, 29b38 <method_gnss_lte_ind_handler+0x4c>
	z_impl_k_sem_give(sem);
   29b34:	4802      	ldr	r0, [pc, #8]	; (29b40 <method_gnss_lte_ind_handler+0x54>)
   29b36:	e7e8      	b.n	29b0a <method_gnss_lte_ind_handler+0x1e>
}
   29b38:	4770      	bx	lr
   29b3a:	bf00      	nop
   29b3c:	20015048 	.word	0x20015048
   29b40:	20015060 	.word	0x20015060

00029b44 <method_gnss_event_handler>:
	switch (event) {
   29b44:	2801      	cmp	r0, #1
{
   29b46:	b510      	push	{r4, lr}
	switch (event) {
   29b48:	d002      	beq.n	29b50 <method_gnss_event_handler+0xc>
   29b4a:	2804      	cmp	r0, #4
   29b4c:	d007      	beq.n	29b5e <method_gnss_event_handler+0x1a>
}
   29b4e:	bd10      	pop	{r4, pc}
		k_work_submit_to_queue(location_core_work_queue_get(), &method_gnss_pvt_work);
   29b50:	f7ff fe56 	bl	29800 <location_core_work_queue_get>
   29b54:	4911      	ldr	r1, [pc, #68]	; (29b9c <method_gnss_event_handler+0x58>)
}
   29b56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_work_submit_to_queue(
   29b5a:	f00d bbc3 	b.w	372e4 <k_work_submit_to_queue>
	int err = nrf_modem_gnss_read(&agps_request,
   29b5e:	4c10      	ldr	r4, [pc, #64]	; (29ba0 <method_gnss_event_handler+0x5c>)
   29b60:	2203      	movs	r2, #3
   29b62:	210c      	movs	r1, #12
   29b64:	4620      	mov	r0, r4
   29b66:	f00b fe0d 	bl	35784 <nrf_modem_gnss_read>
	if (err) {
   29b6a:	4602      	mov	r2, r0
   29b6c:	b128      	cbz	r0, 29b7a <method_gnss_event_handler+0x36>
}
   29b6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_WRN("Reading A-GPS req data from GNSS failed, error: %d", err);
   29b72:	2157      	movs	r1, #87	; 0x57
   29b74:	480b      	ldr	r0, [pc, #44]	; (29ba4 <method_gnss_event_handler+0x60>)
   29b76:	f012 bf9b 	b.w	3cab0 <z_log_minimal_printk>
		pgps_agps_request.sv_mask_ephe = agps_request.sv_mask_ephe;
   29b7a:	6821      	ldr	r1, [r4, #0]
   29b7c:	4b0a      	ldr	r3, [pc, #40]	; (29ba8 <method_gnss_event_handler+0x64>)
		agps_request.sv_mask_alm = 0;
   29b7e:	e9c4 0000 	strd	r0, r0, [r4]
	if (method_gnss_agps_required(&agps_request)) {
   29b82:	4620      	mov	r0, r4
		pgps_agps_request.sv_mask_ephe = agps_request.sv_mask_ephe;
   29b84:	6019      	str	r1, [r3, #0]
	if (method_gnss_agps_required(&agps_request)) {
   29b86:	f015 fcef 	bl	3f568 <method_gnss_agps_required>
   29b8a:	b118      	cbz	r0, 29b94 <method_gnss_event_handler+0x50>
		k_work_submit_to_queue(
   29b8c:	f7ff fe38 	bl	29800 <location_core_work_queue_get>
   29b90:	4906      	ldr	r1, [pc, #24]	; (29bac <method_gnss_event_handler+0x68>)
   29b92:	e7e0      	b.n	29b56 <method_gnss_event_handler+0x12>
		k_work_submit_to_queue(
   29b94:	f7ff fe34 	bl	29800 <location_core_work_queue_get>
   29b98:	4905      	ldr	r1, [pc, #20]	; (29bb0 <method_gnss_event_handler+0x6c>)
   29b9a:	e7dc      	b.n	29b56 <method_gnss_event_handler+0x12>
   29b9c:	2001948c 	.word	0x2001948c
   29ba0:	2001943c 	.word	0x2001943c
   29ba4:	0004776e 	.word	0x0004776e
   29ba8:	200194ac 	.word	0x200194ac
   29bac:	2001944c 	.word	0x2001944c
   29bb0:	2001946c 	.word	0x2001946c

00029bb4 <method_gnss_cancel>:
{
   29bb4:	b510      	push	{r4, lr}
	int err = nrf_modem_gnss_stop();
   29bb6:	f00b ffcb 	bl	35b50 <nrf_modem_gnss_stop>
	if ((err != 0) && (err != -NRF_EPERM)) {
   29bba:	1c43      	adds	r3, r0, #1
   29bbc:	2b01      	cmp	r3, #1
	int err = nrf_modem_gnss_stop();
   29bbe:	4604      	mov	r4, r0
	if ((err != 0) && (err != -NRF_EPERM)) {
   29bc0:	d903      	bls.n	29bca <method_gnss_cancel+0x16>
		LOG_ERR("Failed to stop GNSS");
   29bc2:	2145      	movs	r1, #69	; 0x45
   29bc4:	480a      	ldr	r0, [pc, #40]	; (29bf0 <method_gnss_cancel+0x3c>)
   29bc6:	f012 ff73 	bl	3cab0 <z_log_minimal_printk>
	running = false;
   29bca:	2200      	movs	r2, #0
   29bcc:	4b09      	ldr	r3, [pc, #36]	; (29bf4 <method_gnss_cancel+0x40>)
	(void)k_work_cancel(&method_gnss_start_work);
   29bce:	480a      	ldr	r0, [pc, #40]	; (29bf8 <method_gnss_cancel+0x44>)
	running = false;
   29bd0:	701a      	strb	r2, [r3, #0]
	(void)k_work_cancel(&method_gnss_start_work);
   29bd2:	f00d fbe1 	bl	37398 <k_work_cancel>
	return sem->count;
   29bd6:	4809      	ldr	r0, [pc, #36]	; (29bfc <method_gnss_cancel+0x48>)
	if (!sleeping) {
   29bd8:	6883      	ldr	r3, [r0, #8]
   29bda:	b90b      	cbnz	r3, 29be0 <method_gnss_cancel+0x2c>
	z_impl_k_sem_reset(sem);
   29bdc:	f00d f962 	bl	36ea4 <z_impl_k_sem_reset>
   29be0:	4807      	ldr	r0, [pc, #28]	; (29c00 <method_gnss_cancel+0x4c>)
	if (!rrc_idling) {
   29be2:	6883      	ldr	r3, [r0, #8]
   29be4:	b90b      	cbnz	r3, 29bea <method_gnss_cancel+0x36>
   29be6:	f00d f95d 	bl	36ea4 <z_impl_k_sem_reset>
}
   29bea:	4620      	mov	r0, r4
   29bec:	bd10      	pop	{r4, pc}
   29bee:	bf00      	nop
   29bf0:	000477a6 	.word	0x000477a6
   29bf4:	2001c907 	.word	0x2001c907
   29bf8:	2001949c 	.word	0x2001949c
   29bfc:	20015048 	.word	0x20015048
   29c00:	20015060 	.word	0x20015060

00029c04 <method_gnss_pvt_work_fn>:
{
   29c04:	b510      	push	{r4, lr}
	if (!running) {
   29c06:	4b2e      	ldr	r3, [pc, #184]	; (29cc0 <method_gnss_pvt_work_fn+0xbc>)
{
   29c08:	b0ba      	sub	sp, #232	; 0xe8
	if (!running) {
   29c0a:	781b      	ldrb	r3, [r3, #0]
   29c0c:	b14b      	cbz	r3, 29c22 <method_gnss_pvt_work_fn+0x1e>
	if (nrf_modem_gnss_read(&pvt_data, sizeof(pvt_data), NRF_MODEM_GNSS_DATA_PVT) != 0) {
   29c0e:	2201      	movs	r2, #1
   29c10:	21e8      	movs	r1, #232	; 0xe8
   29c12:	4668      	mov	r0, sp
   29c14:	f00b fdb6 	bl	35784 <nrf_modem_gnss_read>
   29c18:	b128      	cbz	r0, 29c26 <method_gnss_pvt_work_fn+0x22>
		LOG_ERR("Failed to read PVT data from GNSS");
   29c1a:	2145      	movs	r1, #69	; 0x45
   29c1c:	4829      	ldr	r0, [pc, #164]	; (29cc4 <method_gnss_pvt_work_fn+0xc0>)
   29c1e:	f012 ff47 	bl	3cab0 <z_log_minimal_printk>
}
   29c22:	b03a      	add	sp, #232	; 0xe8
   29c24:	bd10      	pop	{r4, pc}
	if (pvt_data.flags & NRF_MODEM_GNSS_PVT_FLAG_FIX_VALID) {
   29c26:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   29c2a:	f013 0301 	ands.w	r3, r3, #1
   29c2e:	d02a      	beq.n	29c86 <method_gnss_pvt_work_fn+0x82>
		location_result.latitude = pvt_data.latitude;
   29c30:	e9dd 0100 	ldrd	r0, r1, [sp]
		fixes_remaining--;
   29c34:	4a24      	ldr	r2, [pc, #144]	; (29cc8 <method_gnss_pvt_work_fn+0xc4>)
		location_result.method = LOCATION_METHOD_GNSS;
   29c36:	4c25      	ldr	r4, [pc, #148]	; (29ccc <method_gnss_pvt_work_fn+0xc8>)
		fixes_remaining--;
   29c38:	6813      	ldr	r3, [r2, #0]
		location_result.latitude = pvt_data.latitude;
   29c3a:	e9c4 0102 	strd	r0, r1, [r4, #8]
		location_result.longitude = pvt_data.longitude;
   29c3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
		fixes_remaining--;
   29c42:	3b01      	subs	r3, #1
   29c44:	6013      	str	r3, [r2, #0]
		location_result.method = LOCATION_METHOD_GNSS;
   29c46:	2202      	movs	r2, #2
   29c48:	7022      	strb	r2, [r4, #0]
		location_result.accuracy = pvt_data.accuracy;
   29c4a:	9a05      	ldr	r2, [sp, #20]
		location_result.longitude = pvt_data.longitude;
   29c4c:	e9c4 0104 	strd	r0, r1, [r4, #16]
		location_result.accuracy = pvt_data.accuracy;
   29c50:	61a2      	str	r2, [r4, #24]
		location_result.datetime.valid = true;
   29c52:	2201      	movs	r2, #1
		location_result.datetime.year = pvt_data.datetime.year;
   29c54:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
		location_result.datetime.valid = true;
   29c58:	7722      	strb	r2, [r4, #28]
		location_result.datetime.year = pvt_data.datetime.year;
   29c5a:	83e1      	strh	r1, [r4, #30]
		location_result.datetime.second = pvt_data.datetime.seconds;
   29c5c:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		location_result.datetime.month = pvt_data.datetime.month;
   29c60:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
		location_result.datetime.second = pvt_data.datetime.seconds;
   29c64:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
		location_result.datetime.month = pvt_data.datetime.month;
   29c68:	8421      	strh	r1, [r4, #32]
		location_result.datetime.ms = pvt_data.datetime.ms;
   29c6a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
		location_result.datetime.hour = pvt_data.datetime.hour;
   29c6e:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
		if (fixes_remaining <= 0) {
   29c72:	2b00      	cmp	r3, #0
		location_result.datetime.hour = pvt_data.datetime.hour;
   29c74:	8461      	strh	r1, [r4, #34]	; 0x22
		location_result.datetime.ms = pvt_data.datetime.ms;
   29c76:	84e2      	strh	r2, [r4, #38]	; 0x26
		if (fixes_remaining <= 0) {
   29c78:	dcd3      	bgt.n	29c22 <method_gnss_pvt_work_fn+0x1e>
			method_gnss_cancel();
   29c7a:	f7ff ff9b 	bl	29bb4 <method_gnss_cancel>
			location_core_event_cb(&location_result);
   29c7e:	4620      	mov	r0, r4
   29c80:	f7ff fcba 	bl	295f8 <location_core_event_cb>
   29c84:	e7cd      	b.n	29c22 <method_gnss_pvt_work_fn+0x1e>
	} else if (gnss_config.visibility_detection) {
   29c86:	4a12      	ldr	r2, [pc, #72]	; (29cd0 <method_gnss_pvt_work_fn+0xcc>)
   29c88:	7912      	ldrb	r2, [r2, #4]
   29c8a:	2a00      	cmp	r2, #0
   29c8c:	d0c9      	beq.n	29c22 <method_gnss_pvt_work_fn+0x1e>
		if (pvt_data.execution_time >= VISIBILITY_DETECTION_EXEC_TIME &&
   29c8e:	9a39      	ldr	r2, [sp, #228]	; 0xe4
   29c90:	f6a2 32b8 	subw	r2, r2, #3000	; 0xbb8
   29c94:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   29c98:	d2c3      	bcs.n	29c22 <method_gnss_pvt_work_fn+0x1e>
   29c9a:	466a      	mov	r2, sp
		if (pvt_data->sv[i].sv == 0) {
   29c9c:	f8b2 1052 	ldrh.w	r1, [r2, #82]	; 0x52
   29ca0:	b131      	cbz	r1, 29cb0 <method_gnss_pvt_work_fn+0xac>
		tracked++;
   29ca2:	3301      	adds	r3, #1
   29ca4:	b2db      	uxtb	r3, r3
	for (uint32_t i = 0; i < NRF_MODEM_GNSS_MAX_SATELLITES; i++) {
   29ca6:	2b0c      	cmp	r3, #12
   29ca8:	f102 020c 	add.w	r2, r2, #12
   29cac:	d1f6      	bne.n	29c9c <method_gnss_pvt_work_fn+0x98>
   29cae:	e7b8      	b.n	29c22 <method_gnss_pvt_work_fn+0x1e>
		    pvt_data.execution_time < (VISIBILITY_DETECTION_EXEC_TIME + MSEC_PER_SEC) &&
   29cb0:	2b02      	cmp	r3, #2
   29cb2:	d8b6      	bhi.n	29c22 <method_gnss_pvt_work_fn+0x1e>
			method_gnss_cancel();
   29cb4:	f7ff ff7e 	bl	29bb4 <method_gnss_cancel>
			location_core_event_cb_error();
   29cb8:	f7ff fd78 	bl	297ac <location_core_event_cb_error>
   29cbc:	e7b1      	b.n	29c22 <method_gnss_pvt_work_fn+0x1e>
   29cbe:	bf00      	nop
   29cc0:	2001c907 	.word	0x2001c907
   29cc4:	000477bf 	.word	0x000477bf
   29cc8:	20019448 	.word	0x20019448
   29ccc:	20015718 	.word	0x20015718
   29cd0:	2001a58a 	.word	0x2001a58a

00029cd4 <method_gnss_location_get>:

int method_gnss_location_get(const struct location_method_config *config)
{
   29cd4:	b530      	push	{r4, r5, lr}
	int err;

	gnss_config = config->gnss;
   29cd6:	f8d0 2002 	ldr.w	r2, [r0, #2]
   29cda:	4b19      	ldr	r3, [pc, #100]	; (29d40 <method_gnss_location_get+0x6c>)
{
   29cdc:	b085      	sub	sp, #20
	gnss_config = config->gnss;
   29cde:	601a      	str	r2, [r3, #0]
   29ce0:	88c2      	ldrh	r2, [r0, #6]

	/* GNSS event handler is already set once in method_gnss_init(). If no other thread is
	 * using GNSS, setting it again is not needed.
	 */
	err = nrf_modem_gnss_event_handler_set(method_gnss_event_handler);
   29ce2:	4818      	ldr	r0, [pc, #96]	; (29d44 <method_gnss_location_get+0x70>)
	gnss_config = config->gnss;
   29ce4:	809a      	strh	r2, [r3, #4]
	err = nrf_modem_gnss_event_handler_set(method_gnss_event_handler);
   29ce6:	f00b ff89 	bl	35bfc <nrf_modem_gnss_event_handler_set>
	if (err) {
   29cea:	4604      	mov	r4, r0
   29cec:	b138      	cbz	r0, 29cfe <method_gnss_location_get+0x2a>
		LOG_ERR("Failed to set GNSS event handler, error %d", err);
   29cee:	4602      	mov	r2, r0
   29cf0:	2145      	movs	r1, #69	; 0x45
   29cf2:	4815      	ldr	r0, [pc, #84]	; (29d48 <method_gnss_location_get+0x74>)
   29cf4:	f012 fedc 	bl	3cab0 <z_log_minimal_printk>
	k_work_submit_to_queue(location_core_work_queue_get(), &method_gnss_start_work);

	running = true;

	return 0;
}
   29cf8:	4620      	mov	r0, r4
   29cfa:	b005      	add	sp, #20
   29cfc:	bd30      	pop	{r4, r5, pc}
	if (!initialized) {
   29cfe:	4d13      	ldr	r5, [pc, #76]	; (29d4c <method_gnss_location_get+0x78>)
   29d00:	782b      	ldrb	r3, [r5, #0]
   29d02:	b963      	cbnz	r3, 29d1e <method_gnss_location_get+0x4a>
		struct nrf_cloud_pgps_init_param param = {
   29d04:	4b12      	ldr	r3, [pc, #72]	; (29d50 <method_gnss_location_get+0x7c>)
   29d06:	9003      	str	r0, [sp, #12]
   29d08:	e9cd 3001 	strd	r3, r0, [sp, #4]
		err = nrf_cloud_pgps_init(&param);
   29d0c:	a801      	add	r0, sp, #4
   29d0e:	f004 fc39 	bl	2e584 <nrf_cloud_pgps_init>
		if (err) {
   29d12:	4602      	mov	r2, r0
   29d14:	b180      	cbz	r0, 29d38 <method_gnss_location_get+0x64>
			LOG_ERR("Error from PGPS init: %d", err);
   29d16:	2145      	movs	r1, #69	; 0x45
   29d18:	480e      	ldr	r0, [pc, #56]	; (29d54 <method_gnss_location_get+0x80>)
   29d1a:	f012 fec9 	bl	3cab0 <z_log_minimal_printk>
	nrf_modem_gnss_start();
   29d1e:	f00b fec1 	bl	35aa4 <nrf_modem_gnss_start>
	nrf_modem_gnss_stop();
   29d22:	f00b ff15 	bl	35b50 <nrf_modem_gnss_stop>
	k_work_submit_to_queue(location_core_work_queue_get(), &method_gnss_start_work);
   29d26:	f7ff fd6b 	bl	29800 <location_core_work_queue_get>
   29d2a:	490b      	ldr	r1, [pc, #44]	; (29d58 <method_gnss_location_get+0x84>)
   29d2c:	f00d fada 	bl	372e4 <k_work_submit_to_queue>
	running = true;
   29d30:	2201      	movs	r2, #1
   29d32:	4b0a      	ldr	r3, [pc, #40]	; (29d5c <method_gnss_location_get+0x88>)
   29d34:	701a      	strb	r2, [r3, #0]
	return 0;
   29d36:	e7df      	b.n	29cf8 <method_gnss_location_get+0x24>
			initialized = true;
   29d38:	2301      	movs	r3, #1
   29d3a:	702b      	strb	r3, [r5, #0]
   29d3c:	e7ef      	b.n	29d1e <method_gnss_location_get+0x4a>
   29d3e:	bf00      	nop
   29d40:	2001a58a 	.word	0x2001a58a
   29d44:	00029b45 	.word	0x00029b45
   29d48:	000477e6 	.word	0x000477e6
   29d4c:	2001c906 	.word	0x2001c906
   29d50:	000299f1 	.word	0x000299f1
   29d54:	00047816 	.word	0x00047816
   29d58:	2001949c 	.word	0x2001949c
   29d5c:	2001c907 	.word	0x2001c907

00029d60 <method_gnss_init>:

int method_gnss_init(void)
{
	int err;
	running = false;
   29d60:	2200      	movs	r2, #0
   29d62:	4b13      	ldr	r3, [pc, #76]	; (29db0 <method_gnss_init+0x50>)
{
   29d64:	b510      	push	{r4, lr}

	err = nrf_modem_gnss_event_handler_set(method_gnss_event_handler);
   29d66:	4813      	ldr	r0, [pc, #76]	; (29db4 <method_gnss_init+0x54>)
	running = false;
   29d68:	701a      	strb	r2, [r3, #0]
	err = nrf_modem_gnss_event_handler_set(method_gnss_event_handler);
   29d6a:	f00b ff47 	bl	35bfc <nrf_modem_gnss_event_handler_set>
	if (err) {
   29d6e:	4604      	mov	r4, r0
   29d70:	b130      	cbz	r0, 29d80 <method_gnss_init+0x20>
		LOG_ERR("Failed to set GNSS event handler, error %d", err);
   29d72:	4602      	mov	r2, r0
   29d74:	2145      	movs	r1, #69	; 0x45
   29d76:	4810      	ldr	r0, [pc, #64]	; (29db8 <method_gnss_init+0x58>)
   29d78:	f012 fe9a 	bl	3cab0 <z_log_minimal_printk>
	/* Subscribe to sleep notification to monitor when modem enters power saving mode */
	method_gnss_modem_sleep_notif_subscribe(MIN_SLEEP_DURATION_FOR_STARTING_GNSS);
#endif
	lte_lc_register_handler(method_gnss_lte_ind_handler);
	return 0;
}
   29d7c:	4620      	mov	r0, r4
   29d7e:	bd10      	pop	{r4, pc}
	k_work_init(&method_gnss_pvt_work, method_gnss_pvt_work_fn);
   29d80:	490e      	ldr	r1, [pc, #56]	; (29dbc <method_gnss_init+0x5c>)
   29d82:	480f      	ldr	r0, [pc, #60]	; (29dc0 <method_gnss_init+0x60>)
   29d84:	f00d fa56 	bl	37234 <k_work_init>
	k_work_init(&method_gnss_start_work, method_gnss_positioning_work_fn);
   29d88:	490e      	ldr	r1, [pc, #56]	; (29dc4 <method_gnss_init+0x64>)
   29d8a:	480f      	ldr	r0, [pc, #60]	; (29dc8 <method_gnss_init+0x68>)
   29d8c:	f00d fa52 	bl	37234 <k_work_init>
	k_work_init(&method_gnss_agps_request_work, method_gnss_agps_request_work_fn);
   29d90:	490e      	ldr	r1, [pc, #56]	; (29dcc <method_gnss_init+0x6c>)
   29d92:	480f      	ldr	r0, [pc, #60]	; (29dd0 <method_gnss_init+0x70>)
   29d94:	f00d fa4e 	bl	37234 <k_work_init>
	k_work_init(&method_gnss_manage_pgps_work, method_gnss_manage_pgps);
   29d98:	490e      	ldr	r1, [pc, #56]	; (29dd4 <method_gnss_init+0x74>)
   29d9a:	480f      	ldr	r0, [pc, #60]	; (29dd8 <method_gnss_init+0x78>)
   29d9c:	f00d fa4a 	bl	37234 <k_work_init>
	k_work_init(&method_gnss_notify_pgps_work, method_gnss_notify_pgps);
   29da0:	490e      	ldr	r1, [pc, #56]	; (29ddc <method_gnss_init+0x7c>)
   29da2:	480f      	ldr	r0, [pc, #60]	; (29de0 <method_gnss_init+0x80>)
   29da4:	f00d fa46 	bl	37234 <k_work_init>
	lte_lc_register_handler(method_gnss_lte_ind_handler);
   29da8:	480e      	ldr	r0, [pc, #56]	; (29de4 <method_gnss_init+0x84>)
   29daa:	f7fd f971 	bl	27090 <lte_lc_register_handler>
	return 0;
   29dae:	e7e5      	b.n	29d7c <method_gnss_init+0x1c>
   29db0:	2001c907 	.word	0x2001c907
   29db4:	00029b45 	.word	0x00029b45
   29db8:	000477e6 	.word	0x000477e6
   29dbc:	00029c05 	.word	0x00029c05
   29dc0:	2001948c 	.word	0x2001948c
   29dc4:	00029a31 	.word	0x00029a31
   29dc8:	2001949c 	.word	0x2001949c
   29dcc:	000299cd 	.word	0x000299cd
   29dd0:	2001944c 	.word	0x2001944c
   29dd4:	0002998d 	.word	0x0002998d
   29dd8:	2001945c 	.word	0x2001945c
   29ddc:	00029971 	.word	0x00029971
   29de0:	2001946c 	.word	0x2001946c
   29de4:	00029aed 	.word	0x00029aed

00029de8 <method_cellular_positioning_work_fn>:
	}
	return 0;
}

static void method_cellular_positioning_work_fn(struct k_work *work)
{
   29de8:	b570      	push	{r4, r5, r6, lr}
   29dea:	4604      	mov	r4, r0
   29dec:	b090      	sub	sp, #64	; 0x40
	struct multicell_location location;
	struct location_data location_result = { 0 };
   29dee:	2228      	movs	r2, #40	; 0x28
   29df0:	2100      	movs	r1, #0
   29df2:	a806      	add	r0, sp, #24
   29df4:	f017 faf6 	bl	413e4 <memset>
	int ret;
	struct method_cellular_positioning_work_args *work_data =
		CONTAINER_OF(work, struct method_cellular_positioning_work_args, work_item);
	const struct location_cellular_config cellular_config = work_data->cellular_config;

	location_core_timer_start(cellular_config.timeout);
   29df8:	8a20      	ldrh	r0, [r4, #16]
	const struct location_cellular_config cellular_config = work_data->cellular_config;
   29dfa:	7ca6      	ldrb	r6, [r4, #18]
	location_core_timer_start(cellular_config.timeout);
   29dfc:	f7ff fd04 	bl	29808 <location_core_timer_start>
	struct location_utils_modem_params_info modem_params = { 0 };
   29e00:	2214      	movs	r2, #20
   29e02:	2100      	movs	r1, #0
   29e04:	a801      	add	r0, sp, #4
   29e06:	f017 faed 	bl	413e4 <memset>
	err = lte_lc_neighbor_cell_measurement(LTE_LC_NEIGHBOR_SEARCH_TYPE_DEFAULT);
   29e0a:	2000      	movs	r0, #0
   29e0c:	f7fd fce2 	bl	277d4 <lte_lc_neighbor_cell_measurement>
	if (err) {
   29e10:	4d34      	ldr	r5, [pc, #208]	; (29ee4 <method_cellular_positioning_work_fn+0xfc>)
   29e12:	4602      	mov	r2, r0
   29e14:	b358      	cbz	r0, 29e6e <method_cellular_positioning_work_fn+0x86>
		LOG_WRN("Failed to initiate neighbor cell measurements: %d, "
   29e16:	2157      	movs	r1, #87	; 0x57
   29e18:	4833      	ldr	r0, [pc, #204]	; (29ee8 <method_cellular_positioning_work_fn+0x100>)
   29e1a:	f012 fe49 	bl	3cab0 <z_log_minimal_printk>
		err = location_utils_modem_params_read(&modem_params);
   29e1e:	a801      	add	r0, sp, #4
   29e20:	f7ff fd0e 	bl	29840 <location_utils_modem_params_read>
		if (err < 0) {
   29e24:	2800      	cmp	r0, #0
   29e26:	da0d      	bge.n	29e44 <method_cellular_positioning_work_fn+0x5c>
			LOG_ERR("Could not obtain modem parameters");
   29e28:	2145      	movs	r1, #69	; 0x45
   29e2a:	4830      	ldr	r0, [pc, #192]	; (29eec <method_cellular_positioning_work_fn+0x104>)
   29e2c:	f012 fe40 	bl	3cab0 <z_log_minimal_printk>

	LOG_DBG("Triggering neighbor cell measurements");
	ret = method_cellular_ncellmeas_start();
	if (ret) {
		LOG_WRN("Cannot start neighbor cell measurements");
   29e30:	2157      	movs	r1, #87	; 0x57
   29e32:	482f      	ldr	r0, [pc, #188]	; (29ef0 <method_cellular_positioning_work_fn+0x108>)
	if (!running) {
		return;
	}

	if (cell_data.current_cell.id == LTE_LC_CELL_EUTRAN_ID_INVALID) {
		LOG_WRN("Current cell ID not valid");
   29e34:	f012 fe3c 	bl	3cab0 <z_log_minimal_printk>
		location_core_event_cb_error();
   29e38:	f7ff fcb8 	bl	297ac <location_core_event_cb_error>
		running = false;
   29e3c:	2300      	movs	r3, #0
   29e3e:	702b      	strb	r3, [r5, #0]
		if (running) {
			running = false;
			location_core_event_cb(&location_result);
		}
	}
}
   29e40:	b010      	add	sp, #64	; 0x40
   29e42:	bd70      	pop	{r4, r5, r6, pc}
		memset(&cell_data, 0, sizeof(struct lte_lc_cells_info));
   29e44:	4c2b      	ldr	r4, [pc, #172]	; (29ef4 <method_cellular_positioning_work_fn+0x10c>)
   29e46:	2228      	movs	r2, #40	; 0x28
   29e48:	2100      	movs	r1, #0
   29e4a:	f104 0010 	add.w	r0, r4, #16
   29e4e:	f017 fac9 	bl	413e4 <memset>
		cell_data.current_cell.mcc = modem_params.mcc;
   29e52:	9b01      	ldr	r3, [sp, #4]
   29e54:	6023      	str	r3, [r4, #0]
		cell_data.current_cell.mnc = modem_params.mnc;
   29e56:	9b02      	ldr	r3, [sp, #8]
   29e58:	6063      	str	r3, [r4, #4]
		cell_data.current_cell.tac = modem_params.tac;
   29e5a:	9b04      	ldr	r3, [sp, #16]
   29e5c:	60e3      	str	r3, [r4, #12]
		cell_data.current_cell.id = modem_params.cell_id;
   29e5e:	9b03      	ldr	r3, [sp, #12]
   29e60:	60a3      	str	r3, [r4, #8]
		cell_data.current_cell.phys_cell_id = modem_params.phys_cell_id;
   29e62:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   29e66:	8523      	strh	r3, [r4, #40]	; 0x28
	z_impl_k_sem_give(sem);
   29e68:	4823      	ldr	r0, [pc, #140]	; (29ef8 <method_cellular_positioning_work_fn+0x110>)
   29e6a:	f00c ff75 	bl	36d58 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   29e6e:	f04f 33ff 	mov.w	r3, #4294967295
   29e72:	f04f 32ff 	mov.w	r2, #4294967295
   29e76:	4820      	ldr	r0, [pc, #128]	; (29ef8 <method_cellular_positioning_work_fn+0x110>)
   29e78:	f00c ffaa 	bl	36dd0 <z_impl_k_sem_take>
	if (!running) {
   29e7c:	782b      	ldrb	r3, [r5, #0]
   29e7e:	2b00      	cmp	r3, #0
   29e80:	d0de      	beq.n	29e40 <method_cellular_positioning_work_fn+0x58>
	if (cell_data.current_cell.id == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   29e82:	4c1c      	ldr	r4, [pc, #112]	; (29ef4 <method_cellular_positioning_work_fn+0x10c>)
   29e84:	68a3      	ldr	r3, [r4, #8]
   29e86:	3301      	adds	r3, #1
   29e88:	d102      	bne.n	29e90 <method_cellular_positioning_work_fn+0xa8>
		LOG_WRN("Current cell ID not valid");
   29e8a:	2157      	movs	r1, #87	; 0x57
   29e8c:	481b      	ldr	r0, [pc, #108]	; (29efc <method_cellular_positioning_work_fn+0x114>)
   29e8e:	e7d1      	b.n	29e34 <method_cellular_positioning_work_fn+0x4c>
	location_utils_systime_to_location_datetime(&location_result.datetime);
   29e90:	a80d      	add	r0, sp, #52	; 0x34
   29e92:	f7ff fd35 	bl	29900 <location_utils_systime_to_location_datetime>
	ret = multicell_location_get(cellular_config.service, &cell_data, &location);
   29e96:	4621      	mov	r1, r4
   29e98:	4630      	mov	r0, r6
   29e9a:	aa01      	add	r2, sp, #4
   29e9c:	f7ff f92c 	bl	290f8 <multicell_location_get>
	if (ret) {
   29ea0:	4604      	mov	r4, r0
   29ea2:	b138      	cbz	r0, 29eb4 <method_cellular_positioning_work_fn+0xcc>
		LOG_ERR("Failed to acquire location from multicell_location lib, error: %d", ret);
   29ea4:	4602      	mov	r2, r0
   29ea6:	2145      	movs	r1, #69	; 0x45
   29ea8:	4815      	ldr	r0, [pc, #84]	; (29f00 <method_cellular_positioning_work_fn+0x118>)
   29eaa:	f012 fe01 	bl	3cab0 <z_log_minimal_printk>
		location_core_event_cb_error();
   29eae:	f7ff fc7d 	bl	297ac <location_core_event_cb_error>
   29eb2:	e7c5      	b.n	29e40 <method_cellular_positioning_work_fn+0x58>
		location_result.method = LOCATION_METHOD_CELLULAR;
   29eb4:	2301      	movs	r3, #1
		location_result.latitude = location.latitude;
   29eb6:	9801      	ldr	r0, [sp, #4]
		location_result.method = LOCATION_METHOD_CELLULAR;
   29eb8:	f88d 3018 	strb.w	r3, [sp, #24]
		location_result.latitude = location.latitude;
   29ebc:	f7f2 fc24 	bl	1c708 <__aeabi_f2d>
   29ec0:	e9cd 0108 	strd	r0, r1, [sp, #32]
		location_result.longitude = location.longitude;
   29ec4:	9802      	ldr	r0, [sp, #8]
   29ec6:	f7f2 fc1f 	bl	1c708 <__aeabi_f2d>
		location_result.accuracy = location.accuracy;
   29eca:	9b03      	ldr	r3, [sp, #12]
		location_result.longitude = location.longitude;
   29ecc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		location_result.accuracy = location.accuracy;
   29ed0:	930c      	str	r3, [sp, #48]	; 0x30
		if (running) {
   29ed2:	782b      	ldrb	r3, [r5, #0]
   29ed4:	2b00      	cmp	r3, #0
   29ed6:	d0b3      	beq.n	29e40 <method_cellular_positioning_work_fn+0x58>
			location_core_event_cb(&location_result);
   29ed8:	a806      	add	r0, sp, #24
			running = false;
   29eda:	702c      	strb	r4, [r5, #0]
			location_core_event_cb(&location_result);
   29edc:	f7ff fb8c 	bl	295f8 <location_core_event_cb>
   29ee0:	e7ae      	b.n	29e40 <method_cellular_positioning_work_fn+0x58>
   29ee2:	bf00      	nop
   29ee4:	2001c908 	.word	0x2001c908
   29ee8:	00047834 	.word	0x00047834
   29eec:	00047893 	.word	0x00047893
   29ef0:	000478ba 	.word	0x000478ba
   29ef4:	20014590 	.word	0x20014590
   29ef8:	20015018 	.word	0x20015018
   29efc:	000478e7 	.word	0x000478e7
   29f00:	00047906 	.word	0x00047906

00029f04 <method_cellular_lte_ind_handler>:
{
   29f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (evt->type) {
   29f06:	7803      	ldrb	r3, [r0, #0]
{
   29f08:	4604      	mov	r4, r0
	switch (evt->type) {
   29f0a:	2b07      	cmp	r3, #7
   29f0c:	d127      	bne.n	29f5e <method_cellular_lte_ind_handler+0x5a>
		memcpy(&cell_data.current_cell,
   29f0e:	4a14      	ldr	r2, [pc, #80]	; (29f60 <method_cellular_lte_ind_handler+0x5c>)
   29f10:	f100 0308 	add.w	r3, r0, #8
   29f14:	4616      	mov	r6, r2
   29f16:	f100 0738 	add.w	r7, r0, #56	; 0x38
   29f1a:	4615      	mov	r5, r2
   29f1c:	6818      	ldr	r0, [r3, #0]
   29f1e:	6859      	ldr	r1, [r3, #4]
   29f20:	3308      	adds	r3, #8
   29f22:	c503      	stmia	r5!, {r0, r1}
   29f24:	42bb      	cmp	r3, r7
   29f26:	462a      	mov	r2, r5
   29f28:	d1f7      	bne.n	29f1a <method_cellular_lte_ind_handler+0x16>
		if (evt->cells_info.ncells_count > 0 && evt->cells_info.neighbor_cells) {
   29f2a:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   29f2e:	b172      	cbz	r2, 29f4e <method_cellular_lte_ind_handler+0x4a>
   29f30:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   29f32:	b161      	cbz	r1, 29f4e <method_cellular_lte_ind_handler+0x4a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   29f34:	6b70      	ldr	r0, [r6, #52]	; 0x34
   29f36:	0112      	lsls	r2, r2, #4
   29f38:	f017 fa34 	bl	413a4 <memcpy>
			cell_data.ncells_count = evt->cells_info.ncells_count;
   29f3c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   29f40:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
	z_impl_k_sem_give(sem);
   29f44:	4807      	ldr	r0, [pc, #28]	; (29f64 <method_cellular_lte_ind_handler+0x60>)
}
   29f46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   29f4a:	f00c bf05 	b.w	36d58 <z_impl_k_sem_give>
			cell_data.ncells_count = 0;
   29f4e:	2300      	movs	r3, #0
			LOG_INF("No neighbor cell information from modem.");
   29f50:	2149      	movs	r1, #73	; 0x49
   29f52:	4805      	ldr	r0, [pc, #20]	; (29f68 <method_cellular_lte_ind_handler+0x64>)
			cell_data.ncells_count = 0;
   29f54:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
			LOG_INF("No neighbor cell information from modem.");
   29f58:	f012 fdaa 	bl	3cab0 <z_log_minimal_printk>
   29f5c:	e7f2      	b.n	29f44 <method_cellular_lte_ind_handler+0x40>
}
   29f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29f60:	20014590 	.word	0x20014590
   29f64:	20015018 	.word	0x20015018
   29f68:	0004794d 	.word	0x0004794d

00029f6c <method_cellular_location_get>:

int method_cellular_location_get(const struct location_method_config *config)
{
   29f6c:	b510      	push	{r4, lr}
	/* Note: LTE status not checked, let it fail in NCELLMEAS if no connection */

	method_cellular_positioning_work.cellular_config = config->cellular;
   29f6e:	f8d0 0002 	ldr.w	r0, [r0, #2]
   29f72:	4c06      	ldr	r4, [pc, #24]	; (29f8c <method_cellular_location_get+0x20>)
   29f74:	6120      	str	r0, [r4, #16]
	k_work_submit_to_queue(location_core_work_queue_get(),
   29f76:	f7ff fc43 	bl	29800 <location_core_work_queue_get>
   29f7a:	4621      	mov	r1, r4
   29f7c:	f00d f9b2 	bl	372e4 <k_work_submit_to_queue>
			       &method_cellular_positioning_work.work_item);

	running = true;
   29f80:	2201      	movs	r2, #1
   29f82:	4b03      	ldr	r3, [pc, #12]	; (29f90 <method_cellular_location_get+0x24>)

	return 0;
}
   29f84:	2000      	movs	r0, #0
	running = true;
   29f86:	701a      	strb	r2, [r3, #0]
}
   29f88:	bd10      	pop	{r4, pc}
   29f8a:	bf00      	nop
   29f8c:	200194bc 	.word	0x200194bc
   29f90:	2001c908 	.word	0x2001c908

00029f94 <method_cellular_cancel>:

int method_cellular_cancel(void)
{
   29f94:	b538      	push	{r3, r4, r5, lr}
	if (running) {
   29f96:	4d09      	ldr	r5, [pc, #36]	; (29fbc <method_cellular_cancel+0x28>)
   29f98:	782b      	ldrb	r3, [r5, #0]
   29f9a:	b15b      	cbz	r3, 29fb4 <method_cellular_cancel+0x20>
		(void)lte_lc_neighbor_cell_measurement_cancel();
		(void)k_work_cancel(&method_cellular_positioning_work.work_item);
		running = false;
   29f9c:	2400      	movs	r4, #0
		(void)lte_lc_neighbor_cell_measurement_cancel();
   29f9e:	f7fd fc2f 	bl	27800 <lte_lc_neighbor_cell_measurement_cancel>
		(void)k_work_cancel(&method_cellular_positioning_work.work_item);
   29fa2:	4807      	ldr	r0, [pc, #28]	; (29fc0 <method_cellular_cancel+0x2c>)
   29fa4:	f00d f9f8 	bl	37398 <k_work_cancel>
		running = false;
   29fa8:	702c      	strb	r4, [r5, #0]
	z_impl_k_sem_reset(sem);
   29faa:	4806      	ldr	r0, [pc, #24]	; (29fc4 <method_cellular_cancel+0x30>)
   29fac:	f00c ff7a 	bl	36ea4 <z_impl_k_sem_reset>
		k_sem_reset(&cellmeas_data_ready);
	} else {
		return -EPERM;
	}

	return 0;
   29fb0:	4620      	mov	r0, r4
}
   29fb2:	bd38      	pop	{r3, r4, r5, pc}
		return -EPERM;
   29fb4:	f04f 30ff 	mov.w	r0, #4294967295
   29fb8:	e7fb      	b.n	29fb2 <method_cellular_cancel+0x1e>
   29fba:	bf00      	nop
   29fbc:	2001c908 	.word	0x2001c908
   29fc0:	200194bc 	.word	0x200194bc
   29fc4:	20015018 	.word	0x20015018

00029fc8 <method_cellular_init>:

int method_cellular_init(void)
{
   29fc8:	b510      	push	{r4, lr}
	int ret;

	running = false;
   29fca:	2400      	movs	r4, #0
   29fcc:	4b0d      	ldr	r3, [pc, #52]	; (2a004 <method_cellular_init+0x3c>)

	k_work_init(&method_cellular_positioning_work.work_item,
   29fce:	490e      	ldr	r1, [pc, #56]	; (2a008 <method_cellular_init+0x40>)
   29fd0:	480e      	ldr	r0, [pc, #56]	; (2a00c <method_cellular_init+0x44>)
	running = false;
   29fd2:	701c      	strb	r4, [r3, #0]
	k_work_init(&method_cellular_positioning_work.work_item,
   29fd4:	f00d f92e 	bl	37234 <k_work_init>
		    method_cellular_positioning_work_fn);
	lte_lc_register_handler(method_cellular_lte_ind_handler);
   29fd8:	480d      	ldr	r0, [pc, #52]	; (2a010 <method_cellular_init+0x48>)
   29fda:	f7fd f859 	bl	27090 <lte_lc_register_handler>

	ret = multicell_location_provision_certificate(false);
   29fde:	4620      	mov	r0, r4
   29fe0:	f7ff f8b8 	bl	29154 <multicell_location_provision_certificate>
	if (ret) {
   29fe4:	4604      	mov	r4, r0
   29fe6:	b158      	cbz	r0, 2a000 <method_cellular_init+0x38>
		LOG_ERR("Certificate provisioning failed, ret %d", ret);
   29fe8:	4602      	mov	r2, r0
   29fea:	2145      	movs	r1, #69	; 0x45
   29fec:	4809      	ldr	r0, [pc, #36]	; (2a014 <method_cellular_init+0x4c>)
   29fee:	f012 fd5f 	bl	3cab0 <z_log_minimal_printk>
		if (ret == -EACCES) {
   29ff2:	f114 0f0d 	cmn.w	r4, #13
   29ff6:	d103      	bne.n	2a000 <method_cellular_init+0x38>
			LOG_WRN("err: -EACCESS, that might indicate that modem is in state where "
   29ff8:	2157      	movs	r1, #87	; 0x57
   29ffa:	4807      	ldr	r0, [pc, #28]	; (2a018 <method_cellular_init+0x50>)
   29ffc:	f012 fd58 	bl	3cab0 <z_log_minimal_printk>
		}
		return ret;
	}

	return 0;
}
   2a000:	4620      	mov	r0, r4
   2a002:	bd10      	pop	{r4, pc}
   2a004:	2001c908 	.word	0x2001c908
   2a008:	00029de9 	.word	0x00029de9
   2a00c:	200194bc 	.word	0x200194bc
   2a010:	00029f05 	.word	0x00029f05
   2a014:	0004797b 	.word	0x0004797b
   2a018:	000479a8 	.word	0x000479a8

0002a01c <on_modem_lib_init>:
LOG_MODULE_REGISTER(modem_antenna, CONFIG_MODEM_ANTENNA_LOG_LEVEL);

NRF_MODEM_LIB_ON_INIT(gnss_cfg_init_hook, on_modem_lib_init, NULL);

static void on_modem_lib_init(int ret, void *ctx)
{
   2a01c:	b508      	push	{r3, lr}
	if (ret != 0) {
   2a01e:	b9d8      	cbnz	r0, 2a058 <on_modem_lib_init+0x3c>
		return;
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_MAGPIO) > 0) {
   2a020:	480e      	ldr	r0, [pc, #56]	; (2a05c <on_modem_lib_init+0x40>)
   2a022:	f7f3 f90e 	bl	1d242 <strlen>
   2a026:	b140      	cbz	r0, 2a03a <on_modem_lib_init+0x1e>
		LOG_DBG("Setting MAGPIO configuration: %s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
		if (nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_MAGPIO) != 0) {
   2a028:	490c      	ldr	r1, [pc, #48]	; (2a05c <on_modem_lib_init+0x40>)
   2a02a:	480d      	ldr	r0, [pc, #52]	; (2a060 <on_modem_lib_init+0x44>)
   2a02c:	f00a ffec 	bl	35008 <nrf_modem_at_printf>
   2a030:	b118      	cbz	r0, 2a03a <on_modem_lib_init+0x1e>
			LOG_ERR("Failed to set MAGPIO configuration");
   2a032:	2145      	movs	r1, #69	; 0x45
   2a034:	480b      	ldr	r0, [pc, #44]	; (2a064 <on_modem_lib_init+0x48>)
   2a036:	f012 fd3b 	bl	3cab0 <z_log_minimal_printk>
		}
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_COEX0) > 0) {
   2a03a:	480b      	ldr	r0, [pc, #44]	; (2a068 <on_modem_lib_init+0x4c>)
   2a03c:	f7f3 f901 	bl	1d242 <strlen>
   2a040:	b150      	cbz	r0, 2a058 <on_modem_lib_init+0x3c>
		LOG_DBG("Setting COEX0 configuration: %s", CONFIG_MODEM_ANTENNA_AT_COEX0);
		if (nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_COEX0) != 0) {
   2a042:	4909      	ldr	r1, [pc, #36]	; (2a068 <on_modem_lib_init+0x4c>)
   2a044:	4806      	ldr	r0, [pc, #24]	; (2a060 <on_modem_lib_init+0x44>)
   2a046:	f00a ffdf 	bl	35008 <nrf_modem_at_printf>
   2a04a:	b128      	cbz	r0, 2a058 <on_modem_lib_init+0x3c>
			LOG_ERR("Failed to set COEX0 configuration");
		}
	}
}
   2a04c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			LOG_ERR("Failed to set COEX0 configuration");
   2a050:	2145      	movs	r1, #69	; 0x45
   2a052:	4806      	ldr	r0, [pc, #24]	; (2a06c <on_modem_lib_init+0x50>)
   2a054:	f012 bd2c 	b.w	3cab0 <z_log_minimal_printk>
}
   2a058:	bd08      	pop	{r3, pc}
   2a05a:	bf00      	nop
   2a05c:	00043e70 	.word	0x00043e70
   2a060:	0004a259 	.word	0x0004a259
   2a064:	00047a23 	.word	0x00047a23
   2a068:	00043e8f 	.word	0x00043e8f
   2a06c:	00047a4b 	.word	0x00047a4b

0002a070 <json_item_string_exists>:
	return err;
}

static bool json_item_string_exists(const cJSON *const obj, const char *const key,
				    const char *const val)
{
   2a070:	b570      	push	{r4, r5, r6, lr}
   2a072:	460e      	mov	r6, r1
   2a074:	4615      	mov	r5, r2
	__ASSERT_NO_MSG(obj != NULL);
   2a076:	4604      	mov	r4, r0
   2a078:	b950      	cbnz	r0, 2a090 <json_item_string_exists+0x20>
   2a07a:	4911      	ldr	r1, [pc, #68]	; (2a0c0 <json_item_string_exists+0x50>)
   2a07c:	4811      	ldr	r0, [pc, #68]	; (2a0c4 <json_item_string_exists+0x54>)
   2a07e:	f240 52a3 	movw	r2, #1443	; 0x5a3
   2a082:	f012 fcdb 	bl	3ca3c <assert_print>
   2a086:	f240 51a3 	movw	r1, #1443	; 0x5a3
   2a08a:	480d      	ldr	r0, [pc, #52]	; (2a0c0 <json_item_string_exists+0x50>)
   2a08c:	f012 fccf 	bl	3ca2e <assert_post_action>
	__ASSERT_NO_MSG(key != NULL);

	char *str_val;
	cJSON *item = cJSON_GetObjectItem(obj, key);
   2a090:	4631      	mov	r1, r6
   2a092:	4620      	mov	r0, r4
   2a094:	f015 fd3e 	bl	3fb14 <cJSON_GetObjectItem>

	if (!item) {
   2a098:	b148      	cbz	r0, 2a0ae <json_item_string_exists+0x3e>
		return false;
	}

	if (!val) {
   2a09a:	b92d      	cbnz	r5, 2a0a8 <json_item_string_exists+0x38>
		return cJSON_IsNull(item);
   2a09c:	f015 fe3a 	bl	3fd14 <cJSON_IsNull>
   2a0a0:	3800      	subs	r0, #0
   2a0a2:	bf18      	it	ne
   2a0a4:	2001      	movne	r0, #1
	if (!str_val) {
		return false;
	}

	return (strcmp(str_val, val) == 0);
}
   2a0a6:	bd70      	pop	{r4, r5, r6, pc}
	str_val = cJSON_GetStringValue(item);
   2a0a8:	f015 fe48 	bl	3fd3c <cJSON_GetStringValue>
	if (!str_val) {
   2a0ac:	b908      	cbnz	r0, 2a0b2 <json_item_string_exists+0x42>
		return false;
   2a0ae:	2000      	movs	r0, #0
   2a0b0:	e7f9      	b.n	2a0a6 <json_item_string_exists+0x36>
	return (strcmp(str_val, val) == 0);
   2a0b2:	4629      	mov	r1, r5
   2a0b4:	f7f3 f8bb 	bl	1d22e <strcmp>
   2a0b8:	fab0 f080 	clz	r0, r0
   2a0bc:	0940      	lsrs	r0, r0, #5
   2a0be:	e7f2      	b.n	2a0a6 <json_item_string_exists+0x36>
   2a0c0:	00047a80 	.word	0x00047a80
   2a0c4:	00043ff2 	.word	0x00043ff2

0002a0c8 <nrf_cloud_decode_desired_obj>:
{
   2a0c8:	b538      	push	{r3, r4, r5, lr}
   2a0ca:	460c      	mov	r4, r1
	if ((root_obj != NULL) && (desired_obj != NULL)) {
   2a0cc:	4605      	mov	r5, r0
   2a0ce:	b140      	cbz	r0, 2a0e2 <nrf_cloud_decode_desired_obj+0x1a>
		state_obj = json_object_decode(root_obj, JSON_KEY_STATE);
   2a0d0:	4904      	ldr	r1, [pc, #16]	; (2a0e4 <nrf_cloud_decode_desired_obj+0x1c>)
   2a0d2:	f015 fa89 	bl	3f5e8 <json_object_decode>
		if (state_obj == NULL) {
   2a0d6:	b918      	cbnz	r0, 2a0e0 <nrf_cloud_decode_desired_obj+0x18>
			*desired_obj = json_object_decode(root_obj, JSON_KEY_DES);
   2a0d8:	4628      	mov	r0, r5
   2a0da:	4903      	ldr	r1, [pc, #12]	; (2a0e8 <nrf_cloud_decode_desired_obj+0x20>)
   2a0dc:	f015 fa84 	bl	3f5e8 <json_object_decode>
			*desired_obj = state_obj;
   2a0e0:	6020      	str	r0, [r4, #0]
}
   2a0e2:	bd38      	pop	{r3, r4, r5, pc}
   2a0e4:	00047abf 	.word	0x00047abf
   2a0e8:	00047ac5 	.word	0x00047ac5

0002a0ec <encode_info_item_cs>:
{
   2a0ec:	b570      	push	{r4, r5, r6, lr}
   2a0ee:	4605      	mov	r5, r0
	switch (inf) {
   2a0f0:	2d01      	cmp	r5, #1
{
   2a0f2:	460c      	mov	r4, r1
   2a0f4:	4610      	mov	r0, r2
   2a0f6:	461e      	mov	r6, r3
	switch (inf) {
   2a0f8:	d003      	beq.n	2a102 <encode_info_item_cs+0x16>
   2a0fa:	2d02      	cmp	r5, #2
   2a0fc:	d01f      	beq.n	2a13e <encode_info_item_cs+0x52>
	return 0;
   2a0fe:	2000      	movs	r0, #0
   2a100:	e00a      	b.n	2a118 <encode_info_item_cs+0x2c>
		move_obj = cJSON_DetachItemFromObject(inf_obj, inf_name);
   2a102:	f015 fd35 	bl	3fb70 <cJSON_DetachItemFromObject>
		if (!move_obj) {
   2a106:	4605      	mov	r5, r0
   2a108:	b938      	cbnz	r0, 2a11a <encode_info_item_cs+0x2e>
			LOG_ERR("Info item \"%s\" not found", log_strdup(inf_name));
   2a10a:	4811      	ldr	r0, [pc, #68]	; (2a150 <encode_info_item_cs+0x64>)
   2a10c:	4622      	mov	r2, r4
   2a10e:	2145      	movs	r1, #69	; 0x45
   2a110:	f012 fcce 	bl	3cab0 <z_log_minimal_printk>
			return -ENOMSG;
   2a114:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   2a118:	bd70      	pop	{r4, r5, r6, pc}
		if (json_add_obj_cs(root_obj, inf_name, move_obj)) {
   2a11a:	4602      	mov	r2, r0
   2a11c:	4621      	mov	r1, r4
   2a11e:	4630      	mov	r0, r6
   2a120:	f015 fa45 	bl	3f5ae <json_add_obj_cs>
   2a124:	2800      	cmp	r0, #0
   2a126:	d0ea      	beq.n	2a0fe <encode_info_item_cs+0x12>
			cJSON_Delete(move_obj);
   2a128:	4628      	mov	r0, r5
   2a12a:	f007 ff07 	bl	31f3c <cJSON_Delete>
			LOG_ERR("Failed to add info item \"%s\"", log_strdup(inf_name));
   2a12e:	4622      	mov	r2, r4
   2a130:	2145      	movs	r1, #69	; 0x45
   2a132:	4808      	ldr	r0, [pc, #32]	; (2a154 <encode_info_item_cs+0x68>)
			LOG_ERR("Failed to create NULL item for \"%s\"", log_strdup(inf_name));
   2a134:	f012 fcbc 	bl	3cab0 <z_log_minimal_printk>
			return -ENOMEM;
   2a138:	f06f 000b 	mvn.w	r0, #11
   2a13c:	e7ec      	b.n	2a118 <encode_info_item_cs+0x2c>
		if (json_add_null_cs(root_obj, inf_name)) {
   2a13e:	4618      	mov	r0, r3
   2a140:	f015 fa56 	bl	3f5f0 <json_add_null_cs>
   2a144:	2800      	cmp	r0, #0
   2a146:	d0da      	beq.n	2a0fe <encode_info_item_cs+0x12>
			LOG_ERR("Failed to create NULL item for \"%s\"", log_strdup(inf_name));
   2a148:	4622      	mov	r2, r4
   2a14a:	2145      	movs	r1, #69	; 0x45
   2a14c:	4802      	ldr	r0, [pc, #8]	; (2a158 <encode_info_item_cs+0x6c>)
   2a14e:	e7f1      	b.n	2a134 <encode_info_item_cs+0x48>
   2a150:	00047acd 	.word	0x00047acd
   2a154:	00047aeb 	.word	0x00047aeb
   2a158:	00047b0d 	.word	0x00047b0d

0002a15c <get_error_code_value>:
{
   2a15c:	b538      	push	{r3, r4, r5, lr}
   2a15e:	460d      	mov	r5, r1
	err_obj = cJSON_GetObjectItem(obj, NRF_CLOUD_JSON_ERR_KEY);
   2a160:	490c      	ldr	r1, [pc, #48]	; (2a194 <get_error_code_value+0x38>)
   2a162:	f015 fcd7 	bl	3fb14 <cJSON_GetObjectItem>
	if (!err_obj) {
   2a166:	4604      	mov	r4, r0
   2a168:	b188      	cbz	r0, 2a18e <get_error_code_value+0x32>
	if (!cJSON_IsNumber(err_obj)) {
   2a16a:	f015 fdd9 	bl	3fd20 <cJSON_IsNumber>
   2a16e:	b930      	cbnz	r0, 2a17e <get_error_code_value+0x22>
		LOG_WRN("Invalid JSON data type for error value");
   2a170:	4809      	ldr	r0, [pc, #36]	; (2a198 <get_error_code_value+0x3c>)
   2a172:	2157      	movs	r1, #87	; 0x57
   2a174:	f012 fc9c 	bl	3cab0 <z_log_minimal_printk>
   2a178:	f06f 004c 	mvn.w	r0, #76	; 0x4c
}
   2a17c:	bd38      	pop	{r3, r4, r5, pc}
	*err = (enum nrf_cloud_error)cJSON_GetNumberValue(err_obj);
   2a17e:	4620      	mov	r0, r4
   2a180:	f007 ffaa 	bl	320d8 <cJSON_GetNumberValue>
   2a184:	f7f2 fdc8 	bl	1cd18 <__aeabi_d2iz>
   2a188:	6028      	str	r0, [r5, #0]
	return 0;
   2a18a:	2000      	movs	r0, #0
   2a18c:	e7f6      	b.n	2a17c <get_error_code_value+0x20>
		return -ENOMSG;
   2a18e:	f06f 0022 	mvn.w	r0, #34	; 0x22
   2a192:	e7f3      	b.n	2a17c <get_error_code_value+0x20>
   2a194:	00047b36 	.word	0x00047b36
   2a198:	00047b3a 	.word	0x00047b3a

0002a19c <nrf_cloud_codec_init>:
{
   2a19c:	b510      	push	{r4, lr}
	if (!initialized) {
   2a19e:	4c04      	ldr	r4, [pc, #16]	; (2a1b0 <nrf_cloud_codec_init+0x14>)
   2a1a0:	7823      	ldrb	r3, [r4, #0]
   2a1a2:	b91b      	cbnz	r3, 2a1ac <nrf_cloud_codec_init+0x10>
		cJSON_Init();
   2a1a4:	f007 ffac 	bl	32100 <cJSON_Init>
		initialized = true;
   2a1a8:	2301      	movs	r3, #1
   2a1aa:	7023      	strb	r3, [r4, #0]
}
   2a1ac:	2000      	movs	r0, #0
   2a1ae:	bd10      	pop	{r4, pc}
   2a1b0:	2001c909 	.word	0x2001c909

0002a1b4 <json_create_req_obj>:
{
   2a1b4:	b570      	push	{r4, r5, r6, lr}
   2a1b6:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(app_id != NULL);
   2a1b8:	4606      	mov	r6, r0
   2a1ba:	b940      	cbnz	r0, 2a1ce <json_create_req_obj+0x1a>
   2a1bc:	4915      	ldr	r1, [pc, #84]	; (2a214 <json_create_req_obj+0x60>)
   2a1be:	4816      	ldr	r0, [pc, #88]	; (2a218 <json_create_req_obj+0x64>)
   2a1c0:	2266      	movs	r2, #102	; 0x66
   2a1c2:	f012 fc3b 	bl	3ca3c <assert_print>
   2a1c6:	2166      	movs	r1, #102	; 0x66
   2a1c8:	4812      	ldr	r0, [pc, #72]	; (2a214 <json_create_req_obj+0x60>)
   2a1ca:	f012 fc30 	bl	3ca2e <assert_post_action>
	__ASSERT_NO_MSG(msg_type != NULL);
   2a1ce:	b945      	cbnz	r5, 2a1e2 <json_create_req_obj+0x2e>
   2a1d0:	4910      	ldr	r1, [pc, #64]	; (2a214 <json_create_req_obj+0x60>)
   2a1d2:	4811      	ldr	r0, [pc, #68]	; (2a218 <json_create_req_obj+0x64>)
   2a1d4:	2267      	movs	r2, #103	; 0x67
   2a1d6:	f012 fc31 	bl	3ca3c <assert_print>
   2a1da:	2167      	movs	r1, #103	; 0x67
   2a1dc:	480d      	ldr	r0, [pc, #52]	; (2a214 <json_create_req_obj+0x60>)
   2a1de:	f012 fc26 	bl	3ca2e <assert_post_action>
	nrf_cloud_codec_init();
   2a1e2:	f7ff ffdb 	bl	2a19c <nrf_cloud_codec_init>
	cJSON *req_obj = cJSON_CreateObject();
   2a1e6:	f007 ff6b 	bl	320c0 <cJSON_CreateObject>
	if (!cJSON_AddStringToObject(req_obj, NRF_CLOUD_JSON_APPID_KEY, app_id) ||
   2a1ea:	4632      	mov	r2, r6
   2a1ec:	490b      	ldr	r1, [pc, #44]	; (2a21c <json_create_req_obj+0x68>)
	cJSON *req_obj = cJSON_CreateObject();
   2a1ee:	4604      	mov	r4, r0
	if (!cJSON_AddStringToObject(req_obj, NRF_CLOUD_JSON_APPID_KEY, app_id) ||
   2a1f0:	f015 fd26 	bl	3fc40 <cJSON_AddStringToObject>
   2a1f4:	b928      	cbnz	r0, 2a202 <json_create_req_obj+0x4e>
		cJSON_Delete(req_obj);
   2a1f6:	4620      	mov	r0, r4
   2a1f8:	f007 fea0 	bl	31f3c <cJSON_Delete>
		req_obj = NULL;
   2a1fc:	2400      	movs	r4, #0
}
   2a1fe:	4620      	mov	r0, r4
   2a200:	bd70      	pop	{r4, r5, r6, pc}
	    !cJSON_AddStringToObject(req_obj, NRF_CLOUD_JSON_MSG_TYPE_KEY, msg_type)) {
   2a202:	462a      	mov	r2, r5
   2a204:	4620      	mov	r0, r4
   2a206:	4906      	ldr	r1, [pc, #24]	; (2a220 <json_create_req_obj+0x6c>)
   2a208:	f015 fd1a 	bl	3fc40 <cJSON_AddStringToObject>
	if (!cJSON_AddStringToObject(req_obj, NRF_CLOUD_JSON_APPID_KEY, app_id) ||
   2a20c:	2800      	cmp	r0, #0
   2a20e:	d1f6      	bne.n	2a1fe <json_create_req_obj+0x4a>
   2a210:	e7f1      	b.n	2a1f6 <json_create_req_obj+0x42>
   2a212:	bf00      	nop
   2a214:	00047a80 	.word	0x00047a80
   2a218:	00043ff2 	.word	0x00043ff2
   2a21c:	00043592 	.word	0x00043592
   2a220:	000435e3 	.word	0x000435e3

0002a224 <nrf_cloud_json_add_modem_info>:
{
   2a224:	b530      	push	{r4, r5, lr}
	__ASSERT_NO_MSG(data_obj != NULL);
   2a226:	4605      	mov	r5, r0
{
   2a228:	f6ad 1d5c 	subw	sp, sp, #2396	; 0x95c
	__ASSERT_NO_MSG(data_obj != NULL);
   2a22c:	b940      	cbnz	r0, 2a240 <nrf_cloud_json_add_modem_info+0x1c>
   2a22e:	493f      	ldr	r1, [pc, #252]	; (2a32c <nrf_cloud_json_add_modem_info+0x108>)
   2a230:	483f      	ldr	r0, [pc, #252]	; (2a330 <nrf_cloud_json_add_modem_info+0x10c>)
   2a232:	22bc      	movs	r2, #188	; 0xbc
   2a234:	f012 fc02 	bl	3ca3c <assert_print>
   2a238:	21bc      	movs	r1, #188	; 0xbc
   2a23a:	483c      	ldr	r0, [pc, #240]	; (2a32c <nrf_cloud_json_add_modem_info+0x108>)
   2a23c:	f012 fbf7 	bl	3ca2e <assert_post_action>
	struct modem_param_info modem_info = {0};
   2a240:	f640 1258 	movw	r2, #2392	; 0x958
   2a244:	2100      	movs	r1, #0
   2a246:	4668      	mov	r0, sp
   2a248:	f017 f8cc 	bl	413e4 <memset>
	int err = modem_info_init();
   2a24c:	f7fe f94a 	bl	284e4 <modem_info_init>
	if (err) {
   2a250:	4604      	mov	r4, r0
   2a252:	b140      	cbz	r0, 2a266 <nrf_cloud_json_add_modem_info+0x42>
		LOG_ERR("Could not initialize modem info module, error: %d",
   2a254:	2145      	movs	r1, #69	; 0x45
   2a256:	4602      	mov	r2, r0
   2a258:	4836      	ldr	r0, [pc, #216]	; (2a334 <nrf_cloud_json_add_modem_info+0x110>)
		LOG_ERR("Could not initialize modem info parameters, error: %d",
   2a25a:	f012 fc29 	bl	3cab0 <z_log_minimal_printk>
}
   2a25e:	4620      	mov	r0, r4
   2a260:	f60d 1d5c 	addw	sp, sp, #2396	; 0x95c
   2a264:	bd30      	pop	{r4, r5, pc}
	err = modem_info_params_init(modem_info);
   2a266:	4668      	mov	r0, sp
   2a268:	f7fe f974 	bl	28554 <modem_info_params_init>
	if (err) {
   2a26c:	4604      	mov	r4, r0
   2a26e:	b118      	cbz	r0, 2a278 <nrf_cloud_json_add_modem_info+0x54>
		LOG_ERR("Could not initialize modem info parameters, error: %d",
   2a270:	4602      	mov	r2, r0
   2a272:	2145      	movs	r1, #69	; 0x45
   2a274:	4830      	ldr	r0, [pc, #192]	; (2a338 <nrf_cloud_json_add_modem_info+0x114>)
   2a276:	e7f0      	b.n	2a25a <nrf_cloud_json_add_modem_info+0x36>
	err = modem_info_params_get(modem_info);
   2a278:	4668      	mov	r0, sp
   2a27a:	f7fe f9c1 	bl	28600 <modem_info_params_get>
	if (err) {
   2a27e:	4604      	mov	r4, r0
   2a280:	2800      	cmp	r0, #0
   2a282:	d14f      	bne.n	2a324 <nrf_cloud_json_add_modem_info+0x100>
	__ASSERT_NO_MSG(data_obj != NULL);
   2a284:	b945      	cbnz	r5, 2a298 <nrf_cloud_json_add_modem_info+0x74>
   2a286:	4929      	ldr	r1, [pc, #164]	; (2a32c <nrf_cloud_json_add_modem_info+0x108>)
   2a288:	4829      	ldr	r0, [pc, #164]	; (2a330 <nrf_cloud_json_add_modem_info+0x10c>)
   2a28a:	22a7      	movs	r2, #167	; 0xa7
   2a28c:	f012 fbd6 	bl	3ca3c <assert_print>
   2a290:	21a7      	movs	r1, #167	; 0xa7
   2a292:	4826      	ldr	r0, [pc, #152]	; (2a32c <nrf_cloud_json_add_modem_info+0x108>)
   2a294:	f012 fbcb 	bl	3ca2e <assert_post_action>
	if (json_add_num_cs(data_obj, NRF_CLOUD_JSON_MCC_KEY,
   2a298:	f8bd 01c0 	ldrh.w	r0, [sp, #448]	; 0x1c0
   2a29c:	f7f2 fa12 	bl	1c6c4 <__aeabi_ui2d>
   2a2a0:	4602      	mov	r2, r0
   2a2a2:	460b      	mov	r3, r1
   2a2a4:	4628      	mov	r0, r5
   2a2a6:	4925      	ldr	r1, [pc, #148]	; (2a33c <nrf_cloud_json_add_modem_info+0x118>)
   2a2a8:	f015 f974 	bl	3f594 <json_add_num_cs>
   2a2ac:	2800      	cmp	r0, #0
   2a2ae:	d136      	bne.n	2a31e <nrf_cloud_json_add_modem_info+0xfa>
	    json_add_num_cs(data_obj, NRF_CLOUD_JSON_MNC_KEY,
   2a2b0:	f8bd 0230 	ldrh.w	r0, [sp, #560]	; 0x230
   2a2b4:	f7f2 fa06 	bl	1c6c4 <__aeabi_ui2d>
   2a2b8:	4602      	mov	r2, r0
   2a2ba:	460b      	mov	r3, r1
   2a2bc:	4628      	mov	r0, r5
   2a2be:	4920      	ldr	r1, [pc, #128]	; (2a340 <nrf_cloud_json_add_modem_info+0x11c>)
   2a2c0:	f015 f968 	bl	3f594 <json_add_num_cs>
		modem_info->network.mcc.value) ||
   2a2c4:	bb58      	cbnz	r0, 2a31e <nrf_cloud_json_add_modem_info+0xfa>
	    json_add_num_cs(data_obj, NRF_CLOUD_JSON_AREA_CODE_KEY,
   2a2c6:	f8bd 00e0 	ldrh.w	r0, [sp, #224]	; 0xe0
   2a2ca:	f7f2 f9fb 	bl	1c6c4 <__aeabi_ui2d>
   2a2ce:	4602      	mov	r2, r0
   2a2d0:	460b      	mov	r3, r1
   2a2d2:	4628      	mov	r0, r5
   2a2d4:	491b      	ldr	r1, [pc, #108]	; (2a344 <nrf_cloud_json_add_modem_info+0x120>)
   2a2d6:	f015 f95d 	bl	3f594 <json_add_num_cs>
		modem_info->network.mnc.value) ||
   2a2da:	bb00      	cbnz	r0, 2a31e <nrf_cloud_json_add_modem_info+0xfa>
		(uint32_t)modem_info->network.cellid_dec) ||
   2a2dc:	f50d 63d2 	add.w	r3, sp, #1680	; 0x690
   2a2e0:	e9d3 0100 	ldrd	r0, r1, [r3]
   2a2e4:	f7f2 fd40 	bl	1cd68 <__aeabi_d2uiz>
	    json_add_num_cs(data_obj, NRF_CLOUD_JSON_CELL_ID_KEY,
   2a2e8:	f7f2 f9ec 	bl	1c6c4 <__aeabi_ui2d>
   2a2ec:	4602      	mov	r2, r0
   2a2ee:	460b      	mov	r3, r1
   2a2f0:	4628      	mov	r0, r5
   2a2f2:	4915      	ldr	r1, [pc, #84]	; (2a348 <nrf_cloud_json_add_modem_info+0x124>)
   2a2f4:	f015 f94e 	bl	3f594 <json_add_num_cs>
		modem_info->network.area_code.value) ||
   2a2f8:	b988      	cbnz	r0, 2a31e <nrf_cloud_json_add_modem_info+0xfa>
		RSRP_ADJ(modem_info->network.rsrp.value))) {
   2a2fa:	f8bd 3620 	ldrh.w	r3, [sp, #1568]	; 0x620
   2a2fe:	2b00      	cmp	r3, #0
   2a300:	bf0c      	ite	eq
   2a302:	208c      	moveq	r0, #140	; 0x8c
   2a304:	208d      	movne	r0, #141	; 0x8d
	    json_add_num_cs(data_obj, NRF_CLOUD_CELL_POS_JSON_KEY_RSRP,
   2a306:	1a18      	subs	r0, r3, r0
   2a308:	f7f2 f9ec 	bl	1c6e4 <__aeabi_i2d>
   2a30c:	4602      	mov	r2, r0
   2a30e:	460b      	mov	r3, r1
   2a310:	4628      	mov	r0, r5
   2a312:	490e      	ldr	r1, [pc, #56]	; (2a34c <nrf_cloud_json_add_modem_info+0x128>)
   2a314:	f015 f93e 	bl	3f594 <json_add_num_cs>
		(uint32_t)modem_info->network.cellid_dec) ||
   2a318:	4604      	mov	r4, r0
   2a31a:	2800      	cmp	r0, #0
   2a31c:	d09f      	beq.n	2a25e <nrf_cloud_json_add_modem_info+0x3a>
		return -ENOMEM;
   2a31e:	f06f 040b 	mvn.w	r4, #11
   2a322:	e79c      	b.n	2a25e <nrf_cloud_json_add_modem_info+0x3a>
		LOG_ERR("Could not obtain cell information, error: %d",
   2a324:	4602      	mov	r2, r0
   2a326:	2145      	movs	r1, #69	; 0x45
   2a328:	4809      	ldr	r0, [pc, #36]	; (2a350 <nrf_cloud_json_add_modem_info+0x12c>)
   2a32a:	e796      	b.n	2a25a <nrf_cloud_json_add_modem_info+0x36>
   2a32c:	00047a80 	.word	0x00047a80
   2a330:	00043ff2 	.word	0x00043ff2
   2a334:	00047b66 	.word	0x00047b66
   2a338:	00047b9d 	.word	0x00047b9d
   2a33c:	0004611d 	.word	0x0004611d
   2a340:	00046124 	.word	0x00046124
   2a344:	00047c0a 	.word	0x00047c0a
   2a348:	00047c0e 	.word	0x00047c0e
   2a34c:	00046024 	.word	0x00046024
   2a350:	00047bd8 	.word	0x00047bd8

0002a354 <nrf_cloud_decode_requested_state>:
{
   2a354:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2a356:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(requested_state != NULL);
   2a358:	460e      	mov	r6, r1
   2a35a:	b951      	cbnz	r1, 2a372 <nrf_cloud_decode_requested_state+0x1e>
   2a35c:	4946      	ldr	r1, [pc, #280]	; (2a478 <nrf_cloud_decode_requested_state+0x124>)
   2a35e:	4847      	ldr	r0, [pc, #284]	; (2a47c <nrf_cloud_decode_requested_state+0x128>)
   2a360:	f44f 72bc 	mov.w	r2, #376	; 0x178
   2a364:	f012 fb6a 	bl	3ca3c <assert_print>
   2a368:	f44f 71bc 	mov.w	r1, #376	; 0x178
   2a36c:	4842      	ldr	r0, [pc, #264]	; (2a478 <nrf_cloud_decode_requested_state+0x124>)
   2a36e:	f012 fb5e 	bl	3ca2e <assert_post_action>
	__ASSERT_NO_MSG(input != NULL);
   2a372:	b954      	cbnz	r4, 2a38a <nrf_cloud_decode_requested_state+0x36>
   2a374:	4940      	ldr	r1, [pc, #256]	; (2a478 <nrf_cloud_decode_requested_state+0x124>)
   2a376:	4841      	ldr	r0, [pc, #260]	; (2a47c <nrf_cloud_decode_requested_state+0x128>)
   2a378:	f240 1279 	movw	r2, #377	; 0x179
   2a37c:	f012 fb5e 	bl	3ca3c <assert_print>
   2a380:	f240 1179 	movw	r1, #377	; 0x179
   2a384:	483c      	ldr	r0, [pc, #240]	; (2a478 <nrf_cloud_decode_requested_state+0x124>)
   2a386:	f012 fb52 	bl	3ca2e <assert_post_action>
	__ASSERT_NO_MSG(input->ptr != NULL);
   2a38a:	6863      	ldr	r3, [r4, #4]
   2a38c:	b953      	cbnz	r3, 2a3a4 <nrf_cloud_decode_requested_state+0x50>
   2a38e:	493a      	ldr	r1, [pc, #232]	; (2a478 <nrf_cloud_decode_requested_state+0x124>)
   2a390:	483a      	ldr	r0, [pc, #232]	; (2a47c <nrf_cloud_decode_requested_state+0x128>)
   2a392:	f44f 72bd 	mov.w	r2, #378	; 0x17a
   2a396:	f012 fb51 	bl	3ca3c <assert_print>
   2a39a:	f44f 71bd 	mov.w	r1, #378	; 0x17a
   2a39e:	4836      	ldr	r0, [pc, #216]	; (2a478 <nrf_cloud_decode_requested_state+0x124>)
   2a3a0:	f012 fb45 	bl	3ca2e <assert_post_action>
	__ASSERT_NO_MSG(input->len != 0);
   2a3a4:	6823      	ldr	r3, [r4, #0]
   2a3a6:	b953      	cbnz	r3, 2a3be <nrf_cloud_decode_requested_state+0x6a>
   2a3a8:	4933      	ldr	r1, [pc, #204]	; (2a478 <nrf_cloud_decode_requested_state+0x124>)
   2a3aa:	4834      	ldr	r0, [pc, #208]	; (2a47c <nrf_cloud_decode_requested_state+0x128>)
   2a3ac:	f240 127b 	movw	r2, #379	; 0x17b
   2a3b0:	f012 fb44 	bl	3ca3c <assert_print>
   2a3b4:	f240 117b 	movw	r1, #379	; 0x17b
   2a3b8:	482f      	ldr	r0, [pc, #188]	; (2a478 <nrf_cloud_decode_requested_state+0x124>)
   2a3ba:	f012 fb38 	bl	3ca2e <assert_post_action>
	root_obj = cJSON_Parse(input->ptr);
   2a3be:	6860      	ldr	r0, [r4, #4]
   2a3c0:	f015 fb93 	bl	3faea <cJSON_Parse>
	if (root_obj == NULL) {
   2a3c4:	4605      	mov	r5, r0
   2a3c6:	b938      	cbnz	r0, 2a3d8 <nrf_cloud_decode_requested_state+0x84>
		LOG_ERR("cJSON_Parse failed: %s",
   2a3c8:	2145      	movs	r1, #69	; 0x45
   2a3ca:	6862      	ldr	r2, [r4, #4]
   2a3cc:	482c      	ldr	r0, [pc, #176]	; (2a480 <nrf_cloud_decode_requested_state+0x12c>)
   2a3ce:	f012 fb6f 	bl	3cab0 <z_log_minimal_printk>
		return -ENOENT;
   2a3d2:	f06f 0401 	mvn.w	r4, #1
   2a3d6:	e010      	b.n	2a3fa <nrf_cloud_decode_requested_state+0xa6>
	nrf_cloud_decode_desired_obj(root_obj, &desired_obj);
   2a3d8:	a901      	add	r1, sp, #4
   2a3da:	f7ff fe75 	bl	2a0c8 <nrf_cloud_decode_desired_obj>
		json_object_decode(desired_obj, JSON_KEY_TOPIC_PRFX);
   2a3de:	4929      	ldr	r1, [pc, #164]	; (2a484 <nrf_cloud_decode_requested_state+0x130>)
   2a3e0:	9801      	ldr	r0, [sp, #4]
   2a3e2:	f015 f901 	bl	3f5e8 <json_object_decode>
	if (topic_prefix_obj != NULL) {
   2a3e6:	b158      	cbz	r0, 2a400 <nrf_cloud_decode_requested_state+0xac>
		nct_set_topic_prefix(topic_prefix_obj->valuestring);
   2a3e8:	6900      	ldr	r0, [r0, #16]
   2a3ea:	f001 fe7d 	bl	2c0e8 <nct_set_topic_prefix>
		(*requested_state) = STATE_UA_PIN_COMPLETE;
   2a3ee:	2307      	movs	r3, #7
		cJSON_Delete(root_obj);
   2a3f0:	4628      	mov	r0, r5
		(*requested_state) = STATE_UA_PIN_COMPLETE;
   2a3f2:	7033      	strb	r3, [r6, #0]
		cJSON_Delete(root_obj);
   2a3f4:	f007 fda2 	bl	31f3c <cJSON_Delete>
		return 0;
   2a3f8:	2400      	movs	r4, #0
}
   2a3fa:	4620      	mov	r0, r4
   2a3fc:	b002      	add	sp, #8
   2a3fe:	bd70      	pop	{r4, r5, r6, pc}
	pairing_obj = json_object_decode(desired_obj, JSON_KEY_PAIRING);
   2a400:	4921      	ldr	r1, [pc, #132]	; (2a488 <nrf_cloud_decode_requested_state+0x134>)
   2a402:	9801      	ldr	r0, [sp, #4]
   2a404:	f015 f8f0 	bl	3f5e8 <json_object_decode>
	pairing_state_obj = json_object_decode(pairing_obj, JSON_KEY_STATE);
   2a408:	4920      	ldr	r1, [pc, #128]	; (2a48c <nrf_cloud_decode_requested_state+0x138>)
   2a40a:	f015 f8ed 	bl	3f5e8 <json_object_decode>
	if (!pairing_state_obj || pairing_state_obj->type != cJSON_String) {
   2a40e:	b110      	cbz	r0, 2a416 <nrf_cloud_decode_requested_state+0xc2>
   2a410:	68c3      	ldr	r3, [r0, #12]
   2a412:	2b10      	cmp	r3, #16
   2a414:	d014      	beq.n	2a440 <nrf_cloud_decode_requested_state+0xec>
		if (cJSON_HasObjectItem(desired_obj, JSON_KEY_CFG) == false) {
   2a416:	491e      	ldr	r1, [pc, #120]	; (2a490 <nrf_cloud_decode_requested_state+0x13c>)
   2a418:	9801      	ldr	r0, [sp, #4]
   2a41a:	f015 fb7e 	bl	3fb1a <cJSON_HasObjectItem>
   2a41e:	b958      	cbnz	r0, 2a438 <nrf_cloud_decode_requested_state+0xe4>
			LOG_WRN("Unhandled data received from nRF Cloud.");
   2a420:	2157      	movs	r1, #87	; 0x57
   2a422:	481c      	ldr	r0, [pc, #112]	; (2a494 <nrf_cloud_decode_requested_state+0x140>)
   2a424:	f012 fb44 	bl	3cab0 <z_log_minimal_printk>
			LOG_INF("Ensure device firmware is up to date.");
   2a428:	2149      	movs	r1, #73	; 0x49
   2a42a:	481b      	ldr	r0, [pc, #108]	; (2a498 <nrf_cloud_decode_requested_state+0x144>)
   2a42c:	f012 fb40 	bl	3cab0 <z_log_minimal_printk>
			LOG_INF("Delete and re-add device to nRF Cloud if problem persists.");
   2a430:	2149      	movs	r1, #73	; 0x49
   2a432:	481a      	ldr	r0, [pc, #104]	; (2a49c <nrf_cloud_decode_requested_state+0x148>)
   2a434:	f012 fb3c 	bl	3cab0 <z_log_minimal_printk>
		cJSON_Delete(root_obj);
   2a438:	4628      	mov	r0, r5
   2a43a:	f007 fd7f 	bl	31f3c <cJSON_Delete>
   2a43e:	e7c8      	b.n	2a3d2 <nrf_cloud_decode_requested_state+0x7e>
	const char *state_str = pairing_state_obj->valuestring;
   2a440:	6904      	ldr	r4, [r0, #16]
	return !strncmp(s1, s2, strlen(s2));
   2a442:	4817      	ldr	r0, [pc, #92]	; (2a4a0 <nrf_cloud_decode_requested_state+0x14c>)
   2a444:	f7f2 fefd 	bl	1d242 <strlen>
   2a448:	4915      	ldr	r1, [pc, #84]	; (2a4a0 <nrf_cloud_decode_requested_state+0x14c>)
   2a44a:	4602      	mov	r2, r0
   2a44c:	4620      	mov	r0, r4
   2a44e:	f017 f99c 	bl	4178a <strncmp>
	if (compare(state_str, DUA_PIN_STR)) {
   2a452:	4604      	mov	r4, r0
   2a454:	b928      	cbnz	r0, 2a462 <nrf_cloud_decode_requested_state+0x10e>
		(*requested_state) = STATE_UA_PIN_WAIT;
   2a456:	2306      	movs	r3, #6
	cJSON_Delete(root_obj);
   2a458:	4628      	mov	r0, r5
		(*requested_state) = STATE_UA_PIN_WAIT;
   2a45a:	7033      	strb	r3, [r6, #0]
	cJSON_Delete(root_obj);
   2a45c:	f007 fd6e 	bl	31f3c <cJSON_Delete>
	return 0;
   2a460:	e7cb      	b.n	2a3fa <nrf_cloud_decode_requested_state+0xa6>
		LOG_ERR("Deprecated state. Delete device from nRF Cloud and update device with JITP certificates.");
   2a462:	2145      	movs	r1, #69	; 0x45
   2a464:	480f      	ldr	r0, [pc, #60]	; (2a4a4 <nrf_cloud_decode_requested_state+0x150>)
   2a466:	f012 fb23 	bl	3cab0 <z_log_minimal_printk>
		cJSON_Delete(root_obj);
   2a46a:	4628      	mov	r0, r5
   2a46c:	f007 fd66 	bl	31f3c <cJSON_Delete>
		return -ENOTSUP;
   2a470:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2a474:	e7c1      	b.n	2a3fa <nrf_cloud_decode_requested_state+0xa6>
   2a476:	bf00      	nop
   2a478:	00047a80 	.word	0x00047a80
   2a47c:	00043ff2 	.word	0x00043ff2
   2a480:	00047c1b 	.word	0x00047c1b
   2a484:	00047c37 	.word	0x00047c37
   2a488:	00047c52 	.word	0x00047c52
   2a48c:	00047abf 	.word	0x00047abf
   2a490:	00047c5a 	.word	0x00047c5a
   2a494:	00047c61 	.word	0x00047c61
   2a498:	00047c8e 	.word	0x00047c8e
   2a49c:	00047cb9 	.word	0x00047cb9
   2a4a0:	00047cf9 	.word	0x00047cf9
   2a4a4:	00047d08 	.word	0x00047d08

0002a4a8 <nrf_cloud_encode_config_response>:
{
   2a4a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a4ac:	4604      	mov	r4, r0
   2a4ae:	4690      	mov	r8, r2
	__ASSERT_NO_MSG(output != NULL);
   2a4b0:	460e      	mov	r6, r1
   2a4b2:	b951      	cbnz	r1, 2a4ca <nrf_cloud_encode_config_response+0x22>
   2a4b4:	4943      	ldr	r1, [pc, #268]	; (2a5c4 <nrf_cloud_encode_config_response+0x11c>)
   2a4b6:	4844      	ldr	r0, [pc, #272]	; (2a5c8 <nrf_cloud_encode_config_response+0x120>)
   2a4b8:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
   2a4bc:	f012 fabe 	bl	3ca3c <assert_print>
   2a4c0:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   2a4c4:	483f      	ldr	r0, [pc, #252]	; (2a5c4 <nrf_cloud_encode_config_response+0x11c>)
   2a4c6:	f012 fab2 	bl	3ca2e <assert_post_action>
	__ASSERT_NO_MSG(input != NULL);
   2a4ca:	2c00      	cmp	r4, #0
   2a4cc:	d14e      	bne.n	2a56c <nrf_cloud_encode_config_response+0xc4>
   2a4ce:	493d      	ldr	r1, [pc, #244]	; (2a5c4 <nrf_cloud_encode_config_response+0x11c>)
   2a4d0:	483d      	ldr	r0, [pc, #244]	; (2a5c8 <nrf_cloud_encode_config_response+0x120>)
   2a4d2:	f240 12c9 	movw	r2, #457	; 0x1c9
   2a4d6:	f012 fab1 	bl	3ca3c <assert_print>
   2a4da:	f240 11c9 	movw	r1, #457	; 0x1c9
   2a4de:	4839      	ldr	r0, [pc, #228]	; (2a5c4 <nrf_cloud_encode_config_response+0x11c>)
   2a4e0:	f012 faa5 	bl	3ca2e <assert_post_action>
		return -ESRCH; /* invalid input or no JSON parsed */
   2a4e4:	f06f 0402 	mvn.w	r4, #2
   2a4e8:	e068      	b.n	2a5bc <nrf_cloud_encode_config_response+0x114>
	root_obj = cJSON_CreateObject();
   2a4ea:	f007 fde9 	bl	320c0 <cJSON_CreateObject>
	desired_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_DES);
   2a4ee:	4937      	ldr	r1, [pc, #220]	; (2a5cc <nrf_cloud_encode_config_response+0x124>)
	root_obj = cJSON_CreateObject();
   2a4f0:	4680      	mov	r8, r0
	desired_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_DES);
   2a4f2:	f015 fbe5 	bl	3fcc0 <cJSON_AddObjectToObjectCS>
	reported_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_REP);
   2a4f6:	4936      	ldr	r1, [pc, #216]	; (2a5d0 <nrf_cloud_encode_config_response+0x128>)
	desired_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_DES);
   2a4f8:	4681      	mov	r9, r0
	reported_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_REP);
   2a4fa:	4640      	mov	r0, r8
   2a4fc:	f015 fbe0 	bl	3fcc0 <cJSON_AddObjectToObjectCS>
	if (json_add_null_cs(desired_obj, JSON_KEY_CFG) ||
   2a500:	4934      	ldr	r1, [pc, #208]	; (2a5d4 <nrf_cloud_encode_config_response+0x12c>)
	reported_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_REP);
   2a502:	4604      	mov	r4, r0
	if (json_add_null_cs(desired_obj, JSON_KEY_CFG) ||
   2a504:	4648      	mov	r0, r9
   2a506:	f015 f873 	bl	3f5f0 <json_add_null_cs>
   2a50a:	b148      	cbz	r0, 2a520 <nrf_cloud_encode_config_response+0x78>
		cJSON_Delete(root_obj);
   2a50c:	4640      	mov	r0, r8
   2a50e:	f007 fd15 	bl	31f3c <cJSON_Delete>
		cJSON_Delete(config_obj);
   2a512:	4638      	mov	r0, r7
   2a514:	f007 fd12 	bl	31f3c <cJSON_Delete>
		cJSON_Delete(state_obj);
   2a518:	4628      	mov	r0, r5
		cJSON_Delete(root_obj);
   2a51a:	f007 fd0f 	bl	31f3c <cJSON_Delete>
	if (buffer == NULL) {
   2a51e:	e01a      	b.n	2a556 <nrf_cloud_encode_config_response+0xae>
	    json_add_obj_cs(reported_obj, JSON_KEY_CFG, config_obj)) {
   2a520:	4620      	mov	r0, r4
   2a522:	463a      	mov	r2, r7
   2a524:	492b      	ldr	r1, [pc, #172]	; (2a5d4 <nrf_cloud_encode_config_response+0x12c>)
   2a526:	f015 f842 	bl	3f5ae <json_add_obj_cs>
	if (json_add_null_cs(desired_obj, JSON_KEY_CFG) ||
   2a52a:	4604      	mov	r4, r0
   2a52c:	2800      	cmp	r0, #0
   2a52e:	d1ed      	bne.n	2a50c <nrf_cloud_encode_config_response+0x64>
	cJSON_Delete(state_obj);
   2a530:	4628      	mov	r0, r5
   2a532:	f007 fd03 	bl	31f3c <cJSON_Delete>
	state_obj = cJSON_CreateObject();
   2a536:	f007 fdc3 	bl	320c0 <cJSON_CreateObject>
	if (state_obj) {
   2a53a:	4607      	mov	r7, r0
   2a53c:	b170      	cbz	r0, 2a55c <nrf_cloud_encode_config_response+0xb4>
		(void)json_add_obj_cs(state_obj, JSON_KEY_STATE, root_obj);
   2a53e:	4642      	mov	r2, r8
   2a540:	4925      	ldr	r1, [pc, #148]	; (2a5d8 <nrf_cloud_encode_config_response+0x130>)
   2a542:	f015 f834 	bl	3f5ae <json_add_obj_cs>
		buffer = cJSON_PrintUnformatted(state_obj);
   2a546:	4638      	mov	r0, r7
   2a548:	f015 fad3 	bl	3faf2 <cJSON_PrintUnformatted>
   2a54c:	4605      	mov	r5, r0
		cJSON_Delete(state_obj);
   2a54e:	4638      	mov	r0, r7
   2a550:	f007 fcf4 	bl	31f3c <cJSON_Delete>
	if (buffer == NULL) {
   2a554:	b925      	cbnz	r5, 2a560 <nrf_cloud_encode_config_response+0xb8>
		return -ENOMEM;
   2a556:	f06f 040b 	mvn.w	r4, #11
   2a55a:	e02f      	b.n	2a5bc <nrf_cloud_encode_config_response+0x114>
		cJSON_Delete(root_obj);
   2a55c:	4640      	mov	r0, r8
   2a55e:	e7dc      	b.n	2a51a <nrf_cloud_encode_config_response+0x72>
	output->len = strlen(buffer);
   2a560:	4628      	mov	r0, r5
	output->ptr = buffer;
   2a562:	6075      	str	r5, [r6, #4]
	output->len = strlen(buffer);
   2a564:	f7f2 fe6d 	bl	1d242 <strlen>
   2a568:	6030      	str	r0, [r6, #0]
	return 0;
   2a56a:	e027      	b.n	2a5bc <nrf_cloud_encode_config_response+0x114>
	cJSON *input_obj = input ? cJSON_Parse(input->ptr) : NULL;
   2a56c:	6860      	ldr	r0, [r4, #4]
   2a56e:	f015 fabc 	bl	3faea <cJSON_Parse>
	if (input_obj == NULL) {
   2a572:	4604      	mov	r4, r0
   2a574:	2800      	cmp	r0, #0
   2a576:	d0b5      	beq.n	2a4e4 <nrf_cloud_encode_config_response+0x3c>
	state_obj = cJSON_DetachItemFromObject(input_obj, JSON_KEY_STATE);
   2a578:	4917      	ldr	r1, [pc, #92]	; (2a5d8 <nrf_cloud_encode_config_response+0x130>)
   2a57a:	f015 faf9 	bl	3fb70 <cJSON_DetachItemFromObject>
	config_obj = cJSON_DetachItemFromObject(
   2a57e:	1e05      	subs	r5, r0, #0
   2a580:	bf14      	ite	ne
   2a582:	4628      	movne	r0, r5
   2a584:	4620      	moveq	r0, r4
   2a586:	4913      	ldr	r1, [pc, #76]	; (2a5d4 <nrf_cloud_encode_config_response+0x12c>)
   2a588:	f015 faf2 	bl	3fb70 <cJSON_DetachItemFromObject>
   2a58c:	4607      	mov	r7, r0
	cJSON_Delete(input_obj);
   2a58e:	4620      	mov	r0, r4
   2a590:	f007 fcd4 	bl	31f3c <cJSON_Delete>
	if (has_config) {
   2a594:	f1b8 0f00 	cmp.w	r8, #0
   2a598:	d004      	beq.n	2a5a4 <nrf_cloud_encode_config_response+0xfc>
		*has_config = (config_obj != NULL);
   2a59a:	1e3b      	subs	r3, r7, #0
   2a59c:	bf18      	it	ne
   2a59e:	2301      	movne	r3, #1
   2a5a0:	f888 3000 	strb.w	r3, [r8]
	if ((state_obj == NULL) || (config_obj == NULL)) {
   2a5a4:	b10d      	cbz	r5, 2a5aa <nrf_cloud_encode_config_response+0x102>
   2a5a6:	2f00      	cmp	r7, #0
   2a5a8:	d19f      	bne.n	2a4ea <nrf_cloud_encode_config_response+0x42>
		output->ptr = NULL;
   2a5aa:	2400      	movs	r4, #0
		cJSON_Delete(state_obj);
   2a5ac:	4628      	mov	r0, r5
   2a5ae:	f007 fcc5 	bl	31f3c <cJSON_Delete>
		cJSON_Delete(config_obj);
   2a5b2:	4638      	mov	r0, r7
   2a5b4:	f007 fcc2 	bl	31f3c <cJSON_Delete>
		output->len = 0;
   2a5b8:	e9c6 4400 	strd	r4, r4, [r6]
}
   2a5bc:	4620      	mov	r0, r4
   2a5be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2a5c2:	bf00      	nop
   2a5c4:	00047a80 	.word	0x00047a80
   2a5c8:	00043ff2 	.word	0x00043ff2
   2a5cc:	00047ac5 	.word	0x00047ac5
   2a5d0:	00047c12 	.word	0x00047c12
   2a5d4:	00047c5a 	.word	0x00047c5a
   2a5d8:	00047abf 	.word	0x00047abf

0002a5dc <nrf_cloud_encode_state>:
{
   2a5dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   2a5e0:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(output != NULL);
   2a5e2:	4688      	mov	r8, r1
{
   2a5e4:	b086      	sub	sp, #24
	__ASSERT_NO_MSG(output != NULL);
   2a5e6:	b951      	cbnz	r1, 2a5fe <nrf_cloud_encode_state+0x22>
   2a5e8:	4949      	ldr	r1, [pc, #292]	; (2a710 <nrf_cloud_encode_state+0x134>)
   2a5ea:	484a      	ldr	r0, [pc, #296]	; (2a714 <nrf_cloud_encode_state+0x138>)
   2a5ec:	f240 220f 	movw	r2, #527	; 0x20f
   2a5f0:	f012 fa24 	bl	3ca3c <assert_print>
   2a5f4:	f240 210f 	movw	r1, #527	; 0x20f
   2a5f8:	4845      	ldr	r0, [pc, #276]	; (2a710 <nrf_cloud_encode_state+0x134>)
   2a5fa:	f012 fa18 	bl	3ca2e <assert_post_action>
	cJSON *root_obj = cJSON_CreateObject();
   2a5fe:	f007 fd5f 	bl	320c0 <cJSON_CreateObject>
	cJSON *state_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_STATE);
   2a602:	4945      	ldr	r1, [pc, #276]	; (2a718 <nrf_cloud_encode_state+0x13c>)
	cJSON *root_obj = cJSON_CreateObject();
   2a604:	4607      	mov	r7, r0
	cJSON *state_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_STATE);
   2a606:	f015 fb5b 	bl	3fcc0 <cJSON_AddObjectToObjectCS>
	cJSON *reported_obj = cJSON_AddObjectToObjectCS(state_obj, JSON_KEY_REP);
   2a60a:	4944      	ldr	r1, [pc, #272]	; (2a71c <nrf_cloud_encode_state+0x140>)
   2a60c:	f015 fb58 	bl	3fcc0 <cJSON_AddObjectToObjectCS>
	cJSON *pairing_obj = cJSON_AddObjectToObjectCS(reported_obj, JSON_KEY_PAIRING);
   2a610:	4943      	ldr	r1, [pc, #268]	; (2a720 <nrf_cloud_encode_state+0x144>)
	cJSON *reported_obj = cJSON_AddObjectToObjectCS(state_obj, JSON_KEY_REP);
   2a612:	4683      	mov	fp, r0
	cJSON *pairing_obj = cJSON_AddObjectToObjectCS(reported_obj, JSON_KEY_PAIRING);
   2a614:	f015 fb54 	bl	3fcc0 <cJSON_AddObjectToObjectCS>
	cJSON *connection_obj = cJSON_AddObjectToObjectCS(reported_obj, JSON_KEY_CONN);
   2a618:	4942      	ldr	r1, [pc, #264]	; (2a724 <nrf_cloud_encode_state+0x148>)
	cJSON *pairing_obj = cJSON_AddObjectToObjectCS(reported_obj, JSON_KEY_PAIRING);
   2a61a:	4681      	mov	r9, r0
	cJSON *connection_obj = cJSON_AddObjectToObjectCS(reported_obj, JSON_KEY_CONN);
   2a61c:	4658      	mov	r0, fp
   2a61e:	f015 fb4f 	bl	3fcc0 <cJSON_AddObjectToObjectCS>
   2a622:	4682      	mov	sl, r0
	if (!pairing_obj || !connection_obj) {
   2a624:	f1b9 0f00 	cmp.w	r9, #0
   2a628:	d000      	beq.n	2a62c <nrf_cloud_encode_state+0x50>
   2a62a:	b928      	cbnz	r0, 2a638 <nrf_cloud_encode_state+0x5c>
			cJSON_Delete(root_obj);
   2a62c:	4638      	mov	r0, r7
   2a62e:	f007 fc85 	bl	31f3c <cJSON_Delete>
		return -ENOMEM;
   2a632:	f06f 000b 	mvn.w	r0, #11
   2a636:	e008      	b.n	2a64a <nrf_cloud_encode_state+0x6e>
	switch (reported_state) {
   2a638:	2c06      	cmp	r4, #6
   2a63a:	d009      	beq.n	2a650 <nrf_cloud_encode_state+0x74>
   2a63c:	2c07      	cmp	r4, #7
   2a63e:	d032      	beq.n	2a6a6 <nrf_cloud_encode_state+0xca>
		cJSON_Delete(root_obj);
   2a640:	4638      	mov	r0, r7
   2a642:	f007 fc7b 	bl	31f3c <cJSON_Delete>
		return -ENOTSUP;
   2a646:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2a64a:	b006      	add	sp, #24
   2a64c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
		ret += json_add_str_cs(pairing_obj, JSON_KEY_STATE, DUA_PIN_STR);
   2a650:	4a35      	ldr	r2, [pc, #212]	; (2a728 <nrf_cloud_encode_state+0x14c>)
   2a652:	4931      	ldr	r1, [pc, #196]	; (2a718 <nrf_cloud_encode_state+0x13c>)
   2a654:	4648      	mov	r0, r9
   2a656:	f014 ffb9 	bl	3f5cc <json_add_str_cs>
		ret += json_add_null_cs(pairing_obj, JSON_KEY_TOPICS);
   2a65a:	4934      	ldr	r1, [pc, #208]	; (2a72c <nrf_cloud_encode_state+0x150>)
   2a65c:	4648      	mov	r0, r9
   2a65e:	f014 ffc7 	bl	3f5f0 <json_add_null_cs>
		ret += json_add_null_cs(pairing_obj, JSON_KEY_CFG);
   2a662:	4933      	ldr	r1, [pc, #204]	; (2a730 <nrf_cloud_encode_state+0x154>)
   2a664:	4648      	mov	r0, r9
   2a666:	f014 ffc3 	bl	3f5f0 <json_add_null_cs>
		ret += json_add_null_cs(reported_obj, JSON_KEY_STAGE);
   2a66a:	4932      	ldr	r1, [pc, #200]	; (2a734 <nrf_cloud_encode_state+0x158>)
   2a66c:	4658      	mov	r0, fp
   2a66e:	f014 ffbf 	bl	3f5f0 <json_add_null_cs>
		ret += json_add_null_cs(reported_obj, JSON_KEY_TOPIC_PRFX);
   2a672:	4931      	ldr	r1, [pc, #196]	; (2a738 <nrf_cloud_encode_state+0x15c>)
   2a674:	4658      	mov	r0, fp
   2a676:	f014 ffbb 	bl	3f5f0 <json_add_null_cs>
		ret += json_add_null_cs(connection_obj, JSON_KEY_KEEPALIVE);
   2a67a:	4650      	mov	r0, sl
   2a67c:	492f      	ldr	r1, [pc, #188]	; (2a73c <nrf_cloud_encode_state+0x160>)
   2a67e:	f014 ffb7 	bl	3f5f0 <json_add_null_cs>
	buffer = cJSON_PrintUnformatted(root_obj);
   2a682:	4638      	mov	r0, r7
   2a684:	f015 fa35 	bl	3faf2 <cJSON_PrintUnformatted>
   2a688:	4604      	mov	r4, r0
	cJSON_Delete(root_obj);
   2a68a:	4638      	mov	r0, r7
   2a68c:	f007 fc56 	bl	31f3c <cJSON_Delete>
	if (buffer == NULL) {
   2a690:	2c00      	cmp	r4, #0
   2a692:	d0ce      	beq.n	2a632 <nrf_cloud_encode_state+0x56>
	output->len = strlen(buffer);
   2a694:	4620      	mov	r0, r4
	output->ptr = buffer;
   2a696:	f8c8 4004 	str.w	r4, [r8, #4]
	output->len = strlen(buffer);
   2a69a:	f7f2 fdd2 	bl	1d242 <strlen>
   2a69e:	f8c8 0000 	str.w	r0, [r8]
	return 0;
   2a6a2:	2000      	movs	r0, #0
   2a6a4:	e7d1      	b.n	2a64a <nrf_cloud_encode_state+0x6e>
		nct_dc_endpoint_get(&tx_endp, &rx_endp, NULL, &m_endp);
   2a6a6:	ab04      	add	r3, sp, #16
   2a6a8:	2200      	movs	r2, #0
   2a6aa:	4669      	mov	r1, sp
   2a6ac:	a802      	add	r0, sp, #8
   2a6ae:	f002 f879 	bl	2c7a4 <nct_dc_endpoint_get>
		ret += json_add_str_cs(reported_obj, JSON_KEY_TOPIC_PRFX, m_endp.ptr);
   2a6b2:	9a05      	ldr	r2, [sp, #20]
   2a6b4:	4920      	ldr	r1, [pc, #128]	; (2a738 <nrf_cloud_encode_state+0x15c>)
   2a6b6:	4658      	mov	r0, fp
   2a6b8:	f014 ff88 	bl	3f5cc <json_add_str_cs>
		ret += json_add_str_cs(pairing_obj, JSON_KEY_STATE, PAIRED_STR);
   2a6bc:	4a20      	ldr	r2, [pc, #128]	; (2a740 <nrf_cloud_encode_state+0x164>)
		ret += json_add_str_cs(reported_obj, JSON_KEY_TOPIC_PRFX, m_endp.ptr);
   2a6be:	4604      	mov	r4, r0
		ret += json_add_str_cs(pairing_obj, JSON_KEY_STATE, PAIRED_STR);
   2a6c0:	4915      	ldr	r1, [pc, #84]	; (2a718 <nrf_cloud_encode_state+0x13c>)
   2a6c2:	4648      	mov	r0, r9
   2a6c4:	f014 ff82 	bl	3f5cc <json_add_str_cs>
		ret += json_add_null_cs(pairing_obj, JSON_KEY_CFG);
   2a6c8:	4919      	ldr	r1, [pc, #100]	; (2a730 <nrf_cloud_encode_state+0x154>)
		ret += json_add_str_cs(pairing_obj, JSON_KEY_STATE, PAIRED_STR);
   2a6ca:	4404      	add	r4, r0
		ret += json_add_null_cs(pairing_obj, JSON_KEY_CFG);
   2a6cc:	4648      	mov	r0, r9
   2a6ce:	f014 ff8f 	bl	3f5f0 <json_add_null_cs>
		ret += json_add_null_cs(reported_obj, JSON_KEY_PAIR_STAT);
   2a6d2:	491c      	ldr	r1, [pc, #112]	; (2a744 <nrf_cloud_encode_state+0x168>)
		ret += json_add_null_cs(pairing_obj, JSON_KEY_CFG);
   2a6d4:	4404      	add	r4, r0
		ret += json_add_null_cs(reported_obj, JSON_KEY_PAIR_STAT);
   2a6d6:	4658      	mov	r0, fp
   2a6d8:	f014 ff8a 	bl	3f5f0 <json_add_null_cs>
		ret += json_add_num_cs(connection_obj, JSON_KEY_KEEPALIVE,
   2a6dc:	4b1a      	ldr	r3, [pc, #104]	; (2a748 <nrf_cloud_encode_state+0x16c>)
   2a6de:	2200      	movs	r2, #0
   2a6e0:	4916      	ldr	r1, [pc, #88]	; (2a73c <nrf_cloud_encode_state+0x160>)
		ret += json_add_null_cs(reported_obj, JSON_KEY_PAIR_STAT);
   2a6e2:	4404      	add	r4, r0
		ret += json_add_num_cs(connection_obj, JSON_KEY_KEEPALIVE,
   2a6e4:	4650      	mov	r0, sl
   2a6e6:	f014 ff55 	bl	3f594 <json_add_num_cs>
		cJSON *topics_obj = cJSON_AddObjectToObjectCS(pairing_obj, JSON_KEY_TOPICS);
   2a6ea:	4910      	ldr	r1, [pc, #64]	; (2a72c <nrf_cloud_encode_state+0x150>)
		ret += json_add_num_cs(connection_obj, JSON_KEY_KEEPALIVE,
   2a6ec:	4404      	add	r4, r0
		cJSON *topics_obj = cJSON_AddObjectToObjectCS(pairing_obj, JSON_KEY_TOPICS);
   2a6ee:	4648      	mov	r0, r9
   2a6f0:	f015 fae6 	bl	3fcc0 <cJSON_AddObjectToObjectCS>
		ret += json_add_str_cs(topics_obj, JSON_KEY_DEVICE_TO_CLOUD, tx_endp.ptr);
   2a6f4:	9a03      	ldr	r2, [sp, #12]
   2a6f6:	4915      	ldr	r1, [pc, #84]	; (2a74c <nrf_cloud_encode_state+0x170>)
		cJSON *topics_obj = cJSON_AddObjectToObjectCS(pairing_obj, JSON_KEY_TOPICS);
   2a6f8:	4605      	mov	r5, r0
		ret += json_add_str_cs(topics_obj, JSON_KEY_DEVICE_TO_CLOUD, tx_endp.ptr);
   2a6fa:	f014 ff67 	bl	3f5cc <json_add_str_cs>
		ret += json_add_str_cs(topics_obj, JSON_KEY_CLOUD_TO_DEVICE, rx_endp.ptr);
   2a6fe:	9a01      	ldr	r2, [sp, #4]
		ret += json_add_str_cs(topics_obj, JSON_KEY_DEVICE_TO_CLOUD, tx_endp.ptr);
   2a700:	4404      	add	r4, r0
		ret += json_add_str_cs(topics_obj, JSON_KEY_CLOUD_TO_DEVICE, rx_endp.ptr);
   2a702:	4913      	ldr	r1, [pc, #76]	; (2a750 <nrf_cloud_encode_state+0x174>)
   2a704:	4628      	mov	r0, r5
   2a706:	f014 ff61 	bl	3f5cc <json_add_str_cs>
		if (ret != 0) {
   2a70a:	42c4      	cmn	r4, r0
   2a70c:	d0b9      	beq.n	2a682 <nrf_cloud_encode_state+0xa6>
   2a70e:	e78d      	b.n	2a62c <nrf_cloud_encode_state+0x50>
   2a710:	00047a80 	.word	0x00047a80
   2a714:	00043ff2 	.word	0x00043ff2
   2a718:	00047abf 	.word	0x00047abf
   2a71c:	00047c12 	.word	0x00047c12
   2a720:	00047c52 	.word	0x00047c52
   2a724:	00043e3a 	.word	0x00043e3a
   2a728:	00047cf9 	.word	0x00047cf9
   2a72c:	00047d66 	.word	0x00047d66
   2a730:	00047c5a 	.word	0x00047c5a
   2a734:	00047d6d 	.word	0x00047d6d
   2a738:	00047c37 	.word	0x00047c37
   2a73c:	00047d73 	.word	0x00047d73
   2a740:	00047d7d 	.word	0x00047d7d
   2a744:	00047d84 	.word	0x00047d84
   2a748:	4092c000 	.word	0x4092c000
   2a74c:	00047d92 	.word	0x00047d92
   2a750:	00047d96 	.word	0x00047d96

0002a754 <nrf_cloud_decode_data_endpoint>:
{
   2a754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a758:	b085      	sub	sp, #20
   2a75a:	460e      	mov	r6, r1
   2a75c:	4690      	mov	r8, r2
   2a75e:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(input != NULL);
   2a760:	4604      	mov	r4, r0
{
   2a762:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(input != NULL);
   2a766:	b950      	cbnz	r0, 2a77e <nrf_cloud_decode_data_endpoint+0x2a>
   2a768:	4967      	ldr	r1, [pc, #412]	; (2a908 <nrf_cloud_decode_data_endpoint+0x1b4>)
   2a76a:	4868      	ldr	r0, [pc, #416]	; (2a90c <nrf_cloud_decode_data_endpoint+0x1b8>)
   2a76c:	f240 2266 	movw	r2, #614	; 0x266
   2a770:	f012 f964 	bl	3ca3c <assert_print>
   2a774:	f240 2166 	movw	r1, #614	; 0x266
   2a778:	4863      	ldr	r0, [pc, #396]	; (2a908 <nrf_cloud_decode_data_endpoint+0x1b4>)
   2a77a:	f012 f958 	bl	3ca2e <assert_post_action>
	__ASSERT_NO_MSG(input->ptr != NULL);
   2a77e:	6863      	ldr	r3, [r4, #4]
   2a780:	b953      	cbnz	r3, 2a798 <nrf_cloud_decode_data_endpoint+0x44>
   2a782:	4961      	ldr	r1, [pc, #388]	; (2a908 <nrf_cloud_decode_data_endpoint+0x1b4>)
   2a784:	4861      	ldr	r0, [pc, #388]	; (2a90c <nrf_cloud_decode_data_endpoint+0x1b8>)
   2a786:	f240 2267 	movw	r2, #615	; 0x267
   2a78a:	f012 f957 	bl	3ca3c <assert_print>
   2a78e:	f240 2167 	movw	r1, #615	; 0x267
   2a792:	485d      	ldr	r0, [pc, #372]	; (2a908 <nrf_cloud_decode_data_endpoint+0x1b4>)
   2a794:	f012 f94b 	bl	3ca2e <assert_post_action>
	__ASSERT_NO_MSG(input->len != 0);
   2a798:	6823      	ldr	r3, [r4, #0]
   2a79a:	b953      	cbnz	r3, 2a7b2 <nrf_cloud_decode_data_endpoint+0x5e>
   2a79c:	495a      	ldr	r1, [pc, #360]	; (2a908 <nrf_cloud_decode_data_endpoint+0x1b4>)
   2a79e:	485b      	ldr	r0, [pc, #364]	; (2a90c <nrf_cloud_decode_data_endpoint+0x1b8>)
   2a7a0:	f44f 721a 	mov.w	r2, #616	; 0x268
   2a7a4:	f012 f94a 	bl	3ca3c <assert_print>
   2a7a8:	f44f 711a 	mov.w	r1, #616	; 0x268
   2a7ac:	4856      	ldr	r0, [pc, #344]	; (2a908 <nrf_cloud_decode_data_endpoint+0x1b4>)
   2a7ae:	f012 f93e 	bl	3ca2e <assert_post_action>
	__ASSERT_NO_MSG(tx_endpoint != NULL);
   2a7b2:	b956      	cbnz	r6, 2a7ca <nrf_cloud_decode_data_endpoint+0x76>
   2a7b4:	4954      	ldr	r1, [pc, #336]	; (2a908 <nrf_cloud_decode_data_endpoint+0x1b4>)
   2a7b6:	4855      	ldr	r0, [pc, #340]	; (2a90c <nrf_cloud_decode_data_endpoint+0x1b8>)
   2a7b8:	f240 2269 	movw	r2, #617	; 0x269
   2a7bc:	f012 f93e 	bl	3ca3c <assert_print>
   2a7c0:	f240 2169 	movw	r1, #617	; 0x269
   2a7c4:	4850      	ldr	r0, [pc, #320]	; (2a908 <nrf_cloud_decode_data_endpoint+0x1b4>)
   2a7c6:	f012 f932 	bl	3ca2e <assert_post_action>
	__ASSERT_NO_MSG(rx_endpoint != NULL);
   2a7ca:	f1b8 0f00 	cmp.w	r8, #0
   2a7ce:	d10a      	bne.n	2a7e6 <nrf_cloud_decode_data_endpoint+0x92>
   2a7d0:	494d      	ldr	r1, [pc, #308]	; (2a908 <nrf_cloud_decode_data_endpoint+0x1b4>)
   2a7d2:	484e      	ldr	r0, [pc, #312]	; (2a90c <nrf_cloud_decode_data_endpoint+0x1b8>)
   2a7d4:	f240 226a 	movw	r2, #618	; 0x26a
   2a7d8:	f012 f930 	bl	3ca3c <assert_print>
   2a7dc:	f240 216a 	movw	r1, #618	; 0x26a
   2a7e0:	4849      	ldr	r0, [pc, #292]	; (2a908 <nrf_cloud_decode_data_endpoint+0x1b4>)
   2a7e2:	f012 f924 	bl	3ca2e <assert_post_action>
	__ASSERT_NO_MSG(bulk_endpoint != NULL);
   2a7e6:	b957      	cbnz	r7, 2a7fe <nrf_cloud_decode_data_endpoint+0xaa>
   2a7e8:	4947      	ldr	r1, [pc, #284]	; (2a908 <nrf_cloud_decode_data_endpoint+0x1b4>)
   2a7ea:	4848      	ldr	r0, [pc, #288]	; (2a90c <nrf_cloud_decode_data_endpoint+0x1b8>)
   2a7ec:	f240 226b 	movw	r2, #619	; 0x26b
   2a7f0:	f012 f924 	bl	3ca3c <assert_print>
   2a7f4:	f240 216b 	movw	r1, #619	; 0x26b
   2a7f8:	4843      	ldr	r0, [pc, #268]	; (2a908 <nrf_cloud_decode_data_endpoint+0x1b4>)
   2a7fa:	f012 f918 	bl	3ca2e <assert_post_action>
	cJSON *desired_obj = NULL;
   2a7fe:	2300      	movs	r3, #0
	root_obj = cJSON_Parse(input->ptr);
   2a800:	6860      	ldr	r0, [r4, #4]
	cJSON *desired_obj = NULL;
   2a802:	9303      	str	r3, [sp, #12]
	root_obj = cJSON_Parse(input->ptr);
   2a804:	f015 f971 	bl	3faea <cJSON_Parse>
	if (root_obj == NULL) {
   2a808:	4605      	mov	r5, r0
   2a80a:	b318      	cbz	r0, 2a854 <nrf_cloud_decode_data_endpoint+0x100>
	nrf_cloud_decode_desired_obj(root_obj, &desired_obj);
   2a80c:	a903      	add	r1, sp, #12
   2a80e:	f7ff fc5b 	bl	2a0c8 <nrf_cloud_decode_desired_obj>
	if (m_endpoint != NULL) {
   2a812:	f1ba 0f00 	cmp.w	sl, #0
   2a816:	d020      	beq.n	2a85a <nrf_cloud_decode_data_endpoint+0x106>
		m_endpoint_obj = json_object_decode(
   2a818:	493d      	ldr	r1, [pc, #244]	; (2a910 <nrf_cloud_decode_data_endpoint+0x1bc>)
   2a81a:	9803      	ldr	r0, [sp, #12]
   2a81c:	f014 fee4 	bl	3f5e8 <json_object_decode>
   2a820:	4604      	mov	r4, r0
	cJSON *pairing_obj = json_object_decode(desired_obj, JSON_KEY_PAIRING);
   2a822:	493c      	ldr	r1, [pc, #240]	; (2a914 <nrf_cloud_decode_data_endpoint+0x1c0>)
   2a824:	9803      	ldr	r0, [sp, #12]
   2a826:	f014 fedf 	bl	3f5e8 <json_object_decode>
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, JSON_KEY_STATE);
   2a82a:	493b      	ldr	r1, [pc, #236]	; (2a918 <nrf_cloud_decode_data_endpoint+0x1c4>)
	cJSON *pairing_obj = json_object_decode(desired_obj, JSON_KEY_PAIRING);
   2a82c:	4681      	mov	r9, r0
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, JSON_KEY_STATE);
   2a82e:	f014 fedb 	bl	3f5e8 <json_object_decode>
	cJSON *topic_obj = json_object_decode(pairing_obj, JSON_KEY_TOPICS);
   2a832:	493a      	ldr	r1, [pc, #232]	; (2a91c <nrf_cloud_decode_data_endpoint+0x1c8>)
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, JSON_KEY_STATE);
   2a834:	4683      	mov	fp, r0
	cJSON *topic_obj = json_object_decode(pairing_obj, JSON_KEY_TOPICS);
   2a836:	4648      	mov	r0, r9
   2a838:	f014 fed6 	bl	3f5e8 <json_object_decode>
   2a83c:	4681      	mov	r9, r0
	if ((pairing_state_obj == NULL) || (topic_obj == NULL) ||
   2a83e:	f1bb 0f00 	cmp.w	fp, #0
   2a842:	d004      	beq.n	2a84e <nrf_cloud_decode_data_endpoint+0xfa>
   2a844:	b118      	cbz	r0, 2a84e <nrf_cloud_decode_data_endpoint+0xfa>
   2a846:	f8db 300c 	ldr.w	r3, [fp, #12]
   2a84a:	2b10      	cmp	r3, #16
   2a84c:	d007      	beq.n	2a85e <nrf_cloud_decode_data_endpoint+0x10a>
		cJSON_Delete(root_obj);
   2a84e:	4628      	mov	r0, r5
   2a850:	f007 fb74 	bl	31f3c <cJSON_Delete>
		return -ENOENT;
   2a854:	f06f 0401 	mvn.w	r4, #1
   2a858:	e03b      	b.n	2a8d2 <nrf_cloud_decode_data_endpoint+0x17e>
	cJSON *m_endpoint_obj = NULL;
   2a85a:	4654      	mov	r4, sl
   2a85c:	e7e1      	b.n	2a822 <nrf_cloud_decode_data_endpoint+0xce>
	return !strncmp(s1, s2, strlen(s2));
   2a85e:	4830      	ldr	r0, [pc, #192]	; (2a920 <nrf_cloud_decode_data_endpoint+0x1cc>)
	const char *state_str = pairing_state_obj->valuestring;
   2a860:	f8db b010 	ldr.w	fp, [fp, #16]
	return !strncmp(s1, s2, strlen(s2));
   2a864:	f7f2 fced 	bl	1d242 <strlen>
   2a868:	492d      	ldr	r1, [pc, #180]	; (2a920 <nrf_cloud_decode_data_endpoint+0x1cc>)
   2a86a:	4602      	mov	r2, r0
   2a86c:	4658      	mov	r0, fp
   2a86e:	f016 ff8c 	bl	4178a <strncmp>
	if (!compare(state_str, PAIRED_STR)) {
   2a872:	2800      	cmp	r0, #0
   2a874:	d1eb      	bne.n	2a84e <nrf_cloud_decode_data_endpoint+0xfa>
	if (m_endpoint_obj != NULL) {
   2a876:	b14c      	cbz	r4, 2a88c <nrf_cloud_decode_data_endpoint+0x138>
		err = json_decode_and_alloc(m_endpoint_obj, m_endpoint);
   2a878:	4620      	mov	r0, r4
   2a87a:	4651      	mov	r1, sl
   2a87c:	f014 fed9 	bl	3f632 <json_decode_and_alloc>
		if (err) {
   2a880:	4604      	mov	r4, r0
   2a882:	b118      	cbz	r0, 2a88c <nrf_cloud_decode_data_endpoint+0x138>
			cJSON_Delete(root_obj);
   2a884:	4628      	mov	r0, r5
	cJSON_Delete(root_obj);
   2a886:	f007 fb59 	bl	31f3c <cJSON_Delete>
	return err;
   2a88a:	e022      	b.n	2a8d2 <nrf_cloud_decode_data_endpoint+0x17e>
	cJSON *tx_obj = json_object_decode(topic_obj, JSON_KEY_DEVICE_TO_CLOUD);
   2a88c:	4925      	ldr	r1, [pc, #148]	; (2a924 <nrf_cloud_decode_data_endpoint+0x1d0>)
   2a88e:	4648      	mov	r0, r9
   2a890:	f014 feaa 	bl	3f5e8 <json_object_decode>
	err = json_decode_and_alloc(tx_obj, tx_endpoint);
   2a894:	4631      	mov	r1, r6
   2a896:	f014 fecc 	bl	3f632 <json_decode_and_alloc>
	if (err) {
   2a89a:	4604      	mov	r4, r0
   2a89c:	b140      	cbz	r0, 2a8b0 <nrf_cloud_decode_data_endpoint+0x15c>
		cJSON_Delete(root_obj);
   2a89e:	4628      	mov	r0, r5
   2a8a0:	f007 fb4c 	bl	31f3c <cJSON_Delete>
		LOG_ERR("could not decode topic for %s", JSON_KEY_DEVICE_TO_CLOUD);
   2a8a4:	4a1f      	ldr	r2, [pc, #124]	; (2a924 <nrf_cloud_decode_data_endpoint+0x1d0>)
		LOG_ERR("could not decode topic for %s", JSON_KEY_CLOUD_TO_DEVICE);
   2a8a6:	2145      	movs	r1, #69	; 0x45
   2a8a8:	481f      	ldr	r0, [pc, #124]	; (2a928 <nrf_cloud_decode_data_endpoint+0x1d4>)
   2a8aa:	f012 f901 	bl	3cab0 <z_log_minimal_printk>
		return err;
   2a8ae:	e010      	b.n	2a8d2 <nrf_cloud_decode_data_endpoint+0x17e>
	size_t bulk_ep_len_temp = tx_endpoint->len + sizeof(NRF_CLOUD_BULK_MSG_TOPIC);
   2a8b0:	6834      	ldr	r4, [r6, #0]
	bulk_endpoint->ptr = nrf_cloud_calloc(bulk_ep_len_temp, 1);
   2a8b2:	2101      	movs	r1, #1
	size_t bulk_ep_len_temp = tx_endpoint->len + sizeof(NRF_CLOUD_BULK_MSG_TOPIC);
   2a8b4:	3406      	adds	r4, #6
	bulk_endpoint->ptr = nrf_cloud_calloc(bulk_ep_len_temp, 1);
   2a8b6:	4620      	mov	r0, r4
   2a8b8:	f016 fcee 	bl	41298 <k_calloc>
   2a8bc:	6078      	str	r0, [r7, #4]
	if (bulk_endpoint->ptr == NULL) {
   2a8be:	b960      	cbnz	r0, 2a8da <nrf_cloud_decode_data_endpoint+0x186>
		cJSON_Delete(root_obj);
   2a8c0:	4628      	mov	r0, r5
   2a8c2:	f007 fb3b 	bl	31f3c <cJSON_Delete>
		LOG_ERR("Could not allocate memory for bulk topic");
   2a8c6:	2145      	movs	r1, #69	; 0x45
   2a8c8:	4818      	ldr	r0, [pc, #96]	; (2a92c <nrf_cloud_decode_data_endpoint+0x1d8>)
   2a8ca:	f012 f8f1 	bl	3cab0 <z_log_minimal_printk>
		return -ENOMEM;
   2a8ce:	f06f 040b 	mvn.w	r4, #11
}
   2a8d2:	4620      	mov	r0, r4
   2a8d4:	b005      	add	sp, #20
   2a8d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bulk_endpoint->len = snprintk((char *)bulk_endpoint->ptr, bulk_ep_len_temp, "%s%s",
   2a8da:	4b15      	ldr	r3, [pc, #84]	; (2a930 <nrf_cloud_decode_data_endpoint+0x1dc>)
   2a8dc:	4621      	mov	r1, r4
   2a8de:	4a15      	ldr	r2, [pc, #84]	; (2a934 <nrf_cloud_decode_data_endpoint+0x1e0>)
   2a8e0:	9300      	str	r3, [sp, #0]
   2a8e2:	6873      	ldr	r3, [r6, #4]
   2a8e4:	f011 fed4 	bl	3c690 <snprintk>
	cJSON *rx_obj = json_object_decode(topic_obj, JSON_KEY_CLOUD_TO_DEVICE);
   2a8e8:	4913      	ldr	r1, [pc, #76]	; (2a938 <nrf_cloud_decode_data_endpoint+0x1e4>)
	bulk_endpoint->len = snprintk((char *)bulk_endpoint->ptr, bulk_ep_len_temp, "%s%s",
   2a8ea:	6038      	str	r0, [r7, #0]
	cJSON *rx_obj = json_object_decode(topic_obj, JSON_KEY_CLOUD_TO_DEVICE);
   2a8ec:	4648      	mov	r0, r9
   2a8ee:	f014 fe7b 	bl	3f5e8 <json_object_decode>
	err = json_decode_and_alloc(rx_obj, rx_endpoint);
   2a8f2:	4641      	mov	r1, r8
   2a8f4:	f014 fe9d 	bl	3f632 <json_decode_and_alloc>
	if (err) {
   2a8f8:	4604      	mov	r4, r0
		cJSON_Delete(root_obj);
   2a8fa:	4628      	mov	r0, r5
	if (err) {
   2a8fc:	2c00      	cmp	r4, #0
   2a8fe:	d0c2      	beq.n	2a886 <nrf_cloud_decode_data_endpoint+0x132>
		cJSON_Delete(root_obj);
   2a900:	f007 fb1c 	bl	31f3c <cJSON_Delete>
		LOG_ERR("could not decode topic for %s", JSON_KEY_CLOUD_TO_DEVICE);
   2a904:	4a0c      	ldr	r2, [pc, #48]	; (2a938 <nrf_cloud_decode_data_endpoint+0x1e4>)
   2a906:	e7ce      	b.n	2a8a6 <nrf_cloud_decode_data_endpoint+0x152>
   2a908:	00047a80 	.word	0x00047a80
   2a90c:	00043ff2 	.word	0x00043ff2
   2a910:	00047c37 	.word	0x00047c37
   2a914:	00047c52 	.word	0x00047c52
   2a918:	00047abf 	.word	0x00047abf
   2a91c:	00047d66 	.word	0x00047d66
   2a920:	00047d7d 	.word	0x00047d7d
   2a924:	00047d92 	.word	0x00047d92
   2a928:	00047d9a 	.word	0x00047d9a
   2a92c:	00047dbd 	.word	0x00047dbd
   2a930:	00047deb 	.word	0x00047deb
   2a934:	0004a257 	.word	0x0004a257
   2a938:	00047d96 	.word	0x00047d96

0002a93c <json_send_to_cloud>:
{
   2a93c:	b530      	push	{r4, r5, lr}
	__ASSERT_NO_MSG(request != NULL);
   2a93e:	4604      	mov	r4, r0
{
   2a940:	b087      	sub	sp, #28
	__ASSERT_NO_MSG(request != NULL);
   2a942:	b950      	cbnz	r0, 2a95a <json_send_to_cloud+0x1e>
   2a944:	491b      	ldr	r1, [pc, #108]	; (2a9b4 <json_send_to_cloud+0x78>)
   2a946:	481c      	ldr	r0, [pc, #112]	; (2a9b8 <json_send_to_cloud+0x7c>)
   2a948:	f44f 7230 	mov.w	r2, #704	; 0x2c0
   2a94c:	f012 f876 	bl	3ca3c <assert_print>
   2a950:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   2a954:	4817      	ldr	r0, [pc, #92]	; (2a9b4 <json_send_to_cloud+0x78>)
   2a956:	f012 f86a 	bl	3ca2e <assert_post_action>
	if (nfsm_get_current_state() != STATE_DC_CONNECTED) {
   2a95a:	f000 fdef 	bl	2b53c <nfsm_get_current_state>
   2a95e:	2809      	cmp	r0, #9
   2a960:	d125      	bne.n	2a9ae <json_send_to_cloud+0x72>
	msg_string = cJSON_PrintUnformatted(request);
   2a962:	4620      	mov	r0, r4
   2a964:	f015 f8c5 	bl	3faf2 <cJSON_PrintUnformatted>
	if (!msg_string) {
   2a968:	4605      	mov	r5, r0
   2a96a:	b940      	cbnz	r0, 2a97e <json_send_to_cloud+0x42>
		LOG_ERR("Could not allocate memory for request message");
   2a96c:	2145      	movs	r1, #69	; 0x45
   2a96e:	4813      	ldr	r0, [pc, #76]	; (2a9bc <json_send_to_cloud+0x80>)
   2a970:	f012 f89e 	bl	3cab0 <z_log_minimal_printk>
		return -ENOMEM;
   2a974:	f06f 040b 	mvn.w	r4, #11
}
   2a978:	4620      	mov	r0, r4
   2a97a:	b007      	add	sp, #28
   2a97c:	bd30      	pop	{r4, r5, pc}
	struct nct_dc_data msg = {
   2a97e:	2214      	movs	r2, #20
   2a980:	2100      	movs	r1, #0
   2a982:	a801      	add	r0, sp, #4
   2a984:	f016 fd2e 	bl	413e4 <memset>
		.data.len = strlen(msg_string)
   2a988:	4628      	mov	r0, r5
   2a98a:	f7f2 fc5a 	bl	1d242 <strlen>
	struct nct_dc_data msg = {
   2a98e:	e9cd 0501 	strd	r0, r5, [sp, #4]
	err = nct_dc_send(&msg);
   2a992:	a801      	add	r0, sp, #4
   2a994:	f014 feb3 	bl	3f6fe <nct_dc_send>
	if (err) {
   2a998:	4604      	mov	r4, r0
   2a99a:	b120      	cbz	r0, 2a9a6 <json_send_to_cloud+0x6a>
		LOG_ERR("Failed to send request, error: %d", err);
   2a99c:	4602      	mov	r2, r0
   2a99e:	2145      	movs	r1, #69	; 0x45
   2a9a0:	4807      	ldr	r0, [pc, #28]	; (2a9c0 <json_send_to_cloud+0x84>)
   2a9a2:	f012 f885 	bl	3cab0 <z_log_minimal_printk>
	k_free(msg_string);
   2a9a6:	4628      	mov	r0, r5
   2a9a8:	f016 fc6b 	bl	41282 <k_free>
	return err;
   2a9ac:	e7e4      	b.n	2a978 <json_send_to_cloud+0x3c>
		return -EACCES;
   2a9ae:	f06f 040c 	mvn.w	r4, #12
   2a9b2:	e7e1      	b.n	2a978 <json_send_to_cloud+0x3c>
   2a9b4:	00047a80 	.word	0x00047a80
   2a9b8:	00043ff2 	.word	0x00043ff2
   2a9bc:	00047df1 	.word	0x00047df1
   2a9c0:	00047e24 	.word	0x00047e24

0002a9c4 <nrf_cloud_modem_info_json_encode>:
{
   2a9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a9c6:	4606      	mov	r6, r0
	if (!mod_inf_obj || !mod_inf) {
   2a9c8:	460f      	mov	r7, r1
{
   2a9ca:	f6ad 1d5c 	subw	sp, sp, #2396	; 0x95c
	if (!mod_inf_obj || !mod_inf) {
   2a9ce:	2900      	cmp	r1, #0
   2a9d0:	d057      	beq.n	2aa82 <nrf_cloud_modem_info_json_encode+0xbe>
   2a9d2:	2800      	cmp	r0, #0
   2a9d4:	d055      	beq.n	2aa82 <nrf_cloud_modem_info_json_encode+0xbe>
	cJSON *tmp = cJSON_CreateObject();
   2a9d6:	f007 fb73 	bl	320c0 <cJSON_CreateObject>
	if (!tmp) {
   2a9da:	4605      	mov	r5, r0
   2a9dc:	2800      	cmp	r0, #0
   2a9de:	d04d      	beq.n	2aa7c <nrf_cloud_modem_info_json_encode+0xb8>
	struct modem_param_info *mpi = (struct modem_param_info *)mod_inf->mpi;
   2a9e0:	6870      	ldr	r0, [r6, #4]
	if (!mpi) {
   2a9e2:	bb10      	cbnz	r0, 2aa2a <nrf_cloud_modem_info_json_encode+0x66>
		err = modem_info_init();
   2a9e4:	f7fd fd7e 	bl	284e4 <modem_info_init>
		if (err) {
   2a9e8:	4604      	mov	r4, r0
   2a9ea:	b158      	cbz	r0, 2aa04 <nrf_cloud_modem_info_json_encode+0x40>
			LOG_ERR("modem_info_init() failed: %d", err);
   2a9ec:	2145      	movs	r1, #69	; 0x45
   2a9ee:	4602      	mov	r2, r0
   2a9f0:	4825      	ldr	r0, [pc, #148]	; (2aa88 <nrf_cloud_modem_info_json_encode+0xc4>)
		LOG_ERR("Failed to encode modem info: %d", err);
   2a9f2:	f012 f85d 	bl	3cab0 <z_log_minimal_printk>
	cJSON_Delete(tmp);
   2a9f6:	4628      	mov	r0, r5
   2a9f8:	f007 faa0 	bl	31f3c <cJSON_Delete>
}
   2a9fc:	4620      	mov	r0, r4
   2a9fe:	f60d 1d5c 	addw	sp, sp, #2396	; 0x95c
   2aa02:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = modem_info_params_init(&fetched_mod_inf);
   2aa04:	4668      	mov	r0, sp
   2aa06:	f7fd fda5 	bl	28554 <modem_info_params_init>
		if (err) {
   2aa0a:	4604      	mov	r4, r0
   2aa0c:	b118      	cbz	r0, 2aa16 <nrf_cloud_modem_info_json_encode+0x52>
			LOG_ERR("modem_info_params_init() failed: %d", err);
   2aa0e:	4602      	mov	r2, r0
   2aa10:	2145      	movs	r1, #69	; 0x45
   2aa12:	481e      	ldr	r0, [pc, #120]	; (2aa8c <nrf_cloud_modem_info_json_encode+0xc8>)
   2aa14:	e7ed      	b.n	2a9f2 <nrf_cloud_modem_info_json_encode+0x2e>
		err = modem_info_params_get(&fetched_mod_inf);
   2aa16:	4668      	mov	r0, sp
   2aa18:	f7fd fdf2 	bl	28600 <modem_info_params_get>
		if (err < 0) {
   2aa1c:	1e04      	subs	r4, r0, #0
   2aa1e:	da03      	bge.n	2aa28 <nrf_cloud_modem_info_json_encode+0x64>
			LOG_ERR("modem_info_params_get() failed: %d", err);
   2aa20:	4622      	mov	r2, r4
   2aa22:	2145      	movs	r1, #69	; 0x45
   2aa24:	481a      	ldr	r0, [pc, #104]	; (2aa90 <nrf_cloud_modem_info_json_encode+0xcc>)
   2aa26:	e7e4      	b.n	2a9f2 <nrf_cloud_modem_info_json_encode+0x2e>
		mpi = &fetched_mod_inf;
   2aa28:	4668      	mov	r0, sp
	err = modem_info_json_object_encode(mpi, tmp);
   2aa2a:	4629      	mov	r1, r5
   2aa2c:	f7fd ff4c 	bl	288c8 <modem_info_json_object_encode>
	if (err < 0) {
   2aa30:	1e04      	subs	r4, r0, #0
   2aa32:	da03      	bge.n	2aa3c <nrf_cloud_modem_info_json_encode+0x78>
		LOG_ERR("Failed to encode modem info: %d", err);
   2aa34:	4622      	mov	r2, r4
   2aa36:	2145      	movs	r1, #69	; 0x45
   2aa38:	4816      	ldr	r0, [pc, #88]	; (2aa94 <nrf_cloud_modem_info_json_encode+0xd0>)
   2aa3a:	e7da      	b.n	2a9f2 <nrf_cloud_modem_info_json_encode+0x2e>
	if (encode_info_item_cs(mod_inf->device, MODEM_INFO_JSON_KEY_DEV_INF, tmp, mod_inf_obj) ||
   2aa3c:	463b      	mov	r3, r7
   2aa3e:	462a      	mov	r2, r5
   2aa40:	4915      	ldr	r1, [pc, #84]	; (2aa98 <nrf_cloud_modem_info_json_encode+0xd4>)
   2aa42:	7830      	ldrb	r0, [r6, #0]
   2aa44:	f7ff fb52 	bl	2a0ec <encode_info_item_cs>
   2aa48:	b130      	cbz	r0, 2aa58 <nrf_cloud_modem_info_json_encode+0x94>
		LOG_ERR("Failed to encode modem info");
   2aa4a:	2145      	movs	r1, #69	; 0x45
   2aa4c:	4813      	ldr	r0, [pc, #76]	; (2aa9c <nrf_cloud_modem_info_json_encode+0xd8>)
   2aa4e:	f012 f82f 	bl	3cab0 <z_log_minimal_printk>
		err = -EIO;
   2aa52:	f06f 0404 	mvn.w	r4, #4
		goto cleanup;
   2aa56:	e7ce      	b.n	2a9f6 <nrf_cloud_modem_info_json_encode+0x32>
	    encode_info_item_cs(mod_inf->network, MODEM_INFO_JSON_KEY_NET_INF, tmp, mod_inf_obj) ||
   2aa58:	463b      	mov	r3, r7
   2aa5a:	462a      	mov	r2, r5
   2aa5c:	4910      	ldr	r1, [pc, #64]	; (2aaa0 <nrf_cloud_modem_info_json_encode+0xdc>)
   2aa5e:	7870      	ldrb	r0, [r6, #1]
   2aa60:	f7ff fb44 	bl	2a0ec <encode_info_item_cs>
	if (encode_info_item_cs(mod_inf->device, MODEM_INFO_JSON_KEY_DEV_INF, tmp, mod_inf_obj) ||
   2aa64:	2800      	cmp	r0, #0
   2aa66:	d1f0      	bne.n	2aa4a <nrf_cloud_modem_info_json_encode+0x86>
	    encode_info_item_cs(mod_inf->sim, MODEM_INFO_JSON_KEY_SIM_INF, tmp, mod_inf_obj)) {
   2aa68:	463b      	mov	r3, r7
   2aa6a:	462a      	mov	r2, r5
   2aa6c:	490d      	ldr	r1, [pc, #52]	; (2aaa4 <nrf_cloud_modem_info_json_encode+0xe0>)
   2aa6e:	78b0      	ldrb	r0, [r6, #2]
   2aa70:	f7ff fb3c 	bl	2a0ec <encode_info_item_cs>
	    encode_info_item_cs(mod_inf->network, MODEM_INFO_JSON_KEY_NET_INF, tmp, mod_inf_obj) ||
   2aa74:	4604      	mov	r4, r0
   2aa76:	2800      	cmp	r0, #0
   2aa78:	d0bd      	beq.n	2a9f6 <nrf_cloud_modem_info_json_encode+0x32>
   2aa7a:	e7e6      	b.n	2aa4a <nrf_cloud_modem_info_json_encode+0x86>
		err = -ENOMEM;
   2aa7c:	f06f 040b 	mvn.w	r4, #11
   2aa80:	e7b9      	b.n	2a9f6 <nrf_cloud_modem_info_json_encode+0x32>
		return -EINVAL;
   2aa82:	f06f 0415 	mvn.w	r4, #21
   2aa86:	e7b9      	b.n	2a9fc <nrf_cloud_modem_info_json_encode+0x38>
   2aa88:	00047e4b 	.word	0x00047e4b
   2aa8c:	00047e6d 	.word	0x00047e6d
   2aa90:	00047e96 	.word	0x00047e96
   2aa94:	00047ebe 	.word	0x00047ebe
   2aa98:	00046356 	.word	0x00046356
   2aa9c:	00047ee3 	.word	0x00047ee3
   2aaa0:	00046342 	.word	0x00046342
   2aaa4:	0004634e 	.word	0x0004634e

0002aaa8 <nrf_cloud_service_info_json_encode>:
{
   2aaa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2aaac:	460f      	mov	r7, r1
	if (!svc_inf || !svc_inf_obj) {
   2aaae:	4606      	mov	r6, r0
   2aab0:	2800      	cmp	r0, #0
   2aab2:	f000 80b5 	beq.w	2ac20 <nrf_cloud_service_info_json_encode+0x178>
   2aab6:	2900      	cmp	r1, #0
   2aab8:	f000 80b2 	beq.w	2ac20 <nrf_cloud_service_info_json_encode+0x178>
	int err = nrf_cloud_encode_service_info_fota(svc_inf->fota, svc_inf_obj);
   2aabc:	f8d0 8000 	ldr.w	r8, [r0]
		if (json_add_null_cs(svc_inf_obj, JSON_KEY_SRVC_INFO_FOTA) != 0) {
   2aac0:	4959      	ldr	r1, [pc, #356]	; (2ac28 <nrf_cloud_service_info_json_encode+0x180>)
   2aac2:	4638      	mov	r0, r7
	if (fota == NULL ||
   2aac4:	f1b8 0f00 	cmp.w	r8, #0
   2aac8:	d105      	bne.n	2aad6 <nrf_cloud_service_info_json_encode+0x2e>
		if (json_add_null_cs(svc_inf_obj, JSON_KEY_SRVC_INFO_FOTA) != 0) {
   2aaca:	f014 fd91 	bl	3f5f0 <json_add_null_cs>
   2aace:	b3b0      	cbz	r0, 2ab3e <nrf_cloud_service_info_json_encode+0x96>
			return -ENOMEM;
   2aad0:	f06f 000b 	mvn.w	r0, #11
   2aad4:	e03c      	b.n	2ab50 <nrf_cloud_service_info_json_encode+0xa8>
		cJSON *array = cJSON_AddArrayToObjectCS(svc_inf_obj, JSON_KEY_SRVC_INFO_FOTA);
   2aad6:	f015 f8c9 	bl	3fc6c <cJSON_AddArrayToObjectCS>
		if (!array) {
   2aada:	4605      	mov	r5, r0
   2aadc:	2800      	cmp	r0, #0
   2aade:	d0f7      	beq.n	2aad0 <nrf_cloud_service_info_json_encode+0x28>
		if (fota->bootloader) {
   2aae0:	f898 4000 	ldrb.w	r4, [r8]
   2aae4:	f014 0401 	ands.w	r4, r4, #1
   2aae8:	d007      	beq.n	2aafa <nrf_cloud_service_info_json_encode+0x52>
			cJSON_AddItemToArray(array, cJSON_CreateString(NRF_CLOUD_FOTA_TYPE_BOOT));
   2aaea:	4850      	ldr	r0, [pc, #320]	; (2ac2c <nrf_cloud_service_info_json_encode+0x184>)
   2aaec:	f007 fac4 	bl	32078 <cJSON_CreateString>
   2aaf0:	4601      	mov	r1, r0
   2aaf2:	4628      	mov	r0, r5
   2aaf4:	f015 f818 	bl	3fb28 <cJSON_AddItemToArray>
			++item_cnt;
   2aaf8:	2401      	movs	r4, #1
		if (fota->modem) {
   2aafa:	f898 3000 	ldrb.w	r3, [r8]
   2aafe:	0798      	lsls	r0, r3, #30
   2ab00:	d507      	bpl.n	2ab12 <nrf_cloud_service_info_json_encode+0x6a>
			cJSON_AddItemToArray(array, cJSON_CreateString(NRF_CLOUD_FOTA_TYPE_MODEM));
   2ab02:	484b      	ldr	r0, [pc, #300]	; (2ac30 <nrf_cloud_service_info_json_encode+0x188>)
   2ab04:	f007 fab8 	bl	32078 <cJSON_CreateString>
   2ab08:	4601      	mov	r1, r0
   2ab0a:	4628      	mov	r0, r5
   2ab0c:	f015 f80c 	bl	3fb28 <cJSON_AddItemToArray>
			++item_cnt;
   2ab10:	3401      	adds	r4, #1
		if (fota->application) {
   2ab12:	f898 3000 	ldrb.w	r3, [r8]
   2ab16:	0759      	lsls	r1, r3, #29
   2ab18:	d507      	bpl.n	2ab2a <nrf_cloud_service_info_json_encode+0x82>
			cJSON_AddItemToArray(array, cJSON_CreateString(NRF_CLOUD_FOTA_TYPE_APP));
   2ab1a:	4846      	ldr	r0, [pc, #280]	; (2ac34 <nrf_cloud_service_info_json_encode+0x18c>)
   2ab1c:	f007 faac 	bl	32078 <cJSON_CreateString>
   2ab20:	4601      	mov	r1, r0
   2ab22:	4628      	mov	r0, r5
   2ab24:	f015 f800 	bl	3fb28 <cJSON_AddItemToArray>
			++item_cnt;
   2ab28:	3401      	adds	r4, #1
		if (cJSON_GetArraySize(array) != item_cnt) {
   2ab2a:	4628      	mov	r0, r5
   2ab2c:	f014 ffe4 	bl	3faf8 <cJSON_GetArraySize>
   2ab30:	42a0      	cmp	r0, r4
   2ab32:	d004      	beq.n	2ab3e <nrf_cloud_service_info_json_encode+0x96>
			cJSON_DeleteItemFromObject(svc_inf_obj, JSON_KEY_SRVC_INFO_FOTA);
   2ab34:	493c      	ldr	r1, [pc, #240]	; (2ac28 <nrf_cloud_service_info_json_encode+0x180>)
			cJSON_DeleteItemFromObject(svc_inf_obj, JSON_KEY_SRVC_INFO_UI);
   2ab36:	4638      	mov	r0, r7
   2ab38:	f015 f824 	bl	3fb84 <cJSON_DeleteItemFromObject>
   2ab3c:	e7c8      	b.n	2aad0 <nrf_cloud_service_info_json_encode+0x28>
   2ab3e:	6876      	ldr	r6, [r6, #4]
		if (json_add_null_cs(svc_inf_obj, JSON_KEY_SRVC_INFO_UI) != 0) {
   2ab40:	4638      	mov	r0, r7
   2ab42:	493d      	ldr	r1, [pc, #244]	; (2ac38 <nrf_cloud_service_info_json_encode+0x190>)
	if (ui == NULL) {
   2ab44:	b936      	cbnz	r6, 2ab54 <nrf_cloud_service_info_json_encode+0xac>
		if (json_add_null_cs(svc_inf_obj, JSON_KEY_SRVC_INFO_UI) != 0) {
   2ab46:	f014 fd53 	bl	3f5f0 <json_add_null_cs>
   2ab4a:	2800      	cmp	r0, #0
   2ab4c:	d1c0      	bne.n	2aad0 <nrf_cloud_service_info_json_encode+0x28>
	return 0;
   2ab4e:	2000      	movs	r0, #0
}
   2ab50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cJSON *array = cJSON_AddArrayToObjectCS(svc_inf_obj, JSON_KEY_SRVC_INFO_UI);
   2ab54:	f015 f88a 	bl	3fc6c <cJSON_AddArrayToObjectCS>
		if (!array) {
   2ab58:	4605      	mov	r5, r0
   2ab5a:	2800      	cmp	r0, #0
   2ab5c:	d0b8      	beq.n	2aad0 <nrf_cloud_service_info_json_encode+0x28>
		if (ui->air_pressure) {
   2ab5e:	7834      	ldrb	r4, [r6, #0]
   2ab60:	f014 0410 	ands.w	r4, r4, #16
   2ab64:	d007      	beq.n	2ab76 <nrf_cloud_service_info_json_encode+0xce>
			cJSON_AddItemToArray(array,
   2ab66:	4835      	ldr	r0, [pc, #212]	; (2ac3c <nrf_cloud_service_info_json_encode+0x194>)
   2ab68:	f007 fa86 	bl	32078 <cJSON_CreateString>
   2ab6c:	4601      	mov	r1, r0
   2ab6e:	4628      	mov	r0, r5
   2ab70:	f014 ffda 	bl	3fb28 <cJSON_AddItemToArray>
			++item_cnt;
   2ab74:	2401      	movs	r4, #1
		if (ui->gps) {
   2ab76:	7833      	ldrb	r3, [r6, #0]
   2ab78:	079a      	lsls	r2, r3, #30
   2ab7a:	d507      	bpl.n	2ab8c <nrf_cloud_service_info_json_encode+0xe4>
			cJSON_AddItemToArray(array,
   2ab7c:	4830      	ldr	r0, [pc, #192]	; (2ac40 <nrf_cloud_service_info_json_encode+0x198>)
   2ab7e:	f007 fa7b 	bl	32078 <cJSON_CreateString>
   2ab82:	4601      	mov	r1, r0
   2ab84:	4628      	mov	r0, r5
   2ab86:	f014 ffcf 	bl	3fb28 <cJSON_AddItemToArray>
			++item_cnt;
   2ab8a:	3401      	adds	r4, #1
		if (ui->flip) {
   2ab8c:	7833      	ldrb	r3, [r6, #0]
   2ab8e:	075b      	lsls	r3, r3, #29
   2ab90:	d507      	bpl.n	2aba2 <nrf_cloud_service_info_json_encode+0xfa>
			cJSON_AddItemToArray(array,
   2ab92:	482c      	ldr	r0, [pc, #176]	; (2ac44 <nrf_cloud_service_info_json_encode+0x19c>)
   2ab94:	f007 fa70 	bl	32078 <cJSON_CreateString>
   2ab98:	4601      	mov	r1, r0
   2ab9a:	4628      	mov	r0, r5
   2ab9c:	f014 ffc4 	bl	3fb28 <cJSON_AddItemToArray>
			++item_cnt;
   2aba0:	3401      	adds	r4, #1
		if (ui->button) {
   2aba2:	7873      	ldrb	r3, [r6, #1]
   2aba4:	07d8      	lsls	r0, r3, #31
   2aba6:	d507      	bpl.n	2abb8 <nrf_cloud_service_info_json_encode+0x110>
			cJSON_AddItemToArray(array,
   2aba8:	4827      	ldr	r0, [pc, #156]	; (2ac48 <nrf_cloud_service_info_json_encode+0x1a0>)
   2abaa:	f007 fa65 	bl	32078 <cJSON_CreateString>
   2abae:	4601      	mov	r1, r0
   2abb0:	4628      	mov	r0, r5
   2abb2:	f014 ffb9 	bl	3fb28 <cJSON_AddItemToArray>
			++item_cnt;
   2abb6:	3401      	adds	r4, #1
		if (ui->temperature) {
   2abb8:	7833      	ldrb	r3, [r6, #0]
   2abba:	07d9      	lsls	r1, r3, #31
   2abbc:	d507      	bpl.n	2abce <nrf_cloud_service_info_json_encode+0x126>
			cJSON_AddItemToArray(array,
   2abbe:	4823      	ldr	r0, [pc, #140]	; (2ac4c <nrf_cloud_service_info_json_encode+0x1a4>)
   2abc0:	f007 fa5a 	bl	32078 <cJSON_CreateString>
   2abc4:	4601      	mov	r1, r0
   2abc6:	4628      	mov	r0, r5
   2abc8:	f014 ffae 	bl	3fb28 <cJSON_AddItemToArray>
			++item_cnt;
   2abcc:	3401      	adds	r4, #1
		if (ui->humidity) {
   2abce:	7833      	ldrb	r3, [r6, #0]
   2abd0:	071a      	lsls	r2, r3, #28
   2abd2:	d507      	bpl.n	2abe4 <nrf_cloud_service_info_json_encode+0x13c>
			cJSON_AddItemToArray(array,
   2abd4:	481e      	ldr	r0, [pc, #120]	; (2ac50 <nrf_cloud_service_info_json_encode+0x1a8>)
   2abd6:	f007 fa4f 	bl	32078 <cJSON_CreateString>
   2abda:	4601      	mov	r1, r0
   2abdc:	4628      	mov	r0, r5
   2abde:	f014 ffa3 	bl	3fb28 <cJSON_AddItemToArray>
			++item_cnt;
   2abe2:	3401      	adds	r4, #1
		if (ui->light_sensor) {
   2abe4:	f996 3000 	ldrsb.w	r3, [r6]
   2abe8:	2b00      	cmp	r3, #0
   2abea:	da07      	bge.n	2abfc <nrf_cloud_service_info_json_encode+0x154>
			cJSON_AddItemToArray(array,
   2abec:	4819      	ldr	r0, [pc, #100]	; (2ac54 <nrf_cloud_service_info_json_encode+0x1ac>)
   2abee:	f007 fa43 	bl	32078 <cJSON_CreateString>
   2abf2:	4601      	mov	r1, r0
   2abf4:	4628      	mov	r0, r5
   2abf6:	f014 ff97 	bl	3fb28 <cJSON_AddItemToArray>
			++item_cnt;
   2abfa:	3401      	adds	r4, #1
		if (ui->rsrp) {
   2abfc:	7833      	ldrb	r3, [r6, #0]
   2abfe:	069b      	lsls	r3, r3, #26
   2ac00:	d507      	bpl.n	2ac12 <nrf_cloud_service_info_json_encode+0x16a>
			cJSON_AddItemToArray(array,
   2ac02:	4815      	ldr	r0, [pc, #84]	; (2ac58 <nrf_cloud_service_info_json_encode+0x1b0>)
   2ac04:	f007 fa38 	bl	32078 <cJSON_CreateString>
   2ac08:	4601      	mov	r1, r0
   2ac0a:	4628      	mov	r0, r5
   2ac0c:	f014 ff8c 	bl	3fb28 <cJSON_AddItemToArray>
			++item_cnt;
   2ac10:	3401      	adds	r4, #1
		if (cJSON_GetArraySize(array) != item_cnt) {
   2ac12:	4628      	mov	r0, r5
   2ac14:	f014 ff70 	bl	3faf8 <cJSON_GetArraySize>
   2ac18:	42a0      	cmp	r0, r4
   2ac1a:	d098      	beq.n	2ab4e <nrf_cloud_service_info_json_encode+0xa6>
			cJSON_DeleteItemFromObject(svc_inf_obj, JSON_KEY_SRVC_INFO_UI);
   2ac1c:	4906      	ldr	r1, [pc, #24]	; (2ac38 <nrf_cloud_service_info_json_encode+0x190>)
   2ac1e:	e78a      	b.n	2ab36 <nrf_cloud_service_info_json_encode+0x8e>
		return -EINVAL;
   2ac20:	f06f 0015 	mvn.w	r0, #21
   2ac24:	e794      	b.n	2ab50 <nrf_cloud_service_info_json_encode+0xa8>
   2ac26:	bf00      	nop
   2ac28:	00047f04 	.word	0x00047f04
   2ac2c:	00047f0c 	.word	0x00047f0c
   2ac30:	00047f11 	.word	0x00047f11
   2ac34:	00047f17 	.word	0x00047f17
   2ac38:	00047f1b 	.word	0x00047f1b
   2ac3c:	00047f1e 	.word	0x00047f1e
   2ac40:	00048976 	.word	0x00048976
   2ac44:	00047f28 	.word	0x00047f28
   2ac48:	00047f2d 	.word	0x00047f2d
   2ac4c:	000437ef 	.word	0x000437ef
   2ac50:	000437f4 	.word	0x000437f4
   2ac54:	00047f34 	.word	0x00047f34
   2ac58:	00047f3a 	.word	0x00047f3a

0002ac5c <nrf_cloud_device_status_encode>:
{
   2ac5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ac60:	460d      	mov	r5, r1
   2ac62:	4614      	mov	r4, r2
	if (!dev_status || !output) {
   2ac64:	4607      	mov	r7, r0
   2ac66:	2800      	cmp	r0, #0
   2ac68:	d03d      	beq.n	2ace6 <nrf_cloud_device_status_encode+0x8a>
   2ac6a:	2900      	cmp	r1, #0
   2ac6c:	d03b      	beq.n	2ace6 <nrf_cloud_device_status_encode+0x8a>
	cJSON *root_obj = cJSON_CreateObject();
   2ac6e:	f007 fa27 	bl	320c0 <cJSON_CreateObject>
   2ac72:	4606      	mov	r6, r0
	if (include_state) {
   2ac74:	b114      	cbz	r4, 2ac7c <nrf_cloud_device_status_encode+0x20>
		state_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_STATE);
   2ac76:	491d      	ldr	r1, [pc, #116]	; (2acec <nrf_cloud_device_status_encode+0x90>)
   2ac78:	f015 f822 	bl	3fcc0 <cJSON_AddObjectToObjectCS>
		reported_obj = cJSON_AddObjectToObjectCS(root_obj, JSON_KEY_REP);
   2ac7c:	491c      	ldr	r1, [pc, #112]	; (2acf0 <nrf_cloud_device_status_encode+0x94>)
   2ac7e:	f015 f81f 	bl	3fcc0 <cJSON_AddObjectToObjectCS>
	cJSON *device_obj = cJSON_AddObjectToObjectCS(reported_obj, JSON_KEY_DEVICE);
   2ac82:	491c      	ldr	r1, [pc, #112]	; (2acf4 <nrf_cloud_device_status_encode+0x98>)
   2ac84:	f015 f81c 	bl	3fcc0 <cJSON_AddObjectToObjectCS>
	cJSON *svc_inf_obj = cJSON_AddObjectToObjectCS(device_obj, JSON_KEY_SRVC_INFO);
   2ac88:	491b      	ldr	r1, [pc, #108]	; (2acf8 <nrf_cloud_device_status_encode+0x9c>)
	cJSON *device_obj = cJSON_AddObjectToObjectCS(reported_obj, JSON_KEY_DEVICE);
   2ac8a:	4604      	mov	r4, r0
	cJSON *svc_inf_obj = cJSON_AddObjectToObjectCS(device_obj, JSON_KEY_SRVC_INFO);
   2ac8c:	f015 f818 	bl	3fcc0 <cJSON_AddObjectToObjectCS>
	if (svc_inf_obj == NULL) {
   2ac90:	4680      	mov	r8, r0
   2ac92:	b958      	cbnz	r0, 2acac <nrf_cloud_device_status_encode+0x50>
		err = -ENOMEM;
   2ac94:	f06f 040b 	mvn.w	r4, #11
	cJSON_Delete(root_obj);
   2ac98:	4630      	mov	r0, r6
   2ac9a:	f007 f94f 	bl	31f3c <cJSON_Delete>
	if (err) {
   2ac9e:	b114      	cbz	r4, 2aca6 <nrf_cloud_device_status_encode+0x4a>
		output->ptr = NULL;
   2aca0:	2300      	movs	r3, #0
		output->len = 0;
   2aca2:	e9c5 3300 	strd	r3, r3, [r5]
}
   2aca6:	4620      	mov	r0, r4
   2aca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (dev_status->modem) {
   2acac:	6838      	ldr	r0, [r7, #0]
   2acae:	b960      	cbnz	r0, 2acca <nrf_cloud_device_status_encode+0x6e>
	if (dev_status->svc) {
   2acb0:	6878      	ldr	r0, [r7, #4]
   2acb2:	b988      	cbnz	r0, 2acd8 <nrf_cloud_device_status_encode+0x7c>
	output->ptr = cJSON_PrintUnformatted(root_obj);
   2acb4:	4630      	mov	r0, r6
   2acb6:	f014 ff1c 	bl	3faf2 <cJSON_PrintUnformatted>
   2acba:	6068      	str	r0, [r5, #4]
	if (output->ptr) {
   2acbc:	2800      	cmp	r0, #0
   2acbe:	d0e9      	beq.n	2ac94 <nrf_cloud_device_status_encode+0x38>
		output->len = strlen(output->ptr);
   2acc0:	f7f2 fabf 	bl	1d242 <strlen>
   2acc4:	2400      	movs	r4, #0
   2acc6:	6028      	str	r0, [r5, #0]
   2acc8:	e7e6      	b.n	2ac98 <nrf_cloud_device_status_encode+0x3c>
		err = nrf_cloud_modem_info_json_encode(dev_status->modem, device_obj);
   2acca:	4621      	mov	r1, r4
   2accc:	f7ff fe7a 	bl	2a9c4 <nrf_cloud_modem_info_json_encode>
		if (err) {
   2acd0:	4604      	mov	r4, r0
   2acd2:	2800      	cmp	r0, #0
   2acd4:	d0ec      	beq.n	2acb0 <nrf_cloud_device_status_encode+0x54>
   2acd6:	e7df      	b.n	2ac98 <nrf_cloud_device_status_encode+0x3c>
		err = nrf_cloud_service_info_json_encode(dev_status->svc, svc_inf_obj);
   2acd8:	4641      	mov	r1, r8
   2acda:	f7ff fee5 	bl	2aaa8 <nrf_cloud_service_info_json_encode>
		if (err) {
   2acde:	4604      	mov	r4, r0
   2ace0:	2800      	cmp	r0, #0
   2ace2:	d0e7      	beq.n	2acb4 <nrf_cloud_device_status_encode+0x58>
   2ace4:	e7d8      	b.n	2ac98 <nrf_cloud_device_status_encode+0x3c>
		return -EINVAL;
   2ace6:	f06f 0415 	mvn.w	r4, #21
   2acea:	e7dc      	b.n	2aca6 <nrf_cloud_device_status_encode+0x4a>
   2acec:	00047abf 	.word	0x00047abf
   2acf0:	00047c12 	.word	0x00047c12
   2acf4:	00047f3f 	.word	0x00047f3f
   2acf8:	00047f46 	.word	0x00047f46

0002acfc <get_string_from_array>:
{
   2acfc:	b570      	push	{r4, r5, r6, lr}
   2acfe:	4605      	mov	r5, r0
   2ad00:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(string_out != NULL);
   2ad02:	4614      	mov	r4, r2
   2ad04:	b952      	cbnz	r2, 2ad1c <get_string_from_array+0x20>
   2ad06:	490d      	ldr	r1, [pc, #52]	; (2ad3c <get_string_from_array+0x40>)
   2ad08:	480d      	ldr	r0, [pc, #52]	; (2ad40 <get_string_from_array+0x44>)
   2ad0a:	f240 42cf 	movw	r2, #1231	; 0x4cf
   2ad0e:	f011 fe95 	bl	3ca3c <assert_print>
   2ad12:	f240 41cf 	movw	r1, #1231	; 0x4cf
   2ad16:	4809      	ldr	r0, [pc, #36]	; (2ad3c <get_string_from_array+0x40>)
   2ad18:	f011 fe89 	bl	3ca2e <assert_post_action>
	cJSON *item = cJSON_GetArrayItem(array, index);
   2ad1c:	4628      	mov	r0, r5
   2ad1e:	4631      	mov	r1, r6
   2ad20:	f014 fef2 	bl	3fb08 <cJSON_GetArrayItem>
   2ad24:	4605      	mov	r5, r0
	if (!cJSON_IsString(item)) {
   2ad26:	f015 f802 	bl	3fd2e <cJSON_IsString>
   2ad2a:	b118      	cbz	r0, 2ad34 <get_string_from_array+0x38>
	return 0;
   2ad2c:	2000      	movs	r0, #0
	*string_out = item->valuestring;
   2ad2e:	692b      	ldr	r3, [r5, #16]
   2ad30:	6023      	str	r3, [r4, #0]
}
   2ad32:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2ad34:	f06f 0015 	mvn.w	r0, #21
   2ad38:	e7fb      	b.n	2ad32 <get_string_from_array+0x36>
   2ad3a:	bf00      	nop
   2ad3c:	00047a80 	.word	0x00047a80
   2ad40:	00043ff2 	.word	0x00043ff2

0002ad44 <get_string_from_obj>:
{
   2ad44:	b570      	push	{r4, r5, r6, lr}
   2ad46:	4605      	mov	r5, r0
   2ad48:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(string_out != NULL);
   2ad4a:	4614      	mov	r4, r2
   2ad4c:	b952      	cbnz	r2, 2ad64 <get_string_from_obj+0x20>
   2ad4e:	490d      	ldr	r1, [pc, #52]	; (2ad84 <get_string_from_obj+0x40>)
   2ad50:	480d      	ldr	r0, [pc, #52]	; (2ad88 <get_string_from_obj+0x44>)
   2ad52:	f240 42df 	movw	r2, #1247	; 0x4df
   2ad56:	f011 fe71 	bl	3ca3c <assert_print>
   2ad5a:	f240 41df 	movw	r1, #1247	; 0x4df
   2ad5e:	4809      	ldr	r0, [pc, #36]	; (2ad84 <get_string_from_obj+0x40>)
   2ad60:	f011 fe65 	bl	3ca2e <assert_post_action>
	cJSON *item = cJSON_GetObjectItem(obj, key);
   2ad64:	4628      	mov	r0, r5
   2ad66:	4631      	mov	r1, r6
   2ad68:	f014 fed4 	bl	3fb14 <cJSON_GetObjectItem>
   2ad6c:	4605      	mov	r5, r0
	if (!cJSON_IsString(item)) {
   2ad6e:	f014 ffde 	bl	3fd2e <cJSON_IsString>
   2ad72:	b118      	cbz	r0, 2ad7c <get_string_from_obj+0x38>
	return 0;
   2ad74:	2000      	movs	r0, #0
	*string_out = item->valuestring;
   2ad76:	692b      	ldr	r3, [r5, #16]
   2ad78:	6023      	str	r3, [r4, #0]
}
   2ad7a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2ad7c:	f06f 0015 	mvn.w	r0, #21
   2ad80:	e7fb      	b.n	2ad7a <get_string_from_obj+0x36>
   2ad82:	bf00      	nop
   2ad84:	00047a80 	.word	0x00047a80
   2ad88:	00043ff2 	.word	0x00043ff2

0002ad8c <nrf_cloud_parse_cell_pos_json>:

static int nrf_cloud_parse_cell_pos_json(const cJSON *const cell_pos_obj,
	struct nrf_cloud_cell_pos_result *const location_out)
{
   2ad8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2ad90:	460c      	mov	r4, r1
	if (!cell_pos_obj || !location_out) {
   2ad92:	4605      	mov	r5, r0
   2ad94:	2800      	cmp	r0, #0
   2ad96:	d04f      	beq.n	2ae38 <nrf_cloud_parse_cell_pos_json+0xac>
   2ad98:	2900      	cmp	r1, #0
   2ad9a:	d04d      	beq.n	2ae38 <nrf_cloud_parse_cell_pos_json+0xac>
	}

	cJSON *lat, *lon, *unc;
	char *type;

	lat = cJSON_GetObjectItem(cell_pos_obj,
   2ad9c:	4928      	ldr	r1, [pc, #160]	; (2ae40 <nrf_cloud_parse_cell_pos_json+0xb4>)
   2ad9e:	f014 feb9 	bl	3fb14 <cJSON_GetObjectItem>
				  NRF_CLOUD_CELL_POS_JSON_KEY_LAT);
	lon = cJSON_GetObjectItem(cell_pos_obj,
   2ada2:	4928      	ldr	r1, [pc, #160]	; (2ae44 <nrf_cloud_parse_cell_pos_json+0xb8>)
	lat = cJSON_GetObjectItem(cell_pos_obj,
   2ada4:	4680      	mov	r8, r0
	lon = cJSON_GetObjectItem(cell_pos_obj,
   2ada6:	4628      	mov	r0, r5
   2ada8:	f014 feb4 	bl	3fb14 <cJSON_GetObjectItem>
				NRF_CLOUD_CELL_POS_JSON_KEY_LON);
	unc = cJSON_GetObjectItem(cell_pos_obj,
   2adac:	4926      	ldr	r1, [pc, #152]	; (2ae48 <nrf_cloud_parse_cell_pos_json+0xbc>)
	lon = cJSON_GetObjectItem(cell_pos_obj,
   2adae:	4607      	mov	r7, r0
	unc = cJSON_GetObjectItem(cell_pos_obj,
   2adb0:	4628      	mov	r0, r5
   2adb2:	f014 feaf 	bl	3fb14 <cJSON_GetObjectItem>
   2adb6:	4606      	mov	r6, r0
				NRF_CLOUD_CELL_POS_JSON_KEY_UNCERT);

	if (!cJSON_IsNumber(lat) || !cJSON_IsNumber(lon) ||
   2adb8:	4640      	mov	r0, r8
   2adba:	f014 ffb1 	bl	3fd20 <cJSON_IsNumber>
   2adbe:	b920      	cbnz	r0, 2adca <nrf_cloud_parse_cell_pos_json+0x3e>
	    !cJSON_IsNumber(unc)) {
		return -EBADMSG;
   2adc0:	f06f 004c 	mvn.w	r0, #76	; 0x4c
	} else {
		LOG_WRN("Cellular positioning type not found in message");
	}

	return 0;
}
   2adc4:	b002      	add	sp, #8
   2adc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!cJSON_IsNumber(lat) || !cJSON_IsNumber(lon) ||
   2adca:	4638      	mov	r0, r7
   2adcc:	f014 ffa8 	bl	3fd20 <cJSON_IsNumber>
   2add0:	2800      	cmp	r0, #0
   2add2:	d0f5      	beq.n	2adc0 <nrf_cloud_parse_cell_pos_json+0x34>
	    !cJSON_IsNumber(unc)) {
   2add4:	4630      	mov	r0, r6
   2add6:	f014 ffa3 	bl	3fd20 <cJSON_IsNumber>
	if (!cJSON_IsNumber(lat) || !cJSON_IsNumber(lon) ||
   2adda:	2800      	cmp	r0, #0
   2addc:	d0f0      	beq.n	2adc0 <nrf_cloud_parse_cell_pos_json+0x34>
	location_out->lat = lat->valuedouble;
   2adde:	e9d8 2306 	ldrd	r2, r3, [r8, #24]
   2ade2:	e9c4 2302 	strd	r2, r3, [r4, #8]
	location_out->lon = lon->valuedouble;
   2ade6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   2adea:	e9c4 2304 	strd	r2, r3, [r4, #16]
	location_out->unc = (uint32_t)unc->valueint;
   2adee:	6973      	ldr	r3, [r6, #20]
	if (!get_string_from_obj(cell_pos_obj, NRF_CLOUD_JSON_FULFILL_KEY, &type)) {
   2adf0:	4628      	mov	r0, r5
	location_out->unc = (uint32_t)unc->valueint;
   2adf2:	61a3      	str	r3, [r4, #24]
	location_out->type = CELL_POS_TYPE__INVALID;
   2adf4:	2302      	movs	r3, #2
	if (!get_string_from_obj(cell_pos_obj, NRF_CLOUD_JSON_FULFILL_KEY, &type)) {
   2adf6:	4915      	ldr	r1, [pc, #84]	; (2ae4c <nrf_cloud_parse_cell_pos_json+0xc0>)
	location_out->type = CELL_POS_TYPE__INVALID;
   2adf8:	7023      	strb	r3, [r4, #0]
	if (!get_string_from_obj(cell_pos_obj, NRF_CLOUD_JSON_FULFILL_KEY, &type)) {
   2adfa:	aa01      	add	r2, sp, #4
   2adfc:	f7ff ffa2 	bl	2ad44 <get_string_from_obj>
   2ae00:	b9a8      	cbnz	r0, 2ae2e <nrf_cloud_parse_cell_pos_json+0xa2>
		if (!strcmp(type, NRF_CLOUD_CELL_POS_TYPE_VAL_MCELL)) {
   2ae02:	4913      	ldr	r1, [pc, #76]	; (2ae50 <nrf_cloud_parse_cell_pos_json+0xc4>)
   2ae04:	9801      	ldr	r0, [sp, #4]
   2ae06:	f7f2 fa12 	bl	1d22e <strcmp>
   2ae0a:	b910      	cbnz	r0, 2ae12 <nrf_cloud_parse_cell_pos_json+0x86>
			location_out->type = CELL_POS_TYPE_MULTI;
   2ae0c:	2301      	movs	r3, #1
   2ae0e:	7023      	strb	r3, [r4, #0]
   2ae10:	e7d8      	b.n	2adc4 <nrf_cloud_parse_cell_pos_json+0x38>
		} else if (!strcmp(type, NRF_CLOUD_CELL_POS_TYPE_VAL_SCELL)) {
   2ae12:	4910      	ldr	r1, [pc, #64]	; (2ae54 <nrf_cloud_parse_cell_pos_json+0xc8>)
   2ae14:	9801      	ldr	r0, [sp, #4]
   2ae16:	f7f2 fa0a 	bl	1d22e <strcmp>
   2ae1a:	b908      	cbnz	r0, 2ae20 <nrf_cloud_parse_cell_pos_json+0x94>
			location_out->type = CELL_POS_TYPE_SINGLE;
   2ae1c:	7020      	strb	r0, [r4, #0]
   2ae1e:	e7d1      	b.n	2adc4 <nrf_cloud_parse_cell_pos_json+0x38>
			LOG_WRN("Unhandled cellular positioning type: %s", log_strdup(type));
   2ae20:	2157      	movs	r1, #87	; 0x57
   2ae22:	9a01      	ldr	r2, [sp, #4]
   2ae24:	480c      	ldr	r0, [pc, #48]	; (2ae58 <nrf_cloud_parse_cell_pos_json+0xcc>)
   2ae26:	f011 fe43 	bl	3cab0 <z_log_minimal_printk>
	return 0;
   2ae2a:	2000      	movs	r0, #0
   2ae2c:	e7ca      	b.n	2adc4 <nrf_cloud_parse_cell_pos_json+0x38>
		LOG_WRN("Cellular positioning type not found in message");
   2ae2e:	2157      	movs	r1, #87	; 0x57
   2ae30:	480a      	ldr	r0, [pc, #40]	; (2ae5c <nrf_cloud_parse_cell_pos_json+0xd0>)
   2ae32:	f011 fe3d 	bl	3cab0 <z_log_minimal_printk>
   2ae36:	e7f8      	b.n	2ae2a <nrf_cloud_parse_cell_pos_json+0x9e>
		return -EINVAL;
   2ae38:	f06f 0015 	mvn.w	r0, #21
   2ae3c:	e7c2      	b.n	2adc4 <nrf_cloud_parse_cell_pos_json+0x38>
   2ae3e:	bf00      	nop
   2ae40:	00047f9c 	.word	0x00047f9c
   2ae44:	00047fa0 	.word	0x00047fa0
   2ae48:	00047fa4 	.word	0x00047fa4
   2ae4c:	00047fb0 	.word	0x00047fb0
   2ae50:	00047fbe 	.word	0x00047fbe
   2ae54:	00047fc4 	.word	0x00047fc4
   2ae58:	00047fca 	.word	0x00047fca
   2ae5c:	00047ff7 	.word	0x00047ff7

0002ae60 <nrf_cloud_format_single_cell_pos_req_json>:
{
   2ae60:	b570      	push	{r4, r5, r6, lr}
	cJSON *lte_array = cJSON_AddArrayToObjectCS(req_obj_out, NRF_CLOUD_CELL_POS_JSON_KEY_LTE);
   2ae62:	490f      	ldr	r1, [pc, #60]	; (2aea0 <nrf_cloud_format_single_cell_pos_req_json+0x40>)
{
   2ae64:	4605      	mov	r5, r0
	cJSON *lte_array = cJSON_AddArrayToObjectCS(req_obj_out, NRF_CLOUD_CELL_POS_JSON_KEY_LTE);
   2ae66:	f014 ff01 	bl	3fc6c <cJSON_AddArrayToObjectCS>
   2ae6a:	4606      	mov	r6, r0
	cJSON *lte_obj = cJSON_CreateObject();
   2ae6c:	f007 f928 	bl	320c0 <cJSON_CreateObject>
   2ae70:	4604      	mov	r4, r0
	if (!cJSON_AddItemToArray(lte_array, lte_obj)) {
   2ae72:	4601      	mov	r1, r0
   2ae74:	4630      	mov	r0, r6
   2ae76:	f014 fe57 	bl	3fb28 <cJSON_AddItemToArray>
   2ae7a:	b948      	cbnz	r0, 2ae90 <nrf_cloud_format_single_cell_pos_req_json+0x30>
		cJSON_Delete(lte_obj);
   2ae7c:	4620      	mov	r0, r4
   2ae7e:	f007 f85d 	bl	31f3c <cJSON_Delete>
		err = -ENOMEM;
   2ae82:	f06f 040b 	mvn.w	r4, #11
		cJSON_DeleteItemFromObject(req_obj_out, NRF_CLOUD_CELL_POS_JSON_KEY_LTE);
   2ae86:	4628      	mov	r0, r5
   2ae88:	4905      	ldr	r1, [pc, #20]	; (2aea0 <nrf_cloud_format_single_cell_pos_req_json+0x40>)
   2ae8a:	f014 fe7b 	bl	3fb84 <cJSON_DeleteItemFromObject>
	return err;
   2ae8e:	e005      	b.n	2ae9c <nrf_cloud_format_single_cell_pos_req_json+0x3c>
		err = nrf_cloud_json_add_modem_info(lte_obj);
   2ae90:	4620      	mov	r0, r4
   2ae92:	f7ff f9c7 	bl	2a224 <nrf_cloud_json_add_modem_info>
	if (err) {
   2ae96:	4604      	mov	r4, r0
   2ae98:	2800      	cmp	r0, #0
   2ae9a:	d1f4      	bne.n	2ae86 <nrf_cloud_format_single_cell_pos_req_json+0x26>
}
   2ae9c:	4620      	mov	r0, r4
   2ae9e:	bd70      	pop	{r4, r5, r6, pc}
   2aea0:	0004802b 	.word	0x0004802b

0002aea4 <nrf_cloud_format_cell_pos_req_json>:
{
   2aea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2aea8:	b085      	sub	sp, #20
   2aeaa:	4690      	mov	r8, r2
	if (!inf || !inf_cnt || !req_obj_out) {
   2aeac:	4604      	mov	r4, r0
{
   2aeae:	9101      	str	r1, [sp, #4]
	if (!inf || !inf_cnt || !req_obj_out) {
   2aeb0:	2800      	cmp	r0, #0
   2aeb2:	f000 8123 	beq.w	2b0fc <__kernel_ram_size+0x24c>
   2aeb6:	2900      	cmp	r1, #0
   2aeb8:	f000 8120 	beq.w	2b0fc <__kernel_ram_size+0x24c>
   2aebc:	2a00      	cmp	r2, #0
   2aebe:	f000 811d 	beq.w	2b0fc <__kernel_ram_size+0x24c>
	lte_array = cJSON_AddArrayToObjectCS(req_obj_out, NRF_CLOUD_CELL_POS_JSON_KEY_LTE);
   2aec2:	4610      	mov	r0, r2
   2aec4:	498f      	ldr	r1, [pc, #572]	; (2b104 <__kernel_ram_size+0x254>)
   2aec6:	f014 fed1 	bl	3fc6c <cJSON_AddArrayToObjectCS>
	if (!lte_array) {
   2aeca:	9000      	str	r0, [sp, #0]
   2aecc:	2800      	cmp	r0, #0
   2aece:	f000 8090 	beq.w	2aff2 <__kernel_ram_size+0x142>
	for (size_t i = 0; i < inf_cnt; ++i) {
   2aed2:	f04f 0a00 	mov.w	sl, #0
	cJSON *nmr_array = NULL;
   2aed6:	46d3      	mov	fp, sl
		lte_obj = cJSON_CreateObject();
   2aed8:	f007 f8f2 	bl	320c0 <cJSON_CreateObject>
		if (!lte_obj) {
   2aedc:	4605      	mov	r5, r0
   2aede:	2800      	cmp	r0, #0
   2aee0:	f000 8087 	beq.w	2aff2 <__kernel_ram_size+0x142>
		if (!cJSON_AddItemToArray(lte_array, lte_obj)) {
   2aee4:	4601      	mov	r1, r0
   2aee6:	9800      	ldr	r0, [sp, #0]
   2aee8:	f014 fe1e 	bl	3fb28 <cJSON_AddItemToArray>
   2aeec:	b918      	cbnz	r0, 2aef6 <__kernel_ram_size+0x46>
				cJSON_Delete(ncell_obj);
   2aeee:	4628      	mov	r0, r5
   2aef0:	f007 f824 	bl	31f3c <cJSON_Delete>
				goto cleanup;
   2aef4:	e07d      	b.n	2aff2 <__kernel_ram_size+0x142>
		if (json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_ECI, cur->id) ||
   2aef6:	68a0      	ldr	r0, [r4, #8]
   2aef8:	f7f1 fbe4 	bl	1c6c4 <__aeabi_ui2d>
   2aefc:	4602      	mov	r2, r0
   2aefe:	460b      	mov	r3, r1
   2af00:	4628      	mov	r0, r5
   2af02:	4981      	ldr	r1, [pc, #516]	; (2b108 <__kernel_ram_size+0x258>)
   2af04:	f014 fb46 	bl	3f594 <json_add_num_cs>
   2af08:	2800      	cmp	r0, #0
   2af0a:	d172      	bne.n	2aff2 <__kernel_ram_size+0x142>
		    json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_MCC, cur->mcc) ||
   2af0c:	6820      	ldr	r0, [r4, #0]
   2af0e:	f7f1 fbe9 	bl	1c6e4 <__aeabi_i2d>
   2af12:	4602      	mov	r2, r0
   2af14:	460b      	mov	r3, r1
   2af16:	4628      	mov	r0, r5
   2af18:	497c      	ldr	r1, [pc, #496]	; (2b10c <__kernel_ram_size+0x25c>)
   2af1a:	f014 fb3b 	bl	3f594 <json_add_num_cs>
		if (json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_ECI, cur->id) ||
   2af1e:	2800      	cmp	r0, #0
   2af20:	d167      	bne.n	2aff2 <__kernel_ram_size+0x142>
		    json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_MNC, cur->mnc) ||
   2af22:	6860      	ldr	r0, [r4, #4]
   2af24:	f7f1 fbde 	bl	1c6e4 <__aeabi_i2d>
   2af28:	4602      	mov	r2, r0
   2af2a:	460b      	mov	r3, r1
   2af2c:	4628      	mov	r0, r5
   2af2e:	4978      	ldr	r1, [pc, #480]	; (2b110 <__kernel_ram_size+0x260>)
   2af30:	f014 fb30 	bl	3f594 <json_add_num_cs>
		    json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_MCC, cur->mcc) ||
   2af34:	2800      	cmp	r0, #0
   2af36:	d15c      	bne.n	2aff2 <__kernel_ram_size+0x142>
		    json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_TAC, cur->tac)) {
   2af38:	68e0      	ldr	r0, [r4, #12]
   2af3a:	f7f1 fbc3 	bl	1c6c4 <__aeabi_ui2d>
   2af3e:	4602      	mov	r2, r0
   2af40:	460b      	mov	r3, r1
   2af42:	4628      	mov	r0, r5
   2af44:	4973      	ldr	r1, [pc, #460]	; (2b114 <__kernel_ram_size+0x264>)
   2af46:	f014 fb25 	bl	3f594 <json_add_num_cs>
		    json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_MNC, cur->mnc) ||
   2af4a:	4606      	mov	r6, r0
   2af4c:	2800      	cmp	r0, #0
   2af4e:	d150      	bne.n	2aff2 <__kernel_ram_size+0x142>
		if ((cur->earfcn != NRF_CLOUD_CELL_POS_OMIT_EARFCN) &&
   2af50:	6920      	ldr	r0, [r4, #16]
   2af52:	1c43      	adds	r3, r0, #1
   2af54:	d143      	bne.n	2afde <__kernel_ram_size+0x12e>
		if ((cur->rsrp != NRF_CLOUD_CELL_POS_OMIT_RSRP) &&
   2af56:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
   2af5a:	2bff      	cmp	r3, #255	; 0xff
   2af5c:	d154      	bne.n	2b008 <__kernel_ram_size+0x158>
		if ((cur->rsrq != NRF_CLOUD_CELL_POS_OMIT_RSRQ) &&
   2af5e:	f9b4 002c 	ldrsh.w	r0, [r4, #44]	; 0x2c
   2af62:	28ff      	cmp	r0, #255	; 0xff
   2af64:	d010      	beq.n	2af88 <__kernel_ram_size+0xd8>
				    RSRQ_ADJ(cur->rsrq))) {
   2af66:	f7f1 fbbd 	bl	1c6e4 <__aeabi_i2d>
   2af6a:	2200      	movs	r2, #0
   2af6c:	4b6a      	ldr	r3, [pc, #424]	; (2b118 <__kernel_ram_size+0x268>)
   2af6e:	f7f1 fc23 	bl	1c7b8 <__aeabi_dmul>
		    json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_RSRQ,
   2af72:	2200      	movs	r2, #0
   2af74:	4b69      	ldr	r3, [pc, #420]	; (2b11c <__kernel_ram_size+0x26c>)
   2af76:	f7f1 fa67 	bl	1c448 <__aeabi_dsub>
   2af7a:	4602      	mov	r2, r0
   2af7c:	460b      	mov	r3, r1
   2af7e:	4628      	mov	r0, r5
   2af80:	4967      	ldr	r1, [pc, #412]	; (2b120 <__kernel_ram_size+0x270>)
   2af82:	f014 fb07 	bl	3f594 <json_add_num_cs>
		if ((cur->rsrq != NRF_CLOUD_CELL_POS_OMIT_RSRQ) &&
   2af86:	bba0      	cbnz	r0, 2aff2 <__kernel_ram_size+0x142>
		if (cur->timing_advance != NRF_CLOUD_CELL_POS_OMIT_TIME_ADV) {
   2af88:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2af8c:	8aa3      	ldrh	r3, [r4, #20]
   2af8e:	4293      	cmp	r3, r2
   2af90:	d00d      	beq.n	2afae <__kernel_ram_size+0xfe>
			if (json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_T_ADV, t_adv)) {
   2af92:	f245 0020 	movw	r0, #20512	; 0x5020
   2af96:	4298      	cmp	r0, r3
   2af98:	bf28      	it	cs
   2af9a:	4618      	movcs	r0, r3
   2af9c:	f7f1 fb92 	bl	1c6c4 <__aeabi_ui2d>
   2afa0:	4602      	mov	r2, r0
   2afa2:	460b      	mov	r3, r1
   2afa4:	4628      	mov	r0, r5
   2afa6:	495f      	ldr	r1, [pc, #380]	; (2b124 <__kernel_ram_size+0x274>)
   2afa8:	f014 faf4 	bl	3f594 <json_add_num_cs>
   2afac:	bb08      	cbnz	r0, 2aff2 <__kernel_ram_size+0x142>
		if (lte->ncells_count) {
   2afae:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   2afb2:	2a00      	cmp	r2, #0
   2afb4:	d138      	bne.n	2b028 <__kernel_ram_size+0x178>
		for (uint8_t j = 0; nmr_array && (j < lte->ncells_count); ++j) {
   2afb6:	f04f 0900 	mov.w	r9, #0
   2afba:	fa5f f789 	uxtb.w	r7, r9
   2afbe:	f1bb 0f00 	cmp.w	fp, #0
   2afc2:	d003      	beq.n	2afcc <__kernel_ram_size+0x11c>
   2afc4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   2afc8:	42bb      	cmp	r3, r7
   2afca:	d83f      	bhi.n	2b04c <__kernel_ram_size+0x19c>
	for (size_t i = 0; i < inf_cnt; ++i) {
   2afcc:	9b01      	ldr	r3, [sp, #4]
   2afce:	f10a 0a01 	add.w	sl, sl, #1
   2afd2:	459a      	cmp	sl, r3
   2afd4:	f104 0438 	add.w	r4, r4, #56	; 0x38
   2afd8:	f47f af7e 	bne.w	2aed8 <__kernel_ram_size+0x28>
   2afdc:	e02a      	b.n	2b034 <__kernel_ram_size+0x184>
		    json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_EARFCN, cur->earfcn)) {
   2afde:	f7f1 fb71 	bl	1c6c4 <__aeabi_ui2d>
   2afe2:	4602      	mov	r2, r0
   2afe4:	460b      	mov	r3, r1
   2afe6:	4628      	mov	r0, r5
   2afe8:	494f      	ldr	r1, [pc, #316]	; (2b128 <__kernel_ram_size+0x278>)
   2afea:	f014 fad3 	bl	3f594 <json_add_num_cs>
		if ((cur->earfcn != NRF_CLOUD_CELL_POS_OMIT_EARFCN) &&
   2afee:	2800      	cmp	r0, #0
   2aff0:	d0b1      	beq.n	2af56 <__kernel_ram_size+0xa6>
	cJSON_DeleteItemFromObject(req_obj_out, NRF_CLOUD_CELL_POS_JSON_KEY_LTE);
   2aff2:	4640      	mov	r0, r8
   2aff4:	4943      	ldr	r1, [pc, #268]	; (2b104 <__kernel_ram_size+0x254>)
   2aff6:	f014 fdc5 	bl	3fb84 <cJSON_DeleteItemFromObject>
	LOG_ERR("Failed to format location request, out of memory");
   2affa:	2145      	movs	r1, #69	; 0x45
   2affc:	484b      	ldr	r0, [pc, #300]	; (2b12c <__kernel_ram_size+0x27c>)
   2affe:	f011 fd57 	bl	3cab0 <z_log_minimal_printk>
	return -ENOMEM;
   2b002:	f06f 060b 	mvn.w	r6, #11
   2b006:	e015      	b.n	2b034 <__kernel_ram_size+0x184>
				    RSRP_ADJ(cur->rsrp))) {
   2b008:	2b00      	cmp	r3, #0
   2b00a:	bfd4      	ite	le
   2b00c:	208c      	movle	r0, #140	; 0x8c
   2b00e:	208d      	movgt	r0, #141	; 0x8d
		    json_add_num_cs(lte_obj, NRF_CLOUD_CELL_POS_JSON_KEY_RSRP,
   2b010:	1a18      	subs	r0, r3, r0
   2b012:	f7f1 fb67 	bl	1c6e4 <__aeabi_i2d>
   2b016:	4602      	mov	r2, r0
   2b018:	460b      	mov	r3, r1
   2b01a:	4628      	mov	r0, r5
   2b01c:	4944      	ldr	r1, [pc, #272]	; (2b130 <__kernel_ram_size+0x280>)
   2b01e:	f014 fab9 	bl	3f594 <json_add_num_cs>
		if ((cur->rsrp != NRF_CLOUD_CELL_POS_OMIT_RSRP) &&
   2b022:	2800      	cmp	r0, #0
   2b024:	d09b      	beq.n	2af5e <__kernel_ram_size+0xae>
   2b026:	e7e4      	b.n	2aff2 <__kernel_ram_size+0x142>
			if (lte->neighbor_cells == NULL) {
   2b028:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2b02a:	b93b      	cbnz	r3, 2b03c <__kernel_ram_size+0x18c>
				LOG_WRN("Neighbor cell count is %u, but buffer is NULL",
   2b02c:	2157      	movs	r1, #87	; 0x57
   2b02e:	4841      	ldr	r0, [pc, #260]	; (2b134 <__kernel_ram_size+0x284>)
   2b030:	f011 fd3e 	bl	3cab0 <z_log_minimal_printk>
}
   2b034:	4630      	mov	r0, r6
   2b036:	b005      	add	sp, #20
   2b038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			nmr_array = cJSON_AddArrayToObjectCS(lte_obj,
   2b03c:	4628      	mov	r0, r5
   2b03e:	493e      	ldr	r1, [pc, #248]	; (2b138 <__kernel_ram_size+0x288>)
   2b040:	f014 fe14 	bl	3fc6c <cJSON_AddArrayToObjectCS>
			if (!nmr_array) {
   2b044:	4683      	mov	fp, r0
   2b046:	2800      	cmp	r0, #0
   2b048:	d1b5      	bne.n	2afb6 <__kernel_ram_size+0x106>
   2b04a:	e7d2      	b.n	2aff2 <__kernel_ram_size+0x142>
			struct lte_lc_ncell *ncell = lte->neighbor_cells + j;
   2b04c:	013b      	lsls	r3, r7, #4
   2b04e:	9303      	str	r3, [sp, #12]
   2b050:	6b63      	ldr	r3, [r4, #52]	; 0x34
			if (ncell == NULL) {
   2b052:	eb13 1707 	adds.w	r7, r3, r7, lsl #4
			struct lte_lc_ncell *ncell = lte->neighbor_cells + j;
   2b056:	9302      	str	r3, [sp, #8]
			if (ncell == NULL) {
   2b058:	d0b8      	beq.n	2afcc <__kernel_ram_size+0x11c>
			ncell_obj = cJSON_CreateObject();
   2b05a:	f007 f831 	bl	320c0 <cJSON_CreateObject>
			if (!ncell_obj) {
   2b05e:	4605      	mov	r5, r0
   2b060:	2800      	cmp	r0, #0
   2b062:	d0c6      	beq.n	2aff2 <__kernel_ram_size+0x142>
			if (!cJSON_AddItemToArray(nmr_array, ncell_obj)) {
   2b064:	4601      	mov	r1, r0
   2b066:	4658      	mov	r0, fp
   2b068:	f014 fd5e 	bl	3fb28 <cJSON_AddItemToArray>
   2b06c:	2800      	cmp	r0, #0
   2b06e:	f43f af3e 	beq.w	2aeee <__kernel_ram_size+0x3e>
			if (json_add_num_cs(ncell_obj, NRF_CLOUD_CELL_POS_JSON_KEY_EARFCN,
   2b072:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   2b076:	5898      	ldr	r0, [r3, r2]
   2b078:	f7f1 fb24 	bl	1c6c4 <__aeabi_ui2d>
   2b07c:	4602      	mov	r2, r0
   2b07e:	460b      	mov	r3, r1
   2b080:	4628      	mov	r0, r5
   2b082:	4929      	ldr	r1, [pc, #164]	; (2b128 <__kernel_ram_size+0x278>)
   2b084:	f014 fa86 	bl	3f594 <json_add_num_cs>
   2b088:	2800      	cmp	r0, #0
   2b08a:	d1b2      	bne.n	2aff2 <__kernel_ram_size+0x142>
			    json_add_num_cs(ncell_obj, NRF_CLOUD_CELL_POS_JSON_KEY_PCI,
   2b08c:	8938      	ldrh	r0, [r7, #8]
   2b08e:	f7f1 fb19 	bl	1c6c4 <__aeabi_ui2d>
   2b092:	4602      	mov	r2, r0
   2b094:	460b      	mov	r3, r1
   2b096:	4628      	mov	r0, r5
   2b098:	4928      	ldr	r1, [pc, #160]	; (2b13c <__kernel_ram_size+0x28c>)
   2b09a:	f014 fa7b 	bl	3f594 <json_add_num_cs>
					    ncell->earfcn) ||
   2b09e:	2800      	cmp	r0, #0
   2b0a0:	d1a7      	bne.n	2aff2 <__kernel_ram_size+0x142>
			if ((ncell->rsrp != NRF_CLOUD_CELL_POS_OMIT_RSRP) &&
   2b0a2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
   2b0a6:	2bff      	cmp	r3, #255	; 0xff
   2b0a8:	d118      	bne.n	2b0dc <__kernel_ram_size+0x22c>
			if ((ncell->rsrq != NRF_CLOUD_CELL_POS_OMIT_RSRQ) &&
   2b0aa:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
   2b0ae:	28ff      	cmp	r0, #255	; 0xff
   2b0b0:	d011      	beq.n	2b0d6 <__kernel_ram_size+0x226>
					    RSRQ_ADJ(ncell->rsrq))) {
   2b0b2:	f7f1 fb17 	bl	1c6e4 <__aeabi_i2d>
   2b0b6:	2200      	movs	r2, #0
   2b0b8:	4b17      	ldr	r3, [pc, #92]	; (2b118 <__kernel_ram_size+0x268>)
   2b0ba:	f7f1 fb7d 	bl	1c7b8 <__aeabi_dmul>
			    json_add_num_cs(ncell_obj, NRF_CLOUD_CELL_POS_JSON_KEY_RSRQ,
   2b0be:	2200      	movs	r2, #0
   2b0c0:	4b16      	ldr	r3, [pc, #88]	; (2b11c <__kernel_ram_size+0x26c>)
   2b0c2:	f7f1 f9c1 	bl	1c448 <__aeabi_dsub>
   2b0c6:	4602      	mov	r2, r0
   2b0c8:	460b      	mov	r3, r1
   2b0ca:	4628      	mov	r0, r5
   2b0cc:	4914      	ldr	r1, [pc, #80]	; (2b120 <__kernel_ram_size+0x270>)
   2b0ce:	f014 fa61 	bl	3f594 <json_add_num_cs>
			if ((ncell->rsrq != NRF_CLOUD_CELL_POS_OMIT_RSRQ) &&
   2b0d2:	2800      	cmp	r0, #0
   2b0d4:	d18d      	bne.n	2aff2 <__kernel_ram_size+0x142>
		for (uint8_t j = 0; nmr_array && (j < lte->ncells_count); ++j) {
   2b0d6:	f109 0901 	add.w	r9, r9, #1
   2b0da:	e76e      	b.n	2afba <__kernel_ram_size+0x10a>
					    RSRP_ADJ(ncell->rsrp))) {
   2b0dc:	2b00      	cmp	r3, #0
   2b0de:	bfd4      	ite	le
   2b0e0:	208c      	movle	r0, #140	; 0x8c
   2b0e2:	208d      	movgt	r0, #141	; 0x8d
			    json_add_num_cs(ncell_obj, NRF_CLOUD_CELL_POS_JSON_KEY_RSRP,
   2b0e4:	1a18      	subs	r0, r3, r0
   2b0e6:	f7f1 fafd 	bl	1c6e4 <__aeabi_i2d>
   2b0ea:	4602      	mov	r2, r0
   2b0ec:	460b      	mov	r3, r1
   2b0ee:	4628      	mov	r0, r5
   2b0f0:	490f      	ldr	r1, [pc, #60]	; (2b130 <__kernel_ram_size+0x280>)
   2b0f2:	f014 fa4f 	bl	3f594 <json_add_num_cs>
			if ((ncell->rsrp != NRF_CLOUD_CELL_POS_OMIT_RSRP) &&
   2b0f6:	2800      	cmp	r0, #0
   2b0f8:	d0d7      	beq.n	2b0aa <__kernel_ram_size+0x1fa>
   2b0fa:	e77a      	b.n	2aff2 <__kernel_ram_size+0x142>
		return -EINVAL;
   2b0fc:	f06f 0615 	mvn.w	r6, #21
   2b100:	e798      	b.n	2b034 <__kernel_ram_size+0x184>
   2b102:	bf00      	nop
   2b104:	0004802b 	.word	0x0004802b
   2b108:	00047c0e 	.word	0x00047c0e
   2b10c:	0004611d 	.word	0x0004611d
   2b110:	00046124 	.word	0x00046124
   2b114:	00047c0a 	.word	0x00047c0a
   2b118:	3fe00000 	.word	0x3fe00000
   2b11c:	40338000 	.word	0x40338000
   2b120:	00048036 	.word	0x00048036
   2b124:	0004803b 	.word	0x0004803b
   2b128:	0004802f 	.word	0x0004802f
   2b12c:	0004807a 	.word	0x0004807a
   2b130:	00046024 	.word	0x00046024
   2b134:	0004803f 	.word	0x0004803f
   2b138:	00048072 	.word	0x00048072
   2b13c:	00048076 	.word	0x00048076

0002b140 <nrf_cloud_handle_error_message>:

int nrf_cloud_handle_error_message(const char *const buf,
				   const char *const app_id,
				   const char *const msg_type,
				   enum nrf_cloud_error * const err)
{
   2b140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b142:	460e      	mov	r6, r1
   2b144:	4617      	mov	r7, r2
   2b146:	461c      	mov	r4, r3
	if (!buf || !err) {
   2b148:	b320      	cbz	r0, 2b194 <nrf_cloud_handle_error_message+0x54>
   2b14a:	b31b      	cbz	r3, 2b194 <nrf_cloud_handle_error_message+0x54>
	}

	int ret;
	cJSON *root_obj;

	*err = NRF_CLOUD_ERROR_NONE;
   2b14c:	2300      	movs	r3, #0
   2b14e:	6023      	str	r3, [r4, #0]

	root_obj = cJSON_Parse(buf);
   2b150:	f014 fccb 	bl	3faea <cJSON_Parse>
	if (!root_obj) {
   2b154:	4605      	mov	r5, r0
   2b156:	b300      	cbz	r0, 2b19a <nrf_cloud_handle_error_message+0x5a>
		LOG_DBG("No JSON found");
		return -ENODATA;
	}

	ret = get_error_code_value(root_obj, err);
   2b158:	4621      	mov	r1, r4
   2b15a:	f7fe ffff 	bl	2a15c <get_error_code_value>
	if (ret) {
   2b15e:	4604      	mov	r4, r0
   2b160:	b908      	cbnz	r0, 2b166 <nrf_cloud_handle_error_message+0x26>
		goto clean_up;
	}

	/* If provided, check for matching app id and msg type */
	if (msg_type &&
   2b162:	b92f      	cbnz	r7, 2b170 <nrf_cloud_handle_error_message+0x30>
	    !json_item_string_exists(root_obj, NRF_CLOUD_JSON_MSG_TYPE_KEY, msg_type)) {
		ret = -ENOENT;
		goto clean_up;
	}
	if (app_id &&
   2b164:	b976      	cbnz	r6, 2b184 <nrf_cloud_handle_error_message+0x44>
		ret = -ENOENT;
		goto clean_up;
	}

clean_up:
	cJSON_Delete(root_obj);
   2b166:	4628      	mov	r0, r5
   2b168:	f006 fee8 	bl	31f3c <cJSON_Delete>
	return ret;
}
   2b16c:	4620      	mov	r0, r4
   2b16e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    !json_item_string_exists(root_obj, NRF_CLOUD_JSON_MSG_TYPE_KEY, msg_type)) {
   2b170:	463a      	mov	r2, r7
   2b172:	4628      	mov	r0, r5
   2b174:	490a      	ldr	r1, [pc, #40]	; (2b1a0 <nrf_cloud_handle_error_message+0x60>)
   2b176:	f7fe ff7b 	bl	2a070 <json_item_string_exists>
	if (msg_type &&
   2b17a:	2800      	cmp	r0, #0
   2b17c:	d1f2      	bne.n	2b164 <nrf_cloud_handle_error_message+0x24>
		ret = -ENOENT;
   2b17e:	f06f 0401 	mvn.w	r4, #1
		goto clean_up;
   2b182:	e7f0      	b.n	2b166 <nrf_cloud_handle_error_message+0x26>
	    !json_item_string_exists(root_obj, NRF_CLOUD_JSON_APPID_KEY, app_id)) {
   2b184:	4632      	mov	r2, r6
   2b186:	4628      	mov	r0, r5
   2b188:	4906      	ldr	r1, [pc, #24]	; (2b1a4 <nrf_cloud_handle_error_message+0x64>)
   2b18a:	f7fe ff71 	bl	2a070 <json_item_string_exists>
	if (app_id &&
   2b18e:	2800      	cmp	r0, #0
   2b190:	d1e9      	bne.n	2b166 <nrf_cloud_handle_error_message+0x26>
   2b192:	e7f4      	b.n	2b17e <nrf_cloud_handle_error_message+0x3e>
		return -EINVAL;
   2b194:	f06f 0415 	mvn.w	r4, #21
   2b198:	e7e8      	b.n	2b16c <nrf_cloud_handle_error_message+0x2c>
		return -ENODATA;
   2b19a:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   2b19e:	e7e5      	b.n	2b16c <nrf_cloud_handle_error_message+0x2c>
   2b1a0:	000435e3 	.word	0x000435e3
   2b1a4:	00043592 	.word	0x00043592

0002b1a8 <nrf_cloud_parse_pgps_response>:
{
   2b1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b1aa:	460c      	mov	r4, r1
	if (!response || !result ||
   2b1ac:	4606      	mov	r6, r0
{
   2b1ae:	b085      	sub	sp, #20
	if (!response || !result ||
   2b1b0:	2800      	cmp	r0, #0
   2b1b2:	d076      	beq.n	2b2a2 <nrf_cloud_parse_pgps_response+0xfa>
   2b1b4:	2900      	cmp	r1, #0
   2b1b6:	d074      	beq.n	2b2a2 <nrf_cloud_parse_pgps_response+0xfa>
   2b1b8:	680b      	ldr	r3, [r1, #0]
   2b1ba:	2b00      	cmp	r3, #0
   2b1bc:	d071      	beq.n	2b2a2 <nrf_cloud_parse_pgps_response+0xfa>
	    !result->host || !result->host_sz ||
   2b1be:	684b      	ldr	r3, [r1, #4]
   2b1c0:	2b00      	cmp	r3, #0
   2b1c2:	d06e      	beq.n	2b2a2 <nrf_cloud_parse_pgps_response+0xfa>
   2b1c4:	688b      	ldr	r3, [r1, #8]
   2b1c6:	2b00      	cmp	r3, #0
   2b1c8:	d06b      	beq.n	2b2a2 <nrf_cloud_parse_pgps_response+0xfa>
	    !result->path || !result->path_sz) {
   2b1ca:	68cb      	ldr	r3, [r1, #12]
   2b1cc:	2b00      	cmp	r3, #0
   2b1ce:	d068      	beq.n	2b2a2 <nrf_cloud_parse_pgps_response+0xfa>
	char *host_ptr = NULL;
   2b1d0:	2700      	movs	r7, #0
	char *path_ptr = NULL;
   2b1d2:	e9cd 7701 	strd	r7, r7, [sp, #4]
	cJSON *rsp_obj = cJSON_Parse(response);
   2b1d6:	f014 fc88 	bl	3faea <cJSON_Parse>
	if (!rsp_obj) {
   2b1da:	4605      	mov	r5, r0
   2b1dc:	b940      	cbnz	r0, 2b1f0 <nrf_cloud_parse_pgps_response+0x48>
		LOG_ERR("P-GPS response does not contain valid JSON");
   2b1de:	2145      	movs	r1, #69	; 0x45
   2b1e0:	4833      	ldr	r0, [pc, #204]	; (2b2b0 <nrf_cloud_parse_pgps_response+0x108>)
   2b1e2:	f011 fc65 	bl	3cab0 <z_log_minimal_printk>
		err = -EBADMSG;
   2b1e6:	f06f 044c 	mvn.w	r4, #76	; 0x4c
}
   2b1ea:	4620      	mov	r0, r4
   2b1ec:	b005      	add	sp, #20
   2b1ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (cJSON_IsArray(rsp_obj)) {
   2b1f0:	f014 fdab 	bl	3fd4a <cJSON_IsArray>
		if (get_string_from_array(rsp_obj, NRF_CLOUD_PGPS_RCV_ARRAY_IDX_HOST, &host_ptr) ||
   2b1f4:	aa01      	add	r2, sp, #4
	if (cJSON_IsArray(rsp_obj)) {
   2b1f6:	b300      	cbz	r0, 2b23a <nrf_cloud_parse_pgps_response+0x92>
		if (get_string_from_array(rsp_obj, NRF_CLOUD_PGPS_RCV_ARRAY_IDX_HOST, &host_ptr) ||
   2b1f8:	4639      	mov	r1, r7
   2b1fa:	4628      	mov	r0, r5
   2b1fc:	f7ff fd7e 	bl	2acfc <get_string_from_array>
   2b200:	b130      	cbz	r0, 2b210 <nrf_cloud_parse_pgps_response+0x68>
			LOG_ERR("Invalid P-GPS array response format");
   2b202:	2145      	movs	r1, #69	; 0x45
   2b204:	482b      	ldr	r0, [pc, #172]	; (2b2b4 <nrf_cloud_parse_pgps_response+0x10c>)
			LOG_ERR("Invalid P-GPS response format");
   2b206:	f011 fc53 	bl	3cab0 <z_log_minimal_printk>
			err = -EFTYPE;
   2b20a:	f06f 044e 	mvn.w	r4, #78	; 0x4e
		goto cleanup;
   2b20e:	e032      	b.n	2b276 <nrf_cloud_parse_pgps_response+0xce>
		    get_string_from_array(rsp_obj, NRF_CLOUD_PGPS_RCV_ARRAY_IDX_PATH, &path_ptr)) {
   2b210:	2101      	movs	r1, #1
   2b212:	4628      	mov	r0, r5
   2b214:	aa02      	add	r2, sp, #8
   2b216:	f7ff fd71 	bl	2acfc <get_string_from_array>
		if (get_string_from_array(rsp_obj, NRF_CLOUD_PGPS_RCV_ARRAY_IDX_HOST, &host_ptr) ||
   2b21a:	2800      	cmp	r0, #0
   2b21c:	d1f1      	bne.n	2b202 <nrf_cloud_parse_pgps_response+0x5a>
	if (!host_ptr || !path_ptr) {
   2b21e:	9801      	ldr	r0, [sp, #4]
   2b220:	2800      	cmp	r0, #0
   2b222:	d041      	beq.n	2b2a8 <nrf_cloud_parse_pgps_response+0x100>
   2b224:	9b02      	ldr	r3, [sp, #8]
   2b226:	2b00      	cmp	r3, #0
   2b228:	d03e      	beq.n	2b2a8 <nrf_cloud_parse_pgps_response+0x100>
	if ((result->host_sz <= strlen(host_ptr)) ||
   2b22a:	6866      	ldr	r6, [r4, #4]
   2b22c:	f7f2 f809 	bl	1d242 <strlen>
   2b230:	4286      	cmp	r6, r0
   2b232:	d824      	bhi.n	2b27e <nrf_cloud_parse_pgps_response+0xd6>
		err = -ENOBUFS;
   2b234:	f06f 0468 	mvn.w	r4, #104	; 0x68
   2b238:	e01d      	b.n	2b276 <nrf_cloud_parse_pgps_response+0xce>
	} else if (get_string_from_obj(rsp_obj, NRF_CLOUD_PGPS_RCV_REST_HOST, &host_ptr) ||
   2b23a:	4628      	mov	r0, r5
   2b23c:	491e      	ldr	r1, [pc, #120]	; (2b2b8 <nrf_cloud_parse_pgps_response+0x110>)
   2b23e:	f7ff fd81 	bl	2ad44 <get_string_from_obj>
   2b242:	b148      	cbz	r0, 2b258 <nrf_cloud_parse_pgps_response+0xb0>
		err = nrf_cloud_handle_error_message(response, NRF_CLOUD_JSON_APPID_VAL_PGPS,
   2b244:	4630      	mov	r0, r6
   2b246:	4a1d      	ldr	r2, [pc, #116]	; (2b2bc <nrf_cloud_parse_pgps_response+0x114>)
   2b248:	491d      	ldr	r1, [pc, #116]	; (2b2c0 <nrf_cloud_parse_pgps_response+0x118>)
   2b24a:	ab03      	add	r3, sp, #12
   2b24c:	f7ff ff78 	bl	2b140 <nrf_cloud_handle_error_message>
		if (!err) {
   2b250:	b150      	cbz	r0, 2b268 <nrf_cloud_parse_pgps_response+0xc0>
			LOG_ERR("Invalid P-GPS response format");
   2b252:	2145      	movs	r1, #69	; 0x45
   2b254:	481b      	ldr	r0, [pc, #108]	; (2b2c4 <nrf_cloud_parse_pgps_response+0x11c>)
   2b256:	e7d6      	b.n	2b206 <nrf_cloud_parse_pgps_response+0x5e>
		   get_string_from_obj(rsp_obj, NRF_CLOUD_PGPS_RCV_REST_PATH, &path_ptr)) {
   2b258:	4628      	mov	r0, r5
   2b25a:	491b      	ldr	r1, [pc, #108]	; (2b2c8 <nrf_cloud_parse_pgps_response+0x120>)
   2b25c:	aa02      	add	r2, sp, #8
   2b25e:	f7ff fd71 	bl	2ad44 <get_string_from_obj>
	} else if (get_string_from_obj(rsp_obj, NRF_CLOUD_PGPS_RCV_REST_HOST, &host_ptr) ||
   2b262:	2800      	cmp	r0, #0
   2b264:	d0db      	beq.n	2b21e <nrf_cloud_parse_pgps_response+0x76>
   2b266:	e7ed      	b.n	2b244 <nrf_cloud_parse_pgps_response+0x9c>
			LOG_ERR("nRF Cloud returned P-GPS error: %d", nrf_err);
   2b268:	2145      	movs	r1, #69	; 0x45
   2b26a:	9a03      	ldr	r2, [sp, #12]
   2b26c:	4817      	ldr	r0, [pc, #92]	; (2b2cc <nrf_cloud_parse_pgps_response+0x124>)
   2b26e:	f011 fc1f 	bl	3cab0 <z_log_minimal_printk>
			err = -EFAULT;
   2b272:	f06f 040d 	mvn.w	r4, #13
		cJSON_Delete(rsp_obj);
   2b276:	4628      	mov	r0, r5
   2b278:	f006 fe60 	bl	31f3c <cJSON_Delete>
   2b27c:	e7b5      	b.n	2b1ea <nrf_cloud_parse_pgps_response+0x42>
	    (result->path_sz <= strlen(path_ptr))) {
   2b27e:	9802      	ldr	r0, [sp, #8]
   2b280:	68e6      	ldr	r6, [r4, #12]
   2b282:	f7f1 ffde 	bl	1d242 <strlen>
	if ((result->host_sz <= strlen(host_ptr)) ||
   2b286:	4286      	cmp	r6, r0
   2b288:	d9d4      	bls.n	2b234 <nrf_cloud_parse_pgps_response+0x8c>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   2b28a:	6862      	ldr	r2, [r4, #4]
   2b28c:	9901      	ldr	r1, [sp, #4]
   2b28e:	6820      	ldr	r0, [r4, #0]
   2b290:	f016 fa8f 	bl	417b2 <strncpy>
   2b294:	68e2      	ldr	r2, [r4, #12]
   2b296:	68a0      	ldr	r0, [r4, #8]
   2b298:	9902      	ldr	r1, [sp, #8]
   2b29a:	f016 fa8a 	bl	417b2 <strncpy>
	int err = 0;
   2b29e:	2400      	movs	r4, #0
   2b2a0:	e7e9      	b.n	2b276 <nrf_cloud_parse_pgps_response+0xce>
		return -EINVAL;
   2b2a2:	f06f 0415 	mvn.w	r4, #21
   2b2a6:	e7a0      	b.n	2b1ea <nrf_cloud_parse_pgps_response+0x42>
		err = -ENOSTR;
   2b2a8:	f06f 043b 	mvn.w	r4, #59	; 0x3b
   2b2ac:	e7e3      	b.n	2b276 <nrf_cloud_parse_pgps_response+0xce>
   2b2ae:	bf00      	nop
   2b2b0:	000480b0 	.word	0x000480b0
   2b2b4:	000480e0 	.word	0x000480e0
   2b2b8:	00045180 	.word	0x00045180
   2b2bc:	000435de 	.word	0x000435de
   2b2c0:	00048109 	.word	0x00048109
   2b2c4:	00048136 	.word	0x00048136
   2b2c8:	00047f64 	.word	0x00047f64
   2b2cc:	0004810e 	.word	0x0004810e

0002b2d0 <nrf_cloud_parse_cell_pos_response>:

int nrf_cloud_parse_cell_pos_response(const char *const buf,
				      struct nrf_cloud_cell_pos_result *result)
{
   2b2d0:	b570      	push	{r4, r5, r6, lr}
   2b2d2:	460d      	mov	r5, r1
	int ret = 1; /* 1: cell-based location not found */
	cJSON *cell_pos_obj;
	cJSON *data_obj;

	if ((buf == NULL) || (result == NULL)) {
   2b2d4:	2800      	cmp	r0, #0
   2b2d6:	d051      	beq.n	2b37c <nrf_cloud_parse_cell_pos_response+0xac>
   2b2d8:	2900      	cmp	r1, #0
   2b2da:	d04f      	beq.n	2b37c <nrf_cloud_parse_cell_pos_response+0xac>
		return -EINVAL;
	}

	cell_pos_obj = cJSON_Parse(buf);
   2b2dc:	f014 fc05 	bl	3faea <cJSON_Parse>
	if (!cell_pos_obj) {
   2b2e0:	4606      	mov	r6, r0
   2b2e2:	2800      	cmp	r0, #0
   2b2e4:	d04d      	beq.n	2b382 <nrf_cloud_parse_cell_pos_response+0xb2>
	}

	/* First, check to see if this is a REST payload, which is not wrapped in
	 * an nRF Cloud MQTT message
	 */
	ret = nrf_cloud_parse_cell_pos_json(cell_pos_obj, result);
   2b2e6:	4629      	mov	r1, r5
   2b2e8:	f7ff fd50 	bl	2ad8c <nrf_cloud_parse_cell_pos_json>
	if (ret == 0) {
   2b2ec:	4604      	mov	r4, r0
   2b2ee:	b140      	cbz	r0, 2b302 <nrf_cloud_parse_cell_pos_response+0x32>
		goto cleanup;
	}

	/* Clear the error flag and check for MQTT payload format */
	result->err = NRF_CLOUD_ERROR_NONE;
   2b2f0:	2300      	movs	r3, #0
	ret = 1;

	/* Check for nRF Cloud MQTT message; valid appId and msgType */
	if (!json_item_string_exists(cell_pos_obj, NRF_CLOUD_JSON_MSG_TYPE_KEY,
   2b2f2:	4630      	mov	r0, r6
   2b2f4:	4a24      	ldr	r2, [pc, #144]	; (2b388 <nrf_cloud_parse_cell_pos_response+0xb8>)
   2b2f6:	4925      	ldr	r1, [pc, #148]	; (2b38c <nrf_cloud_parse_cell_pos_response+0xbc>)
	result->err = NRF_CLOUD_ERROR_NONE;
   2b2f8:	61eb      	str	r3, [r5, #28]
	if (!json_item_string_exists(cell_pos_obj, NRF_CLOUD_JSON_MSG_TYPE_KEY,
   2b2fa:	f7fe feb9 	bl	2a070 <json_item_string_exists>
   2b2fe:	b9b0      	cbnz	r0, 2b32e <nrf_cloud_parse_cell_pos_response+0x5e>
	ret = 1;
   2b300:	2401      	movs	r4, #1
		LOG_ERR("Expected data not found in cellular positioning message");
		ret = -EBADMSG;
	}

cleanup:
	cJSON_Delete(cell_pos_obj);
   2b302:	4630      	mov	r0, r6
   2b304:	f006 fe1a 	bl	31f3c <cJSON_Delete>

	if (ret < 0) {
   2b308:	2c00      	cmp	r4, #0
   2b30a:	da0e      	bge.n	2b32a <nrf_cloud_parse_cell_pos_response+0x5a>
		/* Clear data on error */
		result->lat = 0.0;
   2b30c:	2300      	movs	r3, #0
   2b30e:	2200      	movs	r2, #0
   2b310:	e9c5 2302 	strd	r2, r3, [r5, #8]
		result->lon = 0.0;
   2b314:	e9c5 2304 	strd	r2, r3, [r5, #16]
		result->unc = 0;
   2b318:	2300      	movs	r3, #0
   2b31a:	61ab      	str	r3, [r5, #24]
		result->type = CELL_POS_TYPE__INVALID;
   2b31c:	2302      	movs	r3, #2
   2b31e:	702b      	strb	r3, [r5, #0]

		/* Set to unknown error if an error code was not found */
		if (result->err == NRF_CLOUD_ERROR_NONE) {
   2b320:	69eb      	ldr	r3, [r5, #28]
   2b322:	b913      	cbnz	r3, 2b32a <nrf_cloud_parse_cell_pos_response+0x5a>
			result->err = NRF_CLOUD_ERROR_UNKNOWN;
   2b324:	f04f 33ff 	mov.w	r3, #4294967295
   2b328:	61eb      	str	r3, [r5, #28]
		}
	}

	return ret;
}
   2b32a:	4620      	mov	r0, r4
   2b32c:	bd70      	pop	{r4, r5, r6, pc}
	    !json_item_string_exists(cell_pos_obj, NRF_CLOUD_JSON_APPID_KEY,
   2b32e:	4630      	mov	r0, r6
   2b330:	4a17      	ldr	r2, [pc, #92]	; (2b390 <nrf_cloud_parse_cell_pos_response+0xc0>)
   2b332:	4918      	ldr	r1, [pc, #96]	; (2b394 <nrf_cloud_parse_cell_pos_response+0xc4>)
   2b334:	f7fe fe9c 	bl	2a070 <json_item_string_exists>
				     NRF_CLOUD_JSON_MSG_TYPE_VAL_DATA) ||
   2b338:	2800      	cmp	r0, #0
   2b33a:	d0e1      	beq.n	2b300 <nrf_cloud_parse_cell_pos_response+0x30>
	data_obj = cJSON_GetObjectItem(cell_pos_obj, NRF_CLOUD_JSON_DATA_KEY);
   2b33c:	4630      	mov	r0, r6
   2b33e:	4916      	ldr	r1, [pc, #88]	; (2b398 <nrf_cloud_parse_cell_pos_response+0xc8>)
   2b340:	f014 fbe8 	bl	3fb14 <cJSON_GetObjectItem>
	if (data_obj) {
   2b344:	b150      	cbz	r0, 2b35c <nrf_cloud_parse_cell_pos_response+0x8c>
		ret = nrf_cloud_parse_cell_pos_json(data_obj, result);
   2b346:	4629      	mov	r1, r5
   2b348:	f7ff fd20 	bl	2ad8c <nrf_cloud_parse_cell_pos_json>
		if (ret) {
   2b34c:	4604      	mov	r4, r0
   2b34e:	2800      	cmp	r0, #0
   2b350:	d0d7      	beq.n	2b302 <nrf_cloud_parse_cell_pos_response+0x32>
			LOG_ERR("Failed to parse cellular positioning data");
   2b352:	2145      	movs	r1, #69	; 0x45
   2b354:	4811      	ldr	r0, [pc, #68]	; (2b39c <nrf_cloud_parse_cell_pos_response+0xcc>)
   2b356:	f011 fbab 	bl	3cab0 <z_log_minimal_printk>
   2b35a:	e7d2      	b.n	2b302 <nrf_cloud_parse_cell_pos_response+0x32>
	ret = get_error_code_value(cell_pos_obj, &result->err);
   2b35c:	4630      	mov	r0, r6
   2b35e:	f105 011c 	add.w	r1, r5, #28
   2b362:	f7fe fefb 	bl	2a15c <get_error_code_value>
	if (ret) {
   2b366:	b930      	cbnz	r0, 2b376 <nrf_cloud_parse_cell_pos_response+0xa6>
		LOG_ERR("Expected data not found in cellular positioning message");
   2b368:	2145      	movs	r1, #69	; 0x45
   2b36a:	480d      	ldr	r0, [pc, #52]	; (2b3a0 <nrf_cloud_parse_cell_pos_response+0xd0>)
   2b36c:	f011 fba0 	bl	3cab0 <z_log_minimal_printk>
		ret = -EBADMSG;
   2b370:	f06f 044c 	mvn.w	r4, #76	; 0x4c
   2b374:	e7c5      	b.n	2b302 <nrf_cloud_parse_cell_pos_response+0x32>
		ret = -EFAULT;
   2b376:	f06f 040d 	mvn.w	r4, #13
   2b37a:	e7c2      	b.n	2b302 <nrf_cloud_parse_cell_pos_response+0x32>
		return -EINVAL;
   2b37c:	f06f 0415 	mvn.w	r4, #21
   2b380:	e7d3      	b.n	2b32a <nrf_cloud_parse_cell_pos_response+0x5a>
		return 1;
   2b382:	2401      	movs	r4, #1
   2b384:	e7d1      	b.n	2b32a <nrf_cloud_parse_cell_pos_response+0x5a>
   2b386:	bf00      	nop
   2b388:	000435de 	.word	0x000435de
   2b38c:	000435e3 	.word	0x000435e3
   2b390:	00048159 	.word	0x00048159
   2b394:	00043592 	.word	0x00043592
   2b398:	000436ba 	.word	0x000436ba
   2b39c:	00048162 	.word	0x00048162
   2b3a0:	00048191 	.word	0x00048191

0002b3a4 <nrf_cloud_detect_disconnection_request>:

	return ret;
}

bool nrf_cloud_detect_disconnection_request(const char *const buf)
{
   2b3a4:	b538      	push	{r3, r4, r5, lr}
	if (buf == NULL) {
   2b3a6:	4604      	mov	r4, r0
   2b3a8:	b910      	cbnz	r0, 2b3b0 <nrf_cloud_detect_disconnection_request+0xc>
		return false;
   2b3aa:	2400      	movs	r4, #0
		ret = false;
	}

	cJSON_Delete(discon_request_obj);
	return ret;
}
   2b3ac:	4620      	mov	r0, r4
   2b3ae:	bd38      	pop	{r3, r4, r5, pc}
	if (memchr(buf, '\0', NRF_CLOUD_JSON_MSG_MAX_LEN_DISCONNECT) == NULL) {
   2b3b0:	22c8      	movs	r2, #200	; 0xc8
   2b3b2:	2100      	movs	r1, #0
   2b3b4:	f015 ffd8 	bl	41368 <memchr>
   2b3b8:	2800      	cmp	r0, #0
   2b3ba:	d0f6      	beq.n	2b3aa <nrf_cloud_detect_disconnection_request+0x6>
	if (strstr(buf, NRF_CLOUD_JSON_APPID_VAL_DEVICE) == NULL ||
   2b3bc:	4620      	mov	r0, r4
   2b3be:	490f      	ldr	r1, [pc, #60]	; (2b3fc <nrf_cloud_detect_disconnection_request+0x58>)
   2b3c0:	f016 fa2a 	bl	41818 <strstr>
   2b3c4:	2800      	cmp	r0, #0
   2b3c6:	d0f0      	beq.n	2b3aa <nrf_cloud_detect_disconnection_request+0x6>
	    strstr(buf, NRF_CLOUD_JSON_MSG_TYPE_VAL_DISCONNECT) == NULL) {
   2b3c8:	4620      	mov	r0, r4
   2b3ca:	490d      	ldr	r1, [pc, #52]	; (2b400 <nrf_cloud_detect_disconnection_request+0x5c>)
   2b3cc:	f016 fa24 	bl	41818 <strstr>
	if (strstr(buf, NRF_CLOUD_JSON_APPID_VAL_DEVICE) == NULL ||
   2b3d0:	2800      	cmp	r0, #0
   2b3d2:	d0ea      	beq.n	2b3aa <nrf_cloud_detect_disconnection_request+0x6>
	cJSON *discon_request_obj = cJSON_Parse(buf);
   2b3d4:	4620      	mov	r0, r4
   2b3d6:	f014 fb88 	bl	3faea <cJSON_Parse>
	if (!json_item_string_exists(discon_request_obj, NRF_CLOUD_JSON_MSG_TYPE_KEY,
   2b3da:	4a09      	ldr	r2, [pc, #36]	; (2b400 <nrf_cloud_detect_disconnection_request+0x5c>)
   2b3dc:	4909      	ldr	r1, [pc, #36]	; (2b404 <nrf_cloud_detect_disconnection_request+0x60>)
	cJSON *discon_request_obj = cJSON_Parse(buf);
   2b3de:	4605      	mov	r5, r0
	if (!json_item_string_exists(discon_request_obj, NRF_CLOUD_JSON_MSG_TYPE_KEY,
   2b3e0:	f7fe fe46 	bl	2a070 <json_item_string_exists>
   2b3e4:	4604      	mov	r4, r0
   2b3e6:	b128      	cbz	r0, 2b3f4 <nrf_cloud_detect_disconnection_request+0x50>
	    !json_item_string_exists(discon_request_obj, NRF_CLOUD_JSON_APPID_KEY,
   2b3e8:	4628      	mov	r0, r5
   2b3ea:	4a04      	ldr	r2, [pc, #16]	; (2b3fc <nrf_cloud_detect_disconnection_request+0x58>)
   2b3ec:	4906      	ldr	r1, [pc, #24]	; (2b408 <nrf_cloud_detect_disconnection_request+0x64>)
   2b3ee:	f7fe fe3f 	bl	2a070 <json_item_string_exists>
   2b3f2:	4604      	mov	r4, r0
	cJSON_Delete(discon_request_obj);
   2b3f4:	4628      	mov	r0, r5
   2b3f6:	f006 fda1 	bl	31f3c <cJSON_Delete>
	return ret;
   2b3fa:	e7d7      	b.n	2b3ac <nrf_cloud_detect_disconnection_request+0x8>
   2b3fc:	000481ce 	.word	0x000481ce
   2b400:	000481d5 	.word	0x000481d5
   2b404:	000435e3 	.word	0x000435e3
   2b408:	00043592 	.word	0x00043592

0002b40c <nrf_cloud_configured_client_id_get>:
	return 0;
#endif
}

int nrf_cloud_configured_client_id_get(char * const buf, const size_t buf_sz)
{
   2b40c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b40e:	460d      	mov	r5, r1
	if (!buf || !buf_sz) {
   2b410:	4606      	mov	r6, r0
{
   2b412:	b089      	sub	sp, #36	; 0x24
	if (!buf || !buf_sz) {
   2b414:	b310      	cbz	r0, 2b45c <nrf_cloud_configured_client_id_get+0x50>
   2b416:	b309      	cbz	r1, 2b45c <nrf_cloud_configured_client_id_get+0x50>
	int print_ret;

#if defined(CONFIG_NRF_CLOUD_CLIENT_ID_SRC_IMEI)
	char imei_buf[CGSN_RESPONSE_LENGTH];

	err = nrf_modem_at_cmd(imei_buf, sizeof(imei_buf), "AT+CGSN");
   2b418:	af02      	add	r7, sp, #8
   2b41a:	2116      	movs	r1, #22
   2b41c:	4638      	mov	r0, r7
   2b41e:	4a12      	ldr	r2, [pc, #72]	; (2b468 <nrf_cloud_configured_client_id_get+0x5c>)
   2b420:	f009 fe18 	bl	35054 <nrf_modem_at_cmd>
	if (err) {
   2b424:	4604      	mov	r4, r0
   2b426:	b138      	cbz	r0, 2b438 <nrf_cloud_configured_client_id_get+0x2c>
		LOG_ERR("Failed to obtain IMEI, error: %d", err);
   2b428:	4602      	mov	r2, r0
   2b42a:	2145      	movs	r1, #69	; 0x45
   2b42c:	480f      	ldr	r0, [pc, #60]	; (2b46c <nrf_cloud_configured_client_id_get+0x60>)
   2b42e:	f011 fb3f 	bl	3cab0 <z_log_minimal_printk>
	} else if (print_ret >= buf_sz) {
		return -EMSGSIZE;
	}

	return 0;
}
   2b432:	4620      	mov	r0, r4
   2b434:	b009      	add	sp, #36	; 0x24
   2b436:	bdf0      	pop	{r4, r5, r6, r7, pc}
	print_ret = snprintk(buf, buf_sz, "%s%.*s",
   2b438:	230f      	movs	r3, #15
	imei_buf[NRF_IMEI_LEN] = 0;
   2b43a:	f88d 0017 	strb.w	r0, [sp, #23]
	print_ret = snprintk(buf, buf_sz, "%s%.*s",
   2b43e:	9300      	str	r3, [sp, #0]
   2b440:	4629      	mov	r1, r5
   2b442:	4630      	mov	r0, r6
   2b444:	4b0a      	ldr	r3, [pc, #40]	; (2b470 <nrf_cloud_configured_client_id_get+0x64>)
   2b446:	4a0b      	ldr	r2, [pc, #44]	; (2b474 <nrf_cloud_configured_client_id_get+0x68>)
   2b448:	9701      	str	r7, [sp, #4]
   2b44a:	f011 f921 	bl	3c690 <snprintk>
	if (print_ret <= 0) {
   2b44e:	2800      	cmp	r0, #0
   2b450:	dd07      	ble.n	2b462 <nrf_cloud_configured_client_id_get+0x56>
		return -EMSGSIZE;
   2b452:	4285      	cmp	r5, r0
   2b454:	bf98      	it	ls
   2b456:	f06f 0479 	mvnls.w	r4, #121	; 0x79
   2b45a:	e7ea      	b.n	2b432 <nrf_cloud_configured_client_id_get+0x26>
		return -EINVAL;
   2b45c:	f06f 0415 	mvn.w	r4, #21
   2b460:	e7e7      	b.n	2b432 <nrf_cloud_configured_client_id_get+0x26>
		return -EIO;
   2b462:	f06f 0404 	mvn.w	r4, #4
   2b466:	e7e4      	b.n	2b432 <nrf_cloud_configured_client_id_get+0x26>
   2b468:	00046051 	.word	0x00046051
   2b46c:	000481f5 	.word	0x000481f5
   2b470:	0004821b 	.word	0x0004821b
   2b474:	00048220 	.word	0x00048220

0002b478 <connect_error_translate>:
	return err;
}

static int connect_error_translate(const int err)
{
	switch (err) {
   2b478:	2800      	cmp	r0, #0
{
   2b47a:	b508      	push	{r3, lr}
	switch (err) {
   2b47c:	dc0e      	bgt.n	2b49c <connect_error_translate+0x24>
   2b47e:	f110 0f0d 	cmn.w	r0, #13
   2b482:	da13      	bge.n	2b4ac <connect_error_translate+0x34>
   2b484:	f110 0f6f 	cmn.w	r0, #111	; 0x6f
   2b488:	d049      	beq.n	2b51e <connect_error_translate+0xa6>
   2b48a:	f110 0f6e 	cmn.w	r0, #110	; 0x6e
   2b48e:	da34      	bge.n	2b4fa <connect_error_translate+0x82>
   2b490:	f110 0f77 	cmn.w	r0, #119	; 0x77
   2b494:	d046      	beq.n	2b524 <connect_error_translate+0xac>
   2b496:	f110 0f74 	cmn.w	r0, #116	; 0x74
   2b49a:	d046      	beq.n	2b52a <connect_error_translate+0xb2>
	case -ENOMEM:
		return NRF_CLOUD_CONNECT_RES_ERR_NO_MEM;
	case -EINPROGRESS:
		return NRF_CLOUD_CONNECT_RES_ERR_ALREADY_CONNECTED;
	default:
		LOG_ERR("nRF cloud connect failed %d", err);
   2b49c:	4602      	mov	r2, r0
   2b49e:	2145      	movs	r1, #69	; 0x45
   2b4a0:	4825      	ldr	r0, [pc, #148]	; (2b538 <connect_error_translate+0xc0>)
   2b4a2:	f011 fb05 	bl	3cab0 <z_log_minimal_printk>
		return NRF_CLOUD_CONNECT_RES_ERR_MISC;
   2b4a6:	f06f 0004 	mvn.w	r0, #4
   2b4aa:	e025      	b.n	2b4f8 <connect_error_translate+0x80>
	switch (err) {
   2b4ac:	f100 030d 	add.w	r3, r0, #13
   2b4b0:	2b0d      	cmp	r3, #13
   2b4b2:	d8f3      	bhi.n	2b49c <connect_error_translate+0x24>
   2b4b4:	a201      	add	r2, pc, #4	; (adr r2, 2b4bc <connect_error_translate+0x44>)
   2b4b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2b4ba:	bf00      	nop
   2b4bc:	0002b50d 	.word	0x0002b50d
   2b4c0:	0002b519 	.word	0x0002b519
   2b4c4:	0002b49d 	.word	0x0002b49d
   2b4c8:	0002b4f5 	.word	0x0002b4f5
   2b4cc:	0002b49d 	.word	0x0002b49d
   2b4d0:	0002b513 	.word	0x0002b513
   2b4d4:	0002b49d 	.word	0x0002b49d
   2b4d8:	0002b49d 	.word	0x0002b49d
   2b4dc:	0002b49d 	.word	0x0002b49d
   2b4e0:	0002b49d 	.word	0x0002b49d
   2b4e4:	0002b49d 	.word	0x0002b49d
   2b4e8:	0002b49d 	.word	0x0002b49d
   2b4ec:	0002b49d 	.word	0x0002b49d
   2b4f0:	0002b4f9 	.word	0x0002b4f9
   2b4f4:	f06f 0002 	mvn.w	r0, #2
	}
}
   2b4f8:	bd08      	pop	{r3, pc}
	switch (err) {
   2b4fa:	f110 0f5f 	cmn.w	r0, #95	; 0x5f
   2b4fe:	d017      	beq.n	2b530 <connect_error_translate+0xb8>
   2b500:	f110 0f16 	cmn.w	r0, #22
   2b504:	d1ca      	bne.n	2b49c <connect_error_translate+0x24>
		return NRF_CLOUD_CONNECT_RES_ERR_PRV_KEY;
   2b506:	f06f 0006 	mvn.w	r0, #6
   2b50a:	e7f5      	b.n	2b4f8 <connect_error_translate+0x80>
		return NRF_CLOUD_CONNECT_RES_ERR_NOT_INITD;
   2b50c:	f04f 30ff 	mov.w	r0, #4294967295
   2b510:	e7f2      	b.n	2b4f8 <connect_error_translate+0x80>
		return NRF_CLOUD_CONNECT_RES_ERR_BACKEND;
   2b512:	f06f 0003 	mvn.w	r0, #3
   2b516:	e7ef      	b.n	2b4f8 <connect_error_translate+0x80>
		return NRF_CLOUD_CONNECT_RES_ERR_NO_MEM;
   2b518:	f06f 0005 	mvn.w	r0, #5
   2b51c:	e7ec      	b.n	2b4f8 <connect_error_translate+0x80>
		return NRF_CLOUD_CONNECT_RES_ERR_CERT_MISC;
   2b51e:	f06f 0008 	mvn.w	r0, #8
   2b522:	e7e9      	b.n	2b4f8 <connect_error_translate+0x80>
		return NRF_CLOUD_CONNECT_RES_ERR_ALREADY_CONNECTED;
   2b524:	f06f 000a 	mvn.w	r0, #10
   2b528:	e7e6      	b.n	2b4f8 <connect_error_translate+0x80>
		return NRF_CLOUD_CONNECT_RES_ERR_TIMEOUT_NO_DATA;
   2b52a:	f06f 0009 	mvn.w	r0, #9
   2b52e:	e7e3      	b.n	2b4f8 <connect_error_translate+0x80>
		return NRF_CLOUD_CONNECT_RES_ERR_CERT;
   2b530:	f06f 0007 	mvn.w	r0, #7
   2b534:	e7e0      	b.n	2b4f8 <connect_error_translate+0x80>
   2b536:	bf00      	nop
   2b538:	0004823b 	.word	0x0004823b

0002b53c <nfsm_get_current_state>:
	return current_state;
   2b53c:	4b01      	ldr	r3, [pc, #4]	; (2b544 <nfsm_get_current_state+0x8>)
   2b53e:	7818      	ldrb	r0, [r3, #0]
}
   2b540:	4770      	bx	lr
   2b542:	bf00      	nop
   2b544:	2001c90a 	.word	0x2001c90a

0002b548 <nfsm_set_current_state_and_notify>:
{
   2b548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b54a:	4606      	mov	r6, r0
	bool discon_evt = (evt != NULL) &&
   2b54c:	460c      	mov	r4, r1
   2b54e:	b341      	cbz	r1, 2b5a2 <nfsm_set_current_state_and_notify+0x5a>
   2b550:	780d      	ldrb	r5, [r1, #0]
   2b552:	f1a5 0309 	sub.w	r3, r5, #9
   2b556:	425d      	negs	r5, r3
   2b558:	415d      	adcs	r5, r3
	return z_impl_k_mutex_lock(mutex, timeout);
   2b55a:	f04f 32ff 	mov.w	r2, #4294967295
   2b55e:	f04f 33ff 	mov.w	r3, #4294967295
   2b562:	4811      	ldr	r0, [pc, #68]	; (2b5a8 <nfsm_set_current_state_and_notify+0x60>)
   2b564:	f00b f9a6 	bl	368b4 <z_impl_k_mutex_lock>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b568:	4f10      	ldr	r7, [pc, #64]	; (2b5ac <nfsm_set_current_state_and_notify+0x64>)
   2b56a:	e8d7 3faf 	lda	r3, [r7]
	if (!atomic_get(&uninit_in_progress)) {
   2b56e:	b90b      	cbnz	r3, 2b574 <nfsm_set_current_state_and_notify+0x2c>
		current_state = state;
   2b570:	4b0f      	ldr	r3, [pc, #60]	; (2b5b0 <nfsm_set_current_state_and_notify+0x68>)
   2b572:	701e      	strb	r6, [r3, #0]
	return z_impl_k_mutex_unlock(mutex);
   2b574:	480c      	ldr	r0, [pc, #48]	; (2b5a8 <nfsm_set_current_state_and_notify+0x60>)
   2b576:	f00b fa6f 	bl	36a58 <z_impl_k_mutex_unlock>
	if (discon_evt) {
   2b57a:	b11d      	cbz	r5, 2b584 <nfsm_set_current_state_and_notify+0x3c>
		atomic_set(&transport_disconnected, 1);
   2b57c:	2101      	movs	r1, #1
   2b57e:	480d      	ldr	r0, [pc, #52]	; (2b5b4 <nfsm_set_current_state_and_notify+0x6c>)
   2b580:	f014 f87c 	bl	3f67c <atomic_set.isra.0>
	if ((app_event_handler != NULL) && (evt != NULL)) {
   2b584:	4b0c      	ldr	r3, [pc, #48]	; (2b5b8 <nfsm_set_current_state_and_notify+0x70>)
   2b586:	681b      	ldr	r3, [r3, #0]
   2b588:	b113      	cbz	r3, 2b590 <nfsm_set_current_state_and_notify+0x48>
   2b58a:	b10c      	cbz	r4, 2b590 <nfsm_set_current_state_and_notify+0x48>
		app_event_handler(evt);
   2b58c:	4620      	mov	r0, r4
   2b58e:	4798      	blx	r3
	if (discon_evt && atomic_get(&uninit_in_progress)) {
   2b590:	b14d      	cbz	r5, 2b5a6 <nfsm_set_current_state_and_notify+0x5e>
   2b592:	e8d7 3faf 	lda	r3, [r7]
   2b596:	b133      	cbz	r3, 2b5a6 <nfsm_set_current_state_and_notify+0x5e>
}
   2b598:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_impl_k_sem_give(sem);
   2b59c:	4807      	ldr	r0, [pc, #28]	; (2b5bc <nfsm_set_current_state_and_notify+0x74>)
   2b59e:	f00b bbdb 	b.w	36d58 <z_impl_k_sem_give>
	bool discon_evt = (evt != NULL) &&
   2b5a2:	460d      	mov	r5, r1
   2b5a4:	e7d9      	b.n	2b55a <nfsm_set_current_state_and_notify+0x12>
}
   2b5a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b5a8:	20014fa4 	.word	0x20014fa4
   2b5ac:	20019560 	.word	0x20019560
   2b5b0:	2001c90a 	.word	0x2001c90a
   2b5b4:	2001955c 	.word	0x2001955c
   2b5b8:	20019550 	.word	0x20019550
   2b5bc:	200150d8 	.word	0x200150d8

0002b5c0 <nfsm_get_disconnect_requested>:
   2b5c0:	4b03      	ldr	r3, [pc, #12]	; (2b5d0 <nfsm_get_disconnect_requested+0x10>)
   2b5c2:	e8d3 0faf 	lda	r0, [r3]
}
   2b5c6:	3800      	subs	r0, #0
   2b5c8:	bf18      	it	ne
   2b5ca:	2001      	movne	r0, #1
   2b5cc:	4770      	bx	lr
   2b5ce:	bf00      	nop
   2b5d0:	20019558 	.word	0x20019558

0002b5d4 <nrf_cloud_init>:
{
   2b5d4:	b538      	push	{r3, r4, r5, lr}
	if (current_state != STATE_IDLE ||
   2b5d6:	4b15      	ldr	r3, [pc, #84]	; (2b62c <nrf_cloud_init+0x58>)
{
   2b5d8:	4605      	mov	r5, r0
	if (current_state != STATE_IDLE ||
   2b5da:	781b      	ldrb	r3, [r3, #0]
   2b5dc:	b11b      	cbz	r3, 2b5e6 <nrf_cloud_init+0x12>
		return -EACCES;
   2b5de:	f06f 040c 	mvn.w	r4, #12
}
   2b5e2:	4620      	mov	r0, r4
   2b5e4:	bd38      	pop	{r3, r4, r5, pc}
   2b5e6:	4b12      	ldr	r3, [pc, #72]	; (2b630 <nrf_cloud_init+0x5c>)
   2b5e8:	e8d3 3faf 	lda	r3, [r3]
	if (current_state != STATE_IDLE ||
   2b5ec:	2b00      	cmp	r3, #0
   2b5ee:	d1f6      	bne.n	2b5de <nrf_cloud_init+0xa>
	if (param->event_handler == NULL) {
   2b5f0:	6803      	ldr	r3, [r0, #0]
   2b5f2:	b1bb      	cbz	r3, 2b624 <nrf_cloud_init+0x50>
	err = nfsm_init();
   2b5f4:	f000 fb86 	bl	2bd04 <nfsm_init>
	if (err) {
   2b5f8:	4604      	mov	r4, r0
   2b5fa:	2800      	cmp	r0, #0
   2b5fc:	d1f1      	bne.n	2b5e2 <nrf_cloud_init+0xe>
	err = nrf_cloud_codec_init();
   2b5fe:	f7fe fdcd 	bl	2a19c <nrf_cloud_codec_init>
	if (err) {
   2b602:	4604      	mov	r4, r0
   2b604:	2800      	cmp	r0, #0
   2b606:	d1ec      	bne.n	2b5e2 <nrf_cloud_init+0xe>
	err = nct_init(param->client_id);
   2b608:	6868      	ldr	r0, [r5, #4]
   2b60a:	f000 fee9 	bl	2c3e0 <nct_init>
	if (err) {
   2b60e:	4604      	mov	r4, r0
   2b610:	2800      	cmp	r0, #0
   2b612:	d1e6      	bne.n	2b5e2 <nrf_cloud_init+0xe>
	app_event_handler = param->event_handler;
   2b614:	682a      	ldr	r2, [r5, #0]
   2b616:	4b07      	ldr	r3, [pc, #28]	; (2b634 <nrf_cloud_init+0x60>)
	nfsm_set_current_state_and_notify(STATE_INITIALIZED, NULL);
   2b618:	4601      	mov	r1, r0
   2b61a:	2001      	movs	r0, #1
	app_event_handler = param->event_handler;
   2b61c:	601a      	str	r2, [r3, #0]
	nfsm_set_current_state_and_notify(STATE_INITIALIZED, NULL);
   2b61e:	f7ff ff93 	bl	2b548 <nfsm_set_current_state_and_notify>
	return 0;
   2b622:	e7de      	b.n	2b5e2 <nrf_cloud_init+0xe>
		return -EINVAL;
   2b624:	f06f 0415 	mvn.w	r4, #21
   2b628:	e7db      	b.n	2b5e2 <nrf_cloud_init+0xe>
   2b62a:	bf00      	nop
   2b62c:	2001c90a 	.word	0x2001c90a
   2b630:	20019560 	.word	0x20019560
   2b634:	20019550 	.word	0x20019550

0002b638 <nrf_cloud_uninit>:
{
   2b638:	b538      	push	{r3, r4, r5, lr}
	err = nrf_cloud_fota_uninit();
   2b63a:	f004 f8a9 	bl	2f790 <nrf_cloud_fota_uninit>
	if (err == -EBUSY) {
   2b63e:	f110 0f10 	cmn.w	r0, #16
	err = nrf_cloud_fota_uninit();
   2b642:	4604      	mov	r4, r0
	if (err == -EBUSY) {
   2b644:	d105      	bne.n	2b652 <nrf_cloud_uninit+0x1a>
		LOG_WRN("Cannot uninitialize while a FOTA job is active");
   2b646:	2157      	movs	r1, #87	; 0x57
   2b648:	481e      	ldr	r0, [pc, #120]	; (2b6c4 <nrf_cloud_uninit+0x8c>)
   2b64a:	f011 fa31 	bl	3cab0 <z_log_minimal_printk>
}
   2b64e:	4620      	mov	r0, r4
   2b650:	bd38      	pop	{r3, r4, r5, pc}
	atomic_set(&uninit_in_progress, 1);
   2b652:	2101      	movs	r1, #1
   2b654:	481c      	ldr	r0, [pc, #112]	; (2b6c8 <nrf_cloud_uninit+0x90>)
   2b656:	f014 f811 	bl	3f67c <atomic_set.isra.0>
	return z_impl_k_mutex_lock(mutex, timeout);
   2b65a:	f04f 32ff 	mov.w	r2, #4294967295
   2b65e:	f04f 33ff 	mov.w	r3, #4294967295
   2b662:	481a      	ldr	r0, [pc, #104]	; (2b6cc <nrf_cloud_uninit+0x94>)
   2b664:	f00b f926 	bl	368b4 <z_impl_k_mutex_lock>
	current_state = STATE_IDLE;
   2b668:	2200      	movs	r2, #0
	prev_state = current_state;
   2b66a:	4b19      	ldr	r3, [pc, #100]	; (2b6d0 <nrf_cloud_uninit+0x98>)
   2b66c:	781d      	ldrb	r5, [r3, #0]
	current_state = STATE_IDLE;
   2b66e:	701a      	strb	r2, [r3, #0]
	prev_state = current_state;
   2b670:	b2ed      	uxtb	r5, r5
	return z_impl_k_mutex_unlock(mutex);
   2b672:	4816      	ldr	r0, [pc, #88]	; (2b6cc <nrf_cloud_uninit+0x94>)
   2b674:	f00b f9f0 	bl	36a58 <z_impl_k_mutex_unlock>
	if (prev_state >= STATE_CONNECTED) {
   2b678:	2d01      	cmp	r5, #1
   2b67a:	d918      	bls.n	2b6ae <nrf_cloud_uninit+0x76>
		atomic_set(&disconnect_requested, 1);
   2b67c:	2101      	movs	r1, #1
   2b67e:	4815      	ldr	r0, [pc, #84]	; (2b6d4 <nrf_cloud_uninit+0x9c>)
   2b680:	f013 fffc 	bl	3f67c <atomic_set.isra.0>
	z_impl_k_sem_reset(sem);
   2b684:	4814      	ldr	r0, [pc, #80]	; (2b6d8 <nrf_cloud_uninit+0xa0>)
   2b686:	f00b fc0d 	bl	36ea4 <z_impl_k_sem_reset>
		(void)nct_disconnect();
   2b68a:	f001 f915 	bl	2c8b8 <nct_disconnect>
	return z_impl_k_sem_take(sem, timeout);
   2b68e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2b692:	2300      	movs	r3, #0
   2b694:	4810      	ldr	r0, [pc, #64]	; (2b6d8 <nrf_cloud_uninit+0xa0>)
   2b696:	f00b fb9b 	bl	36dd0 <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   2b69a:	f110 0f0b 	cmn.w	r0, #11
   2b69e:	4604      	mov	r4, r0
   2b6a0:	d105      	bne.n	2b6ae <nrf_cloud_uninit+0x76>
			LOG_WRN("Did not receive expected disconnect event during cloud unint");
   2b6a2:	2157      	movs	r1, #87	; 0x57
   2b6a4:	480d      	ldr	r0, [pc, #52]	; (2b6dc <nrf_cloud_uninit+0xa4>)
   2b6a6:	f011 fa03 	bl	3cab0 <z_log_minimal_printk>
			err = -EISCONN;
   2b6aa:	f06f 047e 	mvn.w	r4, #126	; 0x7e
	app_event_handler = NULL;
   2b6ae:	2500      	movs	r5, #0
   2b6b0:	4b0b      	ldr	r3, [pc, #44]	; (2b6e0 <nrf_cloud_uninit+0xa8>)
   2b6b2:	601d      	str	r5, [r3, #0]
	nct_uninit();
   2b6b4:	f000 ff88 	bl	2c5c8 <nct_uninit>
	atomic_set(&uninit_in_progress, 0);
   2b6b8:	4629      	mov	r1, r5
   2b6ba:	4803      	ldr	r0, [pc, #12]	; (2b6c8 <nrf_cloud_uninit+0x90>)
   2b6bc:	f013 ffde 	bl	3f67c <atomic_set.isra.0>
	return err;
   2b6c0:	e7c5      	b.n	2b64e <nrf_cloud_uninit+0x16>
   2b6c2:	bf00      	nop
   2b6c4:	0004825c 	.word	0x0004825c
   2b6c8:	20019560 	.word	0x20019560
   2b6cc:	20014fa4 	.word	0x20014fa4
   2b6d0:	2001c90a 	.word	0x2001c90a
   2b6d4:	20019558 	.word	0x20019558
   2b6d8:	200150d8 	.word	0x200150d8
   2b6dc:	00048290 	.word	0x00048290
   2b6e0:	20019550 	.word	0x20019550

0002b6e4 <nrf_cloud_connect>:
	atomic_set(&disconnect_requested, 0);
	return nct_connect();
}

int nrf_cloud_connect(const struct nrf_cloud_connect_param *param)
{
   2b6e4:	b510      	push	{r4, lr}
	int err;

	if (current_state == STATE_IDLE) {
   2b6e6:	4b12      	ldr	r3, [pc, #72]	; (2b730 <nrf_cloud_connect+0x4c>)
   2b6e8:	781a      	ldrb	r2, [r3, #0]
   2b6ea:	b1d2      	cbz	r2, 2b722 <nrf_cloud_connect+0x3e>
		return NRF_CLOUD_CONNECT_RES_ERR_NOT_INITD;
	} else if (current_state != STATE_INITIALIZED) {
   2b6ec:	781a      	ldrb	r2, [r3, #0]
   2b6ee:	2a01      	cmp	r2, #1
   2b6f0:	d11a      	bne.n	2b728 <nrf_cloud_connect+0x44>
}

#if IS_ENABLED(CONFIG_NRF_CLOUD_CONNECTION_POLL_THREAD)
static int start_connection_poll()
{
	if (current_state == STATE_IDLE) {
   2b6f2:	781b      	ldrb	r3, [r3, #0]
   2b6f4:	b17b      	cbz	r3, 2b716 <nrf_cloud_connect+0x32>
   2b6f6:	4b0f      	ldr	r3, [pc, #60]	; (2b734 <nrf_cloud_connect+0x50>)
   2b6f8:	e8d3 4faf 	lda	r4, [r3]
		return -EACCES;
	}

	if (atomic_get(&connection_poll_active)) {
   2b6fc:	b974      	cbnz	r4, 2b71c <nrf_cloud_connect+0x38>
		LOG_DBG("Connection poll in progress");
		return -EINPROGRESS;
	}

	atomic_set(&disconnect_requested, 0);
   2b6fe:	4621      	mov	r1, r4
   2b700:	480d      	ldr	r0, [pc, #52]	; (2b738 <nrf_cloud_connect+0x54>)
   2b702:	f013 ffbb 	bl	3f67c <atomic_set.isra.0>
	z_impl_k_sem_give(sem);
   2b706:	480d      	ldr	r0, [pc, #52]	; (2b73c <nrf_cloud_connect+0x58>)
   2b708:	f00b fb26 	bl	36d58 <z_impl_k_sem_give>
	k_sem_give(&connection_poll_sem);

	return 0;
   2b70c:	4620      	mov	r0, r4
}
   2b70e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return connect_error_translate(err);
   2b712:	f7ff beb1 	b.w	2b478 <connect_error_translate>
		return -EACCES;
   2b716:	f06f 000c 	mvn.w	r0, #12
   2b71a:	e7f8      	b.n	2b70e <nrf_cloud_connect+0x2a>
		return -EINPROGRESS;
   2b71c:	f06f 0076 	mvn.w	r0, #118	; 0x76
   2b720:	e7f5      	b.n	2b70e <nrf_cloud_connect+0x2a>
		return NRF_CLOUD_CONNECT_RES_ERR_NOT_INITD;
   2b722:	f04f 30ff 	mov.w	r0, #4294967295
}
   2b726:	bd10      	pop	{r4, pc}
		return NRF_CLOUD_CONNECT_RES_ERR_ALREADY_CONNECTED;
   2b728:	f06f 000a 	mvn.w	r0, #10
   2b72c:	e7fb      	b.n	2b726 <nrf_cloud_connect+0x42>
   2b72e:	bf00      	nop
   2b730:	2001c90a 	.word	0x2001c90a
   2b734:	20019554 	.word	0x20019554
   2b738:	20019558 	.word	0x20019558
   2b73c:	20015030 	.word	0x20015030

0002b740 <nrf_cloud_disconnect>:
{
   2b740:	b508      	push	{r3, lr}
	if (current_state < STATE_CONNECTED) {
   2b742:	4b07      	ldr	r3, [pc, #28]	; (2b760 <nrf_cloud_disconnect+0x20>)
   2b744:	781b      	ldrb	r3, [r3, #0]
   2b746:	2b01      	cmp	r3, #1
   2b748:	d907      	bls.n	2b75a <nrf_cloud_disconnect+0x1a>
	atomic_set(&disconnect_requested, 1);
   2b74a:	2101      	movs	r1, #1
   2b74c:	4805      	ldr	r0, [pc, #20]	; (2b764 <nrf_cloud_disconnect+0x24>)
   2b74e:	f013 ff95 	bl	3f67c <atomic_set.isra.0>
}
   2b752:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return nct_disconnect();
   2b756:	f001 b8af 	b.w	2c8b8 <nct_disconnect>
}
   2b75a:	f06f 000c 	mvn.w	r0, #12
   2b75e:	bd08      	pop	{r3, pc}
   2b760:	2001c90a 	.word	0x2001c90a
   2b764:	20019558 	.word	0x20019558

0002b768 <nrf_cloud_run>:
}

void nrf_cloud_run(void)
{
   2b768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
start:
	k_sem_take(&connection_poll_sem, K_FOREVER);
	atomic_set(&connection_poll_active, 1);

	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTING;
	evt.status = NRF_CLOUD_CONNECT_RES_SUCCESS;
   2b76c:	2700      	movs	r7, #0
	return z_impl_k_sem_take(sem, timeout);
   2b76e:	4d41      	ldr	r5, [pc, #260]	; (2b874 <nrf_cloud_run+0x10c>)
	atomic_set(&connection_poll_active, 1);
   2b770:	4e41      	ldr	r6, [pc, #260]	; (2b878 <nrf_cloud_run+0x110>)
{
   2b772:	b089      	sub	sp, #36	; 0x24
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTING;
   2b774:	f04f 0902 	mov.w	r9, #2
   2b778:	f04f 32ff 	mov.w	r2, #4294967295
   2b77c:	f04f 33ff 	mov.w	r3, #4294967295
   2b780:	4628      	mov	r0, r5
	return current_state;
   2b782:	f8df 8104 	ldr.w	r8, [pc, #260]	; 2b888 <nrf_cloud_run+0x120>
   2b786:	f00b fb23 	bl	36dd0 <z_impl_k_sem_take>
	atomic_set(&connection_poll_active, 1);
   2b78a:	2101      	movs	r1, #1
   2b78c:	4630      	mov	r0, r6
   2b78e:	f013 ff75 	bl	3f67c <atomic_set.isra.0>
	return current_state;
   2b792:	f898 0000 	ldrb.w	r0, [r8]
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   2b796:	a902      	add	r1, sp, #8
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTING;
   2b798:	f88d 9008 	strb.w	r9, [sp, #8]
	evt.status = NRF_CLOUD_CONNECT_RES_SUCCESS;
   2b79c:	9703      	str	r7, [sp, #12]
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   2b79e:	f7ff fed3 	bl	2b548 <nfsm_set_current_state_and_notify>
	atomic_set(&disconnect_requested, 0);
   2b7a2:	2100      	movs	r1, #0
   2b7a4:	4835      	ldr	r0, [pc, #212]	; (2b87c <nrf_cloud_run+0x114>)
   2b7a6:	f013 ff69 	bl	3f67c <atomic_set.isra.0>
	return nct_connect();
   2b7aa:	f000 ff29 	bl	2c600 <nct_connect>

	ret = connect_to_cloud();
	ret = connect_error_translate(ret);
   2b7ae:	f7ff fe63 	bl	2b478 <connect_error_translate>

	if (ret != NRF_CLOUD_CONNECT_RES_SUCCESS) {
   2b7b2:	4604      	mov	r4, r0
   2b7b4:	b188      	cbz	r0, 2b7da <nrf_cloud_run+0x72>
		evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTING;
		evt.status = ret;
   2b7b6:	9003      	str	r0, [sp, #12]
		nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   2b7b8:	a902      	add	r1, sp, #8
	return current_state;
   2b7ba:	f898 0000 	ldrb.w	r0, [r8]
		evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTING;
   2b7be:	f88d 9008 	strb.w	r9, [sp, #8]
		nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   2b7c2:	f7ff fec1 	bl	2b548 <nfsm_set_current_state_and_notify>
		nfsm_set_current_state_and_notify(STATE_INITIALIZED, &evt);
		nrf_cloud_disconnect();
	}

reset:
	atomic_set(&connection_poll_active, 0);
   2b7c6:	2100      	movs	r1, #0
   2b7c8:	4630      	mov	r0, r6
   2b7ca:	f013 ff57 	bl	3f67c <atomic_set.isra.0>
   2b7ce:	2200      	movs	r2, #0
   2b7d0:	2300      	movs	r3, #0
   2b7d2:	4628      	mov	r0, r5
   2b7d4:	f00b fafc 	bl	36dd0 <z_impl_k_sem_take>
	k_sem_take(&connection_poll_sem, K_NO_WAIT);
	goto start;
   2b7d8:	e7cc      	b.n	2b774 <nrf_cloud_run+0xc>
	fds[0].fd = nct_socket_get();
   2b7da:	f001 f8cb 	bl	2c974 <nct_socket_get>
	fds[0].events = POLLIN;
   2b7de:	2301      	movs	r3, #1
   2b7e0:	f8ad 3004 	strh.w	r3, [sp, #4]
	evt.type = NRF_CLOUD_EVT_TRANSPORT_DISCONNECTED;
   2b7e4:	2309      	movs	r3, #9
	fds[0].fd = nct_socket_get();
   2b7e6:	9000      	str	r0, [sp, #0]
	atomic_set(&transport_disconnected, 0);
   2b7e8:	4825      	ldr	r0, [pc, #148]	; (2b880 <nrf_cloud_run+0x118>)
   2b7ea:	4621      	mov	r1, r4
	evt.type = NRF_CLOUD_EVT_TRANSPORT_DISCONNECTED;
   2b7ec:	f88d 3008 	strb.w	r3, [sp, #8]
   2b7f0:	4604      	mov	r4, r0
	atomic_set(&transport_disconnected, 0);
   2b7f2:	f013 ff43 	bl	3f67c <atomic_set.isra.0>
		ret = poll(fds, ARRAY_SIZE(fds), nct_keepalive_time_left());
   2b7f6:	f001 f8b7 	bl	2c968 <nct_keepalive_time_left>
   2b7fa:	4602      	mov	r2, r0
	return z_impl_zsock_poll(fds, nfds, timeout);
   2b7fc:	2101      	movs	r1, #1
   2b7fe:	4668      	mov	r0, sp
   2b800:	f011 fd71 	bl	3d2e6 <z_impl_zsock_poll>
		if (ret == 0) {
   2b804:	4602      	mov	r2, r0
   2b806:	b940      	cbnz	r0, 2b81a <nrf_cloud_run+0xb2>
	return nct_process();
   2b808:	f001 f860 	bl	2c8cc <nct_process>
			if ((ret < 0) && (ret != -EAGAIN)) {
   2b80c:	2800      	cmp	r0, #0
   2b80e:	daf2      	bge.n	2b7f6 <nrf_cloud_run+0x8e>
   2b810:	300b      	adds	r0, #11
   2b812:	d0f0      	beq.n	2b7f6 <nrf_cloud_run+0x8e>
				evt.status = NRF_CLOUD_DISCONNECT_CLOSED_BY_REMOTE;
   2b814:	2301      	movs	r3, #1
			evt.status = NRF_CLOUD_DISCONNECT_MISC;
   2b816:	9303      	str	r3, [sp, #12]
			break;
   2b818:	e00d      	b.n	2b836 <nrf_cloud_run+0xce>
		if ((fds[0].revents & POLLIN) == POLLIN) {
   2b81a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   2b81e:	07d8      	lsls	r0, r3, #31
   2b820:	d515      	bpl.n	2b84e <nrf_cloud_run+0xe6>
	return nct_process();
   2b822:	f001 f853 	bl	2c8cc <nct_process>
			if ((ret < 0) && (ret != -EAGAIN)) {
   2b826:	2800      	cmp	r0, #0
   2b828:	da01      	bge.n	2b82e <nrf_cloud_run+0xc6>
   2b82a:	300b      	adds	r0, #11
   2b82c:	d1f2      	bne.n	2b814 <nrf_cloud_run+0xac>
   2b82e:	e8d4 3faf 	lda	r3, [r4]
			if (atomic_get(&transport_disconnected) == 1) {
   2b832:	2b01      	cmp	r3, #1
   2b834:	d1df      	bne.n	2b7f6 <nrf_cloud_run+0x8e>
   2b836:	4b12      	ldr	r3, [pc, #72]	; (2b880 <nrf_cloud_run+0x118>)
   2b838:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&transport_disconnected) == 0) {
   2b83c:	2b00      	cmp	r3, #0
   2b83e:	d1c2      	bne.n	2b7c6 <nrf_cloud_run+0x5e>
		nfsm_set_current_state_and_notify(STATE_INITIALIZED, &evt);
   2b840:	a902      	add	r1, sp, #8
   2b842:	2001      	movs	r0, #1
   2b844:	f7ff fe80 	bl	2b548 <nfsm_set_current_state_and_notify>
		nrf_cloud_disconnect();
   2b848:	f7ff ff7a 	bl	2b740 <nrf_cloud_disconnect>
   2b84c:	e7bb      	b.n	2b7c6 <nrf_cloud_run+0x5e>
		if (ret < 0) {
   2b84e:	2a00      	cmp	r2, #0
   2b850:	da05      	bge.n	2b85e <nrf_cloud_run+0xf6>
			LOG_ERR("poll() returned an error: %d", ret);
   2b852:	2145      	movs	r1, #69	; 0x45
   2b854:	480b      	ldr	r0, [pc, #44]	; (2b884 <nrf_cloud_run+0x11c>)
   2b856:	f011 f92b 	bl	3cab0 <z_log_minimal_printk>
			evt.status = NRF_CLOUD_DISCONNECT_MISC;
   2b85a:	2303      	movs	r3, #3
   2b85c:	e7db      	b.n	2b816 <nrf_cloud_run+0xae>
		if ((fds[0].revents & POLLNVAL) == POLLNVAL) {
   2b85e:	0699      	lsls	r1, r3, #26
   2b860:	d503      	bpl.n	2b86a <nrf_cloud_run+0x102>
			if (nfsm_get_disconnect_requested()) {
   2b862:	f7ff fead 	bl	2b5c0 <nfsm_get_disconnect_requested>
			evt.status = NRF_CLOUD_DISCONNECT_INVALID_REQUEST;
   2b866:	2302      	movs	r3, #2
   2b868:	e7d5      	b.n	2b816 <nrf_cloud_run+0xae>
		if ((fds[0].revents & POLLHUP) == POLLHUP) {
   2b86a:	06da      	lsls	r2, r3, #27
   2b86c:	d4d2      	bmi.n	2b814 <nrf_cloud_run+0xac>
		if ((fds[0].revents & POLLERR) == POLLERR) {
   2b86e:	071b      	lsls	r3, r3, #28
   2b870:	d5c1      	bpl.n	2b7f6 <nrf_cloud_run+0x8e>
   2b872:	e7f2      	b.n	2b85a <nrf_cloud_run+0xf2>
   2b874:	20015030 	.word	0x20015030
   2b878:	20019554 	.word	0x20019554
   2b87c:	20019558 	.word	0x20019558
   2b880:	2001955c 	.word	0x2001955c
   2b884:	000482d2 	.word	0x000482d2
   2b888:	2001c90a 	.word	0x2001c90a

0002b88c <nrf_cloud_send>:
{
   2b88c:	b510      	push	{r4, lr}
   2b88e:	b086      	sub	sp, #24
	if (!msg) {
   2b890:	2800      	cmp	r0, #0
   2b892:	d044      	beq.n	2b91e <nrf_cloud_send+0x92>
	switch (msg->topic_type) {
   2b894:	7a03      	ldrb	r3, [r0, #8]
   2b896:	2b02      	cmp	r3, #2
   2b898:	d01f      	beq.n	2b8da <nrf_cloud_send+0x4e>
   2b89a:	2b03      	cmp	r3, #3
   2b89c:	d042      	beq.n	2b924 <nrf_cloud_send+0x98>
   2b89e:	2b01      	cmp	r3, #1
   2b8a0:	d15d      	bne.n	2b95e <nrf_cloud_send+0xd2>
		if (current_state < STATE_CC_CONNECTED) {
   2b8a2:	4a32      	ldr	r2, [pc, #200]	; (2b96c <nrf_cloud_send+0xe0>)
   2b8a4:	7812      	ldrb	r2, [r2, #0]
   2b8a6:	2a03      	cmp	r2, #3
   2b8a8:	d956      	bls.n	2b958 <nrf_cloud_send+0xcc>
		const struct nct_cc_data shadow_data = {
   2b8aa:	2200      	movs	r2, #0
   2b8ac:	9205      	str	r2, [sp, #20]
   2b8ae:	e9cd 2203 	strd	r2, r2, [sp, #12]
   2b8b2:	6802      	ldr	r2, [r0, #0]
   2b8b4:	f88d 3016 	strb.w	r3, [sp, #22]
   2b8b8:	9201      	str	r2, [sp, #4]
   2b8ba:	6842      	ldr	r2, [r0, #4]
   2b8bc:	9202      	str	r2, [sp, #8]
   2b8be:	68c2      	ldr	r2, [r0, #12]
		err = nct_cc_send(&shadow_data);
   2b8c0:	a801      	add	r0, sp, #4
		const struct nct_cc_data shadow_data = {
   2b8c2:	f8ad 2014 	strh.w	r2, [sp, #20]
		err = nct_cc_send(&shadow_data);
   2b8c6:	f000 fee9 	bl	2c69c <nct_cc_send>
		if (err) {
   2b8ca:	4604      	mov	r4, r0
   2b8cc:	b1d0      	cbz	r0, 2b904 <nrf_cloud_send+0x78>
			LOG_ERR("nct_cc_send failed, error: %d\n", err);
   2b8ce:	2145      	movs	r1, #69	; 0x45
   2b8d0:	4602      	mov	r2, r0
   2b8d2:	4827      	ldr	r0, [pc, #156]	; (2b970 <nrf_cloud_send+0xe4>)
			LOG_ERR("nct_dc_bulk_send failed, error: %d", err);
   2b8d4:	f011 f8ec 	bl	3cab0 <z_log_minimal_printk>
			return err;
   2b8d8:	e014      	b.n	2b904 <nrf_cloud_send+0x78>
		if (current_state != STATE_DC_CONNECTED) {
   2b8da:	4b24      	ldr	r3, [pc, #144]	; (2b96c <nrf_cloud_send+0xe0>)
   2b8dc:	781b      	ldrb	r3, [r3, #0]
   2b8de:	2b09      	cmp	r3, #9
   2b8e0:	d13a      	bne.n	2b958 <nrf_cloud_send+0xcc>
		const struct nct_dc_data buf = {
   2b8e2:	2300      	movs	r3, #0
   2b8e4:	9305      	str	r3, [sp, #20]
   2b8e6:	e9cd 3303 	strd	r3, r3, [sp, #12]
   2b8ea:	6803      	ldr	r3, [r0, #0]
   2b8ec:	9301      	str	r3, [sp, #4]
   2b8ee:	6843      	ldr	r3, [r0, #4]
   2b8f0:	9302      	str	r3, [sp, #8]
   2b8f2:	68c3      	ldr	r3, [r0, #12]
   2b8f4:	f8ad 3014 	strh.w	r3, [sp, #20]
		if (msg->qos == MQTT_QOS_0_AT_MOST_ONCE) {
   2b8f8:	7a43      	ldrb	r3, [r0, #9]
   2b8fa:	b933      	cbnz	r3, 2b90a <nrf_cloud_send+0x7e>
			err = nct_dc_stream(&buf);
   2b8fc:	a801      	add	r0, sp, #4
   2b8fe:	f013 ff01 	bl	3f704 <nct_dc_stream>
	return 0;
   2b902:	2400      	movs	r4, #0
}
   2b904:	4620      	mov	r0, r4
   2b906:	b006      	add	sp, #24
   2b908:	bd10      	pop	{r4, pc}
		} else if (msg->qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   2b90a:	2b01      	cmp	r3, #1
   2b90c:	d103      	bne.n	2b916 <nrf_cloud_send+0x8a>
			err = nct_dc_send(&buf);
   2b90e:	a801      	add	r0, sp, #4
   2b910:	f013 fef5 	bl	3f6fe <nct_dc_send>
   2b914:	e7f5      	b.n	2b902 <nrf_cloud_send+0x76>
			LOG_ERR("Unsupported QoS setting");
   2b916:	2145      	movs	r1, #69	; 0x45
   2b918:	4816      	ldr	r0, [pc, #88]	; (2b974 <nrf_cloud_send+0xe8>)
   2b91a:	f011 f8c9 	bl	3cab0 <z_log_minimal_printk>
		return -EINVAL;
   2b91e:	f06f 0415 	mvn.w	r4, #21
   2b922:	e7ef      	b.n	2b904 <nrf_cloud_send+0x78>
		if (current_state != STATE_DC_CONNECTED) {
   2b924:	4b11      	ldr	r3, [pc, #68]	; (2b96c <nrf_cloud_send+0xe0>)
   2b926:	781b      	ldrb	r3, [r3, #0]
   2b928:	2b09      	cmp	r3, #9
   2b92a:	d115      	bne.n	2b958 <nrf_cloud_send+0xcc>
		const struct nct_dc_data buf = {
   2b92c:	2300      	movs	r3, #0
   2b92e:	9305      	str	r3, [sp, #20]
   2b930:	e9cd 3303 	strd	r3, r3, [sp, #12]
   2b934:	6803      	ldr	r3, [r0, #0]
		err = nct_dc_bulk_send(&buf, msg->qos);
   2b936:	7a41      	ldrb	r1, [r0, #9]
		const struct nct_dc_data buf = {
   2b938:	9301      	str	r3, [sp, #4]
   2b93a:	6843      	ldr	r3, [r0, #4]
   2b93c:	9302      	str	r3, [sp, #8]
   2b93e:	68c3      	ldr	r3, [r0, #12]
		err = nct_dc_bulk_send(&buf, msg->qos);
   2b940:	a801      	add	r0, sp, #4
		const struct nct_dc_data buf = {
   2b942:	f8ad 3014 	strh.w	r3, [sp, #20]
		err = nct_dc_bulk_send(&buf, msg->qos);
   2b946:	f000 ff67 	bl	2c818 <nct_dc_bulk_send>
		if (err) {
   2b94a:	4604      	mov	r4, r0
   2b94c:	2800      	cmp	r0, #0
   2b94e:	d0d9      	beq.n	2b904 <nrf_cloud_send+0x78>
			LOG_ERR("nct_dc_bulk_send failed, error: %d", err);
   2b950:	4602      	mov	r2, r0
   2b952:	2145      	movs	r1, #69	; 0x45
   2b954:	4808      	ldr	r0, [pc, #32]	; (2b978 <nrf_cloud_send+0xec>)
   2b956:	e7bd      	b.n	2b8d4 <nrf_cloud_send+0x48>
			return -EACCES;
   2b958:	f06f 040c 	mvn.w	r4, #12
   2b95c:	e7d2      	b.n	2b904 <nrf_cloud_send+0x78>
		LOG_ERR("Unknown topic type");
   2b95e:	2145      	movs	r1, #69	; 0x45
   2b960:	4806      	ldr	r0, [pc, #24]	; (2b97c <nrf_cloud_send+0xf0>)
   2b962:	f011 f8a5 	bl	3cab0 <z_log_minimal_printk>
		return -ENODATA;
   2b966:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   2b96a:	e7cb      	b.n	2b904 <nrf_cloud_send+0x78>
   2b96c:	2001c90a 	.word	0x2001c90a
   2b970:	000482f4 	.word	0x000482f4
   2b974:	00048318 	.word	0x00048318
   2b978:	00048335 	.word	0x00048335
   2b97c:	0004835d 	.word	0x0004835d

0002b980 <nrf_cloud_shadow_device_status_update>:
{
   2b980:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2b982:	4604      	mov	r4, r0
	struct nrf_cloud_tx_data tx_data = {
   2b984:	2210      	movs	r2, #16
   2b986:	2100      	movs	r1, #0
   2b988:	4668      	mov	r0, sp
   2b98a:	f015 fd2b 	bl	413e4 <memset>
   2b98e:	f240 1301 	movw	r3, #257	; 0x101
   2b992:	f8ad 3008 	strh.w	r3, [sp, #8]
	if (current_state != STATE_DC_CONNECTED) {
   2b996:	4b0c      	ldr	r3, [pc, #48]	; (2b9c8 <nrf_cloud_shadow_device_status_update+0x48>)
   2b998:	781b      	ldrb	r3, [r3, #0]
   2b99a:	2b09      	cmp	r3, #9
   2b99c:	d110      	bne.n	2b9c0 <nrf_cloud_shadow_device_status_update+0x40>
	err = nrf_cloud_device_status_encode(dev_status, &tx_data.data, true);
   2b99e:	4620      	mov	r0, r4
   2b9a0:	2201      	movs	r2, #1
   2b9a2:	4669      	mov	r1, sp
   2b9a4:	f7ff f95a 	bl	2ac5c <nrf_cloud_device_status_encode>
	if (err) {
   2b9a8:	4604      	mov	r4, r0
   2b9aa:	b930      	cbnz	r0, 2b9ba <nrf_cloud_shadow_device_status_update+0x3a>
	err = nrf_cloud_send(&tx_data);
   2b9ac:	4668      	mov	r0, sp
   2b9ae:	f7ff ff6d 	bl	2b88c <nrf_cloud_send>
   2b9b2:	4604      	mov	r4, r0
	nrf_cloud_device_status_free(&tx_data.data);
   2b9b4:	4668      	mov	r0, sp
   2b9b6:	f013 fe54 	bl	3f662 <nrf_cloud_device_status_free>
}
   2b9ba:	4620      	mov	r0, r4
   2b9bc:	b004      	add	sp, #16
   2b9be:	bd10      	pop	{r4, pc}
		return -EACCES;
   2b9c0:	f06f 040c 	mvn.w	r4, #12
   2b9c4:	e7f9      	b.n	2b9ba <nrf_cloud_shadow_device_status_update+0x3a>
   2b9c6:	bf00      	nop
   2b9c8:	2001c90a 	.word	0x2001c90a

0002b9cc <nct_input>:
	return nfsm_handle_incoming_event(evt, current_state);
   2b9cc:	4b01      	ldr	r3, [pc, #4]	; (2b9d4 <nct_input+0x8>)
   2b9ce:	7819      	ldrb	r1, [r3, #0]
   2b9d0:	f000 b99e 	b.w	2bd10 <nfsm_handle_incoming_event>
   2b9d4:	2001c90a 	.word	0x2001c90a

0002b9d8 <nct_apply_update>:
	app_event_handler(evt);
   2b9d8:	4b01      	ldr	r3, [pc, #4]	; (2b9e0 <nct_apply_update+0x8>)
   2b9da:	681b      	ldr	r3, [r3, #0]
   2b9dc:	4718      	bx	r3
   2b9de:	bf00      	nop
   2b9e0:	20019550 	.word	0x20019550

0002b9e4 <dc_rx_data_handler>:
#endif
	return -EFTYPE;
}

static int dc_rx_data_handler(const struct nct_evt *nct_evt)
{
   2b9e4:	b570      	push	{r4, r5, r6, lr}
	struct nrf_cloud_evt cloud_evt = {
   2b9e6:	2306      	movs	r3, #6
   2b9e8:	2600      	movs	r6, #0
{
   2b9ea:	b08e      	sub	sp, #56	; 0x38
	struct nrf_cloud_evt cloud_evt = {
   2b9ec:	e9cd 6600 	strd	r6, r6, [sp]
   2b9f0:	f88d 3000 	strb.w	r3, [sp]
		.type = NRF_CLOUD_EVT_RX_DATA,
		.data = nct_evt->param.dc->data,
   2b9f4:	6843      	ldr	r3, [r0, #4]
	struct nrf_cloud_evt cloud_evt = {
   2b9f6:	aa02      	add	r2, sp, #8
{
   2b9f8:	4604      	mov	r4, r0
	struct nrf_cloud_evt cloud_evt = {
   2b9fa:	e893 0003 	ldmia.w	r3, {r0, r1}
   2b9fe:	e882 0003 	stmia.w	r2, {r0, r1}
   2ba02:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   2ba06:	aa04      	add	r2, sp, #16
   2ba08:	e882 0003 	stmia.w	r2, {r0, r1}
		.topic = nct_evt->param.dc->topic,
	};

	bool discon_req = nrf_cloud_detect_disconnection_request(nct_evt->param.dc->data.ptr);
   2ba0c:	6858      	ldr	r0, [r3, #4]
   2ba0e:	f7ff fcc9 	bl	2b3a4 <nrf_cloud_detect_disconnection_request>

	/* All data is forwared to the app... unless a callback is registered */
	if (cell_pos_cb_send(nct_evt->param.dc->data.ptr) == 0) {
   2ba12:	6863      	ldr	r3, [r4, #4]
	if (cell_pos_cb) {
   2ba14:	4c10      	ldr	r4, [pc, #64]	; (2ba58 <dc_rx_data_handler+0x74>)
	bool discon_req = nrf_cloud_detect_disconnection_request(nct_evt->param.dc->data.ptr);
   2ba16:	4605      	mov	r5, r0
	if (cell_pos_cb_send(nct_evt->param.dc->data.ptr) == 0) {
   2ba18:	6858      	ldr	r0, [r3, #4]
	if (cell_pos_cb) {
   2ba1a:	6823      	ldr	r3, [r4, #0]
   2ba1c:	b15b      	cbz	r3, 2ba36 <dc_rx_data_handler+0x52>
		int ret = nrf_cloud_cell_pos_process(rx_buf, &res);
   2ba1e:	a906      	add	r1, sp, #24
   2ba20:	f003 fac0 	bl	2efa4 <nrf_cloud_cell_pos_process>
		if (ret <= 0) {
   2ba24:	42b0      	cmp	r0, r6
   2ba26:	dc06      	bgt.n	2ba36 <dc_rx_data_handler+0x52>
			cell_pos_cb(&res);
   2ba28:	6823      	ldr	r3, [r4, #0]
   2ba2a:	a806      	add	r0, sp, #24
   2ba2c:	4798      	blx	r3
	cell_pos_cb = cb;
   2ba2e:	6026      	str	r6, [r4, #0]
			LOG_ERR("nRF Cloud disconnection-on-delete failure, error: %d", err);
		}
	}

	return 0;
}
   2ba30:	2000      	movs	r0, #0
   2ba32:	b00e      	add	sp, #56	; 0x38
   2ba34:	bd70      	pop	{r4, r5, r6, pc}
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &cloud_evt);
   2ba36:	f7ff fd81 	bl	2b53c <nfsm_get_current_state>
   2ba3a:	4669      	mov	r1, sp
   2ba3c:	f7ff fd84 	bl	2b548 <nfsm_set_current_state_and_notify>
	if (discon_req) {
   2ba40:	2d00      	cmp	r5, #0
   2ba42:	d0f5      	beq.n	2ba30 <dc_rx_data_handler+0x4c>
		int err = nrf_cloud_disconnect();
   2ba44:	f7ff fe7c 	bl	2b740 <nrf_cloud_disconnect>
		if (err < 0) {
   2ba48:	1e02      	subs	r2, r0, #0
   2ba4a:	daf1      	bge.n	2ba30 <dc_rx_data_handler+0x4c>
			LOG_ERR("nRF Cloud disconnection-on-delete failure, error: %d", err);
   2ba4c:	2145      	movs	r1, #69	; 0x45
   2ba4e:	4803      	ldr	r0, [pc, #12]	; (2ba5c <dc_rx_data_handler+0x78>)
   2ba50:	f011 f82e 	bl	3cab0 <z_log_minimal_printk>
   2ba54:	e7ec      	b.n	2ba30 <dc_rx_data_handler+0x4c>
   2ba56:	bf00      	nop
   2ba58:	20019564 	.word	0x20019564
   2ba5c:	00048395 	.word	0x00048395

0002ba60 <cc_connection_handler>:
{
   2ba60:	b510      	push	{r4, lr}
   2ba62:	4604      	mov	r4, r0
   2ba64:	b086      	sub	sp, #24
	const struct nrf_cloud_evt evt = {
   2ba66:	2100      	movs	r1, #0
   2ba68:	2218      	movs	r2, #24
   2ba6a:	4668      	mov	r0, sp
   2ba6c:	f015 fcba 	bl	413e4 <memset>
   2ba70:	23ff      	movs	r3, #255	; 0xff
	if (nct_evt->status != 0) {
   2ba72:	6821      	ldr	r1, [r4, #0]
	const struct nrf_cloud_evt evt = {
   2ba74:	f88d 3000 	strb.w	r3, [sp]
	if (nct_evt->status != 0) {
   2ba78:	b151      	cbz	r1, 2ba90 <cc_connection_handler+0x30>
		nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   2ba7a:	f7ff fd5f 	bl	2b53c <nfsm_get_current_state>
   2ba7e:	4669      	mov	r1, sp
   2ba80:	f7ff fd62 	bl	2b548 <nfsm_set_current_state_and_notify>
		return 0;
   2ba84:	2400      	movs	r4, #0
		(void)nct_dc_disconnect();
   2ba86:	f000 fef5 	bl	2c874 <nct_dc_disconnect>
}
   2ba8a:	4620      	mov	r0, r4
   2ba8c:	b006      	add	sp, #24
   2ba8e:	bd10      	pop	{r4, pc}
	nfsm_set_current_state_and_notify(STATE_CC_CONNECTED, NULL);
   2ba90:	2004      	movs	r0, #4
   2ba92:	f7ff fd59 	bl	2b548 <nfsm_set_current_state_and_notify>
	err = nct_cc_send(&get_request);
   2ba96:	4806      	ldr	r0, [pc, #24]	; (2bab0 <cc_connection_handler+0x50>)
   2ba98:	f000 fe00 	bl	2c69c <nct_cc_send>
	if (err) {
   2ba9c:	4604      	mov	r4, r0
   2ba9e:	b120      	cbz	r0, 2baaa <cc_connection_handler+0x4a>
		nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   2baa0:	4669      	mov	r1, sp
   2baa2:	2002      	movs	r0, #2
	nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED, NULL);
   2baa4:	f7ff fd50 	bl	2b548 <nfsm_set_current_state_and_notify>
	return 0;
   2baa8:	e7ef      	b.n	2ba8a <cc_connection_handler+0x2a>
	nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED, NULL);
   2baaa:	4601      	mov	r1, r0
   2baac:	2005      	movs	r0, #5
   2baae:	e7f9      	b.n	2baa4 <cc_connection_handler+0x44>
   2bab0:	00042fb0 	.word	0x00042fb0

0002bab4 <state_ua_pin_wait>:
{
   2bab4:	b510      	push	{r4, lr}
   2bab6:	b08c      	sub	sp, #48	; 0x30
	struct nct_cc_data msg = {
   2bab8:	2214      	movs	r2, #20
   2baba:	2100      	movs	r1, #0
   2babc:	a801      	add	r0, sp, #4
   2babe:	f015 fc91 	bl	413e4 <memset>
   2bac2:	4b17      	ldr	r3, [pc, #92]	; (2bb20 <state_ua_pin_wait+0x6c>)
	err = nrf_cloud_encode_state(STATE_UA_PIN_WAIT, &msg.data);
   2bac4:	2006      	movs	r0, #6
   2bac6:	a901      	add	r1, sp, #4
	struct nct_cc_data msg = {
   2bac8:	9305      	str	r3, [sp, #20]
	err = nrf_cloud_encode_state(STATE_UA_PIN_WAIT, &msg.data);
   2baca:	f7fe fd87 	bl	2a5dc <nrf_cloud_encode_state>
	if (err) {
   2bace:	4604      	mov	r4, r0
   2bad0:	b138      	cbz	r0, 2bae2 <state_ua_pin_wait+0x2e>
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   2bad2:	4602      	mov	r2, r0
   2bad4:	2145      	movs	r1, #69	; 0x45
   2bad6:	4813      	ldr	r0, [pc, #76]	; (2bb24 <state_ua_pin_wait+0x70>)
   2bad8:	f010 ffea 	bl	3cab0 <z_log_minimal_printk>
}
   2badc:	4620      	mov	r0, r4
   2bade:	b00c      	add	sp, #48	; 0x30
   2bae0:	bd10      	pop	{r4, pc}
	err = nct_cc_send(&msg);
   2bae2:	a801      	add	r0, sp, #4
   2bae4:	f000 fdda 	bl	2c69c <nct_cc_send>
	if (err) {
   2bae8:	4604      	mov	r4, r0
   2baea:	b140      	cbz	r0, 2bafe <state_ua_pin_wait+0x4a>
		LOG_ERR("nct_cc_send failed %d", err);
   2baec:	4602      	mov	r2, r0
   2baee:	2145      	movs	r1, #69	; 0x45
   2baf0:	480d      	ldr	r0, [pc, #52]	; (2bb28 <state_ua_pin_wait+0x74>)
   2baf2:	f010 ffdd 	bl	3cab0 <z_log_minimal_printk>
		nrf_cloud_free((void *)msg.data.ptr);
   2baf6:	9802      	ldr	r0, [sp, #8]
   2baf8:	f015 fbc3 	bl	41282 <k_free>
		return err;
   2bafc:	e7ee      	b.n	2badc <state_ua_pin_wait+0x28>
	nrf_cloud_free((void *)msg.data.ptr);
   2bafe:	9802      	ldr	r0, [sp, #8]
   2bb00:	f015 fbbf 	bl	41282 <k_free>
	struct nrf_cloud_evt evt = {
   2bb04:	2218      	movs	r2, #24
   2bb06:	4621      	mov	r1, r4
   2bb08:	eb0d 0002 	add.w	r0, sp, r2
   2bb0c:	f015 fc6a 	bl	413e4 <memset>
   2bb10:	2303      	movs	r3, #3
	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);
   2bb12:	2006      	movs	r0, #6
   2bb14:	a906      	add	r1, sp, #24
	struct nrf_cloud_evt evt = {
   2bb16:	f88d 3018 	strb.w	r3, [sp, #24]
	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);
   2bb1a:	f7ff fd15 	bl	2b548 <nfsm_set_current_state_and_notify>
	return 0;
   2bb1e:	e7dd      	b.n	2badc <state_ua_pin_wait+0x28>
   2bb20:	0001012c 	.word	0x0001012c
   2bb24:	000483cf 	.word	0x000483cf
   2bb28:	000483f5 	.word	0x000483f5

0002bb2c <cc_rx_data_handler>:
{
   2bb2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	bool config_found = false;
   2bb2e:	2400      	movs	r4, #0
{
   2bb30:	b097      	sub	sp, #92	; 0x5c
   2bb32:	4606      	mov	r6, r0
	const struct nrf_cloud_data *payload = &nct_evt->param.cc->data;
   2bb34:	6847      	ldr	r7, [r0, #4]
	bool config_found = false;
   2bb36:	f88d 400b 	strb.w	r4, [sp, #11]
	const enum nfsm_state current_state = nfsm_get_current_state();
   2bb3a:	f7ff fcff 	bl	2b53c <nfsm_get_current_state>
	struct nct_cc_data msg = {
   2bb3e:	2214      	movs	r2, #20
   2bb40:	4621      	mov	r1, r4
	const enum nfsm_state current_state = nfsm_get_current_state();
   2bb42:	4605      	mov	r5, r0
	struct nct_cc_data msg = {
   2bb44:	a80b      	add	r0, sp, #44	; 0x2c
   2bb46:	f015 fc4d 	bl	413e4 <memset>
   2bb4a:	4b64      	ldr	r3, [pc, #400]	; (2bcdc <cc_rx_data_handler+0x1b0>)
	struct nrf_cloud_evt cloud_evt = {
   2bb4c:	2218      	movs	r2, #24
   2bb4e:	4621      	mov	r1, r4
   2bb50:	a810      	add	r0, sp, #64	; 0x40
	struct nct_cc_data msg = {
   2bb52:	930f      	str	r3, [sp, #60]	; 0x3c
	struct nrf_cloud_evt cloud_evt = {
   2bb54:	f015 fc46 	bl	413e4 <memset>
   2bb58:	2306      	movs	r3, #6
	if (evt->param.cc == NULL) {
   2bb5a:	6870      	ldr	r0, [r6, #4]
	struct nrf_cloud_evt cloud_evt = {
   2bb5c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (evt->param.cc == NULL) {
   2bb60:	b160      	cbz	r0, 2bb7c <cc_rx_data_handler+0x50>
	err = nrf_cloud_encode_config_response(&evt->param.cc->data, &msg.data,
   2bb62:	f10d 020b 	add.w	r2, sp, #11
   2bb66:	a90b      	add	r1, sp, #44	; 0x2c
   2bb68:	f7fe fc9e 	bl	2a4a8 <nrf_cloud_encode_config_response>
	if ((err) && (err != -ESRCH)) {
   2bb6c:	4602      	mov	r2, r0
   2bb6e:	b1b8      	cbz	r0, 2bba0 <cc_rx_data_handler+0x74>
   2bb70:	1cc3      	adds	r3, r0, #3
   2bb72:	d015      	beq.n	2bba0 <cc_rx_data_handler+0x74>
		LOG_ERR("nrf_cloud_encode_config_response failed %d", err);
   2bb74:	2145      	movs	r1, #69	; 0x45
   2bb76:	485a      	ldr	r0, [pc, #360]	; (2bce0 <cc_rx_data_handler+0x1b4>)
   2bb78:	f010 ff9a 	bl	3cab0 <z_log_minimal_printk>
	err = nrf_cloud_decode_requested_state(payload, &new_state);
   2bb7c:	4638      	mov	r0, r7
   2bb7e:	f10d 010a 	add.w	r1, sp, #10
   2bb82:	f7fe fbe7 	bl	2a354 <nrf_cloud_decode_requested_state>
	if (err) {
   2bb86:	4604      	mov	r4, r0
   2bb88:	b370      	cbz	r0, 2bbe8 <cc_rx_data_handler+0xbc>
		if (!config_found) {
   2bb8a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   2bb8e:	2b00      	cmp	r3, #0
   2bb90:	f040 80a1 	bne.w	2bcd6 <cc_rx_data_handler+0x1aa>
			LOG_ERR("nrf_cloud_decode_requested_state Failed %d",
   2bb94:	2145      	movs	r1, #69	; 0x45
   2bb96:	4602      	mov	r2, r0
   2bb98:	4852      	ldr	r0, [pc, #328]	; (2bce4 <cc_rx_data_handler+0x1b8>)
		LOG_ERR("nrf_cloud_decode_data_endpoint failed %d", err);
   2bb9a:	f010 ff89 	bl	3cab0 <z_log_minimal_printk>
		return err;
   2bb9e:	e055      	b.n	2bc4c <cc_rx_data_handler+0x120>
	if (*config_found == false) {
   2bba0:	f89d 300b 	ldrb.w	r3, [sp, #11]
   2bba4:	2b00      	cmp	r3, #0
   2bba6:	d0e9      	beq.n	2bb7c <cc_rx_data_handler+0x50>
	if (msg.data.ptr) {
   2bba8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2bbaa:	b163      	cbz	r3, 2bbc6 <cc_rx_data_handler+0x9a>
		err = nct_cc_send(&msg);
   2bbac:	a80b      	add	r0, sp, #44	; 0x2c
   2bbae:	f000 fd75 	bl	2c69c <nct_cc_send>
   2bbb2:	4604      	mov	r4, r0
		nrf_cloud_free((void *)msg.data.ptr);
   2bbb4:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bbb6:	f015 fb64 	bl	41282 <k_free>
		if (err) {
   2bbba:	b124      	cbz	r4, 2bbc6 <cc_rx_data_handler+0x9a>
			LOG_ERR("nct_cc_send failed %d", err);
   2bbbc:	4622      	mov	r2, r4
   2bbbe:	2145      	movs	r1, #69	; 0x45
   2bbc0:	4849      	ldr	r0, [pc, #292]	; (2bce8 <cc_rx_data_handler+0x1bc>)
   2bbc2:	f010 ff75 	bl	3cab0 <z_log_minimal_printk>
	cloud_evt.data = evt->param.cc->data;
   2bbc6:	6873      	ldr	r3, [r6, #4]
   2bbc8:	aa12      	add	r2, sp, #72	; 0x48
   2bbca:	e893 0003 	ldmia.w	r3, {r0, r1}
   2bbce:	e882 0003 	stmia.w	r2, {r0, r1}
	cloud_evt.topic = evt->param.cc->topic;
   2bbd2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   2bbd6:	ab16      	add	r3, sp, #88	; 0x58
   2bbd8:	e903 0003 	stmdb	r3, {r0, r1}
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &cloud_evt);
   2bbdc:	f7ff fcae 	bl	2b53c <nfsm_get_current_state>
   2bbe0:	a910      	add	r1, sp, #64	; 0x40
   2bbe2:	f7ff fcb1 	bl	2b548 <nfsm_set_current_state_and_notify>
	return err;
   2bbe6:	e7c9      	b.n	2bb7c <cc_rx_data_handler+0x50>
	switch (current_state) {
   2bbe8:	2d07      	cmp	r5, #7
   2bbea:	d82b      	bhi.n	2bc44 <cc_rx_data_handler+0x118>
   2bbec:	2d03      	cmp	r5, #3
   2bbee:	d92d      	bls.n	2bc4c <cc_rx_data_handler+0x120>
		if (new_state == STATE_UA_PIN_COMPLETE) {
   2bbf0:	f89d 300a 	ldrb.w	r3, [sp, #10]
   2bbf4:	2b07      	cmp	r3, #7
   2bbf6:	d161      	bne.n	2bcbc <cc_rx_data_handler+0x190>
			if (!config_found) {
   2bbf8:	f89d 200b 	ldrb.w	r2, [sp, #11]
   2bbfc:	b9a2      	cbnz	r2, 2bc28 <cc_rx_data_handler+0xfc>
				struct nrf_cloud_evt cloud_evt = {
   2bbfe:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
   2bc02:	2206      	movs	r2, #6
					.data = nct_evt->param.cc->data,
   2bc04:	6873      	ldr	r3, [r6, #4]
				struct nrf_cloud_evt cloud_evt = {
   2bc06:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
   2bc0a:	aa12      	add	r2, sp, #72	; 0x48
   2bc0c:	e893 0003 	ldmia.w	r3, {r0, r1}
   2bc10:	e882 0003 	stmia.w	r2, {r0, r1}
   2bc14:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   2bc18:	ab16      	add	r3, sp, #88	; 0x58
   2bc1a:	e903 0003 	stmdb	r3, {r0, r1}
				nfsm_set_current_state_and_notify(nfsm_get_current_state(),
   2bc1e:	f7ff fc8d 	bl	2b53c <nfsm_get_current_state>
   2bc22:	a910      	add	r1, sp, #64	; 0x40
   2bc24:	f7ff fc90 	bl	2b548 <nfsm_set_current_state_and_notify>
	err = nrf_cloud_decode_data_endpoint(payload, &tx, &rx, &bulk, &endpoint);
   2bc28:	ad09      	add	r5, sp, #36	; 0x24
   2bc2a:	6870      	ldr	r0, [r6, #4]
   2bc2c:	9500      	str	r5, [sp, #0]
   2bc2e:	ab07      	add	r3, sp, #28
   2bc30:	aa03      	add	r2, sp, #12
   2bc32:	a905      	add	r1, sp, #20
   2bc34:	f7fe fd8e 	bl	2a754 <nrf_cloud_decode_data_endpoint>
	if (err) {
   2bc38:	4604      	mov	r4, r0
   2bc3a:	b150      	cbz	r0, 2bc52 <cc_rx_data_handler+0x126>
		LOG_ERR("nrf_cloud_decode_data_endpoint failed %d", err);
   2bc3c:	4602      	mov	r2, r0
   2bc3e:	2145      	movs	r1, #69	; 0x45
   2bc40:	482a      	ldr	r0, [pc, #168]	; (2bcec <cc_rx_data_handler+0x1c0>)
   2bc42:	e7aa      	b.n	2bb9a <cc_rx_data_handler+0x6e>
	switch (current_state) {
   2bc44:	3d08      	subs	r5, #8
   2bc46:	b2ed      	uxtb	r5, r5
   2bc48:	2d01      	cmp	r5, #1
   2bc4a:	d93d      	bls.n	2bcc8 <cc_rx_data_handler+0x19c>
}
   2bc4c:	4620      	mov	r0, r4
   2bc4e:	b017      	add	sp, #92	; 0x5c
   2bc50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	nct_dc_endpoint_set(&tx, &rx, &bulk, &endpoint);
   2bc52:	462b      	mov	r3, r5
   2bc54:	aa07      	add	r2, sp, #28
   2bc56:	a903      	add	r1, sp, #12
   2bc58:	a805      	add	r0, sp, #20
   2bc5a:	f000 fd69 	bl	2c730 <nct_dc_endpoint_set>
	struct nct_cc_data msg = {
   2bc5e:	4621      	mov	r1, r4
   2bc60:	2214      	movs	r2, #20
   2bc62:	a80b      	add	r0, sp, #44	; 0x2c
   2bc64:	f015 fbbe 	bl	413e4 <memset>
   2bc68:	4b21      	ldr	r3, [pc, #132]	; (2bcf0 <cc_rx_data_handler+0x1c4>)
	err = nrf_cloud_encode_state(STATE_UA_PIN_COMPLETE, &msg.data);
   2bc6a:	2007      	movs	r0, #7
   2bc6c:	a90b      	add	r1, sp, #44	; 0x2c
	struct nct_cc_data msg = {
   2bc6e:	930f      	str	r3, [sp, #60]	; 0x3c
	err = nrf_cloud_encode_state(STATE_UA_PIN_COMPLETE, &msg.data);
   2bc70:	f7fe fcb4 	bl	2a5dc <nrf_cloud_encode_state>
	if (err) {
   2bc74:	4604      	mov	r4, r0
   2bc76:	b118      	cbz	r0, 2bc80 <cc_rx_data_handler+0x154>
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   2bc78:	4602      	mov	r2, r0
   2bc7a:	2145      	movs	r1, #69	; 0x45
   2bc7c:	481d      	ldr	r0, [pc, #116]	; (2bcf4 <cc_rx_data_handler+0x1c8>)
   2bc7e:	e78c      	b.n	2bb9a <cc_rx_data_handler+0x6e>
	err = nct_cc_send(&msg);
   2bc80:	a80b      	add	r0, sp, #44	; 0x2c
   2bc82:	f000 fd0b 	bl	2c69c <nct_cc_send>
	if (err) {
   2bc86:	4604      	mov	r4, r0
   2bc88:	b140      	cbz	r0, 2bc9c <cc_rx_data_handler+0x170>
		LOG_ERR("nct_cc_send failed %d", err);
   2bc8a:	4602      	mov	r2, r0
   2bc8c:	2145      	movs	r1, #69	; 0x45
   2bc8e:	4816      	ldr	r0, [pc, #88]	; (2bce8 <cc_rx_data_handler+0x1bc>)
   2bc90:	f010 ff0e 	bl	3cab0 <z_log_minimal_printk>
		nrf_cloud_free((void *)msg.data.ptr);
   2bc94:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bc96:	f015 faf4 	bl	41282 <k_free>
		return err;
   2bc9a:	e7d7      	b.n	2bc4c <cc_rx_data_handler+0x120>
	nrf_cloud_free((void *)msg.data.ptr);
   2bc9c:	980c      	ldr	r0, [sp, #48]	; 0x30
   2bc9e:	f015 faf0 	bl	41282 <k_free>
	struct nrf_cloud_evt evt = {
   2bca2:	4621      	mov	r1, r4
   2bca4:	2218      	movs	r2, #24
   2bca6:	a810      	add	r0, sp, #64	; 0x40
   2bca8:	f015 fb9c 	bl	413e4 <memset>
   2bcac:	2304      	movs	r3, #4
	nfsm_set_current_state_and_notify(STATE_UA_PIN_COMPLETE, &evt);
   2bcae:	2007      	movs	r0, #7
   2bcb0:	a910      	add	r1, sp, #64	; 0x40
	struct nrf_cloud_evt evt = {
   2bcb2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	nfsm_set_current_state_and_notify(STATE_UA_PIN_COMPLETE, &evt);
   2bcb6:	f7ff fc47 	bl	2b548 <nfsm_set_current_state_and_notify>
			return handle_pin_complete(nct_evt);
   2bcba:	e7c7      	b.n	2bc4c <cc_rx_data_handler+0x120>
		} else if (new_state == STATE_UA_PIN_WAIT) {
   2bcbc:	2b06      	cmp	r3, #6
   2bcbe:	d1c5      	bne.n	2bc4c <cc_rx_data_handler+0x120>
			return state_ua_pin_wait();
   2bcc0:	f7ff fef8 	bl	2bab4 <state_ua_pin_wait>
   2bcc4:	4604      	mov	r4, r0
   2bcc6:	e7c1      	b.n	2bc4c <cc_rx_data_handler+0x120>
		if (new_state == STATE_UA_PIN_WAIT) {
   2bcc8:	f89d 300a 	ldrb.w	r3, [sp, #10]
   2bccc:	2b06      	cmp	r3, #6
   2bcce:	d1bd      	bne.n	2bc4c <cc_rx_data_handler+0x120>
			(void)nct_dc_disconnect();
   2bcd0:	f000 fdd0 	bl	2c874 <nct_dc_disconnect>
   2bcd4:	e7f4      	b.n	2bcc0 <cc_rx_data_handler+0x194>
		return 0;
   2bcd6:	2400      	movs	r4, #0
   2bcd8:	e7b8      	b.n	2bc4c <cc_rx_data_handler+0x120>
   2bcda:	bf00      	nop
   2bcdc:	0001012c 	.word	0x0001012c
   2bce0:	00048410 	.word	0x00048410
   2bce4:	00048440 	.word	0x00048440
   2bce8:	000483f5 	.word	0x000483f5
   2bcec:	00048470 	.word	0x00048470
   2bcf0:	0001012d 	.word	0x0001012d
   2bcf4:	000483cf 	.word	0x000483cf

0002bcf8 <nfsm_set_cell_pos_response_cb>:
	cell_pos_cb = cb;
   2bcf8:	4b01      	ldr	r3, [pc, #4]	; (2bd00 <nfsm_set_cell_pos_response_cb+0x8>)
   2bcfa:	6018      	str	r0, [r3, #0]
}
   2bcfc:	4770      	bx	lr
   2bcfe:	bf00      	nop
   2bd00:	20019564 	.word	0x20019564

0002bd04 <nfsm_init>:
	persistent_session = false;
   2bd04:	2000      	movs	r0, #0
   2bd06:	4b01      	ldr	r3, [pc, #4]	; (2bd0c <nfsm_init+0x8>)
   2bd08:	7018      	strb	r0, [r3, #0]
}
   2bd0a:	4770      	bx	lr
   2bd0c:	2001c90b 	.word	0x2001c90b

0002bd10 <nfsm_handle_incoming_event>:
{
   2bd10:	b570      	push	{r4, r5, r6, lr}
   2bd12:	460d      	mov	r5, r1
	if ((nct_evt == NULL) || (nct_evt->type >= NCT_EVT_TOTAL) ||
   2bd14:	4606      	mov	r6, r0
   2bd16:	b120      	cbz	r0, 2bd22 <nfsm_handle_incoming_event+0x12>
   2bd18:	7a03      	ldrb	r3, [r0, #8]
   2bd1a:	2b0a      	cmp	r3, #10
   2bd1c:	d801      	bhi.n	2bd22 <nfsm_handle_incoming_event+0x12>
   2bd1e:	2909      	cmp	r1, #9
   2bd20:	d90c      	bls.n	2bd3c <nfsm_handle_incoming_event+0x2c>
		__ASSERT_NO_MSG(false);
   2bd22:	2280      	movs	r2, #128	; 0x80
   2bd24:	490e      	ldr	r1, [pc, #56]	; (2bd60 <nfsm_handle_incoming_event+0x50>)
   2bd26:	480f      	ldr	r0, [pc, #60]	; (2bd64 <nfsm_handle_incoming_event+0x54>)
   2bd28:	f010 fe88 	bl	3ca3c <assert_print>
   2bd2c:	2180      	movs	r1, #128	; 0x80
   2bd2e:	480c      	ldr	r0, [pc, #48]	; (2bd60 <nfsm_handle_incoming_event+0x50>)
   2bd30:	f010 fe7d 	bl	3ca2e <assert_post_action>
		return -EINVAL;
   2bd34:	f06f 0415 	mvn.w	r4, #21
}
   2bd38:	4620      	mov	r0, r4
   2bd3a:	bd70      	pop	{r4, r5, r6, pc}
	if (state_event_handlers[state][nct_evt->type] != NULL) {
   2bd3c:	4a0a      	ldr	r2, [pc, #40]	; (2bd68 <nfsm_handle_incoming_event+0x58>)
   2bd3e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   2bd42:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   2bd46:	2c00      	cmp	r4, #0
   2bd48:	d0f6      	beq.n	2bd38 <nfsm_handle_incoming_event+0x28>
		err = state_event_handlers[state][nct_evt->type](nct_evt);
   2bd4a:	47a0      	blx	r4
		if (err) {
   2bd4c:	4604      	mov	r4, r0
   2bd4e:	2800      	cmp	r0, #0
   2bd50:	d0f2      	beq.n	2bd38 <nfsm_handle_incoming_event+0x28>
			LOG_ERR("Handler failed! state: %d, type: %d", state,
   2bd52:	462a      	mov	r2, r5
   2bd54:	2145      	movs	r1, #69	; 0x45
   2bd56:	7a33      	ldrb	r3, [r6, #8]
   2bd58:	4804      	ldr	r0, [pc, #16]	; (2bd6c <nfsm_handle_incoming_event+0x5c>)
   2bd5a:	f010 fea9 	bl	3cab0 <z_log_minimal_printk>
   2bd5e:	e7eb      	b.n	2bd38 <nfsm_handle_incoming_event+0x28>
   2bd60:	0004849e 	.word	0x0004849e
   2bd64:	00043ff2 	.word	0x00043ff2
   2bd68:	0004301c 	.word	0x0004301c
   2bd6c:	000484db 	.word	0x000484db

0002bd70 <cc_tx_ack_handler>:
{
   2bd70:	b510      	push	{r4, lr}
	if (nct_evt->param.message_id == NCT_MSG_ID_STATE_REQUEST) {
   2bd72:	8883      	ldrh	r3, [r0, #4]
{
   2bd74:	4604      	mov	r4, r0
	if (nct_evt->param.message_id == NCT_MSG_ID_STATE_REQUEST) {
   2bd76:	2bc8      	cmp	r3, #200	; 0xc8
{
   2bd78:	b086      	sub	sp, #24
	if (nct_evt->param.message_id == NCT_MSG_ID_STATE_REQUEST) {
   2bd7a:	d105      	bne.n	2bd88 <cc_tx_ack_handler+0x18>
		nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED,
   2bd7c:	2100      	movs	r1, #0
   2bd7e:	2005      	movs	r0, #5
		nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   2bd80:	f7ff fbe2 	bl	2b548 <nfsm_set_current_state_and_notify>
	return 0;
   2bd84:	2400      	movs	r4, #0
   2bd86:	e00e      	b.n	2bda6 <cc_tx_ack_handler+0x36>
	} else if (nct_evt->param.message_id == NCT_MSG_ID_PAIR_STATUS_REPORT) {
   2bd88:	f240 122d 	movw	r2, #301	; 0x12d
   2bd8c:	4293      	cmp	r3, r2
   2bd8e:	d119      	bne.n	2bdc4 <cc_tx_ack_handler+0x54>
		if (!persistent_session) {
   2bd90:	4b1c      	ldr	r3, [pc, #112]	; (2be04 <cc_tx_ack_handler+0x94>)
   2bd92:	781b      	ldrb	r3, [r3, #0]
   2bd94:	b953      	cbnz	r3, 2bdac <cc_tx_ack_handler+0x3c>
			err = nct_dc_connect();
   2bd96:	f000 fd25 	bl	2c7e4 <nct_dc_connect>
			if (err) {
   2bd9a:	4604      	mov	r4, r0
   2bd9c:	b918      	cbnz	r0, 2bda6 <cc_tx_ack_handler+0x36>
			nfsm_set_current_state_and_notify(STATE_DC_CONNECTING,
   2bd9e:	4601      	mov	r1, r0
   2bda0:	2008      	movs	r0, #8
   2bda2:	f7ff fbd1 	bl	2b548 <nfsm_set_current_state_and_notify>
}
   2bda6:	4620      	mov	r0, r4
   2bda8:	b006      	add	sp, #24
   2bdaa:	bd10      	pop	{r4, pc}
			struct nct_evt nevt = { .type = NCT_EVT_DC_CONNECTED,
   2bdac:	2400      	movs	r4, #0
   2bdae:	2302      	movs	r3, #2
			nfsm_handle_incoming_event(&nevt, STATE_DC_CONNECTING);
   2bdb0:	2108      	movs	r1, #8
   2bdb2:	4668      	mov	r0, sp
			struct nct_evt nevt = { .type = NCT_EVT_DC_CONNECTED,
   2bdb4:	9402      	str	r4, [sp, #8]
   2bdb6:	e9cd 4400 	strd	r4, r4, [sp]
   2bdba:	f88d 3008 	strb.w	r3, [sp, #8]
			nfsm_handle_incoming_event(&nevt, STATE_DC_CONNECTING);
   2bdbe:	f7ff ffa7 	bl	2bd10 <nfsm_handle_incoming_event>
   2bdc2:	e7f0      	b.n	2bda6 <cc_tx_ack_handler+0x36>
	} else if (nct_evt->type == NCT_EVT_PINGRESP) {
   2bdc4:	7a02      	ldrb	r2, [r0, #8]
   2bdc6:	2a05      	cmp	r2, #5
   2bdc8:	d10b      	bne.n	2bde2 <cc_tx_ack_handler+0x72>
		struct nrf_cloud_evt evt = {
   2bdca:	2218      	movs	r2, #24
   2bdcc:	2100      	movs	r1, #0
   2bdce:	4668      	mov	r0, sp
   2bdd0:	f015 fb08 	bl	413e4 <memset>
   2bdd4:	2307      	movs	r3, #7
   2bdd6:	f88d 3000 	strb.w	r3, [sp]
		nfsm_set_current_state_and_notify(nfsm_get_current_state(), &evt);
   2bdda:	f7ff fbaf 	bl	2b53c <nfsm_get_current_state>
   2bdde:	4669      	mov	r1, sp
   2bde0:	e7ce      	b.n	2bd80 <cc_tx_ack_handler+0x10>
	} else if (IS_VALID_USER_TAG(nct_evt->param.message_id)) {
   2bde2:	f242 720f 	movw	r2, #9999	; 0x270f
   2bde6:	4293      	cmp	r3, r2
   2bde8:	d9cc      	bls.n	2bd84 <cc_tx_ack_handler+0x14>
		struct nrf_cloud_evt evt = {
   2bdea:	2218      	movs	r2, #24
   2bdec:	2100      	movs	r1, #0
   2bdee:	4668      	mov	r0, sp
   2bdf0:	f015 faf8 	bl	413e4 <memset>
   2bdf4:	2308      	movs	r3, #8
   2bdf6:	f88d 3000 	strb.w	r3, [sp]
   2bdfa:	2302      	movs	r3, #2
			.data.ptr = &nct_evt->param.message_id
   2bdfc:	3404      	adds	r4, #4
		struct nrf_cloud_evt evt = {
   2bdfe:	9302      	str	r3, [sp, #8]
   2be00:	9403      	str	r4, [sp, #12]
   2be02:	e7ea      	b.n	2bdda <cc_tx_ack_handler+0x6a>
   2be04:	2001c90b 	.word	0x2001c90b

0002be08 <connection_handler>:
{
   2be08:	b570      	push	{r4, r5, r6, lr}
	if (nct_evt->status != 0) {
   2be0a:	6804      	ldr	r4, [r0, #0]
{
   2be0c:	4605      	mov	r5, r0
   2be0e:	b08a      	sub	sp, #40	; 0x28
	if (nct_evt->status != 0) {
   2be10:	b164      	cbz	r4, 2be2c <connection_handler+0x24>
		evt.type = NRF_CLOUD_EVT_ERROR;
   2be12:	23ff      	movs	r3, #255	; 0xff
		evt.status = nct_evt->status;
   2be14:	9405      	str	r4, [sp, #20]
		evt.type = NRF_CLOUD_EVT_ERROR;
   2be16:	f88d 3010 	strb.w	r3, [sp, #16]
		nfsm_set_current_state_and_notify(nfsm_get_current_state(),
   2be1a:	f7ff fb8f 	bl	2b53c <nfsm_get_current_state>
   2be1e:	a904      	add	r1, sp, #16
   2be20:	f7ff fb92 	bl	2b548 <nfsm_set_current_state_and_notify>
		return 0;
   2be24:	2400      	movs	r4, #0
}
   2be26:	4620      	mov	r0, r4
   2be28:	b00a      	add	sp, #40	; 0x28
   2be2a:	bd70      	pop	{r4, r5, r6, pc}
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTED;
   2be2c:	2601      	movs	r6, #1
	evt.status = nct_evt->param.flag;
   2be2e:	7903      	ldrb	r3, [r0, #4]
	nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   2be30:	a904      	add	r1, sp, #16
   2be32:	2002      	movs	r0, #2
	evt.status = nct_evt->param.flag;
   2be34:	9305      	str	r3, [sp, #20]
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTED;
   2be36:	f88d 6010 	strb.w	r6, [sp, #16]
	nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   2be3a:	f7ff fb85 	bl	2b548 <nfsm_set_current_state_and_notify>
	persistent_session = nct_evt->param.flag;
   2be3e:	792b      	ldrb	r3, [r5, #4]
   2be40:	2b00      	cmp	r3, #0
   2be42:	bf14      	ite	ne
   2be44:	4632      	movne	r2, r6
   2be46:	2200      	moveq	r2, #0
   2be48:	4b0b      	ldr	r3, [pc, #44]	; (2be78 <connection_handler+0x70>)
   2be4a:	701a      	strb	r2, [r3, #0]
	if (!persistent_session) {
   2be4c:	d109      	bne.n	2be62 <connection_handler+0x5a>
		err = nct_cc_connect();
   2be4e:	f000 fc13 	bl	2c678 <nct_cc_connect>
		if (err) {
   2be52:	4604      	mov	r4, r0
   2be54:	2800      	cmp	r0, #0
   2be56:	d1e6      	bne.n	2be26 <connection_handler+0x1e>
		nfsm_set_current_state_and_notify(STATE_CC_CONNECTING, NULL);
   2be58:	4601      	mov	r1, r0
   2be5a:	2003      	movs	r0, #3
   2be5c:	f7ff fb74 	bl	2b548 <nfsm_set_current_state_and_notify>
   2be60:	e7e1      	b.n	2be26 <connection_handler+0x1e>
		nfsm_handle_incoming_event(&nevt, STATE_CC_CONNECTING);
   2be62:	2103      	movs	r1, #3
   2be64:	a801      	add	r0, sp, #4
		struct nct_evt nevt = { .type = NCT_EVT_CC_CONNECTED,
   2be66:	9403      	str	r4, [sp, #12]
   2be68:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2be6c:	f88d 600c 	strb.w	r6, [sp, #12]
		nfsm_handle_incoming_event(&nevt, STATE_CC_CONNECTING);
   2be70:	f7ff ff4e 	bl	2bd10 <nfsm_handle_incoming_event>
   2be74:	e7d7      	b.n	2be26 <connection_handler+0x1e>
   2be76:	bf00      	nop
   2be78:	2001c90b 	.word	0x2001c90b

0002be7c <dc_endpoint_reset>:
};

/* Internal routine to reset data endpoint information. */
static void dc_endpoint_reset(void)
{
	nct.dc_rx_endp.utf8 = NULL;
   2be7c:	2200      	movs	r2, #0
   2be7e:	4b05      	ldr	r3, [pc, #20]	; (2be94 <dc_endpoint_reset+0x18>)
	nct.dc_rx_endp.size = 0;
   2be80:	e9c3 2233 	strd	r2, r2, [r3, #204]	; 0xcc

	nct.dc_tx_endp.utf8 = NULL;
	nct.dc_tx_endp.size = 0;
   2be84:	e9c3 2231 	strd	r2, r2, [r3, #196]	; 0xc4

	nct.dc_m_endp.utf8 = NULL;
	nct.dc_m_endp.size = 0;
   2be88:	e9c3 2235 	strd	r2, r2, [r3, #212]	; 0xd4

	nct.dc_bulk_endp.utf8 = NULL;
	nct.dc_bulk_endp.size = 0;
   2be8c:	e9c3 2237 	strd	r2, r2, [r3, #220]	; 0xdc
}
   2be90:	4770      	bx	lr
   2be92:	bf00      	nop
   2be94:	20019570 	.word	0x20019570

0002be98 <get_message_id>:
	return nct.message_id;
}

static uint16_t get_message_id(const uint16_t requested_id)
{
	if (requested_id != NCT_MSG_ID_USE_NEXT_INCREMENT) {
   2be98:	b968      	cbnz	r0, 2beb6 <get_message_id+0x1e>
	if (nct.message_id < NCT_MSG_ID_INCREMENT_BEGIN ||
   2be9a:	4b09      	ldr	r3, [pc, #36]	; (2bec0 <get_message_id+0x28>)
   2be9c:	f8b3 00e4 	ldrh.w	r0, [r3, #228]	; 0xe4
   2bea0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   2bea4:	d308      	bcc.n	2beb8 <get_message_id+0x20>
   2bea6:	f242 720f 	movw	r2, #9999	; 0x270f
   2beaa:	4290      	cmp	r0, r2
   2beac:	d004      	beq.n	2beb8 <get_message_id+0x20>
		++nct.message_id;
   2beae:	3001      	adds	r0, #1
   2beb0:	b280      	uxth	r0, r0
   2beb2:	f8a3 00e4 	strh.w	r0, [r3, #228]	; 0xe4
		return requested_id;
	}

	return get_next_message_id();
}
   2beb6:	4770      	bx	lr
		nct.message_id = NCT_MSG_ID_INCREMENT_BEGIN;
   2beb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   2bebc:	e7f9      	b.n	2beb2 <get_message_id+0x1a>
   2bebe:	bf00      	nop
   2bec0:	20019570 	.word	0x20019570

0002bec4 <nct_settings_set>:
	return 0;
}

static int nct_settings_set(const char *key, size_t len_rd,
			    settings_read_cb read_cb, void *cb_arg)
{
   2bec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2bec6:	460d      	mov	r5, r1
   2bec8:	4616      	mov	r6, r2
   2beca:	461f      	mov	r7, r3
	if (!key) {
   2becc:	4604      	mov	r4, r0
   2bece:	b1e8      	cbz	r0, 2bf0c <nct_settings_set+0x48>

	int read_val;

	LOG_DBG("Settings key: %s, size: %d", log_strdup(key), len_rd);

	if (!strncmp(key, SETTINGS_KEY_PERSISTENT_SESSION,
   2bed0:	4810      	ldr	r0, [pc, #64]	; (2bf14 <nct_settings_set+0x50>)
   2bed2:	f7f1 f9b6 	bl	1d242 <strlen>
   2bed6:	490f      	ldr	r1, [pc, #60]	; (2bf14 <nct_settings_set+0x50>)
   2bed8:	4602      	mov	r2, r0
   2beda:	4620      	mov	r0, r4
   2bedc:	f015 fc55 	bl	4178a <strncmp>
   2bee0:	4604      	mov	r4, r0
   2bee2:	b120      	cbz	r0, 2beee <nct_settings_set+0x2a>
#endif
			LOG_DBG("Read setting val: %d", read_val);
			return 0;
		}
	}
	return -ENOTSUP;
   2bee4:	f06f 0485 	mvn.w	r4, #133	; 0x85
}
   2bee8:	4620      	mov	r0, r4
   2beea:	b003      	add	sp, #12
   2beec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		     strlen(SETTINGS_KEY_PERSISTENT_SESSION)) &&
   2beee:	2d04      	cmp	r5, #4
   2bef0:	d1f8      	bne.n	2bee4 <nct_settings_set+0x20>
		if (read_cb(cb_arg, (void *)&read_val, len_rd) == len_rd) {
   2bef2:	462a      	mov	r2, r5
   2bef4:	4638      	mov	r0, r7
   2bef6:	a901      	add	r1, sp, #4
   2bef8:	47b0      	blx	r6
   2befa:	2804      	cmp	r0, #4
   2befc:	d1f2      	bne.n	2bee4 <nct_settings_set+0x20>
			persistent_session = (bool)read_val;
   2befe:	9b01      	ldr	r3, [sp, #4]
   2bf00:	4a05      	ldr	r2, [pc, #20]	; (2bf18 <nct_settings_set+0x54>)
   2bf02:	3b00      	subs	r3, #0
   2bf04:	bf18      	it	ne
   2bf06:	2301      	movne	r3, #1
   2bf08:	7013      	strb	r3, [r2, #0]
			return 0;
   2bf0a:	e7ed      	b.n	2bee8 <nct_settings_set+0x24>
		return -EINVAL;
   2bf0c:	f06f 0415 	mvn.w	r4, #21
   2bf10:	e7ea      	b.n	2bee8 <nct_settings_set+0x24>
   2bf12:	bf00      	nop
   2bf14:	000485b4 	.word	0x000485b4
   2bf18:	2001c90d 	.word	0x2001c90d

0002bf1c <nrf_cloud_fota_cb_handler>:
}

#if defined(CONFIG_NRF_CLOUD_FOTA)
static void nrf_cloud_fota_cb_handler(const struct nrf_cloud_fota_evt
				      * const evt)
{
   2bf1c:	b530      	push	{r4, r5, lr}
	switch (evt->id) {
   2bf1e:	7804      	ldrb	r4, [r0, #0]
{
   2bf20:	4605      	mov	r5, r0
	switch (evt->id) {
   2bf22:	2c01      	cmp	r4, #1
{
   2bf24:	b089      	sub	sp, #36	; 0x24
	switch (evt->id) {
   2bf26:	d00b      	beq.n	2bf40 <nrf_cloud_fota_cb_handler+0x24>
   2bf28:	2c02      	cmp	r4, #2
   2bf2a:	d01d      	beq.n	2bf68 <nrf_cloud_fota_cb_handler+0x4c>
   2bf2c:	b9d4      	cbnz	r4, 2bf64 <nrf_cloud_fota_cb_handler+0x48>
	case NRF_CLOUD_FOTA_EVT_START: {
		LOG_DBG("NRF_CLOUD_FOTA_EVT_START");
		struct nrf_cloud_evt cloud_evt = {
   2bf2e:	2218      	movs	r2, #24
   2bf30:	4621      	mov	r1, r4
   2bf32:	a802      	add	r0, sp, #8
   2bf34:	f015 fa56 	bl	413e4 <memset>
   2bf38:	230a      	movs	r3, #10
		nct_apply_update(&cloud_evt);
		break;
	}
	case NRF_CLOUD_FOTA_EVT_ERROR: {
		LOG_ERR("NRF_CLOUD_FOTA_EVT_ERROR");
		struct nrf_cloud_evt cloud_evt = {
   2bf3a:	f88d 3008 	strb.w	r3, [sp, #8]
   2bf3e:	e00e      	b.n	2bf5e <nrf_cloud_fota_cb_handler+0x42>
		struct nrf_cloud_evt cloud_evt = {
   2bf40:	2218      	movs	r2, #24
   2bf42:	2100      	movs	r1, #0
   2bf44:	a802      	add	r0, sp, #8
   2bf46:	f015 fa4d 	bl	413e4 <memset>
   2bf4a:	230b      	movs	r3, #11
   2bf4c:	f88d 3008 	strb.w	r3, [sp, #8]
			fota_type = evt->type;
   2bf50:	78ab      	ldrb	r3, [r5, #2]
   2bf52:	f88d 3007 	strb.w	r3, [sp, #7]
			cloud_evt.data.ptr = &fota_type;
   2bf56:	f10d 0307 	add.w	r3, sp, #7
			cloud_evt.data.len = sizeof(fota_type);
   2bf5a:	e9cd 4304 	strd	r4, r3, [sp, #16]
			.type = NRF_CLOUD_EVT_FOTA_ERROR
		};

		nct_apply_update(&cloud_evt);
   2bf5e:	a802      	add	r0, sp, #8
   2bf60:	f7ff fd3a 	bl	2b9d8 <nct_apply_update>
	}
	default: {
		break;
	}
	}
}
   2bf64:	b009      	add	sp, #36	; 0x24
   2bf66:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("NRF_CLOUD_FOTA_EVT_ERROR");
   2bf68:	2145      	movs	r1, #69	; 0x45
   2bf6a:	4805      	ldr	r0, [pc, #20]	; (2bf80 <nrf_cloud_fota_cb_handler+0x64>)
   2bf6c:	f010 fda0 	bl	3cab0 <z_log_minimal_printk>
		struct nrf_cloud_evt cloud_evt = {
   2bf70:	2218      	movs	r2, #24
   2bf72:	2100      	movs	r1, #0
   2bf74:	a802      	add	r0, sp, #8
   2bf76:	f015 fa35 	bl	413e4 <memset>
   2bf7a:	230c      	movs	r3, #12
   2bf7c:	e7dd      	b.n	2bf3a <nrf_cloud_fota_cb_handler+0x1e>
   2bf7e:	bf00      	nop
   2bf80:	00048512 	.word	0x00048512

0002bf84 <allocate_and_format_topic>:
{
   2bf84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const size_t client_sz = strlen(client_id_buf);
   2bf86:	4f13      	ldr	r7, [pc, #76]	; (2bfd4 <allocate_and_format_topic+0x50>)
{
   2bf88:	4605      	mov	r5, r0
	const size_t client_sz = strlen(client_id_buf);
   2bf8a:	6838      	ldr	r0, [r7, #0]
{
   2bf8c:	460e      	mov	r6, r1
	const size_t client_sz = strlen(client_id_buf);
   2bf8e:	f7f1 f958 	bl	1d242 <strlen>
   2bf92:	4604      	mov	r4, r0
	topic_sz = client_sz + strlen(topic_template) - 1;
   2bf94:	4630      	mov	r0, r6
   2bf96:	f7f1 f954 	bl	1d242 <strlen>
   2bf9a:	4404      	add	r4, r0
   2bf9c:	3c01      	subs	r4, #1
	*topic_buf = nrf_cloud_calloc(topic_sz, 1);
   2bf9e:	2101      	movs	r1, #1
   2bfa0:	4620      	mov	r0, r4
   2bfa2:	f015 f979 	bl	41298 <k_calloc>
   2bfa6:	6028      	str	r0, [r5, #0]
	if (!*topic_buf) {
   2bfa8:	b170      	cbz	r0, 2bfc8 <allocate_and_format_topic+0x44>
	ret = snprintk(*topic_buf, topic_sz,
   2bfaa:	4632      	mov	r2, r6
   2bfac:	4621      	mov	r1, r4
   2bfae:	683b      	ldr	r3, [r7, #0]
   2bfb0:	f010 fb6e 	bl	3c690 <snprintk>
	if (ret <= 0 || ret >= topic_sz) {
   2bfb4:	2800      	cmp	r0, #0
   2bfb6:	dd01      	ble.n	2bfbc <allocate_and_format_topic+0x38>
   2bfb8:	42a0      	cmp	r0, r4
   2bfba:	d308      	bcc.n	2bfce <allocate_and_format_topic+0x4a>
		nrf_cloud_free(*topic_buf);
   2bfbc:	6828      	ldr	r0, [r5, #0]
   2bfbe:	f015 f960 	bl	41282 <k_free>
		return -EIO;
   2bfc2:	f06f 0004 	mvn.w	r0, #4
}
   2bfc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOMEM;
   2bfc8:	f06f 000b 	mvn.w	r0, #11
   2bfcc:	e7fb      	b.n	2bfc6 <allocate_and_format_topic+0x42>
	return 0;
   2bfce:	2000      	movs	r0, #0
   2bfd0:	e7f9      	b.n	2bfc6 <allocate_and_format_topic+0x42>
   2bfd2:	bf00      	nop
   2bfd4:	2001956c 	.word	0x2001956c

0002bfd8 <nct_reset_topics>:
{
   2bfd8:	b510      	push	{r4, lr}
	if (accepted_topic) {
   2bfda:	4c17      	ldr	r4, [pc, #92]	; (2c038 <nct_reset_topics+0x60>)
   2bfdc:	6820      	ldr	r0, [r4, #0]
   2bfde:	b118      	cbz	r0, 2bfe8 <nct_reset_topics+0x10>
		nrf_cloud_free(accepted_topic);
   2bfe0:	f015 f94f 	bl	41282 <k_free>
		accepted_topic = NULL;
   2bfe4:	2300      	movs	r3, #0
   2bfe6:	6023      	str	r3, [r4, #0]
	if (rejected_topic) {
   2bfe8:	4c14      	ldr	r4, [pc, #80]	; (2c03c <nct_reset_topics+0x64>)
   2bfea:	6820      	ldr	r0, [r4, #0]
   2bfec:	b118      	cbz	r0, 2bff6 <nct_reset_topics+0x1e>
		nrf_cloud_free(rejected_topic);
   2bfee:	f015 f948 	bl	41282 <k_free>
		rejected_topic = NULL;
   2bff2:	2300      	movs	r3, #0
   2bff4:	6023      	str	r3, [r4, #0]
	if (update_delta_topic) {
   2bff6:	4c12      	ldr	r4, [pc, #72]	; (2c040 <nct_reset_topics+0x68>)
   2bff8:	6820      	ldr	r0, [r4, #0]
   2bffa:	b118      	cbz	r0, 2c004 <nct_reset_topics+0x2c>
		nrf_cloud_free(update_delta_topic);
   2bffc:	f015 f941 	bl	41282 <k_free>
		update_delta_topic = NULL;
   2c000:	2300      	movs	r3, #0
   2c002:	6023      	str	r3, [r4, #0]
	if (update_topic) {
   2c004:	4c0f      	ldr	r4, [pc, #60]	; (2c044 <nct_reset_topics+0x6c>)
   2c006:	6820      	ldr	r0, [r4, #0]
   2c008:	b118      	cbz	r0, 2c012 <nct_reset_topics+0x3a>
		nrf_cloud_free(update_topic);
   2c00a:	f015 f93a 	bl	41282 <k_free>
		update_topic = NULL;
   2c00e:	2300      	movs	r3, #0
   2c010:	6023      	str	r3, [r4, #0]
	if (shadow_get_topic) {
   2c012:	4c0d      	ldr	r4, [pc, #52]	; (2c048 <nct_reset_topics+0x70>)
   2c014:	6820      	ldr	r0, [r4, #0]
   2c016:	b118      	cbz	r0, 2c020 <nct_reset_topics+0x48>
		nrf_cloud_free(shadow_get_topic);
   2c018:	f015 f933 	bl	41282 <k_free>
		shadow_get_topic = NULL;
   2c01c:	2300      	movs	r3, #0
   2c01e:	6023      	str	r3, [r4, #0]
	memset(nct_cc_rx_list, 0, sizeof(nct_cc_rx_list[0]) * CC_RX_LIST_CNT);
   2c020:	2224      	movs	r2, #36	; 0x24
   2c022:	2100      	movs	r1, #0
   2c024:	4809      	ldr	r0, [pc, #36]	; (2c04c <nct_reset_topics+0x74>)
   2c026:	f015 f9dd 	bl	413e4 <memset>
}
   2c02a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(nct_cc_tx_list, 0, sizeof(nct_cc_tx_list[0]) * CC_TX_LIST_CNT);
   2c02e:	2218      	movs	r2, #24
   2c030:	2100      	movs	r1, #0
   2c032:	4807      	ldr	r0, [pc, #28]	; (2c050 <nct_reset_topics+0x78>)
   2c034:	f015 b9d6 	b.w	413e4 <memset>
   2c038:	20019568 	.word	0x20019568
   2c03c:	2001a0f4 	.word	0x2001a0f4
   2c040:	2001a0fc 	.word	0x2001a0fc
   2c044:	2001a100 	.word	0x2001a100
   2c048:	2001a0f8 	.word	0x2001a0f8
   2c04c:	2001a0b8 	.word	0x2001a0b8
   2c050:	2001a0dc 	.word	0x2001a0dc

0002c054 <dc_endpoint_free>:
{
   2c054:	b510      	push	{r4, lr}
	if (nct.dc_rx_endp.utf8 != NULL) {
   2c056:	4c0d      	ldr	r4, [pc, #52]	; (2c08c <dc_endpoint_free+0x38>)
   2c058:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   2c05c:	b108      	cbz	r0, 2c062 <dc_endpoint_free+0xe>
		nrf_cloud_free((void *)nct.dc_rx_endp.utf8);
   2c05e:	f015 f910 	bl	41282 <k_free>
	if (nct.dc_tx_endp.utf8 != NULL) {
   2c062:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
   2c066:	b108      	cbz	r0, 2c06c <dc_endpoint_free+0x18>
		nrf_cloud_free((void *)nct.dc_tx_endp.utf8);
   2c068:	f015 f90b 	bl	41282 <k_free>
	if (nct.dc_m_endp.utf8 != NULL) {
   2c06c:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   2c070:	b108      	cbz	r0, 2c076 <dc_endpoint_free+0x22>
		nrf_cloud_free((void *)nct.dc_m_endp.utf8);
   2c072:	f015 f906 	bl	41282 <k_free>
	if (nct.dc_bulk_endp.utf8 != NULL) {
   2c076:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
   2c07a:	b108      	cbz	r0, 2c080 <dc_endpoint_free+0x2c>
		nrf_cloud_free((void *)nct.dc_bulk_endp.utf8);
   2c07c:	f015 f901 	bl	41282 <k_free>
	dc_endpoint_reset();
   2c080:	f7ff fefc 	bl	2be7c <dc_endpoint_reset>
}
   2c084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	nrf_cloud_fota_endpoint_clear();
   2c088:	f003 bb3e 	b.w	2f708 <nrf_cloud_fota_endpoint_clear>
   2c08c:	20019570 	.word	0x20019570

0002c090 <dc_send>:
{
   2c090:	b530      	push	{r4, r5, lr}
   2c092:	460d      	mov	r5, r1
	if (dc_data == NULL) {
   2c094:	4604      	mov	r4, r0
{
   2c096:	b087      	sub	sp, #28
	if (dc_data == NULL) {
   2c098:	b1f8      	cbz	r0, 2c0da <dc_send+0x4a>
	struct mqtt_publish_param publish = {
   2c09a:	2210      	movs	r2, #16
   2c09c:	2100      	movs	r1, #0
   2c09e:	a802      	add	r0, sp, #8
   2c0a0:	f015 f9a0 	bl	413e4 <memset>
		.message.topic.topic.utf8 = nct.dc_tx_endp.utf8,
   2c0a4:	4b0e      	ldr	r3, [pc, #56]	; (2c0e0 <dc_send+0x50>)
	struct mqtt_publish_param publish = {
   2c0a6:	f88d 5008 	strb.w	r5, [sp, #8]
   2c0aa:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
   2c0ae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   2c0b2:	9200      	str	r2, [sp, #0]
   2c0b4:	9301      	str	r3, [sp, #4]
	if ((dc_data->data.len != 0) && (dc_data->data.ptr != NULL)) {
   2c0b6:	6823      	ldr	r3, [r4, #0]
   2c0b8:	b11b      	cbz	r3, 2c0c2 <dc_send+0x32>
   2c0ba:	6862      	ldr	r2, [r4, #4]
   2c0bc:	b10a      	cbz	r2, 2c0c2 <dc_send+0x32>
		publish.message.payload.len = dc_data->data.len;
   2c0be:	e9cd 2303 	strd	r2, r3, [sp, #12]
	if (qos != MQTT_QOS_0_AT_MOST_ONCE) {
   2c0c2:	b125      	cbz	r5, 2c0ce <dc_send+0x3e>
		publish.message_id = get_message_id(dc_data->message_id);
   2c0c4:	8a20      	ldrh	r0, [r4, #16]
   2c0c6:	f7ff fee7 	bl	2be98 <get_message_id>
   2c0ca:	f8ad 0014 	strh.w	r0, [sp, #20]
	return mqtt_publish(&nct.client, &publish);
   2c0ce:	4669      	mov	r1, sp
   2c0d0:	4804      	ldr	r0, [pc, #16]	; (2c0e4 <dc_send+0x54>)
   2c0d2:	f012 f89d 	bl	3e210 <mqtt_publish>
}
   2c0d6:	b007      	add	sp, #28
   2c0d8:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2c0da:	f06f 0015 	mvn.w	r0, #21
   2c0de:	e7fa      	b.n	2c0d6 <dc_send+0x46>
   2c0e0:	20019570 	.word	0x20019570
   2c0e4:	20019594 	.word	0x20019594

0002c0e8 <nct_set_topic_prefix>:
{
   2c0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *end_of_stage = strchr(topic_prefix, '/');
   2c0ea:	212f      	movs	r1, #47	; 0x2f
{
   2c0ec:	4604      	mov	r4, r0
	char *end_of_stage = strchr(topic_prefix, '/');
   2c0ee:	f015 fb37 	bl	41760 <strchr>
	if (end_of_stage) {
   2c0f2:	4606      	mov	r6, r0
   2c0f4:	b348      	cbz	r0, 2c14a <nct_set_topic_prefix+0x62>
		len = end_of_stage - topic_prefix;
   2c0f6:	1b05      	subs	r5, r0, r4
		if (len >= sizeof(stage)) {
   2c0f8:	2d07      	cmp	r5, #7
   2c0fa:	d906      	bls.n	2c10a <nct_set_topic_prefix+0x22>
			LOG_WRN("Truncating copy of stage string length "
   2c0fc:	462a      	mov	r2, r5
   2c0fe:	2308      	movs	r3, #8
   2c100:	2157      	movs	r1, #87	; 0x57
   2c102:	4812      	ldr	r0, [pc, #72]	; (2c14c <nct_set_topic_prefix+0x64>)
   2c104:	f010 fcd4 	bl	3cab0 <z_log_minimal_printk>
			len = sizeof(stage) - 1;
   2c108:	2507      	movs	r5, #7
		memcpy(stage, topic_prefix, len);
   2c10a:	4f11      	ldr	r7, [pc, #68]	; (2c150 <nct_set_topic_prefix+0x68>)
   2c10c:	4621      	mov	r1, r4
   2c10e:	2308      	movs	r3, #8
   2c110:	462a      	mov	r2, r5
   2c112:	4638      	mov	r0, r7
   2c114:	f015 f953 	bl	413be <__memcpy_chk>
		stage[len] = '\0';
   2c118:	2300      	movs	r3, #0
		len = strlen(topic_prefix) - len - 2; /* skip both / */
   2c11a:	4620      	mov	r0, r4
		stage[len] = '\0';
   2c11c:	557b      	strb	r3, [r7, r5]
		len = strlen(topic_prefix) - len - 2; /* skip both / */
   2c11e:	f7f1 f890 	bl	1d242 <strlen>
   2c122:	1e84      	subs	r4, r0, #2
   2c124:	1b64      	subs	r4, r4, r5
		if (len >= sizeof(tenant)) {
   2c126:	2c3f      	cmp	r4, #63	; 0x3f
   2c128:	d906      	bls.n	2c138 <nct_set_topic_prefix+0x50>
			LOG_WRN("Truncating copy of tenant id string length "
   2c12a:	4622      	mov	r2, r4
   2c12c:	2340      	movs	r3, #64	; 0x40
   2c12e:	2157      	movs	r1, #87	; 0x57
   2c130:	4808      	ldr	r0, [pc, #32]	; (2c154 <nct_set_topic_prefix+0x6c>)
   2c132:	f010 fcbd 	bl	3cab0 <z_log_minimal_printk>
			len = sizeof(tenant) - 1;
   2c136:	243f      	movs	r4, #63	; 0x3f
		memcpy(tenant, end_of_stage + 1, len);
   2c138:	4d07      	ldr	r5, [pc, #28]	; (2c158 <nct_set_topic_prefix+0x70>)
   2c13a:	2340      	movs	r3, #64	; 0x40
   2c13c:	4622      	mov	r2, r4
   2c13e:	4628      	mov	r0, r5
   2c140:	1c71      	adds	r1, r6, #1
   2c142:	f015 f93c 	bl	413be <__memcpy_chk>
		tenant[len] = '\0';
   2c146:	2300      	movs	r3, #0
   2c148:	552b      	strb	r3, [r5, r4]
}
   2c14a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2c14c:	00048530 	.word	0x00048530
   2c150:	2001c90e 	.word	0x2001c90e
   2c154:	0004856b 	.word	0x0004856b
   2c158:	2001c916 	.word	0x2001c916

0002c15c <nct_save_session_state>:
{
   2c15c:	b507      	push	{r0, r1, r2, lr}
   2c15e:	9001      	str	r0, [sp, #4]
	persistent_session = (bool)session_valid;
   2c160:	3800      	subs	r0, #0
   2c162:	bf18      	it	ne
   2c164:	2001      	movne	r0, #1
	ret = settings_save_one(SETTINGS_FULL_PERSISTENT_SESSION,
   2c166:	2204      	movs	r2, #4
	persistent_session = (bool)session_valid;
   2c168:	4b04      	ldr	r3, [pc, #16]	; (2c17c <nct_save_session_state+0x20>)
	ret = settings_save_one(SETTINGS_FULL_PERSISTENT_SESSION,
   2c16a:	eb0d 0102 	add.w	r1, sp, r2
	persistent_session = (bool)session_valid;
   2c16e:	7018      	strb	r0, [r3, #0]
	ret = settings_save_one(SETTINGS_FULL_PERSISTENT_SESSION,
   2c170:	4803      	ldr	r0, [pc, #12]	; (2c180 <nct_save_session_state+0x24>)
   2c172:	f7f5 feb3 	bl	21edc <settings_save_one>
}
   2c176:	b003      	add	sp, #12
   2c178:	f85d fb04 	ldr.w	pc, [sp], #4
   2c17c:	2001c90d 	.word	0x2001c90d
   2c180:	000485aa 	.word	0x000485aa

0002c184 <nct_mqtt_evt_handler>:
/* Handle MQTT events. */
static void nct_mqtt_evt_handler(struct mqtt_client *const mqtt_client,
				 const struct mqtt_evt *_mqtt_evt)
{
	int err;
	struct nct_evt evt = { .status = _mqtt_evt->result };
   2c184:	2300      	movs	r3, #0
{
   2c186:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c188:	b08f      	sub	sp, #60	; 0x3c
	struct nct_evt evt = { .status = _mqtt_evt->result };
   2c18a:	e9cd 3302 	strd	r3, r3, [sp, #8]
   2c18e:	69cb      	ldr	r3, [r1, #28]
{
   2c190:	4606      	mov	r6, r0
	struct nct_cc_data cc;
	struct nct_dc_data dc;
	bool event_notify = false;

#if defined(CONFIG_NRF_CLOUD_FOTA)
	err = nrf_cloud_fota_mqtt_evt_handler(_mqtt_evt);
   2c192:	4608      	mov	r0, r1
{
   2c194:	460c      	mov	r4, r1
	struct nct_evt evt = { .status = _mqtt_evt->result };
   2c196:	9301      	str	r3, [sp, #4]
	err = nrf_cloud_fota_mqtt_evt_handler(_mqtt_evt);
   2c198:	f003 fb38 	bl	2f80c <nrf_cloud_fota_mqtt_evt_handler>
	if (err == 0) {
   2c19c:	1e02      	subs	r2, r0, #0
   2c19e:	d033      	beq.n	2c208 <nct_mqtt_evt_handler+0x84>
		return;
	} else if (err < 0) {
   2c1a0:	da04      	bge.n	2c1ac <nct_mqtt_evt_handler+0x28>
		LOG_ERR("nrf_cloud_fota_mqtt_evt_handler: Failed! %d", err);
   2c1a2:	2145      	movs	r1, #69	; 0x45
   2c1a4:	485a      	ldr	r0, [pc, #360]	; (2c310 <nct_mqtt_evt_handler+0x18c>)

	if (event_notify) {
		err = nct_input(&evt);

		if (err != 0) {
			LOG_ERR("nct_input: failed %d", err);
   2c1a6:	f010 fc83 	bl	3cab0 <z_log_minimal_printk>
   2c1aa:	e02d      	b.n	2c208 <nct_mqtt_evt_handler+0x84>
	switch (_mqtt_evt->type) {
   2c1ac:	7823      	ldrb	r3, [r4, #0]
   2c1ae:	2b09      	cmp	r3, #9
   2c1b0:	d82a      	bhi.n	2c208 <nct_mqtt_evt_handler+0x84>
   2c1b2:	e8df f003 	tbb	[pc, r3]
   2c1b6:	9305      	.short	0x9305
   2c1b8:	29298a16 	.word	0x29298a16
   2c1bc:	91858029 	.word	0x91858029
		evt.param.flag = (p->session_present_flag != 0) &&
   2c1c0:	4b54      	ldr	r3, [pc, #336]	; (2c314 <nct_mqtt_evt_handler+0x190>)
   2c1c2:	7920      	ldrb	r0, [r4, #4]
   2c1c4:	781b      	ldrb	r3, [r3, #0]
   2c1c6:	2800      	cmp	r0, #0
   2c1c8:	bf14      	ite	ne
   2c1ca:	461a      	movne	r2, r3
   2c1cc:	2200      	moveq	r2, #0
   2c1ce:	f88d 2008 	strb.w	r2, [sp, #8]
		if (persistent_session && (p->session_present_flag == 0)) {
   2c1d2:	b113      	cbz	r3, 2c1da <nct_mqtt_evt_handler+0x56>
   2c1d4:	b908      	cbnz	r0, 2c1da <nct_mqtt_evt_handler+0x56>
			nct_save_session_state(0);
   2c1d6:	f7ff ffc1 	bl	2c15c <nct_save_session_state>
		evt.type = NCT_EVT_CONNECTED;
   2c1da:	2300      	movs	r3, #0
		evt.type = NCT_EVT_DISCONNECTED;
   2c1dc:	f88d 300c 	strb.w	r3, [sp, #12]
	if (event_notify) {
   2c1e0:	e04b      	b.n	2c27a <nct_mqtt_evt_handler+0xf6>
		int err = publish_get_payload(mqtt_client,
   2c1e2:	6967      	ldr	r7, [r4, #20]
	if (length > (sizeof(nct.payload_buf) - 1)) {
   2c1e4:	f5b7 6f06 	cmp.w	r7, #2144	; 0x860
   2c1e8:	d910      	bls.n	2c20c <nct_mqtt_evt_handler+0x88>
		LOG_ERR("Length specified:%zd larger than payload_buf:%zd",
   2c1ea:	463a      	mov	r2, r7
   2c1ec:	f640 0361 	movw	r3, #2145	; 0x861
   2c1f0:	2145      	movs	r1, #69	; 0x45
   2c1f2:	4849      	ldr	r0, [pc, #292]	; (2c318 <nct_mqtt_evt_handler+0x194>)
   2c1f4:	f010 fc5c 	bl	3cab0 <z_log_minimal_printk>
		return -EMSGSIZE;
   2c1f8:	f06f 0279 	mvn.w	r2, #121	; 0x79
			LOG_ERR("publish_get_payload: failed %d", err);
   2c1fc:	2145      	movs	r1, #69	; 0x45
   2c1fe:	4847      	ldr	r0, [pc, #284]	; (2c31c <nct_mqtt_evt_handler+0x198>)
   2c200:	f010 fc56 	bl	3cab0 <z_log_minimal_printk>
			nrf_cloud_disconnect();
   2c204:	f7ff fa9c 	bl	2b740 <nrf_cloud_disconnect>
		}
	}
}
   2c208:	b00f      	add	sp, #60	; 0x3c
   2c20a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int ret = mqtt_readall_publish_payload(client, nct.payload_buf, length);
   2c20c:	4d44      	ldr	r5, [pc, #272]	; (2c320 <nct_mqtt_evt_handler+0x19c>)
   2c20e:	463a      	mov	r2, r7
   2c210:	f205 21e6 	addw	r1, r5, #742	; 0x2e6
   2c214:	4630      	mov	r0, r6
   2c216:	f012 f965 	bl	3e4e4 <mqtt_readall_publish_payload>
	nct.payload_buf[length] = 0;
   2c21a:	19ea      	adds	r2, r5, r7
   2c21c:	2500      	movs	r5, #0
   2c21e:	f882 52e6 	strb.w	r5, [r2, #742]	; 0x2e6
		if (err < 0) {
   2c222:	1e02      	subs	r2, r0, #0
   2c224:	dbea      	blt.n	2c1fc <nct_mqtt_evt_handler+0x78>
   2c226:	4f3f      	ldr	r7, [pc, #252]	; (2c324 <nct_mqtt_evt_handler+0x1a0>)
	return (strncmp(s1, s2, MIN(s1_len, s2_len))) ? false : true;
   2c228:	68a2      	ldr	r2, [r4, #8]
   2c22a:	687b      	ldr	r3, [r7, #4]
   2c22c:	6839      	ldr	r1, [r7, #0]
   2c22e:	429a      	cmp	r2, r3
   2c230:	bf28      	it	cs
   2c232:	461a      	movcs	r2, r3
   2c234:	6860      	ldr	r0, [r4, #4]
   2c236:	f015 faa8 	bl	4178a <strncmp>
		if (strings_compare(
   2c23a:	bb38      	cbnz	r0, 2c28c <nct_mqtt_evt_handler+0x108>
			*opcode = nct_cc_rx_opcode_map[index];
   2c23c:	4b3a      	ldr	r3, [pc, #232]	; (2c328 <nct_mqtt_evt_handler+0x1a4>)
   2c23e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   2c242:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			cc.message_id = p->message_id;
   2c246:	8b23      	ldrh	r3, [r4, #24]
   2c248:	f8ad 3020 	strh.w	r3, [sp, #32]
			cc.data.ptr = nct.payload_buf;
   2c24c:	4b37      	ldr	r3, [pc, #220]	; (2c32c <nct_mqtt_evt_handler+0x1a8>)
   2c24e:	9305      	str	r3, [sp, #20]
			cc.data.len = p->message.payload.len;
   2c250:	6963      	ldr	r3, [r4, #20]
   2c252:	9304      	str	r3, [sp, #16]
			cc.topic.len = p->message.topic.topic.size;
   2c254:	68a3      	ldr	r3, [r4, #8]
   2c256:	9306      	str	r3, [sp, #24]
			cc.topic.ptr = p->message.topic.topic.utf8;
   2c258:	6863      	ldr	r3, [r4, #4]
   2c25a:	9307      	str	r3, [sp, #28]
			evt.type = NCT_EVT_CC_RX_DATA;
   2c25c:	2303      	movs	r3, #3
   2c25e:	f88d 300c 	strb.w	r3, [sp, #12]
			evt.param.cc = &cc;
   2c262:	ab04      	add	r3, sp, #16
			evt.param.dc = &dc;
   2c264:	9302      	str	r3, [sp, #8]
		if (p->message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   2c266:	7b23      	ldrb	r3, [r4, #12]
   2c268:	2b01      	cmp	r3, #1
   2c26a:	d106      	bne.n	2c27a <nct_mqtt_evt_handler+0xf6>
			const struct mqtt_puback_param ack = {
   2c26c:	8b23      	ldrh	r3, [r4, #24]
			mqtt_publish_qos1_ack(mqtt_client, &ack);
   2c26e:	4669      	mov	r1, sp
   2c270:	4630      	mov	r0, r6
			const struct mqtt_puback_param ack = {
   2c272:	f8ad 3000 	strh.w	r3, [sp]
			mqtt_publish_qos1_ack(mqtt_client, &ack);
   2c276:	f012 f80f 	bl	3e298 <mqtt_publish_qos1_ack>
		err = nct_input(&evt);
   2c27a:	a801      	add	r0, sp, #4
   2c27c:	f7ff fba6 	bl	2b9cc <nct_input>
		if (err != 0) {
   2c280:	4602      	mov	r2, r0
   2c282:	2800      	cmp	r0, #0
   2c284:	d0c0      	beq.n	2c208 <nct_mqtt_evt_handler+0x84>
			LOG_ERR("nct_input: failed %d", err);
   2c286:	2145      	movs	r1, #69	; 0x45
   2c288:	4829      	ldr	r0, [pc, #164]	; (2c330 <nct_mqtt_evt_handler+0x1ac>)
   2c28a:	e78c      	b.n	2c1a6 <nct_mqtt_evt_handler+0x22>
	for (uint32_t index = 0; index < list_size; index++) {
   2c28c:	3501      	adds	r5, #1
   2c28e:	2d03      	cmp	r5, #3
   2c290:	f107 070c 	add.w	r7, r7, #12
   2c294:	d1c8      	bne.n	2c228 <nct_mqtt_evt_handler+0xa4>
			dc.message_id = p->message_id;
   2c296:	8b23      	ldrh	r3, [r4, #24]
   2c298:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
			dc.data.ptr = nct.payload_buf;
   2c29c:	4b23      	ldr	r3, [pc, #140]	; (2c32c <nct_mqtt_evt_handler+0x1a8>)
   2c29e:	930a      	str	r3, [sp, #40]	; 0x28
			dc.data.len = p->message.payload.len;
   2c2a0:	6963      	ldr	r3, [r4, #20]
   2c2a2:	9309      	str	r3, [sp, #36]	; 0x24
			dc.topic.len = p->message.topic.topic.size;
   2c2a4:	68a3      	ldr	r3, [r4, #8]
   2c2a6:	930b      	str	r3, [sp, #44]	; 0x2c
			dc.topic.ptr = p->message.topic.topic.utf8;
   2c2a8:	6863      	ldr	r3, [r4, #4]
   2c2aa:	930c      	str	r3, [sp, #48]	; 0x30
			evt.type = NCT_EVT_DC_RX_DATA;
   2c2ac:	2306      	movs	r3, #6
   2c2ae:	f88d 300c 	strb.w	r3, [sp, #12]
			evt.param.dc = &dc;
   2c2b2:	ab09      	add	r3, sp, #36	; 0x24
   2c2b4:	e7d6      	b.n	2c264 <nct_mqtt_evt_handler+0xe0>
		if (_mqtt_evt->param.suback.message_id == NCT_MSG_ID_CC_SUB) {
   2c2b6:	88a3      	ldrh	r3, [r4, #4]
   2c2b8:	2b64      	cmp	r3, #100	; 0x64
   2c2ba:	d111      	bne.n	2c2e0 <nct_mqtt_evt_handler+0x15c>
			evt.type = NCT_EVT_CC_CONNECTED;
   2c2bc:	2301      	movs	r3, #1
   2c2be:	e78d      	b.n	2c1dc <nct_mqtt_evt_handler+0x58>
		if (_mqtt_evt->param.suback.message_id == NCT_MSG_ID_CC_UNSUB) {
   2c2c0:	88a3      	ldrh	r3, [r4, #4]
   2c2c2:	2b96      	cmp	r3, #150	; 0x96
   2c2c4:	d1a0      	bne.n	2c208 <nct_mqtt_evt_handler+0x84>
			evt.type = NCT_EVT_CC_DISCONNECTED;
   2c2c6:	2308      	movs	r3, #8
   2c2c8:	e788      	b.n	2c1dc <nct_mqtt_evt_handler+0x58>
		evt.type = NCT_EVT_CC_TX_DATA_ACK;
   2c2ca:	2304      	movs	r3, #4
   2c2cc:	f88d 300c 	strb.w	r3, [sp, #12]
		evt.param.message_id = _mqtt_evt->param.puback.message_id;
   2c2d0:	88a3      	ldrh	r3, [r4, #4]
   2c2d2:	f8ad 3008 	strh.w	r3, [sp, #8]
	if (event_notify) {
   2c2d6:	e7d0      	b.n	2c27a <nct_mqtt_evt_handler+0xf6>
		evt.type = NCT_EVT_PINGRESP;
   2c2d8:	2305      	movs	r3, #5
   2c2da:	e77f      	b.n	2c1dc <nct_mqtt_evt_handler+0x58>
		evt.type = NCT_EVT_DISCONNECTED;
   2c2dc:	230a      	movs	r3, #10
   2c2de:	e77d      	b.n	2c1dc <nct_mqtt_evt_handler+0x58>
		if (_mqtt_evt->param.suback.message_id == NCT_MSG_ID_DC_SUB) {
   2c2e0:	2b65      	cmp	r3, #101	; 0x65
   2c2e2:	d191      	bne.n	2c208 <nct_mqtt_evt_handler+0x84>
			evt.type = NCT_EVT_DC_CONNECTED;
   2c2e4:	2302      	movs	r3, #2
			err = nct_save_session_state(1);
   2c2e6:	2001      	movs	r0, #1
			evt.type = NCT_EVT_DC_CONNECTED;
   2c2e8:	f88d 300c 	strb.w	r3, [sp, #12]
			err = nct_save_session_state(1);
   2c2ec:	f7ff ff36 	bl	2c15c <nct_save_session_state>
			if (err) {
   2c2f0:	4602      	mov	r2, r0
   2c2f2:	b118      	cbz	r0, 2c2fc <nct_mqtt_evt_handler+0x178>
				LOG_ERR("Failed to save session state: %d",
   2c2f4:	2145      	movs	r1, #69	; 0x45
   2c2f6:	480f      	ldr	r0, [pc, #60]	; (2c334 <nct_mqtt_evt_handler+0x1b0>)
   2c2f8:	f010 fbda 	bl	3cab0 <z_log_minimal_printk>
			err = nrf_cloud_fota_subscribe();
   2c2fc:	f003 fa0c 	bl	2f718 <nrf_cloud_fota_subscribe>
			if (err) {
   2c300:	4602      	mov	r2, r0
   2c302:	2800      	cmp	r0, #0
   2c304:	d0b9      	beq.n	2c27a <nct_mqtt_evt_handler+0xf6>
				LOG_ERR("FOTA MQTT subscribe failed: %d", err);
   2c306:	2145      	movs	r1, #69	; 0x45
   2c308:	480b      	ldr	r0, [pc, #44]	; (2c338 <nct_mqtt_evt_handler+0x1b4>)
   2c30a:	f010 fbd1 	bl	3cab0 <z_log_minimal_printk>
	if (event_notify) {
   2c30e:	e7b4      	b.n	2c27a <nct_mqtt_evt_handler+0xf6>
   2c310:	000485bb 	.word	0x000485bb
   2c314:	2001c90d 	.word	0x2001c90d
   2c318:	000485ec 	.word	0x000485ec
   2c31c:	00048622 	.word	0x00048622
   2c320:	20019570 	.word	0x20019570
   2c324:	2001a0b8 	.word	0x2001a0b8
   2c328:	00043070 	.word	0x00043070
   2c32c:	20019856 	.word	0x20019856
   2c330:	00048690 	.word	0x00048690
   2c334:	00048646 	.word	0x00048646
   2c338:	0004866c 	.word	0x0004866c

0002c33c <nct_mqtt_connect>:
{
   2c33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!mqtt_client_initialized) {
   2c33e:	4e22      	ldr	r6, [pc, #136]	; (2c3c8 <nct_mqtt_connect+0x8c>)
   2c340:	7835      	ldrb	r5, [r6, #0]
   2c342:	2d00      	cmp	r5, #0
   2c344:	d13b      	bne.n	2c3be <nct_mqtt_connect+0x82>
		mqtt_client_init(&nct.client);
   2c346:	4c21      	ldr	r4, [pc, #132]	; (2c3cc <nct_mqtt_connect+0x90>)
		nct.client.transport.type = MQTT_TRANSPORT_SECURE;
   2c348:	2701      	movs	r7, #1
		mqtt_client_init(&nct.client);
   2c34a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   2c34e:	f011 ff06 	bl	3e15e <mqtt_client_init>
		nct.client.broker = (struct sockaddr *)&nct.broker;
   2c352:	f104 03ac 	add.w	r3, r4, #172	; 0xac
   2c356:	67e3      	str	r3, [r4, #124]	; 0x7c
		nct.client.evt_cb = nct_mqtt_evt_handler;
   2c358:	4b1d      	ldr	r3, [pc, #116]	; (2c3d0 <nct_mqtt_connect+0x94>)
   2c35a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		nct.client.client_id.utf8 = (uint8_t *)client_id_buf;
   2c35e:	4b1d      	ldr	r3, [pc, #116]	; (2c3d4 <nct_mqtt_connect+0x98>)
   2c360:	6818      	ldr	r0, [r3, #0]
   2c362:	6760      	str	r0, [r4, #116]	; 0x74
		nct.client.client_id.size = strlen(client_id_buf);
   2c364:	f7f0 ff6d 	bl	1d242 <strlen>
		nct.client.protocol_version = MQTT_VERSION_3_1_1;
   2c368:	2304      	movs	r3, #4
   2c36a:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
		nct.client.keepalive = CONFIG_NRF_CLOUD_MQTT_KEEPALIVE;
   2c36e:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
   2c372:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
		nct.client.clean_session = persistent_session ? 0U : 1U;
   2c376:	4b18      	ldr	r3, [pc, #96]	; (2c3d8 <nct_mqtt_connect+0x9c>)
   2c378:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
   2c37c:	781b      	ldrb	r3, [r3, #0]
		nct.client.user_name = NULL;
   2c37e:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
		nct.client.clean_session = persistent_session ? 0U : 1U;
   2c382:	f083 0301 	eor.w	r3, r3, #1
   2c386:	f363 0241 	bfi	r2, r3, #1, #1
		nct.client.rx_buf = nct.rx_buf;
   2c38a:	f104 03e6 	add.w	r3, r4, #230	; 0xe6
   2c38e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
		nct.client.rx_buf_size = sizeof(nct.rx_buf);
   2c392:	f44f 7380 	mov.w	r3, #256	; 0x100
		nct.client.clean_session = persistent_session ? 0U : 1U;
   2c396:	f884 20a8 	strb.w	r2, [r4, #168]	; 0xa8
   2c39a:	f104 0550 	add.w	r5, r4, #80	; 0x50
		nct.client.tx_buf = nct.tx_buf;
   2c39e:	f504 72f3 	add.w	r2, r4, #486	; 0x1e6
		nct.client.client_id.size = strlen(client_id_buf);
   2c3a2:	67a0      	str	r0, [r4, #120]	; 0x78
		nct.client.tx_buf_size = sizeof(nct.tx_buf);
   2c3a4:	e9c4 2327 	strd	r2, r3, [r4, #156]	; 0x9c
		nct.client.transport.type = MQTT_TRANSPORT_SECURE;
   2c3a8:	f884 7048 	strb.w	r7, [r4, #72]	; 0x48
		nct.client.rx_buf_size = sizeof(nct.rx_buf);
   2c3ac:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
		memcpy(tls_config, &nct.tls_config,
   2c3b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   2c3b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2c3b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   2c3b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2c3b8:	6823      	ldr	r3, [r4, #0]
		mqtt_client_initialized = true;
   2c3ba:	7037      	strb	r7, [r6, #0]
   2c3bc:	602b      	str	r3, [r5, #0]
	err = mqtt_connect(&nct.client);
   2c3be:	4807      	ldr	r0, [pc, #28]	; (2c3dc <nct_mqtt_connect+0xa0>)
}
   2c3c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	err = mqtt_connect(&nct.client);
   2c3c4:	f011 bee2 	b.w	3e18c <mqtt_connect>
   2c3c8:	2001c90c 	.word	0x2001c90c
   2c3cc:	20019570 	.word	0x20019570
   2c3d0:	0002c185 	.word	0x0002c185
   2c3d4:	2001956c 	.word	0x2001956c
   2c3d8:	2001c90d 	.word	0x2001c90d
   2c3dc:	20019594 	.word	0x20019594

0002c3e0 <nct_init>:

int nct_init(const char * const client_id)
{
   2c3e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c3e4:	4605      	mov	r5, r0
	ret = settings_subsys_init();
   2c3e6:	f7f5 fec5 	bl	22174 <settings_subsys_init>
	if (ret) {
   2c3ea:	4604      	mov	r4, r0
   2c3ec:	b138      	cbz	r0, 2c3fe <nct_init+0x1e>
		LOG_ERR("Settings init failed: %d", ret);
   2c3ee:	2145      	movs	r1, #69	; 0x45
   2c3f0:	4602      	mov	r2, r0
   2c3f2:	485c      	ldr	r0, [pc, #368]	; (2c564 <nct_init+0x184>)
		LOG_ERR("Cannot load settings: %d", ret);
   2c3f4:	f010 fb5c 	bl	3cab0 <z_log_minimal_printk>
	if (err) {
		return err;
	}

	return nct_provision();
}
   2c3f8:	4620      	mov	r0, r4
   2c3fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ret = settings_load_subtree(settings_handler_nrf_cloud.name);
   2c3fe:	485a      	ldr	r0, [pc, #360]	; (2c568 <nct_init+0x188>)
   2c400:	f7f5 fda6 	bl	21f50 <settings_load_subtree>
	if (ret) {
   2c404:	4604      	mov	r4, r0
   2c406:	2800      	cmp	r0, #0
   2c408:	f000 808d 	beq.w	2c526 <nct_init+0x146>
		LOG_ERR("Cannot load settings: %d", ret);
   2c40c:	4602      	mov	r2, r0
   2c40e:	2145      	movs	r1, #69	; 0x45
   2c410:	4856      	ldr	r0, [pc, #344]	; (2c56c <nct_init+0x18c>)
   2c412:	e7ef      	b.n	2c3f4 <nct_init+0x14>
	if (client_id_buf) {
   2c414:	4d56      	ldr	r5, [pc, #344]	; (2c570 <nct_init+0x190>)
   2c416:	6828      	ldr	r0, [r5, #0]
   2c418:	b118      	cbz	r0, 2c422 <nct_init+0x42>
		nrf_cloud_free(client_id_buf);
   2c41a:	f014 ff32 	bl	41282 <k_free>
		client_id_buf = NULL;
   2c41e:	2300      	movs	r3, #0
   2c420:	602b      	str	r3, [r5, #0]
	++len;
   2c422:	3401      	adds	r4, #1
	client_id_buf = nrf_cloud_calloc(len, 1);
   2c424:	2101      	movs	r1, #1
   2c426:	4620      	mov	r0, r4
   2c428:	f014 ff36 	bl	41298 <k_calloc>
   2c42c:	6028      	str	r0, [r5, #0]
	if (!client_id_buf) {
   2c42e:	2800      	cmp	r0, #0
   2c430:	d076      	beq.n	2c520 <nct_init+0x140>
		ret = nrf_cloud_configured_client_id_get(client_id_buf, len);
   2c432:	4621      	mov	r1, r4
   2c434:	f7fe ffea 	bl	2b40c <nrf_cloud_configured_client_id_get>
		if (ret) {
   2c438:	4604      	mov	r4, r0
   2c43a:	b930      	cbnz	r0, 2c44a <nct_init+0x6a>
	dc_endpoint_reset();
   2c43c:	f7ff fd1e 	bl	2be7c <dc_endpoint_reset>
	if (!client_id_buf) {
   2c440:	682b      	ldr	r3, [r5, #0]
   2c442:	b933      	cbnz	r3, 2c452 <nct_init+0x72>
		return -ENODEV;
   2c444:	f06f 0412 	mvn.w	r4, #18
   2c448:	e7d6      	b.n	2c3f8 <nct_init+0x18>
			LOG_ERR("Could not obtain configured client ID, error: %d", ret);
   2c44a:	4602      	mov	r2, r0
   2c44c:	2145      	movs	r1, #69	; 0x45
   2c44e:	4849      	ldr	r0, [pc, #292]	; (2c574 <nct_init+0x194>)
   2c450:	e7d0      	b.n	2c3f4 <nct_init+0x14>
	ret = allocate_and_format_topic(&accepted_topic, NCT_ACCEPTED_TOPIC);
   2c452:	f8df b164 	ldr.w	fp, [pc, #356]	; 2c5b8 <nct_init+0x1d8>
	nct_reset_topics();
   2c456:	f7ff fdbf 	bl	2bfd8 <nct_reset_topics>
	ret = allocate_and_format_topic(&accepted_topic, NCT_ACCEPTED_TOPIC);
   2c45a:	4658      	mov	r0, fp
   2c45c:	4946      	ldr	r1, [pc, #280]	; (2c578 <nct_init+0x198>)
   2c45e:	f7ff fd91 	bl	2bf84 <allocate_and_format_topic>
	if (ret) {
   2c462:	4604      	mov	r4, r0
   2c464:	2800      	cmp	r0, #0
   2c466:	d153      	bne.n	2c510 <nct_init+0x130>
	ret = allocate_and_format_topic(&rejected_topic, NCT_REJECTED_TOPIC);
   2c468:	f8df a150 	ldr.w	sl, [pc, #336]	; 2c5bc <nct_init+0x1dc>
   2c46c:	4943      	ldr	r1, [pc, #268]	; (2c57c <nct_init+0x19c>)
   2c46e:	4650      	mov	r0, sl
   2c470:	f7ff fd88 	bl	2bf84 <allocate_and_format_topic>
	if (ret) {
   2c474:	4604      	mov	r4, r0
   2c476:	2800      	cmp	r0, #0
   2c478:	d14a      	bne.n	2c510 <nct_init+0x130>
	ret = allocate_and_format_topic(&update_delta_topic, NCT_UPDATE_DELTA_TOPIC);
   2c47a:	f8df 9144 	ldr.w	r9, [pc, #324]	; 2c5c0 <nct_init+0x1e0>
   2c47e:	4940      	ldr	r1, [pc, #256]	; (2c580 <nct_init+0x1a0>)
   2c480:	4648      	mov	r0, r9
   2c482:	f7ff fd7f 	bl	2bf84 <allocate_and_format_topic>
	if (ret) {
   2c486:	4604      	mov	r4, r0
   2c488:	2800      	cmp	r0, #0
   2c48a:	d141      	bne.n	2c510 <nct_init+0x130>
	ret = allocate_and_format_topic(&update_topic, NCT_UPDATE_TOPIC);
   2c48c:	4f3d      	ldr	r7, [pc, #244]	; (2c584 <nct_init+0x1a4>)
   2c48e:	493e      	ldr	r1, [pc, #248]	; (2c588 <nct_init+0x1a8>)
   2c490:	4638      	mov	r0, r7
   2c492:	f7ff fd77 	bl	2bf84 <allocate_and_format_topic>
	if (ret) {
   2c496:	4604      	mov	r4, r0
   2c498:	2800      	cmp	r0, #0
   2c49a:	d139      	bne.n	2c510 <nct_init+0x130>
	ret = allocate_and_format_topic(&shadow_get_topic, NCT_SHADOW_GET);
   2c49c:	f8df 8124 	ldr.w	r8, [pc, #292]	; 2c5c4 <nct_init+0x1e4>
   2c4a0:	493a      	ldr	r1, [pc, #232]	; (2c58c <nct_init+0x1ac>)
   2c4a2:	4640      	mov	r0, r8
   2c4a4:	f7ff fd6e 	bl	2bf84 <allocate_and_format_topic>
	if (ret) {
   2c4a8:	4604      	mov	r4, r0
   2c4aa:	2800      	cmp	r0, #0
   2c4ac:	d130      	bne.n	2c510 <nct_init+0x130>
	nct_cc_rx_list[0].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   2c4ae:	2601      	movs	r6, #1
   2c4b0:	4d37      	ldr	r5, [pc, #220]	; (2c590 <nct_init+0x1b0>)
	nct_cc_rx_list[0].topic.utf8 = accepted_topic;
   2c4b2:	f8db 0000 	ldr.w	r0, [fp]
	nct_cc_rx_list[0].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   2c4b6:	722e      	strb	r6, [r5, #8]
	nct_cc_rx_list[0].topic.utf8 = accepted_topic;
   2c4b8:	6028      	str	r0, [r5, #0]
	nct_cc_rx_list[0].topic.size = strlen(accepted_topic);
   2c4ba:	f7f0 fec2 	bl	1d242 <strlen>
   2c4be:	6068      	str	r0, [r5, #4]
	nct_cc_rx_list[1].topic.utf8 = rejected_topic;
   2c4c0:	f8da 0000 	ldr.w	r0, [sl]
	nct_cc_rx_list[1].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   2c4c4:	752e      	strb	r6, [r5, #20]
	nct_cc_rx_list[1].topic.utf8 = rejected_topic;
   2c4c6:	60e8      	str	r0, [r5, #12]
	nct_cc_rx_list[1].topic.size = strlen(rejected_topic);
   2c4c8:	f7f0 febb 	bl	1d242 <strlen>
   2c4cc:	6128      	str	r0, [r5, #16]
	nct_cc_rx_list[2].topic.utf8 = update_delta_topic;
   2c4ce:	f8d9 0000 	ldr.w	r0, [r9]
	nct_cc_rx_list[2].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   2c4d2:	f885 6020 	strb.w	r6, [r5, #32]
	nct_cc_rx_list[2].topic.utf8 = update_delta_topic;
   2c4d6:	61a8      	str	r0, [r5, #24]
	nct_cc_rx_list[2].topic.size = strlen(update_delta_topic);
   2c4d8:	f7f0 feb3 	bl	1d242 <strlen>
   2c4dc:	61e8      	str	r0, [r5, #28]
	nct_cc_tx_list[0].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   2c4de:	4d2d      	ldr	r5, [pc, #180]	; (2c594 <nct_init+0x1b4>)
	nct_cc_tx_list[0].topic.utf8 = shadow_get_topic;
   2c4e0:	f8d8 0000 	ldr.w	r0, [r8]
	nct_cc_tx_list[0].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   2c4e4:	722e      	strb	r6, [r5, #8]
	nct_cc_tx_list[0].topic.utf8 = shadow_get_topic;
   2c4e6:	6028      	str	r0, [r5, #0]
	nct_cc_tx_list[0].topic.size = strlen(shadow_get_topic);
   2c4e8:	f7f0 feab 	bl	1d242 <strlen>
   2c4ec:	6068      	str	r0, [r5, #4]
	nct_cc_tx_list[1].topic.utf8 = update_topic;
   2c4ee:	6838      	ldr	r0, [r7, #0]
	nct_cc_tx_list[1].qos = MQTT_QOS_1_AT_LEAST_ONCE;
   2c4f0:	752e      	strb	r6, [r5, #20]
	nct_cc_tx_list[1].topic.utf8 = update_topic;
   2c4f2:	60e8      	str	r0, [r5, #12]
	nct_cc_tx_list[1].topic.size = strlen(update_topic);
   2c4f4:	f7f0 fea5 	bl	1d242 <strlen>
	nct.tls_config.peer_verify = 2;
   2c4f8:	2202      	movs	r2, #2
   2c4fa:	4b27      	ldr	r3, [pc, #156]	; (2c598 <nct_init+0x1b8>)
	nct_cc_tx_list[1].topic.size = strlen(update_topic);
   2c4fc:	6128      	str	r0, [r5, #16]
	nct.tls_config.cipher_count = 0;
   2c4fe:	e9c3 2400 	strd	r2, r4, [r3]
	nct.tls_config.sec_tag_list = sec_tag_list;
   2c502:	4a26      	ldr	r2, [pc, #152]	; (2c59c <nct_init+0x1bc>)
	nct.tls_config.sec_tag_count = ARRAY_SIZE(sec_tag_list);
   2c504:	e9c3 4602 	strd	r4, r6, [r3, #8]
	nct.tls_config.sec_tag_list = sec_tag_list;
   2c508:	611a      	str	r2, [r3, #16]
	nct.tls_config.hostname = NRF_CLOUD_HOSTNAME;
   2c50a:	4a25      	ldr	r2, [pc, #148]	; (2c5a0 <nct_init+0x1c0>)
   2c50c:	619a      	str	r2, [r3, #24]
	return nct_provision();
   2c50e:	e773      	b.n	2c3f8 <nct_init+0x18>
	LOG_ERR("Failed to format MQTT topics, err: %d", ret);
   2c510:	4622      	mov	r2, r4
   2c512:	2145      	movs	r1, #69	; 0x45
   2c514:	4823      	ldr	r0, [pc, #140]	; (2c5a4 <nct_init+0x1c4>)
   2c516:	f010 facb 	bl	3cab0 <z_log_minimal_printk>
	nct_reset_topics();
   2c51a:	f7ff fd5d 	bl	2bfd8 <nct_reset_topics>
	if (err) {
   2c51e:	e76b      	b.n	2c3f8 <nct_init+0x18>
		return -ENOMEM;
   2c520:	f06f 040b 	mvn.w	r4, #11
   2c524:	e768      	b.n	2c3f8 <nct_init+0x18>
	err = nrf_cloud_fota_init(nrf_cloud_fota_cb_handler);
   2c526:	4820      	ldr	r0, [pc, #128]	; (2c5a8 <nct_init+0x1c8>)
   2c528:	f003 f828 	bl	2f57c <nrf_cloud_fota_init>
	if (err < 0) {
   2c52c:	1e04      	subs	r4, r0, #0
   2c52e:	f6ff af63 	blt.w	2c3f8 <nct_init+0x18>
	} else if (err && persistent_session) {
   2c532:	d005      	beq.n	2c540 <nct_init+0x160>
   2c534:	4b1d      	ldr	r3, [pc, #116]	; (2c5ac <nct_init+0x1cc>)
   2c536:	781b      	ldrb	r3, [r3, #0]
   2c538:	b113      	cbz	r3, 2c540 <nct_init+0x160>
		nct_save_session_state(0);
   2c53a:	2000      	movs	r0, #0
   2c53c:	f7ff fe0e 	bl	2c15c <nct_save_session_state>
		if (client_id) {
   2c540:	b11d      	cbz	r5, 2c54a <nct_init+0x16a>
			LOG_WRN("Not configured to for runtime client ID, ignoring");
   2c542:	2157      	movs	r1, #87	; 0x57
   2c544:	481a      	ldr	r0, [pc, #104]	; (2c5b0 <nct_init+0x1d0>)
   2c546:	f010 fab3 	bl	3cab0 <z_log_minimal_printk>
		len = nrf_cloud_configured_client_id_length_get();
   2c54a:	f013 f895 	bl	3f678 <nrf_cloud_configured_client_id_length_get>
	if (!len) {
   2c54e:	4604      	mov	r4, r0
   2c550:	2800      	cmp	r0, #0
   2c552:	f47f af5f 	bne.w	2c414 <nct_init+0x34>
		LOG_WRN("Could not determine size of client ID");
   2c556:	2157      	movs	r1, #87	; 0x57
   2c558:	4816      	ldr	r0, [pc, #88]	; (2c5b4 <nct_init+0x1d4>)
   2c55a:	f010 faa9 	bl	3cab0 <z_log_minimal_printk>
		return -ENOMSG;
   2c55e:	f06f 0422 	mvn.w	r4, #34	; 0x22
   2c562:	e749      	b.n	2c3f8 <nct_init+0x18>
   2c564:	000486aa 	.word	0x000486aa
   2c568:	00046c44 	.word	0x00046c44
   2c56c:	000486c8 	.word	0x000486c8
   2c570:	2001956c 	.word	0x2001956c
   2c574:	00048748 	.word	0x00048748
   2c578:	0004877e 	.word	0x0004877e
   2c57c:	00048795 	.word	0x00048795
   2c580:	000487b8 	.word	0x000487b8
   2c584:	2001a100 	.word	0x2001a100
   2c588:	000487db 	.word	0x000487db
   2c58c:	000487f8 	.word	0x000487f8
   2c590:	2001a0b8 	.word	0x2001a0b8
   2c594:	2001a0dc 	.word	0x2001a0dc
   2c598:	20019570 	.word	0x20019570
   2c59c:	200146b0 	.word	0x200146b0
   2c5a0:	00048812 	.word	0x00048812
   2c5a4:	00048824 	.word	0x00048824
   2c5a8:	0002bf1d 	.word	0x0002bf1d
   2c5ac:	2001c90d 	.word	0x2001c90d
   2c5b0:	000486e6 	.word	0x000486e6
   2c5b4:	0004871d 	.word	0x0004871d
   2c5b8:	20019568 	.word	0x20019568
   2c5bc:	2001a0f4 	.word	0x2001a0f4
   2c5c0:	2001a0fc 	.word	0x2001a0fc
   2c5c4:	2001a0f8 	.word	0x2001a0f8

0002c5c8 <nct_uninit>:

void nct_uninit(void)
{
   2c5c8:	b510      	push	{r4, lr}
	LOG_DBG("Uninitializing nRF Cloud transport");
	dc_endpoint_free();
	nct_reset_topics();

	if (client_id_buf) {
   2c5ca:	4c0a      	ldr	r4, [pc, #40]	; (2c5f4 <nct_uninit+0x2c>)
	dc_endpoint_free();
   2c5cc:	f7ff fd42 	bl	2c054 <dc_endpoint_free>
	nct_reset_topics();
   2c5d0:	f7ff fd02 	bl	2bfd8 <nct_reset_topics>
	if (client_id_buf) {
   2c5d4:	6820      	ldr	r0, [r4, #0]
   2c5d6:	b118      	cbz	r0, 2c5e0 <nct_uninit+0x18>
		nrf_cloud_free(client_id_buf);
   2c5d8:	f014 fe53 	bl	41282 <k_free>
		client_id_buf = NULL;
   2c5dc:	2300      	movs	r3, #0
   2c5de:	6023      	str	r3, [r4, #0]
	}

	memset(&nct, 0, sizeof(nct));
   2c5e0:	f640 3248 	movw	r2, #2888	; 0xb48
   2c5e4:	2100      	movs	r1, #0
   2c5e6:	4804      	ldr	r0, [pc, #16]	; (2c5f8 <nct_uninit+0x30>)
   2c5e8:	f014 fefc 	bl	413e4 <memset>
	mqtt_client_initialized = false;
   2c5ec:	2200      	movs	r2, #0
   2c5ee:	4b03      	ldr	r3, [pc, #12]	; (2c5fc <nct_uninit+0x34>)
   2c5f0:	701a      	strb	r2, [r3, #0]
}
   2c5f2:	bd10      	pop	{r4, pc}
   2c5f4:	2001956c 	.word	0x2001956c
   2c5f8:	20019570 	.word	0x20019570
   2c5fc:	2001c90c 	.word	0x2001c90c

0002c600 <nct_connect>:

	return err;
}
#else
int nct_connect(void)
{
   2c600:	b510      	push	{r4, lr}
   2c602:	b09a      	sub	sp, #104	; 0x68
	int err;
	struct addrinfo *result;
	struct addrinfo *addr;
	struct addrinfo hints = {
   2c604:	2250      	movs	r2, #80	; 0x50
   2c606:	2100      	movs	r1, #0
   2c608:	a806      	add	r0, sp, #24
   2c60a:	f014 feeb 	bl	413e4 <memset>
   2c60e:	2301      	movs	r3, #1
	return zsock_getaddrinfo(host, service, hints, res);
   2c610:	2100      	movs	r1, #0
   2c612:	e9cd 3308 	strd	r3, r3, [sp, #32]
   2c616:	4815      	ldr	r0, [pc, #84]	; (2c66c <nct_connect+0x6c>)
   2c618:	ab01      	add	r3, sp, #4
   2c61a:	aa06      	add	r2, sp, #24
   2c61c:	f010 fd7a 	bl	3d114 <zsock_getaddrinfo>
		.ai_family = NRF_CLOUD_AF_FAMILY,
		.ai_socktype = SOCK_STREAM
	};

	err = getaddrinfo(NRF_CLOUD_HOSTNAME, NULL, &hints, &result);
	if (err) {
   2c620:	bb00      	cbnz	r0, 2c664 <nct_connect+0x64>
		LOG_DBG("getaddrinfo failed %d", err);
		return -ECHILD;
	}

	addr = result;
   2c622:	9b01      	ldr	r3, [sp, #4]
	err = -ECHILD;

	/* Look for address of the broker. */
	while (addr != NULL) {
   2c624:	b913      	cbnz	r3, 2c62c <nct_connect+0x2c>
	err = -ECHILD;
   2c626:	f06f 0409 	mvn.w	r4, #9
   2c62a:	e013      	b.n	2c654 <nct_connect+0x54>
		/* IPv4 Address. */
		if ((addr->ai_addrlen == sizeof(struct sockaddr_in)) &&
   2c62c:	695a      	ldr	r2, [r3, #20]
   2c62e:	2a08      	cmp	r2, #8
   2c630:	d116      	bne.n	2c660 <nct_connect+0x60>
			struct sockaddr_in *broker =
				((struct sockaddr_in *)&nct.broker);

			broker->sin_addr.s_addr =
				((struct sockaddr_in *)addr->ai_addr)
					->sin_addr.s_addr;
   2c632:	699b      	ldr	r3, [r3, #24]
			broker->sin_addr.s_addr =
   2c634:	490e      	ldr	r1, [pc, #56]	; (2c670 <nct_connect+0x70>)
					->sin_addr.s_addr;
   2c636:	685b      	ldr	r3, [r3, #4]
			broker->sin_addr.s_addr =
   2c638:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
			broker->sin_family = AF_INET;
   2c63c:	4b0d      	ldr	r3, [pc, #52]	; (2c674 <nct_connect+0x74>)
   2c63e:	f8c1 30ac 	str.w	r3, [r1, #172]	; 0xac
		union { uintptr_t x; size_t val; } parm3 = { .val = size };
		return (char *) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
   2c642:	2310      	movs	r3, #16
   2c644:	aa02      	add	r2, sp, #8
   2c646:	31b0      	adds	r1, #176	; 0xb0
   2c648:	2001      	movs	r0, #1
   2c64a:	f7f7 fafd 	bl	23c48 <z_impl_net_addr_ntop>
				 addr_str,
				 sizeof(addr_str));

			LOG_DBG("IPv4 address: %s", log_strdup(addr_str));

			err = nct_mqtt_connect();
   2c64e:	f7ff fe75 	bl	2c33c <nct_mqtt_connect>
   2c652:	4604      	mov	r4, r0
	zsock_freeaddrinfo(ai);
   2c654:	9801      	ldr	r0, [sp, #4]
   2c656:	f010 fd5f 	bl	3d118 <zsock_freeaddrinfo>

	/* Free the address. */
	freeaddrinfo(result);

	return err;
}
   2c65a:	4620      	mov	r0, r4
   2c65c:	b01a      	add	sp, #104	; 0x68
   2c65e:	bd10      	pop	{r4, pc}
		addr = addr->ai_next;
   2c660:	681b      	ldr	r3, [r3, #0]
   2c662:	e7df      	b.n	2c624 <nct_connect+0x24>
		return -ECHILD;
   2c664:	f06f 0409 	mvn.w	r4, #9
   2c668:	e7f7      	b.n	2c65a <nct_connect+0x5a>
   2c66a:	bf00      	nop
   2c66c:	00048812 	.word	0x00048812
   2c670:	20019570 	.word	0x20019570
   2c674:	b3220001 	.word	0xb3220001

0002c678 <nct_cc_connect>:
#endif /* defined(CONFIG_NRF_CLOUD_STATIC_IPV4) */

int nct_cc_connect(void)
{
   2c678:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("nct_cc_connect");

	const struct mqtt_subscription_list subscription_list = {
   2c67a:	466b      	mov	r3, sp
   2c67c:	4a05      	ldr	r2, [pc, #20]	; (2c694 <nct_cc_connect+0x1c>)
   2c67e:	e892 0003 	ldmia.w	r2, {r0, r1}
   2c682:	e883 0003 	stmia.w	r3, {r0, r1}
		.list = (struct mqtt_topic *)&nct_cc_rx_list,
		.list_count = ARRAY_SIZE(nct_cc_rx_list),
		.message_id = NCT_MSG_ID_CC_SUB
	};

	return mqtt_subscribe(&nct.client, &subscription_list);
   2c686:	4619      	mov	r1, r3
   2c688:	4803      	ldr	r0, [pc, #12]	; (2c698 <nct_cc_connect+0x20>)
   2c68a:	f011 fe53 	bl	3e334 <mqtt_subscribe>
}
   2c68e:	b003      	add	sp, #12
   2c690:	f85d fb04 	ldr.w	pc, [sp], #4
   2c694:	000427bc 	.word	0x000427bc
   2c698:	20019594 	.word	0x20019594

0002c69c <nct_cc_send>:

int nct_cc_send(const struct nct_cc_data *cc_data)
{
   2c69c:	b530      	push	{r4, r5, lr}
	if (cc_data == NULL) {
   2c69e:	4604      	mov	r4, r0
{
   2c6a0:	b087      	sub	sp, #28
	if (cc_data == NULL) {
   2c6a2:	b940      	cbnz	r0, 2c6b6 <nct_cc_send+0x1a>
		LOG_ERR("cc_data == NULL");
   2c6a4:	2145      	movs	r1, #69	; 0x45
   2c6a6:	481d      	ldr	r0, [pc, #116]	; (2c71c <nct_cc_send+0x80>)
   2c6a8:	f010 fa02 	bl	3cab0 <z_log_minimal_printk>
		return -EINVAL;
   2c6ac:	f06f 0415 	mvn.w	r4, #21
	if (err) {
		LOG_ERR("mqtt_publish failed %d", err);
	}

	return err;
}
   2c6b0:	4620      	mov	r0, r4
   2c6b2:	b007      	add	sp, #28
   2c6b4:	bd30      	pop	{r4, r5, pc}
	if (cc_data->opcode >= ARRAY_SIZE(nct_cc_tx_list)) {
   2c6b6:	7c85      	ldrb	r5, [r0, #18]
   2c6b8:	2d01      	cmp	r5, #1
   2c6ba:	d907      	bls.n	2c6cc <nct_cc_send+0x30>
		LOG_ERR("opcode = %d", cc_data->opcode);
   2c6bc:	462a      	mov	r2, r5
   2c6be:	2145      	movs	r1, #69	; 0x45
   2c6c0:	4817      	ldr	r0, [pc, #92]	; (2c720 <nct_cc_send+0x84>)
   2c6c2:	f010 f9f5 	bl	3cab0 <z_log_minimal_printk>
		return -ENOTSUP;
   2c6c6:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2c6ca:	e7f1      	b.n	2c6b0 <nct_cc_send+0x14>
	struct mqtt_publish_param publish = {
   2c6cc:	2210      	movs	r2, #16
   2c6ce:	2100      	movs	r1, #0
   2c6d0:	a802      	add	r0, sp, #8
   2c6d2:	f014 fe87 	bl	413e4 <memset>
			nct_cc_tx_list[cc_data->opcode].topic.utf8,
   2c6d6:	230c      	movs	r3, #12
   2c6d8:	435d      	muls	r5, r3
   2c6da:	4a12      	ldr	r2, [pc, #72]	; (2c724 <nct_cc_send+0x88>)
   2c6dc:	1953      	adds	r3, r2, r5
	struct mqtt_publish_param publish = {
   2c6de:	5952      	ldr	r2, [r2, r5]
   2c6e0:	9200      	str	r2, [sp, #0]
   2c6e2:	685a      	ldr	r2, [r3, #4]
   2c6e4:	7a1b      	ldrb	r3, [r3, #8]
   2c6e6:	9201      	str	r2, [sp, #4]
   2c6e8:	f88d 3008 	strb.w	r3, [sp, #8]
	if ((cc_data->data.len != 0) && (cc_data->data.ptr != NULL)) {
   2c6ec:	6823      	ldr	r3, [r4, #0]
   2c6ee:	b11b      	cbz	r3, 2c6f8 <nct_cc_send+0x5c>
   2c6f0:	6862      	ldr	r2, [r4, #4]
   2c6f2:	b10a      	cbz	r2, 2c6f8 <nct_cc_send+0x5c>
		publish.message.payload.len = cc_data->data.len;
   2c6f4:	e9cd 2303 	strd	r2, r3, [sp, #12]
	publish.message_id = get_message_id(cc_data->message_id);
   2c6f8:	8a20      	ldrh	r0, [r4, #16]
   2c6fa:	f7ff fbcd 	bl	2be98 <get_message_id>
	int err = mqtt_publish(&nct.client, &publish);
   2c6fe:	4669      	mov	r1, sp
	publish.message_id = get_message_id(cc_data->message_id);
   2c700:	f8ad 0014 	strh.w	r0, [sp, #20]
	int err = mqtt_publish(&nct.client, &publish);
   2c704:	4808      	ldr	r0, [pc, #32]	; (2c728 <nct_cc_send+0x8c>)
   2c706:	f011 fd83 	bl	3e210 <mqtt_publish>
	if (err) {
   2c70a:	4604      	mov	r4, r0
   2c70c:	2800      	cmp	r0, #0
   2c70e:	d0cf      	beq.n	2c6b0 <nct_cc_send+0x14>
		LOG_ERR("mqtt_publish failed %d", err);
   2c710:	4602      	mov	r2, r0
   2c712:	2145      	movs	r1, #69	; 0x45
   2c714:	4805      	ldr	r0, [pc, #20]	; (2c72c <nct_cc_send+0x90>)
   2c716:	f010 f9cb 	bl	3cab0 <z_log_minimal_printk>
   2c71a:	e7c9      	b.n	2c6b0 <nct_cc_send+0x14>
   2c71c:	0004884f 	.word	0x0004884f
   2c720:	00048864 	.word	0x00048864
   2c724:	2001a0dc 	.word	0x2001a0dc
   2c728:	20019594 	.word	0x20019594
   2c72c:	00048875 	.word	0x00048875

0002c730 <nct_dc_endpoint_set>:

void nct_dc_endpoint_set(const struct nrf_cloud_data *tx_endp,
			 const struct nrf_cloud_data *rx_endp,
			 const struct nrf_cloud_data *bulk_endp,
			 const struct nrf_cloud_data *m_endp)
{
   2c730:	e92d 41e8 	stmdb	sp!, {r3, r5, r6, r7, r8, lr}
   2c734:	4680      	mov	r8, r0
   2c736:	460f      	mov	r7, r1
   2c738:	4616      	mov	r6, r2
   2c73a:	461d      	mov	r5, r3
	LOG_DBG("nct_dc_endpoint_set");

	/* In case the endpoint was previous set, free and reset
	 * before copying new one.
	 */
	dc_endpoint_free();
   2c73c:	f7ff fc8a 	bl	2c054 <dc_endpoint_free>

	nct.dc_tx_endp.utf8 = (const uint8_t *)tx_endp->ptr;
   2c740:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2c744:	4814      	ldr	r0, [pc, #80]	; (2c798 <nct_dc_endpoint_set+0x68>)
   2c746:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
	nct.dc_tx_endp.size = tx_endp->len;
   2c74a:	f8d8 3000 	ldr.w	r3, [r8]
   2c74e:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8

	nct.dc_rx_endp.utf8 = (const uint8_t *)rx_endp->ptr;
   2c752:	687b      	ldr	r3, [r7, #4]
   2c754:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
	nct.dc_rx_endp.size = rx_endp->len;
   2c758:	683b      	ldr	r3, [r7, #0]
   2c75a:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0

	nct.dc_bulk_endp.utf8 = (const uint8_t *)bulk_endp->ptr;
   2c75e:	6873      	ldr	r3, [r6, #4]
   2c760:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
	nct.dc_bulk_endp.size = bulk_endp->len;
   2c764:	6833      	ldr	r3, [r6, #0]
   2c766:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0

	if (m_endp != NULL) {
   2c76a:	b19d      	cbz	r5, 2c794 <nct_dc_endpoint_set+0x64>
		nct.dc_m_endp.utf8 = (const uint8_t *)m_endp->ptr;
   2c76c:	686b      	ldr	r3, [r5, #4]
		nct.dc_m_endp.size = m_endp->len;
#if defined(CONFIG_NRF_CLOUD_FOTA)
		(void)nrf_cloud_fota_endpoint_set_and_report(&nct.client,
   2c76e:	f100 02d4 	add.w	r2, r0, #212	; 0xd4
		nct.dc_m_endp.utf8 = (const uint8_t *)m_endp->ptr;
   2c772:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
		nct.dc_m_endp.size = m_endp->len;
   2c776:	682b      	ldr	r3, [r5, #0]
		(void)nrf_cloud_fota_endpoint_set_and_report(&nct.client,
   2c778:	3024      	adds	r0, #36	; 0x24
		nct.dc_m_endp.size = m_endp->len;
   2c77a:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
		(void)nrf_cloud_fota_endpoint_set_and_report(&nct.client,
   2c77e:	4b07      	ldr	r3, [pc, #28]	; (2c79c <nct_dc_endpoint_set+0x6c>)
   2c780:	6819      	ldr	r1, [r3, #0]
   2c782:	f002 ffad 	bl	2f6e0 <nrf_cloud_fota_endpoint_set_and_report>
			client_id_buf, &nct.dc_m_endp);
		if (persistent_session) {
   2c786:	4b06      	ldr	r3, [pc, #24]	; (2c7a0 <nct_dc_endpoint_set+0x70>)
   2c788:	781b      	ldrb	r3, [r3, #0]
   2c78a:	b11b      	cbz	r3, 2c794 <nct_dc_endpoint_set+0x64>
			 */
			(void)nrf_cloud_fota_update_check();
		}
#endif
	}
}
   2c78c:	e8bd 41e8 	ldmia.w	sp!, {r3, r5, r6, r7, r8, lr}
			(void)nrf_cloud_fota_update_check();
   2c790:	f003 b818 	b.w	2f7c4 <nrf_cloud_fota_update_check>
}
   2c794:	e8bd 81e8 	ldmia.w	sp!, {r3, r5, r6, r7, r8, pc}
   2c798:	20019570 	.word	0x20019570
   2c79c:	2001956c 	.word	0x2001956c
   2c7a0:	2001c90d 	.word	0x2001c90d

0002c7a4 <nct_dc_endpoint_get>:

void nct_dc_endpoint_get(struct nrf_cloud_data *const tx_endp,
			 struct nrf_cloud_data *const rx_endp,
			 struct nrf_cloud_data *const bulk_endp,
			 struct nrf_cloud_data *const m_endp)
{
   2c7a4:	b530      	push	{r4, r5, lr}
	LOG_DBG("nct_dc_endpoint_get");

	tx_endp->ptr = nct.dc_tx_endp.utf8;
   2c7a6:	4c0e      	ldr	r4, [pc, #56]	; (2c7e0 <nct_dc_endpoint_get+0x3c>)
   2c7a8:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
   2c7ac:	6045      	str	r5, [r0, #4]
	tx_endp->len = nct.dc_tx_endp.size;
   2c7ae:	f8d4 50c8 	ldr.w	r5, [r4, #200]	; 0xc8
   2c7b2:	6005      	str	r5, [r0, #0]

	rx_endp->ptr = nct.dc_rx_endp.utf8;
   2c7b4:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   2c7b8:	6048      	str	r0, [r1, #4]
	rx_endp->len = nct.dc_rx_endp.size;
   2c7ba:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   2c7be:	6008      	str	r0, [r1, #0]

	if (bulk_endp != NULL) {
   2c7c0:	b12a      	cbz	r2, 2c7ce <nct_dc_endpoint_get+0x2a>
		bulk_endp->ptr = nct.dc_bulk_endp.utf8;
   2c7c2:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
   2c7c6:	6051      	str	r1, [r2, #4]
		bulk_endp->len = nct.dc_bulk_endp.size;
   2c7c8:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   2c7cc:	6011      	str	r1, [r2, #0]
	}

	if (m_endp != NULL) {
   2c7ce:	b12b      	cbz	r3, 2c7dc <nct_dc_endpoint_get+0x38>
		m_endp->ptr = nct.dc_m_endp.utf8;
   2c7d0:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
   2c7d4:	605a      	str	r2, [r3, #4]
		m_endp->len = nct.dc_m_endp.size;
   2c7d6:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
   2c7da:	601a      	str	r2, [r3, #0]
	}
}
   2c7dc:	bd30      	pop	{r4, r5, pc}
   2c7de:	bf00      	nop
   2c7e0:	20019570 	.word	0x20019570

0002c7e4 <nct_dc_connect>:

int nct_dc_connect(void)
{
   2c7e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_DBG("nct_dc_connect");

	struct mqtt_topic subscribe_topic = {
		.topic = {
			.utf8 = nct.dc_rx_endp.utf8,
   2c7e6:	480a      	ldr	r0, [pc, #40]	; (2c810 <nct_dc_connect+0x2c>)
		.list = &subscribe_topic,
		.list_count = 1,
		.message_id = NCT_MSG_ID_DC_SUB
	};

	return mqtt_subscribe(&nct.client, &subscription_list);
   2c7e8:	a901      	add	r1, sp, #4
	struct mqtt_topic subscribe_topic = {
   2c7ea:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
	return mqtt_subscribe(&nct.client, &subscription_list);
   2c7ee:	3024      	adds	r0, #36	; 0x24
	struct mqtt_topic subscribe_topic = {
   2c7f0:	9303      	str	r3, [sp, #12]
   2c7f2:	f8d0 30ac 	ldr.w	r3, [r0, #172]	; 0xac
   2c7f6:	9304      	str	r3, [sp, #16]
   2c7f8:	2301      	movs	r3, #1
   2c7fa:	f88d 3014 	strb.w	r3, [sp, #20]
	const struct mqtt_subscription_list subscription_list = {
   2c7fe:	ab03      	add	r3, sp, #12
   2c800:	9301      	str	r3, [sp, #4]
   2c802:	4b04      	ldr	r3, [pc, #16]	; (2c814 <nct_dc_connect+0x30>)
   2c804:	9302      	str	r3, [sp, #8]
	return mqtt_subscribe(&nct.client, &subscription_list);
   2c806:	f011 fd95 	bl	3e334 <mqtt_subscribe>
}
   2c80a:	b007      	add	sp, #28
   2c80c:	f85d fb04 	ldr.w	pc, [sp], #4
   2c810:	20019570 	.word	0x20019570
   2c814:	00650001 	.word	0x00650001

0002c818 <nct_dc_bulk_send>:
{
	return dc_send(dc_data, MQTT_QOS_0_AT_MOST_ONCE);
}

int nct_dc_bulk_send(const struct nct_dc_data *dc_data, enum mqtt_qos qos)
{
   2c818:	b530      	push	{r4, r5, lr}
   2c81a:	460d      	mov	r5, r1
	if (dc_data == NULL) {
   2c81c:	4604      	mov	r4, r0
{
   2c81e:	b087      	sub	sp, #28
	if (dc_data == NULL) {
   2c820:	b308      	cbz	r0, 2c866 <nct_dc_bulk_send+0x4e>
	if (qos != MQTT_QOS_0_AT_MOST_ONCE && qos != MQTT_QOS_1_AT_LEAST_ONCE) {
   2c822:	2901      	cmp	r1, #1
   2c824:	d81f      	bhi.n	2c866 <nct_dc_bulk_send+0x4e>
	struct mqtt_publish_param publish = {
   2c826:	2210      	movs	r2, #16
   2c828:	2100      	movs	r1, #0
   2c82a:	a802      	add	r0, sp, #8
   2c82c:	f014 fdda 	bl	413e4 <memset>
		.message.topic.topic.utf8 = nct.dc_bulk_endp.utf8,
   2c830:	4b0e      	ldr	r3, [pc, #56]	; (2c86c <nct_dc_bulk_send+0x54>)
	struct mqtt_publish_param publish = {
   2c832:	f88d 5008 	strb.w	r5, [sp, #8]
   2c836:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
   2c83a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   2c83e:	9200      	str	r2, [sp, #0]
   2c840:	9301      	str	r3, [sp, #4]
	if ((dc_data->data.len != 0) && (dc_data->data.ptr != NULL)) {
   2c842:	6823      	ldr	r3, [r4, #0]
   2c844:	b11b      	cbz	r3, 2c84e <nct_dc_bulk_send+0x36>
   2c846:	6862      	ldr	r2, [r4, #4]
   2c848:	b10a      	cbz	r2, 2c84e <nct_dc_bulk_send+0x36>
		publish.message.payload.len = dc_data->data.len;
   2c84a:	e9cd 2303 	strd	r2, r3, [sp, #12]
	if (qos != MQTT_QOS_0_AT_MOST_ONCE) {
   2c84e:	b125      	cbz	r5, 2c85a <nct_dc_bulk_send+0x42>
		publish.message_id = get_message_id(dc_data->message_id);
   2c850:	8a20      	ldrh	r0, [r4, #16]
   2c852:	f7ff fb21 	bl	2be98 <get_message_id>
   2c856:	f8ad 0014 	strh.w	r0, [sp, #20]
	return mqtt_publish(&nct.client, &publish);
   2c85a:	4669      	mov	r1, sp
   2c85c:	4804      	ldr	r0, [pc, #16]	; (2c870 <nct_dc_bulk_send+0x58>)
   2c85e:	f011 fcd7 	bl	3e210 <mqtt_publish>
	return bulk_send(dc_data, qos);
}
   2c862:	b007      	add	sp, #28
   2c864:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2c866:	f06f 0015 	mvn.w	r0, #21
	return bulk_send(dc_data, qos);
   2c86a:	e7fa      	b.n	2c862 <nct_dc_bulk_send+0x4a>
   2c86c:	20019570 	.word	0x20019570
   2c870:	20019594 	.word	0x20019594

0002c874 <nct_dc_disconnect>:

int nct_dc_disconnect(void)
{
   2c874:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int ret;

	LOG_DBG("nct_dc_disconnect");

	const struct mqtt_subscription_list subscription_list = {
   2c876:	466b      	mov	r3, sp
   2c878:	4a0c      	ldr	r2, [pc, #48]	; (2c8ac <nct_dc_disconnect+0x38>)
   2c87a:	e892 0003 	ldmia.w	r2, {r0, r1}
   2c87e:	e883 0003 	stmia.w	r3, {r0, r1}
		.list = (struct mqtt_topic *)&nct.dc_rx_endp,
		.list_count = 1,
		.message_id = NCT_MSG_ID_DC_UNSUB
	};

	ret = mqtt_unsubscribe(&nct.client, &subscription_list);
   2c882:	4619      	mov	r1, r3
   2c884:	480a      	ldr	r0, [pc, #40]	; (2c8b0 <nct_dc_disconnect+0x3c>)
   2c886:	f011 fd7b 	bl	3e380 <mqtt_unsubscribe>
   2c88a:	4604      	mov	r4, r0

#if defined(CONFIG_NRF_CLOUD_FOTA)
	int err = nrf_cloud_fota_unsubscribe();
   2c88c:	f002 ff62 	bl	2f754 <nrf_cloud_fota_unsubscribe>

	if (err) {
   2c890:	4605      	mov	r5, r0
   2c892:	b138      	cbz	r0, 2c8a4 <nct_dc_disconnect+0x30>
		LOG_ERR("FOTA MQTT unsubscribe failed: %d", err);
   2c894:	4602      	mov	r2, r0
   2c896:	2145      	movs	r1, #69	; 0x45
   2c898:	4806      	ldr	r0, [pc, #24]	; (2c8b4 <nct_dc_disconnect+0x40>)
   2c89a:	f010 f909 	bl	3cab0 <z_log_minimal_printk>
		if (ret == 0) {
   2c89e:	2c00      	cmp	r4, #0
   2c8a0:	bf08      	it	eq
   2c8a2:	462c      	moveq	r4, r5
		}
	}
#endif

	return ret;
}
   2c8a4:	4620      	mov	r0, r4
   2c8a6:	b003      	add	sp, #12
   2c8a8:	bd30      	pop	{r4, r5, pc}
   2c8aa:	bf00      	nop
   2c8ac:	000427c4 	.word	0x000427c4
   2c8b0:	20019594 	.word	0x20019594
   2c8b4:	00048891 	.word	0x00048891

0002c8b8 <nct_disconnect>:

int nct_disconnect(void)
{
   2c8b8:	b508      	push	{r3, lr}
	LOG_DBG("nct_disconnect");

	dc_endpoint_free();
   2c8ba:	f7ff fbcb 	bl	2c054 <dc_endpoint_free>
	return mqtt_disconnect(&nct.client);
}
   2c8be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return mqtt_disconnect(&nct.client);
   2c8c2:	4801      	ldr	r0, [pc, #4]	; (2c8c8 <nct_disconnect+0x10>)
   2c8c4:	f011 bd0e 	b.w	3e2e4 <mqtt_disconnect>
   2c8c8:	20019594 	.word	0x20019594

0002c8cc <nct_process>:

int nct_process(void)
{
   2c8cc:	b530      	push	{r4, r5, lr}
	int err;
	int ret;

	err = mqtt_input(&nct.client);
   2c8ce:	4d21      	ldr	r5, [pc, #132]	; (2c954 <nct_process+0x88>)
{
   2c8d0:	b085      	sub	sp, #20
	err = mqtt_input(&nct.client);
   2c8d2:	f105 0024 	add.w	r0, r5, #36	; 0x24
   2c8d6:	f011 fde1 	bl	3e49c <mqtt_input>
	if (err) {
   2c8da:	4604      	mov	r4, r0
   2c8dc:	b320      	cbz	r0, 2c928 <nct_process+0x5c>
		LOG_ERR("MQTT input error: %d", err);
   2c8de:	4602      	mov	r2, r0
   2c8e0:	2145      	movs	r1, #69	; 0x45
   2c8e2:	481d      	ldr	r0, [pc, #116]	; (2c958 <nct_process+0x8c>)
   2c8e4:	f010 f8e4 	bl	3cab0 <z_log_minimal_printk>
		if (err != -ENOTCONN) {
   2c8e8:	f114 0f80 	cmn.w	r4, #128	; 0x80
   2c8ec:	d119      	bne.n	2c922 <nct_process+0x56>
		} else {
			return err;
		}
	}

	ret = nct_disconnect();
   2c8ee:	f7ff ffe3 	bl	2c8b8 <nct_disconnect>
	if (ret) {
   2c8f2:	4602      	mov	r2, r0
   2c8f4:	b118      	cbz	r0, 2c8fe <nct_process+0x32>
		LOG_ERR("Error disconnecting from cloud: %d", ret);
   2c8f6:	2145      	movs	r1, #69	; 0x45
   2c8f8:	4818      	ldr	r0, [pc, #96]	; (2c95c <nct_process+0x90>)
   2c8fa:	f010 f8d9 	bl	3cab0 <z_log_minimal_printk>
	}

	struct nct_evt evt = { .status = err };
   2c8fe:	2300      	movs	r3, #0
   2c900:	e9cd 3302 	strd	r3, r3, [sp, #8]

	evt.type = NCT_EVT_DISCONNECTED;
   2c904:	230a      	movs	r3, #10
	ret = nct_input(&evt);
   2c906:	a801      	add	r0, sp, #4
	struct nct_evt evt = { .status = err };
   2c908:	9401      	str	r4, [sp, #4]
	evt.type = NCT_EVT_DISCONNECTED;
   2c90a:	f88d 300c 	strb.w	r3, [sp, #12]
	ret = nct_input(&evt);
   2c90e:	f7ff f85d 	bl	2b9cc <nct_input>
	if (ret) {
   2c912:	4605      	mov	r5, r0
   2c914:	b128      	cbz	r0, 2c922 <nct_process+0x56>
		LOG_ERR("Error sending event to application: %d", err);
   2c916:	4622      	mov	r2, r4
   2c918:	2145      	movs	r1, #69	; 0x45
   2c91a:	4811      	ldr	r0, [pc, #68]	; (2c960 <nct_process+0x94>)
   2c91c:	f010 f8c8 	bl	3cab0 <z_log_minimal_printk>
   2c920:	462c      	mov	r4, r5
		err = ret;
	}
	return err;
}
   2c922:	4620      	mov	r0, r4
   2c924:	b005      	add	sp, #20
   2c926:	bd30      	pop	{r4, r5, pc}
	} else if (nct.client.unacked_ping) {
   2c928:	f995 30a7 	ldrsb.w	r3, [r5, #167]	; 0xa7
   2c92c:	b97b      	cbnz	r3, 2c94e <nct_process+0x82>
		err = mqtt_live(&nct.client);
   2c92e:	f105 0024 	add.w	r0, r5, #36	; 0x24
   2c932:	f011 fd75 	bl	3e420 <mqtt_live>
		if (err && (err != -EAGAIN)) {
   2c936:	4604      	mov	r4, r0
   2c938:	2800      	cmp	r0, #0
   2c93a:	d0f2      	beq.n	2c922 <nct_process+0x56>
   2c93c:	f110 0f0b 	cmn.w	r0, #11
   2c940:	d0ef      	beq.n	2c922 <nct_process+0x56>
			LOG_ERR("MQTT ping error: %d", err);
   2c942:	4602      	mov	r2, r0
   2c944:	2145      	movs	r1, #69	; 0x45
   2c946:	4807      	ldr	r0, [pc, #28]	; (2c964 <nct_process+0x98>)
   2c948:	f010 f8b2 	bl	3cab0 <z_log_minimal_printk>
   2c94c:	e7cf      	b.n	2c8ee <nct_process+0x22>
		err = -ECONNRESET;
   2c94e:	f06f 0467 	mvn.w	r4, #103	; 0x67
   2c952:	e7cc      	b.n	2c8ee <nct_process+0x22>
   2c954:	20019570 	.word	0x20019570
   2c958:	000488b7 	.word	0x000488b7
   2c95c:	000488ea 	.word	0x000488ea
   2c960:	00048912 	.word	0x00048912
   2c964:	000488d1 	.word	0x000488d1

0002c968 <nct_keepalive_time_left>:

int nct_keepalive_time_left(void)
{
	return mqtt_keepalive_time_left(&nct.client);
   2c968:	4801      	ldr	r0, [pc, #4]	; (2c970 <nct_keepalive_time_left+0x8>)
   2c96a:	f011 bd80 	b.w	3e46e <mqtt_keepalive_time_left>
   2c96e:	bf00      	nop
   2c970:	20019594 	.word	0x20019594

0002c974 <nct_socket_get>:
}

int nct_socket_get(void)
{
	return nct.client.transport.tls.sock;
}
   2c974:	4b01      	ldr	r3, [pc, #4]	; (2c97c <nct_socket_get+0x8>)
   2c976:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   2c978:	4770      	bx	lr
   2c97a:	bf00      	nop
   2c97c:	20019570 	.word	0x20019570

0002c980 <send_to_modem>:
	return nrf_cloud_agps_request(&request);
}

static int send_to_modem(void *data, size_t data_len, uint16_t type)
{
	if (agps_print_enabled) {
   2c980:	4b08      	ldr	r3, [pc, #32]	; (2c9a4 <send_to_modem+0x24>)
{
   2c982:	b570      	push	{r4, r5, r6, lr}
	if (agps_print_enabled) {
   2c984:	781b      	ldrb	r3, [r3, #0]
{
   2c986:	4604      	mov	r4, r0
   2c988:	460e      	mov	r6, r1
   2c98a:	4615      	mov	r5, r2
	if (agps_print_enabled) {
   2c98c:	b11b      	cbz	r3, 2c996 <send_to_modem+0x16>
		agps_print(type, data);
   2c98e:	4601      	mov	r1, r0
   2c990:	b2d0      	uxtb	r0, r2
   2c992:	f000 fb73 	bl	2d07c <agps_print>
	}

	return nrf_modem_gnss_agps_write(data, data_len, type);
   2c996:	462a      	mov	r2, r5
   2c998:	4631      	mov	r1, r6
   2c99a:	4620      	mov	r0, r4
}
   2c99c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return nrf_modem_gnss_agps_write(data, data_len, type);
   2c9a0:	f014 ba4e 	b.w	40e40 <nrf_modem_gnss_agps_write>
   2c9a4:	2001c956 	.word	0x2001c956

0002c9a8 <nrf_cloud_agps_request>:
{
   2c9a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   2c9ac:	4605      	mov	r5, r0
	if (nfsm_get_current_state() != STATE_DC_CONNECTED) {
   2c9ae:	f7fe fdc5 	bl	2b53c <nfsm_get_current_state>
   2c9b2:	2809      	cmp	r0, #9
   2c9b4:	f040 80b5 	bne.w	2cb22 <nrf_cloud_agps_request+0x17a>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2c9b8:	2400      	movs	r4, #0
   2c9ba:	4e5b      	ldr	r6, [pc, #364]	; (2cb28 <nrf_cloud_agps_request+0x180>)
   2c9bc:	e8d6 3fef 	ldaex	r3, [r6]
   2c9c0:	e8c6 4fe2 	stlex	r2, r4, [r6]
   2c9c4:	2a00      	cmp	r2, #0
   2c9c6:	d1f9      	bne.n	2c9bc <nrf_cloud_agps_request+0x14>
	return z_impl_k_mutex_lock(mutex, timeout);
   2c9c8:	f04f 32ff 	mov.w	r2, #4294967295
   2c9cc:	f04f 33ff 	mov.w	r3, #4294967295
   2c9d0:	4856      	ldr	r0, [pc, #344]	; (2cb2c <nrf_cloud_agps_request+0x184>)
   2c9d2:	f009 ff6f 	bl	368b4 <z_impl_k_mutex_lock>
	memset(&processed, 0, sizeof(processed));
   2c9d6:	4b56      	ldr	r3, [pc, #344]	; (2cb30 <nrf_cloud_agps_request+0x188>)
   2c9d8:	e9c3 4400 	strd	r4, r4, [r3]
   2c9dc:	609c      	str	r4, [r3, #8]
	return z_impl_k_mutex_unlock(mutex);
   2c9de:	4853      	ldr	r0, [pc, #332]	; (2cb2c <nrf_cloud_agps_request+0x184>)
   2c9e0:	f00a f83a 	bl	36a58 <z_impl_k_mutex_unlock>
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_GPS_UTC_REQUEST) {
   2c9e4:	68ab      	ldr	r3, [r5, #8]
   2c9e6:	f013 0401 	ands.w	r4, r3, #1
		types[type_count++] = NRF_CLOUD_AGPS_UTC_PARAMETERS;
   2c9ea:	bf1c      	itt	ne
   2c9ec:	2201      	movne	r2, #1
   2c9ee:	f88d 2004 	strbne.w	r2, [sp, #4]
	if (ephem) {
   2c9f2:	682a      	ldr	r2, [r5, #0]
   2c9f4:	b12a      	cbz	r2, 2ca02 <nrf_cloud_agps_request+0x5a>
		types[type_count++] = NRF_CLOUD_AGPS_EPHEMERIDES;
   2c9f6:	2102      	movs	r1, #2
   2c9f8:	aa04      	add	r2, sp, #16
   2c9fa:	4422      	add	r2, r4
   2c9fc:	f802 1c0c 	strb.w	r1, [r2, #-12]
   2ca00:	3401      	adds	r4, #1
	if (request->sv_mask_alm) {
   2ca02:	686a      	ldr	r2, [r5, #4]
   2ca04:	b12a      	cbz	r2, 2ca12 <nrf_cloud_agps_request+0x6a>
		types[type_count++] = NRF_CLOUD_AGPS_ALMANAC;
   2ca06:	2103      	movs	r1, #3
   2ca08:	aa04      	add	r2, sp, #16
   2ca0a:	4422      	add	r2, r4
   2ca0c:	f802 1c0c 	strb.w	r1, [r2, #-12]
   2ca10:	3401      	adds	r4, #1
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_KLOBUCHAR_REQUEST) {
   2ca12:	079d      	lsls	r5, r3, #30
   2ca14:	d505      	bpl.n	2ca22 <nrf_cloud_agps_request+0x7a>
		types[type_count++] = NRF_CLOUD_AGPS_KLOBUCHAR_CORRECTION;
   2ca16:	2104      	movs	r1, #4
   2ca18:	aa04      	add	r2, sp, #16
   2ca1a:	4422      	add	r2, r4
   2ca1c:	f802 1c0c 	strb.w	r1, [r2, #-12]
   2ca20:	3401      	adds	r4, #1
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_NEQUICK_REQUEST) {
   2ca22:	0758      	lsls	r0, r3, #29
   2ca24:	d505      	bpl.n	2ca32 <nrf_cloud_agps_request+0x8a>
		types[type_count++] = NRF_CLOUD_AGPS_NEQUICK_CORRECTION;
   2ca26:	2105      	movs	r1, #5
   2ca28:	aa04      	add	r2, sp, #16
   2ca2a:	4422      	add	r2, r4
   2ca2c:	f802 1c0c 	strb.w	r1, [r2, #-12]
   2ca30:	3401      	adds	r4, #1
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST) {
   2ca32:	0719      	lsls	r1, r3, #28
   2ca34:	d50b      	bpl.n	2ca4e <nrf_cloud_agps_request+0xa6>
		types[type_count++] = NRF_CLOUD_AGPS_GPS_TOWS;
   2ca36:	2006      	movs	r0, #6
   2ca38:	a904      	add	r1, sp, #16
   2ca3a:	4421      	add	r1, r4
   2ca3c:	1c62      	adds	r2, r4, #1
   2ca3e:	f801 0c0c 	strb.w	r0, [r1, #-12]
		types[type_count++] = NRF_CLOUD_AGPS_GPS_SYSTEM_CLOCK;
   2ca42:	a904      	add	r1, sp, #16
   2ca44:	440a      	add	r2, r1
   2ca46:	2107      	movs	r1, #7
   2ca48:	3402      	adds	r4, #2
   2ca4a:	f802 1c0c 	strb.w	r1, [r2, #-12]
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_POSITION_REQUEST) {
   2ca4e:	06da      	lsls	r2, r3, #27
   2ca50:	d505      	bpl.n	2ca5e <nrf_cloud_agps_request+0xb6>
		types[type_count++] = NRF_CLOUD_AGPS_LOCATION;
   2ca52:	2108      	movs	r1, #8
   2ca54:	aa04      	add	r2, sp, #16
   2ca56:	4422      	add	r2, r4
   2ca58:	f802 1c0c 	strb.w	r1, [r2, #-12]
   2ca5c:	3401      	adds	r4, #1
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_INTEGRITY_REQUEST) {
   2ca5e:	069b      	lsls	r3, r3, #26
   2ca60:	d51f      	bpl.n	2caa2 <nrf_cloud_agps_request+0xfa>
		types[type_count++] = NRF_CLOUD_AGPS_INTEGRITY;
   2ca62:	2209      	movs	r2, #9
   2ca64:	ab04      	add	r3, sp, #16
   2ca66:	4423      	add	r3, r4
   2ca68:	f803 2c0c 	strb.w	r2, [r3, #-12]
   2ca6c:	3401      	adds	r4, #1
	agps_req_obj = json_create_req_obj(NRF_CLOUD_JSON_APPID_VAL_AGPS,
   2ca6e:	4931      	ldr	r1, [pc, #196]	; (2cb34 <nrf_cloud_agps_request+0x18c>)
   2ca70:	4831      	ldr	r0, [pc, #196]	; (2cb38 <nrf_cloud_agps_request+0x190>)
   2ca72:	f7fd fb9f 	bl	2a1b4 <json_create_req_obj>
	data_obj = cJSON_AddObjectToObject(agps_req_obj, NRF_CLOUD_JSON_DATA_KEY);
   2ca76:	4931      	ldr	r1, [pc, #196]	; (2cb3c <nrf_cloud_agps_request+0x194>)
	agps_req_obj = json_create_req_obj(NRF_CLOUD_JSON_APPID_VAL_AGPS,
   2ca78:	4607      	mov	r7, r0
	data_obj = cJSON_AddObjectToObject(agps_req_obj, NRF_CLOUD_JSON_DATA_KEY);
   2ca7a:	f013 f936 	bl	3fcea <cJSON_AddObjectToObject>
   2ca7e:	4680      	mov	r8, r0
	if (!agps_req_obj || !data_obj) {
   2ca80:	2f00      	cmp	r7, #0
   2ca82:	d03d      	beq.n	2cb00 <nrf_cloud_agps_request+0x158>
   2ca84:	2800      	cmp	r0, #0
   2ca86:	d03b      	beq.n	2cb00 <nrf_cloud_agps_request+0x158>
	err = nrf_cloud_json_add_modem_info(data_obj);
   2ca88:	f7fd fbcc 	bl	2a224 <nrf_cloud_json_add_modem_info>
	if (err) {
   2ca8c:	4605      	mov	r5, r0
   2ca8e:	b198      	cbz	r0, 2cab8 <nrf_cloud_agps_request+0x110>
		LOG_ERR("Failed to add modem info to A-GPS request: %d", err);
   2ca90:	4602      	mov	r2, r0
   2ca92:	2145      	movs	r1, #69	; 0x45
   2ca94:	482a      	ldr	r0, [pc, #168]	; (2cb40 <nrf_cloud_agps_request+0x198>)
   2ca96:	f010 f80b 	bl	3cab0 <z_log_minimal_printk>
	cJSON_Delete(agps_req_obj);
   2ca9a:	4638      	mov	r0, r7
   2ca9c:	f005 fa4e 	bl	31f3c <cJSON_Delete>
	return err;
   2caa0:	e006      	b.n	2cab0 <nrf_cloud_agps_request+0x108>
	if (type_count == 0) {
   2caa2:	2c00      	cmp	r4, #0
   2caa4:	d1e3      	bne.n	2ca6e <nrf_cloud_agps_request+0xc6>
		LOG_INF("No A-GPS data types requested");
   2caa6:	2149      	movs	r1, #73	; 0x49
   2caa8:	4826      	ldr	r0, [pc, #152]	; (2cb44 <nrf_cloud_agps_request+0x19c>)
   2caaa:	f010 f801 	bl	3cab0 <z_log_minimal_printk>
		return 0;
   2caae:	4625      	mov	r5, r4
}
   2cab0:	4628      	mov	r0, r5
   2cab2:	b004      	add	sp, #16
   2cab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	array = cJSON_AddArrayToObject(obj, AGPS_JSON_TYPES_KEY);
   2cab8:	4640      	mov	r0, r8
   2caba:	4923      	ldr	r1, [pc, #140]	; (2cb48 <nrf_cloud_agps_request+0x1a0>)
   2cabc:	f013 f8eb 	bl	3fc96 <cJSON_AddArrayToObject>
	if (!array) {
   2cac0:	4681      	mov	r9, r0
   2cac2:	b1b8      	cbz	r0, 2caf4 <nrf_cloud_agps_request+0x14c>
   2cac4:	f10d 0a04 	add.w	sl, sp, #4
		cJSON_AddItemToArray(array, cJSON_CreateNumber(types[i]));
   2cac8:	f81a 0b01 	ldrb.w	r0, [sl], #1
   2cacc:	f7ef fdfa 	bl	1c6c4 <__aeabi_ui2d>
   2cad0:	f7f1 fd12 	bl	1e4f8 <cJSON_CreateNumber>
	for (size_t i = 0; i < type_count; i++) {
   2cad4:	3501      	adds	r5, #1
		cJSON_AddItemToArray(array, cJSON_CreateNumber(types[i]));
   2cad6:	4601      	mov	r1, r0
   2cad8:	4648      	mov	r0, r9
   2cada:	f013 f825 	bl	3fb28 <cJSON_AddItemToArray>
	for (size_t i = 0; i < type_count; i++) {
   2cade:	42a5      	cmp	r5, r4
   2cae0:	d3f2      	bcc.n	2cac8 <nrf_cloud_agps_request+0x120>
	if (cJSON_GetArraySize(array) != type_count) {
   2cae2:	4648      	mov	r0, r9
   2cae4:	f013 f808 	bl	3faf8 <cJSON_GetArraySize>
   2cae8:	42a0      	cmp	r0, r4
   2caea:	d00c      	beq.n	2cb06 <nrf_cloud_agps_request+0x15e>
		cJSON_DeleteItemFromObject(obj, AGPS_JSON_TYPES_KEY);
   2caec:	4640      	mov	r0, r8
   2caee:	4916      	ldr	r1, [pc, #88]	; (2cb48 <nrf_cloud_agps_request+0x1a0>)
   2caf0:	f013 f848 	bl	3fb84 <cJSON_DeleteItemFromObject>
		LOG_ERR("Failed to add types array to A-GPS request %d", err);
   2caf4:	f06f 020b 	mvn.w	r2, #11
   2caf8:	2145      	movs	r1, #69	; 0x45
   2cafa:	4814      	ldr	r0, [pc, #80]	; (2cb4c <nrf_cloud_agps_request+0x1a4>)
   2cafc:	f00f ffd8 	bl	3cab0 <z_log_minimal_printk>
		err = -ENOMEM;
   2cb00:	f06f 050b 	mvn.w	r5, #11
   2cb04:	e7c9      	b.n	2ca9a <nrf_cloud_agps_request+0xf2>
	err = json_send_to_cloud(agps_req_obj);
   2cb06:	4638      	mov	r0, r7
   2cb08:	f7fd ff18 	bl	2a93c <json_send_to_cloud>
	if (!err) {
   2cb0c:	4605      	mov	r5, r0
   2cb0e:	2800      	cmp	r0, #0
   2cb10:	d1c3      	bne.n	2ca9a <nrf_cloud_agps_request+0xf2>
   2cb12:	2301      	movs	r3, #1
   2cb14:	e8d6 2fef 	ldaex	r2, [r6]
   2cb18:	e8c6 3fe1 	stlex	r1, r3, [r6]
   2cb1c:	2900      	cmp	r1, #0
   2cb1e:	d0bc      	beq.n	2ca9a <nrf_cloud_agps_request+0xf2>
   2cb20:	e7f8      	b.n	2cb14 <nrf_cloud_agps_request+0x16c>
		return -EACCES;
   2cb22:	f06f 050c 	mvn.w	r5, #12
   2cb26:	e7c3      	b.n	2cab0 <nrf_cloud_agps_request+0x108>
   2cb28:	2001a110 	.word	0x2001a110
   2cb2c:	20014f68 	.word	0x20014f68
   2cb30:	2001a104 	.word	0x2001a104
   2cb34:	000435de 	.word	0x000435de
   2cb38:	00048975 	.word	0x00048975
   2cb3c:	000436ba 	.word	0x000436ba
   2cb40:	0004897a 	.word	0x0004897a
   2cb44:	00048952 	.word	0x00048952
   2cb48:	000489ad 	.word	0x000489ad
   2cb4c:	000489b3 	.word	0x000489b3

0002cb50 <nrf_cloud_agps_process>:

	return len;
}

int nrf_cloud_agps_process(const char *buf, size_t buf_len)
{
   2cb50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cb54:	4607      	mov	r7, r0
   2cb56:	b0cb      	sub	sp, #300	; 0x12c
   2cb58:	9100      	str	r1, [sp, #0]
	int err;
	struct nrf_cloud_apgs_element element = {0};
	struct nrf_cloud_agps_system_time sys_time = {0};
   2cb5a:	228c      	movs	r2, #140	; 0x8c
   2cb5c:	2100      	movs	r1, #0
   2cb5e:	a803      	add	r0, sp, #12
   2cb60:	f014 fc40 	bl	413e4 <memset>
	uint8_t version;
#if defined(CONFIG_NRF_CLOUD_AGPS_FILTERED)
	bool ephemerides_processed = false;
#endif

	if (!buf || (buf_len == 0)) {
   2cb64:	2f00      	cmp	r7, #0
   2cb66:	f000 8261 	beq.w	2d02c <nrf_cloud_agps_process+0x4dc>
   2cb6a:	9b00      	ldr	r3, [sp, #0]
   2cb6c:	2b00      	cmp	r3, #0
   2cb6e:	f000 825d 	beq.w	2d02c <nrf_cloud_agps_process+0x4dc>
	}

	/* Check for a potential A-GPS JSON error message from nRF Cloud */
	enum nrf_cloud_error nrf_err;

	err = nrf_cloud_handle_error_message(buf, NRF_CLOUD_JSON_APPID_VAL_AGPS,
   2cb72:	4638      	mov	r0, r7
   2cb74:	4abb      	ldr	r2, [pc, #748]	; (2ce64 <nrf_cloud_agps_process+0x314>)
   2cb76:	49bc      	ldr	r1, [pc, #752]	; (2ce68 <nrf_cloud_agps_process+0x318>)
   2cb78:	ab02      	add	r3, sp, #8
   2cb7a:	f7fe fae1 	bl	2b140 <nrf_cloud_handle_error_message>
		NRF_CLOUD_JSON_MSG_TYPE_VAL_DATA, &nrf_err);
	if (!err) {
   2cb7e:	b950      	cbnz	r0, 2cb96 <nrf_cloud_agps_process+0x46>
		LOG_ERR("nRF Cloud returned A-GPS error: %d", nrf_err);
   2cb80:	2145      	movs	r1, #69	; 0x45
   2cb82:	9a02      	ldr	r2, [sp, #8]
   2cb84:	48b9      	ldr	r0, [pc, #740]	; (2ce6c <nrf_cloud_agps_process+0x31c>)
   2cb86:	f00f ff93 	bl	3cab0 <z_log_minimal_printk>
		return -EFAULT;
   2cb8a:	f06f 050d 	mvn.w	r5, #13

	LOG_DBG("A-GPS_inject_active UNLOCKED");
	k_sem_give(&agps_injection_active);

	return err;
}
   2cb8e:	4628      	mov	r0, r5
   2cb90:	b04b      	add	sp, #300	; 0x12c
   2cb92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (err == -ENODATA) { /* Not a JSON message, try to parse it as A-GPS data */
   2cb96:	303d      	adds	r0, #61	; 0x3d
   2cb98:	f040 824b 	bne.w	2d032 <nrf_cloud_agps_process+0x4e2>
	version = buf[NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION_INDEX];
   2cb9c:	783e      	ldrb	r6, [r7, #0]
	if (version != NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION) {
   2cb9e:	2e01      	cmp	r6, #1
   2cba0:	d007      	beq.n	2cbb2 <nrf_cloud_agps_process+0x62>
		LOG_ERR("Cannot parse schema version: %d", version);
   2cba2:	4632      	mov	r2, r6
   2cba4:	2145      	movs	r1, #69	; 0x45
   2cba6:	48b2      	ldr	r0, [pc, #712]	; (2ce70 <nrf_cloud_agps_process+0x320>)
   2cba8:	f00f ff82 	bl	3cab0 <z_log_minimal_printk>
		return -EBADMSG;
   2cbac:	f06f 054c 	mvn.w	r5, #76	; 0x4c
   2cbb0:	e7ed      	b.n	2cb8e <nrf_cloud_agps_process+0x3e>
	return z_impl_k_sem_take(sem, timeout);
   2cbb2:	f04f 32ff 	mov.w	r2, #4294967295
   2cbb6:	f04f 33ff 	mov.w	r3, #4294967295
   2cbba:	48ae      	ldr	r0, [pc, #696]	; (2ce74 <nrf_cloud_agps_process+0x324>)
   2cbbc:	f00a f908 	bl	36dd0 <z_impl_k_sem_take>
	if (err) {
   2cbc0:	4605      	mov	r5, r0
   2cbc2:	2800      	cmp	r0, #0
   2cbc4:	f000 822c 	beq.w	2d020 <nrf_cloud_agps_process+0x4d0>
		LOG_ERR("A-GPS injection already active.");
   2cbc8:	2145      	movs	r1, #69	; 0x45
   2cbca:	48ab      	ldr	r0, [pc, #684]	; (2ce78 <nrf_cloud_agps_process+0x328>)
   2cbcc:	f00f ff70 	bl	3cab0 <z_log_minimal_printk>
		return err;
   2cbd0:	e7dd      	b.n	2cb8e <nrf_cloud_agps_process+0x3e>
		element->type = element_type;
   2cbd2:	4aaa      	ldr	r2, [pc, #680]	; (2ce7c <nrf_cloud_agps_process+0x32c>)
		elements_left_to_process -= 1;
   2cbd4:	3b01      	subs	r3, #1
   2cbd6:	f8aa 3000 	strh.w	r3, [sl]
		element->type = element_type;
   2cbda:	f892 8000 	ldrb.w	r8, [r2]
	size_t len = 0;
   2cbde:	2300      	movs	r3, #0
   2cbe0:	e02b      	b.n	2cc3a <nrf_cloud_agps_process+0xea>
		element->utc = (struct nrf_cloud_agps_utc *)(buf + len);
   2cbe2:	441c      	add	r4, r3
		len += sizeof(struct nrf_cloud_agps_utc);
   2cbe4:	330e      	adds	r3, #14
		if (element.type == NRF_CLOUD_AGPS_GPS_TOWS) {
   2cbe6:	f1b8 0f06 	cmp.w	r8, #6
		parsed_len += element_size;
   2cbea:	441e      	add	r6, r3
		if (element.type == NRF_CLOUD_AGPS_GPS_TOWS) {
   2cbec:	d152      	bne.n	2cc94 <nrf_cloud_agps_process+0x144>
			memcpy(&sys_time.sv_tow[element.tow->sv_id - 1],
   2cbee:	7823      	ldrb	r3, [r4, #0]
   2cbf0:	a84a      	add	r0, sp, #296	; 0x128
   2cbf2:	6821      	ldr	r1, [r4, #0]
   2cbf4:	1e5a      	subs	r2, r3, #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2cbf6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   2cbfa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
   2cbfe:	6019      	str	r1, [r3, #0]
			if (element.tow->flags || element.tow->tlm) {
   2cc00:	78e3      	ldrb	r3, [r4, #3]
   2cc02:	b913      	cbnz	r3, 2cc0a <nrf_cloud_agps_process+0xba>
   2cc04:	f8b4 3001 	ldrh.w	r3, [r4, #1]
   2cc08:	b11b      	cbz	r3, 2cc12 <nrf_cloud_agps_process+0xc2>
				sv_mask |= 1 << (element.tow->sv_id - 1);
   2cc0a:	2301      	movs	r3, #1
   2cc0c:	4093      	lsls	r3, r2
   2cc0e:	ea49 0903 	orr.w	r9, r9, r3
	while (parsed_len < buf_len) {
   2cc12:	9b00      	ldr	r3, [sp, #0]
   2cc14:	42b3      	cmp	r3, r6
   2cc16:	f240 8121 	bls.w	2ce5c <nrf_cloud_agps_process+0x30c>
	if (elements_left_to_process == 0) {
   2cc1a:	f8ba 3000 	ldrh.w	r3, [sl]
			get_next_agps_element(&element, &buf[parsed_len]);
   2cc1e:	19bc      	adds	r4, r7, r6
	if (elements_left_to_process == 0) {
   2cc20:	2b00      	cmp	r3, #0
   2cc22:	d1d6      	bne.n	2cbd2 <nrf_cloud_agps_process+0x82>
		element_type = element->type;
   2cc24:	4b95      	ldr	r3, [pc, #596]	; (2ce7c <nrf_cloud_agps_process+0x32c>)
			(enum nrf_cloud_agps_type)buf[NRF_CLOUD_AGPS_BIN_TYPE_OFFSET];
   2cc26:	f817 8006 	ldrb.w	r8, [r7, r6]
		element_type = element->type;
   2cc2a:	f883 8000 	strb.w	r8, [r3]
			*(uint16_t *)&buf[NRF_CLOUD_AGPS_BIN_COUNT_OFFSET] - 1;
   2cc2e:	f8b4 3001 	ldrh.w	r3, [r4, #1]
   2cc32:	3b01      	subs	r3, #1
		elements_left_to_process =
   2cc34:	f8aa 3000 	strh.w	r3, [sl]
		len += NRF_CLOUD_AGPS_BIN_TYPE_SIZE +
   2cc38:	2303      	movs	r3, #3
	switch (element->type) {
   2cc3a:	f108 32ff 	add.w	r2, r8, #4294967295
   2cc3e:	9201      	str	r2, [sp, #4]
   2cc40:	2a08      	cmp	r2, #8
   2cc42:	f200 810b 	bhi.w	2ce5c <nrf_cloud_agps_process+0x30c>
   2cc46:	a101      	add	r1, pc, #4	; (adr r1, 2cc4c <nrf_cloud_agps_process+0xfc>)
   2cc48:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   2cc4c:	0002cbe3 	.word	0x0002cbe3
   2cc50:	0002cc71 	.word	0x0002cc71
   2cc54:	0002cc77 	.word	0x0002cc77
   2cc58:	0002cc7d 	.word	0x0002cc7d
   2cc5c:	0002ce5d 	.word	0x0002ce5d
   2cc60:	0002cc8f 	.word	0x0002cc8f
   2cc64:	0002cc83 	.word	0x0002cc83
   2cc68:	0002cc89 	.word	0x0002cc89
   2cc6c:	0002cc8f 	.word	0x0002cc8f
		element->ephemeris = (struct nrf_cloud_agps_ephemeris *)(buf + len);
   2cc70:	441c      	add	r4, r3
		len += sizeof(struct nrf_cloud_agps_ephemeris);
   2cc72:	333e      	adds	r3, #62	; 0x3e
		break;
   2cc74:	e7b7      	b.n	2cbe6 <nrf_cloud_agps_process+0x96>
		element->almanac = (struct nrf_cloud_agps_almanac *)(buf + len);
   2cc76:	441c      	add	r4, r3
		len += sizeof(struct nrf_cloud_agps_almanac);
   2cc78:	331f      	adds	r3, #31
		break;
   2cc7a:	e7b4      	b.n	2cbe6 <nrf_cloud_agps_process+0x96>
			(struct nrf_cloud_agps_klobuchar *)(buf + len);
   2cc7c:	441c      	add	r4, r3
		len += sizeof(struct nrf_cloud_agps_klobuchar);
   2cc7e:	3308      	adds	r3, #8
		break;
   2cc80:	e7b1      	b.n	2cbe6 <nrf_cloud_agps_process+0x96>
			(struct nrf_cloud_agps_system_time *)(buf + len);
   2cc82:	441c      	add	r4, r3
		len += sizeof(struct nrf_cloud_agps_system_time) -
   2cc84:	3310      	adds	r3, #16
		break;
   2cc86:	e7ae      	b.n	2cbe6 <nrf_cloud_agps_process+0x96>
		element->location = (struct nrf_cloud_agps_location *)(buf + len);
   2cc88:	441c      	add	r4, r3
		len += sizeof(struct nrf_cloud_agps_location);
   2cc8a:	330f      	adds	r3, #15
		break;
   2cc8c:	e7ab      	b.n	2cbe6 <nrf_cloud_agps_process+0x96>
			(struct nrf_cloud_agps_integrity *)(buf + len);
   2cc8e:	441c      	add	r4, r3
		len += sizeof(struct nrf_cloud_agps_integrity);
   2cc90:	3304      	adds	r3, #4
		break;
   2cc92:	e7a8      	b.n	2cbe6 <nrf_cloud_agps_process+0x96>
		} else if (element.type == NRF_CLOUD_AGPS_GPS_SYSTEM_CLOCK) {
   2cc94:	f1b8 0f07 	cmp.w	r8, #7
   2cc98:	d108      	bne.n	2ccac <nrf_cloud_agps_process+0x15c>
			memcpy(&sys_time, element.time_and_tow,
   2cc9a:	6820      	ldr	r0, [r4, #0]
   2cc9c:	6861      	ldr	r1, [r4, #4]
   2cc9e:	ab03      	add	r3, sp, #12
   2cca0:	c303      	stmia	r3!, {r0, r1}
			sys_time.sv_mask = sv_mask | element.time_and_tow->sv_mask;
   2cca2:	68a3      	ldr	r3, [r4, #8]
			element.time_and_tow = &sys_time;
   2cca4:	ac03      	add	r4, sp, #12
			sys_time.sv_mask = sv_mask | element.time_and_tow->sv_mask;
   2cca6:	ea43 0309 	orr.w	r3, r3, r9
   2ccaa:	9305      	str	r3, [sp, #20]
	return z_impl_k_mutex_lock(mutex, timeout);
   2ccac:	f04f 32ff 	mov.w	r2, #4294967295
   2ccb0:	f04f 33ff 	mov.w	r3, #4294967295
   2ccb4:	4658      	mov	r0, fp
   2ccb6:	f009 fdfd 	bl	368b4 <z_impl_k_mutex_lock>
   2ccba:	2300      	movs	r3, #0
   2ccbc:	4a70      	ldr	r2, [pc, #448]	; (2ce80 <nrf_cloud_agps_process+0x330>)
   2ccbe:	e8d2 1fef 	ldaex	r1, [r2]
   2ccc2:	e8c2 3fe0 	stlex	r0, r3, [r2]
   2ccc6:	2800      	cmp	r0, #0
   2ccc8:	d1f9      	bne.n	2ccbe <nrf_cloud_agps_process+0x16e>
	switch (agps_data->type) {
   2ccca:	9a01      	ldr	r2, [sp, #4]
   2cccc:	2a08      	cmp	r2, #8
   2ccce:	f200 81a0 	bhi.w	2d012 <nrf_cloud_agps_process+0x4c2>
   2ccd2:	e8df f012 	tbh	[pc, r2, lsl #1]
   2ccd6:	0009      	.short	0x0009
   2ccd8:	00db002a 	.word	0x00db002a
   2ccdc:	019e011e 	.word	0x019e011e
   2cce0:	013e019e 	.word	0x013e019e
   2cce4:	01950171 	.word	0x01950171
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_GPS_UTC_REQUEST;
   2cce8:	4a66      	ldr	r2, [pc, #408]	; (2ce84 <nrf_cloud_agps_process+0x334>)
   2ccea:	6893      	ldr	r3, [r2, #8]
   2ccec:	f043 0301 	orr.w	r3, r3, #1
   2ccf0:	6093      	str	r3, [r2, #8]
	dst->a1		= src->utc->a1;
   2ccf2:	6823      	ldr	r3, [r4, #0]
	dst->delta_tls	= src->utc->delta_tls;
   2ccf4:	f994 000a 	ldrsb.w	r0, [r4, #10]
	dst->a1		= src->utc->a1;
   2ccf8:	9326      	str	r3, [sp, #152]	; 0x98
	dst->a0		= src->utc->a0;
   2ccfa:	6863      	ldr	r3, [r4, #4]
	dst->delta_tls	= src->utc->delta_tls;
   2ccfc:	f88d 00a2 	strb.w	r0, [sp, #162]	; 0xa2
	dst->a0		= src->utc->a0;
   2cd00:	9327      	str	r3, [sp, #156]	; 0x9c
	dst->tot	= src->utc->tot;
   2cd02:	7a23      	ldrb	r3, [r4, #8]
   2cd04:	f88d 30a0 	strb.w	r3, [sp, #160]	; 0xa0
	dst->wn_t	= src->utc->wn_t;
   2cd08:	7a63      	ldrb	r3, [r4, #9]
   2cd0a:	f88d 30a1 	strb.w	r3, [sp, #161]	; 0xa1
	dst->wn_lsf	= src->utc->wn_lsf;
   2cd0e:	7ae3      	ldrb	r3, [r4, #11]
   2cd10:	f88d 30a3 	strb.w	r3, [sp, #163]	; 0xa3
	dst->dn		= src->utc->dn;
   2cd14:	7b23      	ldrb	r3, [r4, #12]
   2cd16:	f88d 30a4 	strb.w	r3, [sp, #164]	; 0xa4
	dst->delta_tlsf	= src->utc->delta_tlsf;
   2cd1a:	7b63      	ldrb	r3, [r4, #13]
   2cd1c:	f88d 30a5 	strb.w	r3, [sp, #165]	; 0xa5
		nrf_cloud_pgps_set_leap_seconds(utc.delta_tls);
   2cd20:	f001 fee0 	bl	2eae4 <nrf_cloud_pgps_set_leap_seconds>
		return send_to_modem(&utc, sizeof(utc),
   2cd24:	2201      	movs	r2, #1
		return send_to_modem(&location, sizeof(location),
   2cd26:	2110      	movs	r1, #16
   2cd28:	e088      	b.n	2ce3c <nrf_cloud_agps_process+0x2ec>
		processed.sv_mask_ephe |= (1 << (agps_data->ephemeris->sv_id - 1));
   2cd2a:	2301      	movs	r3, #1
   2cd2c:	7822      	ldrb	r2, [r4, #0]
   2cd2e:	4955      	ldr	r1, [pc, #340]	; (2ce84 <nrf_cloud_agps_process+0x334>)
   2cd30:	1e50      	subs	r0, r2, #1
   2cd32:	4083      	lsls	r3, r0
   2cd34:	6808      	ldr	r0, [r1, #0]
   2cd36:	4303      	orrs	r3, r0
   2cd38:	600b      	str	r3, [r1, #0]
		if (agps_data->ephemeris->health ==
   2cd3a:	7863      	ldrb	r3, [r4, #1]
   2cd3c:	2bff      	cmp	r3, #255	; 0xff
   2cd3e:	f000 816d 	beq.w	2d01c <nrf_cloud_agps_process+0x4cc>
	dst->sv_id	= src->ephemeris->sv_id;
   2cd42:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
	dst->health	= src->ephemeris->health;
   2cd46:	f88d 3099 	strb.w	r3, [sp, #153]	; 0x99
	dst->iodc	= src->ephemeris->iodc;
   2cd4a:	78e2      	ldrb	r2, [r4, #3]
   2cd4c:	78a3      	ldrb	r3, [r4, #2]
		return send_to_modem(&ephemeris, sizeof(ephemeris),
   2cd4e:	2148      	movs	r1, #72	; 0x48
	dst->iodc	= src->ephemeris->iodc;
   2cd50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cd54:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
	dst->toc	= src->ephemeris->toc;
   2cd58:	7962      	ldrb	r2, [r4, #5]
   2cd5a:	7923      	ldrb	r3, [r4, #4]
   2cd5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cd60:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
	dst->af2	= src->ephemeris->af2;
   2cd64:	79a3      	ldrb	r3, [r4, #6]
   2cd66:	f88d 309e 	strb.w	r3, [sp, #158]	; 0x9e
	dst->af1	= src->ephemeris->af1;
   2cd6a:	7a22      	ldrb	r2, [r4, #8]
   2cd6c:	79e3      	ldrb	r3, [r4, #7]
   2cd6e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cd72:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
	dst->af0	= src->ephemeris->af0;
   2cd76:	f8d4 3009 	ldr.w	r3, [r4, #9]
   2cd7a:	9329      	str	r3, [sp, #164]	; 0xa4
	dst->tgd	= src->ephemeris->tgd;
   2cd7c:	7b63      	ldrb	r3, [r4, #13]
   2cd7e:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
	dst->ura	= src->ephemeris->ura;
   2cd82:	7ba3      	ldrb	r3, [r4, #14]
   2cd84:	f88d 30a9 	strb.w	r3, [sp, #169]	; 0xa9
	dst->fit_int	= src->ephemeris->fit_int;
   2cd88:	7be3      	ldrb	r3, [r4, #15]
   2cd8a:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
	dst->toe	= src->ephemeris->toe;
   2cd8e:	7c62      	ldrb	r2, [r4, #17]
   2cd90:	7c23      	ldrb	r3, [r4, #16]
   2cd92:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cd96:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
	dst->w		= src->ephemeris->w;
   2cd9a:	f8d4 3012 	ldr.w	r3, [r4, #18]
   2cd9e:	932c      	str	r3, [sp, #176]	; 0xb0
	dst->delta_n	= src->ephemeris->delta_n;
   2cda0:	7de2      	ldrb	r2, [r4, #23]
   2cda2:	7da3      	ldrb	r3, [r4, #22]
   2cda4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cda8:	f8ad 30b4 	strh.w	r3, [sp, #180]	; 0xb4
	dst->m0		= src->ephemeris->m0;
   2cdac:	69a3      	ldr	r3, [r4, #24]
   2cdae:	932e      	str	r3, [sp, #184]	; 0xb8
	dst->omega_dot	= src->ephemeris->omega_dot;
   2cdb0:	69e3      	ldr	r3, [r4, #28]
   2cdb2:	932f      	str	r3, [sp, #188]	; 0xbc
	dst->e		= src->ephemeris->e;
   2cdb4:	6a23      	ldr	r3, [r4, #32]
   2cdb6:	9330      	str	r3, [sp, #192]	; 0xc0
	dst->idot	= src->ephemeris->idot;
   2cdb8:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   2cdbc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   2cdc0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cdc4:	f8ad 30c4 	strh.w	r3, [sp, #196]	; 0xc4
	dst->sqrt_a	= src->ephemeris->sqrt_a;
   2cdc8:	f8d4 3026 	ldr.w	r3, [r4, #38]	; 0x26
   2cdcc:	9332      	str	r3, [sp, #200]	; 0xc8
	dst->i0		= src->ephemeris->i0;
   2cdce:	f8d4 302a 	ldr.w	r3, [r4, #42]	; 0x2a
   2cdd2:	9333      	str	r3, [sp, #204]	; 0xcc
	dst->omega0	= src->ephemeris->omega0;
   2cdd4:	f8d4 302e 	ldr.w	r3, [r4, #46]	; 0x2e
   2cdd8:	9334      	str	r3, [sp, #208]	; 0xd0
	dst->crs	= src->ephemeris->crs;
   2cdda:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
   2cdde:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   2cde2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cde6:	f8ad 30d4 	strh.w	r3, [sp, #212]	; 0xd4
	dst->cis	= src->ephemeris->cis;
   2cdea:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
   2cdee:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   2cdf2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cdf6:	f8ad 30d6 	strh.w	r3, [sp, #214]	; 0xd6
	dst->cus	= src->ephemeris->cus;
   2cdfa:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
   2cdfe:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   2ce02:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2ce06:	f8ad 30d8 	strh.w	r3, [sp, #216]	; 0xd8
	dst->crc	= src->ephemeris->crc;
   2ce0a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
   2ce0e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2ce12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2ce16:	f8ad 30da 	strh.w	r3, [sp, #218]	; 0xda
	dst->cic	= src->ephemeris->cic;
   2ce1a:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
   2ce1e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   2ce22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2ce26:	f8ad 30dc 	strh.w	r3, [sp, #220]	; 0xdc
	dst->cuc	= src->ephemeris->cuc;
   2ce2a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
   2ce2e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   2ce32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		return send_to_modem(&ephemeris, sizeof(ephemeris),
   2ce36:	2202      	movs	r2, #2
	dst->cuc	= src->ephemeris->cuc;
   2ce38:	f8ad 30de 	strh.w	r3, [sp, #222]	; 0xde
		return send_to_modem(&ephemeris, sizeof(ephemeris),
   2ce3c:	a826      	add	r0, sp, #152	; 0x98
   2ce3e:	f7ff fd9f 	bl	2c980 <send_to_modem>
   2ce42:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   2ce44:	4658      	mov	r0, fp
   2ce46:	f009 fe07 	bl	36a58 <z_impl_k_mutex_unlock>
		if (err) {
   2ce4a:	2c00      	cmp	r4, #0
   2ce4c:	f43f aee1 	beq.w	2cc12 <nrf_cloud_agps_process+0xc2>
			LOG_ERR("Failed to send data to modem, error: %d", err);
   2ce50:	4622      	mov	r2, r4
   2ce52:	2145      	movs	r1, #69	; 0x45
   2ce54:	480c      	ldr	r0, [pc, #48]	; (2ce88 <nrf_cloud_agps_process+0x338>)
   2ce56:	f00f fe2b 	bl	3cab0 <z_log_minimal_printk>
   2ce5a:	4625      	mov	r5, r4
	z_impl_k_sem_give(sem);
   2ce5c:	4805      	ldr	r0, [pc, #20]	; (2ce74 <nrf_cloud_agps_process+0x324>)
   2ce5e:	f009 ff7b 	bl	36d58 <z_impl_k_sem_give>
}
   2ce62:	e694      	b.n	2cb8e <nrf_cloud_agps_process+0x3e>
   2ce64:	000435de 	.word	0x000435de
   2ce68:	00048975 	.word	0x00048975
   2ce6c:	000489e6 	.word	0x000489e6
   2ce70:	00048a0e 	.word	0x00048a0e
   2ce74:	20015000 	.word	0x20015000
   2ce78:	00048a33 	.word	0x00048a33
   2ce7c:	2001c957 	.word	0x2001c957
   2ce80:	2001a110 	.word	0x2001a110
   2ce84:	2001a104 	.word	0x2001a104
   2ce88:	00048a78 	.word	0x00048a78
		processed.sv_mask_alm |= (1 << (agps_data->almanac->sv_id - 1));
   2ce8c:	2301      	movs	r3, #1
   2ce8e:	7822      	ldrb	r2, [r4, #0]
   2ce90:	4969      	ldr	r1, [pc, #420]	; (2d038 <nrf_cloud_agps_process+0x4e8>)
   2ce92:	1e50      	subs	r0, r2, #1
   2ce94:	4083      	lsls	r3, r0
   2ce96:	6848      	ldr	r0, [r1, #4]
	dst->sv_id	= src->almanac->sv_id;
   2ce98:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
		processed.sv_mask_alm |= (1 << (agps_data->almanac->sv_id - 1));
   2ce9c:	4303      	orrs	r3, r0
   2ce9e:	604b      	str	r3, [r1, #4]
	dst->wn		= src->almanac->wn;
   2cea0:	7863      	ldrb	r3, [r4, #1]
		return send_to_modem(&almanac, sizeof(almanac),
   2cea2:	2120      	movs	r1, #32
	dst->wn		= src->almanac->wn;
   2cea4:	f88d 3099 	strb.w	r3, [sp, #153]	; 0x99
	dst->toa	= src->almanac->toa;
   2cea8:	78a3      	ldrb	r3, [r4, #2]
   2ceaa:	f88d 309a 	strb.w	r3, [sp, #154]	; 0x9a
	dst->ioda	= src->almanac->ioda;
   2ceae:	78e3      	ldrb	r3, [r4, #3]
   2ceb0:	f88d 309b 	strb.w	r3, [sp, #155]	; 0x9b
	dst->e		= src->almanac->e;
   2ceb4:	7962      	ldrb	r2, [r4, #5]
   2ceb6:	7923      	ldrb	r3, [r4, #4]
   2ceb8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cebc:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
	dst->delta_i	= src->almanac->delta_i;
   2cec0:	79e2      	ldrb	r2, [r4, #7]
   2cec2:	79a3      	ldrb	r3, [r4, #6]
   2cec4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cec8:	f8ad 309e 	strh.w	r3, [sp, #158]	; 0x9e
	dst->omega_dot	= src->almanac->omega_dot;
   2cecc:	7a62      	ldrb	r2, [r4, #9]
   2cece:	7a23      	ldrb	r3, [r4, #8]
   2ced0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2ced4:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
	dst->sv_health	= src->almanac->sv_health;
   2ced8:	7aa3      	ldrb	r3, [r4, #10]
   2ceda:	f88d 30a2 	strb.w	r3, [sp, #162]	; 0xa2
	dst->sqrt_a	= src->almanac->sqrt_a;
   2cede:	f8d4 300b 	ldr.w	r3, [r4, #11]
   2cee2:	9329      	str	r3, [sp, #164]	; 0xa4
	dst->omega0	= src->almanac->omega0;
   2cee4:	f8d4 300f 	ldr.w	r3, [r4, #15]
   2cee8:	932a      	str	r3, [sp, #168]	; 0xa8
	dst->w		= src->almanac->w;
   2ceea:	f8d4 3013 	ldr.w	r3, [r4, #19]
   2ceee:	932b      	str	r3, [sp, #172]	; 0xac
	dst->m0		= src->almanac->m0;
   2cef0:	f8d4 3017 	ldr.w	r3, [r4, #23]
   2cef4:	932c      	str	r3, [sp, #176]	; 0xb0
	dst->af0	= src->almanac->af0;
   2cef6:	7f22      	ldrb	r2, [r4, #28]
   2cef8:	7ee3      	ldrb	r3, [r4, #27]
   2cefa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cefe:	f8ad 30b4 	strh.w	r3, [sp, #180]	; 0xb4
	dst->af1	= src->almanac->af1;
   2cf02:	7f63      	ldrb	r3, [r4, #29]
   2cf04:	7fa2      	ldrb	r2, [r4, #30]
   2cf06:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cf0a:	f8ad 30b6 	strh.w	r3, [sp, #182]	; 0xb6
		return send_to_modem(&almanac, sizeof(almanac),
   2cf0e:	2203      	movs	r2, #3
   2cf10:	e794      	b.n	2ce3c <nrf_cloud_agps_process+0x2ec>
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_KLOBUCHAR_REQUEST;
   2cf12:	4a49      	ldr	r2, [pc, #292]	; (2d038 <nrf_cloud_agps_process+0x4e8>)
		return send_to_modem(&klobuchar, sizeof(klobuchar),
   2cf14:	2108      	movs	r1, #8
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_KLOBUCHAR_REQUEST;
   2cf16:	6893      	ldr	r3, [r2, #8]
   2cf18:	f043 0302 	orr.w	r3, r3, #2
   2cf1c:	6093      	str	r3, [r2, #8]
	dst->alpha0	= src->ion_correction.klobuchar->alpha0;
   2cf1e:	7823      	ldrb	r3, [r4, #0]
		return send_to_modem(&klobuchar, sizeof(klobuchar),
   2cf20:	2204      	movs	r2, #4
	dst->alpha0	= src->ion_correction.klobuchar->alpha0;
   2cf22:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
	dst->alpha1	= src->ion_correction.klobuchar->alpha1;
   2cf26:	7863      	ldrb	r3, [r4, #1]
   2cf28:	f88d 3099 	strb.w	r3, [sp, #153]	; 0x99
	dst->alpha2	= src->ion_correction.klobuchar->alpha2;
   2cf2c:	78a3      	ldrb	r3, [r4, #2]
   2cf2e:	f88d 309a 	strb.w	r3, [sp, #154]	; 0x9a
	dst->alpha3	= src->ion_correction.klobuchar->alpha3;
   2cf32:	78e3      	ldrb	r3, [r4, #3]
   2cf34:	f88d 309b 	strb.w	r3, [sp, #155]	; 0x9b
	dst->beta0	= src->ion_correction.klobuchar->beta0;
   2cf38:	7923      	ldrb	r3, [r4, #4]
   2cf3a:	f88d 309c 	strb.w	r3, [sp, #156]	; 0x9c
	dst->beta1	= src->ion_correction.klobuchar->beta1;
   2cf3e:	7963      	ldrb	r3, [r4, #5]
   2cf40:	f88d 309d 	strb.w	r3, [sp, #157]	; 0x9d
	dst->beta2	= src->ion_correction.klobuchar->beta2;
   2cf44:	79a3      	ldrb	r3, [r4, #6]
   2cf46:	f88d 309e 	strb.w	r3, [sp, #158]	; 0x9e
	dst->beta3	= src->ion_correction.klobuchar->beta3;
   2cf4a:	79e3      	ldrb	r3, [r4, #7]
   2cf4c:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
		return send_to_modem(&klobuchar, sizeof(klobuchar),
   2cf50:	e774      	b.n	2ce3c <nrf_cloud_agps_process+0x2ec>
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST;
   2cf52:	4a39      	ldr	r2, [pc, #228]	; (2d038 <nrf_cloud_agps_process+0x4e8>)
   2cf54:	6893      	ldr	r3, [r2, #8]
   2cf56:	f043 0308 	orr.w	r3, r3, #8
   2cf5a:	6093      	str	r3, [r2, #8]
	dst->date_day		= src->time_and_tow->date_day;
   2cf5c:	7862      	ldrb	r2, [r4, #1]
   2cf5e:	7823      	ldrb	r3, [r4, #0]
   2cf60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cf64:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
	dst->time_full_s	= src->time_and_tow->time_full_s;
   2cf68:	f8d4 3002 	ldr.w	r3, [r4, #2]
   2cf6c:	9327      	str	r3, [sp, #156]	; 0x9c
	dst->time_frac_ms	= src->time_and_tow->time_frac_ms;
   2cf6e:	79a3      	ldrb	r3, [r4, #6]
   2cf70:	79e2      	ldrb	r2, [r4, #7]
   2cf72:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cf76:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
	dst->sv_mask		= src->time_and_tow->sv_mask;
   2cf7a:	68a1      	ldr	r1, [r4, #8]
   2cf7c:	9129      	str	r1, [sp, #164]	; 0xa4
	if (src->time_and_tow->sv_mask == 0U) {
   2cf7e:	b931      	cbnz	r1, 2cf8e <nrf_cloud_agps_process+0x43e>
		memset(dst->sv_tow, 0, sizeof(dst->sv_tow));
   2cf80:	2280      	movs	r2, #128	; 0x80
   2cf82:	a82a      	add	r0, sp, #168	; 0xa8
   2cf84:	f014 fa2e 	bl	413e4 <memset>
		return send_to_modem(&time_and_tow, sizeof(time_and_tow),
   2cf88:	2206      	movs	r2, #6
   2cf8a:	2190      	movs	r1, #144	; 0x90
   2cf8c:	e756      	b.n	2ce3c <nrf_cloud_agps_process+0x2ec>
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   2cf8e:	2300      	movs	r3, #0
   2cf90:	aa26      	add	r2, sp, #152	; 0x98
		dst->sv_tow[i].flags = src->time_and_tow->sv_tow[i].flags;
   2cf92:	f104 000f 	add.w	r0, r4, #15
   2cf96:	f810 1023 	ldrb.w	r1, [r0, r3, lsl #2]
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   2cf9a:	3204      	adds	r2, #4
		dst->sv_tow[i].flags = src->time_and_tow->sv_tow[i].flags;
   2cf9c:	7391      	strb	r1, [r2, #14]
		dst->sv_tow[i].tlm = src->time_and_tow->sv_tow[i].tlm;
   2cf9e:	1c99      	adds	r1, r3, #2
   2cfa0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   2cfa4:	f891 c005 	ldrb.w	ip, [r1, #5]
   2cfa8:	7989      	ldrb	r1, [r1, #6]
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   2cfaa:	3301      	adds	r3, #1
		dst->sv_tow[i].tlm = src->time_and_tow->sv_tow[i].tlm;
   2cfac:	ea4c 2101 	orr.w	r1, ip, r1, lsl #8
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   2cfb0:	2b20      	cmp	r3, #32
		dst->sv_tow[i].tlm = src->time_and_tow->sv_tow[i].tlm;
   2cfb2:	8191      	strh	r1, [r2, #12]
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   2cfb4:	d1ef      	bne.n	2cf96 <nrf_cloud_agps_process+0x446>
   2cfb6:	e7e7      	b.n	2cf88 <nrf_cloud_agps_process+0x438>
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_POSITION_REQUEST;
   2cfb8:	4a1f      	ldr	r2, [pc, #124]	; (2d038 <nrf_cloud_agps_process+0x4e8>)
		struct nrf_modem_gnss_agps_data_location location = {0};
   2cfba:	f88d 30a7 	strb.w	r3, [sp, #167]	; 0xa7
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_POSITION_REQUEST;
   2cfbe:	6893      	ldr	r3, [r2, #8]
	dst->latitude		= src->location->latitude;
   2cfc0:	6820      	ldr	r0, [r4, #0]
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_POSITION_REQUEST;
   2cfc2:	f043 0310 	orr.w	r3, r3, #16
   2cfc6:	6093      	str	r3, [r2, #8]
	dst->latitude		= src->location->latitude;
   2cfc8:	9026      	str	r0, [sp, #152]	; 0x98
	dst->longitude		= src->location->longitude;
   2cfca:	6861      	ldr	r1, [r4, #4]
   2cfcc:	9127      	str	r1, [sp, #156]	; 0x9c
	dst->altitude		= src->location->altitude;
   2cfce:	7a62      	ldrb	r2, [r4, #9]
   2cfd0:	7a23      	ldrb	r3, [r4, #8]
   2cfd2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2cfd6:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
	dst->unc_semimajor	= src->location->unc_semimajor;
   2cfda:	7aa3      	ldrb	r3, [r4, #10]
   2cfdc:	f88d 30a2 	strb.w	r3, [sp, #162]	; 0xa2
	dst->unc_semiminor	= src->location->unc_semiminor;
   2cfe0:	7ae3      	ldrb	r3, [r4, #11]
   2cfe2:	f88d 30a3 	strb.w	r3, [sp, #163]	; 0xa3
	dst->orientation_major	= src->location->orientation_major;
   2cfe6:	7b23      	ldrb	r3, [r4, #12]
   2cfe8:	f88d 30a4 	strb.w	r3, [sp, #164]	; 0xa4
	dst->unc_altitude	= src->location->unc_altitude;
   2cfec:	7b63      	ldrb	r3, [r4, #13]
   2cfee:	f88d 30a5 	strb.w	r3, [sp, #165]	; 0xa5
	dst->confidence		= src->location->confidence;
   2cff2:	7ba3      	ldrb	r3, [r4, #14]
   2cff4:	f88d 30a6 	strb.w	r3, [sp, #166]	; 0xa6
		nrf_cloud_pgps_set_location_normalized(location.latitude,
   2cff8:	f001 fdd6 	bl	2eba8 <nrf_cloud_pgps_set_location_normalized>
		return send_to_modem(&location, sizeof(location),
   2cffc:	2207      	movs	r2, #7
   2cffe:	e692      	b.n	2cd26 <nrf_cloud_agps_process+0x1d6>
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_INTEGRITY_REQUEST;
   2d000:	4a0d      	ldr	r2, [pc, #52]	; (2d038 <nrf_cloud_agps_process+0x4e8>)
		return send_to_modem(agps_data->integrity,
   2d002:	2104      	movs	r1, #4
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_INTEGRITY_REQUEST;
   2d004:	6893      	ldr	r3, [r2, #8]
		return send_to_modem(agps_data->integrity,
   2d006:	4620      	mov	r0, r4
		processed.data_flags |= NRF_MODEM_GNSS_AGPS_INTEGRITY_REQUEST;
   2d008:	f043 0320 	orr.w	r3, r3, #32
   2d00c:	6093      	str	r3, [r2, #8]
		return send_to_modem(agps_data->integrity,
   2d00e:	2208      	movs	r2, #8
   2d010:	e715      	b.n	2ce3e <nrf_cloud_agps_process+0x2ee>
		LOG_WRN("Unknown AGPS data type: %d", agps_data->type);
   2d012:	4642      	mov	r2, r8
   2d014:	2157      	movs	r1, #87	; 0x57
   2d016:	4809      	ldr	r0, [pc, #36]	; (2d03c <nrf_cloud_agps_process+0x4ec>)
   2d018:	f00f fd4a 	bl	3cab0 <z_log_minimal_printk>
	return 0;
   2d01c:	2400      	movs	r4, #0
   2d01e:	e711      	b.n	2ce44 <nrf_cloud_agps_process+0x2f4>
	uint32_t sv_mask = 0;
   2d020:	4681      	mov	r9, r0
	if (elements_left_to_process == 0) {
   2d022:	f8df a01c 	ldr.w	sl, [pc, #28]	; 2d040 <nrf_cloud_agps_process+0x4f0>
	return z_impl_k_mutex_lock(mutex, timeout);
   2d026:	f8df b01c 	ldr.w	fp, [pc, #28]	; 2d044 <nrf_cloud_agps_process+0x4f4>
   2d02a:	e5f2      	b.n	2cc12 <nrf_cloud_agps_process+0xc2>
		return -EINVAL;
   2d02c:	f06f 0515 	mvn.w	r5, #21
   2d030:	e5ad      	b.n	2cb8e <nrf_cloud_agps_process+0x3e>
		return -ENOMSG;
   2d032:	f06f 0522 	mvn.w	r5, #34	; 0x22
   2d036:	e5aa      	b.n	2cb8e <nrf_cloud_agps_process+0x3e>
   2d038:	2001a104 	.word	0x2001a104
   2d03c:	00048a58 	.word	0x00048a58
   2d040:	2001a590 	.word	0x2001a590
   2d044:	20014f68 	.word	0x20014f68

0002d048 <nrf_cloud_agps_processed>:

void nrf_cloud_agps_processed(struct nrf_modem_gnss_agps_data_frame *received_elements)
{
   2d048:	b510      	push	{r4, lr}
	if (received_elements) {
   2d04a:	4604      	mov	r4, r0
   2d04c:	b188      	cbz	r0, 2d072 <nrf_cloud_agps_processed+0x2a>
   2d04e:	f04f 32ff 	mov.w	r2, #4294967295
   2d052:	f04f 33ff 	mov.w	r3, #4294967295
   2d056:	4807      	ldr	r0, [pc, #28]	; (2d074 <nrf_cloud_agps_processed+0x2c>)
   2d058:	f009 fc2c 	bl	368b4 <z_impl_k_mutex_lock>
   2d05c:	4b06      	ldr	r3, [pc, #24]	; (2d078 <nrf_cloud_agps_processed+0x30>)
   2d05e:	cb03      	ldmia	r3!, {r0, r1}
   2d060:	6020      	str	r0, [r4, #0]
   2d062:	6061      	str	r1, [r4, #4]
   2d064:	6818      	ldr	r0, [r3, #0]
   2d066:	60a0      	str	r0, [r4, #8]
	return z_impl_k_mutex_unlock(mutex);
   2d068:	4802      	ldr	r0, [pc, #8]	; (2d074 <nrf_cloud_agps_processed+0x2c>)
		k_mutex_lock(&processed_lock, K_FOREVER);
		memcpy(received_elements, &processed, sizeof(*received_elements));
		k_mutex_unlock(&processed_lock);
	}
}
   2d06a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2d06e:	f009 bcf3 	b.w	36a58 <z_impl_k_mutex_unlock>
   2d072:	bd10      	pop	{r4, pc}
   2d074:	20014f68 	.word	0x20014f68
   2d078:	2001a104 	.word	0x2001a104

0002d07c <agps_print>:
}

void agps_print(uint16_t type, void *data)
{

	switch (type) {
   2d07c:	3801      	subs	r0, #1
{
   2d07e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d082:	460c      	mov	r4, r1
	switch (type) {
   2d084:	2807      	cmp	r0, #7
   2d086:	f200 816b 	bhi.w	2d360 <agps_print+0x2e4>
   2d08a:	e8df f010 	tbh	[pc, r0, lsl #1]
   2d08e:	0008      	.short	0x0008
   2d090:	00a50030 	.word	0x00a50030
   2d094:	010d00e3 	.word	0x010d00e3
   2d098:	01400112 	.word	0x01400112
   2d09c:	0163      	.short	0x0163
	printk("utc:\n");
   2d09e:	48b1      	ldr	r0, [pc, #708]	; (2d364 <agps_print+0x2e8>)
   2d0a0:	f00f fae9 	bl	3c676 <printk>
	printk("\ta1: %d\n", data->a1);
   2d0a4:	6821      	ldr	r1, [r4, #0]
   2d0a6:	48b0      	ldr	r0, [pc, #704]	; (2d368 <agps_print+0x2ec>)
   2d0a8:	f00f fae5 	bl	3c676 <printk>
	printk("\ta0: %d\n", data->a0);
   2d0ac:	6861      	ldr	r1, [r4, #4]
   2d0ae:	48af      	ldr	r0, [pc, #700]	; (2d36c <agps_print+0x2f0>)
   2d0b0:	f00f fae1 	bl	3c676 <printk>
	printk("\ttot: %d\n", data->tot);
   2d0b4:	7a21      	ldrb	r1, [r4, #8]
   2d0b6:	48ae      	ldr	r0, [pc, #696]	; (2d370 <agps_print+0x2f4>)
   2d0b8:	f00f fadd 	bl	3c676 <printk>
	printk("\twn_t: %d\n", data->wn_t);
   2d0bc:	7a61      	ldrb	r1, [r4, #9]
   2d0be:	48ad      	ldr	r0, [pc, #692]	; (2d374 <agps_print+0x2f8>)
   2d0c0:	f00f fad9 	bl	3c676 <printk>
	printk("\tdelta_tls: %d\n", data->delta_tls);
   2d0c4:	f994 100a 	ldrsb.w	r1, [r4, #10]
   2d0c8:	48ab      	ldr	r0, [pc, #684]	; (2d378 <agps_print+0x2fc>)
   2d0ca:	f00f fad4 	bl	3c676 <printk>
	printk("\twn_lsf: %d\n", data->wn_lsf);
   2d0ce:	7ae1      	ldrb	r1, [r4, #11]
   2d0d0:	48aa      	ldr	r0, [pc, #680]	; (2d37c <agps_print+0x300>)
   2d0d2:	f00f fad0 	bl	3c676 <printk>
	printk("\tdn: %d\n", data->dn);
   2d0d6:	f994 100c 	ldrsb.w	r1, [r4, #12]
   2d0da:	48a9      	ldr	r0, [pc, #676]	; (2d380 <agps_print+0x304>)
   2d0dc:	f00f facb 	bl	3c676 <printk>
	printk("\tdelta_tlsf: %d\n", data->delta_tlsf);
   2d0e0:	f994 100d 	ldrsb.w	r1, [r4, #13]
   2d0e4:	48a7      	ldr	r0, [pc, #668]	; (2d384 <agps_print+0x308>)
	}
	default:
		printk("Unknown AGPS data type\n");
		break;
	}
}
   2d0e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	printk("\tcuc: %d\n", data->cuc);
   2d0ea:	f00f bac4 	b.w	3c676 <printk>
	printk("ephemeris:\n");
   2d0ee:	48a6      	ldr	r0, [pc, #664]	; (2d388 <agps_print+0x30c>)
   2d0f0:	f00f fac1 	bl	3c676 <printk>
	printk("\tsv_id: %d\n", data->sv_id);
   2d0f4:	7821      	ldrb	r1, [r4, #0]
   2d0f6:	48a5      	ldr	r0, [pc, #660]	; (2d38c <agps_print+0x310>)
   2d0f8:	f00f fabd 	bl	3c676 <printk>
	printk("\thealth: %d\n", data->health);
   2d0fc:	7861      	ldrb	r1, [r4, #1]
   2d0fe:	48a4      	ldr	r0, [pc, #656]	; (2d390 <agps_print+0x314>)
   2d100:	f00f fab9 	bl	3c676 <printk>
	printk("\tiodc: %d\n", data->iodc);
   2d104:	8861      	ldrh	r1, [r4, #2]
   2d106:	48a3      	ldr	r0, [pc, #652]	; (2d394 <agps_print+0x318>)
   2d108:	f00f fab5 	bl	3c676 <printk>
	printk("\ttoc: %d\n", data->toc);
   2d10c:	88a1      	ldrh	r1, [r4, #4]
   2d10e:	48a2      	ldr	r0, [pc, #648]	; (2d398 <agps_print+0x31c>)
   2d110:	f00f fab1 	bl	3c676 <printk>
	printk("\taf2: %d\n", data->af2);
   2d114:	f994 1006 	ldrsb.w	r1, [r4, #6]
   2d118:	48a0      	ldr	r0, [pc, #640]	; (2d39c <agps_print+0x320>)
   2d11a:	f00f faac 	bl	3c676 <printk>
	printk("\taf1: %d\n", data->af1);
   2d11e:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   2d122:	489f      	ldr	r0, [pc, #636]	; (2d3a0 <agps_print+0x324>)
   2d124:	f00f faa7 	bl	3c676 <printk>
	printk("\taf0: %d\n", data->af0);
   2d128:	68e1      	ldr	r1, [r4, #12]
   2d12a:	489e      	ldr	r0, [pc, #632]	; (2d3a4 <agps_print+0x328>)
   2d12c:	f00f faa3 	bl	3c676 <printk>
	printk("\ttgd: %d\n", data->tgd);
   2d130:	f994 1010 	ldrsb.w	r1, [r4, #16]
   2d134:	489c      	ldr	r0, [pc, #624]	; (2d3a8 <agps_print+0x32c>)
   2d136:	f00f fa9e 	bl	3c676 <printk>
	printk("\tura: %d\n", data->ura);
   2d13a:	7c61      	ldrb	r1, [r4, #17]
   2d13c:	489b      	ldr	r0, [pc, #620]	; (2d3ac <agps_print+0x330>)
   2d13e:	f00f fa9a 	bl	3c676 <printk>
	printk("\tfit_int: %d\n", data->fit_int);
   2d142:	7ca1      	ldrb	r1, [r4, #18]
   2d144:	489a      	ldr	r0, [pc, #616]	; (2d3b0 <agps_print+0x334>)
   2d146:	f00f fa96 	bl	3c676 <printk>
	printk("\ttoe: %d\n", data->toe);
   2d14a:	8aa1      	ldrh	r1, [r4, #20]
   2d14c:	4899      	ldr	r0, [pc, #612]	; (2d3b4 <agps_print+0x338>)
   2d14e:	f00f fa92 	bl	3c676 <printk>
	printk("\tw: %d\n", data->w);
   2d152:	69a1      	ldr	r1, [r4, #24]
   2d154:	4898      	ldr	r0, [pc, #608]	; (2d3b8 <agps_print+0x33c>)
   2d156:	f00f fa8e 	bl	3c676 <printk>
	printk("\tdelta_n: %d\n", data->delta_n);
   2d15a:	f9b4 101c 	ldrsh.w	r1, [r4, #28]
   2d15e:	4897      	ldr	r0, [pc, #604]	; (2d3bc <agps_print+0x340>)
   2d160:	f00f fa89 	bl	3c676 <printk>
	printk("\tm0: %d\n", data->m0);
   2d164:	6a21      	ldr	r1, [r4, #32]
   2d166:	4896      	ldr	r0, [pc, #600]	; (2d3c0 <agps_print+0x344>)
   2d168:	f00f fa85 	bl	3c676 <printk>
	printk("\tomega_dot: %d\n", data->omega_dot);
   2d16c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2d16e:	4895      	ldr	r0, [pc, #596]	; (2d3c4 <agps_print+0x348>)
   2d170:	f00f fa81 	bl	3c676 <printk>
	printk("\te: %d\n", data->e);
   2d174:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   2d176:	4894      	ldr	r0, [pc, #592]	; (2d3c8 <agps_print+0x34c>)
   2d178:	f00f fa7d 	bl	3c676 <printk>
	printk("\tidot: %d\n", data->idot);
   2d17c:	f9b4 102c 	ldrsh.w	r1, [r4, #44]	; 0x2c
   2d180:	4892      	ldr	r0, [pc, #584]	; (2d3cc <agps_print+0x350>)
   2d182:	f00f fa78 	bl	3c676 <printk>
	printk("\tsqrt_a: %d\n", data->sqrt_a);
   2d186:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2d188:	4891      	ldr	r0, [pc, #580]	; (2d3d0 <agps_print+0x354>)
   2d18a:	f00f fa74 	bl	3c676 <printk>
	printk("\ti0: %d\n", data->i0);
   2d18e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2d190:	4890      	ldr	r0, [pc, #576]	; (2d3d4 <agps_print+0x358>)
   2d192:	f00f fa70 	bl	3c676 <printk>
	printk("\tomega0: %d\n", data->omega0);
   2d196:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   2d198:	488f      	ldr	r0, [pc, #572]	; (2d3d8 <agps_print+0x35c>)
   2d19a:	f00f fa6c 	bl	3c676 <printk>
	printk("\tcrs: %d\n", data->crs);
   2d19e:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
   2d1a2:	488e      	ldr	r0, [pc, #568]	; (2d3dc <agps_print+0x360>)
   2d1a4:	f00f fa67 	bl	3c676 <printk>
	printk("\tcis: %d\n", data->cis);
   2d1a8:	f9b4 103e 	ldrsh.w	r1, [r4, #62]	; 0x3e
   2d1ac:	488c      	ldr	r0, [pc, #560]	; (2d3e0 <agps_print+0x364>)
   2d1ae:	f00f fa62 	bl	3c676 <printk>
	printk("\tcus: %d\n", data->cus);
   2d1b2:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
   2d1b6:	488b      	ldr	r0, [pc, #556]	; (2d3e4 <agps_print+0x368>)
   2d1b8:	f00f fa5d 	bl	3c676 <printk>
	printk("\tcrc: %d\n", data->crc);
   2d1bc:	f9b4 1042 	ldrsh.w	r1, [r4, #66]	; 0x42
   2d1c0:	4889      	ldr	r0, [pc, #548]	; (2d3e8 <agps_print+0x36c>)
   2d1c2:	f00f fa58 	bl	3c676 <printk>
	printk("\tcic: %d\n", data->cic);
   2d1c6:	f9b4 1044 	ldrsh.w	r1, [r4, #68]	; 0x44
   2d1ca:	4888      	ldr	r0, [pc, #544]	; (2d3ec <agps_print+0x370>)
   2d1cc:	f00f fa53 	bl	3c676 <printk>
	printk("\tcuc: %d\n", data->cuc);
   2d1d0:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
   2d1d4:	4886      	ldr	r0, [pc, #536]	; (2d3f0 <agps_print+0x374>)
   2d1d6:	e786      	b.n	2d0e6 <agps_print+0x6a>
	printk("almanac\n");
   2d1d8:	4886      	ldr	r0, [pc, #536]	; (2d3f4 <agps_print+0x378>)
   2d1da:	f00f fa4c 	bl	3c676 <printk>
	printk("\tsv_id: %d\n", data->sv_id);
   2d1de:	7821      	ldrb	r1, [r4, #0]
   2d1e0:	486a      	ldr	r0, [pc, #424]	; (2d38c <agps_print+0x310>)
   2d1e2:	f00f fa48 	bl	3c676 <printk>
	printk("\twn: %d\n", data->wn);
   2d1e6:	7861      	ldrb	r1, [r4, #1]
   2d1e8:	4883      	ldr	r0, [pc, #524]	; (2d3f8 <agps_print+0x37c>)
   2d1ea:	f00f fa44 	bl	3c676 <printk>
	printk("\ttoa: %d\n", data->toa);
   2d1ee:	78a1      	ldrb	r1, [r4, #2]
   2d1f0:	4882      	ldr	r0, [pc, #520]	; (2d3fc <agps_print+0x380>)
   2d1f2:	f00f fa40 	bl	3c676 <printk>
	printk("\tioda: %d\n", data->ioda);
   2d1f6:	78e1      	ldrb	r1, [r4, #3]
   2d1f8:	4881      	ldr	r0, [pc, #516]	; (2d400 <agps_print+0x384>)
   2d1fa:	f00f fa3c 	bl	3c676 <printk>
	printk("\te: %d\n", data->e);
   2d1fe:	88a1      	ldrh	r1, [r4, #4]
   2d200:	4871      	ldr	r0, [pc, #452]	; (2d3c8 <agps_print+0x34c>)
   2d202:	f00f fa38 	bl	3c676 <printk>
	printk("\tdelta_i: %d\n", data->delta_i);
   2d206:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   2d20a:	487e      	ldr	r0, [pc, #504]	; (2d404 <agps_print+0x388>)
   2d20c:	f00f fa33 	bl	3c676 <printk>
	printk("\tomega_dot: %d\n", data->omega_dot);
   2d210:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   2d214:	486b      	ldr	r0, [pc, #428]	; (2d3c4 <agps_print+0x348>)
   2d216:	f00f fa2e 	bl	3c676 <printk>
	printk("\tsv_health: %d\n", data->sv_health);
   2d21a:	7aa1      	ldrb	r1, [r4, #10]
   2d21c:	487a      	ldr	r0, [pc, #488]	; (2d408 <agps_print+0x38c>)
   2d21e:	f00f fa2a 	bl	3c676 <printk>
	printk("\tsqrt_a: %d\n", data->sqrt_a);
   2d222:	68e1      	ldr	r1, [r4, #12]
   2d224:	486a      	ldr	r0, [pc, #424]	; (2d3d0 <agps_print+0x354>)
   2d226:	f00f fa26 	bl	3c676 <printk>
	printk("\tomega0: %d\n", data->omega0);
   2d22a:	6921      	ldr	r1, [r4, #16]
   2d22c:	486a      	ldr	r0, [pc, #424]	; (2d3d8 <agps_print+0x35c>)
   2d22e:	f00f fa22 	bl	3c676 <printk>
	printk("\tw: %d\n", data->w);
   2d232:	6961      	ldr	r1, [r4, #20]
   2d234:	4860      	ldr	r0, [pc, #384]	; (2d3b8 <agps_print+0x33c>)
   2d236:	f00f fa1e 	bl	3c676 <printk>
	printk("\tm0: %d\n", data->m0);
   2d23a:	69a1      	ldr	r1, [r4, #24]
   2d23c:	4860      	ldr	r0, [pc, #384]	; (2d3c0 <agps_print+0x344>)
   2d23e:	f00f fa1a 	bl	3c676 <printk>
	printk("\taf0: %d\n", data->af0);
   2d242:	f9b4 101c 	ldrsh.w	r1, [r4, #28]
   2d246:	4857      	ldr	r0, [pc, #348]	; (2d3a4 <agps_print+0x328>)
   2d248:	f00f fa15 	bl	3c676 <printk>
	printk("\taf1: %d\n", data->af1);
   2d24c:	f9b4 101e 	ldrsh.w	r1, [r4, #30]
   2d250:	4853      	ldr	r0, [pc, #332]	; (2d3a0 <agps_print+0x324>)
   2d252:	e748      	b.n	2d0e6 <agps_print+0x6a>
	printk("klobuchar\n");
   2d254:	486d      	ldr	r0, [pc, #436]	; (2d40c <agps_print+0x390>)
   2d256:	f00f fa0e 	bl	3c676 <printk>
	printk("\talpha0: %d\n", data->alpha0);
   2d25a:	f994 1000 	ldrsb.w	r1, [r4]
   2d25e:	486c      	ldr	r0, [pc, #432]	; (2d410 <agps_print+0x394>)
   2d260:	f00f fa09 	bl	3c676 <printk>
	printk("\talpha1: %d\n", data->alpha1);
   2d264:	f994 1001 	ldrsb.w	r1, [r4, #1]
   2d268:	486a      	ldr	r0, [pc, #424]	; (2d414 <agps_print+0x398>)
   2d26a:	f00f fa04 	bl	3c676 <printk>
	printk("\talpha2: %d\n", data->alpha2);
   2d26e:	f994 1002 	ldrsb.w	r1, [r4, #2]
   2d272:	4869      	ldr	r0, [pc, #420]	; (2d418 <agps_print+0x39c>)
   2d274:	f00f f9ff 	bl	3c676 <printk>
	printk("\talpha3: %d\n", data->alpha3);
   2d278:	f994 1003 	ldrsb.w	r1, [r4, #3]
   2d27c:	4867      	ldr	r0, [pc, #412]	; (2d41c <agps_print+0x3a0>)
   2d27e:	f00f f9fa 	bl	3c676 <printk>
	printk("\tbeta0: %d\n", data->beta0);
   2d282:	f994 1004 	ldrsb.w	r1, [r4, #4]
   2d286:	4866      	ldr	r0, [pc, #408]	; (2d420 <agps_print+0x3a4>)
   2d288:	f00f f9f5 	bl	3c676 <printk>
	printk("\tbeta1: %d\n", data->beta1);
   2d28c:	f994 1005 	ldrsb.w	r1, [r4, #5]
   2d290:	4864      	ldr	r0, [pc, #400]	; (2d424 <agps_print+0x3a8>)
   2d292:	f00f f9f0 	bl	3c676 <printk>
	printk("\tbeta2: %d\n", data->beta2);
   2d296:	f994 1006 	ldrsb.w	r1, [r4, #6]
   2d29a:	4863      	ldr	r0, [pc, #396]	; (2d428 <agps_print+0x3ac>)
   2d29c:	f00f f9eb 	bl	3c676 <printk>
	printk("\tbeta3: %d\n", data->beta3);
   2d2a0:	f994 1007 	ldrsb.w	r1, [r4, #7]
   2d2a4:	4861      	ldr	r0, [pc, #388]	; (2d42c <agps_print+0x3b0>)
   2d2a6:	e71e      	b.n	2d0e6 <agps_print+0x6a>
		printk("nequick unhandled\n");
   2d2a8:	4861      	ldr	r0, [pc, #388]	; (2d430 <agps_print+0x3b4>)
}
   2d2aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		printk("Unknown AGPS data type\n");
   2d2ae:	f00f b9e2 	b.w	3c676 <printk>
	printk("clock_and_tows\n");
   2d2b2:	4860      	ldr	r0, [pc, #384]	; (2d434 <agps_print+0x3b8>)
   2d2b4:	f00f f9df 	bl	3c676 <printk>
	printk("\tdate_day: %d\n", data->date_day);
   2d2b8:	8821      	ldrh	r1, [r4, #0]
   2d2ba:	485f      	ldr	r0, [pc, #380]	; (2d438 <agps_print+0x3bc>)
   2d2bc:	f00f f9db 	bl	3c676 <printk>
	printk("\ttime_full_s: %d\n", data->time_full_s);
   2d2c0:	6861      	ldr	r1, [r4, #4]
   2d2c2:	485e      	ldr	r0, [pc, #376]	; (2d43c <agps_print+0x3c0>)
   2d2c4:	f00f f9d7 	bl	3c676 <printk>
	printk("\ttime_frac_ms: %d\n", data->time_frac_ms);
   2d2c8:	8921      	ldrh	r1, [r4, #8]
   2d2ca:	485d      	ldr	r0, [pc, #372]	; (2d440 <agps_print+0x3c4>)
   2d2cc:	f00f f9d3 	bl	3c676 <printk>
	printk("\tsv_mask: 0x%08x\n", data->sv_mask);
   2d2d0:	68e1      	ldr	r1, [r4, #12]
   2d2d2:	485c      	ldr	r0, [pc, #368]	; (2d444 <agps_print+0x3c8>)
   2d2d4:	f00f f9cf 	bl	3c676 <printk>
	printk("\tsv_tow\n");
   2d2d8:	485b      	ldr	r0, [pc, #364]	; (2d448 <agps_print+0x3cc>)
   2d2da:	f00f f9cc 	bl	3c676 <printk>
	for (size_t i = 0; i < NRF_MODEM_GNSS_AGPS_MAX_SV_TOW; i++) {
   2d2de:	2500      	movs	r5, #0
		printk("\t\tsv_tow[%d]\n", i);
   2d2e0:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 2d484 <agps_print+0x408>
		printk("\t\t\ttlm: %d\n", data->sv_tow[i].tlm);
   2d2e4:	4f59      	ldr	r7, [pc, #356]	; (2d44c <agps_print+0x3d0>)
		printk("\t\t\tflags: 0x%02x\n", data->sv_tow[i].flags);
   2d2e6:	4e5a      	ldr	r6, [pc, #360]	; (2d450 <agps_print+0x3d4>)
		printk("\t\tsv_tow[%d]\n", i);
   2d2e8:	4629      	mov	r1, r5
   2d2ea:	4640      	mov	r0, r8
   2d2ec:	f00f f9c3 	bl	3c676 <printk>
		printk("\t\t\ttlm: %d\n", data->sv_tow[i].tlm);
   2d2f0:	8a21      	ldrh	r1, [r4, #16]
   2d2f2:	4638      	mov	r0, r7
   2d2f4:	f00f f9bf 	bl	3c676 <printk>
	for (size_t i = 0; i < NRF_MODEM_GNSS_AGPS_MAX_SV_TOW; i++) {
   2d2f8:	3501      	adds	r5, #1
		printk("\t\t\tflags: 0x%02x\n", data->sv_tow[i].flags);
   2d2fa:	7ca1      	ldrb	r1, [r4, #18]
   2d2fc:	4630      	mov	r0, r6
   2d2fe:	f00f f9ba 	bl	3c676 <printk>
	for (size_t i = 0; i < NRF_MODEM_GNSS_AGPS_MAX_SV_TOW; i++) {
   2d302:	2d20      	cmp	r5, #32
   2d304:	f104 0404 	add.w	r4, r4, #4
   2d308:	d1ee      	bne.n	2d2e8 <agps_print+0x26c>
}
   2d30a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printk("location\n");
   2d30e:	4851      	ldr	r0, [pc, #324]	; (2d454 <agps_print+0x3d8>)
   2d310:	f00f f9b1 	bl	3c676 <printk>
	printk("\tlatitude: %d\n", data->latitude);
   2d314:	6821      	ldr	r1, [r4, #0]
   2d316:	4850      	ldr	r0, [pc, #320]	; (2d458 <agps_print+0x3dc>)
   2d318:	f00f f9ad 	bl	3c676 <printk>
	printk("\tlongitude: %d\n", data->longitude);
   2d31c:	6861      	ldr	r1, [r4, #4]
   2d31e:	484f      	ldr	r0, [pc, #316]	; (2d45c <agps_print+0x3e0>)
   2d320:	f00f f9a9 	bl	3c676 <printk>
	printk("\taltitude: %d\n", data->altitude);
   2d324:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   2d328:	484d      	ldr	r0, [pc, #308]	; (2d460 <agps_print+0x3e4>)
   2d32a:	f00f f9a4 	bl	3c676 <printk>
	printk("\tunc_semimajor: %d\n", data->unc_semimajor);
   2d32e:	7aa1      	ldrb	r1, [r4, #10]
   2d330:	484c      	ldr	r0, [pc, #304]	; (2d464 <agps_print+0x3e8>)
   2d332:	f00f f9a0 	bl	3c676 <printk>
	printk("\tunc_semiminor: %d\n", data->unc_semiminor);
   2d336:	7ae1      	ldrb	r1, [r4, #11]
   2d338:	484b      	ldr	r0, [pc, #300]	; (2d468 <agps_print+0x3ec>)
   2d33a:	f00f f99c 	bl	3c676 <printk>
	printk("\torientation_major: %d\n", data->orientation_major);
   2d33e:	7b21      	ldrb	r1, [r4, #12]
   2d340:	484a      	ldr	r0, [pc, #296]	; (2d46c <agps_print+0x3f0>)
   2d342:	f00f f998 	bl	3c676 <printk>
	printk("\tunc_altitude: %d\n", data->unc_altitude);
   2d346:	7b61      	ldrb	r1, [r4, #13]
   2d348:	4849      	ldr	r0, [pc, #292]	; (2d470 <agps_print+0x3f4>)
   2d34a:	f00f f994 	bl	3c676 <printk>
	printk("\tconfidence: %d\n", data->confidence);
   2d34e:	7ba1      	ldrb	r1, [r4, #14]
   2d350:	4848      	ldr	r0, [pc, #288]	; (2d474 <agps_print+0x3f8>)
   2d352:	e6c8      	b.n	2d0e6 <agps_print+0x6a>
	printk("integrity\n");
   2d354:	4848      	ldr	r0, [pc, #288]	; (2d478 <agps_print+0x3fc>)
   2d356:	f00f f98e 	bl	3c676 <printk>
	printk("\tintegrity_mask: %d\n", data->integrity_mask);
   2d35a:	6821      	ldr	r1, [r4, #0]
   2d35c:	4847      	ldr	r0, [pc, #284]	; (2d47c <agps_print+0x400>)
   2d35e:	e6c2      	b.n	2d0e6 <agps_print+0x6a>
		printk("Unknown AGPS data type\n");
   2d360:	4847      	ldr	r0, [pc, #284]	; (2d480 <agps_print+0x404>)
   2d362:	e7a2      	b.n	2d2aa <agps_print+0x22e>
   2d364:	00048ab4 	.word	0x00048ab4
   2d368:	00048aba 	.word	0x00048aba
   2d36c:	00048ac3 	.word	0x00048ac3
   2d370:	00048acc 	.word	0x00048acc
   2d374:	00048ad6 	.word	0x00048ad6
   2d378:	00048ae1 	.word	0x00048ae1
   2d37c:	00048af1 	.word	0x00048af1
   2d380:	00048afe 	.word	0x00048afe
   2d384:	00048b07 	.word	0x00048b07
   2d388:	00048b18 	.word	0x00048b18
   2d38c:	00048b24 	.word	0x00048b24
   2d390:	00048b30 	.word	0x00048b30
   2d394:	00048b3d 	.word	0x00048b3d
   2d398:	00048b48 	.word	0x00048b48
   2d39c:	00048b52 	.word	0x00048b52
   2d3a0:	00048b5c 	.word	0x00048b5c
   2d3a4:	00048b66 	.word	0x00048b66
   2d3a8:	00048b70 	.word	0x00048b70
   2d3ac:	00048b7a 	.word	0x00048b7a
   2d3b0:	00048b84 	.word	0x00048b84
   2d3b4:	00048b92 	.word	0x00048b92
   2d3b8:	00048b9c 	.word	0x00048b9c
   2d3bc:	00048ba4 	.word	0x00048ba4
   2d3c0:	00048bb2 	.word	0x00048bb2
   2d3c4:	00048bbb 	.word	0x00048bbb
   2d3c8:	00048bcb 	.word	0x00048bcb
   2d3cc:	00048bd3 	.word	0x00048bd3
   2d3d0:	00048bde 	.word	0x00048bde
   2d3d4:	00048beb 	.word	0x00048beb
   2d3d8:	00048bf4 	.word	0x00048bf4
   2d3dc:	00048c01 	.word	0x00048c01
   2d3e0:	00048c0b 	.word	0x00048c0b
   2d3e4:	00048c15 	.word	0x00048c15
   2d3e8:	00048c1f 	.word	0x00048c1f
   2d3ec:	00048c29 	.word	0x00048c29
   2d3f0:	00048c33 	.word	0x00048c33
   2d3f4:	00048c3d 	.word	0x00048c3d
   2d3f8:	00048c46 	.word	0x00048c46
   2d3fc:	00048c4f 	.word	0x00048c4f
   2d400:	00048c59 	.word	0x00048c59
   2d404:	00048c64 	.word	0x00048c64
   2d408:	00048c72 	.word	0x00048c72
   2d40c:	00048c82 	.word	0x00048c82
   2d410:	00048c8d 	.word	0x00048c8d
   2d414:	00048c9a 	.word	0x00048c9a
   2d418:	00048ca7 	.word	0x00048ca7
   2d41c:	00048cb4 	.word	0x00048cb4
   2d420:	00048cc1 	.word	0x00048cc1
   2d424:	00048ccd 	.word	0x00048ccd
   2d428:	00048cd9 	.word	0x00048cd9
   2d42c:	00048ce5 	.word	0x00048ce5
   2d430:	00048cf1 	.word	0x00048cf1
   2d434:	00048d04 	.word	0x00048d04
   2d438:	00048d14 	.word	0x00048d14
   2d43c:	00048d23 	.word	0x00048d23
   2d440:	00048d35 	.word	0x00048d35
   2d444:	00048d48 	.word	0x00048d48
   2d448:	00048d5a 	.word	0x00048d5a
   2d44c:	00048d71 	.word	0x00048d71
   2d450:	00048d7d 	.word	0x00048d7d
   2d454:	00046c27 	.word	0x00046c27
   2d458:	00048d8f 	.word	0x00048d8f
   2d45c:	00048d9e 	.word	0x00048d9e
   2d460:	00048dae 	.word	0x00048dae
   2d464:	00048dbd 	.word	0x00048dbd
   2d468:	00048dd1 	.word	0x00048dd1
   2d46c:	00048de5 	.word	0x00048de5
   2d470:	00048dfd 	.word	0x00048dfd
   2d474:	00048e10 	.word	0x00048e10
   2d478:	00048e21 	.word	0x00048e21
   2d47c:	00048e2c 	.word	0x00048e2c
   2d480:	00048e41 	.word	0x00048e41
   2d484:	00048d63 	.word	0x00048d63

0002d488 <log_pgps_header>:
		return -EINVAL;
	}
}

static void log_pgps_header(const char *msg, const struct nrf_cloud_pgps_header *header)
{
   2d488:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2d48a:	460c      	mov	r4, r1
	LOG_INF("%sSchema version:%u, type:%u, num:%u, "
   2d48c:	888b      	ldrh	r3, [r1, #4]
{
   2d48e:	4602      	mov	r2, r0
	LOG_INF("%sSchema version:%u, type:%u, num:%u, "
   2d490:	9302      	str	r3, [sp, #8]
   2d492:	884b      	ldrh	r3, [r1, #2]
   2d494:	4809      	ldr	r0, [pc, #36]	; (2d4bc <log_pgps_header+0x34>)
   2d496:	9301      	str	r3, [sp, #4]
   2d498:	784b      	ldrb	r3, [r1, #1]
   2d49a:	9300      	str	r3, [sp, #0]
   2d49c:	780b      	ldrb	r3, [r1, #0]
   2d49e:	2149      	movs	r1, #73	; 0x49
   2d4a0:	f00f fb06 	bl	3cab0 <z_log_minimal_printk>
		"count:%u", msg ? msg : "",
		header->schema_version & 0xFFU, header->array_type & 0xFFU,
		header->num_items, header->prediction_count);
	LOG_INF("  size:%u, period (minutes):%u, GPS day:%u, GPS time:%u",
   2d4a4:	68e3      	ldr	r3, [r4, #12]
   2d4a6:	2149      	movs	r1, #73	; 0x49
   2d4a8:	9301      	str	r3, [sp, #4]
   2d4aa:	8963      	ldrh	r3, [r4, #10]
   2d4ac:	88e2      	ldrh	r2, [r4, #6]
   2d4ae:	9300      	str	r3, [sp, #0]
   2d4b0:	4803      	ldr	r0, [pc, #12]	; (2d4c0 <log_pgps_header+0x38>)
   2d4b2:	8923      	ldrh	r3, [r4, #8]
   2d4b4:	f00f fafc 	bl	3cab0 <z_log_minimal_printk>
		header->prediction_size,
		header->prediction_period_min,
		header->gps_day & 0xFFFFU, header->gps_time_of_day);
}
   2d4b8:	b004      	add	sp, #16
   2d4ba:	bd10      	pop	{r4, pc}
   2d4bc:	00048e59 	.word	0x00048e59
   2d4c0:	00048e8d 	.word	0x00048e8d

0002d4c4 <validate_pgps_header>:

static bool validate_pgps_header(const struct nrf_cloud_pgps_header *header)
{
   2d4c4:	b510      	push	{r4, lr}
   2d4c6:	4604      	mov	r4, r0
	log_pgps_header("Checking P-GPS header: ", header);
   2d4c8:	4601      	mov	r1, r0
   2d4ca:	4811      	ldr	r0, [pc, #68]	; (2d510 <validate_pgps_header+0x4c>)
   2d4cc:	f7ff ffdc 	bl	2d488 <log_pgps_header>
	if ((header->schema_version != NRF_CLOUD_PGPS_BIN_SCHEMA_VERSION) ||
   2d4d0:	7823      	ldrb	r3, [r4, #0]
   2d4d2:	2b01      	cmp	r3, #1
   2d4d4:	d10d      	bne.n	2d4f2 <validate_pgps_header+0x2e>
   2d4d6:	7863      	ldrb	r3, [r4, #1]
   2d4d8:	2b0a      	cmp	r3, #10
   2d4da:	d115      	bne.n	2d508 <validate_pgps_header+0x44>
	    (header->array_type != NRF_CLOUD_PGPS_PREDICTION_HEADER) ||
   2d4dc:	8860      	ldrh	r0, [r4, #2]
   2d4de:	2801      	cmp	r0, #1
   2d4e0:	d112      	bne.n	2d508 <validate_pgps_header+0x44>
	    (header->num_items != 1) ||
   2d4e2:	8923      	ldrh	r3, [r4, #8]
   2d4e4:	2bf0      	cmp	r3, #240	; 0xf0
   2d4e6:	d10f      	bne.n	2d508 <validate_pgps_header+0x44>
	    (header->prediction_period_min != PREDICTION_PERIOD) ||
	    (header->prediction_count <= 0) ||
   2d4e8:	88a3      	ldrh	r3, [r4, #4]
	    (header->prediction_period_min != PREDICTION_PERIOD) ||
   2d4ea:	3b01      	subs	r3, #1
   2d4ec:	2b29      	cmp	r3, #41	; 0x29
   2d4ee:	d80b      	bhi.n	2d508 <validate_pgps_header+0x44>
			LOG_WRN("One or more fields are wrong");
		}
		return false;
	}
	return true;
}
   2d4f0:	bd10      	pop	{r4, pc}
		if ((((uint8_t)header->schema_version) == 0xff) &&
   2d4f2:	2bff      	cmp	r3, #255	; 0xff
   2d4f4:	d108      	bne.n	2d508 <validate_pgps_header+0x44>
   2d4f6:	7863      	ldrb	r3, [r4, #1]
   2d4f8:	2bff      	cmp	r3, #255	; 0xff
   2d4fa:	d105      	bne.n	2d508 <validate_pgps_header+0x44>
			LOG_WRN("Flash is erased.");
   2d4fc:	2157      	movs	r1, #87	; 0x57
   2d4fe:	4805      	ldr	r0, [pc, #20]	; (2d514 <validate_pgps_header+0x50>)
			LOG_WRN("One or more fields are wrong");
   2d500:	f00f fad6 	bl	3cab0 <z_log_minimal_printk>
		return false;
   2d504:	2000      	movs	r0, #0
   2d506:	e7f3      	b.n	2d4f0 <validate_pgps_header+0x2c>
			LOG_WRN("One or more fields are wrong");
   2d508:	2157      	movs	r1, #87	; 0x57
   2d50a:	4803      	ldr	r0, [pc, #12]	; (2d518 <validate_pgps_header+0x54>)
   2d50c:	e7f8      	b.n	2d500 <validate_pgps_header+0x3c>
   2d50e:	bf00      	nop
   2d510:	00048eca 	.word	0x00048eca
   2d514:	00048ee2 	.word	0x00048ee2
   2d518:	00048ef8 	.word	0x00048ef8

0002d51c <prediction_timer_handler>:
	}
}

static void prediction_timer_handler(struct k_timer *dummy)
{
	k_work_submit(&prediction_work);
   2d51c:	4801      	ldr	r0, [pc, #4]	; (2d524 <prediction_timer_handler+0x8>)
   2d51e:	f009 bf35 	b.w	3738c <k_work_submit>
   2d522:	bf00      	nop
   2d524:	200146b4 	.word	0x200146b4

0002d528 <cache_pgps_header>:
	return 0;
}

static void cache_pgps_header(const struct nrf_cloud_pgps_header *header)
{
	memcpy(&index.header, header, sizeof(*header));
   2d528:	4a10      	ldr	r2, [pc, #64]	; (2d56c <cache_pgps_header+0x44>)
{
   2d52a:	b570      	push	{r4, r5, r6, lr}
   2d52c:	4603      	mov	r3, r0
   2d52e:	4614      	mov	r4, r2
   2d530:	f100 0610 	add.w	r6, r0, #16
   2d534:	4615      	mov	r5, r2
   2d536:	6818      	ldr	r0, [r3, #0]
   2d538:	6859      	ldr	r1, [r3, #4]
   2d53a:	3308      	adds	r3, #8
   2d53c:	c503      	stmia	r5!, {r0, r1}
   2d53e:	42b3      	cmp	r3, r6
   2d540:	462a      	mov	r2, r5
   2d542:	d1f7      	bne.n	2d534 <cache_pgps_header+0xc>

	index.start_sec = npgps_gps_day_time_to_sec(index.header.gps_day,
   2d544:	68e1      	ldr	r1, [r4, #12]
   2d546:	8960      	ldrh	r0, [r4, #10]
   2d548:	f001 fada 	bl	2eb00 <npgps_gps_day_time_to_sec>
						    index.header.gps_time_of_day);
	index.period_sec = index.header.prediction_period_min * SEC_PER_MIN;
   2d54c:	8923      	ldrh	r3, [r4, #8]
	index.end_sec = index.start_sec +
			index.period_sec * index.header.prediction_count;
   2d54e:	88a2      	ldrh	r2, [r4, #4]
	index.period_sec = index.header.prediction_period_min * SEC_PER_MIN;
   2d550:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   2d554:	009b      	lsls	r3, r3, #2
   2d556:	b29b      	uxth	r3, r3
   2d558:	8563      	strh	r3, [r4, #42]	; 0x2a
			index.period_sec * index.header.prediction_count;
   2d55a:	4353      	muls	r3, r2
	index.start_sec = npgps_gps_day_time_to_sec(index.header.gps_day,
   2d55c:	e9c4 0104 	strd	r0, r1, [r4, #16]
	index.end_sec = index.start_sec +
   2d560:	1818      	adds	r0, r3, r0
   2d562:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   2d566:	e9c4 0106 	strd	r0, r1, [r4, #24]
}
   2d56a:	bd70      	pop	{r4, r5, r6, pc}
   2d56c:	20015810 	.word	0x20015810

0002d570 <validate_prediction.constprop.0>:
static int validate_prediction(const struct nrf_cloud_pgps_prediction *p,
   2d570:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d574:	4699      	mov	r9, r3
	if ((p->schema_version != NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION) ||
   2d576:	7cc3      	ldrb	r3, [r0, #19]
static int validate_prediction(const struct nrf_cloud_pgps_prediction *p,
   2d578:	4604      	mov	r4, r0
	if ((p->schema_version != NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION) ||
   2d57a:	2b01      	cmp	r3, #1
static int validate_prediction(const struct nrf_cloud_pgps_prediction *p,
   2d57c:	460e      	mov	r6, r1
   2d57e:	4617      	mov	r7, r2
   2d580:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
	if ((p->schema_version != NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION) ||
   2d584:	d106      	bne.n	2d594 <validate_prediction.constprop.0+0x24>
   2d586:	7803      	ldrb	r3, [r0, #0]
   2d588:	2b07      	cmp	r3, #7
   2d58a:	d103      	bne.n	2d594 <validate_prediction.constprop.0+0x24>
	    (p->time_type != NRF_CLOUD_AGPS_GPS_SYSTEM_CLOCK) ||
   2d58c:	f8b0 3001 	ldrh.w	r3, [r0, #1]
   2d590:	2b01      	cmp	r3, #1
   2d592:	d038      	beq.n	2d606 <validate_prediction.constprop.0+0x96>
		LOG_ERR("invalid prediction header");
   2d594:	2145      	movs	r1, #69	; 0x45
   2d596:	4831      	ldr	r0, [pc, #196]	; (2d65c <validate_prediction.constprop.0+0xec>)
   2d598:	f00f fa8a 	bl	3cab0 <z_log_minimal_printk>
		err = -EINVAL;
   2d59c:	f06f 0515 	mvn.w	r5, #21
	int64_t gps_sec = npgps_gps_day_time_to_sec(gps_day,
   2d5a0:	4639      	mov	r1, r7
   2d5a2:	4630      	mov	r0, r6
   2d5a4:	f001 faac 	bl	2eb00 <npgps_gps_day_time_to_sec>
   2d5a8:	4680      	mov	r8, r0
   2d5aa:	468b      	mov	fp, r1
	int64_t pred_sec = npgps_gps_day_time_to_sec(p->time.date_day,
   2d5ac:	f8b4 0003 	ldrh.w	r0, [r4, #3]
   2d5b0:	f8d4 1005 	ldr.w	r1, [r4, #5]
   2d5b4:	f001 faa4 	bl	2eb00 <npgps_gps_day_time_to_sec>
   2d5b8:	4602      	mov	r2, r0
	int64_t end_sec = pred_sec + period_min * SEC_PER_MIN;
   2d5ba:	468c      	mov	ip, r1
   2d5bc:	203c      	movs	r0, #60	; 0x3c
   2d5be:	4613      	mov	r3, r2
	if ((gps_sec < pred_sec) || (gps_sec > end_sec)) {
   2d5c0:	4590      	cmp	r8, r2
   2d5c2:	eb7b 0101 	sbcs.w	r1, fp, r1
	int64_t end_sec = pred_sec + period_min * SEC_PER_MIN;
   2d5c6:	fbe9 3c00 	umlal	r3, ip, r9, r0
	if ((gps_sec < pred_sec) || (gps_sec > end_sec)) {
   2d5ca:	db03      	blt.n	2d5d4 <validate_prediction.constprop.0+0x64>
   2d5cc:	4543      	cmp	r3, r8
   2d5ce:	eb7c 010b 	sbcs.w	r1, ip, fp
   2d5d2:	da07      	bge.n	2d5e4 <validate_prediction.constprop.0+0x74>
		LOG_ERR("prediction does not contain desired time; "
   2d5d4:	9300      	str	r3, [sp, #0]
   2d5d6:	2145      	movs	r1, #69	; 0x45
   2d5d8:	4643      	mov	r3, r8
   2d5da:	4821      	ldr	r0, [pc, #132]	; (2d660 <validate_prediction.constprop.0+0xf0>)
   2d5dc:	f00f fa68 	bl	3cab0 <z_log_minimal_printk>
		err = -EINVAL;
   2d5e0:	f06f 0515 	mvn.w	r5, #21
	if ((p->ephemeris_type != NRF_CLOUD_AGPS_EPHEMERIDES) ||
   2d5e4:	7d22      	ldrb	r2, [r4, #20]
	    (p->ephemeris_count != NRF_CLOUD_PGPS_NUM_SV)) {
   2d5e6:	f8b4 3015 	ldrh.w	r3, [r4, #21]
	if ((p->ephemeris_type != NRF_CLOUD_AGPS_EPHEMERIDES) ||
   2d5ea:	2a02      	cmp	r2, #2
   2d5ec:	d101      	bne.n	2d5f2 <validate_prediction.constprop.0+0x82>
   2d5ee:	2b20      	cmp	r3, #32
   2d5f0:	d020      	beq.n	2d634 <validate_prediction.constprop.0+0xc4>
		LOG_ERR("ephemeris header bad:%u, %u",
   2d5f2:	2145      	movs	r1, #69	; 0x45
   2d5f4:	481b      	ldr	r0, [pc, #108]	; (2d664 <validate_prediction.constprop.0+0xf4>)
   2d5f6:	f00f fa5b 	bl	3cab0 <z_log_minimal_printk>
			err = -EINVAL;
   2d5fa:	f06f 0515 	mvn.w	r5, #21
}
   2d5fe:	4628      	mov	r0, r5
   2d600:	b003      	add	sp, #12
   2d602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (exact && (p->time.date_day != gps_day)) {
   2d606:	f1ba 0f00 	cmp.w	sl, #0
   2d60a:	d011      	beq.n	2d630 <validate_prediction.constprop.0+0xc0>
   2d60c:	f8b0 2003 	ldrh.w	r2, [r0, #3]
   2d610:	428a      	cmp	r2, r1
   2d612:	d005      	beq.n	2d620 <validate_prediction.constprop.0+0xb0>
		LOG_ERR("prediction day:%u, expected:%u",
   2d614:	460b      	mov	r3, r1
   2d616:	2145      	movs	r1, #69	; 0x45
   2d618:	4813      	ldr	r0, [pc, #76]	; (2d668 <validate_prediction.constprop.0+0xf8>)
		LOG_ERR("prediction time:%u, expected:%u",
   2d61a:	f00f fa49 	bl	3cab0 <z_log_minimal_printk>
   2d61e:	e7bd      	b.n	2d59c <validate_prediction.constprop.0+0x2c>
	} else if (exact && (p->time.time_full_s != gps_time_of_day)) {
   2d620:	f8d0 2005 	ldr.w	r2, [r0, #5]
   2d624:	42ba      	cmp	r2, r7
   2d626:	d003      	beq.n	2d630 <validate_prediction.constprop.0+0xc0>
		LOG_ERR("prediction time:%u, expected:%u",
   2d628:	463b      	mov	r3, r7
   2d62a:	2145      	movs	r1, #69	; 0x45
   2d62c:	480f      	ldr	r0, [pc, #60]	; (2d66c <validate_prediction.constprop.0+0xfc>)
   2d62e:	e7f4      	b.n	2d61a <validate_prediction.constprop.0+0xaa>
	int err = 0;
   2d630:	2500      	movs	r5, #0
   2d632:	e7b5      	b.n	2d5a0 <validate_prediction.constprop.0+0x30>
	if (exact && !err) {
   2d634:	f1ba 0f00 	cmp.w	sl, #0
   2d638:	d0e1      	beq.n	2d5fe <validate_prediction.constprop.0+0x8e>
   2d63a:	2d00      	cmp	r5, #0
   2d63c:	d1df      	bne.n	2d5fe <validate_prediction.constprop.0+0x8e>
		expected_sentinel = npgps_gps_day_time_to_sec(gps_day,
   2d63e:	4639      	mov	r1, r7
   2d640:	4630      	mov	r0, r6
   2d642:	f001 fa5d 	bl	2eb00 <npgps_gps_day_time_to_sec>
		stored_sentinel = p->sentinel;
   2d646:	f8d4 37d7 	ldr.w	r3, [r4, #2007]	; 0x7d7
		if (expected_sentinel != stored_sentinel) {
   2d64a:	4298      	cmp	r0, r3
   2d64c:	d0d7      	beq.n	2d5fe <validate_prediction.constprop.0+0x8e>
			LOG_ERR("prediction at:%p has stored_sentinel:0x%08X, "
   2d64e:	9000      	str	r0, [sp, #0]
   2d650:	4622      	mov	r2, r4
   2d652:	2145      	movs	r1, #69	; 0x45
   2d654:	4806      	ldr	r0, [pc, #24]	; (2d670 <validate_prediction.constprop.0+0x100>)
   2d656:	f00f fa2b 	bl	3cab0 <z_log_minimal_printk>
   2d65a:	e7ce      	b.n	2d5fa <validate_prediction.constprop.0+0x8a>
   2d65c:	00048f1a 	.word	0x00048f1a
   2d660:	00048f82 	.word	0x00048f82
   2d664:	00048fca 	.word	0x00048fca
   2d668:	00048f39 	.word	0x00048f39
   2d66c:	00048f5d 	.word	0x00048f5d
   2d670:	00048feb 	.word	0x00048feb

0002d674 <open_storage>:
{
   2d674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2d678:	4604      	mov	r4, r0
   2d67a:	460f      	mov	r7, r1
   2d67c:	b085      	sub	sp, #20
   2d67e:	4929      	ldr	r1, [pc, #164]	; (2d724 <open_storage+0xb0>)
   2d680:	4608      	mov	r0, r1
   2d682:	f013 fc28 	bl	40ed6 <z_device_is_ready>
	if (!device_is_ready(flash_dev)) {
   2d686:	4927      	ldr	r1, [pc, #156]	; (2d724 <open_storage+0xb0>)
   2d688:	b950      	cbnz	r0, 2d6a0 <open_storage+0x2c>
		LOG_ERR("Flash device not ready:'%s'", flash_dev->name);
   2d68a:	680a      	ldr	r2, [r1, #0]
   2d68c:	4826      	ldr	r0, [pc, #152]	; (2d728 <open_storage+0xb4>)
   2d68e:	2145      	movs	r1, #69	; 0x45
   2d690:	f00f fa0e 	bl	3cab0 <z_log_minimal_printk>
		return -ENODEV;
   2d694:	f06f 0412 	mvn.w	r4, #18
}
   2d698:	4620      	mov	r0, r4
   2d69a:	b005      	add	sp, #20
   2d69c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	block_offset = offset % flash_page_size;
   2d6a0:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 2d748 <open_storage+0xd4>
	err = stream_flash_init(&stream, flash_dev,
   2d6a4:	4a21      	ldr	r2, [pc, #132]	; (2d72c <open_storage+0xb8>)
	block_offset = offset % flash_page_size;
   2d6a6:	f8d8 3000 	ldr.w	r3, [r8]
	err = stream_flash_init(&stream, flash_dev,
   2d6aa:	6812      	ldr	r2, [r2, #0]
	block_offset = offset % flash_page_size;
   2d6ac:	fbb4 f5f3 	udiv	r5, r4, r3
   2d6b0:	fb03 4515 	mls	r5, r3, r5, r4
	err = stream_flash_init(&stream, flash_dev,
   2d6b4:	9202      	str	r2, [sp, #8]
				((uint32_t)storage) + offset,
   2d6b6:	f8df 9094 	ldr.w	r9, [pc, #148]	; 2d74c <open_storage+0xd8>
	err = stream_flash_init(&stream, flash_dev,
   2d6ba:	4a1d      	ldr	r2, [pc, #116]	; (2d730 <open_storage+0xbc>)
	offset -= block_offset;
   2d6bc:	1b66      	subs	r6, r4, r5
	err = stream_flash_init(&stream, flash_dev,
   2d6be:	6810      	ldr	r0, [r2, #0]
   2d6c0:	f8d9 2000 	ldr.w	r2, [r9]
   2d6c4:	1b2c      	subs	r4, r5, r4
   2d6c6:	4432      	add	r2, r6
   2d6c8:	4404      	add	r4, r0
   2d6ca:	9200      	str	r2, [sp, #0]
   2d6cc:	4a19      	ldr	r2, [pc, #100]	; (2d734 <open_storage+0xc0>)
   2d6ce:	9401      	str	r4, [sp, #4]
   2d6d0:	6812      	ldr	r2, [r2, #0]
   2d6d2:	4819      	ldr	r0, [pc, #100]	; (2d738 <open_storage+0xc4>)
   2d6d4:	f7f4 fbae 	bl	21e34 <stream_flash_init>
	if (err) {
   2d6d8:	4604      	mov	r4, r0
   2d6da:	b148      	cbz	r0, 2d6f0 <open_storage+0x7c>
		LOG_ERR("Failed to init flash stream for offset %u: %d",
   2d6dc:	4603      	mov	r3, r0
   2d6de:	4632      	mov	r2, r6
   2d6e0:	2145      	movs	r1, #69	; 0x45
   2d6e2:	4816      	ldr	r0, [pc, #88]	; (2d73c <open_storage+0xc8>)
   2d6e4:	f00f f9e4 	bl	3cab0 <z_log_minimal_printk>
		state = PGPS_NONE;
   2d6e8:	2200      	movs	r2, #0
   2d6ea:	4b15      	ldr	r3, [pc, #84]	; (2d740 <open_storage+0xcc>)
   2d6ec:	701a      	strb	r2, [r3, #0]
		return err;
   2d6ee:	e7d3      	b.n	2d698 <open_storage+0x24>
	if (preserve && (block_offset != 0) && (block_offset < flash_page_size)) {
   2d6f0:	2f00      	cmp	r7, #0
   2d6f2:	d0d1      	beq.n	2d698 <open_storage+0x24>
   2d6f4:	2d00      	cmp	r5, #0
   2d6f6:	d0cf      	beq.n	2d698 <open_storage+0x24>
   2d6f8:	f8d8 3000 	ldr.w	r3, [r8]
   2d6fc:	42ab      	cmp	r3, r5
   2d6fe:	d9cb      	bls.n	2d698 <open_storage+0x24>
		uint8_t *p = storage + offset;
   2d700:	f8d9 1000 	ldr.w	r1, [r9]
		err = stream_flash_buffered_write(&stream, p, block_offset, false);
   2d704:	4603      	mov	r3, r0
   2d706:	462a      	mov	r2, r5
   2d708:	480b      	ldr	r0, [pc, #44]	; (2d738 <open_storage+0xc4>)
   2d70a:	4431      	add	r1, r6
   2d70c:	f00f fec4 	bl	3d498 <stream_flash_buffered_write>
		if (err) {
   2d710:	4604      	mov	r4, r0
   2d712:	2800      	cmp	r0, #0
   2d714:	d0c0      	beq.n	2d698 <open_storage+0x24>
			LOG_ERR("Error writing back %u original bytes", block_offset);
   2d716:	462a      	mov	r2, r5
   2d718:	2145      	movs	r1, #69	; 0x45
   2d71a:	480a      	ldr	r0, [pc, #40]	; (2d744 <open_storage+0xd0>)
   2d71c:	f00f f9c8 	bl	3cab0 <z_log_minimal_printk>
   2d720:	e7ba      	b.n	2d698 <open_storage+0x24>
   2d722:	bf00      	nop
   2d724:	00042384 	.word	0x00042384
   2d728:	0004902d 	.word	0x0004902d
   2d72c:	2001a118 	.word	0x2001a118
   2d730:	2001a128 	.word	0x2001a128
   2d734:	2001a150 	.word	0x2001a150
   2d738:	2001a12c 	.word	0x2001a12c
   2d73c:	0004904e 	.word	0x0004904e
   2d740:	2001d2bf 	.word	0x2001d2bf
   2d744:	00049081 	.word	0x00049081
   2d748:	2001a11c 	.word	0x2001a11c
   2d74c:	2001a124 	.word	0x2001a124

0002d750 <nrf_cloud_pgps_loading>:
		(state == PGPS_REQUESTING) ||
   2d750:	4b03      	ldr	r3, [pc, #12]	; (2d760 <nrf_cloud_pgps_loading+0x10>)
   2d752:	7818      	ldrb	r0, [r3, #0]
   2d754:	3803      	subs	r0, #3
}
   2d756:	2802      	cmp	r0, #2
   2d758:	bf8c      	ite	hi
   2d75a:	2000      	movhi	r0, #0
   2d75c:	2001      	movls	r0, #1
   2d75e:	4770      	bx	lr
   2d760:	2001d2bf 	.word	0x2001d2bf

0002d764 <pgps_request>:
{
   2d764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (state == PGPS_NONE) {
   2d766:	4f3f      	ldr	r7, [pc, #252]	; (2d864 <pgps_request+0x100>)
{
   2d768:	4605      	mov	r5, r0
	if (state == PGPS_NONE) {
   2d76a:	783b      	ldrb	r3, [r7, #0]
   2d76c:	b93b      	cbnz	r3, 2d77e <pgps_request+0x1a>
		LOG_ERR("P-GPS subsystem is not initialized.");
   2d76e:	2145      	movs	r1, #69	; 0x45
   2d770:	483d      	ldr	r0, [pc, #244]	; (2d868 <pgps_request+0x104>)
   2d772:	f00f f99d 	bl	3cab0 <z_log_minimal_printk>
		return -EINVAL;
   2d776:	f06f 0415 	mvn.w	r4, #21
}
   2d77a:	4620      	mov	r0, r4
   2d77c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (nrf_cloud_pgps_loading()) {
   2d77e:	f7ff ffe7 	bl	2d750 <nrf_cloud_pgps_loading>
   2d782:	2800      	cmp	r0, #0
   2d784:	d16c      	bne.n	2d860 <pgps_request+0xfc>
	if (request->prediction_count < index.header.prediction_count) {
   2d786:	4b39      	ldr	r3, [pc, #228]	; (2d86c <pgps_request+0x108>)
   2d788:	882c      	ldrh	r4, [r5, #0]
   2d78a:	8899      	ldrh	r1, [r3, #4]
   2d78c:	b2a2      	uxth	r2, r4
   2d78e:	428a      	cmp	r2, r1
		index.partial_request = true;
   2d790:	bf3e      	ittt	cc
   2d792:	2001      	movcc	r0, #1
		index.pnum_offset = index.header.prediction_count -
   2d794:	1a89      	subcc	r1, r1, r2
   2d796:	f883 102d 	strbcc.w	r1, [r3, #45]	; 0x2d
	ignore_packets = false;
   2d79a:	f04f 0100 	mov.w	r1, #0
		index.partial_request = true;
   2d79e:	bf32      	itee	cc
   2d7a0:	f883 002f 	strbcc.w	r0, [r3, #47]	; 0x2f
		index.partial_request = false;
   2d7a4:	f883 002f 	strbcs.w	r0, [r3, #47]	; 0x2f
		index.pnum_offset = 0;
   2d7a8:	f883 002d 	strbcs.w	r0, [r3, #45]	; 0x2d
	index.expected_count = request->prediction_count;
   2d7ac:	84dc      	strh	r4, [r3, #38]	; 0x26
	ignore_packets = false;
   2d7ae:	4b30      	ldr	r3, [pc, #192]	; (2d870 <pgps_request+0x10c>)
	LOG_INF("Requesting %u predictions...", request->prediction_count);
   2d7b0:	4830      	ldr	r0, [pc, #192]	; (2d874 <pgps_request+0x110>)
	ignore_packets = false;
   2d7b2:	7019      	strb	r1, [r3, #0]
	LOG_INF("Requesting %u predictions...", request->prediction_count);
   2d7b4:	2149      	movs	r1, #73	; 0x49
   2d7b6:	f00f f97b 	bl	3cab0 <z_log_minimal_printk>
	pgps_req_obj = json_create_req_obj(NRF_CLOUD_JSON_APPID_VAL_PGPS,
   2d7ba:	492f      	ldr	r1, [pc, #188]	; (2d878 <pgps_request+0x114>)
   2d7bc:	482f      	ldr	r0, [pc, #188]	; (2d87c <pgps_request+0x118>)
   2d7be:	f7fc fcf9 	bl	2a1b4 <json_create_req_obj>
	data_obj = cJSON_AddObjectToObject(pgps_req_obj, NRF_CLOUD_JSON_DATA_KEY);
   2d7c2:	492f      	ldr	r1, [pc, #188]	; (2d880 <pgps_request+0x11c>)
	pgps_req_obj = json_create_req_obj(NRF_CLOUD_JSON_APPID_VAL_PGPS,
   2d7c4:	4606      	mov	r6, r0
	data_obj = cJSON_AddObjectToObject(pgps_req_obj, NRF_CLOUD_JSON_DATA_KEY);
   2d7c6:	f012 fa90 	bl	3fcea <cJSON_AddObjectToObject>
   2d7ca:	4604      	mov	r4, r0
	if (!pgps_req_obj || !data_obj) {
   2d7cc:	b17e      	cbz	r6, 2d7ee <pgps_request+0x8a>
   2d7ce:	b170      	cbz	r0, 2d7ee <pgps_request+0x8a>
	ret = cJSON_AddNumberToObject(data_obj, NRF_CLOUD_JSON_PGPS_PRED_COUNT,
   2d7d0:	8828      	ldrh	r0, [r5, #0]
   2d7d2:	f7ee ff77 	bl	1c6c4 <__aeabi_ui2d>
   2d7d6:	4602      	mov	r2, r0
   2d7d8:	460b      	mov	r3, r1
   2d7da:	4620      	mov	r0, r4
   2d7dc:	4929      	ldr	r1, [pc, #164]	; (2d884 <pgps_request+0x120>)
   2d7de:	f012 fa03 	bl	3fbe8 <cJSON_AddNumberToObject>
	if (ret == NULL) {
   2d7e2:	4602      	mov	r2, r0
   2d7e4:	b930      	cbnz	r0, 2d7f4 <pgps_request+0x90>
		LOG_ERR("Failed to add pred count to P-GPS request:%d", err);
   2d7e6:	2145      	movs	r1, #69	; 0x45
   2d7e8:	4827      	ldr	r0, [pc, #156]	; (2d888 <pgps_request+0x124>)
		LOG_ERR("Failed to add gps time to P-GPS request:%d", err);
   2d7ea:	f00f f961 	bl	3cab0 <z_log_minimal_printk>
		err = -ENOMEM;
   2d7ee:	f06f 040b 	mvn.w	r4, #11
   2d7f2:	e031      	b.n	2d858 <pgps_request+0xf4>
	ret = cJSON_AddNumberToObject(data_obj, NRF_CLOUD_JSON_PGPS_INT_MIN,
   2d7f4:	8868      	ldrh	r0, [r5, #2]
   2d7f6:	f7ee ff65 	bl	1c6c4 <__aeabi_ui2d>
   2d7fa:	4602      	mov	r2, r0
   2d7fc:	460b      	mov	r3, r1
   2d7fe:	4620      	mov	r0, r4
   2d800:	4922      	ldr	r1, [pc, #136]	; (2d88c <pgps_request+0x128>)
   2d802:	f012 f9f1 	bl	3fbe8 <cJSON_AddNumberToObject>
	if (ret == NULL) {
   2d806:	4602      	mov	r2, r0
   2d808:	b910      	cbnz	r0, 2d810 <pgps_request+0xac>
		LOG_ERR("Failed to add pred int min to P-GPS request:%d", err);
   2d80a:	2145      	movs	r1, #69	; 0x45
   2d80c:	4820      	ldr	r0, [pc, #128]	; (2d890 <pgps_request+0x12c>)
   2d80e:	e7ec      	b.n	2d7ea <pgps_request+0x86>
	ret = cJSON_AddNumberToObject(data_obj, NRF_CLOUD_JSON_PGPS_GPS_DAY,
   2d810:	88a8      	ldrh	r0, [r5, #4]
   2d812:	f7ee ff57 	bl	1c6c4 <__aeabi_ui2d>
   2d816:	4602      	mov	r2, r0
   2d818:	460b      	mov	r3, r1
   2d81a:	4620      	mov	r0, r4
   2d81c:	491d      	ldr	r1, [pc, #116]	; (2d894 <pgps_request+0x130>)
   2d81e:	f012 f9e3 	bl	3fbe8 <cJSON_AddNumberToObject>
	if (ret == NULL) {
   2d822:	4602      	mov	r2, r0
   2d824:	b910      	cbnz	r0, 2d82c <pgps_request+0xc8>
		LOG_ERR("Failed to add gps day to P-GPS request:%d", err);
   2d826:	2145      	movs	r1, #69	; 0x45
   2d828:	481b      	ldr	r0, [pc, #108]	; (2d898 <pgps_request+0x134>)
   2d82a:	e7de      	b.n	2d7ea <pgps_request+0x86>
	ret = cJSON_AddNumberToObject(data_obj, NRF_CLOUD_JSON_PGPS_GPS_TIME,
   2d82c:	f8d5 0006 	ldr.w	r0, [r5, #6]
   2d830:	f7ee ff48 	bl	1c6c4 <__aeabi_ui2d>
   2d834:	4602      	mov	r2, r0
   2d836:	460b      	mov	r3, r1
   2d838:	4620      	mov	r0, r4
   2d83a:	4918      	ldr	r1, [pc, #96]	; (2d89c <pgps_request+0x138>)
   2d83c:	f012 f9d4 	bl	3fbe8 <cJSON_AddNumberToObject>
	if (ret == NULL) {
   2d840:	4602      	mov	r2, r0
   2d842:	b910      	cbnz	r0, 2d84a <pgps_request+0xe6>
		LOG_ERR("Failed to add gps time to P-GPS request:%d", err);
   2d844:	2145      	movs	r1, #69	; 0x45
   2d846:	4816      	ldr	r0, [pc, #88]	; (2d8a0 <pgps_request+0x13c>)
   2d848:	e7cf      	b.n	2d7ea <pgps_request+0x86>
	err = json_send_to_cloud(pgps_req_obj);
   2d84a:	4630      	mov	r0, r6
   2d84c:	f7fd f876 	bl	2a93c <json_send_to_cloud>
	if (!err) {
   2d850:	4604      	mov	r4, r0
   2d852:	b908      	cbnz	r0, 2d858 <pgps_request+0xf4>
		state = PGPS_REQUESTING;
   2d854:	2304      	movs	r3, #4
   2d856:	703b      	strb	r3, [r7, #0]
	cJSON_Delete(pgps_req_obj);
   2d858:	4630      	mov	r0, r6
   2d85a:	f004 fb6f 	bl	31f3c <cJSON_Delete>
	return err;
   2d85e:	e78c      	b.n	2d77a <pgps_request+0x16>
		return 0;
   2d860:	2400      	movs	r4, #0
   2d862:	e78a      	b.n	2d77a <pgps_request+0x16>
   2d864:	2001d2bf 	.word	0x2001d2bf
   2d868:	000490ab 	.word	0x000490ab
   2d86c:	20015810 	.word	0x20015810
   2d870:	2001c9d9 	.word	0x2001c9d9
   2d874:	000490d4 	.word	0x000490d4
   2d878:	000435de 	.word	0x000435de
   2d87c:	00048109 	.word	0x00048109
   2d880:	000436ba 	.word	0x000436ba
   2d884:	000490f6 	.word	0x000490f6
   2d888:	00049106 	.word	0x00049106
   2d88c:	00049138 	.word	0x00049138
   2d890:	00049152 	.word	0x00049152
   2d894:	00049186 	.word	0x00049186
   2d898:	00049192 	.word	0x00049192
   2d89c:	000491c1 	.word	0x000491c1
   2d8a0:	000491da 	.word	0x000491da

0002d8a4 <pgps_request_all>:
{
   2d8a4:	b510      	push	{r4, lr}
	if (state == PGPS_NONE) {
   2d8a6:	4b19      	ldr	r3, [pc, #100]	; (2d90c <pgps_request_all+0x68>)
{
   2d8a8:	b086      	sub	sp, #24
	if (state == PGPS_NONE) {
   2d8aa:	781b      	ldrb	r3, [r3, #0]
   2d8ac:	b93b      	cbnz	r3, 2d8be <pgps_request_all+0x1a>
		LOG_ERR("P-GPS subsystem is not initialized.");
   2d8ae:	4818      	ldr	r0, [pc, #96]	; (2d910 <pgps_request_all+0x6c>)
   2d8b0:	2145      	movs	r1, #69	; 0x45
   2d8b2:	f00f f8fd 	bl	3cab0 <z_log_minimal_printk>
		return -EINVAL;
   2d8b6:	f06f 0015 	mvn.w	r0, #21
}
   2d8ba:	b006      	add	sp, #24
   2d8bc:	bd10      	pop	{r4, pc}
	if (nrf_cloud_pgps_loading()) {
   2d8be:	f7ff ff47 	bl	2d750 <nrf_cloud_pgps_loading>
   2d8c2:	4604      	mov	r4, r0
   2d8c4:	b9f8      	cbnz	r0, 2d906 <pgps_request_all+0x62>
	npgps_reset_block_pool();
   2d8c6:	f001 f9f9 	bl	2ecbc <npgps_reset_block_pool>
	index.stale_server_data = false;
   2d8ca:	4b12      	ldr	r3, [pc, #72]	; (2d914 <pgps_request_all+0x70>)
	err = npgps_get_time(NULL, &gps_day, &gps_time_of_day);
   2d8cc:	4620      	mov	r0, r4
   2d8ce:	aa02      	add	r2, sp, #8
   2d8d0:	f10d 0106 	add.w	r1, sp, #6
	index.stale_server_data = false;
   2d8d4:	f883 4030 	strb.w	r4, [r3, #48]	; 0x30
	err = npgps_get_time(NULL, &gps_day, &gps_time_of_day);
   2d8d8:	f011 ff17 	bl	3f70a <npgps_get_time>
	if (err) {
   2d8dc:	b110      	cbz	r0, 2d8e4 <pgps_request_all+0x40>
		gps_day = 0;
   2d8de:	f8ad 4006 	strh.w	r4, [sp, #6]
		gps_time_of_day = 0;
   2d8e2:	9402      	str	r4, [sp, #8]
	struct gps_pgps_request request = {
   2d8e4:	232a      	movs	r3, #42	; 0x2a
   2d8e6:	f8ad 300c 	strh.w	r3, [sp, #12]
   2d8ea:	23f0      	movs	r3, #240	; 0xf0
   2d8ec:	f8ad 300e 	strh.w	r3, [sp, #14]
   2d8f0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return pgps_request(&request);
   2d8f4:	a803      	add	r0, sp, #12
	struct gps_pgps_request request = {
   2d8f6:	f8ad 3010 	strh.w	r3, [sp, #16]
   2d8fa:	9b02      	ldr	r3, [sp, #8]
   2d8fc:	f8cd 3012 	str.w	r3, [sp, #18]
	return pgps_request(&request);
   2d900:	f7ff ff30 	bl	2d764 <pgps_request>
   2d904:	e7d9      	b.n	2d8ba <pgps_request_all+0x16>
		return 0;
   2d906:	2000      	movs	r0, #0
   2d908:	e7d7      	b.n	2d8ba <pgps_request_all+0x16>
   2d90a:	bf00      	nop
   2d90c:	2001d2bf 	.word	0x2001d2bf
   2d910:	000490ab 	.word	0x000490ab
   2d914:	20015810 	.word	0x20015810

0002d918 <nrf_cloud_pgps_find_prediction>:
{
   2d918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (state == PGPS_NONE) {
   2d91c:	4a9c      	ldr	r2, [pc, #624]	; (2db90 <nrf_cloud_pgps_find_prediction+0x278>)
	int64_t start_sec = index.start_sec;
   2d91e:	4c9d      	ldr	r4, [pc, #628]	; (2db94 <nrf_cloud_pgps_find_prediction+0x27c>)
{
   2d920:	b08d      	sub	sp, #52	; 0x34
	int64_t end_sec = index.end_sec;
   2d922:	e9d4 a306 	ldrd	sl, r3, [r4, #24]
   2d926:	9307      	str	r3, [sp, #28]
	if (state == PGPS_NONE) {
   2d928:	7813      	ldrb	r3, [r2, #0]
{
   2d92a:	4605      	mov	r5, r0
	int64_t start_sec = index.start_sec;
   2d92c:	e9d4 8b04 	ldrd	r8, fp, [r4, #16]
	uint16_t start_day = index.header.gps_day;
   2d930:	8966      	ldrh	r6, [r4, #10]
	uint32_t start_time = index.header.gps_time_of_day;
   2d932:	68e7      	ldr	r7, [r4, #12]
	uint16_t period_min = index.header.prediction_period_min;
   2d934:	f8b4 9008 	ldrh.w	r9, [r4, #8]
	if (state == PGPS_NONE) {
   2d938:	b933      	cbnz	r3, 2d948 <nrf_cloud_pgps_find_prediction+0x30>
		LOG_ERR("P-GPS subsystem is not initialized.");
   2d93a:	2145      	movs	r1, #69	; 0x45
   2d93c:	4896      	ldr	r0, [pc, #600]	; (2db98 <nrf_cloud_pgps_find_prediction+0x280>)
   2d93e:	f00f f8b7 	bl	3cab0 <z_log_minimal_printk>
		return -EINVAL;
   2d942:	f06f 0415 	mvn.w	r4, #21
   2d946:	e015      	b.n	2d974 <nrf_cloud_pgps_find_prediction+0x5c>
	if (prediction == NULL) {
   2d948:	2800      	cmp	r0, #0
   2d94a:	d0fa      	beq.n	2d942 <nrf_cloud_pgps_find_prediction+0x2a>
	*prediction = NULL;
   2d94c:	2300      	movs	r3, #0
	if (index.stale_server_data) {
   2d94e:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
	*prediction = NULL;
   2d952:	6003      	str	r3, [r0, #0]
	if (index.stale_server_data) {
   2d954:	b191      	cbz	r1, 2d97c <nrf_cloud_pgps_find_prediction+0x64>
		LOG_ERR("server error: expired data");
   2d956:	2145      	movs	r1, #69	; 0x45
   2d958:	4890      	ldr	r0, [pc, #576]	; (2db9c <nrf_cloud_pgps_find_prediction+0x284>)
   2d95a:	f00f f8a9 	bl	3cab0 <z_log_minimal_printk>
		index.cur_pnum = 0xff;
   2d95e:	21ff      	movs	r1, #255	; 0xff
   2d960:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
		state = PGPS_EXPIRED;
   2d964:	2102      	movs	r1, #2
		pgps_need_assistance = false; /* make sure we request it */
   2d966:	2300      	movs	r3, #0
		state = PGPS_EXPIRED;
   2d968:	4a89      	ldr	r2, [pc, #548]	; (2db90 <nrf_cloud_pgps_find_prediction+0x278>)
   2d96a:	7011      	strb	r1, [r2, #0]
		pgps_need_assistance = false; /* make sure we request it */
   2d96c:	4a8c      	ldr	r2, [pc, #560]	; (2dba0 <nrf_cloud_pgps_find_prediction+0x288>)
   2d96e:	6013      	str	r3, [r2, #0]
		return -ENODATA;
   2d970:	f06f 043c 	mvn.w	r4, #60	; 0x3c
}
   2d974:	4620      	mov	r0, r4
   2d976:	b00d      	add	sp, #52	; 0x34
   2d978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	err = npgps_get_shifted_time(&cur_gps_sec, &cur_gps_day,
   2d97c:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
   2d980:	aa09      	add	r2, sp, #36	; 0x24
   2d982:	f10d 0122 	add.w	r1, sp, #34	; 0x22
   2d986:	a80a      	add	r0, sp, #40	; 0x28
   2d988:	f001 f8d8 	bl	2eb3c <npgps_get_shifted_time>
	if (err < 0) {
   2d98c:	2800      	cmp	r0, #0
   2d98e:	da07      	bge.n	2d9a0 <nrf_cloud_pgps_find_prediction+0x88>
		LOG_INF("Unknown current time");
   2d990:	2149      	movs	r1, #73	; 0x49
   2d992:	4884      	ldr	r0, [pc, #528]	; (2dba4 <nrf_cloud_pgps_find_prediction+0x28c>)
   2d994:	f00f f88c 	bl	3cab0 <z_log_minimal_printk>
		cur_gps_sec = 0;
   2d998:	2200      	movs	r2, #0
   2d99a:	2300      	movs	r3, #0
   2d99c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	uint32_t tow = (day % DAYS_PER_WEEK) * SEC_PER_DAY + time_of_day;
   2d9a0:	2207      	movs	r2, #7
	print_time_details("Looking for prediction for:",
   2d9a2:	f8bd 0022 	ldrh.w	r0, [sp, #34]	; 0x22
   2d9a6:	9c09      	ldr	r4, [sp, #36]	; 0x24
	uint32_t tow = (day % DAYS_PER_WEEK) * SEC_PER_DAY + time_of_day;
   2d9a8:	fbb0 f2f2 	udiv	r2, r0, r2
   2d9ac:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
   2d9b0:	1ac3      	subs	r3, r0, r3
   2d9b2:	497d      	ldr	r1, [pc, #500]	; (2dba8 <nrf_cloud_pgps_find_prediction+0x290>)
   2d9b4:	b29b      	uxth	r3, r3
   2d9b6:	fb01 4103 	mla	r1, r1, r3, r4
	LOG_INF("%s GPS sec:%u, day:%u, time of day:%u, week:%u, "
   2d9ba:	ea4f 1c11 	mov.w	ip, r1, lsr #4
   2d9be:	e9cd 2302 	strd	r2, r3, [sp, #8]
   2d9c2:	e9cd 1c04 	strd	r1, ip, [sp, #16]
   2d9c6:	e9cd 0400 	strd	r0, r4, [sp]
   2d9ca:	2149      	movs	r1, #73	; 0x49
   2d9cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d9ce:	4a77      	ldr	r2, [pc, #476]	; (2dbac <nrf_cloud_pgps_find_prediction+0x294>)
   2d9d0:	4877      	ldr	r0, [pc, #476]	; (2dbb0 <nrf_cloud_pgps_find_prediction+0x298>)
   2d9d2:	f00f f86d 	bl	3cab0 <z_log_minimal_printk>
	if ((start_day == 0) && (start_time == 0)) {
   2d9d6:	b9c6      	cbnz	r6, 2da0a <nrf_cloud_pgps_find_prediction+0xf2>
   2d9d8:	b9bf      	cbnz	r7, 2da0a <nrf_cloud_pgps_find_prediction+0xf2>
		if (nrf_cloud_pgps_loading()) {
   2d9da:	f7ff feb9 	bl	2d750 <nrf_cloud_pgps_loading>
   2d9de:	b130      	cbz	r0, 2d9ee <nrf_cloud_pgps_find_prediction+0xd6>
			LOG_WRN("Predictions not loaded yet");
   2d9e0:	2157      	movs	r1, #87	; 0x57
   2d9e2:	4874      	ldr	r0, [pc, #464]	; (2dbb4 <nrf_cloud_pgps_find_prediction+0x29c>)
   2d9e4:	f00f f864 	bl	3cab0 <z_log_minimal_printk>
		return -ELOADING;
   2d9e8:	f46f 54fa 	mvn.w	r4, #8000	; 0x1f40
   2d9ec:	e7c2      	b.n	2d974 <nrf_cloud_pgps_find_prediction+0x5c>
		index.cur_pnum = 0xff;
   2d9ee:	22ff      	movs	r2, #255	; 0xff
   2d9f0:	4b68      	ldr	r3, [pc, #416]	; (2db94 <nrf_cloud_pgps_find_prediction+0x27c>)
		LOG_WRN("No data stored");
   2d9f2:	2157      	movs	r1, #87	; 0x57
		index.cur_pnum = 0xff;
   2d9f4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		state = PGPS_EXPIRED;
   2d9f8:	2202      	movs	r2, #2
   2d9fa:	4b65      	ldr	r3, [pc, #404]	; (2db90 <nrf_cloud_pgps_find_prediction+0x278>)
		LOG_WRN("No data stored");
   2d9fc:	486e      	ldr	r0, [pc, #440]	; (2dbb8 <nrf_cloud_pgps_find_prediction+0x2a0>)
		state = PGPS_EXPIRED;
   2d9fe:	701a      	strb	r2, [r3, #0]
		pgps_need_assistance = false; /* make sure we request it */
   2da00:	4b67      	ldr	r3, [pc, #412]	; (2dba0 <nrf_cloud_pgps_find_prediction+0x288>)
   2da02:	601f      	str	r7, [r3, #0]
		LOG_WRN("No data stored");
   2da04:	f00f f854 	bl	3cab0 <z_log_minimal_printk>
   2da08:	e7b2      	b.n	2d970 <nrf_cloud_pgps_find_prediction+0x58>
	uint32_t tow = (day % DAYS_PER_WEEK) * SEC_PER_DAY + time_of_day;
   2da0a:	2107      	movs	r1, #7
   2da0c:	fbb6 f1f1 	udiv	r1, r6, r1
	offset_sec = cur_gps_sec - start_sec;
   2da10:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2da12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2da14:	ebb4 0408 	subs.w	r4, r4, r8
   2da18:	eb63 0b0b 	sbc.w	fp, r3, fp
	uint32_t tow = (day % DAYS_PER_WEEK) * SEC_PER_DAY + time_of_day;
   2da1c:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
   2da20:	4a61      	ldr	r2, [pc, #388]	; (2dba8 <nrf_cloud_pgps_find_prediction+0x290>)
   2da22:	1af3      	subs	r3, r6, r3
   2da24:	b29b      	uxth	r3, r3
   2da26:	fb02 7203 	mla	r2, r2, r3, r7
	LOG_INF("%s GPS sec:%u, day:%u, time of day:%u, week:%u, "
   2da2a:	0910      	lsrs	r0, r2, #4
   2da2c:	e9cd 2004 	strd	r2, r0, [sp, #16]
   2da30:	e9cd 1302 	strd	r1, r3, [sp, #8]
   2da34:	4a61      	ldr	r2, [pc, #388]	; (2dbbc <nrf_cloud_pgps_find_prediction+0x2a4>)
   2da36:	4643      	mov	r3, r8
   2da38:	2149      	movs	r1, #73	; 0x49
   2da3a:	485d      	ldr	r0, [pc, #372]	; (2dbb0 <nrf_cloud_pgps_find_prediction+0x298>)
   2da3c:	e9cd 6700 	strd	r6, r7, [sp]
   2da40:	f00f f836 	bl	3cab0 <z_log_minimal_printk>
	LOG_INF("current offset into prediction set, sec:%d", (int32_t)offset_sec);
   2da44:	4622      	mov	r2, r4
   2da46:	2149      	movs	r1, #73	; 0x49
   2da48:	485d      	ldr	r0, [pc, #372]	; (2dbc0 <nrf_cloud_pgps_find_prediction+0x2a8>)
   2da4a:	f00f f831 	bl	3cab0 <z_log_minimal_printk>
	if (offset_sec < 0) {
   2da4e:	f1bb 0f00 	cmp.w	fp, #0
   2da52:	da05      	bge.n	2da60 <nrf_cloud_pgps_find_prediction+0x148>
		LOG_WRN("cannot find prediction; real time not known");
   2da54:	2157      	movs	r1, #87	; 0x57
   2da56:	485b      	ldr	r0, [pc, #364]	; (2dbc4 <nrf_cloud_pgps_find_prediction+0x2ac>)
   2da58:	f00f f82a 	bl	3cab0 <z_log_minimal_printk>
		return -ETIMEUNKNOWN;
   2da5c:	4c5a      	ldr	r4, [pc, #360]	; (2dbc8 <nrf_cloud_pgps_find_prediction+0x2b0>)
   2da5e:	e789      	b.n	2d974 <nrf_cloud_pgps_find_prediction+0x5c>
	} else if (cur_gps_sec > end_sec) {
   2da60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2da62:	9a07      	ldr	r2, [sp, #28]
   2da64:	459a      	cmp	sl, r3
   2da66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2da68:	eb72 0303 	sbcs.w	r3, r2, r3
   2da6c:	da06      	bge.n	2da7c <nrf_cloud_pgps_find_prediction+0x164>
			LOG_WRN("data expired!");
   2da6e:	2157      	movs	r1, #87	; 0x57
   2da70:	4856      	ldr	r0, [pc, #344]	; (2dbcc <nrf_cloud_pgps_find_prediction+0x2b4>)
   2da72:	f00f f81d 	bl	3cab0 <z_log_minimal_printk>
			return -ETIMEDOUT;
   2da76:	f06f 0473 	mvn.w	r4, #115	; 0x73
   2da7a:	e77b      	b.n	2d974 <nrf_cloud_pgps_find_prediction+0x5c>
		pnum = offset_sec / (SEC_PER_MIN * period_min);
   2da7c:	223c      	movs	r2, #60	; 0x3c
   2da7e:	2300      	movs	r3, #0
   2da80:	4620      	mov	r0, r4
   2da82:	4659      	mov	r1, fp
   2da84:	fb02 f209 	mul.w	r2, r2, r9
   2da88:	f7ef f9de 	bl	1ce48 <__aeabi_ldivmod>
		if (pnum >= index.header.prediction_count) {
   2da8c:	4e41      	ldr	r6, [pc, #260]	; (2db94 <nrf_cloud_pgps_find_prediction+0x27c>)
		pnum = offset_sec / (SEC_PER_MIN * period_min);
   2da8e:	4604      	mov	r4, r0
		if (pnum >= index.header.prediction_count) {
   2da90:	88b3      	ldrh	r3, [r6, #4]
   2da92:	4283      	cmp	r3, r0
   2da94:	dc06      	bgt.n	2daa4 <nrf_cloud_pgps_find_prediction+0x18c>
			LOG_WRN("prediction num:%d -- too large", pnum);
   2da96:	4602      	mov	r2, r0
   2da98:	2157      	movs	r1, #87	; 0x57
   2da9a:	484d      	ldr	r0, [pc, #308]	; (2dbd0 <nrf_cloud_pgps_find_prediction+0x2b8>)
   2da9c:	f00f f808 	bl	3cab0 <z_log_minimal_printk>
			pnum = index.header.prediction_count - 1;
   2daa0:	88b4      	ldrh	r4, [r6, #4]
   2daa2:	3c01      	subs	r4, #1
	LOG_INF("Selected prediction num:%d", pnum);
   2daa4:	484b      	ldr	r0, [pc, #300]	; (2dbd4 <nrf_cloud_pgps_find_prediction+0x2bc>)
   2daa6:	4622      	mov	r2, r4
   2daa8:	2149      	movs	r1, #73	; 0x49
   2daaa:	f00f f801 	bl	3cab0 <z_log_minimal_printk>
	*prediction = index.predictions[pnum];
   2daae:	eb06 0384 	add.w	r3, r6, r4, lsl #2
   2dab2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
	index.cur_pnum = pnum;
   2dab4:	f886 402e 	strb.w	r4, [r6, #46]	; 0x2e
	*prediction = index.predictions[pnum];
   2dab8:	6028      	str	r0, [r5, #0]
	if (*prediction) {
   2daba:	2800      	cmp	r0, #0
   2dabc:	d054      	beq.n	2db68 <nrf_cloud_pgps_find_prediction+0x250>
		err = validate_prediction(*prediction,
   2dabe:	2300      	movs	r3, #0
   2dac0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2dac2:	9300      	str	r3, [sp, #0]
   2dac4:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   2dac8:	464b      	mov	r3, r9
   2daca:	f7ff fd51 	bl	2d570 <validate_prediction.constprop.0>
		if (!err) {
   2dace:	2800      	cmp	r0, #0
   2dad0:	d15b      	bne.n	2db8a <nrf_cloud_pgps_find_prediction+0x272>
			start_expiration_timer(pnum, cur_gps_sec);
   2dad2:	e9dd 870a 	ldrd	r8, r7, [sp, #40]	; 0x28
	return z_timeout_remaining(&timer->timeout);
   2dad6:	4840      	ldr	r0, [pc, #256]	; (2dbd8 <nrf_cloud_pgps_find_prediction+0x2c0>)
   2dad8:	f00b f822 	bl	38b20 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
   2dadc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2dae0:	fba0 0302 	umull	r0, r3, r0, r2
   2dae4:	0bc0      	lsrs	r0, r0, #15
	if (k_timer_remaining_get(&prediction_timer) > 0) {
   2dae6:	ea50 4343 	orrs.w	r3, r0, r3, lsl #17
   2daea:	f47f af43 	bne.w	2d974 <nrf_cloud_pgps_find_prediction+0x5c>
	int64_t psec = index.start_sec + (uint32_t)pnum * index.period_sec;
   2daee:	e9d6 5104 	ldrd	r5, r1, [r6, #16]
   2daf2:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
	end_sec = index.header.prediction_period_min * SEC_PER_MIN + start_sec;
   2daf4:	8930      	ldrh	r0, [r6, #8]
	int64_t psec = index.start_sec + (uint32_t)pnum * index.period_sec;
   2daf6:	4363      	muls	r3, r4
   2daf8:	195d      	adds	r5, r3, r5
	end_sec = index.header.prediction_period_min * SEC_PER_MIN + start_sec;
   2dafa:	f04f 033c 	mov.w	r3, #60	; 0x3c
	int64_t psec = index.start_sec + (uint32_t)pnum * index.period_sec;
   2dafe:	f141 0100 	adc.w	r1, r1, #0
	end_sec = index.header.prediction_period_min * SEC_PER_MIN + start_sec;
   2db02:	fbe0 5103 	umlal	r5, r1, r0, r3
	delta = (end_sec - cur_gps_sec) + 1;
   2db06:	ebb5 0508 	subs.w	r5, r5, r8
   2db0a:	eb61 0107 	sbc.w	r1, r1, r7
   2db0e:	3501      	adds	r5, #1
   2db10:	f141 0100 	adc.w	r1, r1, #0
	if (delta > 0) {
   2db14:	2d01      	cmp	r5, #1
   2db16:	f171 0300 	sbcs.w	r3, r1, #0
   2db1a:	db21      	blt.n	2db60 <nrf_cloud_pgps_find_prediction+0x248>
		k_timer_start(&prediction_timer, K_SECONDS(delta), K_NO_WAIT);
   2db1c:	fba5 0302 	umull	r0, r3, r5, r2
   2db20:	fb02 3101 	mla	r1, r2, r1, r3
			return ((t * to_hz + off) / from_hz);
   2db24:	f240 33e7 	movw	r3, #999	; 0x3e7
   2db28:	03c9      	lsls	r1, r1, #15
   2db2a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   2db2e:	03c0      	lsls	r0, r0, #15
   2db30:	18c0      	adds	r0, r0, r3
   2db32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2db36:	f04f 0300 	mov.w	r3, #0
   2db3a:	f141 0100 	adc.w	r1, r1, #0
   2db3e:	f7ef f9d3 	bl	1cee8 <__aeabi_uldivmod>
   2db42:	4602      	mov	r2, r0
   2db44:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   2db46:	2100      	movs	r1, #0
   2db48:	2000      	movs	r0, #0
   2db4a:	e9cd 0100 	strd	r0, r1, [sp]
   2db4e:	4822      	ldr	r0, [pc, #136]	; (2dbd8 <nrf_cloud_pgps_find_prediction+0x2c0>)
   2db50:	f00b fa06 	bl	38f60 <z_impl_k_timer_start>
		LOG_INF("injecting next prediction in %d seconds", (int32_t)delta);
   2db54:	462a      	mov	r2, r5
   2db56:	2149      	movs	r1, #73	; 0x49
   2db58:	4820      	ldr	r0, [pc, #128]	; (2dbdc <nrf_cloud_pgps_find_prediction+0x2c4>)
		LOG_ERR("cannot start prediction expiration timer; delta = %d", (int32_t)delta);
   2db5a:	f00e ffa9 	bl	3cab0 <z_log_minimal_printk>
   2db5e:	e709      	b.n	2d974 <nrf_cloud_pgps_find_prediction+0x5c>
   2db60:	462a      	mov	r2, r5
   2db62:	2145      	movs	r1, #69	; 0x45
   2db64:	481e      	ldr	r0, [pc, #120]	; (2dbe0 <nrf_cloud_pgps_find_prediction+0x2c8>)
   2db66:	e7f8      	b.n	2db5a <nrf_cloud_pgps_find_prediction+0x242>
	if (nrf_cloud_pgps_loading()) {
   2db68:	f7ff fdf2 	bl	2d750 <nrf_cloud_pgps_loading>
   2db6c:	b128      	cbz	r0, 2db7a <nrf_cloud_pgps_find_prediction+0x262>
		LOG_WRN("Prediction num:%u not loaded yet", pnum);
   2db6e:	4622      	mov	r2, r4
   2db70:	2157      	movs	r1, #87	; 0x57
   2db72:	481c      	ldr	r0, [pc, #112]	; (2dbe4 <nrf_cloud_pgps_find_prediction+0x2cc>)
   2db74:	f00e ff9c 	bl	3cab0 <z_log_minimal_printk>
   2db78:	e736      	b.n	2d9e8 <nrf_cloud_pgps_find_prediction+0xd0>
	LOG_ERR("Prediction num:%u not available; state:%d", pnum, state);
   2db7a:	4b05      	ldr	r3, [pc, #20]	; (2db90 <nrf_cloud_pgps_find_prediction+0x278>)
   2db7c:	4622      	mov	r2, r4
   2db7e:	2145      	movs	r1, #69	; 0x45
   2db80:	781b      	ldrb	r3, [r3, #0]
   2db82:	4819      	ldr	r0, [pc, #100]	; (2dbe8 <nrf_cloud_pgps_find_prediction+0x2d0>)
   2db84:	f00e ff94 	bl	3cab0 <z_log_minimal_printk>
	return -EINVAL;
   2db88:	e6db      	b.n	2d942 <nrf_cloud_pgps_find_prediction+0x2a>
   2db8a:	4604      	mov	r4, r0
   2db8c:	e6f2      	b.n	2d974 <nrf_cloud_pgps_find_prediction+0x5c>
   2db8e:	bf00      	nop
   2db90:	2001d2bf 	.word	0x2001d2bf
   2db94:	20015810 	.word	0x20015810
   2db98:	000490ab 	.word	0x000490ab
   2db9c:	0004920a 	.word	0x0004920a
   2dba0:	2001a120 	.word	0x2001a120
   2dba4:	0004922a 	.word	0x0004922a
   2dba8:	00015180 	.word	0x00015180
   2dbac:	00049244 	.word	0x00049244
   2dbb0:	00049260 	.word	0x00049260
   2dbb4:	000492bd 	.word	0x000492bd
   2dbb8:	000492dd 	.word	0x000492dd
   2dbbc:	000492f1 	.word	0x000492f1
   2dbc0:	0004930a 	.word	0x0004930a
   2dbc4:	0004933a 	.word	0x0004933a
   2dbc8:	ffffe0c0 	.word	0xffffe0c0
   2dbcc:	0004936b 	.word	0x0004936b
   2dbd0:	0004937e 	.word	0x0004937e
   2dbd4:	000493a2 	.word	0x000493a2
   2dbd8:	20014df8 	.word	0x20014df8
   2dbdc:	000493c2 	.word	0x000493c2
   2dbe0:	000493ef 	.word	0x000493ef
   2dbe4:	00049429 	.word	0x00049429
   2dbe8:	0004944f 	.word	0x0004944f

0002dbec <nrf_cloud_pgps_notify_prediction>:
{
   2dbec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct nrf_cloud_pgps_event evt = {
   2dbee:	2303      	movs	r3, #3
   2dbf0:	2500      	movs	r5, #0
   2dbf2:	e9cd 5502 	strd	r5, r5, [sp, #8]
   2dbf6:	f88d 3008 	strb.w	r3, [sp, #8]
	if (state == PGPS_NONE) {
   2dbfa:	4b22      	ldr	r3, [pc, #136]	; (2dc84 <nrf_cloud_pgps_notify_prediction+0x98>)
   2dbfc:	781b      	ldrb	r3, [r3, #0]
   2dbfe:	b943      	cbnz	r3, 2dc12 <nrf_cloud_pgps_notify_prediction+0x26>
		LOG_ERR("P-GPS subsystem is not initialized.");
   2dc00:	2145      	movs	r1, #69	; 0x45
   2dc02:	4821      	ldr	r0, [pc, #132]	; (2dc88 <nrf_cloud_pgps_notify_prediction+0x9c>)
   2dc04:	f00e ff54 	bl	3cab0 <z_log_minimal_printk>
		return -EINVAL;
   2dc08:	f06f 0415 	mvn.w	r4, #21
}
   2dc0c:	4620      	mov	r0, r4
   2dc0e:	b004      	add	sp, #16
   2dc10:	bd70      	pop	{r4, r5, r6, pc}
	LOG_INF("Searching for prediction");
   2dc12:	2149      	movs	r1, #73	; 0x49
   2dc14:	481d      	ldr	r0, [pc, #116]	; (2dc8c <nrf_cloud_pgps_notify_prediction+0xa0>)
   2dc16:	f00e ff4b 	bl	3cab0 <z_log_minimal_printk>
	err = nrf_cloud_pgps_find_prediction(&prediction);
   2dc1a:	a801      	add	r0, sp, #4
   2dc1c:	f7ff fe7c 	bl	2d918 <nrf_cloud_pgps_find_prediction>
	if (err == -ELOADING) {
   2dc20:	f46f 53fa 	mvn.w	r3, #8000	; 0x1f40
   2dc24:	4298      	cmp	r0, r3
	err = nrf_cloud_pgps_find_prediction(&prediction);
   2dc26:	4604      	mov	r4, r0
	if (err == -ELOADING) {
   2dc28:	d104      	bne.n	2dc34 <nrf_cloud_pgps_notify_prediction+0x48>
		pgps_need_assistance = true;
   2dc2a:	2201      	movs	r2, #1
   2dc2c:	4b18      	ldr	r3, [pc, #96]	; (2dc90 <nrf_cloud_pgps_notify_prediction+0xa4>)
   2dc2e:	601a      	str	r2, [r3, #0]
		err = 0;
   2dc30:	462c      	mov	r4, r5
   2dc32:	e7eb      	b.n	2dc0c <nrf_cloud_pgps_notify_prediction+0x20>
	} else if (err < 0) {
   2dc34:	2800      	cmp	r0, #0
   2dc36:	da12      	bge.n	2dc5e <nrf_cloud_pgps_notify_prediction+0x72>
		if (!pgps_need_assistance) {
   2dc38:	4d15      	ldr	r5, [pc, #84]	; (2dc90 <nrf_cloud_pgps_notify_prediction+0xa4>)
   2dc3a:	682e      	ldr	r6, [r5, #0]
   2dc3c:	b10e      	cbz	r6, 2dc42 <nrf_cloud_pgps_notify_prediction+0x56>
			err = 0;
   2dc3e:	2400      	movs	r4, #0
   2dc40:	e7e4      	b.n	2dc0c <nrf_cloud_pgps_notify_prediction+0x20>
			pgps_need_assistance = true;
   2dc42:	2301      	movs	r3, #1
   2dc44:	602b      	str	r3, [r5, #0]
			err = pgps_request_all();
   2dc46:	f7ff fe2d 	bl	2d8a4 <pgps_request_all>
			if (err) {
   2dc4a:	4604      	mov	r4, r0
   2dc4c:	2800      	cmp	r0, #0
   2dc4e:	d0dd      	beq.n	2dc0c <nrf_cloud_pgps_notify_prediction+0x20>
				LOG_ERR("Error while requesting pgps set: %d", err);
   2dc50:	4602      	mov	r2, r0
   2dc52:	2145      	movs	r1, #69	; 0x45
   2dc54:	480f      	ldr	r0, [pc, #60]	; (2dc94 <nrf_cloud_pgps_notify_prediction+0xa8>)
   2dc56:	f00e ff2b 	bl	3cab0 <z_log_minimal_printk>
				pgps_need_assistance = false; /* try again next time */
   2dc5a:	602e      	str	r6, [r5, #0]
   2dc5c:	e7d6      	b.n	2dc0c <nrf_cloud_pgps_notify_prediction+0x20>
	} else if ((err >= 0) && (err < NUM_PREDICTIONS)) {
   2dc5e:	2829      	cmp	r0, #41	; 0x29
   2dc60:	dcd4      	bgt.n	2dc0c <nrf_cloud_pgps_notify_prediction+0x20>
		LOG_INF("Found P-GPS prediction %d", pnum);
   2dc62:	4602      	mov	r2, r0
   2dc64:	2149      	movs	r1, #73	; 0x49
   2dc66:	480c      	ldr	r0, [pc, #48]	; (2dc98 <nrf_cloud_pgps_notify_prediction+0xac>)
   2dc68:	f00e ff22 	bl	3cab0 <z_log_minimal_printk>
		pgps_need_assistance = false;
   2dc6c:	4b08      	ldr	r3, [pc, #32]	; (2dc90 <nrf_cloud_pgps_notify_prediction+0xa4>)
   2dc6e:	601d      	str	r5, [r3, #0]
		if (evt_handler) {
   2dc70:	4b0a      	ldr	r3, [pc, #40]	; (2dc9c <nrf_cloud_pgps_notify_prediction+0xb0>)
   2dc72:	681b      	ldr	r3, [r3, #0]
   2dc74:	2b00      	cmp	r3, #0
   2dc76:	d0e2      	beq.n	2dc3e <nrf_cloud_pgps_notify_prediction+0x52>
			evt.prediction = prediction;
   2dc78:	9a01      	ldr	r2, [sp, #4]
			evt_handler(&evt);
   2dc7a:	a802      	add	r0, sp, #8
			evt.prediction = prediction;
   2dc7c:	9203      	str	r2, [sp, #12]
			evt_handler(&evt);
   2dc7e:	4798      	blx	r3
   2dc80:	e7d6      	b.n	2dc30 <nrf_cloud_pgps_notify_prediction+0x44>
   2dc82:	bf00      	nop
   2dc84:	2001d2bf 	.word	0x2001d2bf
   2dc88:	000490ab 	.word	0x000490ab
   2dc8c:	0004947e 	.word	0x0004947e
   2dc90:	2001a120 	.word	0x2001a120
   2dc94:	0004949c 	.word	0x0004949c
   2dc98:	000494c5 	.word	0x000494c5
   2dc9c:	2001a114 	.word	0x2001a114

0002dca0 <process_buffer>:
{
   2dca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (index.dl_offset == 0) {
   2dca4:	4c98      	ldr	r4, [pc, #608]	; (2df08 <process_buffer+0x268>)
{
   2dca6:	4605      	mov	r5, r0
	if (index.dl_offset == 0) {
   2dca8:	6a23      	ldr	r3, [r4, #32]
{
   2dcaa:	468a      	mov	sl, r1
   2dcac:	b08d      	sub	sp, #52	; 0x34
	if (index.dl_offset == 0) {
   2dcae:	2b00      	cmp	r3, #0
   2dcb0:	d14e      	bne.n	2dd50 <process_buffer+0xb0>
		if (len < sizeof(*header)) {
   2dcb2:	290f      	cmp	r1, #15
   2dcb4:	d904      	bls.n	2dcc0 <process_buffer+0x20>
	if (!validate_pgps_header(header)) {
   2dcb6:	f7ff fc05 	bl	2d4c4 <validate_pgps_header>
   2dcba:	b920      	cbnz	r0, 2dcc6 <process_buffer+0x26>
		state = PGPS_NONE;
   2dcbc:	4b93      	ldr	r3, [pc, #588]	; (2df0c <process_buffer+0x26c>)
   2dcbe:	7018      	strb	r0, [r3, #0]
			return -EINVAL; /* need full header, for now */
   2dcc0:	f06f 0615 	mvn.w	r6, #21
   2dcc4:	e179      	b.n	2dfba <process_buffer+0x31a>
	if (index.partial_request) {
   2dcc6:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   2dcca:	b163      	cbz	r3, 2dce6 <process_buffer+0x46>
		LOG_INF("Partial request; starting at prediction num:%u", index.pnum_offset);
   2dccc:	2149      	movs	r1, #73	; 0x49
   2dcce:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   2dcd2:	488f      	ldr	r0, [pc, #572]	; (2df10 <process_buffer+0x270>)
   2dcd4:	f00e feec 	bl	3cab0 <z_log_minimal_printk>
		header->prediction_count = index.header.prediction_count;
   2dcd8:	88a3      	ldrh	r3, [r4, #4]
   2dcda:	80ab      	strh	r3, [r5, #4]
		header->gps_day = index.header.gps_day;
   2dcdc:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   2dce0:	816b      	strh	r3, [r5, #10]
		header->gps_time_of_day = index.header.gps_time_of_day;
   2dce2:	68e3      	ldr	r3, [r4, #12]
   2dce4:	60eb      	str	r3, [r5, #12]
		LOG_INF("Storing P-GPS header");
   2dce6:	2149      	movs	r1, #73	; 0x49
   2dce8:	488a      	ldr	r0, [pc, #552]	; (2df14 <process_buffer+0x274>)
   2dcea:	f00e fee1 	bl	3cab0 <z_log_minimal_printk>
		cache_pgps_header(header);
   2dcee:	4628      	mov	r0, r5
   2dcf0:	f7ff fc1a 	bl	2d528 <cache_pgps_header>
		err = npgps_get_shifted_time(&gps_sec, NULL, NULL,
   2dcf4:	2200      	movs	r2, #0
   2dcf6:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
   2dcfa:	4611      	mov	r1, r2
   2dcfc:	a808      	add	r0, sp, #32
   2dcfe:	f000 ff1d 	bl	2eb3c <npgps_get_shifted_time>
		if (!err) {
   2dd02:	2800      	cmp	r0, #0
   2dd04:	d172      	bne.n	2ddec <process_buffer+0x14c>
			if ((index.start_sec <= gps_sec) &&
   2dd06:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
   2dd0a:	e9dd 3108 	ldrd	r3, r1, [sp, #32]
   2dd0e:	4293      	cmp	r3, r2
   2dd10:	eb71 0000 	sbcs.w	r0, r1, r0
   2dd14:	db55      	blt.n	2ddc2 <process_buffer+0x122>
			    (gps_sec <= index.end_sec)) {
   2dd16:	e9d4 2006 	ldrd	r2, r0, [r4, #24]
			if ((index.start_sec <= gps_sec) &&
   2dd1a:	429a      	cmp	r2, r3
   2dd1c:	eb70 0101 	sbcs.w	r1, r0, r1
   2dd20:	db60      	blt.n	2dde4 <process_buffer+0x144>
				LOG_INF("Received data covers good timeframe");
   2dd22:	2149      	movs	r1, #73	; 0x49
   2dd24:	487c      	ldr	r0, [pc, #496]	; (2df18 <process_buffer+0x278>)
			LOG_WRN("Current time unknown; assume data's timeframe is valid");
   2dd26:	f00e fec3 	bl	3cab0 <z_log_minimal_printk>
		log_pgps_header("pgps_header: ", header);
   2dd2a:	4629      	mov	r1, r5
   2dd2c:	487b      	ldr	r0, [pc, #492]	; (2df1c <process_buffer+0x27c>)
   2dd2e:	f7ff fbab 	bl	2d488 <log_pgps_header>
		npgps_save_header(header);
   2dd32:	4628      	mov	r0, r5
   2dd34:	f000 feaa 	bl	2ea8c <npgps_save_header>
		index.dl_offset += sizeof(*header);
   2dd38:	6a23      	ldr	r3, [r4, #32]
		len -= sizeof(*header);
   2dd3a:	f1aa 0a10 	sub.w	sl, sl, #16
		index.dl_offset += sizeof(*header);
   2dd3e:	3310      	adds	r3, #16
   2dd40:	6223      	str	r3, [r4, #32]
		index.dl_pnum = index.pnum_offset;
   2dd42:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
		buf += sizeof(*header);
   2dd46:	3510      	adds	r5, #16
		index.dl_pnum = index.pnum_offset;
   2dd48:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		index.pred_offset = 0;
   2dd4c:	2300      	movs	r3, #0
   2dd4e:	84a3      	strh	r3, [r4, #36]	; 0x24
	need = MIN((PGPS_PREDICTION_DL_SIZE - index.pred_offset), len);
   2dd50:	f240 79d6 	movw	r9, #2006	; 0x7d6
   2dd54:	8ca6      	ldrh	r6, [r4, #36]	; 0x24
	memcpy(&prediction_buf[index.pred_offset], buf, need);
   2dd56:	4f72      	ldr	r7, [pc, #456]	; (2df20 <process_buffer+0x280>)
	need = MIN((PGPS_PREDICTION_DL_SIZE - index.pred_offset), len);
   2dd58:	eba9 0806 	sub.w	r8, r9, r6
   2dd5c:	45d0      	cmp	r8, sl
   2dd5e:	bf28      	it	cs
   2dd60:	46d0      	movcs	r8, sl
   2dd62:	19b8      	adds	r0, r7, r6
   2dd64:	4642      	mov	r2, r8
   2dd66:	4629      	mov	r1, r5
   2dd68:	f013 fb1c 	bl	413a4 <memcpy>
	len -= need;
   2dd6c:	ebaa 0308 	sub.w	r3, sl, r8
   2dd70:	9303      	str	r3, [sp, #12]
	index.pred_offset += need;
   2dd72:	4446      	add	r6, r8
	index.dl_offset += need;
   2dd74:	6a23      	ldr	r3, [r4, #32]
	index.pred_offset += need;
   2dd76:	b2b6      	uxth	r6, r6
	index.dl_offset += need;
   2dd78:	4443      	add	r3, r8
	if (index.pred_offset == PGPS_PREDICTION_DL_SIZE) {
   2dd7a:	454e      	cmp	r6, r9
	index.pred_offset += need;
   2dd7c:	84a6      	strh	r6, [r4, #36]	; 0x24
	index.dl_offset += need;
   2dd7e:	6223      	str	r3, [r4, #32]
	if (index.pred_offset == PGPS_PREDICTION_DL_SIZE) {
   2dd80:	d17f      	bne.n	2de82 <process_buffer+0x1e2>
	struct agps_header *elem = (struct agps_header *)element_ptr;
	size_t parsed_len = 0;
	int64_t gps_sec;
	bool finished = false;

	gps_sec = 0;
   2dd82:	2600      	movs	r6, #0
	size_t parsed_len = 0;
   2dd84:	46b1      	mov	r9, r6
		err = consume_pgps_data(index.dl_pnum, prediction_buf,
   2dd86:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
	gps_sec = 0;
   2dd8a:	9604      	str	r6, [sp, #16]
	if (elements_left_to_process == 0) {
   2dd8c:	4b65      	ldr	r3, [pc, #404]	; (2df24 <process_buffer+0x284>)
   2dd8e:	881a      	ldrh	r2, [r3, #0]
   2dd90:	bb7a      	cbnz	r2, 2ddf2 <process_buffer+0x152>
		element_type = element->type;
   2dd92:	4a65      	ldr	r2, [pc, #404]	; (2df28 <process_buffer+0x288>)
		element->type = (enum nrf_cloud_agps_type)
   2dd94:	7839      	ldrb	r1, [r7, #0]
		element_type = element->type;
   2dd96:	7011      	strb	r1, [r2, #0]
			*(uint16_t *)&buf[NRF_CLOUD_AGPS_BIN_COUNT_OFFSET] - 1;
   2dd98:	f8b7 2001 	ldrh.w	r2, [r7, #1]
   2dd9c:	3a01      	subs	r2, #1
		elements_left_to_process =
   2dd9e:	801a      	strh	r2, [r3, #0]
		len += NRF_CLOUD_AGPS_BIN_TYPE_SIZE +
   2dda0:	2203      	movs	r2, #3
	switch (element->type) {
   2dda2:	2902      	cmp	r1, #2
   2dda4:	d02c      	beq.n	2de00 <process_buffer+0x160>
   2dda6:	2907      	cmp	r1, #7
   2dda8:	d03c      	beq.n	2de24 <process_buffer+0x184>
	while (parsed_len < buf_len) {
		bool empty;
		size_t element_size = get_next_pgps_element(&element, element_ptr);

		if (element_size == 0) {
			LOG_INF("  End of element");
   2ddaa:	2149      	movs	r1, #73	; 0x49
   2ddac:	485f      	ldr	r0, [pc, #380]	; (2df2c <process_buffer+0x28c>)
   2ddae:	f00e fe7f 	bl	3cab0 <z_log_minimal_printk>
					return err;
				}
			}
		}
	} else {
		LOG_ERR("Parsing incomplete; aborting.");
   2ddb2:	2145      	movs	r1, #69	; 0x45
   2ddb4:	485e      	ldr	r0, [pc, #376]	; (2df30 <process_buffer+0x290>)
   2ddb6:	f00e fe7b 	bl	3cab0 <z_log_minimal_printk>
		state = PGPS_NONE;
   2ddba:	2200      	movs	r2, #0
   2ddbc:	4b53      	ldr	r3, [pc, #332]	; (2df0c <process_buffer+0x26c>)
   2ddbe:	701a      	strb	r2, [r3, #0]
		if (err) {
   2ddc0:	e77e      	b.n	2dcc0 <process_buffer+0x20>
					LOG_ERR("Received data is not within required "
   2ddc2:	2145      	movs	r1, #69	; 0x45
   2ddc4:	485b      	ldr	r0, [pc, #364]	; (2df34 <process_buffer+0x294>)
   2ddc6:	1ad2      	subs	r2, r2, r3
					LOG_ERR("Received data is not within required "
   2ddc8:	f00e fe72 	bl	3cab0 <z_log_minimal_printk>
				index.stale_server_data = true;
   2ddcc:	2301      	movs	r3, #1
__ssp_bos_icheck3(memset, void *, int)
   2ddce:	2210      	movs	r2, #16
   2ddd0:	2100      	movs	r1, #0
   2ddd2:	4628      	mov	r0, r5
   2ddd4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   2ddd8:	f013 fb04 	bl	413e4 <memset>
				cache_pgps_header(header);
   2dddc:	4628      	mov	r0, r5
   2ddde:	f7ff fba3 	bl	2d528 <cache_pgps_header>
				return -EINVAL;
   2dde2:	e76d      	b.n	2dcc0 <process_buffer+0x20>
					LOG_ERR("Received data is not within required "
   2dde4:	2145      	movs	r1, #69	; 0x45
   2dde6:	4854      	ldr	r0, [pc, #336]	; (2df38 <process_buffer+0x298>)
   2dde8:	1a9a      	subs	r2, r3, r2
   2ddea:	e7ed      	b.n	2ddc8 <process_buffer+0x128>
			LOG_WRN("Current time unknown; assume data's timeframe is valid");
   2ddec:	2157      	movs	r1, #87	; 0x57
   2ddee:	4853      	ldr	r0, [pc, #332]	; (2df3c <process_buffer+0x29c>)
   2ddf0:	e799      	b.n	2dd26 <process_buffer+0x86>
		element->type = element_type;
   2ddf2:	4b4d      	ldr	r3, [pc, #308]	; (2df28 <process_buffer+0x288>)
		elements_left_to_process -= 1;
   2ddf4:	3a01      	subs	r2, #1
		element->type = element_type;
   2ddf6:	7819      	ldrb	r1, [r3, #0]
		elements_left_to_process -= 1;
   2ddf8:	4b4a      	ldr	r3, [pc, #296]	; (2df24 <process_buffer+0x284>)
   2ddfa:	801a      	strh	r2, [r3, #0]
	size_t len = 0;
   2ddfc:	2200      	movs	r2, #0
   2ddfe:	e7d0      	b.n	2dda2 <process_buffer+0x102>
		len += sizeof(struct nrf_cloud_agps_ephemeris);
   2de00:	4639      	mov	r1, r7
   2de02:	f102 0b3e 	add.w	fp, r2, #62	; 0x3e
		switch (element.type) {
   2de06:	f107 003d 	add.w	r0, r7, #61	; 0x3d
			for (int i = 1; i < sizeof(struct nrf_cloud_agps_ephemeris); i++) {
   2de0a:	4288      	cmp	r0, r1
   2de0c:	d13f      	bne.n	2de8e <process_buffer+0x1ee>
		element->ephemeris = (struct nrf_cloud_agps_ephemeris *)(buf + len);
   2de0e:	18bb      	adds	r3, r7, r2
				LOG_INF("Marking ephemeris:%u as empty",
   2de10:	2149      	movs	r1, #73	; 0x49
   2de12:	5cba      	ldrb	r2, [r7, r2]
   2de14:	484a      	ldr	r0, [pc, #296]	; (2df40 <process_buffer+0x2a0>)
		element->ephemeris = (struct nrf_cloud_agps_ephemeris *)(buf + len);
   2de16:	9305      	str	r3, [sp, #20]
				LOG_INF("Marking ephemeris:%u as empty",
   2de18:	f00e fe4a 	bl	3cab0 <z_log_minimal_printk>
				element.ephemeris->health = NRF_CLOUD_PGPS_EMPTY_EPHEM_HEALTH;
   2de1c:	22ff      	movs	r2, #255	; 0xff
   2de1e:	9b05      	ldr	r3, [sp, #20]
   2de20:	705a      	strb	r2, [r3, #1]
   2de22:	e009      	b.n	2de38 <process_buffer+0x198>
			(struct nrf_cloud_agps_system_time *)(buf + len);
   2de24:	18b9      	adds	r1, r7, r2
			gps_sec = npgps_gps_day_time_to_sec(element.time_and_tow->date_day,
   2de26:	f8d1 1002 	ldr.w	r1, [r1, #2]
   2de2a:	5ab8      	ldrh	r0, [r7, r2]
		len += sizeof(struct nrf_cloud_agps_system_time) -
   2de2c:	f102 0b10 	add.w	fp, r2, #16
			gps_sec = npgps_gps_day_time_to_sec(element.time_and_tow->date_day,
   2de30:	f000 fe66 	bl	2eb00 <npgps_gps_day_time_to_sec>
   2de34:	4606      	mov	r6, r0
   2de36:	9104      	str	r1, [sp, #16]
	while (parsed_len < buf_len) {
   2de38:	f240 72d5 	movw	r2, #2005	; 0x7d5
		parsed_len += element_size;
   2de3c:	44d9      	add	r9, fp
	while (parsed_len < buf_len) {
   2de3e:	4591      	cmp	r9, r2
		element_ptr += element_size;
   2de40:	445f      	add	r7, fp
	while (parsed_len < buf_len) {
   2de42:	d9a3      	bls.n	2dd8c <process_buffer+0xec>
	if (parsed_len == buf_len) {
   2de44:	f240 73d6 	movw	r3, #2006	; 0x7d6
   2de48:	4599      	cmp	r9, r3
   2de4a:	d1b2      	bne.n	2ddb2 <process_buffer+0x112>
		if (index.predictions[pnum]) {
   2de4c:	f10a 090e 	add.w	r9, sl, #14
   2de50:	eb04 0389 	add.w	r3, r4, r9, lsl #2
   2de54:	685b      	ldr	r3, [r3, #4]
   2de56:	b1fb      	cbz	r3, 2de98 <process_buffer+0x1f8>
			LOG_WRN("Received duplicate packet; ignoring");
   2de58:	2157      	movs	r1, #87	; 0x57
   2de5a:	483a      	ldr	r0, [pc, #232]	; (2df44 <process_buffer+0x2a4>)
			LOG_ERR("Prediction did not include GPS day and time of day; ignoring");
   2de5c:	f00e fe28 	bl	3cab0 <z_log_minimal_printk>
		if (len) { /* keep extra data for next time */
   2de60:	9b03      	ldr	r3, [sp, #12]
   2de62:	b13b      	cbz	r3, 2de74 <process_buffer+0x1d4>
			memcpy(prediction_buf, buf, len);
   2de64:	f44f 6300 	mov.w	r3, #2048	; 0x800
   2de68:	9a03      	ldr	r2, [sp, #12]
   2de6a:	482d      	ldr	r0, [pc, #180]	; (2df20 <process_buffer+0x280>)
   2de6c:	eb05 0108 	add.w	r1, r5, r8
   2de70:	f013 faa5 	bl	413be <__memcpy_chk>
		index.pred_offset = len;
   2de74:	9b03      	ldr	r3, [sp, #12]
   2de76:	84a3      	strh	r3, [r4, #36]	; 0x24
		index.dl_pnum++;
   2de78:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   2de7c:	3301      	adds	r3, #1
   2de7e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	index.dl_offset += len;
   2de82:	6a23      	ldr	r3, [r4, #32]
   2de84:	9a03      	ldr	r2, [sp, #12]
	return 0;
   2de86:	2600      	movs	r6, #0
	index.dl_offset += len;
   2de88:	4413      	add	r3, r2
   2de8a:	6223      	str	r3, [r4, #32]
	return 0;
   2de8c:	e095      	b.n	2dfba <process_buffer+0x31a>
				if (element_ptr[i] != 0) {
   2de8e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   2de92:	2b00      	cmp	r3, #0
   2de94:	d0b9      	beq.n	2de0a <process_buffer+0x16a>
   2de96:	e7cf      	b.n	2de38 <process_buffer+0x198>
		} else if (gps_sec == 0) {
   2de98:	9b04      	ldr	r3, [sp, #16]
   2de9a:	4333      	orrs	r3, r6
   2de9c:	d102      	bne.n	2dea4 <process_buffer+0x204>
			LOG_ERR("Prediction did not include GPS day and time of day; ignoring");
   2de9e:	2145      	movs	r1, #69	; 0x45
   2dea0:	4829      	ldr	r0, [pc, #164]	; (2df48 <process_buffer+0x2a8>)
   2dea2:	e7db      	b.n	2de5c <process_buffer+0x1bc>
			LOG_INF("Storing prediction num:%u idx:%u for gps sec:%d",
   2dea4:	4652      	mov	r2, sl
   2dea6:	2149      	movs	r1, #73	; 0x49
   2dea8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   2deaa:	4828      	ldr	r0, [pc, #160]	; (2df4c <process_buffer+0x2ac>)
   2deac:	9600      	str	r6, [sp, #0]
   2deae:	f00e fdff 	bl	3cab0 <z_log_minimal_printk>
			index.loading_count++;
   2deb2:	8d27      	ldrh	r7, [r4, #40]	; 0x28
			finished = (index.loading_count == index.expected_count);
   2deb4:	f8b4 b026 	ldrh.w	fp, [r4, #38]	; 0x26
			index.loading_count++;
   2deb8:	3701      	adds	r7, #1
   2deba:	b2bf      	uxth	r7, r7
					 finished || (index.storage_extent == 1));
   2debc:	455f      	cmp	r7, fp
			index.loading_count++;
   2debe:	8527      	strh	r7, [r4, #40]	; 0x28
					 finished || (index.storage_extent == 1));
   2dec0:	d01f      	beq.n	2df02 <process_buffer+0x262>
   2dec2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2dec4:	3b01      	subs	r3, #1
   2dec6:	f1d3 0a00 	rsbs	sl, r3, #0
   2deca:	eb4a 0a03 	adc.w	sl, sl, r3
	uint8_t schema = NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION;
   2dece:	2301      	movs	r3, #1
   2ded0:	960a      	str	r6, [sp, #40]	; 0x28
	if (first) {
   2ded2:	4e1f      	ldr	r6, [pc, #124]	; (2df50 <process_buffer+0x2b0>)
	uint8_t schema = NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION;
   2ded4:	f88d 301f 	strb.w	r3, [sp, #31]
	if (first) {
   2ded8:	7833      	ldrb	r3, [r6, #0]
   2deda:	b133      	cbz	r3, 2deea <process_buffer+0x24a>
		memset(pad, 0xff, PGPS_PREDICTION_PAD);
   2dedc:	2225      	movs	r2, #37	; 0x25
   2dede:	21ff      	movs	r1, #255	; 0xff
   2dee0:	481c      	ldr	r0, [pc, #112]	; (2df54 <process_buffer+0x2b4>)
   2dee2:	f013 fa7f 	bl	413e4 <memset>
		first = false;
   2dee6:	2300      	movs	r3, #0
   2dee8:	7033      	strb	r3, [r6, #0]
	err = stream_flash_buffered_write(&stream, p, schema_offset, false);
   2deea:	2300      	movs	r3, #0
   2deec:	2213      	movs	r2, #19
   2deee:	490c      	ldr	r1, [pc, #48]	; (2df20 <process_buffer+0x280>)
   2def0:	4819      	ldr	r0, [pc, #100]	; (2df58 <process_buffer+0x2b8>)
   2def2:	f00f fad1 	bl	3d498 <stream_flash_buffered_write>
	if (err) {
   2def6:	4603      	mov	r3, r0
   2def8:	b390      	cbz	r0, 2df60 <process_buffer+0x2c0>
		LOG_ERR("Error writing pgps prediction:%d", err);
   2defa:	461a      	mov	r2, r3
   2defc:	2145      	movs	r1, #69	; 0x45
   2defe:	4817      	ldr	r0, [pc, #92]	; (2df5c <process_buffer+0x2bc>)
   2df00:	e039      	b.n	2df76 <process_buffer+0x2d6>
					 finished || (index.storage_extent == 1));
   2df02:	f04f 0a01 	mov.w	sl, #1
   2df06:	e7e2      	b.n	2dece <process_buffer+0x22e>
   2df08:	20015810 	.word	0x20015810
   2df0c:	2001d2bf 	.word	0x2001d2bf
   2df10:	000494e4 	.word	0x000494e4
   2df14:	00049518 	.word	0x00049518
   2df18:	00049532 	.word	0x00049532
   2df1c:	00049667 	.word	0x00049667
   2df20:	2001cabf 	.word	0x2001cabf
   2df24:	2001a592 	.word	0x2001a592
   2df28:	2001c958 	.word	0x2001c958
   2df2c:	00049675 	.word	0x00049675
   2df30:	00049839 	.word	0x00049839
   2df34:	0004955b 	.word	0x0004955b
   2df38:	000495c5 	.word	0x000495c5
   2df3c:	0004962b 	.word	0x0004962b
   2df40:	0004985c 	.word	0x0004985c
   2df44:	0004968b 	.word	0x0004968b
   2df48:	000496b4 	.word	0x000496b4
   2df4c:	000496f6 	.word	0x000496f6
   2df50:	20014c45 	.word	0x20014c45
   2df54:	2001c9da 	.word	0x2001c9da
   2df58:	2001a12c 	.word	0x2001a12c
   2df5c:	0004972b 	.word	0x0004972b
	err = stream_flash_buffered_write(&stream, &schema, sizeof(schema), false);
   2df60:	2201      	movs	r2, #1
   2df62:	484d      	ldr	r0, [pc, #308]	; (2e098 <process_buffer+0x3f8>)
   2df64:	f10d 011f 	add.w	r1, sp, #31
   2df68:	f00f fa96 	bl	3d498 <stream_flash_buffered_write>
	if (err) {
   2df6c:	4603      	mov	r3, r0
   2df6e:	b340      	cbz	r0, 2dfc2 <process_buffer+0x322>
		LOG_ERR("Error writing schema:%d", err);
   2df70:	2145      	movs	r1, #69	; 0x45
   2df72:	4602      	mov	r2, r0
   2df74:	4849      	ldr	r0, [pc, #292]	; (2e09c <process_buffer+0x3fc>)
		LOG_ERR("Error writing sentinel:%d", err);
   2df76:	f00e fd9b 	bl	3cab0 <z_log_minimal_printk>
			index.predictions[pnum] = npgps_block_to_pointer(index.store_block);
   2df7a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   2df7c:	f000 ff5e 	bl	2ee3c <npgps_block_to_pointer>
			if (pgps_need_assistance &&
   2df80:	4b47      	ldr	r3, [pc, #284]	; (2e0a0 <process_buffer+0x400>)
			index.predictions[pnum] = npgps_block_to_pointer(index.store_block);
   2df82:	eb04 0989 	add.w	r9, r4, r9, lsl #2
			if (pgps_need_assistance &&
   2df86:	681b      	ldr	r3, [r3, #0]
   2df88:	4e46      	ldr	r6, [pc, #280]	; (2e0a4 <process_buffer+0x404>)
			index.predictions[pnum] = npgps_block_to_pointer(index.store_block);
   2df8a:	f8c9 0004 	str.w	r0, [r9, #4]
			if (pgps_need_assistance &&
   2df8e:	2b00      	cmp	r3, #0
   2df90:	d039      	beq.n	2e006 <process_buffer+0x366>
   2df92:	455f      	cmp	r7, fp
   2df94:	d035      	beq.n	2e002 <process_buffer+0x362>
			    (finished || (index.loading_count > 1))) {
   2df96:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   2df98:	2b01      	cmp	r3, #1
   2df9a:	d832      	bhi.n	2e002 <process_buffer+0x362>
				if (evt_handler) {
   2df9c:	6833      	ldr	r3, [r6, #0]
   2df9e:	2b00      	cmp	r3, #0
   2dfa0:	d146      	bne.n	2e030 <process_buffer+0x390>
			index.store_block = npgps_alloc_block();
   2dfa2:	f000 fe49 	bl	2ec38 <npgps_alloc_block>
   2dfa6:	4603      	mov	r3, r0
			if (index.store_block == NO_BLOCK) {
   2dfa8:	3301      	adds	r3, #1
			index.store_block = npgps_alloc_block();
   2dfaa:	63a0      	str	r0, [r4, #56]	; 0x38
			if (index.store_block == NO_BLOCK) {
   2dfac:	d149      	bne.n	2e042 <process_buffer+0x3a2>
				LOG_ERR("No more free blocks!");
   2dfae:	2145      	movs	r1, #69	; 0x45
   2dfb0:	483d      	ldr	r0, [pc, #244]	; (2e0a8 <process_buffer+0x408>)
   2dfb2:	f00e fd7d 	bl	3cab0 <z_log_minimal_printk>
				return -ENOMEM;
   2dfb6:	f06f 060b 	mvn.w	r6, #11
}
   2dfba:	4630      	mov	r0, r6
   2dfbc:	b00d      	add	sp, #52	; 0x34
   2dfbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	err = stream_flash_buffered_write(&stream, p, len, false);
   2dfc2:	f240 72c3 	movw	r2, #1987	; 0x7c3
   2dfc6:	4939      	ldr	r1, [pc, #228]	; (2e0ac <process_buffer+0x40c>)
   2dfc8:	4833      	ldr	r0, [pc, #204]	; (2e098 <process_buffer+0x3f8>)
   2dfca:	f00f fa65 	bl	3d498 <stream_flash_buffered_write>
	if (err) {
   2dfce:	4603      	mov	r3, r0
   2dfd0:	2800      	cmp	r0, #0
   2dfd2:	d192      	bne.n	2defa <process_buffer+0x25a>
	err = stream_flash_buffered_write(&stream, (uint8_t *)&sentinel,
   2dfd4:	2204      	movs	r2, #4
   2dfd6:	4830      	ldr	r0, [pc, #192]	; (2e098 <process_buffer+0x3f8>)
   2dfd8:	a90a      	add	r1, sp, #40	; 0x28
   2dfda:	f00f fa5d 	bl	3d498 <stream_flash_buffered_write>
	if (err) {
   2dfde:	4602      	mov	r2, r0
   2dfe0:	b118      	cbz	r0, 2dfea <process_buffer+0x34a>
		LOG_ERR("Error writing sentinel:%d", err);
   2dfe2:	2145      	movs	r1, #69	; 0x45
   2dfe4:	4832      	ldr	r0, [pc, #200]	; (2e0b0 <process_buffer+0x410>)
   2dfe6:	f00e fd63 	bl	3cab0 <z_log_minimal_printk>
	err = stream_flash_buffered_write(&stream, pad, PGPS_PREDICTION_PAD, last);
   2dfea:	2225      	movs	r2, #37	; 0x25
   2dfec:	4653      	mov	r3, sl
   2dfee:	4931      	ldr	r1, [pc, #196]	; (2e0b4 <process_buffer+0x414>)
   2dff0:	4829      	ldr	r0, [pc, #164]	; (2e098 <process_buffer+0x3f8>)
   2dff2:	f00f fa51 	bl	3d498 <stream_flash_buffered_write>
	if (err) {
   2dff6:	4602      	mov	r2, r0
   2dff8:	2800      	cmp	r0, #0
   2dffa:	d0be      	beq.n	2df7a <process_buffer+0x2da>
		LOG_ERR("Error writing sentinel:%d", err);
   2dffc:	2145      	movs	r1, #69	; 0x45
   2dffe:	482c      	ldr	r0, [pc, #176]	; (2e0b0 <process_buffer+0x410>)
   2e000:	e7b9      	b.n	2df76 <process_buffer+0x2d6>
				nrf_cloud_pgps_notify_prediction();
   2e002:	f7ff fdf3 	bl	2dbec <nrf_cloud_pgps_notify_prediction>
			if (!finished) {
   2e006:	455f      	cmp	r7, fp
   2e008:	d1c8      	bne.n	2df9c <process_buffer+0x2fc>
				LOG_INF("All P-GPS data received. Done.");
   2e00a:	2149      	movs	r1, #73	; 0x49
   2e00c:	482a      	ldr	r0, [pc, #168]	; (2e0b8 <process_buffer+0x418>)
   2e00e:	f00e fd4f 	bl	3cab0 <z_log_minimal_printk>
				state = PGPS_READY;
   2e012:	2206      	movs	r2, #6
   2e014:	4b29      	ldr	r3, [pc, #164]	; (2e0bc <process_buffer+0x41c>)
   2e016:	701a      	strb	r2, [r3, #0]
				if (evt_handler) {
   2e018:	6833      	ldr	r3, [r6, #0]
   2e01a:	b133      	cbz	r3, 2e02a <process_buffer+0x38a>
					struct nrf_cloud_pgps_event evt = {
   2e01c:	2204      	movs	r2, #4
   2e01e:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   2e022:	2200      	movs	r2, #0
					evt_handler(&evt);
   2e024:	a80a      	add	r0, sp, #40	; 0x28
					struct nrf_cloud_pgps_event evt = {
   2e026:	920b      	str	r2, [sp, #44]	; 0x2c
					evt_handler(&evt);
   2e028:	4798      	blx	r3
				npgps_print_blocks();
   2e02a:	f000 fe79 	bl	2ed20 <npgps_print_blocks>
		if (err) {
   2e02e:	e717      	b.n	2de60 <process_buffer+0x1c0>
					struct nrf_cloud_pgps_event evt = {
   2e030:	2200      	movs	r2, #0
   2e032:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
   2e036:	2202      	movs	r2, #2
					evt_handler(&evt);
   2e038:	a80a      	add	r0, sp, #40	; 0x28
					struct nrf_cloud_pgps_event evt = {
   2e03a:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
					evt_handler(&evt);
   2e03e:	4798      	blx	r3
   2e040:	e7af      	b.n	2dfa2 <process_buffer+0x302>
			index.storage_extent--;
   2e042:	6b66      	ldr	r6, [r4, #52]	; 0x34
   2e044:	3e01      	subs	r6, #1
   2e046:	6366      	str	r6, [r4, #52]	; 0x34
			if (index.storage_extent == 0) {
   2e048:	2e00      	cmp	r6, #0
   2e04a:	f47f af09 	bne.w	2de60 <process_buffer+0x1c0>
				index.storage_extent = npgps_get_block_extent(index.store_block);
   2e04e:	f000 fe1d 	bl	2ec8c <npgps_get_block_extent>
				LOG_INF("Moving to new flash region:%d, len:%d",
   2e052:	2149      	movs	r1, #73	; 0x49
				index.storage_extent = npgps_get_block_extent(index.store_block);
   2e054:	4603      	mov	r3, r0
				LOG_INF("Moving to new flash region:%d, len:%d",
   2e056:	6ba2      	ldr	r2, [r4, #56]	; 0x38
				index.storage_extent = npgps_get_block_extent(index.store_block);
   2e058:	6360      	str	r0, [r4, #52]	; 0x34
				LOG_INF("Moving to new flash region:%d, len:%d",
   2e05a:	4819      	ldr	r0, [pc, #100]	; (2e0c0 <process_buffer+0x420>)
   2e05c:	f00e fd28 	bl	3cab0 <z_log_minimal_printk>
	return stream_flash_buffered_write(&stream, NULL, 0, true);
   2e060:	4632      	mov	r2, r6
   2e062:	4631      	mov	r1, r6
   2e064:	2301      	movs	r3, #1
   2e066:	480c      	ldr	r0, [pc, #48]	; (2e098 <process_buffer+0x3f8>)
   2e068:	f00f fa16 	bl	3d498 <stream_flash_buffered_write>
				if (err) {
   2e06c:	4606      	mov	r6, r0
   2e06e:	b128      	cbz	r0, 2e07c <process_buffer+0x3dc>
					LOG_ERR("Error flushing storage:%d", err);
   2e070:	2145      	movs	r1, #69	; 0x45
   2e072:	4602      	mov	r2, r0
   2e074:	4813      	ldr	r0, [pc, #76]	; (2e0c4 <process_buffer+0x424>)
					LOG_ERR("Error opening storage again:%d", err);
   2e076:	f00e fd1b 	bl	3cab0 <z_log_minimal_printk>
					return err;
   2e07a:	e79e      	b.n	2dfba <process_buffer+0x31a>
				err = open_storage(npgps_block_to_offset(index.store_block),
   2e07c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   2e07e:	f000 feb7 	bl	2edf0 <npgps_block_to_offset>
   2e082:	4631      	mov	r1, r6
   2e084:	f7ff faf6 	bl	2d674 <open_storage>
				if (err) {
   2e088:	4606      	mov	r6, r0
   2e08a:	2800      	cmp	r0, #0
   2e08c:	f43f aee8 	beq.w	2de60 <process_buffer+0x1c0>
					LOG_ERR("Error opening storage again:%d", err);
   2e090:	4602      	mov	r2, r0
   2e092:	2145      	movs	r1, #69	; 0x45
   2e094:	480c      	ldr	r0, [pc, #48]	; (2e0c8 <process_buffer+0x428>)
   2e096:	e7ee      	b.n	2e076 <process_buffer+0x3d6>
   2e098:	2001a12c 	.word	0x2001a12c
   2e09c:	00049751 	.word	0x00049751
   2e0a0:	2001a120 	.word	0x2001a120
   2e0a4:	2001a114 	.word	0x2001a114
   2e0a8:	000497b1 	.word	0x000497b1
   2e0ac:	2001cad2 	.word	0x2001cad2
   2e0b0:	0004976e 	.word	0x0004976e
   2e0b4:	2001c9da 	.word	0x2001c9da
   2e0b8:	0004978d 	.word	0x0004978d
   2e0bc:	2001d2bf 	.word	0x2001d2bf
   2e0c0:	000497cb 	.word	0x000497cb
   2e0c4:	000497f6 	.word	0x000497f6
   2e0c8:	00049815 	.word	0x00049815

0002e0cc <nrf_cloud_pgps_preemptive_updates>:
	uint16_t gps_day = 0;
   2e0cc:	2300      	movs	r3, #0
{
   2e0ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e0d2:	b089      	sub	sp, #36	; 0x24
	uint16_t gps_day = 0;
   2e0d4:	f8ad 300c 	strh.w	r3, [sp, #12]
	uint32_t gps_time_of_day = 0;
   2e0d8:	9304      	str	r3, [sp, #16]
	if (state == PGPS_NONE) {
   2e0da:	4b4f      	ldr	r3, [pc, #316]	; (2e218 <nrf_cloud_pgps_preemptive_updates+0x14c>)
	int current = index.cur_pnum;
   2e0dc:	4c4f      	ldr	r4, [pc, #316]	; (2e21c <nrf_cloud_pgps_preemptive_updates+0x150>)
	if (state == PGPS_NONE) {
   2e0de:	781b      	ldrb	r3, [r3, #0]
	int current = index.cur_pnum;
   2e0e0:	f894 502e 	ldrb.w	r5, [r4, #46]	; 0x2e
	uint16_t period_min = index.header.prediction_period_min;
   2e0e4:	8927      	ldrh	r7, [r4, #8]
	if (state == PGPS_NONE) {
   2e0e6:	b943      	cbnz	r3, 2e0fa <nrf_cloud_pgps_preemptive_updates+0x2e>
		LOG_ERR("P-GPS subsystem is not initialized.");
   2e0e8:	484d      	ldr	r0, [pc, #308]	; (2e220 <nrf_cloud_pgps_preemptive_updates+0x154>)
   2e0ea:	2145      	movs	r1, #69	; 0x45
   2e0ec:	f00e fce0 	bl	3cab0 <z_log_minimal_printk>
		return -EINVAL;
   2e0f0:	f06f 0015 	mvn.w	r0, #21
}
   2e0f4:	b009      	add	sp, #36	; 0x24
   2e0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (nrf_cloud_pgps_loading()) {
   2e0fa:	f7ff fb29 	bl	2d750 <nrf_cloud_pgps_loading>
   2e0fe:	4606      	mov	r6, r0
   2e100:	b108      	cbz	r0, 2e106 <nrf_cloud_pgps_preemptive_updates+0x3a>
		return 0;
   2e102:	2000      	movs	r0, #0
   2e104:	e7f6      	b.n	2e0f4 <nrf_cloud_pgps_preemptive_updates+0x28>
	if (current == 0xff) {
   2e106:	2dff      	cmp	r5, #255	; 0xff
   2e108:	d102      	bne.n	2e110 <nrf_cloud_pgps_preemptive_updates+0x44>
		return pgps_request_all();
   2e10a:	f7ff fbcb 	bl	2d8a4 <pgps_request_all>
   2e10e:	e7f1      	b.n	2e0f4 <nrf_cloud_pgps_preemptive_updates+0x28>
	if ((current + npgps_num_free()) < n) {
   2e110:	f000 fe3e 	bl	2ed90 <npgps_num_free>
   2e114:	4428      	add	r0, r5
   2e116:	2825      	cmp	r0, #37	; 0x25
   2e118:	ddf3      	ble.n	2e102 <nrf_cloud_pgps_preemptive_updates+0x36>
	if (evt_handler) {
   2e11a:	4b42      	ldr	r3, [pc, #264]	; (2e224 <nrf_cloud_pgps_preemptive_updates+0x158>)
   2e11c:	681b      	ldr	r3, [r3, #0]
   2e11e:	b133      	cbz	r3, 2e12e <nrf_cloud_pgps_preemptive_updates+0x62>
		struct nrf_cloud_pgps_event evt = {
   2e120:	2202      	movs	r2, #2
   2e122:	e9cd 6605 	strd	r6, r6, [sp, #20]
		evt_handler(&evt);
   2e126:	a805      	add	r0, sp, #20
		struct nrf_cloud_pgps_event evt = {
   2e128:	f88d 2014 	strb.w	r2, [sp, #20]
		evt_handler(&evt);
   2e12c:	4798      	blx	r3
	LOG_INF("Replacing %d oldest predictions; %d already free",
   2e12e:	f000 fe2f 	bl	2ed90 <npgps_num_free>
   2e132:	462a      	mov	r2, r5
   2e134:	4603      	mov	r3, r0
   2e136:	2149      	movs	r1, #73	; 0x49
   2e138:	483b      	ldr	r0, [pc, #236]	; (2e228 <nrf_cloud_pgps_preemptive_updates+0x15c>)
   2e13a:	f00e fcb9 	bl	3cab0 <z_log_minimal_printk>
	if (current >= n) {
   2e13e:	2d25      	cmp	r5, #37	; 0x25
   2e140:	dd2f      	ble.n	2e1a2 <nrf_cloud_pgps_preemptive_updates+0xd6>
	int last = MIN(num, index.header.prediction_count);
   2e142:	f8b4 8004 	ldrh.w	r8, [r4, #4]
   2e146:	4e39      	ldr	r6, [pc, #228]	; (2e22c <nrf_cloud_pgps_preemptive_updates+0x160>)
   2e148:	45a8      	cmp	r8, r5
   2e14a:	bfa8      	it	ge
   2e14c:	46a8      	movge	r8, r5
	LOG_INF("discarding %d", last);
   2e14e:	2149      	movs	r1, #73	; 0x49
   2e150:	4642      	mov	r2, r8
   2e152:	4837      	ldr	r0, [pc, #220]	; (2e230 <nrf_cloud_pgps_preemptive_updates+0x164>)
   2e154:	f00e fcac 	bl	3cab0 <z_log_minimal_printk>
	for (pnum = 0; pnum < last; pnum++) {
   2e158:	46b1      	mov	r9, r6
   2e15a:	2500      	movs	r5, #0
		__ASSERT((block != -1), "unexpected ptr:%p for Prediction num:%d",
   2e15c:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 2e234 <nrf_cloud_pgps_preemptive_updates+0x168>
   2e160:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 2e238 <nrf_cloud_pgps_preemptive_updates+0x16c>
	for (pnum = 0; pnum < last; pnum++) {
   2e164:	45a8      	cmp	r8, r5
   2e166:	d133      	bne.n	2e1d0 <nrf_cloud_pgps_preemptive_updates+0x104>
	for (i = last; i < index.header.prediction_count; i++) {
   2e168:	462b      	mov	r3, r5
   2e16a:	88a2      	ldrh	r2, [r4, #4]
   2e16c:	4293      	cmp	r3, r2
   2e16e:	db48      	blt.n	2e202 <nrf_cloud_pgps_preemptive_updates+0x136>
		index.predictions[pnum] = NULL;
   2e170:	2100      	movs	r1, #0
	for (pnum = index.header.prediction_count - last; pnum <
   2e172:	1b53      	subs	r3, r2, r5
   2e174:	429a      	cmp	r2, r3
   2e176:	dc4a      	bgt.n	2e20e <nrf_cloud_pgps_preemptive_updates+0x142>
	npgps_print_blocks();
   2e178:	f000 fdd2 	bl	2ed20 <npgps_print_blocks>
	int64_t psec = index.start_sec + (uint32_t)pnum * index.period_sec;
   2e17c:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   2e180:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
		npgps_gps_sec_to_day_time(psec, gps_day, gps_time_of_day);
   2e182:	f10d 020e 	add.w	r2, sp, #14
	int64_t psec = index.start_sec + (uint32_t)pnum * index.period_sec;
   2e186:	4368      	muls	r0, r5
   2e188:	18c0      	adds	r0, r0, r3
   2e18a:	f141 0100 	adc.w	r1, r1, #0
		npgps_gps_sec_to_day_time(psec, gps_day, gps_time_of_day);
   2e18e:	ab05      	add	r3, sp, #20
		*gps_sec = psec;
   2e190:	e9c4 0104 	strd	r0, r1, [r4, #16]
		npgps_gps_sec_to_day_time(psec, gps_day, gps_time_of_day);
   2e194:	f000 fcbe 	bl	2eb14 <npgps_gps_sec_to_day_time>
	index.header.gps_day = gps_day;
   2e198:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2e19c:	8163      	strh	r3, [r4, #10]
	index.header.gps_time_of_day = gps_time_of_day;
   2e19e:	9b05      	ldr	r3, [sp, #20]
   2e1a0:	60e3      	str	r3, [r4, #12]
	npgps_gps_sec_to_day_time(index.end_sec, &gps_day, &gps_time_of_day);
   2e1a2:	ab04      	add	r3, sp, #16
   2e1a4:	aa03      	add	r2, sp, #12
   2e1a6:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   2e1aa:	f000 fcb3 	bl	2eb14 <npgps_gps_sec_to_day_time>
	request.gps_day = gps_day;
   2e1ae:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   2e1b2:	f8ad 3018 	strh.w	r3, [sp, #24]
	request.gps_time_of_day = gps_time_of_day;
   2e1b6:	9b04      	ldr	r3, [sp, #16]
   2e1b8:	f8cd 301a 	str.w	r3, [sp, #26]
	request.prediction_count = npgps_num_free();
   2e1bc:	f000 fde8 	bl	2ed90 <npgps_num_free>
   2e1c0:	f8ad 0014 	strh.w	r0, [sp, #20]
	return pgps_request(&request);
   2e1c4:	a805      	add	r0, sp, #20
	request.prediction_period_min = period_min;
   2e1c6:	f8ad 7016 	strh.w	r7, [sp, #22]
	return pgps_request(&request);
   2e1ca:	f7ff facb 	bl	2d764 <pgps_request>
   2e1ce:	e791      	b.n	2e0f4 <nrf_cloud_pgps_preemptive_updates+0x28>
		block = npgps_pointer_to_block((uint8_t *)index.predictions[pnum]);
   2e1d0:	f859 0b04 	ldr.w	r0, [r9], #4
   2e1d4:	f000 fe20 	bl	2ee18 <npgps_pointer_to_block>
		__ASSERT((block != -1), "unexpected ptr:%p for Prediction num:%d",
   2e1d8:	1c42      	adds	r2, r0, #1
		block = npgps_pointer_to_block((uint8_t *)index.predictions[pnum]);
   2e1da:	4603      	mov	r3, r0
		__ASSERT((block != -1), "unexpected ptr:%p for Prediction num:%d",
   2e1dc:	d10c      	bne.n	2e1f8 <nrf_cloud_pgps_preemptive_updates+0x12c>
   2e1de:	f44f 72b1 	mov.w	r2, #354	; 0x162
   2e1e2:	4651      	mov	r1, sl
   2e1e4:	9001      	str	r0, [sp, #4]
   2e1e6:	4658      	mov	r0, fp
   2e1e8:	f00e fc28 	bl	3ca3c <assert_print>
   2e1ec:	f44f 71b1 	mov.w	r1, #354	; 0x162
   2e1f0:	4650      	mov	r0, sl
   2e1f2:	f00e fc1c 	bl	3ca2e <assert_post_action>
   2e1f6:	9b01      	ldr	r3, [sp, #4]
		npgps_free_block(block);
   2e1f8:	4618      	mov	r0, r3
   2e1fa:	f000 fd3b 	bl	2ec74 <npgps_free_block>
	for (pnum = 0; pnum < last; pnum++) {
   2e1fe:	3501      	adds	r5, #1
   2e200:	e7b0      	b.n	2e164 <nrf_cloud_pgps_preemptive_updates+0x98>
		index.predictions[pnum] = index.predictions[i];
   2e202:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
	for (i = last; i < index.header.prediction_count; i++) {
   2e206:	3301      	adds	r3, #1
		index.predictions[pnum] = index.predictions[i];
   2e208:	f846 1b04 	str.w	r1, [r6], #4
	for (i = last; i < index.header.prediction_count; i++) {
   2e20c:	e7ae      	b.n	2e16c <nrf_cloud_pgps_preemptive_updates+0xa0>
		index.predictions[pnum] = NULL;
   2e20e:	eb04 0083 	add.w	r0, r4, r3, lsl #2
   2e212:	63c1      	str	r1, [r0, #60]	; 0x3c
	      index.header.prediction_count; pnum++) {
   2e214:	3301      	adds	r3, #1
   2e216:	e7ad      	b.n	2e174 <nrf_cloud_pgps_preemptive_updates+0xa8>
   2e218:	2001d2bf 	.word	0x2001d2bf
   2e21c:	20015810 	.word	0x20015810
   2e220:	000490ab 	.word	0x000490ab
   2e224:	2001a114 	.word	0x2001a114
   2e228:	0004987f 	.word	0x0004987f
   2e22c:	2001584c 	.word	0x2001584c
   2e230:	000498b5 	.word	0x000498b5
   2e234:	000498c8 	.word	0x000498c8
   2e238:	00043ff2 	.word	0x00043ff2

0002e23c <nrf_cloud_pgps_inject>:
{
   2e23c:	b570      	push	{r4, r5, r6, lr}
	if (state == PGPS_NONE) {
   2e23e:	4a64      	ldr	r2, [pc, #400]	; (2e3d0 <nrf_cloud_pgps_inject+0x194>)
{
   2e240:	4606      	mov	r6, r0
	if (state == PGPS_NONE) {
   2e242:	7812      	ldrb	r2, [r2, #0]
{
   2e244:	460b      	mov	r3, r1
   2e246:	b0ae      	sub	sp, #184	; 0xb8
	if (state == PGPS_NONE) {
   2e248:	b942      	cbnz	r2, 2e25c <nrf_cloud_pgps_inject+0x20>
		LOG_ERR("P-GPS subsystem is not initialized.");
   2e24a:	2145      	movs	r1, #69	; 0x45
   2e24c:	4861      	ldr	r0, [pc, #388]	; (2e3d4 <nrf_cloud_pgps_inject+0x198>)
   2e24e:	f00e fc2f 	bl	3cab0 <z_log_minimal_printk>
		return -EINVAL;
   2e252:	f06f 0415 	mvn.w	r4, #21
}
   2e256:	4620      	mov	r0, r4
   2e258:	b02e      	add	sp, #184	; 0xb8
   2e25a:	bd70      	pop	{r4, r5, r6, pc}
	if (request != NULL) {
   2e25c:	2900      	cmp	r1, #0
   2e25e:	f000 809c 	beq.w	2e39a <nrf_cloud_pgps_inject+0x15e>
		memcpy(&remainder, request, sizeof(remainder));
   2e262:	6808      	ldr	r0, [r1, #0]
   2e264:	6849      	ldr	r1, [r1, #4]
   2e266:	aa04      	add	r2, sp, #16
   2e268:	c203      	stmia	r2!, {r0, r1}
   2e26a:	6898      	ldr	r0, [r3, #8]
   2e26c:	6010      	str	r0, [r2, #0]
	nrf_cloud_agps_processed(&processed);
   2e26e:	a807      	add	r0, sp, #28
   2e270:	f7fe feea 	bl	2d048 <nrf_cloud_agps_processed>
	if (processed.data_flags & NRF_MODEM_GNSS_AGPS_POSITION_REQUEST &&
   2e274:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2e276:	06d4      	lsls	r4, r2, #27
   2e278:	d505      	bpl.n	2e286 <nrf_cloud_pgps_inject+0x4a>
	    remainder.data_flags & NRF_MODEM_GNSS_AGPS_POSITION_REQUEST) {
   2e27a:	9b06      	ldr	r3, [sp, #24]
	if (processed.data_flags & NRF_MODEM_GNSS_AGPS_POSITION_REQUEST &&
   2e27c:	06d8      	lsls	r0, r3, #27
		remainder.data_flags &= ~NRF_MODEM_GNSS_AGPS_POSITION_REQUEST;
   2e27e:	bf44      	itt	mi
   2e280:	f023 0310 	bicmi.w	r3, r3, #16
   2e284:	9306      	strmi	r3, [sp, #24]
	if (processed.data_flags & NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST &&
   2e286:	0711      	lsls	r1, r2, #28
   2e288:	d505      	bpl.n	2e296 <nrf_cloud_pgps_inject+0x5a>
	    remainder.data_flags & NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST) {
   2e28a:	9b06      	ldr	r3, [sp, #24]
	if (processed.data_flags & NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST &&
   2e28c:	071a      	lsls	r2, r3, #28
		remainder.data_flags &= ~NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST;
   2e28e:	bf44      	itt	mi
   2e290:	f023 0308 	bicmi.w	r3, r3, #8
   2e294:	9306      	strmi	r3, [sp, #24]
	if (remainder.data_flags & NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST) {
   2e296:	9d06      	ldr	r5, [sp, #24]
   2e298:	f015 0408 	ands.w	r4, r5, #8
   2e29c:	f000 8088 	beq.w	2e3b0 <nrf_cloud_pgps_inject+0x174>
		sys_time.time.time_frac_ms = 0;
   2e2a0:	2400      	movs	r4, #0
		sys_time.type = NRF_CLOUD_AGPS_GPS_SYSTEM_CLOCK;
   2e2a2:	2207      	movs	r2, #7
		sys_time.schema_version = NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION;
   2e2a4:	2301      	movs	r3, #1
		sys_time.type = NRF_CLOUD_AGPS_GPS_SYSTEM_CLOCK;
   2e2a6:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
		err = npgps_get_time(NULL, &day, &sec);
   2e2aa:	4620      	mov	r0, r4
   2e2ac:	aa03      	add	r2, sp, #12
   2e2ae:	f10d 010a 	add.w	r1, sp, #10
		sys_time.schema_version = NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION;
   2e2b2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		sys_time.count = 1;
   2e2b6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		sys_time.time.time_frac_ms = 0;
   2e2ba:	f8ad 4032 	strh.w	r4, [sp, #50]	; 0x32
		sys_time.time.sv_mask = 0;
   2e2be:	940d      	str	r4, [sp, #52]	; 0x34
		err = npgps_get_time(NULL, &day, &sec);
   2e2c0:	f011 fa23 	bl	3f70a <npgps_get_time>
		if (!err) {
   2e2c4:	2800      	cmp	r0, #0
   2e2c6:	d16e      	bne.n	2e3a6 <nrf_cloud_pgps_inject+0x16a>
			sys_time.time.date_day = day;
   2e2c8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
			sys_time.time.time_full_s = sec;
   2e2cc:	9b03      	ldr	r3, [sp, #12]
			LOG_INF("GPS unit needs time assistance. Injecting day:%u, time:%u",
   2e2ce:	2149      	movs	r1, #73	; 0x49
   2e2d0:	4841      	ldr	r0, [pc, #260]	; (2e3d8 <nrf_cloud_pgps_inject+0x19c>)
			sys_time.time.date_day = day;
   2e2d2:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
			sys_time.time.time_full_s = sec;
   2e2d6:	f8cd 302e 	str.w	r3, [sp, #46]	; 0x2e
			LOG_INF("GPS unit needs time assistance. Injecting day:%u, time:%u",
   2e2da:	f00e fbe9 	bl	3cab0 <z_log_minimal_printk>
			err = nrf_cloud_agps_process((const char *)&sys_time,
   2e2de:	2110      	movs	r1, #16
   2e2e0:	a80a      	add	r0, sp, #40	; 0x28
   2e2e2:	f7fe fc35 	bl	2cb50 <nrf_cloud_agps_process>
			if (err) {
   2e2e6:	4604      	mov	r4, r0
   2e2e8:	b140      	cbz	r0, 2e2fc <nrf_cloud_pgps_inject+0xc0>
				LOG_ERR("Error injecting P-GPS sys_time (%u, %u): %d",
   2e2ea:	9000      	str	r0, [sp, #0]
   2e2ec:	2145      	movs	r1, #69	; 0x45
   2e2ee:	f8dd 302e 	ldr.w	r3, [sp, #46]	; 0x2e
   2e2f2:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   2e2f6:	4839      	ldr	r0, [pc, #228]	; (2e3dc <nrf_cloud_pgps_inject+0x1a0>)
   2e2f8:	f00e fbda 	bl	3cab0 <z_log_minimal_printk>
	const struct gps_location *saved_location = npgps_get_saved_location();
   2e2fc:	f000 fbd2 	bl	2eaa4 <npgps_get_saved_location>
	if (remainder.data_flags & NRF_MODEM_GNSS_AGPS_POSITION_REQUEST &&
   2e300:	06eb      	lsls	r3, r5, #27
   2e302:	d55d      	bpl.n	2e3c0 <nrf_cloud_pgps_inject+0x184>
   2e304:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   2e308:	4313      	orrs	r3, r2
   2e30a:	d054      	beq.n	2e3b6 <nrf_cloud_pgps_inject+0x17a>
		location.schema_version = NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION;
   2e30c:	2301      	movs	r3, #1
		location.type = NRF_CLOUD_AGPS_LOCATION;
   2e30e:	2208      	movs	r2, #8
		location.location.altitude = 0;
   2e310:	2100      	movs	r1, #0
		location.schema_version = NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION;
   2e312:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		location.type = NRF_CLOUD_AGPS_LOCATION;
   2e316:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
		location.location.latitude = saved_location->latitude;
   2e31a:	6802      	ldr	r2, [r0, #0]
		location.count = 1;
   2e31c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		location.location.longitude = saved_location->longitude;
   2e320:	6843      	ldr	r3, [r0, #4]
		location.location.altitude = 0;
   2e322:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
		location.location.orientation_major = 0;
   2e326:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
		location.location.unc_altitude = 0xFF; /* tell modem it is invalid */
   2e32a:	21ff      	movs	r1, #255	; 0xff
		location.location.unc_semimajor = LOCATION_UNC_SEMIMAJOR_K;
   2e32c:	2059      	movs	r0, #89	; 0x59
		location.location.unc_altitude = 0xFF; /* tell modem it is invalid */
   2e32e:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
		location.location.confidence = LOCATION_CONFIDENCE_PERCENT;
   2e332:	2144      	movs	r1, #68	; 0x44
		location.location.unc_semimajor = LOCATION_UNC_SEMIMAJOR_K;
   2e334:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
		location.location.unc_semiminor = LOCATION_UNC_SEMIMINOR_K;
   2e338:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
		location.location.confidence = LOCATION_CONFIDENCE_PERCENT;
   2e33c:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
		LOG_INF("GPS unit needs position. Injecting lat:%d, lng:%d",
   2e340:	4827      	ldr	r0, [pc, #156]	; (2e3e0 <nrf_cloud_pgps_inject+0x1a4>)
   2e342:	2149      	movs	r1, #73	; 0x49
		location.location.latitude = saved_location->latitude;
   2e344:	920b      	str	r2, [sp, #44]	; 0x2c
		location.location.longitude = saved_location->longitude;
   2e346:	930c      	str	r3, [sp, #48]	; 0x30
		LOG_INF("GPS unit needs position. Injecting lat:%d, lng:%d",
   2e348:	f00e fbb2 	bl	3cab0 <z_log_minimal_printk>
		err = nrf_cloud_agps_process((const char *)&location, sizeof(location));
   2e34c:	2113      	movs	r1, #19
   2e34e:	a80a      	add	r0, sp, #40	; 0x28
   2e350:	f7fe fbfe 	bl	2cb50 <nrf_cloud_agps_process>
		if (err) {
   2e354:	4605      	mov	r5, r0
   2e356:	b138      	cbz	r0, 2e368 <nrf_cloud_pgps_inject+0x12c>
			LOG_ERR("Error injecting P-GPS location (%d, %d): %d",
   2e358:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
   2e35c:	9000      	str	r0, [sp, #0]
   2e35e:	2145      	movs	r1, #69	; 0x45
   2e360:	4820      	ldr	r0, [pc, #128]	; (2e3e4 <nrf_cloud_pgps_inject+0x1a8>)
   2e362:	f00e fba5 	bl	3cab0 <z_log_minimal_printk>
   2e366:	462c      	mov	r4, r5
	if (remainder.sv_mask_ephe) {
   2e368:	9b04      	ldr	r3, [sp, #16]
   2e36a:	b363      	cbz	r3, 2e3c6 <nrf_cloud_pgps_inject+0x18a>
		LOG_INF("GPS unit needs ephemerides. Injecting %u.", p->ephemeris_count);
   2e36c:	2149      	movs	r1, #73	; 0x49
   2e36e:	f8b6 2015 	ldrh.w	r2, [r6, #21]
   2e372:	481d      	ldr	r0, [pc, #116]	; (2e3e8 <nrf_cloud_pgps_inject+0x1ac>)
   2e374:	f00e fb9c 	bl	3cab0 <z_log_minimal_printk>
		err = nrf_cloud_agps_process((const char *)&p->schema_version,
   2e378:	f240 71c4 	movw	r1, #1988	; 0x7c4
   2e37c:	f106 0013 	add.w	r0, r6, #19
   2e380:	f7fe fbe6 	bl	2cb50 <nrf_cloud_agps_process>
		if (err) {
   2e384:	4605      	mov	r5, r0
   2e386:	2800      	cmp	r0, #0
   2e388:	f43f af65 	beq.w	2e256 <nrf_cloud_pgps_inject+0x1a>
			LOG_ERR("Error injecting ephermerii:%d", err);
   2e38c:	4602      	mov	r2, r0
   2e38e:	2145      	movs	r1, #69	; 0x45
   2e390:	4816      	ldr	r0, [pc, #88]	; (2e3ec <nrf_cloud_pgps_inject+0x1b0>)
   2e392:	f00e fb8d 	bl	3cab0 <z_log_minimal_printk>
   2e396:	462c      	mov	r4, r5
   2e398:	e75d      	b.n	2e256 <nrf_cloud_pgps_inject+0x1a>
		remainder.sv_mask_ephe = 0xFFFFFFFFU;
   2e39a:	f04f 33ff 	mov.w	r3, #4294967295
		memset(&remainder, 0, sizeof(remainder));
   2e39e:	e9cd 1105 	strd	r1, r1, [sp, #20]
		remainder.sv_mask_ephe = 0xFFFFFFFFU;
   2e3a2:	9304      	str	r3, [sp, #16]
   2e3a4:	e763      	b.n	2e26e <nrf_cloud_pgps_inject+0x32>
			LOG_WRN("Current time not known; cannot provide time assistance");
   2e3a6:	2157      	movs	r1, #87	; 0x57
   2e3a8:	4811      	ldr	r0, [pc, #68]	; (2e3f0 <nrf_cloud_pgps_inject+0x1b4>)
		LOG_INF("GPS unit does not need time assistance.");
   2e3aa:	f00e fb81 	bl	3cab0 <z_log_minimal_printk>
   2e3ae:	e7a5      	b.n	2e2fc <nrf_cloud_pgps_inject+0xc0>
   2e3b0:	2149      	movs	r1, #73	; 0x49
   2e3b2:	4810      	ldr	r0, [pc, #64]	; (2e3f4 <nrf_cloud_pgps_inject+0x1b8>)
   2e3b4:	e7f9      	b.n	2e3aa <nrf_cloud_pgps_inject+0x16e>
		LOG_WRN("GPS unit needs location, but it is unknown!");
   2e3b6:	2157      	movs	r1, #87	; 0x57
   2e3b8:	480f      	ldr	r0, [pc, #60]	; (2e3f8 <nrf_cloud_pgps_inject+0x1bc>)
		LOG_INF("GPS unit does not need location assistance.");
   2e3ba:	f00e fb79 	bl	3cab0 <z_log_minimal_printk>
   2e3be:	e7d3      	b.n	2e368 <nrf_cloud_pgps_inject+0x12c>
   2e3c0:	2149      	movs	r1, #73	; 0x49
   2e3c2:	480e      	ldr	r0, [pc, #56]	; (2e3fc <nrf_cloud_pgps_inject+0x1c0>)
   2e3c4:	e7f9      	b.n	2e3ba <nrf_cloud_pgps_inject+0x17e>
		LOG_INF("GPS unit does not need ephemerides.");
   2e3c6:	2149      	movs	r1, #73	; 0x49
   2e3c8:	480d      	ldr	r0, [pc, #52]	; (2e400 <nrf_cloud_pgps_inject+0x1c4>)
   2e3ca:	f00e fb71 	bl	3cab0 <z_log_minimal_printk>
   2e3ce:	e742      	b.n	2e256 <nrf_cloud_pgps_inject+0x1a>
   2e3d0:	2001d2bf 	.word	0x2001d2bf
   2e3d4:	000490ab 	.word	0x000490ab
   2e3d8:	00049906 	.word	0x00049906
   2e3dc:	00049945 	.word	0x00049945
   2e3e0:	000499df 	.word	0x000499df
   2e3e4:	00049a16 	.word	0x00049a16
   2e3e8:	00049aa9 	.word	0x00049aa9
   2e3ec:	00049ad8 	.word	0x00049ad8
   2e3f0:	00049976 	.word	0x00049976
   2e3f4:	000499b2 	.word	0x000499b2
   2e3f8:	00049a47 	.word	0x00049a47
   2e3fc:	00049a78 	.word	0x00049a78
   2e400:	00049afb 	.word	0x00049afb

0002e404 <prediction_work_handler>:
{
   2e404:	b507      	push	{r0, r1, r2, lr}
	LOG_INF("prediction is expiring; finding next");
   2e406:	2149      	movs	r1, #73	; 0x49
   2e408:	480c      	ldr	r0, [pc, #48]	; (2e43c <prediction_work_handler+0x38>)
   2e40a:	f00e fb51 	bl	3cab0 <z_log_minimal_printk>
	ret = nrf_cloud_pgps_find_prediction(&p);
   2e40e:	a801      	add	r0, sp, #4
   2e410:	f7ff fa82 	bl	2d918 <nrf_cloud_pgps_find_prediction>
	if (ret >= 0) {
   2e414:	2800      	cmp	r0, #0
   2e416:	db09      	blt.n	2e42c <prediction_work_handler+0x28>
		ret = nrf_cloud_pgps_inject(p, NULL);
   2e418:	2100      	movs	r1, #0
   2e41a:	9801      	ldr	r0, [sp, #4]
   2e41c:	f7ff ff0e 	bl	2e23c <nrf_cloud_pgps_inject>
		if (ret) {
   2e420:	4602      	mov	r2, r0
   2e422:	b130      	cbz	r0, 2e432 <prediction_work_handler+0x2e>
			LOG_ERR("Error injecting prediction:%d", ret);
   2e424:	2145      	movs	r1, #69	; 0x45
   2e426:	4806      	ldr	r0, [pc, #24]	; (2e440 <prediction_work_handler+0x3c>)
   2e428:	f00e fb42 	bl	3cab0 <z_log_minimal_printk>
}
   2e42c:	b003      	add	sp, #12
   2e42e:	f85d fb04 	ldr.w	pc, [sp], #4
			LOG_INF("Next prediction injected successfully.");
   2e432:	2149      	movs	r1, #73	; 0x49
   2e434:	4803      	ldr	r0, [pc, #12]	; (2e444 <prediction_work_handler+0x40>)
   2e436:	f00e fb3b 	bl	3cab0 <z_log_minimal_printk>
}
   2e43a:	e7f7      	b.n	2e42c <prediction_work_handler+0x28>
   2e43c:	00049b24 	.word	0x00049b24
   2e440:	00049b4e 	.word	0x00049b4e
   2e444:	00049b71 	.word	0x00049b71

0002e448 <nrf_cloud_pgps_process>:
	return 0;
}

/* handle incoming P-GPS packets */
int nrf_cloud_pgps_process(const char *buf, size_t buf_len)
{
   2e448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static char host[CONFIG_DOWNLOAD_CLIENT_MAX_HOSTNAME_SIZE];
	static char path[CONFIG_DOWNLOAD_CLIENT_MAX_FILENAME_SIZE];
	static uint8_t prev_pnum;
	uint8_t pnum;
	int err;
	struct nrf_cloud_pgps_result pgps_dl = {
   2e44c:	4b41      	ldr	r3, [pc, #260]	; (2e554 <nrf_cloud_pgps_process+0x10c>)
		.host_sz = sizeof(host),
		.path = path,
		.path_sz = sizeof(path)
	};

	if (state == PGPS_NONE) {
   2e44e:	4d42      	ldr	r5, [pc, #264]	; (2e558 <nrf_cloud_pgps_process+0x110>)
{
   2e450:	b086      	sub	sp, #24
	struct nrf_cloud_pgps_result pgps_dl = {
   2e452:	ac02      	add	r4, sp, #8
{
   2e454:	4680      	mov	r8, r0
   2e456:	460f      	mov	r7, r1
	struct nrf_cloud_pgps_result pgps_dl = {
   2e458:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   2e45a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (state == PGPS_NONE) {
   2e45e:	782b      	ldrb	r3, [r5, #0]
   2e460:	b943      	cbnz	r3, 2e474 <nrf_cloud_pgps_process+0x2c>
		LOG_ERR("P-GPS subsystem is not initialized.");
   2e462:	2145      	movs	r1, #69	; 0x45
   2e464:	483d      	ldr	r0, [pc, #244]	; (2e55c <nrf_cloud_pgps_process+0x114>)
   2e466:	f00e fb23 	bl	3cab0 <z_log_minimal_printk>
	LOG_HEXDUMP_DBG(buf, buf_len, "MQTT packet");
#endif
	if (!buf_len) {
		LOG_ERR("Zero length packet received");
		state = PGPS_NONE;
		return -EINVAL;
   2e46a:	f06f 0015 	mvn.w	r0, #21
	if (err) {
		state = PGPS_NONE;
	}

	return err;
}
   2e46e:	b006      	add	sp, #24
   2e470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!buf_len) {
   2e474:	b92f      	cbnz	r7, 2e482 <nrf_cloud_pgps_process+0x3a>
		LOG_ERR("Zero length packet received");
   2e476:	2145      	movs	r1, #69	; 0x45
   2e478:	4839      	ldr	r0, [pc, #228]	; (2e560 <nrf_cloud_pgps_process+0x118>)
   2e47a:	f00e fb19 	bl	3cab0 <z_log_minimal_printk>
		state = PGPS_NONE;
   2e47e:	702f      	strb	r7, [r5, #0]
   2e480:	e7f3      	b.n	2e46a <nrf_cloud_pgps_process+0x22>
	if (ignore_packets) {
   2e482:	4e38      	ldr	r6, [pc, #224]	; (2e564 <nrf_cloud_pgps_process+0x11c>)
   2e484:	7833      	ldrb	r3, [r6, #0]
   2e486:	b173      	cbz	r3, 2e4a6 <nrf_cloud_pgps_process+0x5e>
		LOG_ERR("IGNORING PACKETS");
   2e488:	2145      	movs	r1, #69	; 0x45
   2e48a:	4837      	ldr	r0, [pc, #220]	; (2e568 <nrf_cloud_pgps_process+0x120>)
   2e48c:	f00e fb10 	bl	3cab0 <z_log_minimal_printk>
		LOG_HEXDUMP_INF(buf, buf_len, "Unexpected packet");
   2e490:	2149      	movs	r1, #73	; 0x49
   2e492:	4a36      	ldr	r2, [pc, #216]	; (2e56c <nrf_cloud_pgps_process+0x124>)
   2e494:	4836      	ldr	r0, [pc, #216]	; (2e570 <nrf_cloud_pgps_process+0x128>)
   2e496:	f00e fb0b 	bl	3cab0 <z_log_minimal_printk>
   2e49a:	463a      	mov	r2, r7
   2e49c:	4641      	mov	r1, r8
   2e49e:	2003      	movs	r0, #3
   2e4a0:	f7f3 f862 	bl	21568 <z_log_minimal_hexdump_print>
		return -EINVAL;
   2e4a4:	e7e1      	b.n	2e46a <nrf_cloud_pgps_process+0x22>
	err = nrf_cloud_parse_pgps_response(buf, &pgps_dl);
   2e4a6:	4621      	mov	r1, r4
   2e4a8:	4640      	mov	r0, r8
   2e4aa:	f7fc fe7d 	bl	2b1a8 <nrf_cloud_parse_pgps_response>
	if (err) {
   2e4ae:	2800      	cmp	r0, #0
   2e4b0:	d1dd      	bne.n	2e46e <nrf_cloud_pgps_process+0x26>
	state = PGPS_LOADING;
   2e4b2:	2305      	movs	r3, #5
	if (!index.partial_request) {
   2e4b4:	4c2f      	ldr	r4, [pc, #188]	; (2e574 <nrf_cloud_pgps_process+0x12c>)
	state = PGPS_LOADING;
   2e4b6:	702b      	strb	r3, [r5, #0]
	if (!index.partial_request) {
   2e4b8:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
   2e4bc:	b9d9      	cbnz	r1, 2e4f6 <nrf_cloud_pgps_process+0xae>
		index.header.prediction_count = NUM_PREDICTIONS;
   2e4be:	232a      	movs	r3, #42	; 0x2a
   2e4c0:	80a3      	strh	r3, [r4, #4]
		index.header.prediction_period_min = PREDICTION_PERIOD;
   2e4c2:	23f0      	movs	r3, #240	; 0xf0
   2e4c4:	8123      	strh	r3, [r4, #8]
		index.period_sec =
   2e4c6:	f44f 5361 	mov.w	r3, #14400	; 0x3840
		memset(index.predictions, 0, sizeof(index.predictions));
   2e4ca:	22a8      	movs	r2, #168	; 0xa8
   2e4cc:	f104 003c 	add.w	r0, r4, #60	; 0x3c
		index.period_sec =
   2e4d0:	8563      	strh	r3, [r4, #42]	; 0x2a
		memset(index.predictions, 0, sizeof(index.predictions));
   2e4d2:	f012 ff87 	bl	413e4 <memset>
	index.loading_count = 0;
   2e4d6:	2700      	movs	r7, #0
   2e4d8:	8527      	strh	r7, [r4, #40]	; 0x28
	index.store_block = npgps_alloc_block();
   2e4da:	f000 fbad 	bl	2ec38 <npgps_alloc_block>
   2e4de:	4603      	mov	r3, r0
	if (index.store_block == NO_BLOCK) {
   2e4e0:	3301      	adds	r3, #1
	index.store_block = npgps_alloc_block();
   2e4e2:	63a0      	str	r0, [r4, #56]	; 0x38
	if (index.store_block == NO_BLOCK) {
   2e4e4:	d113      	bne.n	2e50e <nrf_cloud_pgps_process+0xc6>
		LOG_ERR("No free flash space!");
   2e4e6:	4824      	ldr	r0, [pc, #144]	; (2e578 <nrf_cloud_pgps_process+0x130>)
   2e4e8:	2145      	movs	r1, #69	; 0x45
   2e4ea:	f00e fae1 	bl	3cab0 <z_log_minimal_printk>
		return -ENOMEM;
   2e4ee:	f06f 000b 	mvn.w	r0, #11
		state = PGPS_NONE;
   2e4f2:	702f      	strb	r7, [r5, #0]
		return -ENOMEM;
   2e4f4:	e7bb      	b.n	2e46e <nrf_cloud_pgps_process+0x26>
		for (pnum = index.pnum_offset;
   2e4f6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
		     pnum < index.expected_count + index.pnum_offset; pnum++) {
   2e4fa:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   2e4fc:	441a      	add	r2, r3
		for (pnum = index.pnum_offset;
   2e4fe:	4293      	cmp	r3, r2
   2e500:	dae9      	bge.n	2e4d6 <nrf_cloud_pgps_process+0x8e>
			index.predictions[pnum] = NULL;
   2e502:	eb04 0183 	add.w	r1, r4, r3, lsl #2
		     pnum < index.expected_count + index.pnum_offset; pnum++) {
   2e506:	3301      	adds	r3, #1
			index.predictions[pnum] = NULL;
   2e508:	63c8      	str	r0, [r1, #60]	; 0x3c
		     pnum < index.expected_count + index.pnum_offset; pnum++) {
   2e50a:	b2db      	uxtb	r3, r3
   2e50c:	e7f7      	b.n	2e4fe <nrf_cloud_pgps_process+0xb6>
	index.storage_extent = npgps_get_block_extent(index.store_block);
   2e50e:	f000 fbbd 	bl	2ec8c <npgps_get_block_extent>
	LOG_INF("opening storage at block:%d, len:%d", index.store_block,
   2e512:	2149      	movs	r1, #73	; 0x49
	index.storage_extent = npgps_get_block_extent(index.store_block);
   2e514:	4603      	mov	r3, r0
	LOG_INF("opening storage at block:%d, len:%d", index.store_block,
   2e516:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	index.storage_extent = npgps_get_block_extent(index.store_block);
   2e518:	6360      	str	r0, [r4, #52]	; 0x34
	LOG_INF("opening storage at block:%d, len:%d", index.store_block,
   2e51a:	4818      	ldr	r0, [pc, #96]	; (2e57c <nrf_cloud_pgps_process+0x134>)
   2e51c:	f00e fac8 	bl	3cab0 <z_log_minimal_printk>
	err = open_storage(npgps_block_to_offset(index.store_block),
   2e520:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   2e522:	f000 fc65 	bl	2edf0 <npgps_block_to_offset>
   2e526:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
   2e52a:	f7ff f8a3 	bl	2d674 <open_storage>
	if (err) {
   2e52e:	b108      	cbz	r0, 2e534 <nrf_cloud_pgps_process+0xec>
		state = PGPS_NONE;
   2e530:	702f      	strb	r7, [r5, #0]
   2e532:	e79c      	b.n	2e46e <nrf_cloud_pgps_process+0x26>
	ignore_packets = true;
   2e534:	2301      	movs	r3, #1
   2e536:	7033      	strb	r3, [r6, #0]
	err =  npgps_download_start(pgps_dl.host, pgps_dl.path, sec_tag, 0, FRAGMENT_SIZE);
   2e538:	f240 53dc 	movw	r3, #1500	; 0x5dc
	index.dl_offset = 0;
   2e53c:	6220      	str	r0, [r4, #32]
	err =  npgps_download_start(pgps_dl.host, pgps_dl.path, sec_tag, 0, FRAGMENT_SIZE);
   2e53e:	4a10      	ldr	r2, [pc, #64]	; (2e580 <nrf_cloud_pgps_process+0x138>)
   2e540:	9300      	str	r3, [sp, #0]
   2e542:	9904      	ldr	r1, [sp, #16]
   2e544:	4603      	mov	r3, r0
   2e546:	9802      	ldr	r0, [sp, #8]
   2e548:	f000 fcb0 	bl	2eeac <npgps_download_start>
	if (err) {
   2e54c:	2800      	cmp	r0, #0
   2e54e:	d08e      	beq.n	2e46e <nrf_cloud_pgps_process+0x26>
   2e550:	e7ee      	b.n	2e530 <nrf_cloud_pgps_process+0xe8>
   2e552:	bf00      	nop
   2e554:	000427cc 	.word	0x000427cc
   2e558:	2001d2bf 	.word	0x2001d2bf
   2e55c:	000490ab 	.word	0x000490ab
   2e560:	00049b9d 	.word	0x00049b9d
   2e564:	2001c9d9 	.word	0x2001c9d9
   2e568:	00049bbe 	.word	0x00049bbe
   2e56c:	00049bd4 	.word	0x00049bd4
   2e570:	00049be6 	.word	0x00049be6
   2e574:	20015810 	.word	0x20015810
   2e578:	00049bee 	.word	0x00049bee
   2e57c:	00049c08 	.word	0x00049c08
   2e580:	01010001 	.word	0x01010001

0002e584 <nrf_cloud_pgps_init>:

int nrf_cloud_pgps_init(struct nrf_cloud_pgps_init_param *param)
{
	int err = 0;
	struct nrf_cloud_pgps_event evt = {
   2e584:	2300      	movs	r3, #0
{
   2e586:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e58a:	b097      	sub	sp, #92	; 0x5c
	struct nrf_cloud_pgps_event evt = {
   2e58c:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44

#if defined(CONFIG_NRF_CLOUD_PGPS_STORAGE_PARTITION)
	BUILD_ASSERT(CONFIG_NRF_CLOUD_PGPS_PARTITION_SIZE >=
		 (CONFIG_NRF_CLOUD_PGPS_NUM_PREDICTIONS * BLOCK_SIZE),
		 "P-GPS partition size is too small");
	if (param->storage_base || param->storage_size) {
   2e590:	6843      	ldr	r3, [r0, #4]
{
   2e592:	4604      	mov	r4, r0
	if (param->storage_base || param->storage_size) {
   2e594:	b90b      	cbnz	r3, 2e59a <nrf_cloud_pgps_init+0x16>
   2e596:	6883      	ldr	r3, [r0, #8]
   2e598:	b11b      	cbz	r3, 2e5a2 <nrf_cloud_pgps_init+0x1e>
		LOG_WRN("Overriding P-GPS storage with P-GPS partition");
   2e59a:	2157      	movs	r1, #87	; 0x57
   2e59c:	48ae      	ldr	r0, [pc, #696]	; (2e858 <nrf_cloud_pgps_init+0x2d4>)
   2e59e:	f00e fa87 	bl	3cab0 <z_log_minimal_printk>
	}
	param->storage_base = PM_PGPS_ADDRESS;
	param->storage_size = PM_PGPS_SIZE;
   2e5a2:	f44f 33a8 	mov.w	r3, #86016	; 0x15000
   2e5a6:	f44f 216b 	mov.w	r1, #962560	; 0xeb000
	__ASSERT(param->storage_base != 0u, "P-GPS flash storage must be provided");
	__ASSERT((param->storage_size >= (NUM_BLOCKS * BLOCK_SIZE)),
		 "insufficient storage provided; need at least %u bytes",
		 (NUM_BLOCKS * BLOCK_SIZE));

	evt_handler = param->event_handler;
   2e5aa:	4aac      	ldr	r2, [pc, #688]	; (2e85c <nrf_cloud_pgps_init+0x2d8>)
	param->storage_size = PM_PGPS_SIZE;
   2e5ac:	e9c4 1301 	strd	r1, r3, [r4, #4]
	evt_handler = param->event_handler;
   2e5b0:	6823      	ldr	r3, [r4, #0]
   2e5b2:	6013      	str	r3, [r2, #0]
	if (evt_handler) {
   2e5b4:	b10b      	cbz	r3, 2e5ba <nrf_cloud_pgps_init+0x36>
		evt_handler(&evt);
   2e5b6:	a811      	add	r0, sp, #68	; 0x44
   2e5b8:	4798      	blx	r3
	}

	flash_page_size = nrfx_nvmc_flash_page_size_get();
   2e5ba:	f011 fc4e 	bl	3fe5a <nrfx_nvmc_flash_page_size_get>
	if (!flash_page_size) {
   2e5be:	4aa8      	ldr	r2, [pc, #672]	; (2e860 <nrf_cloud_pgps_init+0x2dc>)
   2e5c0:	b140      	cbz	r0, 2e5d4 <nrf_cloud_pgps_init+0x50>
	flash_page_size = nrfx_nvmc_flash_page_size_get();
   2e5c2:	6010      	str	r0, [r2, #0]
		flash_page_size = 4096;
	}

	if (nrf_cloud_pgps_loading()) {
   2e5c4:	f7ff f8c4 	bl	2d750 <nrf_cloud_pgps_loading>
   2e5c8:	b140      	cbz	r0, 2e5dc <nrf_cloud_pgps_init+0x58>
		return 0;
   2e5ca:	2400      	movs	r4, #0
		}
		err = 0;
	}

	return err;
}
   2e5cc:	4620      	mov	r0, r4
   2e5ce:	b017      	add	sp, #92	; 0x5c
   2e5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		flash_page_size = 4096;
   2e5d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   2e5d8:	6013      	str	r3, [r2, #0]
   2e5da:	e7f3      	b.n	2e5c4 <nrf_cloud_pgps_init+0x40>
	if (!write_buf) {
   2e5dc:	4da1      	ldr	r5, [pc, #644]	; (2e864 <nrf_cloud_pgps_init+0x2e0>)
	state = PGPS_NONE;
   2e5de:	4ea2      	ldr	r6, [pc, #648]	; (2e868 <nrf_cloud_pgps_init+0x2e4>)
	if (!write_buf) {
   2e5e0:	682b      	ldr	r3, [r5, #0]
	state = PGPS_NONE;
   2e5e2:	7030      	strb	r0, [r6, #0]
	if (!write_buf) {
   2e5e4:	b1db      	cbz	r3, 2e61e <nrf_cloud_pgps_init+0x9a>
	storage_size = param->storage_size;
   2e5e6:	4ba1      	ldr	r3, [pc, #644]	; (2e86c <nrf_cloud_pgps_init+0x2e8>)
   2e5e8:	68a2      	ldr	r2, [r4, #8]
	storage = (uint8_t *)param->storage_base;
   2e5ea:	6860      	ldr	r0, [r4, #4]
   2e5ec:	4fa0      	ldr	r7, [pc, #640]	; (2e870 <nrf_cloud_pgps_init+0x2ec>)
	memset(&index, 0, sizeof(index));
   2e5ee:	4da1      	ldr	r5, [pc, #644]	; (2e874 <nrf_cloud_pgps_init+0x2f0>)
	(void)ngps_block_pool_init(param->storage_base, NUM_PREDICTIONS);
   2e5f0:	212a      	movs	r1, #42	; 0x2a
	storage_size = param->storage_size;
   2e5f2:	601a      	str	r2, [r3, #0]
	storage = (uint8_t *)param->storage_base;
   2e5f4:	6038      	str	r0, [r7, #0]
	(void)ngps_block_pool_init(param->storage_base, NUM_PREDICTIONS);
   2e5f6:	f000 fb15 	bl	2ec24 <ngps_block_pool_init>
	memset(&index, 0, sizeof(index));
   2e5fa:	22e8      	movs	r2, #232	; 0xe8
   2e5fc:	2100      	movs	r1, #0
   2e5fe:	4628      	mov	r0, r5
   2e600:	f012 fef0 	bl	413e4 <memset>
	(void)npgps_settings_init();
   2e604:	f000 fa52 	bl	2eaac <npgps_settings_init>
	err = npgps_download_init(process_buffer);
   2e608:	489b      	ldr	r0, [pc, #620]	; (2e878 <nrf_cloud_pgps_init+0x2f4>)
   2e60a:	f000 fc2f 	bl	2ee6c <npgps_download_init>
	if (err) {
   2e60e:	4604      	mov	r4, r0
   2e610:	b170      	cbz	r0, 2e630 <nrf_cloud_pgps_init+0xac>
		LOG_ERR("Error initializing download client:%d", err);
   2e612:	4602      	mov	r2, r0
   2e614:	2145      	movs	r1, #69	; 0x45
   2e616:	4899      	ldr	r0, [pc, #612]	; (2e87c <nrf_cloud_pgps_init+0x2f8>)
   2e618:	f00e fa4a 	bl	3cab0 <z_log_minimal_printk>
		return err;
   2e61c:	e7d6      	b.n	2e5cc <nrf_cloud_pgps_init+0x48>
		write_buf = k_malloc(flash_page_size);
   2e61e:	6810      	ldr	r0, [r2, #0]
   2e620:	f012 fe36 	bl	41290 <k_malloc>
   2e624:	6028      	str	r0, [r5, #0]
		if (!write_buf) {
   2e626:	2800      	cmp	r0, #0
   2e628:	d1dd      	bne.n	2e5e6 <nrf_cloud_pgps_init+0x62>
			return -ENOMEM;
   2e62a:	f06f 040b 	mvn.w	r4, #11
   2e62e:	e7cd      	b.n	2e5cc <nrf_cloud_pgps_init+0x48>
	state = PGPS_INITIALIZING;
   2e630:	2301      	movs	r3, #1
	uint16_t gps_day = 0;
   2e632:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
	state = PGPS_INITIALIZING;
   2e636:	7033      	strb	r3, [r6, #0]
	uint32_t gps_time_of_day = 0;
   2e638:	900f      	str	r0, [sp, #60]	; 0x3c
	saved_header = npgps_get_saved_header();
   2e63a:	f000 fa2f 	bl	2ea9c <npgps_get_saved_header>
   2e63e:	4606      	mov	r6, r0
	if (validate_pgps_header(saved_header)) {
   2e640:	f7fe ff40 	bl	2d4c4 <validate_pgps_header>
   2e644:	2800      	cmp	r0, #0
   2e646:	f000 8103 	beq.w	2e850 <nrf_cloud_pgps_init+0x2cc>
		cache_pgps_header(saved_header);
   2e64a:	4630      	mov	r0, r6
   2e64c:	f7fe ff6c 	bl	2d528 <cache_pgps_header>
		period_min = index.header.prediction_period_min;
   2e650:	892b      	ldrh	r3, [r5, #8]
		count = index.header.prediction_count;
   2e652:	88ae      	ldrh	r6, [r5, #4]
		period_min = index.header.prediction_period_min;
   2e654:	9305      	str	r3, [sp, #20]
		gps_day = index.header.gps_day;
   2e656:	896b      	ldrh	r3, [r5, #10]
		LOG_INF("Checking stored P-GPS data; count:%u, period_min:%u",
   2e658:	4632      	mov	r2, r6
		gps_day = index.header.gps_day;
   2e65a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		gps_time_of_day = index.header.gps_time_of_day;
   2e65e:	68eb      	ldr	r3, [r5, #12]
		LOG_INF("Checking stored P-GPS data; count:%u, period_min:%u",
   2e660:	2149      	movs	r1, #73	; 0x49
		gps_time_of_day = index.header.gps_time_of_day;
   2e662:	930f      	str	r3, [sp, #60]	; 0x3c
		LOG_INF("Checking stored P-GPS data; count:%u, period_min:%u",
   2e664:	4886      	ldr	r0, [pc, #536]	; (2e880 <nrf_cloud_pgps_init+0x2fc>)
   2e666:	9b05      	ldr	r3, [sp, #20]
   2e668:	f00e fa22 	bl	3cab0 <z_log_minimal_printk>
	uint16_t count = index.header.prediction_count;
   2e66c:	88ab      	ldrh	r3, [r5, #4]
   2e66e:	4621      	mov	r1, r4
   2e670:	9306      	str	r3, [sp, #24]
	uint16_t period_min = index.header.prediction_period_min;
   2e672:	892b      	ldrh	r3, [r5, #8]
   2e674:	9308      	str	r3, [sp, #32]
	uint16_t gps_day = index.header.gps_day;
   2e676:	896b      	ldrh	r3, [r5, #10]
   2e678:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
	uint32_t gps_time_of_day = index.header.gps_time_of_day;
   2e67c:	68eb      	ldr	r3, [r5, #12]
   2e67e:	9313      	str	r3, [sp, #76]	; 0x4c
	uint8_t *p = storage;
   2e680:	683b      	ldr	r3, [r7, #0]
   2e682:	9309      	str	r3, [sp, #36]	; 0x24
	int64_t start_gps_sec = index.start_sec;
   2e684:	692b      	ldr	r3, [r5, #16]
   2e686:	930a      	str	r3, [sp, #40]	; 0x28
   2e688:	696b      	ldr	r3, [r5, #20]
   2e68a:	930b      	str	r3, [sp, #44]	; 0x2c
	for (pnum = 0; pnum < count; pnum++) {
   2e68c:	f105 033c 	add.w	r3, r5, #60	; 0x3c
   2e690:	461a      	mov	r2, r3
   2e692:	9307      	str	r3, [sp, #28]
   2e694:	4623      	mov	r3, r4
   2e696:	9806      	ldr	r0, [sp, #24]
   2e698:	4283      	cmp	r3, r0
   2e69a:	db5d      	blt.n	2e758 <nrf_cloud_pgps_init+0x1d4>
	npgps_reset_block_pool();
   2e69c:	f000 fb0e 	bl	2ecbc <npgps_reset_block_pool>
	for (i = 0; i < count; i++) {
   2e6a0:	f04f 0900 	mov.w	r9, #0
						      header->gps_time_of_day);
   2e6a4:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 2e874 <nrf_cloud_pgps_init+0x2f0>
   2e6a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2e6aa:	eb03 28c9 	add.w	r8, r3, r9, lsl #11
	for (i = 0; i < count; i++) {
   2e6ae:	9b06      	ldr	r3, [sp, #24]
   2e6b0:	454b      	cmp	r3, r9
   2e6b2:	dc55      	bgt.n	2e760 <nrf_cloud_pgps_init+0x1dc>
	for (pnum = 0; pnum < count; pnum++) {
   2e6b4:	2500      	movs	r5, #0
   2e6b6:	233c      	movs	r3, #60	; 0x3c
	for (i = 0; i < count; i++) {
   2e6b8:	46a8      	mov	r8, r5
	i = -1;
   2e6ba:	f04f 37ff 	mov.w	r7, #4294967295
   2e6be:	9a08      	ldr	r2, [sp, #32]
		__ASSERT(i != -1, "unexpected pointer value %p", pred);
   2e6c0:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 2e89c <nrf_cloud_pgps_init+0x318>
   2e6c4:	4353      	muls	r3, r2
   2e6c6:	f8df b1d8 	ldr.w	fp, [pc, #472]	; 2e8a0 <nrf_cloud_pgps_init+0x31c>
   2e6ca:	9309      	str	r3, [sp, #36]	; 0x24
	for (pnum = 0; pnum < count; pnum++) {
   2e6cc:	9b06      	ldr	r3, [sp, #24]
   2e6ce:	42ab      	cmp	r3, r5
   2e6d0:	dd1b      	ble.n	2e70a <nrf_cloud_pgps_init+0x186>
		gps_sec = start_gps_sec + pnum * period_min * SEC_PER_MIN;
   2e6d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		npgps_gps_sec_to_day_time(gps_sec, &gps_day, &gps_time_of_day);
   2e6d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
		gps_sec = start_gps_sec + pnum * period_min * SEC_PER_MIN;
   2e6d6:	eb18 0003 	adds.w	r0, r8, r3
		npgps_gps_sec_to_day_time(gps_sec, &gps_day, &gps_time_of_day);
   2e6da:	aa10      	add	r2, sp, #64	; 0x40
   2e6dc:	ab13      	add	r3, sp, #76	; 0x4c
   2e6de:	f141 0100 	adc.w	r1, r1, #0
   2e6e2:	f000 fa17 	bl	2eb14 <npgps_gps_sec_to_day_time>
		pred = index.predictions[pnum];
   2e6e6:	9b07      	ldr	r3, [sp, #28]
   2e6e8:	f853 9b04 	ldr.w	r9, [r3], #4
   2e6ec:	9307      	str	r3, [sp, #28]
		if (pred == NULL) {
   2e6ee:	f1b9 0f00 	cmp.w	r9, #0
   2e6f2:	d17e      	bne.n	2e7f2 <nrf_cloud_pgps_init+0x26e>
			LOG_WRN("Prediction num:%u missing", pnum);
   2e6f4:	462a      	mov	r2, r5
   2e6f6:	2157      	movs	r1, #87	; 0x57
   2e6f8:	4862      	ldr	r0, [pc, #392]	; (2e884 <nrf_cloud_pgps_init+0x300>)
   2e6fa:	f00e f9d9 	bl	3cab0 <z_log_minimal_printk>
			*first_bad_day = gps_day;
   2e6fe:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   2e702:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
			*first_bad_time = gps_time_of_day;
   2e706:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2e708:	930f      	str	r3, [sp, #60]	; 0x3c
	if (i != -1) {
   2e70a:	1c7b      	adds	r3, r7, #1
   2e70c:	d002      	beq.n	2e714 <nrf_cloud_pgps_init+0x190>
		i = npgps_find_first_free(i);
   2e70e:	4638      	mov	r0, r7
   2e710:	f000 fb52 	bl	2edb8 <npgps_find_first_free>
	npgps_print_blocks();
   2e714:	f000 fb04 	bl	2ed20 <npgps_print_blocks>
		num_valid = validate_stored_predictions(&gps_day, &gps_time_of_day);
   2e718:	b2ad      	uxth	r5, r5
	struct nrf_cloud_pgps_prediction *found_prediction = NULL;
   2e71a:	2300      	movs	r3, #0
   2e71c:	9310      	str	r3, [sp, #64]	; 0x40
	if (num_valid) {
   2e71e:	b17d      	cbz	r5, 2e740 <nrf_cloud_pgps_init+0x1bc>
		LOG_INF("Checking if P-GPS data is expired...");
   2e720:	2149      	movs	r1, #73	; 0x49
   2e722:	4859      	ldr	r0, [pc, #356]	; (2e888 <nrf_cloud_pgps_init+0x304>)
   2e724:	f00e f9c4 	bl	3cab0 <z_log_minimal_printk>
		err = nrf_cloud_pgps_find_prediction(&found_prediction);
   2e728:	a810      	add	r0, sp, #64	; 0x40
   2e72a:	f7ff f8f5 	bl	2d918 <nrf_cloud_pgps_find_prediction>
		if (err == -ETIMEDOUT) {
   2e72e:	f110 0f74 	cmn.w	r0, #116	; 0x74
		err = nrf_cloud_pgps_find_prediction(&found_prediction);
   2e732:	4607      	mov	r7, r0
		if (err == -ETIMEDOUT) {
   2e734:	f040 80b6 	bne.w	2e8a4 <nrf_cloud_pgps_init+0x320>
			LOG_WRN("Predictions expired. Requesting predictions...");
   2e738:	2157      	movs	r1, #87	; 0x57
   2e73a:	4854      	ldr	r0, [pc, #336]	; (2e88c <nrf_cloud_pgps_init+0x308>)
   2e73c:	f00e f9b8 	bl	3cab0 <z_log_minimal_printk>
		if (evt_handler) {
   2e740:	4b46      	ldr	r3, [pc, #280]	; (2e85c <nrf_cloud_pgps_init+0x2d8>)
   2e742:	681b      	ldr	r3, [r3, #0]
   2e744:	b123      	cbz	r3, 2e750 <nrf_cloud_pgps_init+0x1cc>
			evt.type = PGPS_EVT_UNAVAILABLE;
   2e746:	2201      	movs	r2, #1
			evt_handler(&evt);
   2e748:	a811      	add	r0, sp, #68	; 0x44
			evt.type = PGPS_EVT_UNAVAILABLE;
   2e74a:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
			evt_handler(&evt);
   2e74e:	4798      	blx	r3
		err = pgps_request_all();
   2e750:	f7ff f8a8 	bl	2d8a4 <pgps_request_all>
		err = nrf_cloud_pgps_preemptive_updates();
   2e754:	4604      	mov	r4, r0
   2e756:	e739      	b.n	2e5cc <nrf_cloud_pgps_init+0x48>
		index.predictions[pnum] = NULL;
   2e758:	f842 1b04 	str.w	r1, [r2], #4
	for (pnum = 0; pnum < count; pnum++) {
   2e75c:	3301      	adds	r3, #1
   2e75e:	e79a      	b.n	2e696 <nrf_cloud_pgps_init+0x112>
	int64_t start_sec = npgps_gps_day_time_to_sec(header->gps_day,
   2e760:	f8da 100c 	ldr.w	r1, [sl, #12]
   2e764:	f8ba 000a 	ldrh.w	r0, [sl, #10]
   2e768:	f000 f9ca 	bl	2eb00 <npgps_gps_day_time_to_sec>
	uint32_t period_sec = header->prediction_period_min * SEC_PER_MIN;
   2e76c:	233c      	movs	r3, #60	; 0x3c
   2e76e:	f8ba 2008 	ldrh.w	r2, [sl, #8]
	int64_t end_sec = start_sec + header->prediction_count * period_sec;
   2e772:	f8ba 7004 	ldrh.w	r7, [sl, #4]
	uint32_t period_sec = header->prediction_period_min * SEC_PER_MIN;
   2e776:	435a      	muls	r2, r3
	int64_t end_sec = start_sec + header->prediction_count * period_sec;
   2e778:	4357      	muls	r7, r2
   2e77a:	183f      	adds	r7, r7, r0
   2e77c:	f141 0300 	adc.w	r3, r1, #0
   2e780:	930c      	str	r3, [sp, #48]	; 0x30
   2e782:	920d      	str	r2, [sp, #52]	; 0x34
	int64_t start_sec = npgps_gps_day_time_to_sec(header->gps_day,
   2e784:	4605      	mov	r5, r0
   2e786:	468b      	mov	fp, r1
	int64_t pred_sec = npgps_gps_day_time_to_sec(p->time.date_day,
   2e788:	f8b8 0003 	ldrh.w	r0, [r8, #3]
   2e78c:	f8d8 1005 	ldr.w	r1, [r8, #5]
   2e790:	f000 f9b6 	bl	2eb00 <npgps_gps_day_time_to_sec>
	if ((start_sec <= pred_sec) && (pred_sec < end_sec)) {
   2e794:	42a8      	cmp	r0, r5
   2e796:	eb71 030b 	sbcs.w	r3, r1, fp
   2e79a:	db0d      	blt.n	2e7b8 <nrf_cloud_pgps_init+0x234>
   2e79c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2e79e:	42b8      	cmp	r0, r7
   2e7a0:	eb71 0303 	sbcs.w	r3, r1, r3
   2e7a4:	da08      	bge.n	2e7b8 <nrf_cloud_pgps_init+0x234>
		return (int)((pred_sec - start_sec) / period_sec);
   2e7a6:	1b40      	subs	r0, r0, r5
   2e7a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2e7aa:	eb61 010b 	sbc.w	r1, r1, fp
   2e7ae:	2300      	movs	r3, #0
   2e7b0:	f7ee fb4a 	bl	1ce48 <__aeabi_ldivmod>
		if (pnum < 0) {
   2e7b4:	1e02      	subs	r2, r0, #0
   2e7b6:	da0e      	bge.n	2e7d6 <nrf_cloud_pgps_init+0x252>
			LOG_ERR("prediction idx:%u, ofs:%p, out of expected time range;"
   2e7b8:	f8d8 3005 	ldr.w	r3, [r8, #5]
   2e7bc:	464a      	mov	r2, r9
   2e7be:	9301      	str	r3, [sp, #4]
   2e7c0:	f8b8 3003 	ldrh.w	r3, [r8, #3]
   2e7c4:	2145      	movs	r1, #69	; 0x45
   2e7c6:	9300      	str	r3, [sp, #0]
   2e7c8:	4831      	ldr	r0, [pc, #196]	; (2e890 <nrf_cloud_pgps_init+0x30c>)
   2e7ca:	4643      	mov	r3, r8
   2e7cc:	f00e f970 	bl	3cab0 <z_log_minimal_printk>
	for (i = 0; i < count; i++) {
   2e7d0:	f109 0901 	add.w	r9, r9, #1
   2e7d4:	e768      	b.n	2e6a8 <nrf_cloud_pgps_init+0x124>
		} else if (index.predictions[pnum] == NULL) {
   2e7d6:	f102 030e 	add.w	r3, r2, #14
   2e7da:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
   2e7de:	6859      	ldr	r1, [r3, #4]
   2e7e0:	b911      	cbnz	r1, 2e7e8 <nrf_cloud_pgps_init+0x264>
			index.predictions[pnum] = pred;
   2e7e2:	f8c3 8004 	str.w	r8, [r3, #4]
			LOG_DBG("Prediction num:%u stored at idx:%d", pnum, i);
   2e7e6:	e7f3      	b.n	2e7d0 <nrf_cloud_pgps_init+0x24c>
			LOG_WRN("Prediction num:%u stored more than once!", pnum);
   2e7e8:	2157      	movs	r1, #87	; 0x57
   2e7ea:	482a      	ldr	r0, [pc, #168]	; (2e894 <nrf_cloud_pgps_init+0x310>)
   2e7ec:	f00e f960 	bl	3cab0 <z_log_minimal_printk>
   2e7f0:	e7ee      	b.n	2e7d0 <nrf_cloud_pgps_init+0x24c>
		err = validate_prediction(pred, gps_day, gps_time_of_day,
   2e7f2:	2301      	movs	r3, #1
   2e7f4:	4648      	mov	r0, r9
   2e7f6:	9300      	str	r3, [sp, #0]
   2e7f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2e7fa:	9b08      	ldr	r3, [sp, #32]
   2e7fc:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
   2e800:	f7fe feb6 	bl	2d570 <validate_prediction.constprop.0>
		if (err) {
   2e804:	b158      	cbz	r0, 2e81e <nrf_cloud_pgps_init+0x29a>
			LOG_ERR("Prediction num:%u, gps_day:%u, "
   2e806:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2e808:	e9cd 0901 	strd	r0, r9, [sp, #4]
   2e80c:	9300      	str	r3, [sp, #0]
   2e80e:	462a      	mov	r2, r5
   2e810:	2145      	movs	r1, #69	; 0x45
   2e812:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   2e816:	4820      	ldr	r0, [pc, #128]	; (2e898 <nrf_cloud_pgps_init+0x314>)
   2e818:	f00e f94a 	bl	3cab0 <z_log_minimal_printk>
   2e81c:	e76f      	b.n	2e6fe <nrf_cloud_pgps_init+0x17a>
		i = npgps_pointer_to_block((uint8_t *)pred);
   2e81e:	4648      	mov	r0, r9
   2e820:	f000 fafa 	bl	2ee18 <npgps_pointer_to_block>
		__ASSERT(i != -1, "unexpected pointer value %p", pred);
   2e824:	1c42      	adds	r2, r0, #1
		i = npgps_pointer_to_block((uint8_t *)pred);
   2e826:	4607      	mov	r7, r0
		__ASSERT(i != -1, "unexpected pointer value %p", pred);
   2e828:	d10a      	bne.n	2e840 <nrf_cloud_pgps_init+0x2bc>
   2e82a:	4651      	mov	r1, sl
   2e82c:	4658      	mov	r0, fp
   2e82e:	f44f 7298 	mov.w	r2, #304	; 0x130
   2e832:	f00e f903 	bl	3ca3c <assert_print>
   2e836:	f44f 7198 	mov.w	r1, #304	; 0x130
   2e83a:	4650      	mov	r0, sl
   2e83c:	f00e f8f7 	bl	3ca2e <assert_post_action>
		npgps_mark_block_used(i, true);
   2e840:	2101      	movs	r1, #1
   2e842:	4638      	mov	r0, r7
   2e844:	f000 fa4c 	bl	2ece0 <npgps_mark_block_used>
	for (pnum = 0; pnum < count; pnum++) {
   2e848:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2e84a:	3501      	adds	r5, #1
   2e84c:	4498      	add	r8, r3
   2e84e:	e73d      	b.n	2e6cc <nrf_cloud_pgps_init+0x148>
	uint16_t count = 0;
   2e850:	4626      	mov	r6, r4
	uint16_t num_valid = 0;
   2e852:	4625      	mov	r5, r4
	uint16_t period_min  = 0;
   2e854:	9405      	str	r4, [sp, #20]
   2e856:	e760      	b.n	2e71a <nrf_cloud_pgps_init+0x196>
   2e858:	00049c31 	.word	0x00049c31
   2e85c:	2001a114 	.word	0x2001a114
   2e860:	2001a11c 	.word	0x2001a11c
   2e864:	2001a150 	.word	0x2001a150
   2e868:	2001d2bf 	.word	0x2001d2bf
   2e86c:	2001a128 	.word	0x2001a128
   2e870:	2001a124 	.word	0x2001a124
   2e874:	20015810 	.word	0x20015810
   2e878:	0002dca1 	.word	0x0002dca1
   2e87c:	00049c64 	.word	0x00049c64
   2e880:	00049c8f 	.word	0x00049c8f
   2e884:	00049d42 	.word	0x00049d42
   2e888:	00049daa 	.word	0x00049daa
   2e88c:	00049dd4 	.word	0x00049dd4
   2e890:	00049cc8 	.word	0x00049cc8
   2e894:	00049d14 	.word	0x00049d14
   2e898:	00049d61 	.word	0x00049d61
   2e89c:	000498c8 	.word	0x000498c8
   2e8a0:	00043ff2 	.word	0x00043ff2
		} else if (err >= 0) {
   2e8a4:	2800      	cmp	r0, #0
   2e8a6:	db46      	blt.n	2e936 <nrf_cloud_pgps_init+0x3b2>
			LOG_INF("Found valid prediction, day:%u, time:%u",
   2e8a8:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2e8aa:	2149      	movs	r1, #73	; 0x49
   2e8ac:	f8d2 3005 	ldr.w	r3, [r2, #5]
   2e8b0:	4822      	ldr	r0, [pc, #136]	; (2e93c <nrf_cloud_pgps_init+0x3b8>)
   2e8b2:	f8b2 2003 	ldrh.w	r2, [r2, #3]
   2e8b6:	f00e f8fb 	bl	3cab0 <z_log_minimal_printk>
	} else if (num_valid < count) {
   2e8ba:	42ae      	cmp	r6, r5
   2e8bc:	d920      	bls.n	2e900 <nrf_cloud_pgps_init+0x37c>
		LOG_INF("Incomplete P-GPS data; "
   2e8be:	1b76      	subs	r6, r6, r5
   2e8c0:	4632      	mov	r2, r6
   2e8c2:	2149      	movs	r1, #73	; 0x49
   2e8c4:	481e      	ldr	r0, [pc, #120]	; (2e940 <nrf_cloud_pgps_init+0x3bc>)
   2e8c6:	f00e f8f3 	bl	3cab0 <z_log_minimal_printk>
	int64_t psec = index.start_sec + (uint32_t)pnum * index.period_sec;
   2e8ca:	4b1e      	ldr	r3, [pc, #120]	; (2e944 <nrf_cloud_pgps_init+0x3c0>)
		npgps_gps_sec_to_day_time(psec, gps_day, gps_time_of_day);
   2e8cc:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
	int64_t psec = index.start_sec + (uint32_t)pnum * index.period_sec;
   2e8d0:	8d5c      	ldrh	r4, [r3, #42]	; 0x2a
   2e8d2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
		npgps_gps_sec_to_day_time(psec, gps_day, gps_time_of_day);
   2e8d6:	ab0f      	add	r3, sp, #60	; 0x3c
   2e8d8:	fbe4 0105 	umlal	r0, r1, r4, r5
   2e8dc:	f000 f91a 	bl	2eb14 <npgps_gps_sec_to_day_time>
		request.gps_day = gps_day;
   2e8e0:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
		err = pgps_request(&request);
   2e8e4:	a813      	add	r0, sp, #76	; 0x4c
		request.gps_day = gps_day;
   2e8e6:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
		request.gps_time_of_day = gps_time_of_day;
   2e8ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		request.prediction_count = count - num_valid;
   2e8ec:	f8ad 604c 	strh.w	r6, [sp, #76]	; 0x4c
		request.gps_time_of_day = gps_time_of_day;
   2e8f0:	f8cd 3052 	str.w	r3, [sp, #82]	; 0x52
		request.prediction_period_min = period_min;
   2e8f4:	9b05      	ldr	r3, [sp, #20]
   2e8f6:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
		err = pgps_request(&request);
   2e8fa:	f7fe ff33 	bl	2d764 <pgps_request>
   2e8fe:	e729      	b.n	2e754 <nrf_cloud_pgps_init+0x1d0>
	} else if ((count - (pnum + 1)) < REPLACEMENT_THRESHOLD) {
   2e900:	3701      	adds	r7, #1
   2e902:	1bf6      	subs	r6, r6, r7
   2e904:	2e03      	cmp	r6, #3
   2e906:	dc02      	bgt.n	2e90e <nrf_cloud_pgps_init+0x38a>
		err = nrf_cloud_pgps_preemptive_updates();
   2e908:	f7ff fbe0 	bl	2e0cc <nrf_cloud_pgps_preemptive_updates>
   2e90c:	e722      	b.n	2e754 <nrf_cloud_pgps_init+0x1d0>
		state = PGPS_READY;
   2e90e:	2206      	movs	r2, #6
   2e910:	4b0d      	ldr	r3, [pc, #52]	; (2e948 <nrf_cloud_pgps_init+0x3c4>)
		LOG_INF("P-GPS data is up to date.");
   2e912:	2149      	movs	r1, #73	; 0x49
   2e914:	480d      	ldr	r0, [pc, #52]	; (2e94c <nrf_cloud_pgps_init+0x3c8>)
		state = PGPS_READY;
   2e916:	701a      	strb	r2, [r3, #0]
		LOG_INF("P-GPS data is up to date.");
   2e918:	f00e f8ca 	bl	3cab0 <z_log_minimal_printk>
		if (evt_handler) {
   2e91c:	4b0c      	ldr	r3, [pc, #48]	; (2e950 <nrf_cloud_pgps_init+0x3cc>)
   2e91e:	681b      	ldr	r3, [r3, #0]
   2e920:	2b00      	cmp	r3, #0
   2e922:	f43f ae52 	beq.w	2e5ca <nrf_cloud_pgps_init+0x46>
			evt.type = PGPS_EVT_READY;
   2e926:	2204      	movs	r2, #4
   2e928:	f88d 2044 	strb.w	r2, [sp, #68]	; 0x44
			evt.prediction = found_prediction;
   2e92c:	9a10      	ldr	r2, [sp, #64]	; 0x40
			evt_handler(&evt);
   2e92e:	a811      	add	r0, sp, #68	; 0x44
			evt.prediction = found_prediction;
   2e930:	9212      	str	r2, [sp, #72]	; 0x48
			evt_handler(&evt);
   2e932:	4798      	blx	r3
   2e934:	e64a      	b.n	2e5cc <nrf_cloud_pgps_init+0x48>
	int pnum = -1;
   2e936:	f04f 37ff 	mov.w	r7, #4294967295
   2e93a:	e7be      	b.n	2e8ba <nrf_cloud_pgps_init+0x336>
   2e93c:	00049e08 	.word	0x00049e08
   2e940:	00049e35 	.word	0x00049e35
   2e944:	20015810 	.word	0x20015810
   2e948:	2001d2bf 	.word	0x2001d2bf
   2e94c:	00049e78 	.word	0x00049e78
   2e950:	2001a114 	.word	0x2001a114

0002e954 <settings_set>:
SETTINGS_STATIC_HANDLER_DEFINE(nrf_cloud_pgps, SETTINGS_NAME, NULL, settings_set,
			       NULL, NULL);

static int settings_set(const char *key, size_t len_rd,
			settings_read_cb read_cb, void *cb_arg)
{
   2e954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e956:	460c      	mov	r4, r1
   2e958:	4616      	mov	r6, r2
   2e95a:	461f      	mov	r7, r3
	if (!key) {
   2e95c:	4605      	mov	r5, r0
   2e95e:	2800      	cmp	r0, #0
   2e960:	d039      	beq.n	2e9d6 <settings_set+0x82>
		return -EINVAL;
	}

	LOG_DBG("Settings key:%s, size:%d", log_strdup(key), len_rd);

	if (!strncmp(key, SETTINGS_KEY_PGPS_HEADER,
   2e962:	481e      	ldr	r0, [pc, #120]	; (2e9dc <settings_set+0x88>)
   2e964:	f7ee fc6d 	bl	1d242 <strlen>
   2e968:	491c      	ldr	r1, [pc, #112]	; (2e9dc <settings_set+0x88>)
   2e96a:	4602      	mov	r2, r0
   2e96c:	4628      	mov	r0, r5
   2e96e:	f012 ff0c 	bl	4178a <strncmp>
   2e972:	b1a0      	cbz	r0, 2e99e <settings_set+0x4a>
				saved_header.prediction_count, saved_header.prediction_period_min,
				saved_header.gps_day, saved_header.gps_time_of_day);
			return 0;
		}
	}
	if (!strncmp(key, SETTINGS_KEY_LOCATION,
   2e974:	481a      	ldr	r0, [pc, #104]	; (2e9e0 <settings_set+0x8c>)
   2e976:	f7ee fc64 	bl	1d242 <strlen>
   2e97a:	4919      	ldr	r1, [pc, #100]	; (2e9e0 <settings_set+0x8c>)
   2e97c:	4602      	mov	r2, r0
   2e97e:	4628      	mov	r0, r5
   2e980:	f012 ff03 	bl	4178a <strncmp>
   2e984:	b1a8      	cbz	r0, 2e9b2 <settings_set+0x5e>
				saved_location.latitude, saved_location.longitude,
				(int32_t)saved_location.gps_sec);
			return 0;
		}
	}
	if (!strncmp(key, SETTINGS_KEY_LEAP_SEC,
   2e986:	4817      	ldr	r0, [pc, #92]	; (2e9e4 <settings_set+0x90>)
   2e988:	f7ee fc5b 	bl	1d242 <strlen>
   2e98c:	4915      	ldr	r1, [pc, #84]	; (2e9e4 <settings_set+0x90>)
   2e98e:	4602      	mov	r2, r0
   2e990:	4628      	mov	r0, r5
   2e992:	f012 fefa 	bl	4178a <strncmp>
   2e996:	b1a8      	cbz	r0, 2e9c4 <settings_set+0x70>
			LOG_DBG("Read gps to utc leap seconds offset:%d",
				gps_leap_seconds);
			return 0;
		}
	}
	return -ENOTSUP;
   2e998:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2e99c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		     strlen(SETTINGS_KEY_PGPS_HEADER)) &&
   2e99e:	2c10      	cmp	r4, #16
   2e9a0:	d1e8      	bne.n	2e974 <settings_set+0x20>
		if (read_cb(cb_arg, (void *)&saved_header, len_rd) == len_rd) {
   2e9a2:	4622      	mov	r2, r4
   2e9a4:	4638      	mov	r0, r7
   2e9a6:	4910      	ldr	r1, [pc, #64]	; (2e9e8 <settings_set+0x94>)
   2e9a8:	47b0      	blx	r6
   2e9aa:	2810      	cmp	r0, #16
   2e9ac:	d1e2      	bne.n	2e974 <settings_set+0x20>
			return 0;
   2e9ae:	2000      	movs	r0, #0
   2e9b0:	e7f4      	b.n	2e99c <settings_set+0x48>
		     strlen(SETTINGS_KEY_LOCATION)) &&
   2e9b2:	2c10      	cmp	r4, #16
   2e9b4:	d1e7      	bne.n	2e986 <settings_set+0x32>
		if (read_cb(cb_arg, (void *)&saved_location, len_rd) == len_rd) {
   2e9b6:	4622      	mov	r2, r4
   2e9b8:	4638      	mov	r0, r7
   2e9ba:	490c      	ldr	r1, [pc, #48]	; (2e9ec <settings_set+0x98>)
   2e9bc:	47b0      	blx	r6
   2e9be:	2810      	cmp	r0, #16
   2e9c0:	d1e1      	bne.n	2e986 <settings_set+0x32>
   2e9c2:	e7f4      	b.n	2e9ae <settings_set+0x5a>
		     strlen(SETTINGS_KEY_LEAP_SEC)) &&
   2e9c4:	2c04      	cmp	r4, #4
   2e9c6:	d1e7      	bne.n	2e998 <settings_set+0x44>
		if (read_cb(cb_arg, (void *)&gps_leap_seconds, len_rd) == len_rd) {
   2e9c8:	4622      	mov	r2, r4
   2e9ca:	4638      	mov	r0, r7
   2e9cc:	4908      	ldr	r1, [pc, #32]	; (2e9f0 <settings_set+0x9c>)
   2e9ce:	47b0      	blx	r6
   2e9d0:	2804      	cmp	r0, #4
   2e9d2:	d0ec      	beq.n	2e9ae <settings_set+0x5a>
   2e9d4:	e7e0      	b.n	2e998 <settings_set+0x44>
		return -EINVAL;
   2e9d6:	f06f 0015 	mvn.w	r0, #21
   2e9da:	e7df      	b.n	2e99c <settings_set+0x48>
   2e9dc:	00049f2f 	.word	0x00049f2f
   2e9e0:	00049f84 	.word	0x00049f84
   2e9e4:	00049f9c 	.word	0x00049f9c
   2e9e8:	2001d2c0 	.word	0x2001d2c0
   2e9ec:	20017350 	.word	0x20017350
   2e9f0:	200146c4 	.word	0x200146c4

0002e9f4 <download_client_callback>:
	LOG_DBG("pgps_active UNLOCKED");
	return err;
}

static int download_client_callback(const struct download_client_evt *event)
{
   2e9f4:	b538      	push	{r3, r4, r5, lr}
	int err = 0;

	if (event == NULL) {
   2e9f6:	2800      	cmp	r0, #0
   2e9f8:	d037      	beq.n	2ea6a <download_client_callback+0x76>
		return -EINVAL;
	}

	switch (event->id) {
   2e9fa:	7803      	ldrb	r3, [r0, #0]
   2e9fc:	2b01      	cmp	r3, #1
   2e9fe:	d01f      	beq.n	2ea40 <download_client_callback+0x4c>
   2ea00:	2b02      	cmp	r3, #2
   2ea02:	d009      	beq.n	2ea18 <download_client_callback+0x24>
   2ea04:	bb63      	cbnz	r3, 2ea60 <download_client_callback+0x6c>
	case DOWNLOAD_CLIENT_EVT_FRAGMENT:
		err = buffer_handler((uint8_t *)event->fragment.buf,
   2ea06:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   2ea0a:	4b19      	ldr	r3, [pc, #100]	; (2ea70 <download_client_callback+0x7c>)
   2ea0c:	681b      	ldr	r3, [r3, #0]
   2ea0e:	4798      	blx	r3
				     event->fragment.len);
		if (!err) {
   2ea10:	4604      	mov	r4, r0
   2ea12:	b930      	cbnz	r0, 2ea22 <download_client_callback+0x2e>
		err = ret;
	}
	k_sem_give(&pgps_active);
	LOG_DBG("pgps_active UNLOCKED");
	return err;
}
   2ea14:	4620      	mov	r0, r4
   2ea16:	bd38      	pop	{r3, r4, r5, pc}
		LOG_INF("Download client done");
   2ea18:	2149      	movs	r1, #73	; 0x49
   2ea1a:	4816      	ldr	r0, [pc, #88]	; (2ea74 <download_client_callback+0x80>)
   2ea1c:	f00e f848 	bl	3cab0 <z_log_minimal_printk>
	int err = 0;
   2ea20:	2400      	movs	r4, #0
	int ret = download_client_disconnect(&dlc);
   2ea22:	4815      	ldr	r0, [pc, #84]	; (2ea78 <download_client_callback+0x84>)
   2ea24:	f001 fbc6 	bl	301b4 <download_client_disconnect>
	if (ret) {
   2ea28:	4605      	mov	r5, r0
   2ea2a:	b128      	cbz	r0, 2ea38 <download_client_callback+0x44>
		LOG_ERR("Error disconnecting from "
   2ea2c:	4602      	mov	r2, r0
   2ea2e:	2145      	movs	r1, #69	; 0x45
   2ea30:	4812      	ldr	r0, [pc, #72]	; (2ea7c <download_client_callback+0x88>)
   2ea32:	f00e f83d 	bl	3cab0 <z_log_minimal_printk>
   2ea36:	462c      	mov	r4, r5
	z_impl_k_sem_give(sem);
   2ea38:	4811      	ldr	r0, [pc, #68]	; (2ea80 <download_client_callback+0x8c>)
   2ea3a:	f008 f98d 	bl	36d58 <z_impl_k_sem_give>
}
   2ea3e:	e7e9      	b.n	2ea14 <download_client_callback+0x20>
		if ((socket_retries_left) && ((event->error == -ENOTCONN) ||
   2ea40:	4c10      	ldr	r4, [pc, #64]	; (2ea84 <download_client_callback+0x90>)
   2ea42:	6822      	ldr	r2, [r4, #0]
   2ea44:	b172      	cbz	r2, 2ea64 <download_client_callback+0x70>
   2ea46:	6843      	ldr	r3, [r0, #4]
   2ea48:	f113 0f80 	cmn.w	r3, #128	; 0x80
   2ea4c:	d001      	beq.n	2ea52 <download_client_callback+0x5e>
   2ea4e:	3368      	adds	r3, #104	; 0x68
   2ea50:	d108      	bne.n	2ea64 <download_client_callback+0x70>
			LOG_WRN("Download socket error. %d retries left...",
   2ea52:	2157      	movs	r1, #87	; 0x57
   2ea54:	480c      	ldr	r0, [pc, #48]	; (2ea88 <download_client_callback+0x94>)
   2ea56:	f00e f82b 	bl	3cab0 <z_log_minimal_printk>
			socket_retries_left--;
   2ea5a:	6823      	ldr	r3, [r4, #0]
   2ea5c:	3b01      	subs	r3, #1
   2ea5e:	6023      	str	r3, [r4, #0]
	switch (event->id) {
   2ea60:	2400      	movs	r4, #0
   2ea62:	e7d7      	b.n	2ea14 <download_client_callback+0x20>
		err = -EIO;
   2ea64:	f06f 0404 	mvn.w	r4, #4
   2ea68:	e7db      	b.n	2ea22 <download_client_callback+0x2e>
		return -EINVAL;
   2ea6a:	f06f 0415 	mvn.w	r4, #21
   2ea6e:	e7d1      	b.n	2ea14 <download_client_callback+0x20>
   2ea70:	2001a158 	.word	0x2001a158
   2ea74:	00049ea6 	.word	0x00049ea6
   2ea78:	200158f8 	.word	0x200158f8
   2ea7c:	00049eef 	.word	0x00049eef
   2ea80:	200150a8 	.word	0x200150a8
   2ea84:	2001a194 	.word	0x2001a194
   2ea88:	00049ec0 	.word	0x00049ec0

0002ea8c <npgps_save_header>:
{
   2ea8c:	4601      	mov	r1, r0
	ret = settings_save_one(SETTINGS_FULL_PGPS_HEADER, header, sizeof(*header));
   2ea8e:	2210      	movs	r2, #16
   2ea90:	4801      	ldr	r0, [pc, #4]	; (2ea98 <npgps_save_header+0xc>)
   2ea92:	f7f3 ba23 	b.w	21edc <settings_save_one>
   2ea96:	bf00      	nop
   2ea98:	00049f20 	.word	0x00049f20

0002ea9c <npgps_get_saved_header>:
}
   2ea9c:	4800      	ldr	r0, [pc, #0]	; (2eaa0 <npgps_get_saved_header+0x4>)
   2ea9e:	4770      	bx	lr
   2eaa0:	2001d2c0 	.word	0x2001d2c0

0002eaa4 <npgps_get_saved_location>:
}
   2eaa4:	4800      	ldr	r0, [pc, #0]	; (2eaa8 <npgps_get_saved_location+0x4>)
   2eaa6:	4770      	bx	lr
   2eaa8:	20017350 	.word	0x20017350

0002eaac <npgps_settings_init>:
{
   2eaac:	b510      	push	{r4, lr}
	ret = settings_subsys_init();
   2eaae:	f7f3 fb61 	bl	22174 <settings_subsys_init>
	if (ret) {
   2eab2:	4604      	mov	r4, r0
   2eab4:	b130      	cbz	r0, 2eac4 <npgps_settings_init+0x18>
		LOG_ERR("Settings init failed:%d", ret);
   2eab6:	2145      	movs	r1, #69	; 0x45
   2eab8:	4602      	mov	r2, r0
   2eaba:	4807      	ldr	r0, [pc, #28]	; (2ead8 <npgps_settings_init+0x2c>)
		LOG_ERR("Cannot load settings:%d", ret);
   2eabc:	f00d fff8 	bl	3cab0 <z_log_minimal_printk>
}
   2eac0:	4620      	mov	r0, r4
   2eac2:	bd10      	pop	{r4, pc}
	ret = settings_load_subtree(settings_handler_nrf_cloud_pgps.name);
   2eac4:	4805      	ldr	r0, [pc, #20]	; (2eadc <npgps_settings_init+0x30>)
   2eac6:	f7f3 fa43 	bl	21f50 <settings_load_subtree>
	if (ret) {
   2eaca:	4604      	mov	r4, r0
   2eacc:	2800      	cmp	r0, #0
   2eace:	d0f7      	beq.n	2eac0 <npgps_settings_init+0x14>
		LOG_ERR("Cannot load settings:%d", ret);
   2ead0:	4602      	mov	r2, r0
   2ead2:	2145      	movs	r1, #69	; 0x45
   2ead4:	4802      	ldr	r0, [pc, #8]	; (2eae0 <npgps_settings_init+0x34>)
   2ead6:	e7f1      	b.n	2eabc <npgps_settings_init+0x10>
   2ead8:	00049f3b 	.word	0x00049f3b
   2eadc:	00049e97 	.word	0x00049e97
   2eae0:	00049f58 	.word	0x00049f58

0002eae4 <nrf_cloud_pgps_set_leap_seconds>:
	if (gps_leap_seconds != leap_seconds) {
   2eae4:	4904      	ldr	r1, [pc, #16]	; (2eaf8 <nrf_cloud_pgps_set_leap_seconds+0x14>)
   2eae6:	680b      	ldr	r3, [r1, #0]
   2eae8:	4283      	cmp	r3, r0
   2eaea:	d004      	beq.n	2eaf6 <nrf_cloud_pgps_set_leap_seconds+0x12>
		gps_leap_seconds = leap_seconds;
   2eaec:	6008      	str	r0, [r1, #0]
	ret = settings_save_one(SETTINGS_FULL_LEAP_SEC,
   2eaee:	2204      	movs	r2, #4
   2eaf0:	4802      	ldr	r0, [pc, #8]	; (2eafc <nrf_cloud_pgps_set_leap_seconds+0x18>)
   2eaf2:	f7f3 b9f3 	b.w	21edc <settings_save_one>
}
   2eaf6:	4770      	bx	lr
   2eaf8:	200146c4 	.word	0x200146c4
   2eafc:	00049f8d 	.word	0x00049f8d

0002eb00 <npgps_gps_day_time_to_sec>:
	int64_t gps_sec = (int64_t)gps_day * SEC_PER_DAY + gps_time_of_day;
   2eb00:	4b03      	ldr	r3, [pc, #12]	; (2eb10 <npgps_gps_day_time_to_sec+0x10>)
   2eb02:	fba0 0303 	umull	r0, r3, r0, r3
   2eb06:	1840      	adds	r0, r0, r1
}
   2eb08:	f143 0100 	adc.w	r1, r3, #0
   2eb0c:	4770      	bx	lr
   2eb0e:	bf00      	nop
   2eb10:	00015180 	.word	0x00015180

0002eb14 <npgps_gps_sec_to_day_time>:
{
   2eb14:	b570      	push	{r4, r5, r6, lr}
   2eb16:	4616      	mov	r6, r2
   2eb18:	461d      	mov	r5, r3
	day = (uint16_t)(gps_sec / SEC_PER_DAY);
   2eb1a:	4a07      	ldr	r2, [pc, #28]	; (2eb38 <npgps_gps_sec_to_day_time+0x24>)
   2eb1c:	2300      	movs	r3, #0
{
   2eb1e:	4604      	mov	r4, r0
	day = (uint16_t)(gps_sec / SEC_PER_DAY);
   2eb20:	f7ee f992 	bl	1ce48 <__aeabi_ldivmod>
   2eb24:	b280      	uxth	r0, r0
	if (gps_day) {
   2eb26:	b106      	cbz	r6, 2eb2a <npgps_gps_sec_to_day_time+0x16>
		*gps_day = day;
   2eb28:	8030      	strh	r0, [r6, #0]
	if (gps_time_of_day) {
   2eb2a:	b11d      	cbz	r5, 2eb34 <npgps_gps_sec_to_day_time+0x20>
	time = (uint32_t)(gps_sec - (day * SEC_PER_DAY));
   2eb2c:	4b02      	ldr	r3, [pc, #8]	; (2eb38 <npgps_gps_sec_to_day_time+0x24>)
   2eb2e:	fb03 4410 	mls	r4, r3, r0, r4
		*gps_time_of_day = time;
   2eb32:	602c      	str	r4, [r5, #0]
}
   2eb34:	bd70      	pop	{r4, r5, r6, pc}
   2eb36:	bf00      	nop
   2eb38:	00015180 	.word	0x00015180

0002eb3c <npgps_get_shifted_time>:
{
   2eb3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2eb40:	4606      	mov	r6, r0
	err = date_time_now(&now);
   2eb42:	4668      	mov	r0, sp
{
   2eb44:	460f      	mov	r7, r1
   2eb46:	4690      	mov	r8, r2
   2eb48:	461c      	mov	r4, r3
	err = date_time_now(&now);
   2eb4a:	f7f9 fffb 	bl	28b44 <date_time_now>
	if (!err) {
   2eb4e:	4605      	mov	r5, r0
   2eb50:	bb08      	cbnz	r0, 2eb96 <npgps_get_shifted_time+0x5a>
		now += shift * MSEC_PER_SEC;
   2eb52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   2eb56:	4344      	muls	r4, r0
   2eb58:	9800      	ldr	r0, [sp, #0]
	utc_sec = utc / MSEC_PER_SEC;
   2eb5a:	9901      	ldr	r1, [sp, #4]
		now += shift * MSEC_PER_SEC;
   2eb5c:	1820      	adds	r0, r4, r0
	utc_sec = utc / MSEC_PER_SEC;
   2eb5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2eb62:	f04f 0300 	mov.w	r3, #0
   2eb66:	f141 0100 	adc.w	r1, r1, #0
   2eb6a:	f7ee f96d 	bl	1ce48 <__aeabi_ldivmod>
	gps_sec = (utc_sec - GPS_TO_UNIX_UTC_OFFSET_SECONDS) + gps_leap_seconds;
   2eb6e:	4b0c      	ldr	r3, [pc, #48]	; (2eba0 <npgps_get_shifted_time+0x64>)
   2eb70:	4c0c      	ldr	r4, [pc, #48]	; (2eba4 <npgps_get_shifted_time+0x68>)
   2eb72:	681b      	ldr	r3, [r3, #0]
   2eb74:	1904      	adds	r4, r0, r4
   2eb76:	f161 0100 	sbc.w	r1, r1, #0
   2eb7a:	18e0      	adds	r0, r4, r3
   2eb7c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
		npgps_gps_sec_to_day_time(now, gps_day, gps_time_of_day);
   2eb80:	463a      	mov	r2, r7
   2eb82:	4643      	mov	r3, r8
		now = utc_to_gps_sec(now, NULL);
   2eb84:	e9cd 0100 	strd	r0, r1, [sp]
		npgps_gps_sec_to_day_time(now, gps_day, gps_time_of_day);
   2eb88:	f7ff ffc4 	bl	2eb14 <npgps_gps_sec_to_day_time>
		if (gps_sec != NULL) {
   2eb8c:	b11e      	cbz	r6, 2eb96 <npgps_get_shifted_time+0x5a>
			*gps_sec = now;
   2eb8e:	e9dd 2300 	ldrd	r2, r3, [sp]
   2eb92:	e9c6 2300 	strd	r2, r3, [r6]
}
   2eb96:	4628      	mov	r0, r5
   2eb98:	b002      	add	sp, #8
   2eb9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2eb9e:	bf00      	nop
   2eba0:	200146c4 	.word	0x200146c4
   2eba4:	ed2ac280 	.word	0xed2ac280

0002eba8 <nrf_cloud_pgps_set_location_normalized>:
	if (npgps_get_time(&sec, NULL, NULL)) {
   2eba8:	2200      	movs	r2, #0
{
   2ebaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2ebac:	4605      	mov	r5, r0
   2ebae:	460e      	mov	r6, r1
	if (npgps_get_time(&sec, NULL, NULL)) {
   2ebb0:	4668      	mov	r0, sp
   2ebb2:	4611      	mov	r1, r2
   2ebb4:	f010 fda9 	bl	3f70a <npgps_get_time>
   2ebb8:	4c18      	ldr	r4, [pc, #96]	; (2ec1c <nrf_cloud_pgps_set_location_normalized+0x74>)
   2ebba:	b118      	cbz	r0, 2ebc4 <nrf_cloud_pgps_set_location_normalized+0x1c>
		sec = saved_location.gps_sec; /* could not get time; use prev */
   2ebbc:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   2ebc0:	e9cd 2300 	strd	r2, r3, [sp]
	if ((abs(latitude - saved_location.latitude) > SAVED_LOCATION_LAT_DELTA) ||
   2ebc4:	6820      	ldr	r0, [r4, #0]
   2ebc6:	1a28      	subs	r0, r5, r0
   2ebc8:	f012 fbc6 	bl	41358 <abs>
   2ebcc:	f242 4368 	movw	r3, #9320	; 0x2468
   2ebd0:	4298      	cmp	r0, r3
   2ebd2:	dd0c      	ble.n	2ebee <nrf_cloud_pgps_set_location_normalized+0x46>
		saved_location.gps_sec = sec;
   2ebd4:	e9dd 2300 	ldrd	r2, r3, [sp]
	ret = settings_save_one(SETTINGS_FULL_LOCATION,
   2ebd8:	4910      	ldr	r1, [pc, #64]	; (2ec1c <nrf_cloud_pgps_set_location_normalized+0x74>)
		saved_location.gps_sec = sec;
   2ebda:	e9c4 2302 	strd	r2, r3, [r4, #8]
	ret = settings_save_one(SETTINGS_FULL_LOCATION,
   2ebde:	4810      	ldr	r0, [pc, #64]	; (2ec20 <nrf_cloud_pgps_set_location_normalized+0x78>)
   2ebe0:	2210      	movs	r2, #16
		saved_location.longitude = longitude;
   2ebe2:	e9c4 5600 	strd	r5, r6, [r4]
	ret = settings_save_one(SETTINGS_FULL_LOCATION,
   2ebe6:	f7f3 f979 	bl	21edc <settings_save_one>
}
   2ebea:	b002      	add	sp, #8
   2ebec:	bd70      	pop	{r4, r5, r6, pc}
	    (abs(longitude - saved_location.longitude) > SAVED_LOCATION_LNG_DELTA) ||
   2ebee:	6860      	ldr	r0, [r4, #4]
   2ebf0:	1a30      	subs	r0, r6, r0
   2ebf2:	f012 fbb1 	bl	41358 <abs>
	if ((abs(latitude - saved_location.latitude) > SAVED_LOCATION_LAT_DELTA) ||
   2ebf6:	f241 2334 	movw	r3, #4660	; 0x1234
   2ebfa:	4298      	cmp	r0, r3
   2ebfc:	dcea      	bgt.n	2ebd4 <nrf_cloud_pgps_set_location_normalized+0x2c>
	    ((sec - saved_location.gps_sec) > SAVED_LOCATION_MIN_DELTA_SEC)) {
   2ebfe:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
   2ec02:	9b00      	ldr	r3, [sp, #0]
   2ec04:	9a01      	ldr	r2, [sp, #4]
   2ec06:	1a5b      	subs	r3, r3, r1
	    (abs(longitude - saved_location.longitude) > SAVED_LOCATION_LNG_DELTA) ||
   2ec08:	f64a 01c1 	movw	r1, #43201	; 0xa8c1
	    ((sec - saved_location.gps_sec) > SAVED_LOCATION_MIN_DELTA_SEC)) {
   2ec0c:	eb62 0200 	sbc.w	r2, r2, r0
	    (abs(longitude - saved_location.longitude) > SAVED_LOCATION_LNG_DELTA) ||
   2ec10:	428b      	cmp	r3, r1
   2ec12:	f172 0300 	sbcs.w	r3, r2, #0
   2ec16:	dadd      	bge.n	2ebd4 <nrf_cloud_pgps_set_location_normalized+0x2c>
   2ec18:	e7e7      	b.n	2ebea <nrf_cloud_pgps_set_location_normalized+0x42>
   2ec1a:	bf00      	nop
   2ec1c:	20017350 	.word	0x20017350
   2ec20:	00049f75 	.word	0x00049f75

0002ec24 <ngps_block_pool_init>:
	block_pool_base = (uint8_t *)base_address;
   2ec24:	4b02      	ldr	r3, [pc, #8]	; (2ec30 <ngps_block_pool_init+0xc>)
   2ec26:	6018      	str	r0, [r3, #0]
	num_blocks = num;
   2ec28:	4b02      	ldr	r3, [pc, #8]	; (2ec34 <ngps_block_pool_init+0x10>)
}
   2ec2a:	2000      	movs	r0, #0
	num_blocks = num;
   2ec2c:	6019      	str	r1, [r3, #0]
}
   2ec2e:	4770      	bx	lr
   2ec30:	2001a154 	.word	0x2001a154
   2ec34:	2001a15c 	.word	0x2001a15c

0002ec38 <npgps_alloc_block>:
	if (pool.first_free < 0) {
   2ec38:	4a0c      	ldr	r2, [pc, #48]	; (2ec6c <npgps_alloc_block+0x34>)
{
   2ec3a:	b510      	push	{r4, lr}
	if (pool.first_free < 0) {
   2ec3c:	6810      	ldr	r0, [r2, #0]
   2ec3e:	2800      	cmp	r0, #0
   2ec40:	db11      	blt.n	2ec66 <npgps_alloc_block+0x2e>
	pool.block_used[pool.first_free] = true;
   2ec42:	2101      	movs	r1, #1
   2ec44:	1813      	adds	r3, r2, r0
   2ec46:	7219      	strb	r1, [r3, #8]
	pool.first_free = (pool.first_free + 1) % num_blocks;
   2ec48:	1843      	adds	r3, r0, r1
   2ec4a:	4909      	ldr	r1, [pc, #36]	; (2ec70 <npgps_alloc_block+0x38>)
   2ec4c:	6809      	ldr	r1, [r1, #0]
   2ec4e:	fb93 f4f1 	sdiv	r4, r3, r1
   2ec52:	fb01 3314 	mls	r3, r1, r4, r3
   2ec56:	6013      	str	r3, [r2, #0]
	if (pool.block_used[pool.first_free]) {
   2ec58:	4413      	add	r3, r2
   2ec5a:	7a1b      	ldrb	r3, [r3, #8]
   2ec5c:	b113      	cbz	r3, 2ec64 <npgps_alloc_block+0x2c>
		pool.first_free = NO_BLOCK;
   2ec5e:	f04f 33ff 	mov.w	r3, #4294967295
   2ec62:	6013      	str	r3, [r2, #0]
}
   2ec64:	bd10      	pop	{r4, pc}
		return NO_BLOCK;
   2ec66:	f04f 30ff 	mov.w	r0, #4294967295
   2ec6a:	e7fb      	b.n	2ec64 <npgps_alloc_block+0x2c>
   2ec6c:	2001a160 	.word	0x2001a160
   2ec70:	2001a15c 	.word	0x2001a15c

0002ec74 <npgps_free_block>:
	if (pool.first_free < 0) {
   2ec74:	4b04      	ldr	r3, [pc, #16]	; (2ec88 <npgps_free_block+0x14>)
   2ec76:	681a      	ldr	r2, [r3, #0]
   2ec78:	2a00      	cmp	r2, #0
	pool.block_used[block] = false;
   2ec7a:	f04f 0200 	mov.w	r2, #0
		pool.first_free = block;
   2ec7e:	bfb8      	it	lt
   2ec80:	6018      	strlt	r0, [r3, #0]
	pool.block_used[block] = false;
   2ec82:	4403      	add	r3, r0
   2ec84:	721a      	strb	r2, [r3, #8]
}
   2ec86:	4770      	bx	lr
   2ec88:	2001a160 	.word	0x2001a160

0002ec8c <npgps_get_block_extent>:
	for (i = 0; i < num_blocks; i++) {
   2ec8c:	2200      	movs	r2, #0
   2ec8e:	4b09      	ldr	r3, [pc, #36]	; (2ecb4 <npgps_get_block_extent+0x28>)
{
   2ec90:	b510      	push	{r4, lr}
	for (i = 0; i < num_blocks; i++) {
   2ec92:	6819      	ldr	r1, [r3, #0]
		if (pool.block_used[block]) {
   2ec94:	4c08      	ldr	r4, [pc, #32]	; (2ecb8 <npgps_get_block_extent+0x2c>)
	for (i = 0; i < num_blocks; i++) {
   2ec96:	4291      	cmp	r1, r2
   2ec98:	dc01      	bgt.n	2ec9e <npgps_get_block_extent+0x12>
}
   2ec9a:	4610      	mov	r0, r2
   2ec9c:	bd10      	pop	{r4, pc}
		if (pool.block_used[block]) {
   2ec9e:	1823      	adds	r3, r4, r0
   2eca0:	7a1b      	ldrb	r3, [r3, #8]
   2eca2:	2b00      	cmp	r3, #0
   2eca4:	d1f9      	bne.n	2ec9a <npgps_get_block_extent+0xe>
		block = (block + 1) % num_blocks;
   2eca6:	1c43      	adds	r3, r0, #1
   2eca8:	fb93 f0f1 	sdiv	r0, r3, r1
		len++;
   2ecac:	3201      	adds	r2, #1
		block = (block + 1) % num_blocks;
   2ecae:	fb01 3010 	mls	r0, r1, r0, r3
	for (i = 0; i < num_blocks; i++) {
   2ecb2:	e7f0      	b.n	2ec96 <npgps_get_block_extent+0xa>
   2ecb4:	2001a15c 	.word	0x2001a15c
   2ecb8:	2001a160 	.word	0x2001a160

0002ecbc <npgps_reset_block_pool>:
	pool.first_free = 0;
   2ecbc:	2300      	movs	r3, #0
		pool.block_used[i] = false;
   2ecbe:	4618      	mov	r0, r3
	for (i = 0; i < num_blocks; i++) {
   2ecc0:	4905      	ldr	r1, [pc, #20]	; (2ecd8 <npgps_reset_block_pool+0x1c>)
	pool.first_free = 0;
   2ecc2:	4a06      	ldr	r2, [pc, #24]	; (2ecdc <npgps_reset_block_pool+0x20>)
	for (i = 0; i < num_blocks; i++) {
   2ecc4:	6809      	ldr	r1, [r1, #0]
	pool.first_free = 0;
   2ecc6:	f842 3b08 	str.w	r3, [r2], #8
	for (i = 0; i < num_blocks; i++) {
   2ecca:	428b      	cmp	r3, r1
   2eccc:	db00      	blt.n	2ecd0 <npgps_reset_block_pool+0x14>
}
   2ecce:	4770      	bx	lr
		pool.block_used[i] = false;
   2ecd0:	f802 0b01 	strb.w	r0, [r2], #1
	for (i = 0; i < num_blocks; i++) {
   2ecd4:	3301      	adds	r3, #1
   2ecd6:	e7f8      	b.n	2ecca <npgps_reset_block_pool+0xe>
   2ecd8:	2001a15c 	.word	0x2001a15c
   2ecdc:	2001a160 	.word	0x2001a160

0002ece0 <npgps_mark_block_used>:
{
   2ece0:	b538      	push	{r3, r4, r5, lr}
	__ASSERT((block >= 0) && (block < num_blocks), "block %d out of range", block);
   2ece2:	1e04      	subs	r4, r0, #0
{
   2ece4:	460d      	mov	r5, r1
	__ASSERT((block >= 0) && (block < num_blocks), "block %d out of range", block);
   2ece6:	db03      	blt.n	2ecf0 <npgps_mark_block_used+0x10>
   2ece8:	4b09      	ldr	r3, [pc, #36]	; (2ed10 <npgps_mark_block_used+0x30>)
   2ecea:	681b      	ldr	r3, [r3, #0]
   2ecec:	42a3      	cmp	r3, r4
   2ecee:	dc0a      	bgt.n	2ed06 <npgps_mark_block_used+0x26>
   2ecf0:	4908      	ldr	r1, [pc, #32]	; (2ed14 <npgps_mark_block_used+0x34>)
   2ecf2:	4809      	ldr	r0, [pc, #36]	; (2ed18 <npgps_mark_block_used+0x38>)
   2ecf4:	f240 1253 	movw	r2, #339	; 0x153
   2ecf8:	f00d fea0 	bl	3ca3c <assert_print>
   2ecfc:	f240 1153 	movw	r1, #339	; 0x153
   2ed00:	4804      	ldr	r0, [pc, #16]	; (2ed14 <npgps_mark_block_used+0x34>)
   2ed02:	f00d fe94 	bl	3ca2e <assert_post_action>
	pool.block_used[block] = used;
   2ed06:	4805      	ldr	r0, [pc, #20]	; (2ed1c <npgps_mark_block_used+0x3c>)
   2ed08:	4404      	add	r4, r0
   2ed0a:	7225      	strb	r5, [r4, #8]
}
   2ed0c:	bd38      	pop	{r3, r4, r5, pc}
   2ed0e:	bf00      	nop
   2ed10:	2001a15c 	.word	0x2001a15c
   2ed14:	00049fa9 	.word	0x00049fa9
   2ed18:	00043ff2 	.word	0x00043ff2
   2ed1c:	2001a160 	.word	0x2001a160

0002ed20 <npgps_print_blocks>:
{
   2ed20:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ed22:	b083      	sub	sp, #12
	char map[num_blocks + 1];
   2ed24:	4e16      	ldr	r6, [pc, #88]	; (2ed80 <npgps_print_blocks+0x60>)
{
   2ed26:	af02      	add	r7, sp, #8
	char map[num_blocks + 1];
   2ed28:	6832      	ldr	r2, [r6, #0]
	LOG_INF("num blocks:%u, size:%u, first_free:%d", num_blocks,
   2ed2a:	4d16      	ldr	r5, [pc, #88]	; (2ed84 <npgps_print_blocks+0x64>)
	char map[num_blocks + 1];
   2ed2c:	f102 0308 	add.w	r3, r2, #8
   2ed30:	f023 0307 	bic.w	r3, r3, #7
   2ed34:	ebad 0d03 	sub.w	sp, sp, r3
   2ed38:	466c      	mov	r4, sp
	LOG_INF("num blocks:%u, size:%u, first_free:%d", num_blocks,
   2ed3a:	f855 3b08 	ldr.w	r3, [r5], #8
   2ed3e:	2149      	movs	r1, #73	; 0x49
   2ed40:	f844 3b08 	str.w	r3, [r4], #8
   2ed44:	4810      	ldr	r0, [pc, #64]	; (2ed88 <npgps_print_blocks+0x68>)
   2ed46:	f44f 6300 	mov.w	r3, #2048	; 0x800
   2ed4a:	f00d feb1 	bl	3cab0 <z_log_minimal_printk>
	for (i = 0; i < num_blocks; i++) {
   2ed4e:	2200      	movs	r2, #0
   2ed50:	6833      	ldr	r3, [r6, #0]
   2ed52:	4293      	cmp	r3, r2
   2ed54:	dc0b      	bgt.n	2ed6e <npgps_print_blocks+0x4e>
	map[i] = '\0';
   2ed56:	2200      	movs	r2, #0
   2ed58:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2ed5c:	54e2      	strb	r2, [r4, r3]
	LOG_INF("map:%s", log_strdup(map));
   2ed5e:	2149      	movs	r1, #73	; 0x49
   2ed60:	4622      	mov	r2, r4
   2ed62:	480a      	ldr	r0, [pc, #40]	; (2ed8c <npgps_print_blocks+0x6c>)
   2ed64:	f00d fea4 	bl	3cab0 <z_log_minimal_printk>
}
   2ed68:	3704      	adds	r7, #4
   2ed6a:	46bd      	mov	sp, r7
   2ed6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		map[i] = pool.block_used[i] ? '1' : '0';
   2ed6e:	f815 1b01 	ldrb.w	r1, [r5], #1
   2ed72:	2900      	cmp	r1, #0
   2ed74:	bf14      	ite	ne
   2ed76:	2131      	movne	r1, #49	; 0x31
   2ed78:	2130      	moveq	r1, #48	; 0x30
   2ed7a:	54a1      	strb	r1, [r4, r2]
	for (i = 0; i < num_blocks; i++) {
   2ed7c:	3201      	adds	r2, #1
   2ed7e:	e7e8      	b.n	2ed52 <npgps_print_blocks+0x32>
   2ed80:	2001a15c 	.word	0x2001a15c
   2ed84:	2001a160 	.word	0x2001a160
   2ed88:	00049fed 	.word	0x00049fed
   2ed8c:	0004a018 	.word	0x0004a018

0002ed90 <npgps_num_free>:
	for (int i = 0; i < num_blocks; i++) {
   2ed90:	4b07      	ldr	r3, [pc, #28]	; (2edb0 <npgps_num_free+0x20>)
{
   2ed92:	b510      	push	{r4, lr}
	for (int i = 0; i < num_blocks; i++) {
   2ed94:	6819      	ldr	r1, [r3, #0]
   2ed96:	2300      	movs	r3, #0
	int num = 0;
   2ed98:	4618      	mov	r0, r3
   2ed9a:	4a06      	ldr	r2, [pc, #24]	; (2edb4 <npgps_num_free+0x24>)
	for (int i = 0; i < num_blocks; i++) {
   2ed9c:	4299      	cmp	r1, r3
   2ed9e:	dc00      	bgt.n	2eda2 <npgps_num_free+0x12>
}
   2eda0:	bd10      	pop	{r4, pc}
		if (!pool.block_used[i]) {
   2eda2:	f812 4b01 	ldrb.w	r4, [r2], #1
   2eda6:	b904      	cbnz	r4, 2edaa <npgps_num_free+0x1a>
			num++;
   2eda8:	3001      	adds	r0, #1
	for (int i = 0; i < num_blocks; i++) {
   2edaa:	3301      	adds	r3, #1
   2edac:	e7f6      	b.n	2ed9c <npgps_num_free+0xc>
   2edae:	bf00      	nop
   2edb0:	2001a15c 	.word	0x2001a15c
   2edb4:	2001a168 	.word	0x2001a168

0002edb8 <npgps_find_first_free>:
	pool.first_free = NO_BLOCK;
   2edb8:	f04f 32ff 	mov.w	r2, #4294967295
   2edbc:	4b0a      	ldr	r3, [pc, #40]	; (2ede8 <npgps_find_first_free+0x30>)
{
   2edbe:	b510      	push	{r4, lr}
	pool.first_free = NO_BLOCK;
   2edc0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_blocks; i++) {
   2edc2:	4a0a      	ldr	r2, [pc, #40]	; (2edec <npgps_find_first_free+0x34>)
   2edc4:	6811      	ldr	r1, [r2, #0]
   2edc6:	2200      	movs	r2, #0
   2edc8:	4291      	cmp	r1, r2
   2edca:	dd03      	ble.n	2edd4 <npgps_find_first_free+0x1c>
		if (!pool.block_used[from_block]) {
   2edcc:	181c      	adds	r4, r3, r0
   2edce:	7a24      	ldrb	r4, [r4, #8]
   2edd0:	b914      	cbnz	r4, 2edd8 <npgps_find_first_free+0x20>
			pool.first_free = from_block;
   2edd2:	6018      	str	r0, [r3, #0]
}
   2edd4:	6818      	ldr	r0, [r3, #0]
   2edd6:	bd10      	pop	{r4, pc}
		from_block = (from_block + 1) % num_blocks;
   2edd8:	3001      	adds	r0, #1
   2edda:	fb90 f4f1 	sdiv	r4, r0, r1
	for (i = 0; i < num_blocks; i++) {
   2edde:	3201      	adds	r2, #1
		from_block = (from_block + 1) % num_blocks;
   2ede0:	fb01 0014 	mls	r0, r1, r4, r0
	for (i = 0; i < num_blocks; i++) {
   2ede4:	e7f0      	b.n	2edc8 <npgps_find_first_free+0x10>
   2ede6:	bf00      	nop
   2ede8:	2001a160 	.word	0x2001a160
   2edec:	2001a15c 	.word	0x2001a15c

0002edf0 <npgps_block_to_offset>:
	if ((block < 0) || (block >= num_blocks)) {
   2edf0:	1e02      	subs	r2, r0, #0
{
   2edf2:	b508      	push	{r3, lr}
	if ((block < 0) || (block >= num_blocks)) {
   2edf4:	db03      	blt.n	2edfe <npgps_block_to_offset+0xe>
   2edf6:	4b06      	ldr	r3, [pc, #24]	; (2ee10 <npgps_block_to_offset+0x20>)
   2edf8:	681b      	ldr	r3, [r3, #0]
   2edfa:	4293      	cmp	r3, r2
   2edfc:	dc05      	bgt.n	2ee0a <npgps_block_to_offset+0x1a>
		LOG_ERR("invalid block:%d", block);
   2edfe:	4805      	ldr	r0, [pc, #20]	; (2ee14 <npgps_block_to_offset+0x24>)
   2ee00:	2145      	movs	r1, #69	; 0x45
   2ee02:	f00d fe55 	bl	3cab0 <z_log_minimal_printk>
		return 0;
   2ee06:	2000      	movs	r0, #0
}
   2ee08:	bd08      	pop	{r3, pc}
	return block * BLOCK_SIZE;
   2ee0a:	02d0      	lsls	r0, r2, #11
   2ee0c:	e7fc      	b.n	2ee08 <npgps_block_to_offset+0x18>
   2ee0e:	bf00      	nop
   2ee10:	2001a15c 	.word	0x2001a15c
   2ee14:	0004a024 	.word	0x0004a024

0002ee18 <npgps_pointer_to_block>:
	int ret = (uint32_t)(p - block_pool_base) / BLOCK_SIZE;
   2ee18:	4b06      	ldr	r3, [pc, #24]	; (2ee34 <npgps_pointer_to_block+0x1c>)
	if ((ret < 0) || (ret >= num_blocks)) {
   2ee1a:	4a07      	ldr	r2, [pc, #28]	; (2ee38 <npgps_pointer_to_block+0x20>)
	int ret = (uint32_t)(p - block_pool_base) / BLOCK_SIZE;
   2ee1c:	681b      	ldr	r3, [r3, #0]
	if ((ret < 0) || (ret >= num_blocks)) {
   2ee1e:	6812      	ldr	r2, [r2, #0]
	int ret = (uint32_t)(p - block_pool_base) / BLOCK_SIZE;
   2ee20:	1ac0      	subs	r0, r0, r3
   2ee22:	0ac3      	lsrs	r3, r0, #11
		return NO_BLOCK;
   2ee24:	ebb2 2fd0 	cmp.w	r2, r0, lsr #11
}
   2ee28:	bfcc      	ite	gt
   2ee2a:	4618      	movgt	r0, r3
   2ee2c:	f04f 30ff 	movle.w	r0, #4294967295
   2ee30:	4770      	bx	lr
   2ee32:	bf00      	nop
   2ee34:	2001a154 	.word	0x2001a154
   2ee38:	2001a15c 	.word	0x2001a15c

0002ee3c <npgps_block_to_pointer>:
	if ((block < 0) || (block >= num_blocks)) {
   2ee3c:	1e02      	subs	r2, r0, #0
{
   2ee3e:	b508      	push	{r3, lr}
	if ((block < 0) || (block >= num_blocks)) {
   2ee40:	db03      	blt.n	2ee4a <npgps_block_to_pointer+0xe>
   2ee42:	4b07      	ldr	r3, [pc, #28]	; (2ee60 <npgps_block_to_pointer+0x24>)
   2ee44:	681b      	ldr	r3, [r3, #0]
   2ee46:	4293      	cmp	r3, r2
   2ee48:	dc05      	bgt.n	2ee56 <npgps_block_to_pointer+0x1a>
		LOG_ERR("invalid block:%d", block);
   2ee4a:	4806      	ldr	r0, [pc, #24]	; (2ee64 <npgps_block_to_pointer+0x28>)
   2ee4c:	2145      	movs	r1, #69	; 0x45
   2ee4e:	f00d fe2f 	bl	3cab0 <z_log_minimal_printk>
		ret = NULL;
   2ee52:	2000      	movs	r0, #0
}
   2ee54:	bd08      	pop	{r3, pc}
		ret = (void *)(block_pool_base + block * BLOCK_SIZE);
   2ee56:	4b04      	ldr	r3, [pc, #16]	; (2ee68 <npgps_block_to_pointer+0x2c>)
   2ee58:	6818      	ldr	r0, [r3, #0]
   2ee5a:	eb00 20c2 	add.w	r0, r0, r2, lsl #11
	return ret;
   2ee5e:	e7f9      	b.n	2ee54 <npgps_block_to_pointer+0x18>
   2ee60:	2001a15c 	.word	0x2001a15c
   2ee64:	0004a024 	.word	0x0004a024
   2ee68:	2001a154 	.word	0x2001a154

0002ee6c <npgps_download_init>:
{
   2ee6c:	b510      	push	{r4, lr}
	__ASSERT(handler != NULL, "must specify handler");
   2ee6e:	4604      	mov	r4, r0
   2ee70:	b950      	cbnz	r0, 2ee88 <npgps_download_init+0x1c>
   2ee72:	4909      	ldr	r1, [pc, #36]	; (2ee98 <npgps_download_init+0x2c>)
   2ee74:	4809      	ldr	r0, [pc, #36]	; (2ee9c <npgps_download_init+0x30>)
   2ee76:	f240 12b3 	movw	r2, #435	; 0x1b3
   2ee7a:	f00d fddf 	bl	3ca3c <assert_print>
   2ee7e:	f240 11b3 	movw	r1, #435	; 0x1b3
   2ee82:	4805      	ldr	r0, [pc, #20]	; (2ee98 <npgps_download_init+0x2c>)
   2ee84:	f00d fdd3 	bl	3ca2e <assert_post_action>
	buffer_handler = handler;
   2ee88:	4b05      	ldr	r3, [pc, #20]	; (2eea0 <npgps_download_init+0x34>)
	return download_client_init(&dlc, download_client_callback);
   2ee8a:	4906      	ldr	r1, [pc, #24]	; (2eea4 <npgps_download_init+0x38>)
	buffer_handler = handler;
   2ee8c:	601c      	str	r4, [r3, #0]
	return download_client_init(&dlc, download_client_callback);
   2ee8e:	4806      	ldr	r0, [pc, #24]	; (2eea8 <npgps_download_init+0x3c>)
}
   2ee90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return download_client_init(&dlc, download_client_callback);
   2ee94:	f000 bf7a 	b.w	2fd8c <download_client_init>
   2ee98:	00049fa9 	.word	0x00049fa9
   2ee9c:	00043ff2 	.word	0x00043ff2
   2eea0:	2001a158 	.word	0x2001a158
   2eea4:	0002e9f5 	.word	0x0002e9f5
   2eea8:	200158f8 	.word	0x200158f8

0002eeac <npgps_download_start>:
{
   2eeac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2eeb0:	460f      	mov	r7, r1
   2eeb2:	4615      	mov	r5, r2
   2eeb4:	4698      	mov	r8, r3
	if (host == NULL || file == NULL) {
   2eeb6:	4606      	mov	r6, r0
   2eeb8:	2800      	cmp	r0, #0
   2eeba:	d033      	beq.n	2ef24 <npgps_download_start+0x78>
   2eebc:	2900      	cmp	r1, #0
   2eebe:	d031      	beq.n	2ef24 <npgps_download_start+0x78>
	return z_impl_k_sem_take(sem, timeout);
   2eec0:	2200      	movs	r2, #0
   2eec2:	2300      	movs	r3, #0
   2eec4:	4819      	ldr	r0, [pc, #100]	; (2ef2c <npgps_download_start+0x80>)
   2eec6:	f007 ff83 	bl	36dd0 <z_impl_k_sem_take>
	if (err) {
   2eeca:	4604      	mov	r4, r0
   2eecc:	b138      	cbz	r0, 2eede <npgps_download_start+0x32>
		LOG_ERR("PGPS download already active.");
   2eece:	2145      	movs	r1, #69	; 0x45
   2eed0:	4817      	ldr	r0, [pc, #92]	; (2ef30 <npgps_download_start+0x84>)
   2eed2:	f00d fded 	bl	3cab0 <z_log_minimal_printk>
}
   2eed6:	4620      	mov	r0, r4
   2eed8:	b004      	add	sp, #16
   2eeda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	socket_retries_left = SOCKET_RETRIES;
   2eede:	2202      	movs	r2, #2
	struct download_client_cfg config = {
   2eee0:	9500      	str	r5, [sp, #0]
		.set_tls_hostname = (sec_tag != -1),
   2eee2:	3501      	adds	r5, #1
   2eee4:	bf18      	it	ne
   2eee6:	2501      	movne	r5, #1
	socket_retries_left = SOCKET_RETRIES;
   2eee8:	4b12      	ldr	r3, [pc, #72]	; (2ef34 <npgps_download_start+0x88>)
	err = download_client_connect(&dlc, host, &config);
   2eeea:	4631      	mov	r1, r6
	socket_retries_left = SOCKET_RETRIES;
   2eeec:	601a      	str	r2, [r3, #0]
	struct download_client_cfg config = {
   2eeee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	err = download_client_connect(&dlc, host, &config);
   2eef0:	466a      	mov	r2, sp
   2eef2:	4811      	ldr	r0, [pc, #68]	; (2ef38 <npgps_download_start+0x8c>)
	struct download_client_cfg config = {
   2eef4:	f88d 8004 	strb.w	r8, [sp, #4]
   2eef8:	9302      	str	r3, [sp, #8]
		.set_tls_hostname = (sec_tag != -1),
   2eefa:	f88d 500c 	strb.w	r5, [sp, #12]
	err = download_client_connect(&dlc, host, &config);
   2eefe:	f000 ff75 	bl	2fdec <download_client_connect>
	if (err != 0) {
   2ef02:	4604      	mov	r4, r0
   2ef04:	b950      	cbnz	r0, 2ef1c <npgps_download_start+0x70>
	err = download_client_start(&dlc, file, 0);
   2ef06:	4602      	mov	r2, r0
   2ef08:	4639      	mov	r1, r7
   2ef0a:	480b      	ldr	r0, [pc, #44]	; (2ef38 <npgps_download_start+0x8c>)
   2ef0c:	f001 faae 	bl	3046c <download_client_start>
	if (err != 0) {
   2ef10:	4604      	mov	r4, r0
   2ef12:	2800      	cmp	r0, #0
   2ef14:	d0df      	beq.n	2eed6 <npgps_download_start+0x2a>
		download_client_disconnect(&dlc);
   2ef16:	4808      	ldr	r0, [pc, #32]	; (2ef38 <npgps_download_start+0x8c>)
   2ef18:	f001 f94c 	bl	301b4 <download_client_disconnect>
	z_impl_k_sem_give(sem);
   2ef1c:	4803      	ldr	r0, [pc, #12]	; (2ef2c <npgps_download_start+0x80>)
   2ef1e:	f007 ff1b 	bl	36d58 <z_impl_k_sem_give>
}
   2ef22:	e7d8      	b.n	2eed6 <npgps_download_start+0x2a>
		return -EINVAL;
   2ef24:	f06f 0415 	mvn.w	r4, #21
   2ef28:	e7d5      	b.n	2eed6 <npgps_download_start+0x2a>
   2ef2a:	bf00      	nop
   2ef2c:	200150a8 	.word	0x200150a8
   2ef30:	0004a03a 	.word	0x0004a03a
   2ef34:	2001a194 	.word	0x2001a194
   2ef38:	200158f8 	.word	0x200158f8

0002ef3c <nrf_cloud_cell_pos_request_json_get>:
	return err;
}

int nrf_cloud_cell_pos_request_json_get(const struct lte_lc_cells_info *const cells_inf,
					const bool request_loc, cJSON **req_obj_out)
{
   2ef3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ef3e:	4604      	mov	r4, r0
   2ef40:	460f      	mov	r7, r1
	int err = 0;
	*req_obj_out = json_create_req_obj(NRF_CLOUD_JSON_APPID_VAL_CELL_POS,
   2ef42:	4814      	ldr	r0, [pc, #80]	; (2ef94 <nrf_cloud_cell_pos_request_json_get+0x58>)
   2ef44:	4914      	ldr	r1, [pc, #80]	; (2ef98 <nrf_cloud_cell_pos_request_json_get+0x5c>)
{
   2ef46:	4616      	mov	r6, r2
	*req_obj_out = json_create_req_obj(NRF_CLOUD_JSON_APPID_VAL_CELL_POS,
   2ef48:	f7fb f934 	bl	2a1b4 <json_create_req_obj>
						      NRF_CLOUD_JSON_MSG_TYPE_VAL_DATA);
	cJSON *data_obj = cJSON_AddObjectToObject(*req_obj_out, NRF_CLOUD_JSON_DATA_KEY);
   2ef4c:	4913      	ldr	r1, [pc, #76]	; (2ef9c <nrf_cloud_cell_pos_request_json_get+0x60>)
	*req_obj_out = json_create_req_obj(NRF_CLOUD_JSON_APPID_VAL_CELL_POS,
   2ef4e:	6030      	str	r0, [r6, #0]
	cJSON *data_obj = cJSON_AddObjectToObject(*req_obj_out, NRF_CLOUD_JSON_DATA_KEY);
   2ef50:	f010 fecb 	bl	3fcea <cJSON_AddObjectToObject>

	if (!data_obj) {
   2ef54:	4605      	mov	r5, r0
   2ef56:	b928      	cbnz	r0, 2ef64 <nrf_cloud_cell_pos_request_json_get+0x28>
		err = -ENOMEM;
   2ef58:	f06f 040b 	mvn.w	r4, #11
	}

	return 0;

cleanup:
	cJSON_Delete(*req_obj_out);
   2ef5c:	6830      	ldr	r0, [r6, #0]
   2ef5e:	f002 ffed 	bl	31f3c <cJSON_Delete>
	return err;
   2ef62:	e011      	b.n	2ef88 <nrf_cloud_cell_pos_request_json_get+0x4c>
	if (cells_inf) {
   2ef64:	b194      	cbz	r4, 2ef8c <nrf_cloud_cell_pos_request_json_get+0x50>
		err = nrf_cloud_format_cell_pos_req_json(cells_inf, 1, data_obj);
   2ef66:	4602      	mov	r2, r0
   2ef68:	2101      	movs	r1, #1
   2ef6a:	4620      	mov	r0, r4
   2ef6c:	f7fb ff9a 	bl	2aea4 <nrf_cloud_format_cell_pos_req_json>
		err = nrf_cloud_format_single_cell_pos_req_json(data_obj);
   2ef70:	4604      	mov	r4, r0
	if (err) {
   2ef72:	2800      	cmp	r0, #0
   2ef74:	d1f2      	bne.n	2ef5c <nrf_cloud_cell_pos_request_json_get+0x20>
	if (!request_loc &&
   2ef76:	b93f      	cbnz	r7, 2ef88 <nrf_cloud_cell_pos_request_json_get+0x4c>
	    !cJSON_AddNumberToObjectCS(data_obj, CELL_POS_JSON_CELL_LOC_KEY_DOREPLY, 0)) {
   2ef78:	2200      	movs	r2, #0
   2ef7a:	2300      	movs	r3, #0
   2ef7c:	4628      	mov	r0, r5
   2ef7e:	4908      	ldr	r1, [pc, #32]	; (2efa0 <nrf_cloud_cell_pos_request_json_get+0x64>)
   2ef80:	f010 fe1c 	bl	3fbbc <cJSON_AddNumberToObjectCS>
	if (!request_loc &&
   2ef84:	2800      	cmp	r0, #0
   2ef86:	d0e7      	beq.n	2ef58 <nrf_cloud_cell_pos_request_json_get+0x1c>
}
   2ef88:	4620      	mov	r0, r4
   2ef8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = nrf_cloud_format_single_cell_pos_req_json(data_obj);
   2ef8c:	f7fb ff68 	bl	2ae60 <nrf_cloud_format_single_cell_pos_req_json>
   2ef90:	e7ee      	b.n	2ef70 <nrf_cloud_cell_pos_request_json_get+0x34>
   2ef92:	bf00      	nop
   2ef94:	00048159 	.word	0x00048159
   2ef98:	000435de 	.word	0x000435de
   2ef9c:	000436ba 	.word	0x000436ba
   2efa0:	0004a05d 	.word	0x0004a05d

0002efa4 <nrf_cloud_cell_pos_process>:

int nrf_cloud_cell_pos_process(const char *buf, struct nrf_cloud_cell_pos_result *result)
{
   2efa4:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (!result) {
   2efa6:	460d      	mov	r5, r1
   2efa8:	b191      	cbz	r1, 2efd0 <nrf_cloud_cell_pos_process+0x2c>
		return -EINVAL;
	}

	err = nrf_cloud_parse_cell_pos_response(buf, result);
   2efaa:	f7fc f991 	bl	2b2d0 <nrf_cloud_parse_cell_pos_response>
	if (err == -EFAULT) {
   2efae:	f110 0f0e 	cmn.w	r0, #14
	err = nrf_cloud_parse_cell_pos_response(buf, result);
   2efb2:	4604      	mov	r4, r0
	if (err == -EFAULT) {
   2efb4:	d106      	bne.n	2efc4 <nrf_cloud_cell_pos_process+0x20>
		LOG_ERR("nRF Cloud cell-based location error: %d",
   2efb6:	2145      	movs	r1, #69	; 0x45
   2efb8:	69ea      	ldr	r2, [r5, #28]
   2efba:	4807      	ldr	r0, [pc, #28]	; (2efd8 <nrf_cloud_cell_pos_process+0x34>)
			result->err);
	} else if (err < 0) {
		LOG_ERR("Error processing cell-based location: %d", err);
   2efbc:	f00d fd78 	bl	3cab0 <z_log_minimal_printk>
	}

	return err;
}
   2efc0:	4620      	mov	r0, r4
   2efc2:	bd38      	pop	{r3, r4, r5, pc}
	} else if (err < 0) {
   2efc4:	2800      	cmp	r0, #0
   2efc6:	dafb      	bge.n	2efc0 <nrf_cloud_cell_pos_process+0x1c>
		LOG_ERR("Error processing cell-based location: %d", err);
   2efc8:	4602      	mov	r2, r0
   2efca:	2145      	movs	r1, #69	; 0x45
   2efcc:	4803      	ldr	r0, [pc, #12]	; (2efdc <nrf_cloud_cell_pos_process+0x38>)
   2efce:	e7f5      	b.n	2efbc <nrf_cloud_cell_pos_process+0x18>
		return -EINVAL;
   2efd0:	f06f 0415 	mvn.w	r4, #21
   2efd4:	e7f4      	b.n	2efc0 <nrf_cloud_cell_pos_process+0x1c>
   2efd6:	bf00      	nop
   2efd8:	0004a065 	.word	0x0004a065
   2efdc:	0004a092 	.word	0x0004a092

0002efe0 <fota_settings_set>:
SETTINGS_STATIC_HANDLER_DEFINE(fota, NRF_CLOUD_SETTINGS_FULL_FOTA, NULL,
			       fota_settings_set, NULL, NULL);

static int fota_settings_set(const char *key, size_t len_rd,
			     settings_read_cb read_cb, void *cb_arg)
{
   2efe0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2efe4:	460d      	mov	r5, r1
   2efe6:	4617      	mov	r7, r2
   2efe8:	4698      	mov	r8, r3
	if (!key) {
   2efea:	4604      	mov	r4, r0
   2efec:	2800      	cmp	r0, #0
   2efee:	d036      	beq.n	2f05e <fota_settings_set+0x7e>
		return -EINVAL;
	}

	LOG_DBG("Settings key: %s, size: %d", log_strdup(key), len_rd);

	if (strncmp(key, NRF_CLOUD_SETTINGS_FOTA_JOB, strlen(NRF_CLOUD_SETTINGS_FOTA_JOB)) != 0) {
   2eff0:	481f      	ldr	r0, [pc, #124]	; (2f070 <fota_settings_set+0x90>)
   2eff2:	f7ee f926 	bl	1d242 <strlen>
   2eff6:	491e      	ldr	r1, [pc, #120]	; (2f070 <fota_settings_set+0x90>)
   2eff8:	4602      	mov	r2, r0
   2effa:	4620      	mov	r0, r4
   2effc:	f012 fbc5 	bl	4178a <strncmp>
   2f000:	4604      	mov	r4, r0
   2f002:	bb78      	cbnz	r0, 2f064 <fota_settings_set+0x84>
		return -ENOMSG;
	}

	if (len_rd > sizeof(saved_job)) {
   2f004:	2d28      	cmp	r5, #40	; 0x28
   2f006:	d904      	bls.n	2f012 <fota_settings_set+0x32>
		LOG_INF("FOTA settings size larger than expected");
   2f008:	2149      	movs	r1, #73	; 0x49
   2f00a:	481a      	ldr	r0, [pc, #104]	; (2f074 <fota_settings_set+0x94>)
   2f00c:	f00d fd50 	bl	3cab0 <z_log_minimal_printk>
		len_rd = sizeof(saved_job);
   2f010:	2528      	movs	r5, #40	; 0x28
	}

	ssize_t sz = read_cb(cb_arg, (void *)&saved_job, len_rd);
   2f012:	4e19      	ldr	r6, [pc, #100]	; (2f078 <fota_settings_set+0x98>)
   2f014:	462a      	mov	r2, r5
   2f016:	4631      	mov	r1, r6
   2f018:	4640      	mov	r0, r8
   2f01a:	47b8      	blx	r7

	if (sz == 0) {
   2f01c:	1e02      	subs	r2, r0, #0
   2f01e:	d024      	beq.n	2f06a <fota_settings_set+0x8a>
		LOG_DBG("FOTA settings key-value pair has been deleted");
		return -EIDRM;
	} else if (sz < 0) {
   2f020:	da09      	bge.n	2f036 <fota_settings_set+0x56>
		LOG_ERR("FOTA settings read error: %d", sz);
   2f022:	2145      	movs	r1, #69	; 0x45
   2f024:	4815      	ldr	r0, [pc, #84]	; (2f07c <fota_settings_set+0x9c>)
   2f026:	f00d fd43 	bl	3cab0 <z_log_minimal_printk>
		return -EIO;
   2f02a:	f06f 0404 	mvn.w	r4, #4
	} else {
		LOG_INF("FOTA settings size smaller than expected, likely outdated");
	}

	return 0;
}
   2f02e:	4620      	mov	r0, r4
   2f030:	b002      	add	sp, #8
   2f032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (sz == sizeof(saved_job)) {
   2f036:	2a28      	cmp	r2, #40	; 0x28
   2f038:	d10c      	bne.n	2f054 <fota_settings_set+0x74>
		LOG_INF("Saved job: %s, type: %d, validate: %d, bl: 0x%X",
   2f03a:	4632      	mov	r2, r6
   2f03c:	f896 3027 	ldrb.w	r3, [r6, #39]	; 0x27
   2f040:	2149      	movs	r1, #73	; 0x49
   2f042:	9301      	str	r3, [sp, #4]
   2f044:	f812 3b02 	ldrb.w	r3, [r2], #2
   2f048:	480d      	ldr	r0, [pc, #52]	; (2f080 <fota_settings_set+0xa0>)
   2f04a:	9300      	str	r3, [sp, #0]
   2f04c:	7873      	ldrb	r3, [r6, #1]
   2f04e:	f00d fd2f 	bl	3cab0 <z_log_minimal_printk>
   2f052:	e7ec      	b.n	2f02e <fota_settings_set+0x4e>
		LOG_INF("FOTA settings size smaller than expected, likely outdated");
   2f054:	2149      	movs	r1, #73	; 0x49
   2f056:	480b      	ldr	r0, [pc, #44]	; (2f084 <fota_settings_set+0xa4>)
   2f058:	f00d fd2a 	bl	3cab0 <z_log_minimal_printk>
   2f05c:	e7e7      	b.n	2f02e <fota_settings_set+0x4e>
		return -EINVAL;
   2f05e:	f06f 0415 	mvn.w	r4, #21
   2f062:	e7e4      	b.n	2f02e <fota_settings_set+0x4e>
		return -ENOMSG;
   2f064:	f06f 0422 	mvn.w	r4, #34	; 0x22
   2f068:	e7e1      	b.n	2f02e <fota_settings_set+0x4e>
		return -EIDRM;
   2f06a:	f06f 0423 	mvn.w	r4, #35	; 0x23
   2f06e:	e7de      	b.n	2f02e <fota_settings_set+0x4e>
   2f070:	0004a22f 	.word	0x0004a22f
   2f074:	0004a0d3 	.word	0x0004a0d3
   2f078:	20014c47 	.word	0x20014c47
   2f07c:	0004a100 	.word	0x0004a100
   2f080:	0004a122 	.word	0x0004a122
   2f084:	0004a157 	.word	0x0004a157

0002f088 <add_number_to_array>:
	}
	return item;
}

static bool add_number_to_array(cJSON *const array, const int number)
{
   2f088:	b538      	push	{r3, r4, r5, lr}
   2f08a:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(array != NULL);
   2f08c:	4605      	mov	r5, r0
   2f08e:	b950      	cbnz	r0, 2f0a6 <add_number_to_array+0x1e>
   2f090:	490c      	ldr	r1, [pc, #48]	; (2f0c4 <add_number_to_array+0x3c>)
   2f092:	480d      	ldr	r0, [pc, #52]	; (2f0c8 <add_number_to_array+0x40>)
   2f094:	f240 229f 	movw	r2, #671	; 0x29f
   2f098:	f00d fcd0 	bl	3ca3c <assert_print>
   2f09c:	f240 219f 	movw	r1, #671	; 0x29f
   2f0a0:	4808      	ldr	r0, [pc, #32]	; (2f0c4 <add_number_to_array+0x3c>)
   2f0a2:	f00d fcc4 	bl	3ca2e <assert_post_action>

	cJSON *item = cJSON_CreateNumber(number);
   2f0a6:	4620      	mov	r0, r4
   2f0a8:	f7ed fb1c 	bl	1c6e4 <__aeabi_i2d>
   2f0ac:	f7ef fa24 	bl	1e4f8 <cJSON_CreateNumber>

	if (item) {
   2f0b0:	4604      	mov	r4, r0
   2f0b2:	b118      	cbz	r0, 2f0bc <add_number_to_array+0x34>
		cJSON_AddItemToArray(array, item);
   2f0b4:	4601      	mov	r1, r0
   2f0b6:	4628      	mov	r0, r5
   2f0b8:	f010 fd36 	bl	3fb28 <cJSON_AddItemToArray>
	}
	return item;
}
   2f0bc:	1e20      	subs	r0, r4, #0
   2f0be:	bf18      	it	ne
   2f0c0:	2001      	movne	r0, #1
   2f0c2:	bd38      	pop	{r3, r4, r5, pc}
   2f0c4:	0004a196 	.word	0x0004a196
   2f0c8:	00043ff2 	.word	0x00043ff2

0002f0cc <add_string_to_array>:
{
   2f0cc:	b538      	push	{r3, r4, r5, lr}
   2f0ce:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(array != NULL);
   2f0d0:	4605      	mov	r5, r0
   2f0d2:	b950      	cbnz	r0, 2f0ea <add_string_to_array+0x1e>
   2f0d4:	490b      	ldr	r1, [pc, #44]	; (2f104 <add_string_to_array+0x38>)
   2f0d6:	480c      	ldr	r0, [pc, #48]	; (2f108 <add_string_to_array+0x3c>)
   2f0d8:	f240 2293 	movw	r2, #659	; 0x293
   2f0dc:	f00d fcae 	bl	3ca3c <assert_print>
   2f0e0:	f240 2193 	movw	r1, #659	; 0x293
   2f0e4:	4807      	ldr	r0, [pc, #28]	; (2f104 <add_string_to_array+0x38>)
   2f0e6:	f00d fca2 	bl	3ca2e <assert_post_action>
	cJSON *item = cJSON_CreateString(string);
   2f0ea:	4620      	mov	r0, r4
   2f0ec:	f002 ffc4 	bl	32078 <cJSON_CreateString>
	if (item) {
   2f0f0:	4604      	mov	r4, r0
   2f0f2:	b118      	cbz	r0, 2f0fc <add_string_to_array+0x30>
		cJSON_AddItemToArray(array, item);
   2f0f4:	4601      	mov	r1, r0
   2f0f6:	4628      	mov	r0, r5
   2f0f8:	f010 fd16 	bl	3fb28 <cJSON_AddItemToArray>
}
   2f0fc:	1e20      	subs	r0, r4, #0
   2f0fe:	bf18      	it	ne
   2f100:	2001      	movne	r0, #1
   2f102:	bd38      	pop	{r3, r4, r5, pc}
   2f104:	0004a196 	.word	0x0004a196
   2f108:	00043ff2 	.word	0x00043ff2

0002f10c <publish>:
		log_strdup(pub->message.topic.topic.utf8));
	LOG_DBG("Payload (%d bytes): %s",
		pub->message.payload.len,
		log_strdup(pub->message.payload.data));

	ret = mqtt_publish(client_mqtt, pub);
   2f10c:	4b07      	ldr	r3, [pc, #28]	; (2f12c <publish+0x20>)
{
   2f10e:	4601      	mov	r1, r0
   2f110:	b510      	push	{r4, lr}
	ret = mqtt_publish(client_mqtt, pub);
   2f112:	6818      	ldr	r0, [r3, #0]
   2f114:	f00f f87c 	bl	3e210 <mqtt_publish>
	if (ret) {
   2f118:	4604      	mov	r4, r0
   2f11a:	b120      	cbz	r0, 2f126 <publish+0x1a>
		LOG_ERR("Publish failed: %d", ret);
   2f11c:	4602      	mov	r2, r0
   2f11e:	2145      	movs	r1, #69	; 0x45
   2f120:	4803      	ldr	r0, [pc, #12]	; (2f130 <publish+0x24>)
   2f122:	f00d fcc5 	bl	3cab0 <z_log_minimal_printk>
	}
	return ret;
}
   2f126:	4620      	mov	r0, r4
   2f128:	bd10      	pop	{r4, pc}
   2f12a:	bf00      	nop
   2f12c:	2001a198 	.word	0x2001a198
   2f130:	0004a1d4 	.word	0x0004a1d4

0002f134 <save_validate_status>:
{
   2f134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f136:	460f      	mov	r7, r1
   2f138:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(job_id != NULL);
   2f13a:	4605      	mov	r5, r0
   2f13c:	b950      	cbnz	r0, 2f154 <save_validate_status+0x20>
   2f13e:	491e      	ldr	r1, [pc, #120]	; (2f1b8 <save_validate_status+0x84>)
   2f140:	481e      	ldr	r0, [pc, #120]	; (2f1bc <save_validate_status+0x88>)
   2f142:	f240 2202 	movw	r2, #514	; 0x202
   2f146:	f00d fc79 	bl	3ca3c <assert_print>
   2f14a:	f240 2102 	movw	r1, #514	; 0x202
   2f14e:	481a      	ldr	r0, [pc, #104]	; (2f1b8 <save_validate_status+0x84>)
   2f150:	f00d fc6d 	bl	3ca2e <assert_post_action>
	if (validate == NRF_CLOUD_FOTA_VALIDATE_DONE) {
   2f154:	2e05      	cmp	r6, #5
   2f156:	4c1a      	ldr	r4, [pc, #104]	; (2f1c0 <save_validate_status+0x8c>)
   2f158:	d117      	bne.n	2f18a <save_validate_status+0x56>
		saved_job.validate = NRF_CLOUD_FOTA_VALIDATE_NONE;
   2f15a:	2100      	movs	r1, #0
		saved_job.type = NRF_CLOUD_FOTA_TYPE__INVALID;
   2f15c:	2303      	movs	r3, #3
		memset(saved_job.id, 0, sizeof(saved_job.id));
   2f15e:	2225      	movs	r2, #37	; 0x25
   2f160:	1ca0      	adds	r0, r4, #2
		saved_job.type = NRF_CLOUD_FOTA_TYPE__INVALID;
   2f162:	7063      	strb	r3, [r4, #1]
		saved_job.validate = NRF_CLOUD_FOTA_VALIDATE_NONE;
   2f164:	7021      	strb	r1, [r4, #0]
		saved_job.bl_flags = NRF_CLOUD_FOTA_BL_STATUS_CLEAR;
   2f166:	f884 1027 	strb.w	r1, [r4, #39]	; 0x27
		memset(saved_job.id, 0, sizeof(saved_job.id));
   2f16a:	f012 f93b 	bl	413e4 <memset>
	ret = settings_save_one(NRF_CLOUD_SETTINGS_FULL_FOTA_JOB, &saved_job,
   2f16e:	2228      	movs	r2, #40	; 0x28
   2f170:	4913      	ldr	r1, [pc, #76]	; (2f1c0 <save_validate_status+0x8c>)
   2f172:	4814      	ldr	r0, [pc, #80]	; (2f1c4 <save_validate_status+0x90>)
   2f174:	f7f2 feb2 	bl	21edc <settings_save_one>
	if (ret) {
   2f178:	4604      	mov	r4, r0
   2f17a:	b120      	cbz	r0, 2f186 <save_validate_status+0x52>
		LOG_ERR("settings_save_one failed: %d", ret);
   2f17c:	4602      	mov	r2, r0
   2f17e:	2145      	movs	r1, #69	; 0x45
   2f180:	4811      	ldr	r0, [pc, #68]	; (2f1c8 <save_validate_status+0x94>)
   2f182:	f00d fc95 	bl	3cab0 <z_log_minimal_printk>
}
   2f186:	4620      	mov	r0, r4
   2f188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		saved_job.validate = validate;
   2f18a:	4620      	mov	r0, r4
   2f18c:	f800 6b02 	strb.w	r6, [r0], #2
		if (job_id != saved_job.id) {
   2f190:	4285      	cmp	r5, r0
		saved_job.type = job_type;
   2f192:	7067      	strb	r7, [r4, #1]
		if (job_id != saved_job.id) {
   2f194:	d006      	beq.n	2f1a4 <save_validate_status+0x70>
			strncpy(saved_job.id, job_id, sizeof(saved_job.id) - 1);
   2f196:	2224      	movs	r2, #36	; 0x24
   2f198:	4629      	mov	r1, r5
   2f19a:	f012 fb0a 	bl	417b2 <strncpy>
			saved_job.id[sizeof(saved_job.id) - 1] = '\0';
   2f19e:	2300      	movs	r3, #0
   2f1a0:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
		ret = nrf_cloud_bootloader_fota_slot_set(&saved_job);
   2f1a4:	4806      	ldr	r0, [pc, #24]	; (2f1c0 <save_validate_status+0x8c>)
   2f1a6:	f000 fcab 	bl	2fb00 <nrf_cloud_bootloader_fota_slot_set>
		if (ret) {
   2f1aa:	2800      	cmp	r0, #0
   2f1ac:	d0df      	beq.n	2f16e <save_validate_status+0x3a>
			LOG_WRN("Failed to set active bootloader (B1) slot flag");
   2f1ae:	2157      	movs	r1, #87	; 0x57
   2f1b0:	4806      	ldr	r0, [pc, #24]	; (2f1cc <save_validate_status+0x98>)
   2f1b2:	f00d fc7d 	bl	3cab0 <z_log_minimal_printk>
   2f1b6:	e7da      	b.n	2f16e <save_validate_status+0x3a>
   2f1b8:	0004a196 	.word	0x0004a196
   2f1bc:	00043ff2 	.word	0x00043ff2
   2f1c0:	20014c47 	.word	0x20014c47
   2f1c4:	0004a220 	.word	0x0004a220
   2f1c8:	0004a233 	.word	0x0004a233
   2f1cc:	0004a1ec 	.word	0x0004a1ec

0002f1d0 <reset_topics>:
{
   2f1d0:	b508      	push	{r3, lr}
	reset_topic(&sub_topics[SUB_TOPIC_IDX_RCV].topic);
   2f1d2:	4805      	ldr	r0, [pc, #20]	; (2f1e8 <reset_topics+0x18>)
   2f1d4:	f010 fabe 	bl	3f754 <reset_topic>
	reset_topic(&topic_updt.topic);
   2f1d8:	4804      	ldr	r0, [pc, #16]	; (2f1ec <reset_topics+0x1c>)
   2f1da:	f010 fabb 	bl	3f754 <reset_topic>
}
   2f1de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	reset_topic(&topic_req.topic);
   2f1e2:	4803      	ldr	r0, [pc, #12]	; (2f1f0 <reset_topics+0x20>)
   2f1e4:	f010 bab6 	b.w	3f754 <reset_topic>
   2f1e8:	200146c8 	.word	0x200146c8
   2f1ec:	200146e0 	.word	0x200146e0
   2f1f0:	200146d4 	.word	0x200146d4

0002f1f4 <build_topic>:
{
   2f1f4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	size_t size = endpoint->size + strlen(client_id) +
   2f1f8:	684d      	ldr	r5, [r1, #4]
{
   2f1fa:	4690      	mov	r8, r2
   2f1fc:	460f      	mov	r7, r1
   2f1fe:	461e      	mov	r6, r3
   2f200:	4681      	mov	r9, r0
	size_t size = endpoint->size + strlen(client_id) +
   2f202:	f7ee f81e 	bl	1d242 <strlen>
   2f206:	4682      	mov	sl, r0
		      strlen(topic_str) + 1;
   2f208:	4640      	mov	r0, r8
   2f20a:	f7ee f81a 	bl	1d242 <strlen>
	size_t size = endpoint->size + strlen(client_id) +
   2f20e:	1c6b      	adds	r3, r5, #1
   2f210:	eb03 050a 	add.w	r5, r3, sl
   2f214:	182c      	adds	r4, r5, r0
	buf = nrf_cloud_calloc(size, 1);
   2f216:	2101      	movs	r1, #1
   2f218:	4620      	mov	r0, r4
   2f21a:	f012 f83d 	bl	41298 <k_calloc>
	if (!buf) {
   2f21e:	4605      	mov	r5, r0
   2f220:	b938      	cbnz	r0, 2f232 <build_topic+0x3e>
		reset_topic(topic_out);
   2f222:	4630      	mov	r0, r6
   2f224:	f010 fa96 	bl	3f754 <reset_topic>
		return ret;
   2f228:	f06f 000b 	mvn.w	r0, #11
}
   2f22c:	b002      	add	sp, #8
   2f22e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ret = snprintk(buf, size, "%s%s%s",
   2f232:	4621      	mov	r1, r4
   2f234:	e9cd 9800 	strd	r9, r8, [sp]
   2f238:	683b      	ldr	r3, [r7, #0]
   2f23a:	4a08      	ldr	r2, [pc, #32]	; (2f25c <build_topic+0x68>)
   2f23c:	f00d fa28 	bl	3c690 <snprintk>
	if (ret <= 0 || ret >= size) {
   2f240:	2800      	cmp	r0, #0
   2f242:	dd01      	ble.n	2f248 <build_topic+0x54>
   2f244:	42a0      	cmp	r0, r4
   2f246:	d305      	bcc.n	2f254 <build_topic+0x60>
		nrf_cloud_free(buf);
   2f248:	4628      	mov	r0, r5
   2f24a:	f012 f81a 	bl	41282 <k_free>
		return ret;
   2f24e:	f06f 0006 	mvn.w	r0, #6
   2f252:	e7eb      	b.n	2f22c <build_topic+0x38>
	topic_out->size = ret;
   2f254:	e9c6 5000 	strd	r5, r0, [r6]
	return 0;
   2f258:	2000      	movs	r0, #0
   2f25a:	e7e7      	b.n	2f22c <build_topic+0x38>
   2f25c:	0004a255 	.word	0x0004a255

0002f260 <send_event.constprop.0>:
	struct nrf_cloud_fota_evt evt = {
   2f260:	2300      	movs	r3, #0
static void send_event(const enum nrf_cloud_fota_evt_id id,
   2f262:	b507      	push	{r0, r1, r2, lr}
	struct nrf_cloud_fota_evt evt = {
   2f264:	f8cd 3003 	str.w	r3, [sp, #3]
   2f268:	f88d 3007 	strb.w	r3, [sp, #7]
		.status = job->status,
   2f26c:	4b0b      	ldr	r3, [pc, #44]	; (2f29c <send_event.constprop.0+0x3c>)
	switch (id) {
   2f26e:	2802      	cmp	r0, #2
	struct nrf_cloud_fota_evt evt = {
   2f270:	791a      	ldrb	r2, [r3, #4]
   2f272:	f88d 0000 	strb.w	r0, [sp]
   2f276:	f88d 2001 	strb.w	r2, [sp, #1]
   2f27a:	7a1a      	ldrb	r2, [r3, #8]
		evt.evt_data.error = job->error;
   2f27c:	bf08      	it	eq
   2f27e:	7f1b      	ldrbeq	r3, [r3, #28]
	struct nrf_cloud_fota_evt evt = {
   2f280:	f88d 2002 	strb.w	r2, [sp, #2]
		evt.evt_data.error = job->error;
   2f284:	bf08      	it	eq
   2f286:	f88d 3004 	strbeq.w	r3, [sp, #4]
	if (event_cb) {
   2f28a:	4b05      	ldr	r3, [pc, #20]	; (2f2a0 <send_event.constprop.0+0x40>)
   2f28c:	681b      	ldr	r3, [r3, #0]
   2f28e:	b10b      	cbz	r3, 2f294 <send_event.constprop.0+0x34>
		event_cb(&evt);
   2f290:	4668      	mov	r0, sp
   2f292:	4798      	blx	r3
}
   2f294:	b003      	add	sp, #12
   2f296:	f85d fb04 	ldr.w	pc, [sp], #4
   2f29a:	bf00      	nop
   2f29c:	2001a19c 	.word	0x2001a19c
   2f2a0:	2001a1c4 	.word	0x2001a1c4

0002f2a4 <send_job_update>:
		return false;
	}
}

static int send_job_update(struct nrf_cloud_fota_job *const job)
{
   2f2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* ensure shell-invoked fota doesn't crash below */
	if ((job == NULL) || (job->info.id == NULL)) {
   2f2a8:	68c3      	ldr	r3, [r0, #12]
{
   2f2aa:	4604      	mov	r4, r0
   2f2ac:	b086      	sub	sp, #24
	if ((job == NULL) || (job->info.id == NULL)) {
   2f2ae:	2b00      	cmp	r3, #0
   2f2b0:	d065      	beq.n	2f37e <send_job_update+0xda>
		return -EINVAL;
	} else if (client_mqtt == NULL) {
   2f2b2:	4b37      	ldr	r3, [pc, #220]	; (2f390 <send_job_update+0xec>)
   2f2b4:	681b      	ldr	r3, [r3, #0]
   2f2b6:	2b00      	cmp	r3, #0
   2f2b8:	d064      	beq.n	2f384 <send_job_update+0xe0>
		return -ENXIO;
	} else if (topic_updt.topic.utf8 == NULL) {
   2f2ba:	4d36      	ldr	r5, [pc, #216]	; (2f394 <send_job_update+0xf0>)
   2f2bc:	682b      	ldr	r3, [r5, #0]
   2f2be:	2b00      	cmp	r3, #0
   2f2c0:	d063      	beq.n	2f38a <send_job_update+0xe6>
		return -EHOSTUNREACH;
	}

	int ret;
	struct mqtt_publish_param param = {
   2f2c2:	466e      	mov	r6, sp
   2f2c4:	2218      	movs	r2, #24
   2f2c6:	2100      	movs	r1, #0
   2f2c8:	4630      	mov	r0, r6
   2f2ca:	f012 f88b 	bl	413e4 <memset>
   2f2ce:	f44f 7397 	mov.w	r3, #302	; 0x12e
   2f2d2:	f8ad 3014 	strh.w	r3, [sp, #20]
		.message_id = NCT_MSG_ID_FOTA_REPORT,
		.dup_flag = 0,
		.retain_flag = 0,
	};
	bool result;
	cJSON *array = cJSON_CreateArray();
   2f2d6:	f002 fee7 	bl	320a8 <cJSON_CreateArray>

	if (!array) {
   2f2da:	4680      	mov	r8, r0
   2f2dc:	b928      	cbnz	r0, 2f2ea <send_job_update+0x46>
					      get_error_string(job->error));
	}

	if (!result) {
		cJSON_Delete(array);
		return -ENOMEM;
   2f2de:	f06f 050b 	mvn.w	r5, #11
		/* If job was updated to terminal status, save job ID */
		strncpy(last_job, job->info.id, sizeof(last_job));
	}

	return ret;
}
   2f2e2:	4628      	mov	r0, r5
   2f2e4:	b006      	add	sp, #24
   2f2e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	result = add_string_to_array(array, job->info.id) &&
   2f2ea:	68e1      	ldr	r1, [r4, #12]
   2f2ec:	f7ff feee 	bl	2f0cc <add_string_to_array>
   2f2f0:	b118      	cbz	r0, 2f2fa <send_job_update+0x56>
		 add_number_to_array(array, job->status);
   2f2f2:	4640      	mov	r0, r8
   2f2f4:	7921      	ldrb	r1, [r4, #4]
   2f2f6:	f7ff fec7 	bl	2f088 <add_number_to_array>
	if (job->status == NRF_CLOUD_FOTA_DOWNLOADING) {
   2f2fa:	7923      	ldrb	r3, [r4, #4]
	result = add_string_to_array(array, job->info.id) &&
   2f2fc:	4607      	mov	r7, r0
	if (job->status == NRF_CLOUD_FOTA_DOWNLOADING) {
   2f2fe:	2b07      	cmp	r3, #7
   2f300:	d10c      	bne.n	2f31c <send_job_update+0x78>
		result &= add_number_to_array(array, job->dl_progress);
   2f302:	4640      	mov	r0, r8
   2f304:	6a21      	ldr	r1, [r4, #32]
   2f306:	f7ff febf 	bl	2f088 <add_number_to_array>
		result &= add_string_to_array(array,
   2f30a:	ea00 0307 	and.w	r3, r0, r7
   2f30e:	f003 0301 	and.w	r3, r3, #1
		cJSON_Delete(array);
   2f312:	4640      	mov	r0, r8
	if (!result) {
   2f314:	b97b      	cbnz	r3, 2f336 <send_job_update+0x92>
		cJSON_Delete(array);
   2f316:	f002 fe11 	bl	31f3c <cJSON_Delete>
   2f31a:	e7e0      	b.n	2f2de <send_job_update+0x3a>
	switch (err) {
   2f31c:	7f23      	ldrb	r3, [r4, #28]
		result &= add_string_to_array(array,
   2f31e:	4640      	mov	r0, r8
   2f320:	3b01      	subs	r3, #1
   2f322:	b2db      	uxtb	r3, r3
   2f324:	2b04      	cmp	r3, #4
   2f326:	bf96      	itet	ls
   2f328:	4a1b      	ldrls	r2, [pc, #108]	; (2f398 <send_job_update+0xf4>)
   2f32a:	491c      	ldrhi	r1, [pc, #112]	; (2f39c <send_job_update+0xf8>)
   2f32c:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
   2f330:	f7ff fecc 	bl	2f0cc <add_string_to_array>
   2f334:	e7e9      	b.n	2f30a <send_job_update+0x66>
	char *array_str = cJSON_PrintUnformatted(array);
   2f336:	f010 fbdc 	bl	3faf2 <cJSON_PrintUnformatted>
   2f33a:	4607      	mov	r7, r0
	cJSON_Delete(array);
   2f33c:	4640      	mov	r0, r8
   2f33e:	f002 fdfd 	bl	31f3c <cJSON_Delete>
	if (array_str == NULL) {
   2f342:	2f00      	cmp	r7, #0
   2f344:	d0cb      	beq.n	2f2de <send_job_update+0x3a>
		pub_param->message.topic = *topic;
   2f346:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   2f34a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
		pub_param->message.payload.len = strlen(array_str);
   2f34e:	4638      	mov	r0, r7
		pub_param->message.payload.data = array_str;
   2f350:	9703      	str	r7, [sp, #12]
		pub_param->message.payload.len = strlen(array_str);
   2f352:	f7ed ff76 	bl	1d242 <strlen>
   2f356:	9004      	str	r0, [sp, #16]
		ret = publish(pub_param);
   2f358:	4630      	mov	r0, r6
   2f35a:	f7ff fed7 	bl	2f10c <publish>
   2f35e:	4605      	mov	r5, r0
	cJSON_FreeString(array_str);
   2f360:	4638      	mov	r0, r7
   2f362:	f010 fcfd 	bl	3fd60 <cJSON_FreeString>
	if (ret == 0 && is_job_status_terminal(job->status)) {
   2f366:	2d00      	cmp	r5, #0
   2f368:	d1bb      	bne.n	2f2e2 <send_job_update+0x3e>
	switch (status) {
   2f36a:	7923      	ldrb	r3, [r4, #4]
   2f36c:	3b02      	subs	r3, #2
   2f36e:	2b04      	cmp	r3, #4
   2f370:	d8b7      	bhi.n	2f2e2 <send_job_update+0x3e>
		strncpy(last_job, job->info.id, sizeof(last_job));
   2f372:	2225      	movs	r2, #37	; 0x25
   2f374:	68e1      	ldr	r1, [r4, #12]
   2f376:	480a      	ldr	r0, [pc, #40]	; (2f3a0 <send_job_update+0xfc>)
   2f378:	f012 fa1b 	bl	417b2 <strncpy>
   2f37c:	e7b1      	b.n	2f2e2 <send_job_update+0x3e>
		return -EINVAL;
   2f37e:	f06f 0515 	mvn.w	r5, #21
   2f382:	e7ae      	b.n	2f2e2 <send_job_update+0x3e>
		return -ENXIO;
   2f384:	f06f 0505 	mvn.w	r5, #5
   2f388:	e7ab      	b.n	2f2e2 <send_job_update+0x3e>
		return -EHOSTUNREACH;
   2f38a:	f06f 0575 	mvn.w	r5, #117	; 0x75
   2f38e:	e7a8      	b.n	2f2e2 <send_job_update+0x3e>
   2f390:	2001a198 	.word	0x2001a198
   2f394:	200146e0 	.word	0x200146e0
   2f398:	0004307c 	.word	0x0004307c
   2f39c:	0004517c 	.word	0x0004517c
   2f3a0:	2001d2d2 	.word	0x2001d2d2

0002f3a4 <report_validated_job_status>:
{
   2f3a4:	b530      	push	{r4, r5, lr}
	if (saved_job.type == NRF_CLOUD_FOTA_TYPE__INVALID) {
   2f3a6:	4c21      	ldr	r4, [pc, #132]	; (2f42c <report_validated_job_status+0x88>)
{
   2f3a8:	b08b      	sub	sp, #44	; 0x2c
	if (saved_job.type == NRF_CLOUD_FOTA_TYPE__INVALID) {
   2f3aa:	7865      	ldrb	r5, [r4, #1]
   2f3ac:	2d03      	cmp	r5, #3
   2f3ae:	d03a      	beq.n	2f426 <report_validated_job_status+0x82>
	struct nrf_cloud_fota_job job = {
   2f3b0:	2228      	movs	r2, #40	; 0x28
   2f3b2:	2100      	movs	r1, #0
   2f3b4:	4668      	mov	r0, sp
   2f3b6:	f012 f815 	bl	413e4 <memset>
	switch (saved_job.validate) {
   2f3ba:	7822      	ldrb	r2, [r4, #0]
	struct nrf_cloud_fota_job job = {
   2f3bc:	1ca3      	adds	r3, r4, #2
	switch (saved_job.validate) {
   2f3be:	2a03      	cmp	r2, #3
	struct nrf_cloud_fota_job job = {
   2f3c0:	f88d 5008 	strb.w	r5, [sp, #8]
   2f3c4:	9303      	str	r3, [sp, #12]
	switch (saved_job.validate) {
   2f3c6:	d01c      	beq.n	2f402 <report_validated_job_status+0x5e>
   2f3c8:	2a04      	cmp	r2, #4
   2f3ca:	f04f 0503 	mov.w	r5, #3
   2f3ce:	d015      	beq.n	2f3fc <report_validated_job_status+0x58>
   2f3d0:	2a02      	cmp	r2, #2
   2f3d2:	d11a      	bne.n	2f40a <report_validated_job_status+0x66>
		job.status = NRF_CLOUD_FOTA_SUCCEEDED;
   2f3d4:	f88d 5004 	strb.w	r5, [sp, #4]
	int ret = 0;
   2f3d8:	2400      	movs	r4, #0
	if (job.info.type != NRF_CLOUD_FOTA_TYPE__INVALID) {
   2f3da:	f89d 3008 	ldrb.w	r3, [sp, #8]
   2f3de:	2b03      	cmp	r3, #3
   2f3e0:	d009      	beq.n	2f3f6 <report_validated_job_status+0x52>
		ret = send_job_update(&job);
   2f3e2:	4668      	mov	r0, sp
   2f3e4:	f7ff ff5e 	bl	2f2a4 <send_job_update>
		if (ret) {
   2f3e8:	4604      	mov	r4, r0
   2f3ea:	b120      	cbz	r0, 2f3f6 <report_validated_job_status+0x52>
			LOG_ERR("Error sending job update: %d", ret);
   2f3ec:	4602      	mov	r2, r0
   2f3ee:	2145      	movs	r1, #69	; 0x45
   2f3f0:	480f      	ldr	r0, [pc, #60]	; (2f430 <report_validated_job_status+0x8c>)
   2f3f2:	f00d fb5d 	bl	3cab0 <z_log_minimal_printk>
}
   2f3f6:	4620      	mov	r0, r4
   2f3f8:	b00b      	add	sp, #44	; 0x2c
   2f3fa:	bd30      	pop	{r4, r5, pc}
		job.error = NRF_CLOUD_FOTA_ERROR_UNABLE_TO_VALIDATE;
   2f3fc:	f88d 501c 	strb.w	r5, [sp, #28]
   2f400:	e7e8      	b.n	2f3d4 <report_validated_job_status+0x30>
		job.status = NRF_CLOUD_FOTA_FAILED;
   2f402:	2302      	movs	r3, #2
   2f404:	f88d 3004 	strb.w	r3, [sp, #4]
   2f408:	e7e6      	b.n	2f3d8 <report_validated_job_status+0x34>
		LOG_ERR("Unexpected job validation status: %d",
   2f40a:	2145      	movs	r1, #69	; 0x45
   2f40c:	4809      	ldr	r0, [pc, #36]	; (2f434 <report_validated_job_status+0x90>)
   2f40e:	f00d fb4f 	bl	3cab0 <z_log_minimal_printk>
		ret = save_validate_status(job.info.id, job.info.type,
   2f412:	2205      	movs	r2, #5
   2f414:	f89d 1008 	ldrb.w	r1, [sp, #8]
   2f418:	9803      	ldr	r0, [sp, #12]
   2f41a:	f7ff fe8b 	bl	2f134 <save_validate_status>
		job.info.type = NRF_CLOUD_FOTA_TYPE__INVALID;
   2f41e:	f88d 5008 	strb.w	r5, [sp, #8]
		ret = save_validate_status(job.info.id, job.info.type,
   2f422:	4604      	mov	r4, r0
		break;
   2f424:	e7d9      	b.n	2f3da <report_validated_job_status+0x36>
		return 1;
   2f426:	2401      	movs	r4, #1
   2f428:	e7e5      	b.n	2f3f6 <report_validated_job_status+0x52>
   2f42a:	bf00      	nop
   2f42c:	20014c47 	.word	0x20014c47
   2f430:	0004a286 	.word	0x0004a286
   2f434:	0004a25c 	.word	0x0004a25c

0002f438 <cleanup_job.constprop.0>:
static void cleanup_job(struct nrf_cloud_fota_job *const job)
   2f438:	b510      	push	{r4, lr}
	if (job->parsed_payload) {
   2f43a:	4c06      	ldr	r4, [pc, #24]	; (2f454 <cleanup_job.constprop.0+0x1c>)
   2f43c:	6820      	ldr	r0, [r4, #0]
   2f43e:	b108      	cbz	r0, 2f444 <cleanup_job.constprop.0+0xc>
		cJSON_Delete(job->parsed_payload);
   2f440:	f002 fd7c 	bl	31f3c <cJSON_Delete>
	memset(job, 0, sizeof(*job));
   2f444:	2228      	movs	r2, #40	; 0x28
   2f446:	2100      	movs	r1, #0
   2f448:	4802      	ldr	r0, [pc, #8]	; (2f454 <cleanup_job.constprop.0+0x1c>)
   2f44a:	f011 ffcb 	bl	413e4 <memset>
	job->info.type = NRF_CLOUD_FOTA_TYPE__INVALID;
   2f44e:	2303      	movs	r3, #3
   2f450:	7223      	strb	r3, [r4, #8]
}
   2f452:	bd10      	pop	{r4, pc}
   2f454:	2001a19c 	.word	0x2001a19c

0002f458 <http_fota_handler>:
{
   2f458:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(evt != NULL);
   2f45a:	4605      	mov	r5, r0
   2f45c:	b950      	cbnz	r0, 2f474 <http_fota_handler+0x1c>
   2f45e:	4941      	ldr	r1, [pc, #260]	; (2f564 <http_fota_handler+0x10c>)
   2f460:	4841      	ldr	r0, [pc, #260]	; (2f568 <http_fota_handler+0x110>)
   2f462:	f44f 720a 	mov.w	r2, #552	; 0x228
   2f466:	f00d fae9 	bl	3ca3c <assert_print>
   2f46a:	f44f 710a 	mov.w	r1, #552	; 0x228
   2f46e:	483d      	ldr	r0, [pc, #244]	; (2f564 <http_fota_handler+0x10c>)
   2f470:	f00d fadd 	bl	3ca2e <assert_post_action>
	switch (evt->id) {
   2f474:	782b      	ldrb	r3, [r5, #0]
   2f476:	4e3d      	ldr	r6, [pc, #244]	; (2f56c <http_fota_handler+0x114>)
   2f478:	2b04      	cmp	r3, #4
   2f47a:	d838      	bhi.n	2f4ee <http_fota_handler+0x96>
   2f47c:	e8df f003 	tbb	[pc, r3]
   2f480:	341f0359 	.word	0x341f0359
   2f484:	3a          	.byte	0x3a
   2f485:	00          	.byte	0x00
		if (current_fota.status == NRF_CLOUD_FOTA_DOWNLOADING &&
   2f486:	4c3a      	ldr	r4, [pc, #232]	; (2f570 <http_fota_handler+0x118>)
		LOG_INF("Download complete");
   2f488:	2149      	movs	r1, #73	; 0x49
   2f48a:	483a      	ldr	r0, [pc, #232]	; (2f574 <http_fota_handler+0x11c>)
   2f48c:	f00d fb10 	bl	3cab0 <z_log_minimal_printk>
		if (current_fota.status == NRF_CLOUD_FOTA_DOWNLOADING &&
   2f490:	7923      	ldrb	r3, [r4, #4]
   2f492:	2b07      	cmp	r3, #7
   2f494:	d108      	bne.n	2f4a8 <http_fota_handler+0x50>
   2f496:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2f498:	2b64      	cmp	r3, #100	; 0x64
   2f49a:	d005      	beq.n	2f4a8 <http_fota_handler+0x50>
			current_fota.dl_progress = 100;
   2f49c:	2364      	movs	r3, #100	; 0x64
			(void)send_job_update(&current_fota);
   2f49e:	4620      	mov	r0, r4
			current_fota.sent_dl_progress = 100;
   2f4a0:	e9c4 3308 	strd	r3, r3, [r4, #32]
			(void)send_job_update(&current_fota);
   2f4a4:	f7ff fefe 	bl	2f2a4 <send_job_update>
		current_fota.status = NRF_CLOUD_FOTA_IN_PROGRESS;
   2f4a8:	2201      	movs	r2, #1
		save_validate_status(current_fota.info.id,
   2f4aa:	7a21      	ldrb	r1, [r4, #8]
   2f4ac:	68e0      	ldr	r0, [r4, #12]
		current_fota.status = NRF_CLOUD_FOTA_IN_PROGRESS;
   2f4ae:	7122      	strb	r2, [r4, #4]
		save_validate_status(current_fota.info.id,
   2f4b0:	f7ff fe40 	bl	2f134 <save_validate_status>
		ret = send_job_update(&current_fota);
   2f4b4:	482e      	ldr	r0, [pc, #184]	; (2f570 <http_fota_handler+0x118>)
   2f4b6:	f7ff fef5 	bl	2f2a4 <send_job_update>
   2f4ba:	4604      	mov	r4, r0
		break;
   2f4bc:	e00d      	b.n	2f4da <http_fota_handler+0x82>
		current_fota.status = NRF_CLOUD_FOTA_IN_PROGRESS;
   2f4be:	2201      	movs	r2, #1
   2f4c0:	4c2b      	ldr	r4, [pc, #172]	; (2f570 <http_fota_handler+0x118>)
		save_validate_status(current_fota.info.id,
   2f4c2:	7a21      	ldrb	r1, [r4, #8]
   2f4c4:	68e0      	ldr	r0, [r4, #12]
		current_fota.status = NRF_CLOUD_FOTA_IN_PROGRESS;
   2f4c6:	7122      	strb	r2, [r4, #4]
		save_validate_status(current_fota.info.id,
   2f4c8:	f7ff fe34 	bl	2f134 <save_validate_status>
		ret = send_job_update(&current_fota);
   2f4cc:	4620      	mov	r0, r4
   2f4ce:	f7ff fee9 	bl	2f2a4 <send_job_update>
   2f4d2:	4604      	mov	r4, r0
		send_event(NRF_CLOUD_FOTA_EVT_ERASE_PENDING, &current_fota);
   2f4d4:	2003      	movs	r0, #3
   2f4d6:	f7ff fec3 	bl	2f260 <send_event.constprop.0>
	if (ret) {
   2f4da:	b144      	cbz	r4, 2f4ee <http_fota_handler+0x96>
		LOG_ERR("Failed to send job update to cloud: %d", ret);
   2f4dc:	4622      	mov	r2, r4
   2f4de:	2145      	movs	r1, #69	; 0x45
   2f4e0:	4825      	ldr	r0, [pc, #148]	; (2f578 <http_fota_handler+0x120>)
   2f4e2:	f00d fae5 	bl	3cab0 <z_log_minimal_printk>
   2f4e6:	e002      	b.n	2f4ee <http_fota_handler+0x96>
		send_event(NRF_CLOUD_FOTA_EVT_ERASE_DONE, &current_fota);
   2f4e8:	2004      	movs	r0, #4
   2f4ea:	f7ff feb9 	bl	2f260 <send_event.constprop.0>
	last_fota_dl_evt = evt->id;
   2f4ee:	782b      	ldrb	r3, [r5, #0]
   2f4f0:	7033      	strb	r3, [r6, #0]
}
   2f4f2:	bd70      	pop	{r4, r5, r6, pc}
		current_fota.status = NRF_CLOUD_FOTA_FAILED;
   2f4f4:	2202      	movs	r2, #2
		if (last_fota_dl_evt == FOTA_DOWNLOAD_EVT_ERASE_DONE ||
   2f4f6:	7831      	ldrb	r1, [r6, #0]
		current_fota.status = NRF_CLOUD_FOTA_FAILED;
   2f4f8:	4b1d      	ldr	r3, [pc, #116]	; (2f570 <http_fota_handler+0x118>)
		if (last_fota_dl_evt == FOTA_DOWNLOAD_EVT_ERASE_DONE ||
   2f4fa:	2903      	cmp	r1, #3
		current_fota.status = NRF_CLOUD_FOTA_FAILED;
   2f4fc:	711a      	strb	r2, [r3, #4]
		if (last_fota_dl_evt == FOTA_DOWNLOAD_EVT_ERASE_DONE ||
   2f4fe:	d002      	beq.n	2f506 <http_fota_handler+0xae>
		    evt->cause == FOTA_DOWNLOAD_ERROR_CAUSE_INVALID_UPDATE) {
   2f500:	7929      	ldrb	r1, [r5, #4]
		if (last_fota_dl_evt == FOTA_DOWNLOAD_EVT_ERASE_DONE ||
   2f502:	4291      	cmp	r1, r2
   2f504:	d110      	bne.n	2f528 <http_fota_handler+0xd0>
			current_fota.status = NRF_CLOUD_FOTA_REJECTED;
   2f506:	2206      	movs	r2, #6
   2f508:	711a      	strb	r2, [r3, #4]
		save_validate_status(current_fota.info.id,
   2f50a:	2205      	movs	r2, #5
   2f50c:	7a19      	ldrb	r1, [r3, #8]
   2f50e:	68d8      	ldr	r0, [r3, #12]
   2f510:	f7ff fe10 	bl	2f134 <save_validate_status>
		ret = send_job_update(&current_fota);
   2f514:	4816      	ldr	r0, [pc, #88]	; (2f570 <http_fota_handler+0x118>)
   2f516:	f7ff fec5 	bl	2f2a4 <send_job_update>
   2f51a:	4604      	mov	r4, r0
		send_event(NRF_CLOUD_FOTA_EVT_ERROR, &current_fota);
   2f51c:	2002      	movs	r0, #2
   2f51e:	f7ff fe9f 	bl	2f260 <send_event.constprop.0>
		cleanup_job(&current_fota);
   2f522:	f7ff ff89 	bl	2f438 <cleanup_job.constprop.0>
		break;
   2f526:	e7d8      	b.n	2f4da <http_fota_handler+0x82>
		} else if (evt->cause == FOTA_DOWNLOAD_ERROR_CAUSE_TYPE_MISMATCH) {
   2f528:	2903      	cmp	r1, #3
			current_fota.error = NRF_CLOUD_FOTA_ERROR_MISMATCH;
   2f52a:	bf08      	it	eq
   2f52c:	2205      	moveq	r2, #5
			current_fota.error = NRF_CLOUD_FOTA_ERROR_DOWNLOAD;
   2f52e:	771a      	strb	r2, [r3, #28]
   2f530:	e7eb      	b.n	2f50a <http_fota_handler+0xb2>
		current_fota.status = NRF_CLOUD_FOTA_DOWNLOADING;
   2f532:	2307      	movs	r3, #7
   2f534:	4a0e      	ldr	r2, [pc, #56]	; (2f570 <http_fota_handler+0x118>)
		if ((current_fota.sent_dl_progress == 100) &&
   2f536:	6a51      	ldr	r1, [r2, #36]	; 0x24
		current_fota.status = NRF_CLOUD_FOTA_DOWNLOADING;
   2f538:	7113      	strb	r3, [r2, #4]
		current_fota.dl_progress = evt->progress;
   2f53a:	686b      	ldr	r3, [r5, #4]
		if ((current_fota.sent_dl_progress == 100) &&
   2f53c:	2964      	cmp	r1, #100	; 0x64
		current_fota.dl_progress = evt->progress;
   2f53e:	6213      	str	r3, [r2, #32]
		if ((current_fota.sent_dl_progress == 100) &&
   2f540:	d108      	bne.n	2f554 <http_fota_handler+0xfc>
   2f542:	2b64      	cmp	r3, #100	; 0x64
   2f544:	d0d3      	beq.n	2f4ee <http_fota_handler+0x96>
		if (current_fota.sent_dl_progress >
   2f546:	2b63      	cmp	r3, #99	; 0x63
   2f548:	dd06      	ble.n	2f558 <http_fota_handler+0x100>
		    (((current_fota.dl_progress -
   2f54a:	6a51      	ldr	r1, [r2, #36]	; 0x24
   2f54c:	1a59      	subs	r1, r3, r1
		if (current_fota.dl_progress != 100 &&
   2f54e:	2909      	cmp	r1, #9
   2f550:	ddcd      	ble.n	2f4ee <http_fota_handler+0x96>
   2f552:	e005      	b.n	2f560 <http_fota_handler+0x108>
		if (current_fota.sent_dl_progress >
   2f554:	428b      	cmp	r3, r1
   2f556:	da01      	bge.n	2f55c <http_fota_handler+0x104>
			current_fota.sent_dl_progress = 0;
   2f558:	2100      	movs	r1, #0
   2f55a:	6251      	str	r1, [r2, #36]	; 0x24
		if (current_fota.dl_progress != 100 &&
   2f55c:	2b64      	cmp	r3, #100	; 0x64
   2f55e:	d1f4      	bne.n	2f54a <http_fota_handler+0xf2>
		current_fota.sent_dl_progress = current_fota.dl_progress;
   2f560:	6253      	str	r3, [r2, #36]	; 0x24
   2f562:	e7a7      	b.n	2f4b4 <http_fota_handler+0x5c>
   2f564:	0004a196 	.word	0x0004a196
   2f568:	00043ff2 	.word	0x00043ff2
   2f56c:	20014c46 	.word	0x20014c46
   2f570:	2001a19c 	.word	0x2001a19c
   2f574:	0004a2a8 	.word	0x0004a2a8
   2f578:	0004a2bf 	.word	0x0004a2bf

0002f57c <nrf_cloud_fota_init>:
{
   2f57c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	bool reboot_required = false;
   2f57e:	2400      	movs	r4, #0
   2f580:	f88d 4007 	strb.w	r4, [sp, #7]
	if (cb == NULL) {
   2f584:	b940      	cbnz	r0, 2f598 <nrf_cloud_fota_init+0x1c>
		LOG_ERR("Invalid parameter");
   2f586:	2145      	movs	r1, #69	; 0x45
   2f588:	482b      	ldr	r0, [pc, #172]	; (2f638 <nrf_cloud_fota_init+0xbc>)
   2f58a:	f00d fa91 	bl	3cab0 <z_log_minimal_printk>
		return -EINVAL;
   2f58e:	f06f 0415 	mvn.w	r4, #21
}
   2f592:	4620      	mov	r0, r4
   2f594:	b003      	add	sp, #12
   2f596:	bdf0      	pop	{r4, r5, r6, r7, pc}
	event_cb = cb;
   2f598:	4b28      	ldr	r3, [pc, #160]	; (2f63c <nrf_cloud_fota_init+0xc0>)
	if (initialized) {
   2f59a:	4f29      	ldr	r7, [pc, #164]	; (2f640 <nrf_cloud_fota_init+0xc4>)
	event_cb = cb;
   2f59c:	6018      	str	r0, [r3, #0]
	if (initialized) {
   2f59e:	783b      	ldrb	r3, [r7, #0]
   2f5a0:	2b00      	cmp	r3, #0
   2f5a2:	d1f6      	bne.n	2f592 <nrf_cloud_fota_init+0x16>
	if (!fota_dl_initialized) {
   2f5a4:	4d27      	ldr	r5, [pc, #156]	; (2f644 <nrf_cloud_fota_init+0xc8>)
   2f5a6:	782b      	ldrb	r3, [r5, #0]
   2f5a8:	b963      	cbnz	r3, 2f5c4 <nrf_cloud_fota_init+0x48>
		ret = fota_download_init(http_fota_handler);
   2f5aa:	4827      	ldr	r0, [pc, #156]	; (2f648 <nrf_cloud_fota_init+0xcc>)
   2f5ac:	f001 fba6 	bl	30cfc <fota_download_init>
		if (ret != 0) {
   2f5b0:	4604      	mov	r4, r0
   2f5b2:	b128      	cbz	r0, 2f5c0 <nrf_cloud_fota_init+0x44>
			LOG_ERR("fota_download_init error: %d", ret);
   2f5b4:	2145      	movs	r1, #69	; 0x45
   2f5b6:	4602      	mov	r2, r0
   2f5b8:	4824      	ldr	r0, [pc, #144]	; (2f64c <nrf_cloud_fota_init+0xd0>)
		LOG_ERR("Cannot load settings: %d", ret);
   2f5ba:	f00d fa79 	bl	3cab0 <z_log_minimal_printk>
		return ret;
   2f5be:	e7e8      	b.n	2f592 <nrf_cloud_fota_init+0x16>
		fota_dl_initialized = true;
   2f5c0:	2301      	movs	r3, #1
   2f5c2:	702b      	strb	r3, [r5, #0]
	ret = settings_load_subtree(settings_handler_fota.name);
   2f5c4:	4822      	ldr	r0, [pc, #136]	; (2f650 <nrf_cloud_fota_init+0xd4>)
   2f5c6:	f7f2 fcc3 	bl	21f50 <settings_load_subtree>
	if (ret) {
   2f5ca:	4604      	mov	r4, r0
   2f5cc:	b118      	cbz	r0, 2f5d6 <nrf_cloud_fota_init+0x5a>
		LOG_ERR("Cannot load settings: %d", ret);
   2f5ce:	4602      	mov	r2, r0
   2f5d0:	2145      	movs	r1, #69	; 0x45
   2f5d2:	4820      	ldr	r0, [pc, #128]	; (2f654 <nrf_cloud_fota_init+0xd8>)
   2f5d4:	e7f1      	b.n	2f5ba <nrf_cloud_fota_init+0x3e>
	ret = nrf_cloud_pending_fota_job_process(&saved_job, &reboot_required);
   2f5d6:	4e20      	ldr	r6, [pc, #128]	; (2f658 <nrf_cloud_fota_init+0xdc>)
   2f5d8:	f10d 0107 	add.w	r1, sp, #7
   2f5dc:	4630      	mov	r0, r6
   2f5de:	f000 fabd 	bl	2fb5c <nrf_cloud_pending_fota_job_process>
	if (ret == 0) {
   2f5e2:	4605      	mov	r5, r0
   2f5e4:	b970      	cbnz	r0, 2f604 <nrf_cloud_fota_init+0x88>
		save_validate_status(saved_job.id, saved_job.type, saved_job.validate);
   2f5e6:	7832      	ldrb	r2, [r6, #0]
   2f5e8:	7871      	ldrb	r1, [r6, #1]
   2f5ea:	1cb0      	adds	r0, r6, #2
   2f5ec:	f7ff fda2 	bl	2f134 <save_validate_status>
		if (reboot_required) {
   2f5f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2f5f4:	b1a3      	cbz	r3, 2f620 <nrf_cloud_fota_init+0xa4>
			LOG_INF("Rebooting to complete FOTA update...");
   2f5f6:	4819      	ldr	r0, [pc, #100]	; (2f65c <nrf_cloud_fota_init+0xe0>)
   2f5f8:	2149      	movs	r1, #73	; 0x49
   2f5fa:	f00d fa59 	bl	3cab0 <z_log_minimal_printk>
			sys_reboot(SYS_REBOOT_COLD);
   2f5fe:	2001      	movs	r0, #1
   2f600:	f7f1 ff80 	bl	21504 <sys_reboot>
	} else if (ret == -ENODEV) {
   2f604:	f110 0f13 	cmn.w	r0, #19
   2f608:	d10c      	bne.n	2f624 <nrf_cloud_fota_init+0xa8>
		if (saved_job.type == NRF_CLOUD_FOTA_MODEM &&
   2f60a:	7875      	ldrb	r5, [r6, #1]
   2f60c:	2d01      	cmp	r5, #1
   2f60e:	d10f      	bne.n	2f630 <nrf_cloud_fota_init+0xb4>
		     saved_job.validate == NRF_CLOUD_FOTA_VALIDATE_FAIL ||
   2f610:	7833      	ldrb	r3, [r6, #0]
		if (saved_job.type == NRF_CLOUD_FOTA_MODEM &&
   2f612:	3b02      	subs	r3, #2
   2f614:	2b02      	cmp	r3, #2
   2f616:	d80b      	bhi.n	2f630 <nrf_cloud_fota_init+0xb4>
			LOG_INF("FOTA updated modem");
   2f618:	2149      	movs	r1, #73	; 0x49
   2f61a:	4811      	ldr	r0, [pc, #68]	; (2f660 <nrf_cloud_fota_init+0xe4>)
   2f61c:	f00d fa48 	bl	3cab0 <z_log_minimal_printk>
		ret = 1;
   2f620:	2401      	movs	r4, #1
   2f622:	e005      	b.n	2f630 <nrf_cloud_fota_init+0xb4>
		LOG_ERR("Failed to process pending FOTA job, error: %d", ret);
   2f624:	4602      	mov	r2, r0
   2f626:	2145      	movs	r1, #69	; 0x45
   2f628:	480e      	ldr	r0, [pc, #56]	; (2f664 <nrf_cloud_fota_init+0xe8>)
   2f62a:	f00d fa41 	bl	3cab0 <z_log_minimal_printk>
   2f62e:	462c      	mov	r4, r5
	initialized = true;
   2f630:	2301      	movs	r3, #1
   2f632:	703b      	strb	r3, [r7, #0]
	return ret;
   2f634:	e7ad      	b.n	2f592 <nrf_cloud_fota_init+0x16>
   2f636:	bf00      	nop
   2f638:	0004a2eb 	.word	0x0004a2eb
   2f63c:	2001a1c4 	.word	0x2001a1c4
   2f640:	2001d2d1 	.word	0x2001d2d1
   2f644:	2001d2d0 	.word	0x2001d2d0
   2f648:	0002f459 	.word	0x0002f459
   2f64c:	0004a302 	.word	0x0004a302
   2f650:	0004a324 	.word	0x0004a324
   2f654:	000486c8 	.word	0x000486c8
   2f658:	20014c47 	.word	0x20014c47
   2f65c:	0004a333 	.word	0x0004a333
   2f660:	0004a35d 	.word	0x0004a35d
   2f664:	0004a375 	.word	0x0004a375

0002f668 <nrf_cloud_fota_endpoint_set>:
{
   2f668:	b570      	push	{r4, r5, r6, lr}
   2f66a:	460e      	mov	r6, r1
   2f66c:	4615      	mov	r5, r2
	if (client == NULL || endpoint == NULL ||
   2f66e:	b328      	cbz	r0, 2f6bc <nrf_cloud_fota_endpoint_set+0x54>
   2f670:	b322      	cbz	r2, 2f6bc <nrf_cloud_fota_endpoint_set+0x54>
   2f672:	6813      	ldr	r3, [r2, #0]
   2f674:	b313      	cbz	r3, 2f6bc <nrf_cloud_fota_endpoint_set+0x54>
	    endpoint->utf8 == NULL || endpoint->size == 0 ||
   2f676:	6853      	ldr	r3, [r2, #4]
   2f678:	b303      	cbz	r3, 2f6bc <nrf_cloud_fota_endpoint_set+0x54>
   2f67a:	b1f9      	cbz	r1, 2f6bc <nrf_cloud_fota_endpoint_set+0x54>
	client_mqtt = client;
   2f67c:	4b11      	ldr	r3, [pc, #68]	; (2f6c4 <nrf_cloud_fota_endpoint_set+0x5c>)
   2f67e:	6018      	str	r0, [r3, #0]
	reset_topics();
   2f680:	f7ff fda6 	bl	2f1d0 <reset_topics>
	ret = build_topic(client_id, endpoint, TOPIC_FOTA_RCV,
   2f684:	4629      	mov	r1, r5
   2f686:	4630      	mov	r0, r6
   2f688:	4b0f      	ldr	r3, [pc, #60]	; (2f6c8 <nrf_cloud_fota_endpoint_set+0x60>)
   2f68a:	4a10      	ldr	r2, [pc, #64]	; (2f6cc <nrf_cloud_fota_endpoint_set+0x64>)
   2f68c:	f7ff fdb2 	bl	2f1f4 <build_topic>
	if (ret) {
   2f690:	4604      	mov	r4, r0
   2f692:	b978      	cbnz	r0, 2f6b4 <nrf_cloud_fota_endpoint_set+0x4c>
	ret = build_topic(client_id, endpoint, TOPIC_FOTA_UPDATE,
   2f694:	4629      	mov	r1, r5
   2f696:	4630      	mov	r0, r6
   2f698:	4b0d      	ldr	r3, [pc, #52]	; (2f6d0 <nrf_cloud_fota_endpoint_set+0x68>)
   2f69a:	4a0e      	ldr	r2, [pc, #56]	; (2f6d4 <nrf_cloud_fota_endpoint_set+0x6c>)
   2f69c:	f7ff fdaa 	bl	2f1f4 <build_topic>
	if (ret) {
   2f6a0:	4604      	mov	r4, r0
   2f6a2:	b938      	cbnz	r0, 2f6b4 <nrf_cloud_fota_endpoint_set+0x4c>
	ret = build_topic(client_id, endpoint, TOPIC_FOTA_REQ,
   2f6a4:	4629      	mov	r1, r5
   2f6a6:	4630      	mov	r0, r6
   2f6a8:	4b0b      	ldr	r3, [pc, #44]	; (2f6d8 <nrf_cloud_fota_endpoint_set+0x70>)
   2f6aa:	4a0c      	ldr	r2, [pc, #48]	; (2f6dc <nrf_cloud_fota_endpoint_set+0x74>)
   2f6ac:	f7ff fda2 	bl	2f1f4 <build_topic>
	if (ret) {
   2f6b0:	4604      	mov	r4, r0
   2f6b2:	b108      	cbz	r0, 2f6b8 <nrf_cloud_fota_endpoint_set+0x50>
	reset_topics();
   2f6b4:	f7ff fd8c 	bl	2f1d0 <reset_topics>
}
   2f6b8:	4620      	mov	r0, r4
   2f6ba:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2f6bc:	f06f 0415 	mvn.w	r4, #21
   2f6c0:	e7fa      	b.n	2f6b8 <nrf_cloud_fota_endpoint_set+0x50>
   2f6c2:	bf00      	nop
   2f6c4:	2001a198 	.word	0x2001a198
   2f6c8:	200146c8 	.word	0x200146c8
   2f6cc:	0004a3a8 	.word	0x0004a3a8
   2f6d0:	200146e0 	.word	0x200146e0
   2f6d4:	0004a3b2 	.word	0x0004a3b2
   2f6d8:	200146d4 	.word	0x200146d4
   2f6dc:	0004a3bf 	.word	0x0004a3bf

0002f6e0 <nrf_cloud_fota_endpoint_set_and_report>:
{
   2f6e0:	b510      	push	{r4, lr}
	int ret = nrf_cloud_fota_endpoint_set(client, client_id, endpoint);
   2f6e2:	f7ff ffc1 	bl	2f668 <nrf_cloud_fota_endpoint_set>
	if (ret) {
   2f6e6:	4604      	mov	r4, r0
   2f6e8:	b130      	cbz	r0, 2f6f8 <nrf_cloud_fota_endpoint_set_and_report+0x18>
		LOG_ERR("Failed to set FOTA endpoint: %d", ret);
   2f6ea:	4602      	mov	r2, r0
   2f6ec:	2145      	movs	r1, #69	; 0x45
   2f6ee:	4805      	ldr	r0, [pc, #20]	; (2f704 <nrf_cloud_fota_endpoint_set_and_report+0x24>)
   2f6f0:	f00d f9de 	bl	3cab0 <z_log_minimal_printk>
}
   2f6f4:	4620      	mov	r0, r4
   2f6f6:	bd10      	pop	{r4, pc}
	ret = report_validated_job_status();
   2f6f8:	f7ff fe54 	bl	2f3a4 <report_validated_job_status>
	if (ret > 0) {
   2f6fc:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   2f700:	e7f8      	b.n	2f6f4 <nrf_cloud_fota_endpoint_set_and_report+0x14>
   2f702:	bf00      	nop
   2f704:	0004a3c9 	.word	0x0004a3c9

0002f708 <nrf_cloud_fota_endpoint_clear>:
	client_mqtt = NULL;
   2f708:	2200      	movs	r2, #0
   2f70a:	4b02      	ldr	r3, [pc, #8]	; (2f714 <nrf_cloud_fota_endpoint_clear+0xc>)
   2f70c:	601a      	str	r2, [r3, #0]
	reset_topics();
   2f70e:	f7ff bd5f 	b.w	2f1d0 <reset_topics>
   2f712:	bf00      	nop
   2f714:	2001a198 	.word	0x2001a198

0002f718 <nrf_cloud_fota_subscribe>:
{
   2f718:	b507      	push	{r0, r1, r2, lr}
	struct mqtt_subscription_list sub_list = {
   2f71a:	466b      	mov	r3, sp
   2f71c:	4a0a      	ldr	r2, [pc, #40]	; (2f748 <nrf_cloud_fota_subscribe+0x30>)
   2f71e:	e892 0003 	ldmia.w	r2, {r0, r1}
		if (sub_list.list[i].topic.size == 0 ||
   2f722:	4a0a      	ldr	r2, [pc, #40]	; (2f74c <nrf_cloud_fota_subscribe+0x34>)
	struct mqtt_subscription_list sub_list = {
   2f724:	e883 0003 	stmia.w	r3, {r0, r1}
		if (sub_list.list[i].topic.size == 0 ||
   2f728:	6851      	ldr	r1, [r2, #4]
   2f72a:	b149      	cbz	r1, 2f740 <nrf_cloud_fota_subscribe+0x28>
   2f72c:	6812      	ldr	r2, [r2, #0]
   2f72e:	b13a      	cbz	r2, 2f740 <nrf_cloud_fota_subscribe+0x28>
	return mqtt_subscribe(client_mqtt, &sub_list);
   2f730:	4619      	mov	r1, r3
   2f732:	4b07      	ldr	r3, [pc, #28]	; (2f750 <nrf_cloud_fota_subscribe+0x38>)
   2f734:	6818      	ldr	r0, [r3, #0]
   2f736:	f00e fdfd 	bl	3e334 <mqtt_subscribe>
}
   2f73a:	b003      	add	sp, #12
   2f73c:	f85d fb04 	ldr.w	pc, [sp], #4
			return -EFAULT;
   2f740:	f06f 000d 	mvn.w	r0, #13
   2f744:	e7f9      	b.n	2f73a <nrf_cloud_fota_subscribe+0x22>
   2f746:	bf00      	nop
   2f748:	000427dc 	.word	0x000427dc
   2f74c:	200146c8 	.word	0x200146c8
   2f750:	2001a198 	.word	0x2001a198

0002f754 <nrf_cloud_fota_unsubscribe>:
{
   2f754:	b507      	push	{r0, r1, r2, lr}
	struct mqtt_subscription_list sub_list = {
   2f756:	466b      	mov	r3, sp
   2f758:	4a0a      	ldr	r2, [pc, #40]	; (2f784 <nrf_cloud_fota_unsubscribe+0x30>)
   2f75a:	e892 0003 	ldmia.w	r2, {r0, r1}
		if (sub_list.list[i].topic.size == 0 ||
   2f75e:	4a0a      	ldr	r2, [pc, #40]	; (2f788 <nrf_cloud_fota_unsubscribe+0x34>)
	struct mqtt_subscription_list sub_list = {
   2f760:	e883 0003 	stmia.w	r3, {r0, r1}
		if (sub_list.list[i].topic.size == 0 ||
   2f764:	6851      	ldr	r1, [r2, #4]
   2f766:	b149      	cbz	r1, 2f77c <nrf_cloud_fota_unsubscribe+0x28>
   2f768:	6812      	ldr	r2, [r2, #0]
   2f76a:	b13a      	cbz	r2, 2f77c <nrf_cloud_fota_unsubscribe+0x28>
	return mqtt_unsubscribe(client_mqtt, &sub_list);
   2f76c:	4619      	mov	r1, r3
   2f76e:	4b07      	ldr	r3, [pc, #28]	; (2f78c <nrf_cloud_fota_unsubscribe+0x38>)
   2f770:	6818      	ldr	r0, [r3, #0]
   2f772:	f00e fe05 	bl	3e380 <mqtt_unsubscribe>
}
   2f776:	b003      	add	sp, #12
   2f778:	f85d fb04 	ldr.w	pc, [sp], #4
			return -EFAULT;
   2f77c:	f06f 000d 	mvn.w	r0, #13
   2f780:	e7f9      	b.n	2f776 <nrf_cloud_fota_unsubscribe+0x22>
   2f782:	bf00      	nop
   2f784:	000427e4 	.word	0x000427e4
   2f788:	200146c8 	.word	0x200146c8
   2f78c:	2001a198 	.word	0x2001a198

0002f790 <nrf_cloud_fota_uninit>:
	return current_fota.parsed_payload != NULL;
   2f790:	4b09      	ldr	r3, [pc, #36]	; (2f7b8 <nrf_cloud_fota_uninit+0x28>)
{
   2f792:	b510      	push	{r4, lr}
	if (nrf_cloud_fota_is_active()) {
   2f794:	681c      	ldr	r4, [r3, #0]
   2f796:	b95c      	cbnz	r4, 2f7b0 <nrf_cloud_fota_uninit+0x20>
	event_cb = NULL;
   2f798:	4b08      	ldr	r3, [pc, #32]	; (2f7bc <nrf_cloud_fota_uninit+0x2c>)
   2f79a:	601c      	str	r4, [r3, #0]
	initialized = false;
   2f79c:	4b08      	ldr	r3, [pc, #32]	; (2f7c0 <nrf_cloud_fota_uninit+0x30>)
   2f79e:	701c      	strb	r4, [r3, #0]
	(void)nrf_cloud_fota_unsubscribe();
   2f7a0:	f7ff ffd8 	bl	2f754 <nrf_cloud_fota_unsubscribe>
	reset_topics();
   2f7a4:	f7ff fd14 	bl	2f1d0 <reset_topics>
	cleanup_job(&current_fota);
   2f7a8:	f7ff fe46 	bl	2f438 <cleanup_job.constprop.0>
	return 0;
   2f7ac:	4620      	mov	r0, r4
}
   2f7ae:	bd10      	pop	{r4, pc}
		return -EBUSY;
   2f7b0:	f06f 000f 	mvn.w	r0, #15
   2f7b4:	e7fb      	b.n	2f7ae <nrf_cloud_fota_uninit+0x1e>
   2f7b6:	bf00      	nop
   2f7b8:	2001a19c 	.word	0x2001a19c
   2f7bc:	2001a1c4 	.word	0x2001a1c4
   2f7c0:	2001d2d1 	.word	0x2001d2d1

0002f7c4 <nrf_cloud_fota_update_check>:

int nrf_cloud_fota_update_check(void)
{
   2f7c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (client_mqtt == NULL) {
   2f7c6:	4b0e      	ldr	r3, [pc, #56]	; (2f800 <nrf_cloud_fota_update_check+0x3c>)
   2f7c8:	681b      	ldr	r3, [r3, #0]
   2f7ca:	b193      	cbz	r3, 2f7f2 <nrf_cloud_fota_update_check+0x2e>
		return -ENXIO;
	} else if (topic_req.topic.utf8 == NULL) {
   2f7cc:	4a0d      	ldr	r2, [pc, #52]	; (2f804 <nrf_cloud_fota_update_check+0x40>)
   2f7ce:	6813      	ldr	r3, [r2, #0]
   2f7d0:	b193      	cbz	r3, 2f7f8 <nrf_cloud_fota_update_check+0x34>
		.message_id = NCT_MSG_ID_FOTA_REQUEST,
		.dup_flag = 0,
		.retain_flag = 0,
	};

	param.message.topic = topic_req;
   2f7d2:	ca07      	ldmia	r2, {r0, r1, r2}
   2f7d4:	466b      	mov	r3, sp
   2f7d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	param.message.payload.data = JOB_REQUEST_LATEST_PAYLOAD;
   2f7da:	4a0b      	ldr	r2, [pc, #44]	; (2f808 <nrf_cloud_fota_update_check+0x44>)
	struct mqtt_publish_param param = {
   2f7dc:	2104      	movs	r1, #4
	param.message.payload.data = JOB_REQUEST_LATEST_PAYLOAD;
   2f7de:	9203      	str	r2, [sp, #12]
	struct mqtt_publish_param param = {
   2f7e0:	22c9      	movs	r2, #201	; 0xc9
	param.message.payload.len = sizeof(JOB_REQUEST_LATEST_PAYLOAD)-1;

	return publish(&param);
   2f7e2:	4618      	mov	r0, r3
	struct mqtt_publish_param param = {
   2f7e4:	e9cd 1204 	strd	r1, r2, [sp, #16]
	return publish(&param);
   2f7e8:	f7ff fc90 	bl	2f10c <publish>
}
   2f7ec:	b007      	add	sp, #28
   2f7ee:	f85d fb04 	ldr.w	pc, [sp], #4
		return -ENXIO;
   2f7f2:	f06f 0005 	mvn.w	r0, #5
   2f7f6:	e7f9      	b.n	2f7ec <nrf_cloud_fota_update_check+0x28>
		return -EHOSTUNREACH;
   2f7f8:	f06f 0075 	mvn.w	r0, #117	; 0x75
   2f7fc:	e7f6      	b.n	2f7ec <nrf_cloud_fota_update_check+0x28>
   2f7fe:	bf00      	nop
   2f800:	2001a198 	.word	0x2001a198
   2f804:	200146d4 	.word	0x200146d4
   2f808:	0004a3ee 	.word	0x0004a3ee

0002f80c <nrf_cloud_fota_mqtt_evt_handler>:

	return 0;
}

int nrf_cloud_fota_mqtt_evt_handler(const struct mqtt_evt *evt)
{
   2f80c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8 == NULL ||
   2f810:	4ba4      	ldr	r3, [pc, #656]	; (2faa4 <nrf_cloud_fota_mqtt_evt_handler+0x298>)
{
   2f812:	4606      	mov	r6, r0
	if (sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8 == NULL ||
   2f814:	6818      	ldr	r0, [r3, #0]
{
   2f816:	b085      	sub	sp, #20
	if (sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8 == NULL ||
   2f818:	2800      	cmp	r0, #0
   2f81a:	f000 8141 	beq.w	2faa0 <nrf_cloud_fota_mqtt_evt_handler+0x294>
   2f81e:	685b      	ldr	r3, [r3, #4]
   2f820:	2b00      	cmp	r3, #0
   2f822:	f000 813d 	beq.w	2faa0 <nrf_cloud_fota_mqtt_evt_handler+0x294>
	    sub_topics[SUB_TOPIC_IDX_RCV].topic.size == 0) {
		/* Ignore MQTT until a topic has been set */
		return 1;
	}

	switch (evt->type) {
   2f826:	f896 9000 	ldrb.w	r9, [r6]
   2f82a:	f1b9 0f09 	cmp.w	r9, #9
   2f82e:	f200 80e4 	bhi.w	2f9fa <nrf_cloud_fota_mqtt_evt_handler+0x1ee>
   2f832:	e8df f019 	tbh	[pc, r9, lsl #1]
   2f836:	0135      	.short	0x0135
   2f838:	000a0135 	.word	0x000a0135
   2f83c:	01350114 	.word	0x01350114
   2f840:	01350135 	.word	0x01350135
   2f844:	010f0109 	.word	0x010f0109
   2f848:	0135      	.short	0x0135
	struct mqtt_puback_param ack = {
   2f84a:	8b33      	ldrh	r3, [r6, #24]
	if (strstr(sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8,
   2f84c:	6871      	ldr	r1, [r6, #4]
	struct mqtt_puback_param ack = {
   2f84e:	f8ad 300c 	strh.w	r3, [sp, #12]
	if (strstr(sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8,
   2f852:	f011 ffe1 	bl	41818 <strstr>
   2f856:	2800      	cmp	r0, #0
   2f858:	f000 8122 	beq.w	2faa0 <nrf_cloud_fota_mqtt_evt_handler+0x294>
	payload = nrf_cloud_calloc(p->message.payload.len + 1, 1);
   2f85c:	2101      	movs	r1, #1
   2f85e:	6970      	ldr	r0, [r6, #20]
   2f860:	4408      	add	r0, r1
   2f862:	f011 fd19 	bl	41298 <k_calloc>
	if (!payload) {
   2f866:	4680      	mov	r8, r0
   2f868:	bb38      	cbnz	r0, 2f8ba <nrf_cloud_fota_mqtt_evt_handler+0xae>
		LOG_ERR("Unable to allocate memory for job");
   2f86a:	2145      	movs	r1, #69	; 0x45
   2f86c:	488e      	ldr	r0, [pc, #568]	; (2faa8 <nrf_cloud_fota_mqtt_evt_handler+0x29c>)
   2f86e:	f00d f91f 	bl	3cab0 <z_log_minimal_printk>
	bool skip = false;
   2f872:	4647      	mov	r7, r8
		ret = -ENOMEM;
   2f874:	f06f 040b 	mvn.w	r4, #11
	if (p->message.topic.qos == MQTT_QOS_0_AT_MOST_ONCE) {
   2f878:	7b33      	ldrb	r3, [r6, #12]
   2f87a:	b173      	cbz	r3, 2f89a <nrf_cloud_fota_mqtt_evt_handler+0x8e>
		int ack_res = mqtt_publish_qos1_ack(client_mqtt, &ack);
   2f87c:	4b8b      	ldr	r3, [pc, #556]	; (2faac <nrf_cloud_fota_mqtt_evt_handler+0x2a0>)
   2f87e:	a903      	add	r1, sp, #12
   2f880:	6818      	ldr	r0, [r3, #0]
   2f882:	f00e fd09 	bl	3e298 <mqtt_publish_qos1_ack>
		if (ack_res) {
   2f886:	4605      	mov	r5, r0
   2f888:	b138      	cbz	r0, 2f89a <nrf_cloud_fota_mqtt_evt_handler+0x8e>
			LOG_ERR("MQTT ACK failed: %d", ack_res);
   2f88a:	4602      	mov	r2, r0
   2f88c:	2145      	movs	r1, #69	; 0x45
   2f88e:	4888      	ldr	r0, [pc, #544]	; (2fab0 <nrf_cloud_fota_mqtt_evt_handler+0x2a4>)
   2f890:	f00d f90e 	bl	3cab0 <z_log_minimal_printk>
			if (!ret) {
   2f894:	2c00      	cmp	r4, #0
   2f896:	bf08      	it	eq
   2f898:	462c      	moveq	r4, r5
	if (skip || job_info->type == NRF_CLOUD_FOTA_TYPE__INVALID) {
   2f89a:	b927      	cbnz	r7, 2f8a6 <nrf_cloud_fota_mqtt_evt_handler+0x9a>
   2f89c:	4d85      	ldr	r5, [pc, #532]	; (2fab4 <nrf_cloud_fota_mqtt_evt_handler+0x2a8>)
   2f89e:	7a2a      	ldrb	r2, [r5, #8]
   2f8a0:	2a03      	cmp	r2, #3
   2f8a2:	f040 8095 	bne.w	2f9d0 <nrf_cloud_fota_mqtt_evt_handler+0x1c4>
		if (payload_array) {
   2f8a6:	f1b8 0f00 	cmp.w	r8, #0
   2f8aa:	d002      	beq.n	2f8b2 <nrf_cloud_fota_mqtt_evt_handler+0xa6>
			cJSON_Delete(payload_array);
   2f8ac:	4640      	mov	r0, r8
   2f8ae:	f002 fb45 	bl	31f3c <cJSON_Delete>
		return 1;
	break;
	}

	return 0;
}
   2f8b2:	4620      	mov	r0, r4
   2f8b4:	b005      	add	sp, #20
   2f8b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ret = mqtt_readall_publish_payload(client_mqtt, payload,
   2f8ba:	4b7c      	ldr	r3, [pc, #496]	; (2faac <nrf_cloud_fota_mqtt_evt_handler+0x2a0>)
   2f8bc:	4601      	mov	r1, r0
   2f8be:	6972      	ldr	r2, [r6, #20]
   2f8c0:	6818      	ldr	r0, [r3, #0]
   2f8c2:	f00e fe0f 	bl	3e4e4 <mqtt_readall_publish_payload>
	if (ret) {
   2f8c6:	4604      	mov	r4, r0
   2f8c8:	b138      	cbz	r0, 2f8da <nrf_cloud_fota_mqtt_evt_handler+0xce>
		LOG_ERR("Error reading MQTT payload: %d", ret);
   2f8ca:	4602      	mov	r2, r0
   2f8cc:	2145      	movs	r1, #69	; 0x45
   2f8ce:	487a      	ldr	r0, [pc, #488]	; (2fab8 <nrf_cloud_fota_mqtt_evt_handler+0x2ac>)
   2f8d0:	f00d f8ee 	bl	3cab0 <z_log_minimal_printk>
		cJSON_Delete(array);
   2f8d4:	2500      	movs	r5, #0
	bool skip = false;
   2f8d6:	462f      	mov	r7, r5
   2f8d8:	e06a      	b.n	2f9b0 <nrf_cloud_fota_mqtt_evt_handler+0x1a4>
	return current_fota.parsed_payload != NULL;
   2f8da:	4f76      	ldr	r7, [pc, #472]	; (2fab4 <nrf_cloud_fota_mqtt_evt_handler+0x2a8>)
   2f8dc:	683b      	ldr	r3, [r7, #0]
	if (nrf_cloud_fota_is_active() && !ble_id) {
   2f8de:	b133      	cbz	r3, 2f8ee <nrf_cloud_fota_mqtt_evt_handler+0xe2>
		LOG_INF("Job in progress... skipping");
   2f8e0:	2149      	movs	r1, #73	; 0x49
   2f8e2:	4876      	ldr	r0, [pc, #472]	; (2fabc <nrf_cloud_fota_mqtt_evt_handler+0x2b0>)
   2f8e4:	f00d f8e4 	bl	3cab0 <z_log_minimal_printk>
	cJSON *payload_array = NULL;
   2f8e8:	4625      	mov	r5, r4
		skip = true;
   2f8ea:	2701      	movs	r7, #1
   2f8ec:	e060      	b.n	2f9b0 <nrf_cloud_fota_mqtt_evt_handler+0x1a4>
	cJSON *array = cJSON_Parse(payload_in);
   2f8ee:	4640      	mov	r0, r8
   2f8f0:	f010 f8fb 	bl	3faea <cJSON_Parse>
	if (!array || !cJSON_IsArray(array)) {
   2f8f4:	4605      	mov	r5, r0
   2f8f6:	b990      	cbnz	r0, 2f91e <nrf_cloud_fota_mqtt_evt_handler+0x112>
		LOG_ERR("Invalid JSON array");
   2f8f8:	2145      	movs	r1, #69	; 0x45
   2f8fa:	4871      	ldr	r0, [pc, #452]	; (2fac0 <nrf_cloud_fota_mqtt_evt_handler+0x2b4>)
   2f8fc:	f00d f8d8 	bl	3cab0 <z_log_minimal_printk>
		err = -EINVAL;
   2f900:	f06f 0415 	mvn.w	r4, #21
	memset(job_info, 0, sizeof(*job_info));
   2f904:	2214      	movs	r2, #20
   2f906:	2100      	movs	r1, #0
   2f908:	486e      	ldr	r0, [pc, #440]	; (2fac4 <nrf_cloud_fota_mqtt_evt_handler+0x2b8>)
   2f90a:	f011 fd6b 	bl	413e4 <memset>
	job_info->type = NRF_CLOUD_FOTA_TYPE__INVALID;
   2f90e:	2303      	movs	r3, #3
   2f910:	723b      	strb	r3, [r7, #8]
	if (array) {
   2f912:	2d00      	cmp	r5, #0
   2f914:	d0df      	beq.n	2f8d6 <nrf_cloud_fota_mqtt_evt_handler+0xca>
		cJSON_Delete(array);
   2f916:	4628      	mov	r0, r5
   2f918:	f002 fb10 	bl	31f3c <cJSON_Delete>
   2f91c:	e7da      	b.n	2f8d4 <nrf_cloud_fota_mqtt_evt_handler+0xc8>
	if (!array || !cJSON_IsArray(array)) {
   2f91e:	f010 fa14 	bl	3fd4a <cJSON_IsArray>
   2f922:	2800      	cmp	r0, #0
   2f924:	d0e8      	beq.n	2f8f8 <nrf_cloud_fota_mqtt_evt_handler+0xec>
	temp = cJSON_PrintUnformatted(array);
   2f926:	4628      	mov	r0, r5
   2f928:	f010 f8e3 	bl	3faf2 <cJSON_PrintUnformatted>
	if (temp) {
   2f92c:	b108      	cbz	r0, 2f932 <nrf_cloud_fota_mqtt_evt_handler+0x126>
		cJSON_FreeString(temp);
   2f92e:	f010 fa17 	bl	3fd60 <cJSON_FreeString>
	if (get_string_from_array(array, RCV_ITEM_IDX_JOB_ID - offset,
   2f932:	2100      	movs	r1, #0
   2f934:	4628      	mov	r0, r5
   2f936:	4a64      	ldr	r2, [pc, #400]	; (2fac8 <nrf_cloud_fota_mqtt_evt_handler+0x2bc>)
   2f938:	f7fb f9e0 	bl	2acfc <get_string_from_array>
   2f93c:	b130      	cbz	r0, 2f94c <nrf_cloud_fota_mqtt_evt_handler+0x140>
		LOG_ERR("Error parsing job info");
   2f93e:	2145      	movs	r1, #69	; 0x45
   2f940:	4862      	ldr	r0, [pc, #392]	; (2facc <nrf_cloud_fota_mqtt_evt_handler+0x2c0>)
   2f942:	f00d f8b5 	bl	3cab0 <z_log_minimal_printk>
	int err = -ENOMSG;
   2f946:	f06f 0422 	mvn.w	r4, #34	; 0x22
		goto cleanup;
   2f94a:	e7db      	b.n	2f904 <nrf_cloud_fota_mqtt_evt_handler+0xf8>
	    get_string_from_array(array, RCV_ITEM_IDX_FILE_HOST - offset,
   2f94c:	2103      	movs	r1, #3
   2f94e:	4628      	mov	r0, r5
   2f950:	4a5f      	ldr	r2, [pc, #380]	; (2fad0 <nrf_cloud_fota_mqtt_evt_handler+0x2c4>)
   2f952:	f7fb f9d3 	bl	2acfc <get_string_from_array>
				  &job_info->id) ||
   2f956:	2800      	cmp	r0, #0
   2f958:	d1f1      	bne.n	2f93e <nrf_cloud_fota_mqtt_evt_handler+0x132>
	    get_string_from_array(array, RCV_ITEM_IDX_FILE_PATH - offset,
   2f95a:	2104      	movs	r1, #4
   2f95c:	4628      	mov	r0, r5
   2f95e:	4a5d      	ldr	r2, [pc, #372]	; (2fad4 <nrf_cloud_fota_mqtt_evt_handler+0x2c8>)
   2f960:	f7fb f9cc 	bl	2acfc <get_string_from_array>
				  &job_info->host) ||
   2f964:	2800      	cmp	r0, #0
   2f966:	d1ea      	bne.n	2f93e <nrf_cloud_fota_mqtt_evt_handler+0x132>
	    get_number_from_array(array, RCV_ITEM_IDX_FW_TYPE - offset,
   2f968:	2101      	movs	r1, #1
   2f96a:	4628      	mov	r0, r5
   2f96c:	4a55      	ldr	r2, [pc, #340]	; (2fac4 <nrf_cloud_fota_mqtt_evt_handler+0x2b8>)
   2f96e:	f00f fefc 	bl	3f76a <get_number_from_array>
				  &job_info->path) ||
   2f972:	2800      	cmp	r0, #0
   2f974:	d1e3      	bne.n	2f93e <nrf_cloud_fota_mqtt_evt_handler+0x132>
	    get_number_from_array(array, RCV_ITEM_IDX_FILE_SIZE - offset,
   2f976:	2102      	movs	r1, #2
   2f978:	4628      	mov	r0, r5
   2f97a:	4a57      	ldr	r2, [pc, #348]	; (2fad8 <nrf_cloud_fota_mqtt_evt_handler+0x2cc>)
   2f97c:	f00f fef5 	bl	3f76a <get_number_from_array>
				  (int *)&job_info->type) ||
   2f980:	4604      	mov	r4, r0
   2f982:	2800      	cmp	r0, #0
   2f984:	d1db      	bne.n	2f93e <nrf_cloud_fota_mqtt_evt_handler+0x132>
	job_id_len = strlen(job_info->id);
   2f986:	68f8      	ldr	r0, [r7, #12]
   2f988:	f7ed fc5b 	bl	1d242 <strlen>
	if (job_id_len > (NRF_CLOUD_FOTA_JOB_ID_SIZE - 1)) {
   2f98c:	2824      	cmp	r0, #36	; 0x24
	job_id_len = strlen(job_info->id);
   2f98e:	4602      	mov	r2, r0
	if (job_id_len > (NRF_CLOUD_FOTA_JOB_ID_SIZE - 1)) {
   2f990:	d905      	bls.n	2f99e <nrf_cloud_fota_mqtt_evt_handler+0x192>
		LOG_ERR("Job ID length: %d, exceeds allowed length: %d",
   2f992:	2324      	movs	r3, #36	; 0x24
   2f994:	2145      	movs	r1, #69	; 0x45
   2f996:	4851      	ldr	r0, [pc, #324]	; (2fadc <nrf_cloud_fota_mqtt_evt_handler+0x2d0>)
   2f998:	f00d f88a 	bl	3cab0 <z_log_minimal_printk>
		goto cleanup;
   2f99c:	e7d3      	b.n	2f946 <nrf_cloud_fota_mqtt_evt_handler+0x13a>
	    job_info->type >= NRF_CLOUD_FOTA_TYPE__INVALID) {
   2f99e:	7a3a      	ldrb	r2, [r7, #8]
	if (job_info->type < NRF_CLOUD_FOTA_TYPE__FIRST ||
   2f9a0:	2a02      	cmp	r2, #2
   2f9a2:	d80a      	bhi.n	2f9ba <nrf_cloud_fota_mqtt_evt_handler+0x1ae>
	if (ret == 0 && strcmp(last_job, job_info->id) == 0) {
   2f9a4:	68f9      	ldr	r1, [r7, #12]
   2f9a6:	484e      	ldr	r0, [pc, #312]	; (2fae0 <nrf_cloud_fota_mqtt_evt_handler+0x2d4>)
   2f9a8:	f7ed fc41 	bl	1d22e <strcmp>
   2f9ac:	b150      	cbz	r0, 2f9c4 <nrf_cloud_fota_mqtt_evt_handler+0x1b8>
	bool skip = false;
   2f9ae:	4627      	mov	r7, r4
		nrf_cloud_free(payload);
   2f9b0:	4640      	mov	r0, r8
   2f9b2:	f011 fc66 	bl	41282 <k_free>
   2f9b6:	46a8      	mov	r8, r5
   2f9b8:	e75e      	b.n	2f878 <nrf_cloud_fota_mqtt_evt_handler+0x6c>
		LOG_ERR("Invalid FOTA type: %d", job_info->type);
   2f9ba:	2145      	movs	r1, #69	; 0x45
   2f9bc:	4849      	ldr	r0, [pc, #292]	; (2fae4 <nrf_cloud_fota_mqtt_evt_handler+0x2d8>)
   2f9be:	f00d f877 	bl	3cab0 <z_log_minimal_printk>
   2f9c2:	e7c0      	b.n	2f946 <nrf_cloud_fota_mqtt_evt_handler+0x13a>
		LOG_INF("Job %s already completed... skipping",
   2f9c4:	2149      	movs	r1, #73	; 0x49
   2f9c6:	4a46      	ldr	r2, [pc, #280]	; (2fae0 <nrf_cloud_fota_mqtt_evt_handler+0x2d4>)
   2f9c8:	4847      	ldr	r0, [pc, #284]	; (2fae8 <nrf_cloud_fota_mqtt_evt_handler+0x2dc>)
   2f9ca:	f00d f871 	bl	3cab0 <z_log_minimal_printk>
   2f9ce:	e78c      	b.n	2f8ea <nrf_cloud_fota_mqtt_evt_handler+0xde>
	switch (job->info.type) {
   2f9d0:	2a01      	cmp	r2, #1
		current_fota.parsed_payload = payload_array;
   2f9d2:	f8c5 8000 	str.w	r8, [r5]
	switch (job->info.type) {
   2f9d6:	d014      	beq.n	2fa02 <nrf_cloud_fota_mqtt_evt_handler+0x1f6>
   2f9d8:	f012 0ffd 	tst.w	r2, #253	; 0xfd
   2f9dc:	d00f      	beq.n	2f9fe <nrf_cloud_fota_mqtt_evt_handler+0x1f2>
		LOG_ERR("Unhandled FOTA type: %d", job->info.type);
   2f9de:	2145      	movs	r1, #69	; 0x45
   2f9e0:	4842      	ldr	r0, [pc, #264]	; (2faec <nrf_cloud_fota_mqtt_evt_handler+0x2e0>)
   2f9e2:	f00d f865 	bl	3cab0 <z_log_minimal_printk>
		return -EFTYPE;
   2f9e6:	f06f 044e 	mvn.w	r4, #78	; 0x4e
		(void)send_job_update(&current_fota);
   2f9ea:	4832      	ldr	r0, [pc, #200]	; (2fab4 <nrf_cloud_fota_mqtt_evt_handler+0x2a8>)
   2f9ec:	f7ff fc5a 	bl	2f2a4 <send_job_update>
		if (ret) {
   2f9f0:	2c00      	cmp	r4, #0
   2f9f2:	f43f af5e 	beq.w	2f8b2 <nrf_cloud_fota_mqtt_evt_handler+0xa6>
			cleanup_job(&current_fota);
   2f9f6:	f7ff fd1f 	bl	2f438 <cleanup_job.constprop.0>
   2f9fa:	2400      	movs	r4, #0
   2f9fc:	e759      	b.n	2f8b2 <nrf_cloud_fota_mqtt_evt_handler+0xa6>
		img_type = DFU_TARGET_IMAGE_TYPE_MCUBOOT;
   2f9fe:	f04f 0901 	mov.w	r9, #1
	ret = fota_download_start_with_image_type(job->info.host,
   2fa02:	f240 63a4 	movw	r3, #1700	; 0x6a4
   2fa06:	f8cd 9004 	str.w	r9, [sp, #4]
   2fa0a:	9300      	str	r3, [sp, #0]
   2fa0c:	4a38      	ldr	r2, [pc, #224]	; (2faf0 <nrf_cloud_fota_mqtt_evt_handler+0x2e4>)
   2fa0e:	2300      	movs	r3, #0
   2fa10:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
   2fa14:	f001 f90c 	bl	30c30 <fota_download_start_with_image_type>
	if (ret) {
   2fa18:	4604      	mov	r4, r0
   2fa1a:	b158      	cbz	r0, 2fa34 <nrf_cloud_fota_mqtt_evt_handler+0x228>
		LOG_ERR("Failed to start FOTA download: %d", ret);
   2fa1c:	4602      	mov	r2, r0
   2fa1e:	2145      	movs	r1, #69	; 0x45
   2fa20:	4834      	ldr	r0, [pc, #208]	; (2faf4 <nrf_cloud_fota_mqtt_evt_handler+0x2e8>)
   2fa22:	f00d f845 	bl	3cab0 <z_log_minimal_printk>
		job->status = NRF_CLOUD_FOTA_FAILED;
   2fa26:	2002      	movs	r0, #2
		job->error = NRF_CLOUD_FOTA_ERROR_DOWNLOAD_START;
   2fa28:	2301      	movs	r3, #1
		job->status = NRF_CLOUD_FOTA_FAILED;
   2fa2a:	7128      	strb	r0, [r5, #4]
		job->error = NRF_CLOUD_FOTA_ERROR_DOWNLOAD_START;
   2fa2c:	772b      	strb	r3, [r5, #28]
		send_event(NRF_CLOUD_FOTA_EVT_START, job);
   2fa2e:	f7ff fc17 	bl	2f260 <send_event.constprop.0>
   2fa32:	e7da      	b.n	2f9ea <nrf_cloud_fota_mqtt_evt_handler+0x1de>
		LOG_INF("Downloading update");
   2fa34:	4830      	ldr	r0, [pc, #192]	; (2faf8 <nrf_cloud_fota_mqtt_evt_handler+0x2ec>)
   2fa36:	2149      	movs	r1, #73	; 0x49
   2fa38:	f00d f83a 	bl	3cab0 <z_log_minimal_printk>
		job->status = NRF_CLOUD_FOTA_DOWNLOADING;
   2fa3c:	2307      	movs	r3, #7
		send_event(NRF_CLOUD_FOTA_EVT_START, job);
   2fa3e:	4620      	mov	r0, r4
		job->sent_dl_progress = 0;
   2fa40:	e9c5 4408 	strd	r4, r4, [r5, #32]
		job->status = NRF_CLOUD_FOTA_DOWNLOADING;
   2fa44:	712b      	strb	r3, [r5, #4]
		send_event(NRF_CLOUD_FOTA_EVT_START, job);
   2fa46:	e7f2      	b.n	2fa2e <nrf_cloud_fota_mqtt_evt_handler+0x222>
		if (evt->param.suback.message_id != NCT_MSG_ID_FOTA_SUB) {
   2fa48:	88b3      	ldrh	r3, [r6, #4]
   2fa4a:	2b67      	cmp	r3, #103	; 0x67
   2fa4c:	d128      	bne.n	2faa0 <nrf_cloud_fota_mqtt_evt_handler+0x294>
		nrf_cloud_fota_update_check();
   2fa4e:	f7ff feb9 	bl	2f7c4 <nrf_cloud_fota_update_check>
		break;
   2fa52:	e7d2      	b.n	2f9fa <nrf_cloud_fota_mqtt_evt_handler+0x1ee>
		if (evt->param.unsuback.message_id != NCT_MSG_ID_FOTA_UNSUB) {
   2fa54:	88b4      	ldrh	r4, [r6, #4]
   2fa56:	3c99      	subs	r4, #153	; 0x99
   2fa58:	bf18      	it	ne
   2fa5a:	2401      	movne	r4, #1
   2fa5c:	e729      	b.n	2f8b2 <nrf_cloud_fota_mqtt_evt_handler+0xa6>
		switch (evt->param.puback.message_id) {
   2fa5e:	88b4      	ldrh	r4, [r6, #4]
   2fa60:	f5b4 7f97 	cmp.w	r4, #302	; 0x12e
   2fa64:	d00c      	beq.n	2fa80 <nrf_cloud_fota_mqtt_evt_handler+0x274>
   2fa66:	d805      	bhi.n	2fa74 <nrf_cloud_fota_mqtt_evt_handler+0x268>
		return 1;
   2fa68:	3cc9      	subs	r4, #201	; 0xc9
   2fa6a:	2c01      	cmp	r4, #1
   2fa6c:	bf94      	ite	ls
   2fa6e:	2400      	movls	r4, #0
   2fa70:	2401      	movhi	r4, #1
   2fa72:	e71e      	b.n	2f8b2 <nrf_cloud_fota_mqtt_evt_handler+0xa6>
   2fa74:	f240 102f 	movw	r0, #303	; 0x12f
   2fa78:	1a24      	subs	r4, r4, r0
   2fa7a:	bf18      	it	ne
   2fa7c:	2401      	movne	r4, #1
   2fa7e:	e718      	b.n	2f8b2 <nrf_cloud_fota_mqtt_evt_handler+0xa6>
		switch (saved_job.validate) {
   2fa80:	4b1e      	ldr	r3, [pc, #120]	; (2fafc <nrf_cloud_fota_mqtt_evt_handler+0x2f0>)
   2fa82:	7818      	ldrb	r0, [r3, #0]
   2fa84:	2801      	cmp	r0, #1
   2fa86:	d008      	beq.n	2fa9a <nrf_cloud_fota_mqtt_evt_handler+0x28e>
   2fa88:	3802      	subs	r0, #2
   2fa8a:	2802      	cmp	r0, #2
   2fa8c:	d8b5      	bhi.n	2f9fa <nrf_cloud_fota_mqtt_evt_handler+0x1ee>
			save_validate_status(saved_job.id, saved_job.type,
   2fa8e:	2205      	movs	r2, #5
   2fa90:	7859      	ldrb	r1, [r3, #1]
   2fa92:	1c98      	adds	r0, r3, #2
   2fa94:	f7ff fb4e 	bl	2f134 <save_validate_status>
			break;
   2fa98:	e7af      	b.n	2f9fa <nrf_cloud_fota_mqtt_evt_handler+0x1ee>
			send_event(NRF_CLOUD_FOTA_EVT_DONE, &current_fota);
   2fa9a:	f7ff fbe1 	bl	2f260 <send_event.constprop.0>
			break;
   2fa9e:	e7ac      	b.n	2f9fa <nrf_cloud_fota_mqtt_evt_handler+0x1ee>
		return 1;
   2faa0:	2401      	movs	r4, #1
   2faa2:	e706      	b.n	2f8b2 <nrf_cloud_fota_mqtt_evt_handler+0xa6>
   2faa4:	200146c8 	.word	0x200146c8
   2faa8:	0004a3f3 	.word	0x0004a3f3
   2faac:	2001a198 	.word	0x2001a198
   2fab0:	0004a50b 	.word	0x0004a50b
   2fab4:	2001a19c 	.word	0x2001a19c
   2fab8:	0004a41a 	.word	0x0004a41a
   2fabc:	0004a43e 	.word	0x0004a43e
   2fac0:	0004a45f 	.word	0x0004a45f
   2fac4:	2001a1a4 	.word	0x2001a1a4
   2fac8:	2001a1a8 	.word	0x2001a1a8
   2facc:	0004a477 	.word	0x0004a477
   2fad0:	2001a1ac 	.word	0x2001a1ac
   2fad4:	2001a1b0 	.word	0x2001a1b0
   2fad8:	2001a1b4 	.word	0x2001a1b4
   2fadc:	0004a493 	.word	0x0004a493
   2fae0:	2001d2d2 	.word	0x2001d2d2
   2fae4:	0004a4c6 	.word	0x0004a4c6
   2fae8:	0004a4e1 	.word	0x0004a4e1
   2faec:	0004a524 	.word	0x0004a524
   2faf0:	01010001 	.word	0x01010001
   2faf4:	0004a541 	.word	0x0004a541
   2faf8:	0004a568 	.word	0x0004a568
   2fafc:	20014c47 	.word	0x20014c47

0002fb00 <nrf_cloud_bootloader_fota_slot_set>:
#include <net/nrf_cloud.h>

LOG_MODULE_REGISTER(nrf_cloud_fota_common, CONFIG_NRF_CLOUD_LOG_LEVEL);

int nrf_cloud_bootloader_fota_slot_set(struct nrf_cloud_settings_fota_job * const job)
{
   2fb00:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err = -ENOTSUP;

	if (!job) {
   2fb02:	4605      	mov	r5, r0
   2fb04:	b318      	cbz	r0, 2fb4e <nrf_cloud_bootloader_fota_slot_set+0x4e>
		return -EINVAL;
	}

	/* Only set the slot flag once for bootloader updates */
	if (job->type == NRF_CLOUD_FOTA_BOOTLOADER &&
   2fb06:	7843      	ldrb	r3, [r0, #1]
   2fb08:	2b02      	cmp	r3, #2
   2fb0a:	d123      	bne.n	2fb54 <nrf_cloud_bootloader_fota_slot_set+0x54>
   2fb0c:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   2fb10:	07db      	lsls	r3, r3, #31
   2fb12:	d41f      	bmi.n	2fb54 <nrf_cloud_bootloader_fota_slot_set+0x54>
	    !(job->bl_flags & NRF_CLOUD_FOTA_BL_STATUS_S0_FLAG_SET)) {
		bool s0_active;

#if defined(CONFIG_FOTA_DOWNLOAD)
		err = fota_download_s0_active_get(&s0_active);
   2fb14:	f10d 0007 	add.w	r0, sp, #7
   2fb18:	f00f fe6e 	bl	3f7f8 <fota_download_s0_active_get>
#endif

		if (err) {
   2fb1c:	4604      	mov	r4, r0
   2fb1e:	b138      	cbz	r0, 2fb30 <nrf_cloud_bootloader_fota_slot_set+0x30>
			LOG_ERR("Unable to determine active B1 slot, error: %d", err);
   2fb20:	4602      	mov	r2, r0
   2fb22:	2145      	movs	r1, #69	; 0x45
   2fb24:	480c      	ldr	r0, [pc, #48]	; (2fb58 <nrf_cloud_bootloader_fota_slot_set+0x58>)
   2fb26:	f00c ffc3 	bl	3cab0 <z_log_minimal_printk>

		job->bl_flags |= NRF_CLOUD_FOTA_BL_STATUS_S0_FLAG_SET;
	}

	return 0;
}
   2fb2a:	4620      	mov	r0, r4
   2fb2c:	b003      	add	sp, #12
   2fb2e:	bd30      	pop	{r4, r5, pc}
		if (s0_active) {
   2fb30:	f89d 2007 	ldrb.w	r2, [sp, #7]
			job->bl_flags |= NRF_CLOUD_FOTA_BL_STATUS_S0_WAS_ACTIVE;
   2fb34:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
		if (s0_active) {
   2fb38:	b132      	cbz	r2, 2fb48 <nrf_cloud_bootloader_fota_slot_set+0x48>
			job->bl_flags |= NRF_CLOUD_FOTA_BL_STATUS_S0_WAS_ACTIVE;
   2fb3a:	f043 0302 	orr.w	r3, r3, #2
		job->bl_flags |= NRF_CLOUD_FOTA_BL_STATUS_S0_FLAG_SET;
   2fb3e:	f043 0301 	orr.w	r3, r3, #1
   2fb42:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
   2fb46:	e7f0      	b.n	2fb2a <nrf_cloud_bootloader_fota_slot_set+0x2a>
			job->bl_flags &= ~NRF_CLOUD_FOTA_BL_STATUS_S0_WAS_ACTIVE;
   2fb48:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   2fb4c:	e7f7      	b.n	2fb3e <nrf_cloud_bootloader_fota_slot_set+0x3e>
		return -EINVAL;
   2fb4e:	f06f 0415 	mvn.w	r4, #21
   2fb52:	e7ea      	b.n	2fb2a <nrf_cloud_bootloader_fota_slot_set+0x2a>
	return 0;
   2fb54:	2400      	movs	r4, #0
   2fb56:	e7e8      	b.n	2fb2a <nrf_cloud_bootloader_fota_slot_set+0x2a>
   2fb58:	0004a619 	.word	0x0004a619

0002fb5c <nrf_cloud_pending_fota_job_process>:

int nrf_cloud_pending_fota_job_process(struct nrf_cloud_settings_fota_job * const job,
				       bool * const reboot_required)
{
   2fb5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2fb60:	460f      	mov	r7, r1
	if (!job || !reboot_required) {
   2fb62:	4605      	mov	r5, r0
   2fb64:	2800      	cmp	r0, #0
   2fb66:	f000 8085 	beq.w	2fc74 <nrf_cloud_pending_fota_job_process+0x118>
   2fb6a:	2900      	cmp	r1, #0
   2fb6c:	f000 8082 	beq.w	2fc74 <nrf_cloud_pending_fota_job_process+0x118>
		return -EINVAL;
	}

	if (job->validate != NRF_CLOUD_FOTA_VALIDATE_PENDING) {
   2fb70:	f890 8000 	ldrb.w	r8, [r0]
   2fb74:	f1b8 0f01 	cmp.w	r8, #1
   2fb78:	d17f      	bne.n	2fc7a <nrf_cloud_pending_fota_job_process+0x11e>
		return -ENODEV;
	}

	int err;

	if (job->type == NRF_CLOUD_FOTA_MODEM) {
   2fb7a:	7843      	ldrb	r3, [r0, #1]
   2fb7c:	2b01      	cmp	r3, #1
   2fb7e:	d124      	bne.n	2fbca <nrf_cloud_pending_fota_job_process+0x6e>
#if defined(CONFIG_NRF_MODEM_LIB)
		int modem_lib_init_result = nrf_modem_lib_get_init_ret();
   2fb80:	f7f5 fd80 	bl	25684 <nrf_modem_lib_get_init_ret>

		switch (modem_lib_init_result) {
   2fb84:	4b3e      	ldr	r3, [pc, #248]	; (2fc80 <nrf_cloud_pending_fota_job_process+0x124>)
		int modem_lib_init_result = nrf_modem_lib_get_init_ret();
   2fb86:	4602      	mov	r2, r0
		switch (modem_lib_init_result) {
   2fb88:	4298      	cmp	r0, r3
   2fb8a:	dc08      	bgt.n	2fb9e <nrf_cloud_pending_fota_job_process+0x42>
   2fb8c:	f1b0 6f88 	cmp.w	r0, #71303168	; 0x4400000
   2fb90:	dd15      	ble.n	2fbbe <nrf_cloud_pending_fota_job_process+0x62>
			break;
		case MODEM_DFU_RESULT_UUID_ERROR:
		case MODEM_DFU_RESULT_AUTH_ERROR:
		case MODEM_DFU_RESULT_HARDWARE_ERROR:
		case MODEM_DFU_RESULT_INTERNAL_ERROR:
			LOG_ERR("Modem FOTA error: %d", modem_lib_init_result);
   2fb92:	2145      	movs	r1, #69	; 0x45
   2fb94:	483b      	ldr	r0, [pc, #236]	; (2fc84 <nrf_cloud_pending_fota_job_process+0x128>)
   2fb96:	f00c ff8b 	bl	3cab0 <z_log_minimal_printk>
			job->validate = NRF_CLOUD_FOTA_VALIDATE_FAIL;
   2fb9a:	2303      	movs	r3, #3
   2fb9c:	e007      	b.n	2fbae <nrf_cloud_pending_fota_job_process+0x52>
		switch (modem_lib_init_result) {
   2fb9e:	4b3a      	ldr	r3, [pc, #232]	; (2fc88 <nrf_cloud_pending_fota_job_process+0x12c>)
   2fba0:	4298      	cmp	r0, r3
   2fba2:	d10c      	bne.n	2fbbe <nrf_cloud_pending_fota_job_process+0x62>
			LOG_INF("Modem FOTA update confirmed");
   2fba4:	2149      	movs	r1, #73	; 0x49
   2fba6:	4839      	ldr	r0, [pc, #228]	; (2fc8c <nrf_cloud_pending_fota_job_process+0x130>)
   2fba8:	f00c ff82 	bl	3cab0 <z_log_minimal_printk>
			job->validate = NRF_CLOUD_FOTA_VALIDATE_PASS;
   2fbac:	2302      	movs	r3, #2
			break;
		default:
			LOG_INF("Modem FOTA result unknown: %d", modem_lib_init_result);
			job->validate = NRF_CLOUD_FOTA_VALIDATE_UNKNOWN;
   2fbae:	702b      	strb	r3, [r5, #0]
			break;
		}
#else
		job->validate = NRF_CLOUD_FOTA_VALIDATE_UNKNOWN;
#endif
		*reboot_required = true;
   2fbb0:	2301      	movs	r3, #1

		LOG_INF("Modem FOTA update complete on reboot");
   2fbb2:	2149      	movs	r1, #73	; 0x49
   2fbb4:	4836      	ldr	r0, [pc, #216]	; (2fc90 <nrf_cloud_pending_fota_job_process+0x134>)
		*reboot_required = true;
   2fbb6:	703b      	strb	r3, [r7, #0]
#endif
		}

		if (err) {
			job->validate = NRF_CLOUD_FOTA_VALIDATE_UNKNOWN;
			LOG_WRN("Bootloader FOTA update complete but not validated");
   2fbb8:	f00c ff7a 	bl	3cab0 <z_log_minimal_printk>
   2fbbc:	e00b      	b.n	2fbd6 <nrf_cloud_pending_fota_job_process+0x7a>
			LOG_INF("Modem FOTA result unknown: %d", modem_lib_init_result);
   2fbbe:	2149      	movs	r1, #73	; 0x49
   2fbc0:	4834      	ldr	r0, [pc, #208]	; (2fc94 <nrf_cloud_pending_fota_job_process+0x138>)
   2fbc2:	f00c ff75 	bl	3cab0 <z_log_minimal_printk>
			job->validate = NRF_CLOUD_FOTA_VALIDATE_UNKNOWN;
   2fbc6:	2304      	movs	r3, #4
   2fbc8:	e7f1      	b.n	2fbae <nrf_cloud_pending_fota_job_process+0x52>
	} else if (job->type == NRF_CLOUD_FOTA_APPLICATION) {
   2fbca:	b9eb      	cbnz	r3, 2fc08 <nrf_cloud_pending_fota_job_process+0xac>
		job->validate = NRF_CLOUD_FOTA_VALIDATE_UNKNOWN;
   2fbcc:	2304      	movs	r3, #4
   2fbce:	7003      	strb	r3, [r0, #0]
		if (!boot_is_img_confirmed()) {
   2fbd0:	f00d fdb7 	bl	3d742 <boot_is_img_confirmed>
   2fbd4:	b108      	cbz	r0, 2fbda <nrf_cloud_pending_fota_job_process+0x7e>
		}
	}

	return 0;
   2fbd6:	2400      	movs	r4, #0
   2fbd8:	e027      	b.n	2fc2a <nrf_cloud_pending_fota_job_process+0xce>
			err = boot_write_img_confirmed();
   2fbda:	f00d fdc9 	bl	3d770 <boot_write_img_confirmed>
			if (err) {
   2fbde:	4604      	mov	r4, r0
   2fbe0:	b158      	cbz	r0, 2fbfa <nrf_cloud_pending_fota_job_process+0x9e>
				LOG_ERR("Application FOTA update confirmation failed: %d",
   2fbe2:	4602      	mov	r2, r0
   2fbe4:	2145      	movs	r1, #69	; 0x45
   2fbe6:	482c      	ldr	r0, [pc, #176]	; (2fc98 <nrf_cloud_pending_fota_job_process+0x13c>)
   2fbe8:	f00c ff62 	bl	3cab0 <z_log_minimal_printk>
				job->validate = NRF_CLOUD_FOTA_VALIDATE_FAIL;
   2fbec:	2303      	movs	r3, #3
				LOG_INF("Rebooting to revert to previous version...");
   2fbee:	2149      	movs	r1, #73	; 0x49
				job->validate = NRF_CLOUD_FOTA_VALIDATE_FAIL;
   2fbf0:	702b      	strb	r3, [r5, #0]
				LOG_INF("Rebooting to revert to previous version...");
   2fbf2:	482a      	ldr	r0, [pc, #168]	; (2fc9c <nrf_cloud_pending_fota_job_process+0x140>)
				*reboot_required = true;
   2fbf4:	f887 8000 	strb.w	r8, [r7]
   2fbf8:	e7de      	b.n	2fbb8 <nrf_cloud_pending_fota_job_process+0x5c>
				LOG_INF("App FOTA update confirmed");
   2fbfa:	2149      	movs	r1, #73	; 0x49
   2fbfc:	4828      	ldr	r0, [pc, #160]	; (2fca0 <nrf_cloud_pending_fota_job_process+0x144>)
				LOG_INF("Bootloader slot changed, FOTA update validated");
   2fbfe:	f00c ff57 	bl	3cab0 <z_log_minimal_printk>
				job->validate = NRF_CLOUD_FOTA_VALIDATE_PASS;
   2fc02:	2302      	movs	r3, #2
				job->validate = NRF_CLOUD_FOTA_VALIDATE_FAIL;
   2fc04:	702b      	strb	r3, [r5, #0]
   2fc06:	e010      	b.n	2fc2a <nrf_cloud_pending_fota_job_process+0xce>
	} else if (job->type == NRF_CLOUD_FOTA_BOOTLOADER) {
   2fc08:	2b02      	cmp	r3, #2
   2fc0a:	d1e4      	bne.n	2fbd6 <nrf_cloud_pending_fota_job_process+0x7a>
		if (!(job->bl_flags & NRF_CLOUD_FOTA_BL_STATUS_REBOOTED)) {
   2fc0c:	f890 6027 	ldrb.w	r6, [r0, #39]	; 0x27
   2fc10:	f016 0404 	ands.w	r4, r6, #4
   2fc14:	d10d      	bne.n	2fc32 <nrf_cloud_pending_fota_job_process+0xd6>
			job->bl_flags |= NRF_CLOUD_FOTA_BL_STATUS_REBOOTED;
   2fc16:	f046 0604 	orr.w	r6, r6, #4
   2fc1a:	f880 6027 	strb.w	r6, [r0, #39]	; 0x27
			*reboot_required = true;
   2fc1e:	f881 8000 	strb.w	r8, [r1]
			LOG_INF("Bootloader FOTA update will be processed on reboot");
   2fc22:	4820      	ldr	r0, [pc, #128]	; (2fca4 <nrf_cloud_pending_fota_job_process+0x148>)
   2fc24:	2149      	movs	r1, #73	; 0x49
   2fc26:	f00c ff43 	bl	3cab0 <z_log_minimal_printk>
}
   2fc2a:	4620      	mov	r0, r4
   2fc2c:	b002      	add	sp, #8
   2fc2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (job->bl_flags & NRF_CLOUD_FOTA_BL_STATUS_S0_FLAG_SET) {
   2fc32:	07f3      	lsls	r3, r6, #31
   2fc34:	d50a      	bpl.n	2fc4c <nrf_cloud_pending_fota_job_process+0xf0>
			err = fota_download_s0_active_get(&s0_active);
   2fc36:	f10d 0007 	add.w	r0, sp, #7
   2fc3a:	f00f fddd 	bl	3f7f8 <fota_download_s0_active_get>
			if (err) {
   2fc3e:	4604      	mov	r4, r0
   2fc40:	b148      	cbz	r0, 2fc56 <nrf_cloud_pending_fota_job_process+0xfa>
				LOG_WRN("Active slot unknown, error: %d", err);
   2fc42:	4602      	mov	r2, r0
   2fc44:	2157      	movs	r1, #87	; 0x57
   2fc46:	4818      	ldr	r0, [pc, #96]	; (2fca8 <nrf_cloud_pending_fota_job_process+0x14c>)
   2fc48:	f00c ff32 	bl	3cab0 <z_log_minimal_printk>
			job->validate = NRF_CLOUD_FOTA_VALIDATE_UNKNOWN;
   2fc4c:	2304      	movs	r3, #4
			LOG_WRN("Bootloader FOTA update complete but not validated");
   2fc4e:	2157      	movs	r1, #87	; 0x57
   2fc50:	4816      	ldr	r0, [pc, #88]	; (2fcac <nrf_cloud_pending_fota_job_process+0x150>)
			job->validate = NRF_CLOUD_FOTA_VALIDATE_UNKNOWN;
   2fc52:	702b      	strb	r3, [r5, #0]
   2fc54:	e7b0      	b.n	2fbb8 <nrf_cloud_pending_fota_job_process+0x5c>
			} else if (s0_active != s0_prev) {
   2fc56:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2fc5a:	f3c6 0640 	ubfx	r6, r6, #1, #1
   2fc5e:	42b3      	cmp	r3, r6
   2fc60:	d002      	beq.n	2fc68 <nrf_cloud_pending_fota_job_process+0x10c>
				LOG_INF("Bootloader slot changed, FOTA update validated");
   2fc62:	2149      	movs	r1, #73	; 0x49
   2fc64:	4812      	ldr	r0, [pc, #72]	; (2fcb0 <nrf_cloud_pending_fota_job_process+0x154>)
   2fc66:	e7ca      	b.n	2fbfe <nrf_cloud_pending_fota_job_process+0xa2>
				LOG_WRN("Bootloader slot unchanged, FOTA update invalidated");
   2fc68:	2157      	movs	r1, #87	; 0x57
   2fc6a:	4812      	ldr	r0, [pc, #72]	; (2fcb4 <nrf_cloud_pending_fota_job_process+0x158>)
   2fc6c:	f00c ff20 	bl	3cab0 <z_log_minimal_printk>
				job->validate = NRF_CLOUD_FOTA_VALIDATE_FAIL;
   2fc70:	2303      	movs	r3, #3
   2fc72:	e7c7      	b.n	2fc04 <nrf_cloud_pending_fota_job_process+0xa8>
		return -EINVAL;
   2fc74:	f06f 0415 	mvn.w	r4, #21
   2fc78:	e7d7      	b.n	2fc2a <nrf_cloud_pending_fota_job_process+0xce>
		return -ENODEV;
   2fc7a:	f06f 0412 	mvn.w	r4, #18
   2fc7e:	e7d4      	b.n	2fc2a <nrf_cloud_pending_fota_job_process+0xce>
   2fc80:	04400004 	.word	0x04400004
   2fc84:	0004a66d 	.word	0x0004a66d
   2fc88:	05500001 	.word	0x05500001
   2fc8c:	0004a64c 	.word	0x0004a64c
   2fc90:	0004a6aa 	.word	0x0004a6aa
   2fc94:	0004a687 	.word	0x0004a687
   2fc98:	0004a6d4 	.word	0x0004a6d4
   2fc9c:	0004a709 	.word	0x0004a709
   2fca0:	0004a739 	.word	0x0004a739
   2fca4:	0004a758 	.word	0x0004a758
   2fca8:	0004a790 	.word	0x0004a790
   2fcac:	0004a820 	.word	0x0004a820
   2fcb0:	0004a7b4 	.word	0x0004a7b4
   2fcb4:	0004a7e8 	.word	0x0004a7e8

0002fcb8 <fragment_evt_send>:

	return 0;
}

static int fragment_evt_send(const struct download_client *client)
{
   2fcb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	__ASSERT(client->offset <= CONFIG_DOWNLOAD_CLIENT_BUF_SIZE,
   2fcba:	f640 03fc 	movw	r3, #2300	; 0x8fc
   2fcbe:	f8d0 2918 	ldr.w	r2, [r0, #2328]	; 0x918
{
   2fcc2:	4604      	mov	r4, r0
	__ASSERT(client->offset <= CONFIG_DOWNLOAD_CLIENT_BUF_SIZE,
   2fcc4:	429a      	cmp	r2, r3
   2fcc6:	d90a      	bls.n	2fcde <fragment_evt_send+0x26>
   2fcc8:	490d      	ldr	r1, [pc, #52]	; (2fd00 <fragment_evt_send+0x48>)
   2fcca:	480e      	ldr	r0, [pc, #56]	; (2fd04 <fragment_evt_send+0x4c>)
   2fccc:	f44f 72bd 	mov.w	r2, #378	; 0x17a
   2fcd0:	f00c feb4 	bl	3ca3c <assert_print>
   2fcd4:	f44f 71bd 	mov.w	r1, #378	; 0x17a
   2fcd8:	4809      	ldr	r0, [pc, #36]	; (2fd00 <fragment_evt_send+0x48>)
   2fcda:	f00c fea8 	bl	3ca2e <assert_post_action>
		 "Buffer overflow!");

	const struct download_client_evt evt = {
   2fcde:	2300      	movs	r3, #0
   2fce0:	f88d 3004 	strb.w	r3, [sp, #4]
		.id = DOWNLOAD_CLIENT_EVT_FRAGMENT,
		.fragment = {
			.buf = client->buf,
   2fce4:	f104 031c 	add.w	r3, r4, #28
	const struct download_client_evt evt = {
   2fce8:	9302      	str	r3, [sp, #8]
   2fcea:	f8d4 3918 	ldr.w	r3, [r4, #2328]	; 0x918
			.len = client->offset,
		}
	};

	return client->callback(&evt);
   2fcee:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
	const struct download_client_evt evt = {
   2fcf2:	9303      	str	r3, [sp, #12]
	return client->callback(&evt);
   2fcf4:	a801      	add	r0, sp, #4
   2fcf6:	f8d4 3a50 	ldr.w	r3, [r4, #2640]	; 0xa50
   2fcfa:	4798      	blx	r3
}
   2fcfc:	b004      	add	sp, #16
   2fcfe:	bd10      	pop	{r4, pc}
   2fd00:	0004a86d 	.word	0x0004a86d
   2fd04:	00043ff2 	.word	0x00043ff2

0002fd08 <socket_send>:
{
   2fd08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (timeout_ms <= 0) {
   2fd0c:	2a00      	cmp	r2, #0
{
   2fd0e:	4605      	mov	r5, r0
   2fd10:	460c      	mov	r4, r1
   2fd12:	b086      	sub	sp, #24
	if (timeout_ms <= 0) {
   2fd14:	dc06      	bgt.n	2fd24 <socket_send+0x1c>
	if (err) {
   2fd16:	2600      	movs	r6, #0
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   2fd18:	4637      	mov	r7, r6
		sent = send(client->fd, client->buf + off, len, 0);
   2fd1a:	f105 081c 	add.w	r8, r5, #28
	while (len) {
   2fd1e:	bb24      	cbnz	r4, 2fd6a <socket_send+0x62>
	return 0;
   2fd20:	4620      	mov	r0, r4
   2fd22:	e01f      	b.n	2fd64 <socket_send+0x5c>
		.tv_sec = (timeout_ms / 1000),
   2fd24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2fd28:	fb92 f1f3 	sdiv	r1, r2, r3
		.tv_usec = (timeout_ms % 1000) * 1000,
   2fd2c:	fb03 2211 	mls	r2, r3, r1, r2
   2fd30:	435a      	muls	r2, r3
		.tv_sec = (timeout_ms / 1000),
   2fd32:	17ce      	asrs	r6, r1, #31
   2fd34:	e9cd 1602 	strd	r1, r6, [sp, #8]
	err = set_snd_socket_timeout(client->fd, timeout);
   2fd38:	6800      	ldr	r0, [r0, #0]
	struct timeval timeo = {
   2fd3a:	9204      	str	r2, [sp, #16]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   2fd3c:	2310      	movs	r3, #16
   2fd3e:	2215      	movs	r2, #21
   2fd40:	9300      	str	r3, [sp, #0]
   2fd42:	2101      	movs	r1, #1
   2fd44:	ab02      	add	r3, sp, #8
   2fd46:	f00d faf3 	bl	3d330 <z_impl_zsock_setsockopt>
	if (err) {
   2fd4a:	2800      	cmp	r0, #0
   2fd4c:	d0e3      	beq.n	2fd16 <socket_send+0xe>
		LOG_WRN("Failed to set socket timeout, errno %d", errno);
   2fd4e:	f00d fcee 	bl	3d72e <__errno>
   2fd52:	2157      	movs	r1, #87	; 0x57
   2fd54:	6802      	ldr	r2, [r0, #0]
   2fd56:	480c      	ldr	r0, [pc, #48]	; (2fd88 <socket_send+0x80>)
   2fd58:	f00c feaa 	bl	3cab0 <z_log_minimal_printk>
			return -errno;
   2fd5c:	f00d fce7 	bl	3d72e <__errno>
   2fd60:	6800      	ldr	r0, [r0, #0]
   2fd62:	4240      	negs	r0, r0
}
   2fd64:	b006      	add	sp, #24
   2fd66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sent = send(client->fd, client->buf + off, len, 0);
   2fd6a:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   2fd6c:	2300      	movs	r3, #0
   2fd6e:	4622      	mov	r2, r4
   2fd70:	e9cd 7700 	strd	r7, r7, [sp]
   2fd74:	eb08 0106 	add.w	r1, r8, r6
   2fd78:	f00d fa2e 	bl	3d1d8 <z_impl_zsock_sendto>
		if (sent < 0) {
   2fd7c:	2800      	cmp	r0, #0
   2fd7e:	dbed      	blt.n	2fd5c <socket_send+0x54>
		off += sent;
   2fd80:	4406      	add	r6, r0
		len -= sent;
   2fd82:	1a24      	subs	r4, r4, r0
   2fd84:	e7cb      	b.n	2fd1e <socket_send+0x16>
   2fd86:	bf00      	nop
   2fd88:	0004a8b2 	.word	0x0004a8b2

0002fd8c <download_client_init>:
	goto restart_and_suspend;
}

int download_client_init(struct download_client *const client,
			 download_client_callback_t callback)
{
   2fd8c:	b530      	push	{r4, r5, lr}
	if (client == NULL || callback == NULL) {
   2fd8e:	4604      	mov	r4, r0
{
   2fd90:	b089      	sub	sp, #36	; 0x24
	if (client == NULL || callback == NULL) {
   2fd92:	b318      	cbz	r0, 2fddc <download_client_init+0x50>
   2fd94:	b311      	cbz	r1, 2fddc <download_client_init+0x50>
		return -EINVAL;
	}

	client->fd = -1;
   2fd96:	f04f 33ff 	mov.w	r3, #4294967295
   2fd9a:	6003      	str	r3, [r0, #0]
	client->callback = callback;
   2fd9c:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
   2fda0:	f8c3 1a50 	str.w	r1, [r3, #2640]	; 0xa50
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2fda4:	2200      	movs	r2, #0
   2fda6:	2300      	movs	r3, #0
   2fda8:	2500      	movs	r5, #0
   2fdaa:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2fdae:	230e      	movs	r3, #14
   2fdb0:	9000      	str	r0, [sp, #0]
   2fdb2:	e9cd 3503 	strd	r3, r5, [sp, #12]
   2fdb6:	f500 6125 	add.w	r1, r0, #2640	; 0xa50
   2fdba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   2fdbe:	e9cd 5501 	strd	r5, r5, [sp, #4]
   2fdc2:	4b08      	ldr	r3, [pc, #32]	; (2fde4 <download_client_init+0x58>)
   2fdc4:	f500 6018 	add.w	r0, r0, #2432	; 0x980
   2fdc8:	f006 fb36 	bl	36438 <z_impl_k_thread_create>

	/* The thread is spawned now, but it will suspend itself;
	 * it is resumed when the download is started via the API.
	 */
	client->tid =
   2fdcc:	f8c4 097c 	str.w	r0, [r4, #2428]	; 0x97c
	return z_impl_k_thread_name_set(thread, str);
   2fdd0:	4905      	ldr	r1, [pc, #20]	; (2fde8 <download_client_init+0x5c>)
   2fdd2:	f011 f8a7 	bl	40f24 <z_impl_k_thread_name_set>
				download_thread, client, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);

	k_thread_name_set(client->tid, "download_client");

	return 0;
   2fdd6:	4628      	mov	r0, r5
}
   2fdd8:	b009      	add	sp, #36	; 0x24
   2fdda:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2fddc:	f06f 0015 	mvn.w	r0, #21
   2fde0:	e7fa      	b.n	2fdd8 <download_client_init+0x4c>
   2fde2:	bf00      	nop
   2fde4:	0003021d 	.word	0x0003021d
   2fde8:	0004a8de 	.word	0x0004a8de

0002fdec <download_client_connect>:

int download_client_connect(struct download_client *client, const char *host,
			    const struct download_client_cfg *config)
{
   2fdec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2fdf0:	460f      	mov	r7, r1
   2fdf2:	4616      	mov	r6, r2
	int err;

	if (client == NULL || host == NULL || config == NULL) {
   2fdf4:	4604      	mov	r4, r0
{
   2fdf6:	b0b8      	sub	sp, #224	; 0xe0
	if (client == NULL || host == NULL || config == NULL) {
   2fdf8:	2800      	cmp	r0, #0
   2fdfa:	f000 81d2 	beq.w	301a2 <CONFIG_FLASH_LOAD_SIZE+0x1a2>
   2fdfe:	2900      	cmp	r1, #0
   2fe00:	f000 81cf 	beq.w	301a2 <CONFIG_FLASH_LOAD_SIZE+0x1a2>
   2fe04:	2a00      	cmp	r2, #0
   2fe06:	f000 81cc 	beq.w	301a2 <CONFIG_FLASH_LOAD_SIZE+0x1a2>
		return -EINVAL;
	}

	if (client->fd != -1) {
   2fe0a:	6803      	ldr	r3, [r0, #0]
   2fe0c:	3301      	adds	r3, #1
   2fe0e:	d17f      	bne.n	2ff10 <download_client_connect+0x124>
		/* Already connected */
		return 0;
	}

	if (config->frag_size_override > CONFIG_DOWNLOAD_CLIENT_BUF_SIZE) {
   2fe10:	f640 03fc 	movw	r3, #2300	; 0x8fc
   2fe14:	6892      	ldr	r2, [r2, #8]
   2fe16:	429a      	cmp	r2, r3
   2fe18:	d909      	bls.n	2fe2e <download_client_connect+0x42>
		LOG_ERR("The configured fragment size is larger than buffer");
   2fe1a:	2145      	movs	r1, #69	; 0x45
   2fe1c:	48b3      	ldr	r0, [pc, #716]	; (300ec <CONFIG_FLASH_LOAD_SIZE+0xec>)
   2fe1e:	f00c fe47 	bl	3cab0 <z_log_minimal_printk>
		return -E2BIG;
   2fe22:	f06f 0506 	mvn.w	r5, #6
	if (client->fd < 0) {
		return err;
	}

	return 0;
}
   2fe26:	4628      	mov	r0, r5
   2fe28:	b038      	add	sp, #224	; 0xe0
   2fe2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct addrinfo hints = {
   2fe2e:	2250      	movs	r2, #80	; 0x50
   2fe30:	2100      	movs	r1, #0
   2fe32:	a804      	add	r0, sp, #16
		err = host_lookup(host, AF_INET, config->pdn_id, &client->remote_addr);
   2fe34:	f896 8004 	ldrb.w	r8, [r6, #4]
	struct addrinfo hints = {
   2fe38:	f011 fad4 	bl	413e4 <memset>
   2fe3c:	2301      	movs	r3, #1
	err = url_parse_host(host, hostname, sizeof(hostname));
   2fe3e:	2280      	movs	r2, #128	; 0x80
   2fe40:	4638      	mov	r0, r7
   2fe42:	a918      	add	r1, sp, #96	; 0x60
	struct addrinfo hints = {
   2fe44:	9306      	str	r3, [sp, #24]
	err = url_parse_host(host, hostname, sizeof(hostname));
   2fe46:	f000 fb73 	bl	30530 <url_parse_host>
	if (err) {
   2fe4a:	4605      	mov	r5, r0
   2fe4c:	2800      	cmp	r0, #0
   2fe4e:	d1ea      	bne.n	2fe26 <download_client_connect+0x3a>
	if (pdn_id) {
   2fe50:	f1b8 0f00 	cmp.w	r8, #0
   2fe54:	d019      	beq.n	2fe8a <download_client_connect+0x9e>
		hints.ai_flags = AI_PDNSERV;
   2fe56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		(void)snprintf(pdnserv, sizeof(pdnserv), "%d", pdn_id);
   2fe5a:	2104      	movs	r1, #4
   2fe5c:	4aa4      	ldr	r2, [pc, #656]	; (300f0 <CONFIG_FLASH_LOAD_SIZE+0xf0>)
		hints.ai_flags = AI_PDNSERV;
   2fe5e:	9305      	str	r3, [sp, #20]
		(void)snprintf(pdnserv, sizeof(pdnserv), "%d", pdn_id);
   2fe60:	a802      	add	r0, sp, #8
   2fe62:	4643      	mov	r3, r8
   2fe64:	f00a fbf6 	bl	3a654 <sniprintf>
	return zsock_getaddrinfo(host, service, hints, res);
   2fe68:	ab03      	add	r3, sp, #12
   2fe6a:	aa04      	add	r2, sp, #16
   2fe6c:	a902      	add	r1, sp, #8
   2fe6e:	a818      	add	r0, sp, #96	; 0x60
   2fe70:	f00d f950 	bl	3d114 <zsock_getaddrinfo>
   2fe74:	4605      	mov	r5, r0
	if (err) {
   2fe76:	b160      	cbz	r0, 2fe92 <download_client_connect+0xa6>
		LOG_WRN("Failed to resolve hostname %s on %s",
   2fe78:	2157      	movs	r1, #87	; 0x57
   2fe7a:	4b9e      	ldr	r3, [pc, #632]	; (300f4 <CONFIG_FLASH_LOAD_SIZE+0xf4>)
   2fe7c:	489e      	ldr	r0, [pc, #632]	; (300f8 <CONFIG_FLASH_LOAD_SIZE+0xf8>)
   2fe7e:	aa18      	add	r2, sp, #96	; 0x60
   2fe80:	f00c fe16 	bl	3cab0 <z_log_minimal_printk>
		return -EHOSTUNREACH;
   2fe84:	f06f 0575 	mvn.w	r5, #117	; 0x75
   2fe88:	e7cd      	b.n	2fe26 <download_client_connect+0x3a>
   2fe8a:	4601      	mov	r1, r0
   2fe8c:	ab03      	add	r3, sp, #12
   2fe8e:	aa04      	add	r2, sp, #16
   2fe90:	e7ed      	b.n	2fe6e <download_client_connect+0x82>
	*sa = *(ai->ai_addr);
   2fe92:	1d22      	adds	r2, r4, #4
   2fe94:	4690      	mov	r8, r2
   2fe96:	9803      	ldr	r0, [sp, #12]
   2fe98:	6983      	ldr	r3, [r0, #24]
   2fe9a:	f103 0118 	add.w	r1, r3, #24
   2fe9e:	f853 cb04 	ldr.w	ip, [r3], #4
   2fea2:	428b      	cmp	r3, r1
   2fea4:	f842 cb04 	str.w	ip, [r2], #4
   2fea8:	d1f9      	bne.n	2fe9e <download_client_connect+0xb2>
	zsock_freeaddrinfo(ai);
   2feaa:	f00d f935 	bl	3d118 <zsock_freeaddrinfo>
	client->config = *config;
   2feae:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   2feb2:	f604 1c2c 	addw	ip, r4, #2348	; 0x92c
   2feb6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	err = url_parse_proto(dl->host, &dl->proto, &type);
   2feba:	4638      	mov	r0, r7
	client->host = host;
   2febc:	f8c4 7924 	str.w	r7, [r4, #2340]	; 0x924
	err = url_parse_proto(dl->host, &dl->proto, &type);
   2fec0:	aa03      	add	r2, sp, #12
   2fec2:	f604 113c 	addw	r1, r4, #2364	; 0x93c
   2fec6:	f000 fafd 	bl	304c4 <url_parse_proto>
	if (err) {
   2feca:	b150      	cbz	r0, 2fee2 <download_client_connect+0xf6>
		type = SOCK_STREAM;
   2fecc:	2301      	movs	r3, #1
   2fece:	9303      	str	r3, [sp, #12]
		if (dl->config.sec_tag != -1) {
   2fed0:	f8d4 392c 	ldr.w	r3, [r4, #2348]	; 0x92c
   2fed4:	3301      	adds	r3, #1
			dl->proto = IPPROTO_TLS_1_2;
   2fed6:	bf14      	ite	ne
   2fed8:	f44f 7381 	movne.w	r3, #258	; 0x102
			dl->proto = IPPROTO_TCP;
   2fedc:	2306      	moveq	r3, #6
   2fede:	f8c4 393c 	str.w	r3, [r4, #2364]	; 0x93c
	if (dl->proto == IPPROTO_UDP || dl->proto == IPPROTO_DTLS_1_2) {
   2fee2:	f8d4 293c 	ldr.w	r2, [r4, #2364]	; 0x93c
   2fee6:	f422 7380 	bic.w	r3, r2, #256	; 0x100
   2feea:	2b11      	cmp	r3, #17
   2feec:	f000 8153 	beq.w	30196 <CONFIG_FLASH_LOAD_SIZE+0x196>
	if (dl->proto == IPPROTO_TLS_1_2 || dl->proto == IPPROTO_DTLS_1_2) {
   2fef0:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
		if (dl->config.sec_tag != -1) {
   2fef4:	f8d4 392c 	ldr.w	r3, [r4, #2348]	; 0x92c
	if (dl->proto == IPPROTO_TLS_1_2 || dl->proto == IPPROTO_DTLS_1_2) {
   2fef8:	d10c      	bne.n	2ff14 <download_client_connect+0x128>
		if (dl->config.sec_tag == -1) {
   2fefa:	3301      	adds	r3, #1
   2fefc:	d112      	bne.n	2ff24 <download_client_connect+0x138>
			LOG_WRN("No security tag provided for TLS/DTLS");
   2fefe:	2157      	movs	r1, #87	; 0x57
   2ff00:	487e      	ldr	r0, [pc, #504]	; (300fc <CONFIG_FLASH_LOAD_SIZE+0xfc>)
		LOG_WRN("set_tls_hostname flag is set for non-TLS connection");
   2ff02:	f00c fdd5 	bl	3cab0 <z_log_minimal_printk>
		return -EINVAL;
   2ff06:	f06f 0515 	mvn.w	r5, #21
	if (client->fd < 0) {
   2ff0a:	6823      	ldr	r3, [r4, #0]
   2ff0c:	2b00      	cmp	r3, #0
   2ff0e:	db8a      	blt.n	2fe26 <download_client_connect+0x3a>
	return 0;
   2ff10:	2500      	movs	r5, #0
   2ff12:	e788      	b.n	2fe26 <download_client_connect+0x3a>
	if (dl->config.sec_tag == -1 && dl->config.set_tls_hostname) {
   2ff14:	3301      	adds	r3, #1
   2ff16:	d105      	bne.n	2ff24 <download_client_connect+0x138>
   2ff18:	f894 3938 	ldrb.w	r3, [r4, #2360]	; 0x938
   2ff1c:	b113      	cbz	r3, 2ff24 <download_client_connect+0x138>
		LOG_WRN("set_tls_hostname flag is set for non-TLS connection");
   2ff1e:	2157      	movs	r1, #87	; 0x57
   2ff20:	4877      	ldr	r0, [pc, #476]	; (30100 <CONFIG_FLASH_LOAD_SIZE+0x100>)
   2ff22:	e7ee      	b.n	2ff02 <download_client_connect+0x116>
	err = url_parse_port(dl->host, &port);
   2ff24:	f8d4 0924 	ldr.w	r0, [r4, #2340]	; 0x924
   2ff28:	a902      	add	r1, sp, #8
   2ff2a:	f000 fb39 	bl	305a0 <url_parse_port>
	if (err) {
   2ff2e:	b148      	cbz	r0, 2ff44 <download_client_connect+0x158>
		switch (dl->proto) {
   2ff30:	f8d4 393c 	ldr.w	r3, [r4, #2364]	; 0x93c
   2ff34:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   2ff38:	d034      	beq.n	2ffa4 <download_client_connect+0x1b8>
   2ff3a:	dc2c      	bgt.n	2ff96 <download_client_connect+0x1aa>
   2ff3c:	2b06      	cmp	r3, #6
   2ff3e:	d036      	beq.n	2ffae <download_client_connect+0x1c2>
   2ff40:	2b11      	cmp	r3, #17
   2ff42:	d036      	beq.n	2ffb2 <download_client_connect+0x1c6>
	switch (dl->remote_addr.sa_family) {
   2ff44:	88a0      	ldrh	r0, [r4, #4]
   2ff46:	2801      	cmp	r0, #1
   2ff48:	d036      	beq.n	2ffb8 <download_client_connect+0x1cc>
   2ff4a:	2802      	cmp	r0, #2
   2ff4c:	f040 8126 	bne.w	3019c <CONFIG_FLASH_LOAD_SIZE+0x19c>
		addrlen = sizeof(struct sockaddr_in6);
   2ff50:	2718      	movs	r7, #24
		SIN6(&dl->remote_addr)->sin6_port = htons(port);
   2ff52:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   2ff56:	ba5b      	rev16	r3, r3
   2ff58:	80e3      	strh	r3, [r4, #6]
	if (dl->set_native_tls) {
   2ff5a:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
   2ff5e:	f893 3a54 	ldrb.w	r3, [r3, #2644]	; 0xa54
   2ff62:	b11b      	cbz	r3, 2ff6c <download_client_connect+0x180>
		type |= SOCK_NATIVE_TLS;
   2ff64:	9b03      	ldr	r3, [sp, #12]
   2ff66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   2ff6a:	9303      	str	r3, [sp, #12]
	dl->fd = socket(dl->remote_addr.sa_family, type, dl->proto);
   2ff6c:	9903      	ldr	r1, [sp, #12]
   2ff6e:	f8d4 293c 	ldr.w	r2, [r4, #2364]	; 0x93c
	return z_impl_zsock_socket(family, type, proto);
   2ff72:	f7f1 fc8d 	bl	21890 <z_impl_zsock_socket>
	if (dl->fd < 0) {
   2ff76:	2800      	cmp	r0, #0
   2ff78:	4606      	mov	r6, r0
	dl->fd = socket(dl->remote_addr.sa_family, type, dl->proto);
   2ff7a:	6020      	str	r0, [r4, #0]
	if (dl->fd < 0) {
   2ff7c:	da22      	bge.n	2ffc4 <download_client_connect+0x1d8>
		LOG_ERR("Failed to create socket, err %d", errno);
   2ff7e:	f00d fbd6 	bl	3d72e <__errno>
   2ff82:	2145      	movs	r1, #69	; 0x45
   2ff84:	6802      	ldr	r2, [r0, #0]
   2ff86:	485f      	ldr	r0, [pc, #380]	; (30104 <CONFIG_FLASH_LOAD_SIZE+0x104>)
   2ff88:	f00c fd92 	bl	3cab0 <z_log_minimal_printk>
		return -errno;
   2ff8c:	f00d fbcf 	bl	3d72e <__errno>
   2ff90:	6805      	ldr	r5, [r0, #0]
   2ff92:	426d      	negs	r5, r5
   2ff94:	e7b9      	b.n	2ff0a <download_client_connect+0x11e>
		switch (dl->proto) {
   2ff96:	f240 1211 	movw	r2, #273	; 0x111
   2ff9a:	4293      	cmp	r3, r2
   2ff9c:	d1d2      	bne.n	2ff44 <download_client_connect+0x158>
			port = 5684;
   2ff9e:	f241 6334 	movw	r3, #5684	; 0x1634
   2ffa2:	e001      	b.n	2ffa8 <download_client_connect+0x1bc>
			port = 443;
   2ffa4:	f240 13bb 	movw	r3, #443	; 0x1bb
			port = 5683;
   2ffa8:	f8ad 3008 	strh.w	r3, [sp, #8]
			break;
   2ffac:	e7ca      	b.n	2ff44 <download_client_connect+0x158>
			port = 80;
   2ffae:	2350      	movs	r3, #80	; 0x50
   2ffb0:	e7fa      	b.n	2ffa8 <download_client_connect+0x1bc>
			port = 5683;
   2ffb2:	f241 6333 	movw	r3, #5683	; 0x1633
   2ffb6:	e7f7      	b.n	2ffa8 <download_client_connect+0x1bc>
		SIN(&dl->remote_addr)->sin_port = htons(port);
   2ffb8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
		addrlen = sizeof(struct sockaddr_in);
   2ffbc:	2708      	movs	r7, #8
		SIN(&dl->remote_addr)->sin_port = htons(port);
   2ffbe:	ba5b      	rev16	r3, r3
   2ffc0:	80e3      	strh	r3, [r4, #6]
		break;
   2ffc2:	e7ca      	b.n	2ff5a <download_client_connect+0x16e>
	if (dl->config.pdn_id) {
   2ffc4:	f894 9930 	ldrb.w	r9, [r4, #2352]	; 0x930
   2ffc8:	f1b9 0f00 	cmp.w	r9, #0
   2ffcc:	d02a      	beq.n	30024 <CONFIG_FLASH_LOAD_SIZE+0x24>
	char buf[8] = {0};
   2ffce:	2300      	movs	r3, #0
	(void) snprintf(buf, sizeof(buf), "pdn%d", pdn_id);
   2ffd0:	2108      	movs	r1, #8
	char buf[8] = {0};
   2ffd2:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
	(void) snprintf(buf, sizeof(buf), "pdn%d", pdn_id);
   2ffd6:	4a4c      	ldr	r2, [pc, #304]	; (30108 <CONFIG_FLASH_LOAD_SIZE+0x108>)
   2ffd8:	464b      	mov	r3, r9
   2ffda:	a818      	add	r0, sp, #96	; 0x60
   2ffdc:	f00a fb3a 	bl	3a654 <sniprintf>
	LOG_INF("Binding to PDN ID: %s", log_strdup(buf));
   2ffe0:	2149      	movs	r1, #73	; 0x49
   2ffe2:	aa18      	add	r2, sp, #96	; 0x60
   2ffe4:	4849      	ldr	r0, [pc, #292]	; (3010c <CONFIG_FLASH_LOAD_SIZE+0x10c>)
   2ffe6:	f00c fd63 	bl	3cab0 <z_log_minimal_printk>
	err = setsockopt(fd, SOL_SOCKET, SO_BINDTODEVICE, &buf, strlen(buf));
   2ffea:	a818      	add	r0, sp, #96	; 0x60
   2ffec:	f7ed f929 	bl	1d242 <strlen>
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   2fff0:	2219      	movs	r2, #25
   2fff2:	9000      	str	r0, [sp, #0]
   2fff4:	2101      	movs	r1, #1
   2fff6:	4630      	mov	r0, r6
   2fff8:	ab18      	add	r3, sp, #96	; 0x60
   2fffa:	f00d f999 	bl	3d330 <z_impl_zsock_setsockopt>
	if (err) {
   2fffe:	b188      	cbz	r0, 30024 <CONFIG_FLASH_LOAD_SIZE+0x24>
		LOG_ERR("Failed to bind socket to PDN ID %d, err %d",
   30000:	f00d fb95 	bl	3d72e <__errno>
   30004:	464a      	mov	r2, r9
   30006:	6803      	ldr	r3, [r0, #0]
   30008:	2145      	movs	r1, #69	; 0x45
   3000a:	4841      	ldr	r0, [pc, #260]	; (30110 <CONFIG_FLASH_LOAD_SIZE+0x110>)
   3000c:	f00c fd50 	bl	3cab0 <z_log_minimal_printk>
		return -ENETDOWN;
   30010:	f06f 0672 	mvn.w	r6, #114	; 0x72
		close(dl->fd);
   30014:	6820      	ldr	r0, [r4, #0]
	return z_impl_zsock_close(sock);
   30016:	f00d f894 	bl	3d142 <z_impl_zsock_close>
		dl->fd = -1;
   3001a:	f04f 33ff 	mov.w	r3, #4294967295
   3001e:	4635      	mov	r5, r6
   30020:	6023      	str	r3, [r4, #0]
   30022:	e772      	b.n	2ff0a <download_client_connect+0x11e>
	if ((dl->proto == IPPROTO_TLS_1_2 || dl->proto == IPPROTO_DTLS_1_2)
   30024:	f8d4 393c 	ldr.w	r3, [r4, #2364]	; 0x93c
   30028:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   3002c:	d004      	beq.n	30038 <CONFIG_FLASH_LOAD_SIZE+0x38>
   3002e:	f240 1211 	movw	r2, #273	; 0x111
   30032:	4293      	cmp	r3, r2
   30034:	f040 8094 	bne.w	30160 <CONFIG_FLASH_LOAD_SIZE+0x160>
	     && (dl->config.sec_tag != -1)) {
   30038:	f8d4 692c 	ldr.w	r6, [r4, #2348]	; 0x92c
   3003c:	1c73      	adds	r3, r6, #1
   3003e:	f000 808f 	beq.w	30160 <CONFIG_FLASH_LOAD_SIZE+0x160>
	verify = REQUIRED;
   30042:	2302      	movs	r3, #2
		err = socket_sectag_set(dl->fd, dl->config.sec_tag);
   30044:	f8d4 9000 	ldr.w	r9, [r4]
	sec_tag_t sec_tag_list[] = { sec_tag };
   30048:	9618      	str	r6, [sp, #96]	; 0x60
	verify = REQUIRED;
   3004a:	9304      	str	r3, [sp, #16]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   3004c:	f04f 0a04 	mov.w	sl, #4
   30050:	2205      	movs	r2, #5
   30052:	f44f 718d 	mov.w	r1, #282	; 0x11a
   30056:	4648      	mov	r0, r9
   30058:	f8cd a000 	str.w	sl, [sp]
   3005c:	ab04      	add	r3, sp, #16
   3005e:	f00d f967 	bl	3d330 <z_impl_zsock_setsockopt>
	if (err) {
   30062:	b360      	cbz	r0, 300be <CONFIG_FLASH_LOAD_SIZE+0xbe>
		LOG_ERR("Failed to setup peer verification, errno %d", errno);
   30064:	f00d fb63 	bl	3d72e <__errno>
   30068:	2145      	movs	r1, #69	; 0x45
   3006a:	6802      	ldr	r2, [r0, #0]
   3006c:	4829      	ldr	r0, [pc, #164]	; (30114 <CONFIG_FLASH_LOAD_SIZE+0x114>)
		LOG_ERR("Failed to setup socket security tag, errno %d", errno);
   3006e:	f00c fd1f 	bl	3cab0 <z_log_minimal_printk>
		return -errno;
   30072:	f00d fb5c 	bl	3d72e <__errno>
   30076:	6806      	ldr	r6, [r0, #0]
   30078:	4276      	negs	r6, r6
		if (err) {
   3007a:	2e00      	cmp	r6, #0
   3007c:	d1ca      	bne.n	30014 <CONFIG_FLASH_LOAD_SIZE+0x14>
		if (dl->config.set_tls_hostname) {
   3007e:	f894 3938 	ldrb.w	r3, [r4, #2360]	; 0x938
   30082:	2b00      	cmp	r3, #0
   30084:	d06c      	beq.n	30160 <CONFIG_FLASH_LOAD_SIZE+0x160>
			err = socket_tls_hostname_set(dl->fd, dl->host);
   30086:	f8d4 6924 	ldr.w	r6, [r4, #2340]	; 0x924
   3008a:	f8d4 9000 	ldr.w	r9, [r4]
	__ASSERT_NO_MSG(hostname);
   3008e:	b946      	cbnz	r6, 300a2 <CONFIG_FLASH_LOAD_SIZE+0xa2>
   30090:	4921      	ldr	r1, [pc, #132]	; (30118 <CONFIG_FLASH_LOAD_SIZE+0x118>)
   30092:	4822      	ldr	r0, [pc, #136]	; (3011c <CONFIG_FLASH_LOAD_SIZE+0x11c>)
   30094:	2286      	movs	r2, #134	; 0x86
   30096:	f00c fcd1 	bl	3ca3c <assert_print>
   3009a:	2186      	movs	r1, #134	; 0x86
   3009c:	481e      	ldr	r0, [pc, #120]	; (30118 <CONFIG_FLASH_LOAD_SIZE+0x118>)
   3009e:	f00c fcc6 	bl	3ca2e <assert_post_action>
	err = url_parse_host(hostname, parsed_host, sizeof(parsed_host));
   300a2:	4630      	mov	r0, r6
   300a4:	2280      	movs	r2, #128	; 0x80
   300a6:	a918      	add	r1, sp, #96	; 0x60
   300a8:	f000 fa42 	bl	30530 <url_parse_host>
	if (err) {
   300ac:	4606      	mov	r6, r0
   300ae:	2800      	cmp	r0, #0
   300b0:	d03c      	beq.n	3012c <CONFIG_FLASH_LOAD_SIZE+0x12c>
		LOG_ERR("Failed to parse host, err %d", err);
   300b2:	4602      	mov	r2, r0
   300b4:	2145      	movs	r1, #69	; 0x45
   300b6:	481a      	ldr	r0, [pc, #104]	; (30120 <CONFIG_FLASH_LOAD_SIZE+0x120>)
   300b8:	f00c fcfa 	bl	3cab0 <z_log_minimal_printk>
			if (err) {
   300bc:	e7aa      	b.n	30014 <CONFIG_FLASH_LOAD_SIZE+0x14>
	LOG_INF("Setting up TLS credentials, tag %d", sec_tag);
   300be:	4632      	mov	r2, r6
   300c0:	2149      	movs	r1, #73	; 0x49
   300c2:	4818      	ldr	r0, [pc, #96]	; (30124 <CONFIG_FLASH_LOAD_SIZE+0x124>)
   300c4:	f00c fcf4 	bl	3cab0 <z_log_minimal_printk>
   300c8:	2201      	movs	r2, #1
   300ca:	f44f 718d 	mov.w	r1, #282	; 0x11a
   300ce:	4648      	mov	r0, r9
   300d0:	f8cd a000 	str.w	sl, [sp]
   300d4:	ab18      	add	r3, sp, #96	; 0x60
   300d6:	f00d f92b 	bl	3d330 <z_impl_zsock_setsockopt>
	if (err) {
   300da:	2800      	cmp	r0, #0
   300dc:	d0cf      	beq.n	3007e <CONFIG_FLASH_LOAD_SIZE+0x7e>
		LOG_ERR("Failed to setup socket security tag, errno %d", errno);
   300de:	f00d fb26 	bl	3d72e <__errno>
   300e2:	2145      	movs	r1, #69	; 0x45
   300e4:	6802      	ldr	r2, [r0, #0]
   300e6:	4810      	ldr	r0, [pc, #64]	; (30128 <CONFIG_FLASH_LOAD_SIZE+0x128>)
   300e8:	e7c1      	b.n	3006e <CONFIG_FLASH_LOAD_SIZE+0x6e>
   300ea:	bf00      	nop
   300ec:	0004a8ee 	.word	0x0004a8ee
   300f0:	000463e0 	.word	0x000463e0
   300f4:	0004a926 	.word	0x0004a926
   300f8:	0004a92b 	.word	0x0004a92b
   300fc:	0004a954 	.word	0x0004a954
   30100:	0004a97f 	.word	0x0004a97f
   30104:	0004a9b8 	.word	0x0004a9b8
   30108:	0004a9dd 	.word	0x0004a9dd
   3010c:	0004a9e3 	.word	0x0004a9e3
   30110:	0004a9fe 	.word	0x0004a9fe
   30114:	0004aa2e 	.word	0x0004aa2e
   30118:	0004a86d 	.word	0x0004a86d
   3011c:	00043ff2 	.word	0x00043ff2
   30120:	0004aaba 	.word	0x0004aaba
   30124:	0004aa5f 	.word	0x0004aa5f
   30128:	0004aa87 	.word	0x0004aa87
	err = setsockopt(fd, SOL_TLS, TLS_HOSTNAME, parsed_host,
   3012c:	a818      	add	r0, sp, #96	; 0x60
   3012e:	f7ed f888 	bl	1d242 <strlen>
   30132:	2202      	movs	r2, #2
   30134:	9000      	str	r0, [sp, #0]
   30136:	f44f 718d 	mov.w	r1, #282	; 0x11a
   3013a:	4648      	mov	r0, r9
   3013c:	ab18      	add	r3, sp, #96	; 0x60
   3013e:	f00d f8f7 	bl	3d330 <z_impl_zsock_setsockopt>
	if (err) {
   30142:	b168      	cbz	r0, 30160 <CONFIG_FLASH_LOAD_SIZE+0x160>
		LOG_ERR("Failed to setup TLS hostname (%s), errno %d",
   30144:	f00d faf3 	bl	3d72e <__errno>
   30148:	2145      	movs	r1, #69	; 0x45
   3014a:	6803      	ldr	r3, [r0, #0]
   3014c:	aa18      	add	r2, sp, #96	; 0x60
   3014e:	4816      	ldr	r0, [pc, #88]	; (301a8 <CONFIG_FLASH_LOAD_SIZE+0x1a8>)
   30150:	f00c fcae 	bl	3cab0 <z_log_minimal_printk>
		return -errno;
   30154:	f00d faeb 	bl	3d72e <__errno>
   30158:	6806      	ldr	r6, [r0, #0]
			if (err) {
   3015a:	b10e      	cbz	r6, 30160 <CONFIG_FLASH_LOAD_SIZE+0x160>
		err = -errno;
   3015c:	4276      	negs	r6, r6
   3015e:	e759      	b.n	30014 <CONFIG_FLASH_LOAD_SIZE+0x14>
	LOG_INF("Connecting to %s", log_strdup(dl->host));
   30160:	2149      	movs	r1, #73	; 0x49
   30162:	f8d4 2924 	ldr.w	r2, [r4, #2340]	; 0x924
   30166:	4811      	ldr	r0, [pc, #68]	; (301ac <CONFIG_FLASH_LOAD_SIZE+0x1ac>)
   30168:	f00c fca2 	bl	3cab0 <z_log_minimal_printk>
	err = connect(dl->fd, &dl->remote_addr, addrlen);
   3016c:	6820      	ldr	r0, [r4, #0]
	return z_impl_zsock_connect(sock, addr, addrlen);
   3016e:	463a      	mov	r2, r7
   30170:	4641      	mov	r1, r8
   30172:	f00d f80a 	bl	3d18a <z_impl_zsock_connect>
	if (err) {
   30176:	2800      	cmp	r0, #0
   30178:	f43f aec7 	beq.w	2ff0a <download_client_connect+0x11e>
		LOG_ERR("Unable to connect, errno %d", errno);
   3017c:	f00d fad7 	bl	3d72e <__errno>
   30180:	2145      	movs	r1, #69	; 0x45
   30182:	6802      	ldr	r2, [r0, #0]
   30184:	480a      	ldr	r0, [pc, #40]	; (301b0 <CONFIG_FLASH_LOAD_SIZE+0x1b0>)
   30186:	f00c fc93 	bl	3cab0 <z_log_minimal_printk>
		err = -errno;
   3018a:	f00d fad0 	bl	3d72e <__errno>
   3018e:	6806      	ldr	r6, [r0, #0]
	if (err) {
   30190:	2e00      	cmp	r6, #0
   30192:	d1e3      	bne.n	3015c <CONFIG_FLASH_LOAD_SIZE+0x15c>
   30194:	e6b9      	b.n	2ff0a <download_client_connect+0x11e>
			return -EPROTONOSUPPORT;
   30196:	f06f 057a 	mvn.w	r5, #122	; 0x7a
   3019a:	e6b6      	b.n	2ff0a <download_client_connect+0x11e>
	switch (dl->remote_addr.sa_family) {
   3019c:	f06f 0569 	mvn.w	r5, #105	; 0x69
   301a0:	e6b3      	b.n	2ff0a <download_client_connect+0x11e>
		return -EINVAL;
   301a2:	f06f 0515 	mvn.w	r5, #21
   301a6:	e63e      	b.n	2fe26 <download_client_connect+0x3a>
   301a8:	0004aadc 	.word	0x0004aadc
   301ac:	0004ab0d 	.word	0x0004ab0d
   301b0:	0004ab23 	.word	0x0004ab23

000301b4 <download_client_disconnect>:

int download_client_disconnect(struct download_client *const client)
{
   301b4:	b510      	push	{r4, lr}
	int err;

	if (client == NULL || client->fd < 0) {
   301b6:	4604      	mov	r4, r0
   301b8:	b1a8      	cbz	r0, 301e6 <download_client_disconnect+0x32>
   301ba:	6800      	ldr	r0, [r0, #0]
   301bc:	2800      	cmp	r0, #0
   301be:	db12      	blt.n	301e6 <download_client_disconnect+0x32>
	return z_impl_zsock_close(sock);
   301c0:	f00c ffbf 	bl	3d142 <z_impl_zsock_close>
		return -EINVAL;
	}

	err = close(client->fd);
	if (err) {
   301c4:	b158      	cbz	r0, 301de <download_client_disconnect+0x2a>
		LOG_ERR("Failed to close socket, errno %d", errno);
   301c6:	f00d fab2 	bl	3d72e <__errno>
   301ca:	2145      	movs	r1, #69	; 0x45
   301cc:	6802      	ldr	r2, [r0, #0]
   301ce:	4807      	ldr	r0, [pc, #28]	; (301ec <download_client_disconnect+0x38>)
   301d0:	f00c fc6e 	bl	3cab0 <z_log_minimal_printk>
		return -errno;
   301d4:	f00d faab 	bl	3d72e <__errno>
   301d8:	6800      	ldr	r0, [r0, #0]
   301da:	4240      	negs	r0, r0
	}

	client->fd = -1;

	return 0;
}
   301dc:	bd10      	pop	{r4, pc}
	client->fd = -1;
   301de:	f04f 33ff 	mov.w	r3, #4294967295
   301e2:	6023      	str	r3, [r4, #0]
	return 0;
   301e4:	e7fa      	b.n	301dc <download_client_disconnect+0x28>
		return -EINVAL;
   301e6:	f06f 0015 	mvn.w	r0, #21
   301ea:	e7f7      	b.n	301dc <download_client_disconnect+0x28>
   301ec:	0004ab44 	.word	0x0004ab44

000301f0 <reconnect>:
{
   301f0:	b510      	push	{r4, lr}
   301f2:	4604      	mov	r4, r0
	LOG_INF("Reconnecting..");
   301f4:	2149      	movs	r1, #73	; 0x49
   301f6:	4808      	ldr	r0, [pc, #32]	; (30218 <reconnect+0x28>)
   301f8:	f00c fc5a 	bl	3cab0 <z_log_minimal_printk>
	err = download_client_disconnect(dl);
   301fc:	4620      	mov	r0, r4
   301fe:	f7ff ffd9 	bl	301b4 <download_client_disconnect>
	if (err) {
   30202:	b940      	cbnz	r0, 30216 <reconnect+0x26>
	err = download_client_connect(dl, dl->host, &dl->config);
   30204:	4620      	mov	r0, r4
   30206:	f8d4 1924 	ldr.w	r1, [r4, #2340]	; 0x924
   3020a:	f604 122c 	addw	r2, r4, #2348	; 0x92c
}
   3020e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = download_client_connect(dl, dl->host, &dl->config);
   30212:	f7ff bdeb 	b.w	2fdec <download_client_connect>
}
   30216:	bd10      	pop	{r4, pc}
   30218:	0004ab6a 	.word	0x0004ab6a

0003021c <download_thread>:
{
   3021c:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
   30220:	4605      	mov	r5, r0
	int rc = 0;
   30222:	2400      	movs	r4, #0
	struct timeval timeo = {
   30224:	f04f 0a1e 	mov.w	sl, #30
   30228:	f04f 0b00 	mov.w	fp, #0
		__ASSERT(dl->offset < sizeof(dl->buf), "Buffer overflow");
   3022c:	4f84      	ldr	r7, [pc, #528]	; (30440 <download_thread+0x224>)
{
   3022e:	b086      	sub	sp, #24
	k_thread_suspend(dl->tid);
   30230:	f8d5 097c 	ldr.w	r0, [r5, #2428]	; 0x97c
	z_impl_k_thread_suspend(thread);
   30234:	f007 ffd0 	bl	381d8 <z_impl_k_thread_suspend>
		__ASSERT(dl->offset < sizeof(dl->buf), "Buffer overflow");
   30238:	f8df 822c 	ldr.w	r8, [pc, #556]	; 30468 <download_thread+0x24c>
   3023c:	f640 03fb 	movw	r3, #2299	; 0x8fb
   30240:	f8d5 2918 	ldr.w	r2, [r5, #2328]	; 0x918
   30244:	429a      	cmp	r2, r3
   30246:	d90a      	bls.n	3025e <download_thread+0x42>
   30248:	4639      	mov	r1, r7
   3024a:	4640      	mov	r0, r8
   3024c:	f240 12e7 	movw	r2, #487	; 0x1e7
   30250:	f00c fbf4 	bl	3ca3c <assert_print>
   30254:	f240 11e7 	movw	r1, #487	; 0x1e7
   30258:	4638      	mov	r0, r7
   3025a:	f00c fbe8 	bl	3ca2e <assert_post_action>
		if (sizeof(dl->buf) - dl->offset == 0) {
   3025e:	f640 03fc 	movw	r3, #2300	; 0x8fc
   30262:	f8d5 2918 	ldr.w	r2, [r5, #2328]	; 0x918
   30266:	429a      	cmp	r2, r3
   30268:	d108      	bne.n	3027c <download_thread+0x60>
			LOG_ERR("Could not fit HTTP header from server (> %d)",
   3026a:	2145      	movs	r1, #69	; 0x45
   3026c:	4875      	ldr	r0, [pc, #468]	; (30444 <download_thread+0x228>)
   3026e:	f00c fc1f 	bl	3cab0 <z_log_minimal_printk>
			error_evt_send(dl, E2BIG);
   30272:	2107      	movs	r1, #7
				error_evt_send(dl, EHOSTDOWN);
   30274:	4628      	mov	r0, r5
   30276:	f00f fa87 	bl	3f788 <error_evt_send>
				break;
   3027a:	e7d9      	b.n	30230 <download_thread+0x14>
	switch (dl->proto) {
   3027c:	f8d5 393c 	ldr.w	r3, [r5, #2364]	; 0x93c
   30280:	2b06      	cmp	r3, #6
   30282:	d002      	beq.n	3028a <download_thread+0x6e>
   30284:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   30288:	d138      	bne.n	302fc <download_thread+0xe0>
	struct timeval timeo = {
   3028a:	2300      	movs	r3, #0
   3028c:	e9cd ab02 	strd	sl, fp, [sp, #8]
	err = set_recv_socket_timeout(dl->fd, timeout);
   30290:	6828      	ldr	r0, [r5, #0]
	struct timeval timeo = {
   30292:	9304      	str	r3, [sp, #16]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   30294:	2310      	movs	r3, #16
   30296:	2214      	movs	r2, #20
   30298:	9300      	str	r3, [sp, #0]
   3029a:	2101      	movs	r1, #1
   3029c:	ab02      	add	r3, sp, #8
   3029e:	f00d f847 	bl	3d330 <z_impl_zsock_setsockopt>
	if (err) {
   302a2:	4603      	mov	r3, r0
   302a4:	b148      	cbz	r0, 302ba <download_thread+0x9e>
		LOG_WRN("Failed to set socket timeout, errno %d", errno);
   302a6:	f00d fa42 	bl	3d72e <__errno>
   302aa:	2157      	movs	r1, #87	; 0x57
   302ac:	6802      	ldr	r2, [r0, #0]
   302ae:	4866      	ldr	r0, [pc, #408]	; (30448 <download_thread+0x22c>)
   302b0:	f00c fbfe 	bl	3cab0 <z_log_minimal_printk>
		return -1;
   302b4:	f04f 36ff 	mov.w	r6, #4294967295
   302b8:	e00d      	b.n	302d6 <download_thread+0xba>
	return recv(dl->fd, dl->buf + dl->offset, sizeof(dl->buf) - dl->offset, 0);
   302ba:	6828      	ldr	r0, [r5, #0]
   302bc:	f8d5 6918 	ldr.w	r6, [r5, #2328]	; 0x918
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   302c0:	f5c6 620f 	rsb	r2, r6, #2288	; 0x8f0
   302c4:	f105 011c 	add.w	r1, r5, #28
   302c8:	4431      	add	r1, r6
   302ca:	e9cd 3300 	strd	r3, r3, [sp]
   302ce:	320c      	adds	r2, #12
   302d0:	f00c ffd9 	bl	3d286 <z_impl_zsock_recvfrom>
   302d4:	4606      	mov	r6, r0
		if ((len == 0) || (len == -1)) {
   302d6:	1e73      	subs	r3, r6, #1
   302d8:	3303      	adds	r3, #3
   302da:	d94b      	bls.n	30374 <download_thread+0x158>
			if ((dl->offset > 0) && (dl->http.has_header)) {
   302dc:	f8d5 3918 	ldr.w	r3, [r5, #2328]	; 0x918
   302e0:	b18b      	cbz	r3, 30306 <download_thread+0xea>
   302e2:	f895 3940 	ldrb.w	r3, [r5, #2368]	; 0x940
   302e6:	b173      	cbz	r3, 30306 <download_thread+0xea>
				rc = fragment_evt_send(dl);
   302e8:	4628      	mov	r0, r5
   302ea:	f7ff fce5 	bl	2fcb8 <fragment_evt_send>
				if (rc) {
   302ee:	4604      	mov	r4, r0
   302f0:	b148      	cbz	r0, 30306 <download_thread+0xea>
			LOG_INF("Fragment refused, download stopped.");
   302f2:	2149      	movs	r1, #73	; 0x49
   302f4:	4855      	ldr	r0, [pc, #340]	; (3044c <download_thread+0x230>)
   302f6:	f00c fbdb 	bl	3cab0 <z_log_minimal_printk>
   302fa:	e799      	b.n	30230 <download_thread+0x14>
		LOG_ERR("unhandled proto");
   302fc:	2145      	movs	r1, #69	; 0x45
   302fe:	4854      	ldr	r0, [pc, #336]	; (30450 <download_thread+0x234>)
   30300:	f00c fbd6 	bl	3cab0 <z_log_minimal_printk>
   30304:	e7d6      	b.n	302b4 <download_thread+0x98>
			if (len == -1) {
   30306:	3601      	adds	r6, #1
   30308:	d12e      	bne.n	30368 <download_thread+0x14c>
				if ((errno == ETIMEDOUT) || (errno == EWOULDBLOCK) ||
   3030a:	f00d fa10 	bl	3d72e <__errno>
   3030e:	6803      	ldr	r3, [r0, #0]
   30310:	2b74      	cmp	r3, #116	; 0x74
   30312:	d11d      	bne.n	30350 <download_thread+0x134>
	if (dl->proto == IPPROTO_UDP || dl->proto == IPPROTO_DTLS_1_2) {
   30314:	f8d5 393c 	ldr.w	r3, [r5, #2364]	; 0x93c
   30318:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   3031c:	2b11      	cmp	r3, #17
   3031e:	d073      	beq.n	30408 <download_thread+0x1ec>
					error_cause = ETIMEDOUT;
   30320:	2474      	movs	r4, #116	; 0x74
				LOG_ERR("Error in recv(), errno %d", errno);
   30322:	f00d fa04 	bl	3d72e <__errno>
   30326:	2145      	movs	r1, #69	; 0x45
   30328:	6802      	ldr	r2, [r0, #0]
   3032a:	484a      	ldr	r0, [pc, #296]	; (30454 <download_thread+0x238>)
   3032c:	f00c fbc0 	bl	3cab0 <z_log_minimal_printk>
			rc = error_evt_send(dl, error_cause);
   30330:	4621      	mov	r1, r4
   30332:	4628      	mov	r0, r5
   30334:	f00f fa28 	bl	3f788 <error_evt_send>
			if (rc) {
   30338:	4604      	mov	r4, r0
   3033a:	2800      	cmp	r0, #0
   3033c:	f47f af78 	bne.w	30230 <download_thread+0x14>
			rc = reconnect(dl);
   30340:	4628      	mov	r0, r5
   30342:	f7ff ff55 	bl	301f0 <reconnect>
			if (rc) {
   30346:	4604      	mov	r4, r0
   30348:	2800      	cmp	r0, #0
   3034a:	d05d      	beq.n	30408 <download_thread+0x1ec>
				error_evt_send(dl, EHOSTDOWN);
   3034c:	2175      	movs	r1, #117	; 0x75
   3034e:	e791      	b.n	30274 <download_thread+0x58>
				if ((errno == ETIMEDOUT) || (errno == EWOULDBLOCK) ||
   30350:	f00d f9ed 	bl	3d72e <__errno>
   30354:	6803      	ldr	r3, [r0, #0]
   30356:	2b0b      	cmp	r3, #11
   30358:	d0dc      	beq.n	30314 <download_thread+0xf8>
				    (errno == EAGAIN)) {
   3035a:	f00d f9e8 	bl	3d72e <__errno>
				if ((errno == ETIMEDOUT) || (errno == EWOULDBLOCK) ||
   3035e:	6803      	ldr	r3, [r0, #0]
   30360:	2b0b      	cmp	r3, #11
   30362:	d0d7      	beq.n	30314 <download_thread+0xf8>
			error_cause = ECONNRESET;
   30364:	2468      	movs	r4, #104	; 0x68
   30366:	e7dc      	b.n	30322 <download_thread+0x106>
				LOG_WRN("Peer closed connection!");
   30368:	2157      	movs	r1, #87	; 0x57
   3036a:	483b      	ldr	r0, [pc, #236]	; (30458 <download_thread+0x23c>)
   3036c:	f00c fba0 	bl	3cab0 <z_log_minimal_printk>
			error_cause = ECONNRESET;
   30370:	2468      	movs	r4, #104	; 0x68
   30372:	e7dd      	b.n	30330 <download_thread+0x114>
		if (dl->proto == IPPROTO_TCP || dl->proto == IPPROTO_TLS_1_2) {
   30374:	f8d5 393c 	ldr.w	r3, [r5, #2364]	; 0x93c
   30378:	2b06      	cmp	r3, #6
   3037a:	d002      	beq.n	30382 <download_thread+0x166>
   3037c:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   30380:	d106      	bne.n	30390 <download_thread+0x174>
			rc = http_parse(client, len);
   30382:	4631      	mov	r1, r6
   30384:	4628      	mov	r0, r5
   30386:	f000 f9e1 	bl	3074c <http_parse>
			if (rc > 0) {
   3038a:	1e04      	subs	r4, r0, #0
   3038c:	f73f af56 	bgt.w	3023c <download_thread+0x20>
		if (rc < 0) {
   30390:	2c00      	cmp	r4, #0
   30392:	da01      	bge.n	30398 <download_thread+0x17c>
			error_evt_send(dl, EBADMSG);
   30394:	214d      	movs	r1, #77	; 0x4d
   30396:	e76d      	b.n	30274 <download_thread+0x58>
		if (dl->file_size) {
   30398:	f8d5 391c 	ldr.w	r3, [r5, #2332]	; 0x91c
			LOG_INF("Downloaded %u/%u bytes (%d%%)",
   3039c:	f8d5 2920 	ldr.w	r2, [r5, #2336]	; 0x920
		if (dl->file_size) {
   303a0:	b32b      	cbz	r3, 303ee <download_thread+0x1d2>
			LOG_INF("Downloaded %u/%u bytes (%d%%)",
   303a2:	2164      	movs	r1, #100	; 0x64
   303a4:	4351      	muls	r1, r2
   303a6:	fbb1 f1f3 	udiv	r1, r1, r3
   303aa:	482c      	ldr	r0, [pc, #176]	; (3045c <download_thread+0x240>)
   303ac:	9100      	str	r1, [sp, #0]
   303ae:	2149      	movs	r1, #73	; 0x49
   303b0:	f00c fb7e 	bl	3cab0 <z_log_minimal_printk>
		rc = fragment_evt_send(dl);
   303b4:	4628      	mov	r0, r5
   303b6:	f7ff fc7f 	bl	2fcb8 <fragment_evt_send>
		if (rc) {
   303ba:	4604      	mov	r4, r0
   303bc:	2800      	cmp	r0, #0
   303be:	d198      	bne.n	302f2 <download_thread+0xd6>
		if (dl->progress == dl->file_size) {
   303c0:	f8d5 2920 	ldr.w	r2, [r5, #2336]	; 0x920
   303c4:	f8d5 391c 	ldr.w	r3, [r5, #2332]	; 0x91c
   303c8:	429a      	cmp	r2, r3
   303ca:	d115      	bne.n	303f8 <download_thread+0x1dc>
			LOG_INF("Download complete");
   303cc:	2149      	movs	r1, #73	; 0x49
   303ce:	4824      	ldr	r0, [pc, #144]	; (30460 <download_thread+0x244>)
   303d0:	f00c fb6e 	bl	3cab0 <z_log_minimal_printk>
			const struct download_client_evt evt = {
   303d4:	2302      	movs	r3, #2
   303d6:	e9cd 4402 	strd	r4, r4, [sp, #8]
   303da:	f88d 3008 	strb.w	r3, [sp, #8]
			dl->callback(&evt);
   303de:	f505 5380 	add.w	r3, r5, #4096	; 0x1000
   303e2:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
			const struct download_client_evt evt = {
   303e6:	9404      	str	r4, [sp, #16]
			dl->callback(&evt);
   303e8:	a802      	add	r0, sp, #8
   303ea:	4798      	blx	r3
			break;
   303ec:	e720      	b.n	30230 <download_thread+0x14>
			LOG_INF("Downloaded %u bytes", dl->progress);
   303ee:	2149      	movs	r1, #73	; 0x49
   303f0:	481c      	ldr	r0, [pc, #112]	; (30464 <download_thread+0x248>)
   303f2:	f00c fb5d 	bl	3cab0 <z_log_minimal_printk>
   303f6:	e7dd      	b.n	303b4 <download_thread+0x198>
		if (dl->http.connection_close) {
   303f8:	f895 3941 	ldrb.w	r3, [r5, #2369]	; 0x941
   303fc:	b123      	cbz	r3, 30408 <download_thread+0x1ec>
			dl->http.connection_close = false;
   303fe:	f885 0941 	strb.w	r0, [r5, #2369]	; 0x941
			reconnect(dl);
   30402:	4628      	mov	r0, r5
   30404:	f7ff fef4 	bl	301f0 <reconnect>
		dl->offset = 0;
   30408:	2600      	movs	r6, #0
			rc = request_send(dl);
   3040a:	4628      	mov	r0, r5
		dl->offset = 0;
   3040c:	f8c5 6918 	str.w	r6, [r5, #2328]	; 0x918
			dl->http.has_header = false;
   30410:	f885 6940 	strb.w	r6, [r5, #2368]	; 0x940
			rc = request_send(dl);
   30414:	f00f f9ca 	bl	3f7ac <request_send>
			if (rc) {
   30418:	4604      	mov	r4, r0
   3041a:	2800      	cmp	r0, #0
   3041c:	f43f af0e 	beq.w	3023c <download_thread+0x20>
				rc = error_evt_send(dl, ECONNRESET);
   30420:	2168      	movs	r1, #104	; 0x68
   30422:	4628      	mov	r0, r5
   30424:	f00f f9b0 	bl	3f788 <error_evt_send>
				if (rc) {
   30428:	4604      	mov	r4, r0
   3042a:	2800      	cmp	r0, #0
   3042c:	f47f af00 	bne.w	30230 <download_thread+0x14>
				rc = reconnect(dl);
   30430:	4628      	mov	r0, r5
   30432:	f7ff fedd 	bl	301f0 <reconnect>
				if (rc) {
   30436:	4604      	mov	r4, r0
   30438:	2800      	cmp	r0, #0
   3043a:	d0e6      	beq.n	3040a <download_thread+0x1ee>
   3043c:	e786      	b.n	3034c <download_thread+0x130>
   3043e:	bf00      	nop
   30440:	0004a86d 	.word	0x0004a86d
   30444:	0004ab7e 	.word	0x0004ab7e
   30448:	0004a8b2 	.word	0x0004a8b2
   3044c:	0004abc5 	.word	0x0004abc5
   30450:	0004abb0 	.word	0x0004abb0
   30454:	0004abee 	.word	0x0004abee
   30458:	0004ac0d 	.word	0x0004ac0d
   3045c:	0004ac2a 	.word	0x0004ac2a
   30460:	0004a2a8 	.word	0x0004a2a8
   30464:	0004ac4d 	.word	0x0004ac4d
   30468:	00043ff2 	.word	0x00043ff2

0003046c <download_client_start>:

int download_client_start(struct download_client *client, const char *file,
			  size_t from)
{
   3046c:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (client == NULL) {
   3046e:	4604      	mov	r4, r0
   30470:	b1f8      	cbz	r0, 304b2 <download_client_start+0x46>
		return -EINVAL;
	}

	if (client->fd < 0) {
   30472:	6803      	ldr	r3, [r0, #0]
   30474:	2b00      	cmp	r3, #0
   30476:	db1f      	blt.n	304b8 <download_client_start+0x4c>
		return -ENOTCONN;
	}

	client->file = file;
	client->file_size = 0;
   30478:	2300      	movs	r3, #0
	client->file = file;
   3047a:	f8c0 1928 	str.w	r1, [r0, #2344]	; 0x928
	client->file_size = 0;
   3047e:	f8c0 391c 	str.w	r3, [r0, #2332]	; 0x91c
	client->progress = from;
   30482:	f8c0 2920 	str.w	r2, [r0, #2336]	; 0x920

	client->offset = 0;
   30486:	f8c0 3918 	str.w	r3, [r0, #2328]	; 0x918
	client->http.has_header = false;
   3048a:	f880 3940 	strb.w	r3, [r0, #2368]	; 0x940
		if (IS_ENABLED(CONFIG_COAP)) {
			coap_block_init(client, from);
		}
	}

	err = request_send(client);
   3048e:	f00f f98d 	bl	3f7ac <request_send>
	if (err) {
   30492:	4605      	mov	r5, r0
   30494:	b958      	cbnz	r0, 304ae <download_client_start+0x42>
		return err;
	}

	LOG_INF("Downloading: %s [%u]", log_strdup(client->file),
   30496:	2149      	movs	r1, #73	; 0x49
   30498:	f8d4 3920 	ldr.w	r3, [r4, #2336]	; 0x920
   3049c:	f8d4 2928 	ldr.w	r2, [r4, #2344]	; 0x928
   304a0:	4807      	ldr	r0, [pc, #28]	; (304c0 <download_client_start+0x54>)
   304a2:	f00c fb05 	bl	3cab0 <z_log_minimal_printk>
		client->progress);

	/* Let the thread run */
	k_thread_resume(client->tid);
   304a6:	f8d4 097c 	ldr.w	r0, [r4, #2428]	; 0x97c
	z_impl_k_thread_resume(thread);
   304aa:	f007 fcbd 	bl	37e28 <z_impl_k_thread_resume>

	return 0;
}
   304ae:	4628      	mov	r0, r5
   304b0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   304b2:	f06f 0515 	mvn.w	r5, #21
   304b6:	e7fa      	b.n	304ae <download_client_start+0x42>
		return -ENOTCONN;
   304b8:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   304bc:	e7f7      	b.n	304ae <download_client_start+0x42>
   304be:	bf00      	nop
   304c0:	0004ac66 	.word	0x0004ac66

000304c4 <url_parse_proto>:
	*str = p + strlen(swallow);
	return 0;
}

int url_parse_proto(const char *url, int *proto, int *type)
{
   304c4:	b570      	push	{r4, r5, r6, lr}
   304c6:	460d      	mov	r5, r1
   304c8:	4614      	mov	r4, r2
	if (strncmp(url, "https", 5) == 0) {
   304ca:	4915      	ldr	r1, [pc, #84]	; (30520 <url_parse_proto+0x5c>)
   304cc:	2205      	movs	r2, #5
{
   304ce:	4606      	mov	r6, r0
	if (strncmp(url, "https", 5) == 0) {
   304d0:	f011 f95b 	bl	4178a <strncmp>
   304d4:	b928      	cbnz	r0, 304e2 <url_parse_proto+0x1e>
		*proto = IPPROTO_TLS_1_2;
   304d6:	f44f 7381 	mov.w	r3, #258	; 0x102
		*type = SOCK_STREAM;
	} else if (strncmp(url, "http", 4) == 0) {
		*proto = IPPROTO_TCP;
   304da:	602b      	str	r3, [r5, #0]
		*type = SOCK_STREAM;
   304dc:	2301      	movs	r3, #1
	} else if (strncmp(url, "coaps", 5) == 0) {
		*proto = IPPROTO_DTLS_1_2;
		*type = SOCK_DGRAM;
	} else if (strncmp(url, "coap", 4) == 0) {
		*proto = IPPROTO_UDP;
		*type = SOCK_DGRAM;
   304de:	6023      	str	r3, [r4, #0]
	} else {
		return -EINVAL;
	}
	return 0;
}
   304e0:	bd70      	pop	{r4, r5, r6, pc}
	} else if (strncmp(url, "http", 4) == 0) {
   304e2:	2204      	movs	r2, #4
   304e4:	4630      	mov	r0, r6
   304e6:	490f      	ldr	r1, [pc, #60]	; (30524 <url_parse_proto+0x60>)
   304e8:	f011 f94f 	bl	4178a <strncmp>
   304ec:	b908      	cbnz	r0, 304f2 <url_parse_proto+0x2e>
		*proto = IPPROTO_TCP;
   304ee:	2306      	movs	r3, #6
   304f0:	e7f3      	b.n	304da <url_parse_proto+0x16>
	} else if (strncmp(url, "coaps", 5) == 0) {
   304f2:	2205      	movs	r2, #5
   304f4:	4630      	mov	r0, r6
   304f6:	490c      	ldr	r1, [pc, #48]	; (30528 <url_parse_proto+0x64>)
   304f8:	f011 f947 	bl	4178a <strncmp>
   304fc:	b920      	cbnz	r0, 30508 <url_parse_proto+0x44>
		*proto = IPPROTO_DTLS_1_2;
   304fe:	f240 1311 	movw	r3, #273	; 0x111
		*proto = IPPROTO_UDP;
   30502:	602b      	str	r3, [r5, #0]
		*type = SOCK_DGRAM;
   30504:	2302      	movs	r3, #2
   30506:	e7ea      	b.n	304de <url_parse_proto+0x1a>
	} else if (strncmp(url, "coap", 4) == 0) {
   30508:	2204      	movs	r2, #4
   3050a:	4630      	mov	r0, r6
   3050c:	4907      	ldr	r1, [pc, #28]	; (3052c <url_parse_proto+0x68>)
   3050e:	f011 f93c 	bl	4178a <strncmp>
   30512:	b908      	cbnz	r0, 30518 <url_parse_proto+0x54>
		*proto = IPPROTO_UDP;
   30514:	2311      	movs	r3, #17
   30516:	e7f4      	b.n	30502 <url_parse_proto+0x3e>
		return -EINVAL;
   30518:	f06f 0015 	mvn.w	r0, #21
   3051c:	e7e0      	b.n	304e0 <url_parse_proto+0x1c>
   3051e:	bf00      	nop
   30520:	0004ac80 	.word	0x0004ac80
   30524:	0004ac86 	.word	0x0004ac86
   30528:	0004ac8b 	.word	0x0004ac8b
   3052c:	0004ac91 	.word	0x0004ac91

00030530 <url_parse_host>:

int url_parse_host(const char *url, char *host, size_t len)
{
   30530:	b573      	push	{r0, r1, r4, r5, r6, lr}
   30532:	4604      	mov	r4, r0
	const char *cur;
	const char *end;

	cur = url;
   30534:	9001      	str	r0, [sp, #4]
{
   30536:	460d      	mov	r5, r1

	(void)swallow(&cur, "://");
   30538:	a801      	add	r0, sp, #4
   3053a:	4918      	ldr	r1, [pc, #96]	; (3059c <url_parse_host+0x6c>)
{
   3053c:	4616      	mov	r6, r2
	(void)swallow(&cur, "://");
   3053e:	f00f f94a 	bl	3f7d6 <swallow>

	if (cur[0] == '[') {
   30542:	9801      	ldr	r0, [sp, #4]
   30544:	7803      	ldrb	r3, [r0, #0]
   30546:	2b5b      	cmp	r3, #91	; 0x5b
   30548:	d111      	bne.n	3056e <url_parse_host+0x3e>
		/* literal IPv6 address */
		end = strchr(cur, ']');
   3054a:	215d      	movs	r1, #93	; 0x5d
   3054c:	f011 f908 	bl	41760 <strchr>

		if (!end) {
   30550:	b1f0      	cbz	r0, 30590 <url_parse_host+0x60>
			return -EINVAL;
		}
		++end;
   30552:	3001      	adds	r0, #1
				end = url + strlen(url) + 1;
			}
		}
	}

	if (end - cur + 1 > len) {
   30554:	9901      	ldr	r1, [sp, #4]
   30556:	1a44      	subs	r4, r0, r1
   30558:	1c63      	adds	r3, r4, #1
   3055a:	42b3      	cmp	r3, r6
   3055c:	d81b      	bhi.n	30596 <url_parse_host+0x66>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3055e:	4622      	mov	r2, r4
   30560:	4628      	mov	r0, r5
   30562:	f010 ff1f 	bl	413a4 <memcpy>
	}

	len = end - cur;

	memcpy(host, cur, len);
	host[len] = '\0';
   30566:	2000      	movs	r0, #0
   30568:	5528      	strb	r0, [r5, r4]

	return 0;
}
   3056a:	b002      	add	sp, #8
   3056c:	bd70      	pop	{r4, r5, r6, pc}
		end = strchr(cur, ':');
   3056e:	213a      	movs	r1, #58	; 0x3a
   30570:	f011 f8f6 	bl	41760 <strchr>
		if (!end) {
   30574:	2800      	cmp	r0, #0
   30576:	d1ed      	bne.n	30554 <url_parse_host+0x24>
			end = strchr(cur, '/');
   30578:	212f      	movs	r1, #47	; 0x2f
   3057a:	9801      	ldr	r0, [sp, #4]
   3057c:	f011 f8f0 	bl	41760 <strchr>
			if (!end) {
   30580:	2800      	cmp	r0, #0
   30582:	d1e7      	bne.n	30554 <url_parse_host+0x24>
				end = url + strlen(url) + 1;
   30584:	4620      	mov	r0, r4
   30586:	f7ec fe5c 	bl	1d242 <strlen>
   3058a:	1c43      	adds	r3, r0, #1
   3058c:	18e0      	adds	r0, r4, r3
   3058e:	e7e1      	b.n	30554 <url_parse_host+0x24>
			return -EINVAL;
   30590:	f06f 0015 	mvn.w	r0, #21
   30594:	e7e9      	b.n	3056a <url_parse_host+0x3a>
		return -E2BIG;
   30596:	f06f 0006 	mvn.w	r0, #6
   3059a:	e7e6      	b.n	3056a <url_parse_host+0x3a>
   3059c:	0004ac96 	.word	0x0004ac96

000305a0 <url_parse_port>:

int url_parse_port(const char *url, uint16_t *port)
{
   305a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   305a2:	460e      	mov	r6, r1
	const char *cur;
	const char *end;
	char aport[8];
	size_t len;

	cur = url;
   305a4:	9001      	str	r0, [sp, #4]

	(void)swallow(&cur, "://");
   305a6:	491b      	ldr	r1, [pc, #108]	; (30614 <url_parse_port+0x74>)
   305a8:	a801      	add	r0, sp, #4
   305aa:	f00f f914 	bl	3f7d6 <swallow>

	if (cur[0] == '[') {
   305ae:	9b01      	ldr	r3, [sp, #4]
   305b0:	781b      	ldrb	r3, [r3, #0]
   305b2:	2b5b      	cmp	r3, #91	; 0x5b
   305b4:	d103      	bne.n	305be <url_parse_port+0x1e>
		/* literal IPv6 address */
		swallow(&cur, "]");
   305b6:	4918      	ldr	r1, [pc, #96]	; (30618 <url_parse_port+0x78>)
   305b8:	a801      	add	r0, sp, #4
   305ba:	f00f f90c 	bl	3f7d6 <swallow>
	}

	err = swallow(&cur, ":");
   305be:	4917      	ldr	r1, [pc, #92]	; (3061c <url_parse_port+0x7c>)
   305c0:	a801      	add	r0, sp, #4
   305c2:	f00f f908 	bl	3f7d6 <swallow>
	if (err) {
   305c6:	4605      	mov	r5, r0
   305c8:	bb08      	cbnz	r0, 3060e <url_parse_port+0x6e>
		return -EINVAL;
	}

	end = strchr(cur, '/');
   305ca:	212f      	movs	r1, #47	; 0x2f
   305cc:	9801      	ldr	r0, [sp, #4]
   305ce:	f011 f8c7 	bl	41760 <strchr>
	if (!end) {
   305d2:	4604      	mov	r4, r0
		len = strlen(cur);
   305d4:	9801      	ldr	r0, [sp, #4]
	if (!end) {
   305d6:	b9c4      	cbnz	r4, 3060a <url_parse_port+0x6a>
		len = strlen(cur);
   305d8:	f7ec fe33 	bl	1d242 <strlen>
   305dc:	4604      	mov	r4, r0
	} else {
		len = end - cur;
	}

	len = MIN(len, sizeof(aport) - 1);
   305de:	2c07      	cmp	r4, #7
   305e0:	bf28      	it	cs
   305e2:	2407      	movcs	r4, #7

	memcpy(aport, cur, len);
   305e4:	2308      	movs	r3, #8
   305e6:	4622      	mov	r2, r4
   305e8:	9901      	ldr	r1, [sp, #4]
   305ea:	eb0d 0003 	add.w	r0, sp, r3
   305ee:	f010 fee6 	bl	413be <__memcpy_chk>
	aport[len] = '\0';
   305f2:	ab04      	add	r3, sp, #16
   305f4:	441c      	add	r4, r3
   305f6:	2300      	movs	r3, #0

	*port = atoi(aport);
   305f8:	a802      	add	r0, sp, #8
	aport[len] = '\0';
   305fa:	f804 3c08 	strb.w	r3, [r4, #-8]
	*port = atoi(aport);
   305fe:	f010 feaf 	bl	41360 <atoi>
   30602:	8030      	strh	r0, [r6, #0]

	return 0;
}
   30604:	4628      	mov	r0, r5
   30606:	b004      	add	sp, #16
   30608:	bd70      	pop	{r4, r5, r6, pc}
		len = end - cur;
   3060a:	1a24      	subs	r4, r4, r0
   3060c:	e7e7      	b.n	305de <url_parse_port+0x3e>
		return -EINVAL;
   3060e:	f06f 0515 	mvn.w	r5, #21
   30612:	e7f7      	b.n	30604 <url_parse_port+0x64>
   30614:	0004ac96 	.word	0x0004ac96
   30618:	0004a3f1 	.word	0x0004a3f1
   3061c:	0004b907 	.word	0x0004b907

00030620 <url_parse_file>:

int url_parse_file(const char *url, char *file, size_t len)
{
   30620:	b537      	push	{r0, r1, r2, r4, r5, lr}
   30622:	460d      	mov	r5, r1
	int err;
	const char *cur;

	cur = url;

	if (strstr(url, "//")) {
   30624:	4915      	ldr	r1, [pc, #84]	; (3067c <url_parse_file+0x5c>)
{
   30626:	4614      	mov	r4, r2
	cur = url;
   30628:	9001      	str	r0, [sp, #4]
	if (strstr(url, "//")) {
   3062a:	f011 f8f5 	bl	41818 <strstr>
   3062e:	b940      	cbnz	r0, 30642 <url_parse_file+0x22>
		if (err) {
			return -EINVAL;
		}
	}

	if (strlen(cur) + 1 > len) {
   30630:	9801      	ldr	r0, [sp, #4]
   30632:	f7ec fe06 	bl	1d242 <strlen>
   30636:	3001      	adds	r0, #1
   30638:	42a0      	cmp	r0, r4
   3063a:	d912      	bls.n	30662 <url_parse_file+0x42>
		return -E2BIG;
   3063c:	f06f 0006 	mvn.w	r0, #6
   30640:	e006      	b.n	30650 <url_parse_file+0x30>
		err = swallow(&cur, "://");
   30642:	490f      	ldr	r1, [pc, #60]	; (30680 <url_parse_file+0x60>)
   30644:	a801      	add	r0, sp, #4
   30646:	f00f f8c6 	bl	3f7d6 <swallow>
		if (err) {
   3064a:	b118      	cbz	r0, 30654 <url_parse_file+0x34>
			return -EINVAL;
   3064c:	f06f 0015 	mvn.w	r0, #21

	memcpy(file, cur, len);
	file[len] = '\0';

	return 0;
}
   30650:	b003      	add	sp, #12
   30652:	bd30      	pop	{r4, r5, pc}
		err = swallow(&cur, "/");
   30654:	490b      	ldr	r1, [pc, #44]	; (30684 <url_parse_file+0x64>)
   30656:	a801      	add	r0, sp, #4
   30658:	f00f f8bd 	bl	3f7d6 <swallow>
		if (err) {
   3065c:	2800      	cmp	r0, #0
   3065e:	d0e7      	beq.n	30630 <url_parse_file+0x10>
   30660:	e7f4      	b.n	3064c <url_parse_file+0x2c>
	len = strlen(cur);
   30662:	9801      	ldr	r0, [sp, #4]
   30664:	f7ec fded 	bl	1d242 <strlen>
   30668:	9901      	ldr	r1, [sp, #4]
   3066a:	4604      	mov	r4, r0
   3066c:	4602      	mov	r2, r0
   3066e:	4628      	mov	r0, r5
   30670:	f010 fe98 	bl	413a4 <memcpy>
	file[len] = '\0';
   30674:	2300      	movs	r3, #0
	return 0;
   30676:	4618      	mov	r0, r3
	file[len] = '\0';
   30678:	552b      	strb	r3, [r5, r4]
	return 0;
   3067a:	e7e9      	b.n	30650 <url_parse_file+0x30>
   3067c:	0004ac97 	.word	0x0004ac97
   30680:	0004ac96 	.word	0x0004ac96
   30684:	0004ac98 	.word	0x0004ac98

00030688 <http_get_request_send>:
int url_parse_host(const char *url, char *host, size_t len);
int url_parse_file(const char *url, char *file, size_t len);
int socket_send(const struct download_client *client, size_t len, int timeout);

int http_get_request_send(struct download_client *client)
{
   30688:	b570      	push	{r4, r5, r6, lr}
	int len;
	size_t off;
	char host[HOSTNAME_SIZE];
	char file[FILENAME_SIZE];

	__ASSERT_NO_MSG(client->host);
   3068a:	f8d0 3924 	ldr.w	r3, [r0, #2340]	; 0x924
{
   3068e:	4605      	mov	r5, r0
   30690:	b0d4      	sub	sp, #336	; 0x150
	__ASSERT_NO_MSG(client->host);
   30692:	b943      	cbnz	r3, 306a6 <http_get_request_send+0x1e>
   30694:	4929      	ldr	r1, [pc, #164]	; (3073c <http_get_request_send+0xb4>)
   30696:	482a      	ldr	r0, [pc, #168]	; (30740 <http_get_request_send+0xb8>)
   30698:	2237      	movs	r2, #55	; 0x37
   3069a:	f00c f9cf 	bl	3ca3c <assert_print>
   3069e:	2137      	movs	r1, #55	; 0x37
   306a0:	4826      	ldr	r0, [pc, #152]	; (3073c <http_get_request_send+0xb4>)
   306a2:	f00c f9c4 	bl	3ca2e <assert_post_action>
	__ASSERT_NO_MSG(client->file);
   306a6:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
   306aa:	b943      	cbnz	r3, 306be <http_get_request_send+0x36>
   306ac:	4923      	ldr	r1, [pc, #140]	; (3073c <http_get_request_send+0xb4>)
   306ae:	4824      	ldr	r0, [pc, #144]	; (30740 <http_get_request_send+0xb8>)
   306b0:	2238      	movs	r2, #56	; 0x38
   306b2:	f00c f9c3 	bl	3ca3c <assert_print>
   306b6:	2138      	movs	r1, #56	; 0x38
   306b8:	4820      	ldr	r0, [pc, #128]	; (3073c <http_get_request_send+0xb4>)
   306ba:	f00c f9b8 	bl	3ca2e <assert_post_action>

	err = url_parse_host(client->host, host, sizeof(host));
   306be:	ae04      	add	r6, sp, #16
   306c0:	2280      	movs	r2, #128	; 0x80
   306c2:	4631      	mov	r1, r6
   306c4:	f8d5 0924 	ldr.w	r0, [r5, #2340]	; 0x924
   306c8:	f7ff ff32 	bl	30530 <url_parse_host>
	if (err) {
   306cc:	4604      	mov	r4, r0
   306ce:	bb70      	cbnz	r0, 3072e <http_get_request_send+0xa6>
		return err;
	}

	err = url_parse_file(client->file, file, sizeof(file));
   306d0:	22c0      	movs	r2, #192	; 0xc0
   306d2:	f8d5 0928 	ldr.w	r0, [r5, #2344]	; 0x928
   306d6:	a924      	add	r1, sp, #144	; 0x90
   306d8:	f7ff ffa2 	bl	30620 <url_parse_file>
	if (err) {
   306dc:	4604      	mov	r4, r0
   306de:	bb30      	cbnz	r0, 3072e <http_get_request_send+0xa6>
		return err;
	}

	/* Offset of last byte in range (Content-Range) */
	if (client->config.frag_size_override) {
   306e0:	f8d5 3934 	ldr.w	r3, [r5, #2356]	; 0x934
		off = client->progress + client->config.frag_size_override - 1;
   306e4:	f8d5 1920 	ldr.w	r1, [r5, #2336]	; 0x920
	if (client->config.frag_size_override) {
   306e8:	b323      	cbz	r3, 30734 <http_get_request_send+0xac>
		off = client->progress + client->config.frag_size_override - 1;
   306ea:	440b      	add	r3, r1
   306ec:	3b01      	subs	r3, #1
	} else {
		off = client->progress +
			CONFIG_DOWNLOAD_CLIENT_HTTP_FRAG_SIZE - 1;
	}

	if (client->file_size != 0) {
   306ee:	f8d5 291c 	ldr.w	r2, [r5, #2332]	; 0x91c
   306f2:	b11a      	cbz	r2, 306fc <http_get_request_send+0x74>
		/* Don't request bytes past the end of file */
		off = MIN(off, client->file_size - 1);
   306f4:	3a01      	subs	r2, #1
   306f6:	4293      	cmp	r3, r2
   306f8:	bf28      	it	cs
   306fa:	4613      	movcs	r3, r2
	}

	if (client->proto == IPPROTO_TLS_1_2
	   || IS_ENABLED(CONFIG_DOWNLOAD_CLIENT_RANGE_REQUESTS)) {
		len = snprintf(client->buf,
   306fc:	e9cd 1301 	strd	r1, r3, [sp, #4]
   30700:	4a10      	ldr	r2, [pc, #64]	; (30744 <http_get_request_send+0xbc>)
   30702:	f640 01fc 	movw	r1, #2300	; 0x8fc
   30706:	ab24      	add	r3, sp, #144	; 0x90
   30708:	9600      	str	r6, [sp, #0]
   3070a:	f105 001c 	add.w	r0, r5, #28
   3070e:	f009 ffa1 	bl	3a654 <sniprintf>

	if (IS_ENABLED(CONFIG_DOWNLOAD_CLIENT_LOG_HEADERS)) {
		LOG_HEXDUMP_DBG(client->buf, len, "HTTP request");
	}

	err = socket_send(client, len, 0);
   30712:	2200      	movs	r2, #0
		len = snprintf(client->buf,
   30714:	4601      	mov	r1, r0
	err = socket_send(client, len, 0);
   30716:	4628      	mov	r0, r5
   30718:	f7ff faf6 	bl	2fd08 <socket_send>
	if (err) {
   3071c:	4604      	mov	r4, r0
   3071e:	b130      	cbz	r0, 3072e <http_get_request_send+0xa6>
		LOG_ERR("Failed to send HTTP request, errno %d", errno);
   30720:	f00d f805 	bl	3d72e <__errno>
   30724:	2145      	movs	r1, #69	; 0x45
   30726:	6802      	ldr	r2, [r0, #0]
   30728:	4807      	ldr	r0, [pc, #28]	; (30748 <http_get_request_send+0xc0>)
   3072a:	f00c f9c1 	bl	3cab0 <z_log_minimal_printk>
		return err;
	}

	return 0;
}
   3072e:	4620      	mov	r0, r4
   30730:	b054      	add	sp, #336	; 0x150
   30732:	bd70      	pop	{r4, r5, r6, pc}
		off = client->progress +
   30734:	f201 33ff 	addw	r3, r1, #1023	; 0x3ff
   30738:	e7d9      	b.n	306ee <http_get_request_send+0x66>
   3073a:	bf00      	nop
   3073c:	0004ac9a 	.word	0x0004ac9a
   30740:	00043ff2 	.word	0x00043ff2
   30744:	0004acd4 	.word	0x0004acd4
   30748:	0004ad1f 	.word	0x0004ad1f

0003074c <http_parse>:
{
	int rc;
	size_t hdr_len;

	/* Accumulate buffer offset */
	client->offset += len;
   3074c:	f8d0 3918 	ldr.w	r3, [r0, #2328]	; 0x918
{
   30750:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	client->offset += len;
   30754:	440b      	add	r3, r1
   30756:	f8c0 3918 	str.w	r3, [r0, #2328]	; 0x918

	if (!client->http.has_header) {
   3075a:	f890 3940 	ldrb.w	r3, [r0, #2368]	; 0x940
{
   3075e:	4604      	mov	r4, r0
   30760:	4688      	mov	r8, r1
	if (!client->http.has_header) {
   30762:	2b00      	cmp	r3, #0
   30764:	f040 8092 	bne.w	3088c <http_parse+0x140>
	p = strstr(client->buf, "\r\n\r\n");
   30768:	f100 071c 	add.w	r7, r0, #28
   3076c:	4638      	mov	r0, r7
   3076e:	4956      	ldr	r1, [pc, #344]	; (308c8 <http_parse+0x17c>)
   30770:	f011 f852 	bl	41818 <strstr>
	if (!p || p > client->buf + client->offset) {
   30774:	4605      	mov	r5, r0
   30776:	b918      	cbnz	r0, 30780 <http_parse+0x34>
		rc = http_header_parse(client, &hdr_len);
		if (rc > 0) {
			/* Wait for header */
			return 1;
   30778:	2001      	movs	r0, #1
			      CONFIG_DOWNLOAD_CLIENT_HTTP_FRAG_SIZE)) {
		return 1;
	}

	return 0;
}
   3077a:	b003      	add	sp, #12
   3077c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!p || p > client->buf + client->offset) {
   30780:	f8d4 3918 	ldr.w	r3, [r4, #2328]	; 0x918
   30784:	443b      	add	r3, r7
   30786:	4298      	cmp	r0, r3
   30788:	d8f6      	bhi.n	30778 <http_parse+0x2c>
	*hdr_len = p + strlen("\r\n\r\n") - client->buf;
   3078a:	484f      	ldr	r0, [pc, #316]	; (308c8 <http_parse+0x17c>)
   3078c:	f7ec fd59 	bl	1d242 <strlen>
   30790:	4405      	add	r5, r0
   30792:	463b      	mov	r3, r7
   30794:	4628      	mov	r0, r5
		client->buf[i] = tolower(client->buf[i]);
   30796:	4e4d      	ldr	r6, [pc, #308]	; (308cc <http_parse+0x180>)
	*hdr_len = p + strlen("\r\n\r\n") - client->buf;
   30798:	eba5 0907 	sub.w	r9, r5, r7
	for (size_t i = 0; i < *hdr_len; i++) {
   3079c:	4298      	cmp	r0, r3
   3079e:	d10a      	bne.n	307b6 <http_parse+0x6a>
	p = strstr(client->buf, "http/1.1 ");
   307a0:	4638      	mov	r0, r7
   307a2:	494b      	ldr	r1, [pc, #300]	; (308d0 <http_parse+0x184>)
   307a4:	f011 f838 	bl	41818 <strstr>
	if (!p) {
   307a8:	4606      	mov	r6, r0
   307aa:	b970      	cbnz	r0, 307ca <http_parse+0x7e>
		LOG_ERR("Server response missing HTTP/1.1");
   307ac:	2145      	movs	r1, #69	; 0x45
   307ae:	4849      	ldr	r0, [pc, #292]	; (308d4 <http_parse+0x188>)
				LOG_ERR("No file size in response");
   307b0:	f00c f97e 	bl	3cab0 <z_log_minimal_printk>
   307b4:	e02b      	b.n	3080e <http_parse+0xc2>
		client->buf[i] = tolower(client->buf[i]);
   307b6:	781a      	ldrb	r2, [r3, #0]
   307b8:	5d91      	ldrb	r1, [r2, r6]
   307ba:	f001 0103 	and.w	r1, r1, #3
   307be:	2901      	cmp	r1, #1
   307c0:	bf08      	it	eq
   307c2:	3220      	addeq	r2, #32
   307c4:	f803 2b01 	strb.w	r2, [r3], #1
	for (size_t i = 0; i < *hdr_len; i++) {
   307c8:	e7e8      	b.n	3079c <http_parse+0x50>
	p += strlen("http/1.1 ");
   307ca:	4841      	ldr	r0, [pc, #260]	; (308d0 <http_parse+0x184>)
   307cc:	f7ec fd39 	bl	1d242 <strlen>
   307d0:	4406      	add	r6, r0
	http_status = strtoul(p, &q, 10);
   307d2:	220a      	movs	r2, #10
   307d4:	4630      	mov	r0, r6
   307d6:	a901      	add	r1, sp, #4
   307d8:	f00a f946 	bl	3aa68 <strtoul>
	if (!q) {
   307dc:	9b01      	ldr	r3, [sp, #4]
   307de:	b913      	cbnz	r3, 307e6 <http_parse+0x9a>
		LOG_ERR("Server response malformed: status code not found");
   307e0:	2145      	movs	r1, #69	; 0x45
   307e2:	483d      	ldr	r0, [pc, #244]	; (308d8 <http_parse+0x18c>)
   307e4:	e7e4      	b.n	307b0 <http_parse+0x64>
	if (http_status != expected_status) {
   307e6:	28ce      	cmp	r0, #206	; 0xce
   307e8:	d017      	beq.n	3081a <http_parse+0xce>
		while ((*q != '\0') && (*q != '\r') && (*q != '\n')) {
   307ea:	f242 4201 	movw	r2, #9217	; 0x2401
   307ee:	9901      	ldr	r1, [sp, #4]
   307f0:	780b      	ldrb	r3, [r1, #0]
   307f2:	2b0d      	cmp	r3, #13
   307f4:	d80e      	bhi.n	30814 <http_parse+0xc8>
   307f6:	fa22 f303 	lsr.w	r3, r2, r3
   307fa:	43db      	mvns	r3, r3
   307fc:	f013 0301 	ands.w	r3, r3, #1
   30800:	d108      	bne.n	30814 <http_parse+0xc8>
		*q = '\0';
   30802:	700b      	strb	r3, [r1, #0]
		LOG_ERR("Unexpected HTTP response: %s", log_strdup(p));
   30804:	4632      	mov	r2, r6
   30806:	2145      	movs	r1, #69	; 0x45
   30808:	4834      	ldr	r0, [pc, #208]	; (308dc <http_parse+0x190>)
   3080a:	f00c f951 	bl	3cab0 <z_log_minimal_printk>
			return -1;
   3080e:	f04f 30ff 	mov.w	r0, #4294967295
   30812:	e7b2      	b.n	3077a <http_parse+0x2e>
			q++;
   30814:	3101      	adds	r1, #1
   30816:	9101      	str	r1, [sp, #4]
   30818:	e7e9      	b.n	307ee <http_parse+0xa2>
	if (client->file_size == 0) {
   3081a:	f8d4 391c 	ldr.w	r3, [r4, #2332]	; 0x91c
   3081e:	b9b3      	cbnz	r3, 3084e <http_parse+0x102>
			p = strstr(client->buf, "content-range");
   30820:	4638      	mov	r0, r7
   30822:	492f      	ldr	r1, [pc, #188]	; (308e0 <http_parse+0x194>)
   30824:	f010 fff8 	bl	41818 <strstr>
			if (!p) {
   30828:	b910      	cbnz	r0, 30830 <http_parse+0xe4>
				LOG_ERR("Server did not send "
   3082a:	2145      	movs	r1, #69	; 0x45
   3082c:	482d      	ldr	r0, [pc, #180]	; (308e4 <http_parse+0x198>)
   3082e:	e7bf      	b.n	307b0 <http_parse+0x64>
			p = strstr(p, "/");
   30830:	492d      	ldr	r1, [pc, #180]	; (308e8 <http_parse+0x19c>)
   30832:	f010 fff1 	bl	41818 <strstr>
			if (!p) {
   30836:	b910      	cbnz	r0, 3083e <http_parse+0xf2>
				LOG_ERR("No file size in response");
   30838:	2145      	movs	r1, #69	; 0x45
   3083a:	482c      	ldr	r0, [pc, #176]	; (308ec <http_parse+0x1a0>)
   3083c:	e7b8      	b.n	307b0 <http_parse+0x64>
		client->file_size += atoi(p + 1);
   3083e:	3001      	adds	r0, #1
   30840:	f010 fd8e 	bl	41360 <atoi>
   30844:	f8d4 391c 	ldr.w	r3, [r4, #2332]	; 0x91c
   30848:	4418      	add	r0, r3
   3084a:	f8c4 091c 	str.w	r0, [r4, #2332]	; 0x91c
	p = strstr(client->buf, "connection: close");
   3084e:	4638      	mov	r0, r7
   30850:	4927      	ldr	r1, [pc, #156]	; (308f0 <http_parse+0x1a4>)
   30852:	f010 ffe1 	bl	41818 <strstr>
	if (p) {
   30856:	b130      	cbz	r0, 30866 <http_parse+0x11a>
		LOG_WRN("Peer closed connection, will re-connect");
   30858:	2157      	movs	r1, #87	; 0x57
   3085a:	4826      	ldr	r0, [pc, #152]	; (308f4 <http_parse+0x1a8>)
   3085c:	f00c f928 	bl	3cab0 <z_log_minimal_printk>
		client->http.connection_close = true;
   30860:	2301      	movs	r3, #1
   30862:	f884 3941 	strb.w	r3, [r4, #2369]	; 0x941
	client->http.has_header = true;
   30866:	2301      	movs	r3, #1
		if (client->offset != hdr_len) {
   30868:	f8d4 2918 	ldr.w	r2, [r4, #2328]	; 0x918
	client->http.has_header = true;
   3086c:	f884 3940 	strb.w	r3, [r4, #2368]	; 0x940
		if (client->offset != hdr_len) {
   30870:	454a      	cmp	r2, r9
   30872:	d024      	beq.n	308be <http_parse+0x172>
   30874:	4629      	mov	r1, r5
   30876:	4638      	mov	r0, r7
   30878:	eba2 0209 	sub.w	r2, r2, r9
   3087c:	f010 fd92 	bl	413a4 <memcpy>
			client->offset -= hdr_len;
   30880:	f8d4 3918 	ldr.w	r3, [r4, #2328]	; 0x918
   30884:	eba3 0309 	sub.w	r3, r3, r9
			client->offset = 0;
   30888:	f8c4 3918 	str.w	r3, [r4, #2328]	; 0x918
	client->progress += MIN(client->offset, len);
   3088c:	f8d4 3920 	ldr.w	r3, [r4, #2336]	; 0x920
   30890:	f8d4 2918 	ldr.w	r2, [r4, #2328]	; 0x918
	if (client->progress != client->file_size &&
   30894:	f8d4 191c 	ldr.w	r1, [r4, #2332]	; 0x91c
	client->progress += MIN(client->offset, len);
   30898:	4590      	cmp	r8, r2
   3089a:	bf94      	ite	ls
   3089c:	4443      	addls	r3, r8
   3089e:	189b      	addhi	r3, r3, r2
	if (client->progress != client->file_size &&
   308a0:	428b      	cmp	r3, r1
	client->progress += MIN(client->offset, len);
   308a2:	f8c4 3920 	str.w	r3, [r4, #2336]	; 0x920
	if (client->progress != client->file_size &&
   308a6:	d00c      	beq.n	308c2 <http_parse+0x176>
	    client->offset < (client->config.frag_size_override != 0 ?
   308a8:	f8d4 0934 	ldr.w	r0, [r4, #2356]	; 0x934
			      client->config.frag_size_override :
   308ac:	2800      	cmp	r0, #0
   308ae:	bf08      	it	eq
   308b0:	f44f 6080 	moveq.w	r0, #1024	; 0x400
	if (client->progress != client->file_size &&
   308b4:	4290      	cmp	r0, r2
   308b6:	bf94      	ite	ls
   308b8:	2000      	movls	r0, #0
   308ba:	2001      	movhi	r0, #1
   308bc:	e75d      	b.n	3077a <http_parse+0x2e>
			client->offset = 0;
   308be:	2300      	movs	r3, #0
   308c0:	e7e2      	b.n	30888 <http_parse+0x13c>
	return 0;
   308c2:	2000      	movs	r0, #0
   308c4:	e759      	b.n	3077a <http_parse+0x2e>
   308c6:	bf00      	nop
   308c8:	0004ad1a 	.word	0x0004ad1a
   308cc:	0004bc8c 	.word	0x0004bc8c
   308d0:	0004ad4a 	.word	0x0004ad4a
   308d4:	0004ad54 	.word	0x0004ad54
   308d8:	0004ad7a 	.word	0x0004ad7a
   308dc:	0004adb0 	.word	0x0004adb0
   308e0:	0004add2 	.word	0x0004add2
   308e4:	0004ade0 	.word	0x0004ade0
   308e8:	0004ac98 	.word	0x0004ac98
   308ec:	0004ae15 	.word	0x0004ae15
   308f0:	0004ae33 	.word	0x0004ae33
   308f4:	0004ae45 	.word	0x0004ae45

000308f8 <send_error_evt>:
	};
	callback(&evt);
}

static void send_error_evt(enum fota_download_error_cause cause)
{
   308f8:	b507      	push	{r0, r1, r2, lr}
	__ASSERT(cause != FOTA_DOWNLOAD_ERROR_CAUSE_NO_ERROR, "use a valid error cause");
	const struct fota_download_evt evt = {
   308fa:	2300      	movs	r3, #0
   308fc:	2204      	movs	r2, #4
   308fe:	e9cd 3300 	strd	r3, r3, [sp]
   30902:	f88d 2000 	strb.w	r2, [sp]
		.id = FOTA_DOWNLOAD_EVT_ERROR,
		.cause = cause
	};
	downloading = false;
   30906:	4a05      	ldr	r2, [pc, #20]	; (3091c <send_error_evt+0x24>)
	const struct fota_download_evt evt = {
   30908:	f88d 0004 	strb.w	r0, [sp, #4]
	downloading = false;
   3090c:	7013      	strb	r3, [r2, #0]
	callback(&evt);
   3090e:	4b04      	ldr	r3, [pc, #16]	; (30920 <send_error_evt+0x28>)
   30910:	4668      	mov	r0, sp
   30912:	681b      	ldr	r3, [r3, #0]
   30914:	4798      	blx	r3
}
   30916:	b003      	add	sp, #12
   30918:	f85d fb04 	ldr.w	pc, [sp], #4
   3091c:	2001d2f7 	.word	0x2001d2f7
   30920:	2001a1c8 	.word	0x2001a1c8

00030924 <download_with_offset>:

	return 0;
}

static void download_with_offset(struct k_work *unused)
{
   30924:	b513      	push	{r0, r1, r4, lr}
	int offset;
	int err = dfu_target_offset_get(&offset);
   30926:	a801      	add	r0, sp, #4
   30928:	f000 fa6a 	bl	30e00 <dfu_target_offset_get>
	if (err != 0) {
   3092c:	4603      	mov	r3, r0
   3092e:	b148      	cbz	r0, 30944 <download_with_offset+0x20>
		LOG_ERR("%s failed to get offset with error %d", __func__, err);
   30930:	2145      	movs	r1, #69	; 0x45
   30932:	4a16      	ldr	r2, [pc, #88]	; (3098c <download_with_offset+0x68>)
   30934:	4816      	ldr	r0, [pc, #88]	; (30990 <download_with_offset+0x6c>)
		return;
	}

	err = download_client_start(&dlc, dlc.file, offset);
	if (err != 0) {
		LOG_ERR("%s failed to start download  with error %d", __func__,
   30936:	f00c f8bb 	bl	3cab0 <z_log_minimal_printk>
			err);
		send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   3093a:	2001      	movs	r0, #1
   3093c:	f7ff ffdc 	bl	308f8 <send_error_evt>
		return;
	}
	LOG_INF("Downloading from offset: 0x%x", offset);
	downloading = true;
	return;
}
   30940:	b002      	add	sp, #8
   30942:	bd10      	pop	{r4, pc}
	err = download_client_connect(&dlc, dlc.host, &dlc.config);
   30944:	4c13      	ldr	r4, [pc, #76]	; (30994 <download_with_offset+0x70>)
   30946:	4620      	mov	r0, r4
   30948:	f8d4 1924 	ldr.w	r1, [r4, #2340]	; 0x924
   3094c:	f604 122c 	addw	r2, r4, #2348	; 0x92c
   30950:	f7ff fa4c 	bl	2fdec <download_client_connect>
	if (err != 0) {
   30954:	4603      	mov	r3, r0
   30956:	b118      	cbz	r0, 30960 <download_with_offset+0x3c>
		LOG_ERR("%s failed to connect with error %d", __func__, err);
   30958:	2145      	movs	r1, #69	; 0x45
   3095a:	4a0c      	ldr	r2, [pc, #48]	; (3098c <download_with_offset+0x68>)
   3095c:	480e      	ldr	r0, [pc, #56]	; (30998 <download_with_offset+0x74>)
   3095e:	e7ea      	b.n	30936 <download_with_offset+0x12>
	err = download_client_start(&dlc, dlc.file, offset);
   30960:	4620      	mov	r0, r4
   30962:	9a01      	ldr	r2, [sp, #4]
   30964:	f8d4 1928 	ldr.w	r1, [r4, #2344]	; 0x928
   30968:	f7ff fd80 	bl	3046c <download_client_start>
	if (err != 0) {
   3096c:	4603      	mov	r3, r0
   3096e:	b118      	cbz	r0, 30978 <download_with_offset+0x54>
		LOG_ERR("%s failed to start download  with error %d", __func__,
   30970:	2145      	movs	r1, #69	; 0x45
   30972:	4a06      	ldr	r2, [pc, #24]	; (3098c <download_with_offset+0x68>)
   30974:	4809      	ldr	r0, [pc, #36]	; (3099c <download_with_offset+0x78>)
   30976:	e7de      	b.n	30936 <download_with_offset+0x12>
	LOG_INF("Downloading from offset: 0x%x", offset);
   30978:	9a01      	ldr	r2, [sp, #4]
   3097a:	2149      	movs	r1, #73	; 0x49
   3097c:	4808      	ldr	r0, [pc, #32]	; (309a0 <download_with_offset+0x7c>)
   3097e:	f00c f897 	bl	3cab0 <z_log_minimal_printk>
	downloading = true;
   30982:	2201      	movs	r2, #1
   30984:	4b07      	ldr	r3, [pc, #28]	; (309a4 <download_with_offset+0x80>)
   30986:	701a      	strb	r2, [r3, #0]
	return;
   30988:	e7da      	b.n	30940 <download_with_offset+0x1c>
   3098a:	bf00      	nop
   3098c:	0004b0b8 	.word	0x0004b0b8
   30990:	0004ae72 	.word	0x0004ae72
   30994:	20017360 	.word	0x20017360
   30998:	0004ae9d 	.word	0x0004ae9d
   3099c:	0004aec5 	.word	0x0004aec5
   309a0:	0004aef5 	.word	0x0004aef5
   309a4:	2001d2f7 	.word	0x2001d2f7

000309a8 <download_client_callback>:
{
   309a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (event == NULL) {
   309aa:	4605      	mov	r5, r0
   309ac:	2800      	cmp	r0, #0
   309ae:	f000 80f2 	beq.w	30b96 <_flash_used+0x17e>
	switch (event->id) {
   309b2:	7803      	ldrb	r3, [r0, #0]
   309b4:	2b01      	cmp	r3, #1
   309b6:	f000 80bf 	beq.w	30b38 <_flash_used+0x120>
   309ba:	2b02      	cmp	r3, #2
   309bc:	f000 8098 	beq.w	30af0 <_flash_used+0xd8>
   309c0:	2b00      	cmp	r3, #0
   309c2:	f040 80eb 	bne.w	30b9c <_flash_used+0x184>
		if (first_fragment) {
   309c6:	4e76      	ldr	r6, [pc, #472]	; (30ba0 <_flash_used+0x188>)
   309c8:	7833      	ldrb	r3, [r6, #0]
   309ca:	2b00      	cmp	r3, #0
   309cc:	d05a      	beq.n	30a84 <_flash_used+0x6c>
			err = download_client_file_size_get(&dlc, &file_size);
   309ce:	4975      	ldr	r1, [pc, #468]	; (30ba4 <_flash_used+0x18c>)
   309d0:	4875      	ldr	r0, [pc, #468]	; (30ba8 <_flash_used+0x190>)
   309d2:	f00e fef6 	bl	3f7c2 <download_client_file_size_get>
			if (err != 0) {
   309d6:	4604      	mov	r4, r0
   309d8:	b108      	cbz	r0, 309de <download_client_callback+0x36>
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   309da:	2001      	movs	r0, #1
   309dc:	e06b      	b.n	30ab6 <_flash_used+0x9e>
			first_fragment = false;
   309de:	7030      	strb	r0, [r6, #0]
			img_type = dfu_target_img_type(event->fragment.buf,
   309e0:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   309e4:	f000 f9c2 	bl	30d6c <dfu_target_img_type>
   309e8:	4b70      	ldr	r3, [pc, #448]	; (30bac <_flash_used+0x194>)
   309ea:	b2c0      	uxtb	r0, r0
   309ec:	7018      	strb	r0, [r3, #0]
			if ((img_type_expected != DFU_TARGET_IMAGE_TYPE_ANY) &&
   309ee:	4b70      	ldr	r3, [pc, #448]	; (30bb0 <_flash_used+0x198>)
   309f0:	781b      	ldrb	r3, [r3, #0]
   309f2:	b1e3      	cbz	r3, 30a2e <_flash_used+0x16>
   309f4:	4298      	cmp	r0, r3
   309f6:	d01a      	beq.n	30a2e <_flash_used+0x16>
				LOG_ERR("FOTA image type %d does not match expected type %d",
   309f8:	4602      	mov	r2, r0
   309fa:	2145      	movs	r1, #69	; 0x45
   309fc:	486d      	ldr	r0, [pc, #436]	; (30bb4 <_flash_used+0x19c>)
   309fe:	f00c f857 	bl	3cab0 <z_log_minimal_printk>
				err_cause = FOTA_DOWNLOAD_ERROR_CAUSE_TYPE_MISMATCH;
   30a02:	2503      	movs	r5, #3
				err = -EPROTOTYPE;
   30a04:	f06f 046a 	mvn.w	r4, #106	; 0x6a
				(void)download_client_disconnect(&dlc);
   30a08:	4867      	ldr	r0, [pc, #412]	; (30ba8 <_flash_used+0x190>)
   30a0a:	f7ff fbd3 	bl	301b4 <download_client_disconnect>
				send_error_evt(err_cause);
   30a0e:	4628      	mov	r0, r5
   30a10:	f7ff ff72 	bl	308f8 <send_error_evt>
				int res = dfu_target_reset();
   30a14:	f000 fa20 	bl	30e58 <dfu_target_reset>
				if (res != 0) {
   30a18:	4602      	mov	r2, r0
   30a1a:	b118      	cbz	r0, 30a24 <_flash_used+0xc>
					LOG_ERR("Unable to reset DFU target, err: %d",
   30a1c:	2145      	movs	r1, #69	; 0x45
   30a1e:	4866      	ldr	r0, [pc, #408]	; (30bb8 <_flash_used+0x1a0>)
   30a20:	f00c f846 	bl	3cab0 <z_log_minimal_printk>
				first_fragment = true;
   30a24:	2301      	movs	r3, #1
   30a26:	7033      	strb	r3, [r6, #0]
}
   30a28:	4620      	mov	r0, r4
   30a2a:	b004      	add	sp, #16
   30a2c:	bd70      	pop	{r4, r5, r6, pc}
				err = dfu_target_init(img_type, 0, file_size,
   30a2e:	4a5d      	ldr	r2, [pc, #372]	; (30ba4 <_flash_used+0x18c>)
   30a30:	2100      	movs	r1, #0
   30a32:	4b62      	ldr	r3, [pc, #392]	; (30bbc <_flash_used+0x1a4>)
   30a34:	6812      	ldr	r2, [r2, #0]
   30a36:	f000 f9b5 	bl	30da4 <dfu_target_init>
				if ((err < 0) && (err != -EBUSY)) {
   30a3a:	1e04      	subs	r4, r0, #0
   30a3c:	da09      	bge.n	30a52 <_flash_used+0x3a>
   30a3e:	f114 0f10 	cmn.w	r4, #16
   30a42:	d006      	beq.n	30a52 <_flash_used+0x3a>
					LOG_ERR("dfu_target_init error %d", err);
   30a44:	4622      	mov	r2, r4
   30a46:	2145      	movs	r1, #69	; 0x45
   30a48:	485d      	ldr	r0, [pc, #372]	; (30bc0 <_flash_used+0x1a8>)
   30a4a:	f00c f831 	bl	3cab0 <z_log_minimal_printk>
					err_cause = FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED;
   30a4e:	2501      	movs	r5, #1
   30a50:	e7da      	b.n	30a08 <download_client_callback+0x60>
			err = dfu_target_offset_get(&offset);
   30a52:	a801      	add	r0, sp, #4
   30a54:	f000 f9d4 	bl	30e00 <dfu_target_offset_get>
			if (err != 0) {
   30a58:	b110      	cbz	r0, 30a60 <_flash_used+0x48>
				send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   30a5a:	2001      	movs	r0, #1
   30a5c:	f7ff ff4c 	bl	308f8 <send_error_evt>
			if (offset != 0) {
   30a60:	9b01      	ldr	r3, [sp, #4]
   30a62:	b17b      	cbz	r3, 30a84 <_flash_used+0x6c>
				(void)download_client_disconnect(&dlc);
   30a64:	4850      	ldr	r0, [pc, #320]	; (30ba8 <_flash_used+0x190>)
   30a66:	f7ff fba5 	bl	301b4 <download_client_disconnect>
				k_work_schedule(&dlc_with_offset_work,
   30a6a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   30a6e:	2300      	movs	r3, #0
   30a70:	4854      	ldr	r0, [pc, #336]	; (30bc4 <_flash_used+0x1ac>)
   30a72:	f006 fddd 	bl	37630 <k_work_schedule>
				LOG_INF("Refuse fragment, restart with offset");
   30a76:	2149      	movs	r1, #73	; 0x49
   30a78:	4853      	ldr	r0, [pc, #332]	; (30bc8 <_flash_used+0x1b0>)
   30a7a:	f00c f819 	bl	3cab0 <z_log_minimal_printk>
				return -1;
   30a7e:	f04f 34ff 	mov.w	r4, #4294967295
   30a82:	e7d1      	b.n	30a28 <_flash_used+0x10>
		err = dfu_target_write(event->fragment.buf,
   30a84:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   30a88:	f000 f9c4 	bl	30e14 <dfu_target_write>
		if (err != 0) {
   30a8c:	4604      	mov	r4, r0
   30a8e:	b1a8      	cbz	r0, 30abc <_flash_used+0xa4>
			LOG_ERR("dfu_target_write error %d", err);
   30a90:	4602      	mov	r2, r0
   30a92:	2145      	movs	r1, #69	; 0x45
   30a94:	484d      	ldr	r0, [pc, #308]	; (30bcc <_flash_used+0x1b4>)
   30a96:	f00c f80b 	bl	3cab0 <z_log_minimal_printk>
			int res = dfu_target_done(false);
   30a9a:	2000      	movs	r0, #0
   30a9c:	f000 f9c6 	bl	30e2c <dfu_target_done>
			if (res != 0) {
   30aa0:	b118      	cbz	r0, 30aaa <_flash_used+0x92>
				LOG_ERR("Unable to free DFU target resources");
   30aa2:	2145      	movs	r1, #69	; 0x45
   30aa4:	484a      	ldr	r0, [pc, #296]	; (30bd0 <_flash_used+0x1b8>)
   30aa6:	f00c f803 	bl	3cab0 <z_log_minimal_printk>
			first_fragment = true;
   30aaa:	2301      	movs	r3, #1
			(void) download_client_disconnect(&dlc);
   30aac:	483e      	ldr	r0, [pc, #248]	; (30ba8 <_flash_used+0x190>)
			first_fragment = true;
   30aae:	7033      	strb	r3, [r6, #0]
			(void) download_client_disconnect(&dlc);
   30ab0:	f7ff fb80 	bl	301b4 <download_client_disconnect>
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_INVALID_UPDATE);
   30ab4:	2002      	movs	r0, #2
   30ab6:	f7ff ff1f 	bl	308f8 <send_error_evt>
			return err;
   30aba:	e7b5      	b.n	30a28 <_flash_used+0x10>
		if (IS_ENABLED(CONFIG_FOTA_DOWNLOAD_PROGRESS_EVT) &&
   30abc:	7833      	ldrb	r3, [r6, #0]
   30abe:	2b00      	cmp	r3, #0
   30ac0:	d1b2      	bne.n	30a28 <_flash_used+0x10>
			err = dfu_target_offset_get(&offset);
   30ac2:	a801      	add	r0, sp, #4
   30ac4:	f000 f99c 	bl	30e00 <dfu_target_offset_get>
			if (err != 0) {
   30ac8:	4604      	mov	r4, r0
   30aca:	2800      	cmp	r0, #0
   30acc:	d185      	bne.n	309da <download_client_callback+0x32>
			if (file_size == 0) {
   30ace:	4b35      	ldr	r3, [pc, #212]	; (30ba4 <_flash_used+0x18c>)
   30ad0:	681a      	ldr	r2, [r3, #0]
   30ad2:	2a00      	cmp	r2, #0
   30ad4:	d081      	beq.n	309da <download_client_callback+0x32>
			send_progress((offset * 100) / file_size);
   30ad6:	2164      	movs	r1, #100	; 0x64
   30ad8:	9b01      	ldr	r3, [sp, #4]
	const struct fota_download_evt evt = { .id = FOTA_DOWNLOAD_EVT_PROGRESS,
   30ada:	f88d 0008 	strb.w	r0, [sp, #8]
			send_progress((offset * 100) / file_size);
   30ade:	434b      	muls	r3, r1
   30ae0:	fbb3 f3f2 	udiv	r3, r3, r2
	const struct fota_download_evt evt = { .id = FOTA_DOWNLOAD_EVT_PROGRESS,
   30ae4:	9303      	str	r3, [sp, #12]
	callback(&evt);
   30ae6:	4b3b      	ldr	r3, [pc, #236]	; (30bd4 <_flash_used+0x1bc>)
   30ae8:	a802      	add	r0, sp, #8
   30aea:	681b      	ldr	r3, [r3, #0]
   30aec:	4798      	blx	r3
}
   30aee:	e79b      	b.n	30a28 <_flash_used+0x10>
		err = dfu_target_done(true);
   30af0:	2001      	movs	r0, #1
   30af2:	f000 f99b 	bl	30e2c <dfu_target_done>
		if (err == 0) {
   30af6:	4604      	mov	r4, r0
   30af8:	b918      	cbnz	r0, 30b02 <_flash_used+0xea>
			err = dfu_target_schedule_update(0);
   30afa:	f000 f9c3 	bl	30e84 <dfu_target_schedule_update>
		if (err != 0) {
   30afe:	4604      	mov	r4, r0
   30b00:	b128      	cbz	r0, 30b0e <_flash_used+0xf6>
			LOG_ERR("dfu_target_done error: %d", err);
   30b02:	4622      	mov	r2, r4
   30b04:	2145      	movs	r1, #69	; 0x45
   30b06:	4834      	ldr	r0, [pc, #208]	; (30bd8 <_flash_used+0x1c0>)
   30b08:	f00b ffd2 	bl	3cab0 <z_log_minimal_printk>
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   30b0c:	e765      	b.n	309da <download_client_callback+0x32>
		err = download_client_disconnect(&dlc);
   30b0e:	4826      	ldr	r0, [pc, #152]	; (30ba8 <_flash_used+0x190>)
   30b10:	f7ff fb50 	bl	301b4 <download_client_disconnect>
		if (err != 0) {
   30b14:	4604      	mov	r4, r0
   30b16:	2800      	cmp	r0, #0
   30b18:	f47f af5f 	bne.w	309da <download_client_callback+0x32>
	const struct fota_download_evt evt = {
   30b1c:	2501      	movs	r5, #1
	callback(&evt);
   30b1e:	4b2d      	ldr	r3, [pc, #180]	; (30bd4 <_flash_used+0x1bc>)
	const struct fota_download_evt evt = {
   30b20:	e9cd 0002 	strd	r0, r0, [sp, #8]
	callback(&evt);
   30b24:	681b      	ldr	r3, [r3, #0]
	const struct fota_download_evt evt = {
   30b26:	f88d 5008 	strb.w	r5, [sp, #8]
	callback(&evt);
   30b2a:	a802      	add	r0, sp, #8
   30b2c:	4798      	blx	r3
		first_fragment = true;
   30b2e:	4b1c      	ldr	r3, [pc, #112]	; (30ba0 <_flash_used+0x188>)
   30b30:	701d      	strb	r5, [r3, #0]
		downloading = false;
   30b32:	4b2a      	ldr	r3, [pc, #168]	; (30bdc <_flash_used+0x1c4>)
   30b34:	701c      	strb	r4, [r3, #0]
		break;
   30b36:	e777      	b.n	30a28 <_flash_used+0x10>
		if ((socket_retries_left) && ((event->error == -ENOTCONN) ||
   30b38:	4e29      	ldr	r6, [pc, #164]	; (30be0 <_flash_used+0x1c8>)
   30b3a:	6832      	ldr	r2, [r6, #0]
   30b3c:	b192      	cbz	r2, 30b64 <_flash_used+0x14c>
   30b3e:	6844      	ldr	r4, [r0, #4]
   30b40:	f104 0380 	add.w	r3, r4, #128	; 0x80
   30b44:	2b18      	cmp	r3, #24
   30b46:	d80d      	bhi.n	30b64 <_flash_used+0x14c>
   30b48:	4c26      	ldr	r4, [pc, #152]	; (30be4 <_flash_used+0x1cc>)
   30b4a:	40dc      	lsrs	r4, r3
   30b4c:	43e4      	mvns	r4, r4
   30b4e:	f014 0401 	ands.w	r4, r4, #1
   30b52:	d107      	bne.n	30b64 <_flash_used+0x14c>
			LOG_WRN("Download socket error. %d retries left...",
   30b54:	2157      	movs	r1, #87	; 0x57
   30b56:	4824      	ldr	r0, [pc, #144]	; (30be8 <_flash_used+0x1d0>)
   30b58:	f00b ffaa 	bl	3cab0 <z_log_minimal_printk>
			socket_retries_left--;
   30b5c:	6833      	ldr	r3, [r6, #0]
   30b5e:	3b01      	subs	r3, #1
   30b60:	6033      	str	r3, [r6, #0]
   30b62:	e761      	b.n	30a28 <_flash_used+0x10>
			download_client_disconnect(&dlc);
   30b64:	4810      	ldr	r0, [pc, #64]	; (30ba8 <_flash_used+0x190>)
   30b66:	f7ff fb25 	bl	301b4 <download_client_disconnect>
			LOG_ERR("Download client error");
   30b6a:	2145      	movs	r1, #69	; 0x45
   30b6c:	481f      	ldr	r0, [pc, #124]	; (30bec <_flash_used+0x1d4>)
   30b6e:	f00b ff9f 	bl	3cab0 <z_log_minimal_printk>
			err = dfu_target_done(false);
   30b72:	2000      	movs	r0, #0
   30b74:	f000 f95a 	bl	30e2c <dfu_target_done>
			if (err == -EACCES) {
   30b78:	f110 0f0d 	cmn.w	r0, #13
   30b7c:	d004      	beq.n	30b88 <_flash_used+0x170>
			} else if (err != 0) {
   30b7e:	b118      	cbz	r0, 30b88 <_flash_used+0x170>
				LOG_ERR("Unable to deinitialze resources "
   30b80:	2145      	movs	r1, #69	; 0x45
   30b82:	481b      	ldr	r0, [pc, #108]	; (30bf0 <_flash_used+0x1d8>)
   30b84:	f00b ff94 	bl	3cab0 <z_log_minimal_printk>
			first_fragment = true;
   30b88:	2001      	movs	r0, #1
   30b8a:	4b05      	ldr	r3, [pc, #20]	; (30ba0 <_flash_used+0x188>)
   30b8c:	7018      	strb	r0, [r3, #0]
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   30b8e:	f7ff feb3 	bl	308f8 <send_error_evt>
			return event->error;
   30b92:	686c      	ldr	r4, [r5, #4]
   30b94:	e748      	b.n	30a28 <_flash_used+0x10>
		return -EINVAL;
   30b96:	f06f 0415 	mvn.w	r4, #21
   30b9a:	e745      	b.n	30a28 <_flash_used+0x10>
	switch (event->id) {
   30b9c:	2400      	movs	r4, #0
   30b9e:	e743      	b.n	30a28 <_flash_used+0x10>
   30ba0:	2001d3b8 	.word	0x2001d3b8
   30ba4:	2001a1cc 	.word	0x2001a1cc
   30ba8:	20017360 	.word	0x20017360
   30bac:	2001d3b9 	.word	0x2001d3b9
   30bb0:	2001d3ba 	.word	0x2001d3ba
   30bb4:	0004af18 	.word	0x0004af18
   30bb8:	0004af6e 	.word	0x0004af6e
   30bbc:	00030bf5 	.word	0x00030bf5
   30bc0:	0004af50 	.word	0x0004af50
   30bc4:	20018db8 	.word	0x20018db8
   30bc8:	0004af97 	.word	0x0004af97
   30bcc:	0004afc1 	.word	0x0004afc1
   30bd0:	0004afe0 	.word	0x0004afe0
   30bd4:	2001a1c8 	.word	0x2001a1c8
   30bd8:	0004b009 	.word	0x0004b009
   30bdc:	2001d2f7 	.word	0x2001d2f7
   30be0:	2001a3d0 	.word	0x2001a3d0
   30be4:	01001001 	.word	0x01001001
   30be8:	00049ec0 	.word	0x00049ec0
   30bec:	0004b028 	.word	0x0004b028
   30bf0:	0004b043 	.word	0x0004b043

00030bf4 <dfu_target_callback_handler>:
{
   30bf4:	b507      	push	{r0, r1, r2, lr}
	switch (evt) {
   30bf6:	b138      	cbz	r0, 30c08 <dfu_target_callback_handler+0x14>
   30bf8:	2801      	cmp	r0, #1
   30bfa:	d011      	beq.n	30c20 <dfu_target_callback_handler+0x2c>
		send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   30bfc:	2001      	movs	r0, #1
}
   30bfe:	b003      	add	sp, #12
   30c00:	f85d eb04 	ldr.w	lr, [sp], #4
		send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   30c04:	f7ff be78 	b.w	308f8 <send_error_evt>
	const struct fota_download_evt evt = {
   30c08:	2302      	movs	r3, #2
   30c0a:	e9cd 0000 	strd	r0, r0, [sp]
   30c0e:	f88d 3000 	strb.w	r3, [sp]
	callback(&evt);
   30c12:	4b06      	ldr	r3, [pc, #24]	; (30c2c <dfu_target_callback_handler+0x38>)
   30c14:	4668      	mov	r0, sp
   30c16:	681b      	ldr	r3, [r3, #0]
   30c18:	4798      	blx	r3
}
   30c1a:	b003      	add	sp, #12
   30c1c:	f85d fb04 	ldr.w	pc, [sp], #4
	const struct fota_download_evt evt = {
   30c20:	2300      	movs	r3, #0
   30c22:	e9cd 3300 	strd	r3, r3, [sp]
   30c26:	2303      	movs	r3, #3
   30c28:	e7f1      	b.n	30c0e <dfu_target_callback_handler+0x1a>
   30c2a:	bf00      	nop
   30c2c:	2001a1c8 	.word	0x2001a1c8

00030c30 <fota_download_start_with_image_type>:
}

int fota_download_start_with_image_type(const char *host, const char *file,
	int sec_tag, uint8_t pdn_id, size_t fragment_size,
	const enum dfu_target_image_type expected_type)
{
   30c30:	b5f0      	push	{r4, r5, r6, r7, lr}
   30c32:	460d      	mov	r5, r1
	 */
	static char file_buf[FILE_BUF_LEN];
	const char *file_buf_ptr = file_buf;
	int err = -1;

	struct download_client_cfg config = {
   30c34:	2100      	movs	r1, #0
{
   30c36:	b08b      	sub	sp, #44	; 0x2c
	struct download_client_cfg config = {
   30c38:	9101      	str	r1, [sp, #4]
   30c3a:	f88d 3004 	strb.w	r3, [sp, #4]
   30c3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
		.sec_tag = sec_tag,
		.pdn_id = pdn_id,
		.frag_size_override = fragment_size,
	};

	if (host == NULL || file == NULL || callback == NULL) {
   30c40:	4604      	mov	r4, r0
	struct download_client_cfg config = {
   30c42:	9103      	str	r1, [sp, #12]
   30c44:	9200      	str	r2, [sp, #0]
   30c46:	9302      	str	r3, [sp, #8]
	if (host == NULL || file == NULL || callback == NULL) {
   30c48:	2800      	cmp	r0, #0
   30c4a:	d045      	beq.n	30cd8 <fota_download_start_with_image_type+0xa8>
   30c4c:	2d00      	cmp	r5, #0
   30c4e:	d043      	beq.n	30cd8 <fota_download_start_with_image_type+0xa8>
   30c50:	4b24      	ldr	r3, [pc, #144]	; (30ce4 <fota_download_start_with_image_type+0xb4>)
   30c52:	681b      	ldr	r3, [r3, #0]
   30c54:	2b00      	cmp	r3, #0
   30c56:	d03f      	beq.n	30cd8 <fota_download_start_with_image_type+0xa8>
		return -EINVAL;
	}

	if (downloading) {
   30c58:	4f23      	ldr	r7, [pc, #140]	; (30ce8 <fota_download_start_with_image_type+0xb8>)
   30c5a:	783b      	ldrb	r3, [r7, #0]
   30c5c:	2b00      	cmp	r3, #0
   30c5e:	d13e      	bne.n	30cde <fota_download_start_with_image_type+0xae>
		return -EALREADY;
	}

	if (sec_tag != -1 && !is_ip_address(host)) {
   30c60:	3201      	adds	r2, #1
   30c62:	d012      	beq.n	30c8a <fota_download_start_with_image_type+0x5a>
		union { uintptr_t x; void * val; } parm2 = { .val = dst };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_ZSOCK_INET_PTON);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_inet_pton(family, src, dst);
   30c64:	4601      	mov	r1, r0
   30c66:	f10d 0212 	add.w	r2, sp, #18
   30c6a:	2001      	movs	r0, #1
   30c6c:	f00c fb59 	bl	3d322 <z_impl_zsock_inet_pton>
	if (zsock_inet_pton(AF_INET, host, sa.data) == 1) {
   30c70:	2801      	cmp	r0, #1
   30c72:	d00a      	beq.n	30c8a <fota_download_start_with_image_type+0x5a>
   30c74:	2002      	movs	r0, #2
   30c76:	4621      	mov	r1, r4
   30c78:	f10d 0212 	add.w	r2, sp, #18
   30c7c:	f00c fb51 	bl	3d322 <z_impl_zsock_inet_pton>
	} else if (zsock_inet_pton(AF_INET6, host, sa.data) == 1) {
   30c80:	2801      	cmp	r0, #1
		config.set_tls_hostname = true;
   30c82:	bf1c      	itt	ne
   30c84:	2301      	movne	r3, #1
   30c86:	f88d 300c 	strbne.w	r3, [sp, #12]
	}

	socket_retries_left = CONFIG_FOTA_SOCKET_RETRIES;
   30c8a:	2202      	movs	r2, #2
   30c8c:	4b17      	ldr	r3, [pc, #92]	; (30cec <fota_download_start_with_image_type+0xbc>)

	strncpy(file_buf, file, sizeof(file_buf) - 1);
   30c8e:	4e18      	ldr	r6, [pc, #96]	; (30cf0 <fota_download_start_with_image_type+0xc0>)
	socket_retries_left = CONFIG_FOTA_SOCKET_RETRIES;
   30c90:	601a      	str	r2, [r3, #0]
	strncpy(file_buf, file, sizeof(file_buf) - 1);
   30c92:	4629      	mov	r1, r5
   30c94:	22bf      	movs	r2, #191	; 0xbf
   30c96:	4630      	mov	r0, r6
   30c98:	f010 fd8b 	bl	417b2 <strncpy>
	file_buf[sizeof(file_buf) - 1] = '\0';
   30c9c:	2300      	movs	r3, #0
		LOG_INF("B1 update, selected file:\n%s", log_strdup(update));
		file_buf_ptr = update;
	}
#endif /* PM_S1_ADDRESS */

	err = download_client_connect(&dlc, host, &config);
   30c9e:	4621      	mov	r1, r4
   30ca0:	466a      	mov	r2, sp
   30ca2:	4814      	ldr	r0, [pc, #80]	; (30cf4 <fota_download_start_with_image_type+0xc4>)
	file_buf[sizeof(file_buf) - 1] = '\0';
   30ca4:	f886 30bf 	strb.w	r3, [r6, #191]	; 0xbf
	err = download_client_connect(&dlc, host, &config);
   30ca8:	f7ff f8a0 	bl	2fdec <download_client_connect>
	if (err != 0) {
   30cac:	4604      	mov	r4, r0
   30cae:	b968      	cbnz	r0, 30ccc <fota_download_start_with_image_type+0x9c>
		return err;
	}

	img_type_expected = expected_type;
   30cb0:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   30cb4:	4b10      	ldr	r3, [pc, #64]	; (30cf8 <fota_download_start_with_image_type+0xc8>)

	err = download_client_start(&dlc, file_buf_ptr, 0);
   30cb6:	4631      	mov	r1, r6
	img_type_expected = expected_type;
   30cb8:	701a      	strb	r2, [r3, #0]
	err = download_client_start(&dlc, file_buf_ptr, 0);
   30cba:	4602      	mov	r2, r0
   30cbc:	480d      	ldr	r0, [pc, #52]	; (30cf4 <fota_download_start_with_image_type+0xc4>)
   30cbe:	f7ff fbd5 	bl	3046c <download_client_start>
	if (err != 0) {
   30cc2:	4604      	mov	r4, r0
   30cc4:	b128      	cbz	r0, 30cd2 <fota_download_start_with_image_type+0xa2>
		download_client_disconnect(&dlc);
   30cc6:	480b      	ldr	r0, [pc, #44]	; (30cf4 <fota_download_start_with_image_type+0xc4>)
   30cc8:	f7ff fa74 	bl	301b4 <download_client_disconnect>
	}

	downloading = true;

	return 0;
}
   30ccc:	4620      	mov	r0, r4
   30cce:	b00b      	add	sp, #44	; 0x2c
   30cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	downloading = true;
   30cd2:	2301      	movs	r3, #1
   30cd4:	703b      	strb	r3, [r7, #0]
	return 0;
   30cd6:	e7f9      	b.n	30ccc <fota_download_start_with_image_type+0x9c>
		return -EINVAL;
   30cd8:	f06f 0415 	mvn.w	r4, #21
   30cdc:	e7f6      	b.n	30ccc <fota_download_start_with_image_type+0x9c>
		return -EALREADY;
   30cde:	f06f 0477 	mvn.w	r4, #119	; 0x77
   30ce2:	e7f3      	b.n	30ccc <fota_download_start_with_image_type+0x9c>
   30ce4:	2001a1c8 	.word	0x2001a1c8
   30ce8:	2001d2f7 	.word	0x2001d2f7
   30cec:	2001a3d0 	.word	0x2001a3d0
   30cf0:	2001d2f8 	.word	0x2001d2f8
   30cf4:	20017360 	.word	0x20017360
   30cf8:	2001d3ba 	.word	0x2001d3ba

00030cfc <fota_download_init>:

int fota_download_init(fota_download_callback_t client_callback)
{
   30cfc:	b510      	push	{r4, lr}
	if (client_callback == NULL) {
   30cfe:	b1f8      	cbz	r0, 30d40 <fota_download_init+0x44>
		return -EINVAL;
	}

	int err;

	callback = client_callback;
   30d00:	4b11      	ldr	r3, [pc, #68]	; (30d48 <fota_download_init+0x4c>)
	dlc.set_native_tls = CONFIG_FOTA_DOWNLOAD_NATIVE_TLS;
#endif

#ifdef CONFIG_DFU_TARGET_MCUBOOT
	/* Set the required buffer for MCUboot targets */
	err = dfu_target_mcuboot_set_buf(mcuboot_buf, sizeof(mcuboot_buf));
   30d02:	f44f 7100 	mov.w	r1, #512	; 0x200
	callback = client_callback;
   30d06:	6018      	str	r0, [r3, #0]
	err = dfu_target_mcuboot_set_buf(mcuboot_buf, sizeof(mcuboot_buf));
   30d08:	4810      	ldr	r0, [pc, #64]	; (30d4c <fota_download_init+0x50>)
   30d0a:	f000 fa63 	bl	311d4 <dfu_target_mcuboot_set_buf>
	if (err) {
   30d0e:	4604      	mov	r4, r0
   30d10:	b138      	cbz	r0, 30d22 <fota_download_init+0x26>
		LOG_ERR("%s failed to set MCUboot flash buffer %d",
   30d12:	4603      	mov	r3, r0
   30d14:	2145      	movs	r1, #69	; 0x45
   30d16:	4a0e      	ldr	r2, [pc, #56]	; (30d50 <fota_download_init+0x54>)
   30d18:	480e      	ldr	r0, [pc, #56]	; (30d54 <fota_download_init+0x58>)
   30d1a:	f00b fec9 	bl	3cab0 <z_log_minimal_printk>
		return err;
	}

	first_fragment = true;
	return 0;
}
   30d1e:	4620      	mov	r0, r4
   30d20:	bd10      	pop	{r4, pc}
	k_work_init_delayable(&dlc_with_offset_work, download_with_offset);
   30d22:	490d      	ldr	r1, [pc, #52]	; (30d58 <fota_download_init+0x5c>)
   30d24:	480d      	ldr	r0, [pc, #52]	; (30d5c <fota_download_init+0x60>)
   30d26:	f006 fbf5 	bl	37514 <k_work_init_delayable>
	err = download_client_init(&dlc, download_client_callback);
   30d2a:	490d      	ldr	r1, [pc, #52]	; (30d60 <fota_download_init+0x64>)
   30d2c:	480d      	ldr	r0, [pc, #52]	; (30d64 <fota_download_init+0x68>)
   30d2e:	f7ff f82d 	bl	2fd8c <download_client_init>
	if (err != 0) {
   30d32:	4604      	mov	r4, r0
   30d34:	2800      	cmp	r0, #0
   30d36:	d1f2      	bne.n	30d1e <fota_download_init+0x22>
	first_fragment = true;
   30d38:	2201      	movs	r2, #1
   30d3a:	4b0b      	ldr	r3, [pc, #44]	; (30d68 <fota_download_init+0x6c>)
   30d3c:	701a      	strb	r2, [r3, #0]
	return 0;
   30d3e:	e7ee      	b.n	30d1e <fota_download_init+0x22>
		return -EINVAL;
   30d40:	f06f 0415 	mvn.w	r4, #21
   30d44:	e7eb      	b.n	30d1e <fota_download_init+0x22>
   30d46:	bf00      	nop
   30d48:	2001a1c8 	.word	0x2001a1c8
   30d4c:	2001a1d0 	.word	0x2001a1d0
   30d50:	0004b0cd 	.word	0x0004b0cd
   30d54:	0004b07c 	.word	0x0004b07c
   30d58:	00030925 	.word	0x00030925
   30d5c:	20018db8 	.word	0x20018db8
   30d60:	000309a9 	.word	0x000309a9
   30d64:	20017360 	.word	0x20017360
   30d68:	2001d3b8 	.word	0x2001d3b8

00030d6c <dfu_target_img_type>:
static const struct dfu_target *current_target;
static int current_img_num = -1;

int dfu_target_img_type(const void *const buf, size_t len)
{
	if (len < MIN_SIZE_IDENTIFY_BUF) {
   30d6c:	291f      	cmp	r1, #31
{
   30d6e:	b510      	push	{r4, lr}
   30d70:	4604      	mov	r4, r0
	if (len < MIN_SIZE_IDENTIFY_BUF) {
   30d72:	d90d      	bls.n	30d90 <dfu_target_img_type+0x24>
		return -EAGAIN;
	}
#ifdef CONFIG_DFU_TARGET_MCUBOOT
	if (dfu_target_mcuboot_identify(buf)) {
   30d74:	f000 fa26 	bl	311c4 <dfu_target_mcuboot_identify>
   30d78:	b968      	cbnz	r0, 30d96 <dfu_target_img_type+0x2a>
		return DFU_TARGET_IMAGE_TYPE_MCUBOOT;
	}
#endif
#ifdef CONFIG_DFU_TARGET_MODEM_DELTA
	if (dfu_target_modem_delta_identify(buf)) {
   30d7a:	4620      	mov	r0, r4
   30d7c:	f000 f93e 	bl	30ffc <dfu_target_modem_delta_identify>
   30d80:	b958      	cbnz	r0, 30d9a <dfu_target_img_type+0x2e>
#ifdef CONFIG_DFU_TARGET_FULL_MODEM
	if (dfu_target_full_modem_identify(buf)) {
		return DFU_TARGET_IMAGE_TYPE_FULL_MODEM;
	}
#endif
	LOG_ERR("No supported image type found");
   30d82:	4807      	ldr	r0, [pc, #28]	; (30da0 <dfu_target_img_type+0x34>)
   30d84:	2145      	movs	r1, #69	; 0x45
   30d86:	f00b fe93 	bl	3cab0 <z_log_minimal_printk>
	return -ENOTSUP;
   30d8a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   30d8e:	bd10      	pop	{r4, pc}
		return -EAGAIN;
   30d90:	f06f 000a 	mvn.w	r0, #10
   30d94:	e7fb      	b.n	30d8e <dfu_target_img_type+0x22>
		return DFU_TARGET_IMAGE_TYPE_MCUBOOT;
   30d96:	2001      	movs	r0, #1
   30d98:	e7f9      	b.n	30d8e <dfu_target_img_type+0x22>
		return DFU_TARGET_IMAGE_TYPE_MODEM_DELTA;
   30d9a:	2002      	movs	r0, #2
   30d9c:	e7f7      	b.n	30d8e <dfu_target_img_type+0x22>
   30d9e:	bf00      	nop
   30da0:	0004b0e0 	.word	0x0004b0e0

00030da4 <dfu_target_init>:

int dfu_target_init(int img_type, int img_num, size_t file_size, dfu_target_callback_t cb)
{
   30da4:	b570      	push	{r4, r5, r6, lr}
   30da6:	4604      	mov	r4, r0
	const struct dfu_target *new_target = NULL;

#ifdef CONFIG_DFU_TARGET_MCUBOOT
	if (img_type == DFU_TARGET_IMAGE_TYPE_MCUBOOT) {
   30da8:	2c01      	cmp	r4, #1
{
   30daa:	4610      	mov	r0, r2
   30dac:	461a      	mov	r2, r3
	if (img_type == DFU_TARGET_IMAGE_TYPE_MCUBOOT) {
   30dae:	d008      	beq.n	30dc2 <dfu_target_init+0x1e>
		new_target = &dfu_target_mcuboot;
	}
#endif
#ifdef CONFIG_DFU_TARGET_MODEM_DELTA
	if (img_type == DFU_TARGET_IMAGE_TYPE_MODEM_DELTA) {
   30db0:	2c02      	cmp	r4, #2
   30db2:	d017      	beq.n	30de4 <dfu_target_init+0x40>
	if (img_type == DFU_TARGET_IMAGE_TYPE_FULL_MODEM) {
		new_target = &dfu_target_full_modem;
	}
#endif
	if (new_target == NULL) {
		LOG_ERR("Unknown image type");
   30db4:	480d      	ldr	r0, [pc, #52]	; (30dec <dfu_target_init+0x48>)
   30db6:	2145      	movs	r1, #69	; 0x45
   30db8:	f00b fe7a 	bl	3cab0 <z_log_minimal_printk>
		return -ENOTSUP;
   30dbc:	f06f 0085 	mvn.w	r0, #133	; 0x85

	current_target = new_target;
	current_img_num = img_num;

	return current_target->init(file_size, img_num, cb);
}
   30dc0:	bd70      	pop	{r4, r5, r6, pc}
		new_target = &dfu_target_mcuboot;
   30dc2:	4d0b      	ldr	r5, [pc, #44]	; (30df0 <dfu_target_init+0x4c>)
	if (new_target == current_target
   30dc4:	4e0b      	ldr	r6, [pc, #44]	; (30df4 <dfu_target_init+0x50>)
   30dc6:	6833      	ldr	r3, [r6, #0]
   30dc8:	42ab      	cmp	r3, r5
   30dca:	4b0b      	ldr	r3, [pc, #44]	; (30df8 <dfu_target_init+0x54>)
   30dcc:	d104      	bne.n	30dd8 <dfu_target_init+0x34>
	   && img_type != DFU_TARGET_IMAGE_TYPE_MODEM_DELTA
   30dce:	2c02      	cmp	r4, #2
   30dd0:	d002      	beq.n	30dd8 <dfu_target_init+0x34>
	   && current_img_num == img_num) {
   30dd2:	681c      	ldr	r4, [r3, #0]
   30dd4:	42a1      	cmp	r1, r4
   30dd6:	d007      	beq.n	30de8 <dfu_target_init+0x44>
	current_target = new_target;
   30dd8:	6035      	str	r5, [r6, #0]
	current_img_num = img_num;
   30dda:	6019      	str	r1, [r3, #0]
	return current_target->init(file_size, img_num, cb);
   30ddc:	682b      	ldr	r3, [r5, #0]
}
   30dde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return current_target->init(file_size, img_num, cb);
   30de2:	4718      	bx	r3
		new_target = &dfu_target_modem_delta;
   30de4:	4d05      	ldr	r5, [pc, #20]	; (30dfc <dfu_target_init+0x58>)
   30de6:	e7ed      	b.n	30dc4 <dfu_target_init+0x20>
		return 0;
   30de8:	2000      	movs	r0, #0
   30dea:	e7e9      	b.n	30dc0 <dfu_target_init+0x1c>
   30dec:	0004b103 	.word	0x0004b103
   30df0:	00043090 	.word	0x00043090
   30df4:	2001a3d4 	.word	0x2001a3d4
   30df8:	200146ec 	.word	0x200146ec
   30dfc:	000430a4 	.word	0x000430a4

00030e00 <dfu_target_offset_get>:

int dfu_target_offset_get(size_t *offset)
{
	if (current_target == NULL) {
   30e00:	4b03      	ldr	r3, [pc, #12]	; (30e10 <dfu_target_offset_get+0x10>)
   30e02:	681b      	ldr	r3, [r3, #0]
   30e04:	b10b      	cbz	r3, 30e0a <dfu_target_offset_get+0xa>
		return -EACCES;
	}

	return current_target->offset_get(offset);
   30e06:	685b      	ldr	r3, [r3, #4]
   30e08:	4718      	bx	r3
}
   30e0a:	f06f 000c 	mvn.w	r0, #12
   30e0e:	4770      	bx	lr
   30e10:	2001a3d4 	.word	0x2001a3d4

00030e14 <dfu_target_write>:

int dfu_target_write(const void *const buf, size_t len)
{
	if (current_target == NULL || buf == NULL) {
   30e14:	4a04      	ldr	r2, [pc, #16]	; (30e28 <dfu_target_write+0x14>)
   30e16:	6812      	ldr	r2, [r2, #0]
   30e18:	b112      	cbz	r2, 30e20 <dfu_target_write+0xc>
   30e1a:	b108      	cbz	r0, 30e20 <dfu_target_write+0xc>
		return -EACCES;
	}

	return current_target->write(buf, len);
   30e1c:	6893      	ldr	r3, [r2, #8]
   30e1e:	4718      	bx	r3
}
   30e20:	f06f 000c 	mvn.w	r0, #12
   30e24:	4770      	bx	lr
   30e26:	bf00      	nop
   30e28:	2001a3d4 	.word	0x2001a3d4

00030e2c <dfu_target_done>:

int dfu_target_done(bool successful)
{
	int err;

	if (current_target == NULL) {
   30e2c:	4b08      	ldr	r3, [pc, #32]	; (30e50 <dfu_target_done+0x24>)
{
   30e2e:	b510      	push	{r4, lr}
	if (current_target == NULL) {
   30e30:	681b      	ldr	r3, [r3, #0]
   30e32:	b14b      	cbz	r3, 30e48 <dfu_target_done+0x1c>
		return -EACCES;
	}

	err = current_target->done(successful);
   30e34:	68db      	ldr	r3, [r3, #12]
   30e36:	4798      	blx	r3
	if (err != 0) {
   30e38:	4604      	mov	r4, r0
   30e3a:	b118      	cbz	r0, 30e44 <dfu_target_done+0x18>
		LOG_ERR("Unable to clean up dfu_target");
   30e3c:	2145      	movs	r1, #69	; 0x45
   30e3e:	4805      	ldr	r0, [pc, #20]	; (30e54 <dfu_target_done+0x28>)
   30e40:	f00b fe36 	bl	3cab0 <z_log_minimal_printk>
		return err;
	}

	return 0;
}
   30e44:	4620      	mov	r0, r4
   30e46:	bd10      	pop	{r4, pc}
		return -EACCES;
   30e48:	f06f 040c 	mvn.w	r4, #12
   30e4c:	e7fa      	b.n	30e44 <dfu_target_done+0x18>
   30e4e:	bf00      	nop
   30e50:	2001a3d4 	.word	0x2001a3d4
   30e54:	0004b11b 	.word	0x0004b11b

00030e58 <dfu_target_reset>:

int dfu_target_reset(void)
{
   30e58:	b538      	push	{r3, r4, r5, lr}
	if (current_target != NULL) {
   30e5a:	4d08      	ldr	r5, [pc, #32]	; (30e7c <dfu_target_reset+0x24>)
   30e5c:	682b      	ldr	r3, [r5, #0]
   30e5e:	b153      	cbz	r3, 30e76 <dfu_target_reset+0x1e>
		int err = current_target->done(false);
   30e60:	2000      	movs	r0, #0
   30e62:	68db      	ldr	r3, [r3, #12]
   30e64:	4798      	blx	r3

		if (err != 0) {
   30e66:	4604      	mov	r4, r0
   30e68:	b128      	cbz	r0, 30e76 <dfu_target_reset+0x1e>
			LOG_ERR("Unable to clean up dfu_target");
   30e6a:	2145      	movs	r1, #69	; 0x45
   30e6c:	4804      	ldr	r0, [pc, #16]	; (30e80 <dfu_target_reset+0x28>)
   30e6e:	f00b fe1f 	bl	3cab0 <z_log_minimal_printk>
			return err;
		}
	}
	current_target = NULL;
	return 0;
}
   30e72:	4620      	mov	r0, r4
   30e74:	bd38      	pop	{r3, r4, r5, pc}
	current_target = NULL;
   30e76:	2400      	movs	r4, #0
   30e78:	602c      	str	r4, [r5, #0]
	return 0;
   30e7a:	e7fa      	b.n	30e72 <dfu_target_reset+0x1a>
   30e7c:	2001a3d4 	.word	0x2001a3d4
   30e80:	0004b11b 	.word	0x0004b11b

00030e84 <dfu_target_schedule_update>:

int dfu_target_schedule_update(int img_num)
{
   30e84:	b510      	push	{r4, lr}
	int err = 0;

	if (current_target == NULL) {
   30e86:	4c05      	ldr	r4, [pc, #20]	; (30e9c <dfu_target_schedule_update+0x18>)
   30e88:	6823      	ldr	r3, [r4, #0]
   30e8a:	b123      	cbz	r3, 30e96 <dfu_target_schedule_update+0x12>
		return -EACCES;
	}

	err = current_target->schedule_update(img_num);
   30e8c:	691b      	ldr	r3, [r3, #16]
   30e8e:	4798      	blx	r3
	current_target = NULL;
   30e90:	2300      	movs	r3, #0
   30e92:	6023      	str	r3, [r4, #0]

	return err;
}
   30e94:	bd10      	pop	{r4, pc}
		return -EACCES;
   30e96:	f06f 000c 	mvn.w	r0, #12
   30e9a:	e7fb      	b.n	30e94 <dfu_target_schedule_update+0x10>
   30e9c:	2001a3d4 	.word	0x2001a3d4

00030ea0 <dfu_target_stream_get_stream>:
#endif /* CONFIG_DFU_TARGET_STREAM_SAVE_PROGRESS */

struct stream_flash_ctx *dfu_target_stream_get_stream(void)
{
	return &stream;
}
   30ea0:	4800      	ldr	r0, [pc, #0]	; (30ea4 <dfu_target_stream_get_stream+0x4>)
   30ea2:	4770      	bx	lr
   30ea4:	2001a3dc 	.word	0x2001a3dc

00030ea8 <dfu_target_stream_init>:

int dfu_target_stream_init(const struct dfu_target_stream_init *init)
{
   30ea8:	b530      	push	{r4, r5, lr}
	int err;

	if (current_id != NULL) {
   30eaa:	4c12      	ldr	r4, [pc, #72]	; (30ef4 <dfu_target_stream_init+0x4c>)
{
   30eac:	b085      	sub	sp, #20
	if (current_id != NULL) {
   30eae:	6823      	ldr	r3, [r4, #0]
   30eb0:	b9d3      	cbnz	r3, 30ee8 <dfu_target_stream_init+0x40>
		return -EFAULT;
	}

	if (init == NULL || init->id == NULL || init->fdev == NULL ||
   30eb2:	b1e0      	cbz	r0, 30eee <dfu_target_stream_init+0x46>
   30eb4:	6805      	ldr	r5, [r0, #0]
   30eb6:	b1d5      	cbz	r5, 30eee <dfu_target_stream_init+0x46>
   30eb8:	6841      	ldr	r1, [r0, #4]
   30eba:	b1c1      	cbz	r1, 30eee <dfu_target_stream_init+0x46>
	    init->buf == NULL) {
   30ebc:	6882      	ldr	r2, [r0, #8]
	if (init == NULL || init->id == NULL || init->fdev == NULL ||
   30ebe:	b1b2      	cbz	r2, 30eee <dfu_target_stream_init+0x46>
		return -EINVAL;
	}

	current_id = init->id;
   30ec0:	6025      	str	r5, [r4, #0]

	err = stream_flash_init(&stream, init->fdev, init->buf, init->len,
   30ec2:	9302      	str	r3, [sp, #8]
   30ec4:	6943      	ldr	r3, [r0, #20]
   30ec6:	9301      	str	r3, [sp, #4]
   30ec8:	6903      	ldr	r3, [r0, #16]
   30eca:	9300      	str	r3, [sp, #0]
   30ecc:	68c3      	ldr	r3, [r0, #12]
   30ece:	480a      	ldr	r0, [pc, #40]	; (30ef8 <dfu_target_stream_init+0x50>)
   30ed0:	f7f0 ffb0 	bl	21e34 <stream_flash_init>
				init->offset, init->size, NULL);
	if (err) {
   30ed4:	4604      	mov	r4, r0
   30ed6:	b120      	cbz	r0, 30ee2 <dfu_target_stream_init+0x3a>
		LOG_ERR("stream_flash_init failed (err %d)", err);
   30ed8:	4602      	mov	r2, r0
   30eda:	2145      	movs	r1, #69	; 0x45
   30edc:	4807      	ldr	r0, [pc, #28]	; (30efc <dfu_target_stream_init+0x54>)
   30ede:	f00b fde7 	bl	3cab0 <z_log_minimal_printk>
		return err;
	}
#endif /* CONFIG_DFU_TARGET_STREAM_SAVE_PROGRESS */

	return 0;
}
   30ee2:	4620      	mov	r0, r4
   30ee4:	b005      	add	sp, #20
   30ee6:	bd30      	pop	{r4, r5, pc}
		return -EFAULT;
   30ee8:	f06f 040d 	mvn.w	r4, #13
   30eec:	e7f9      	b.n	30ee2 <dfu_target_stream_init+0x3a>
		return -EINVAL;
   30eee:	f06f 0415 	mvn.w	r4, #21
   30ef2:	e7f6      	b.n	30ee2 <dfu_target_stream_init+0x3a>
   30ef4:	2001a3d8 	.word	0x2001a3d8
   30ef8:	2001a3dc 	.word	0x2001a3dc
   30efc:	0004b149 	.word	0x0004b149

00030f00 <dfu_target_stream_offset_get>:

int dfu_target_stream_offset_get(size_t *out)
{
   30f00:	b510      	push	{r4, lr}
   30f02:	4604      	mov	r4, r0
	*out = stream_flash_bytes_written(&stream);
   30f04:	4802      	ldr	r0, [pc, #8]	; (30f10 <dfu_target_stream_offset_get+0x10>)
   30f06:	f00c fb0b 	bl	3d520 <stream_flash_bytes_written>
   30f0a:	6020      	str	r0, [r4, #0]

	return 0;
}
   30f0c:	2000      	movs	r0, #0
   30f0e:	bd10      	pop	{r4, pc}
   30f10:	2001a3dc 	.word	0x2001a3dc

00030f14 <dfu_target_stream_write>:

int dfu_target_stream_write(const uint8_t *buf, size_t len)
{
   30f14:	460a      	mov	r2, r1
   30f16:	b510      	push	{r4, lr}
	int err = stream_flash_buffered_write(&stream, buf, len, false);
   30f18:	4601      	mov	r1, r0
   30f1a:	2300      	movs	r3, #0
   30f1c:	4805      	ldr	r0, [pc, #20]	; (30f34 <dfu_target_stream_write+0x20>)
   30f1e:	f00c fabb 	bl	3d498 <stream_flash_buffered_write>

	if (err != 0) {
   30f22:	4604      	mov	r4, r0
   30f24:	b120      	cbz	r0, 30f30 <dfu_target_stream_write+0x1c>
		LOG_ERR("stream_flash_buffered_write error %d", err);
   30f26:	4602      	mov	r2, r0
   30f28:	2145      	movs	r1, #69	; 0x45
   30f2a:	4803      	ldr	r0, [pc, #12]	; (30f38 <dfu_target_stream_write+0x24>)
   30f2c:	f00b fdc0 	bl	3cab0 <z_log_minimal_printk>
		LOG_WRN("Unable to store write progress: %d", err);
	}
#endif

	return err;
}
   30f30:	4620      	mov	r0, r4
   30f32:	bd10      	pop	{r4, pc}
   30f34:	2001a3dc 	.word	0x2001a3dc
   30f38:	0004b170 	.word	0x0004b170

00030f3c <dfu_target_stream_done>:

int dfu_target_stream_done(bool successful)
{
   30f3c:	b510      	push	{r4, lr}
	int err = 0;

	if (successful) {
   30f3e:	b188      	cbz	r0, 30f64 <dfu_target_stream_done+0x28>
		err = stream_flash_buffered_write(&stream, NULL, 0, true);
   30f40:	2200      	movs	r2, #0
   30f42:	2301      	movs	r3, #1
   30f44:	4611      	mov	r1, r2
   30f46:	4808      	ldr	r0, [pc, #32]	; (30f68 <dfu_target_stream_done+0x2c>)
   30f48:	f00c faa6 	bl	3d498 <stream_flash_buffered_write>
		if (err != 0) {
   30f4c:	4604      	mov	r4, r0
   30f4e:	b120      	cbz	r0, 30f5a <dfu_target_stream_done+0x1e>
			LOG_ERR("stream_flash_buffered_write error %d", err);
   30f50:	4602      	mov	r2, r0
   30f52:	2145      	movs	r1, #69	; 0x45
   30f54:	4805      	ldr	r0, [pc, #20]	; (30f6c <dfu_target_stream_done+0x30>)
   30f56:	f00b fdab 	bl	3cab0 <z_log_minimal_printk>
			LOG_ERR("Unable to reset write progress: %d", err);
		}
#endif
	}

	current_id = NULL;
   30f5a:	2200      	movs	r2, #0
   30f5c:	4b04      	ldr	r3, [pc, #16]	; (30f70 <dfu_target_stream_done+0x34>)

	return err;
}
   30f5e:	4620      	mov	r0, r4
	current_id = NULL;
   30f60:	601a      	str	r2, [r3, #0]
}
   30f62:	bd10      	pop	{r4, pc}
	int err = 0;
   30f64:	4604      	mov	r4, r0
   30f66:	e7f8      	b.n	30f5a <dfu_target_stream_done+0x1e>
   30f68:	2001a3dc 	.word	0x2001a3dc
   30f6c:	0004b170 	.word	0x0004b170
   30f70:	2001a3d8 	.word	0x2001a3d8

00030f74 <delete_banked_modem_delta_fw>:

static dfu_target_callback_t callback;

#define SLEEP_TIME 1
static int delete_banked_modem_delta_fw(void)
{
   30f74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	int err;
	int offset;
	int timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;

	LOG_INF("Deleting firmware image, this can take several minutes");
   30f76:	2149      	movs	r1, #73	; 0x49
   30f78:	481b      	ldr	r0, [pc, #108]	; (30fe8 <delete_banked_modem_delta_fw+0x74>)
   30f7a:	f00b fd99 	bl	3cab0 <z_log_minimal_printk>
	err = nrf_modem_delta_dfu_erase();
   30f7e:	f004 fa8b 	bl	35498 <nrf_modem_delta_dfu_erase>
	if (err != 0) {
   30f82:	4602      	mov	r2, r0
   30f84:	b140      	cbz	r0, 30f98 <delete_banked_modem_delta_fw+0x24>
		LOG_ERR("Failed to delete backup, error %d", err);
   30f86:	2145      	movs	r1, #69	; 0x45
   30f88:	4818      	ldr	r0, [pc, #96]	; (30fec <delete_banked_modem_delta_fw+0x78>)
   30f8a:	f00b fd91 	bl	3cab0 <z_log_minimal_printk>
		return -EFAULT;
   30f8e:	f06f 040d 	mvn.w	r4, #13
			break;
		}
	}

	return 0;
}
   30f92:	4620      	mov	r0, r4
   30f94:	b003      	add	sp, #12
   30f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;
   30f98:	253c      	movs	r5, #60	; 0x3c
				callback(DFU_TARGET_EVT_TIMEOUT);
   30f9a:	4e15      	ldr	r6, [pc, #84]	; (30ff0 <delete_banked_modem_delta_fw+0x7c>)
				LOG_ERR("Error during erase, error %d", err);
   30f9c:	4f15      	ldr	r7, [pc, #84]	; (30ff4 <delete_banked_modem_delta_fw+0x80>)
		err = nrf_modem_delta_dfu_offset(&offset);
   30f9e:	a801      	add	r0, sp, #4
   30fa0:	f004 f976 	bl	35290 <nrf_modem_delta_dfu_offset>
		if (err != 0) {
   30fa4:	4604      	mov	r4, r0
   30fa6:	b1a8      	cbz	r0, 30fd4 <delete_banked_modem_delta_fw+0x60>
			if (timeout < 0) {
   30fa8:	2d00      	cmp	r5, #0
   30faa:	da03      	bge.n	30fb4 <delete_banked_modem_delta_fw+0x40>
				callback(DFU_TARGET_EVT_TIMEOUT);
   30fac:	2000      	movs	r0, #0
   30fae:	6833      	ldr	r3, [r6, #0]
   30fb0:	4798      	blx	r3
				timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;
   30fb2:	253c      	movs	r5, #60	; 0x3c
			if (err != NRF_MODEM_DELTA_DFU_ERASE_PENDING &&
   30fb4:	2c11      	cmp	r4, #17
   30fb6:	d006      	beq.n	30fc6 <delete_banked_modem_delta_fw+0x52>
   30fb8:	2c05      	cmp	r4, #5
   30fba:	d004      	beq.n	30fc6 <delete_banked_modem_delta_fw+0x52>
				LOG_ERR("Error during erase, error %d", err);
   30fbc:	4622      	mov	r2, r4
   30fbe:	2145      	movs	r1, #69	; 0x45
   30fc0:	4638      	mov	r0, r7
   30fc2:	f00b fd75 	bl	3cab0 <z_log_minimal_printk>
	return z_impl_k_sleep(timeout);
   30fc6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   30fca:	2100      	movs	r1, #0
   30fcc:	f007 fb10 	bl	385f0 <z_impl_k_sleep>
			timeout -= SLEEP_TIME;
   30fd0:	3d01      	subs	r5, #1
		err = nrf_modem_delta_dfu_offset(&offset);
   30fd2:	e7e4      	b.n	30f9e <delete_banked_modem_delta_fw+0x2a>
			callback(DFU_TARGET_EVT_ERASE_DONE);
   30fd4:	4b06      	ldr	r3, [pc, #24]	; (30ff0 <delete_banked_modem_delta_fw+0x7c>)
   30fd6:	2001      	movs	r0, #1
   30fd8:	681b      	ldr	r3, [r3, #0]
   30fda:	4798      	blx	r3
			LOG_INF("Modem FW delete complete");
   30fdc:	2149      	movs	r1, #73	; 0x49
   30fde:	4806      	ldr	r0, [pc, #24]	; (30ff8 <delete_banked_modem_delta_fw+0x84>)
   30fe0:	f00b fd66 	bl	3cab0 <z_log_minimal_printk>
	return 0;
   30fe4:	e7d5      	b.n	30f92 <delete_banked_modem_delta_fw+0x1e>
   30fe6:	bf00      	nop
   30fe8:	0004b1ac 	.word	0x0004b1ac
   30fec:	0004b1e8 	.word	0x0004b1e8
   30ff0:	2001a400 	.word	0x2001a400
   30ff4:	0004b20f 	.word	0x0004b20f
   30ff8:	0004b231 	.word	0x0004b231

00030ffc <dfu_target_modem_delta_identify>:

bool dfu_target_modem_delta_identify(const void *const buf)
{
	return ((const struct modem_delta_header *)buf)->magic == MODEM_MAGIC;
   30ffc:	6840      	ldr	r0, [r0, #4]
}
   30ffe:	4b02      	ldr	r3, [pc, #8]	; (31008 <dfu_target_modem_delta_identify+0xc>)
   31000:	1ac3      	subs	r3, r0, r3
   31002:	4258      	negs	r0, r3
   31004:	4158      	adcs	r0, r3
   31006:	4770      	bx	lr
   31008:	7544656d 	.word	0x7544656d

0003100c <dfu_target_modem_delta_init>:

int dfu_target_modem_delta_init(size_t file_size, int img_num, dfu_target_callback_t cb)
{
   3100c:	b530      	push	{r4, r5, lr}
   3100e:	b099      	sub	sp, #100	; 0x64
	int offset;
	size_t scratch_space;
	struct nrf_modem_delta_dfu_uuid version;
	char version_string[NRF_MODEM_DELTA_DFU_UUID_LEN+1];

	callback = cb;
   31010:	4b1f      	ldr	r3, [pc, #124]	; (31090 <dfu_target_modem_delta_init+0x84>)

	/* Retrieve and print modem firmware UUID */
	err = nrf_modem_delta_dfu_uuid(&version);
   31012:	ad05      	add	r5, sp, #20
{
   31014:	4604      	mov	r4, r0
	err = nrf_modem_delta_dfu_uuid(&version);
   31016:	4628      	mov	r0, r5
	callback = cb;
   31018:	601a      	str	r2, [r3, #0]
	err = nrf_modem_delta_dfu_uuid(&version);
   3101a:	f004 f981 	bl	35320 <nrf_modem_delta_dfu_uuid>
	if (err != 0) {
   3101e:	4602      	mov	r2, r0
   31020:	b138      	cbz	r0, 31032 <dfu_target_modem_delta_init+0x26>
		LOG_ERR("Firmware version request failed, error %d", err);
   31022:	2145      	movs	r1, #69	; 0x45
   31024:	481b      	ldr	r0, [pc, #108]	; (31094 <dfu_target_modem_delta_init+0x88>)
	LOG_INF("Modem firmware version: %s", log_strdup(version_string));

	/* Check if scratch area is big enough for downloaded image */
	err = nrf_modem_delta_dfu_area(&scratch_space);
	if (err != 0) {
		LOG_ERR("Failed to retrieve size of modem DFU area, error %d", err);
   31026:	f00b fd43 	bl	3cab0 <z_log_minimal_printk>
		return -EFAULT;
   3102a:	f06f 000d 	mvn.w	r0, #13
		err = delete_banked_modem_delta_fw();
		return err;
	}

	return 0;
}
   3102e:	b019      	add	sp, #100	; 0x64
   31030:	bd30      	pop	{r4, r5, pc}
	snprintf(version_string, sizeof(version_string), "%.*s",
   31032:	2324      	movs	r3, #36	; 0x24
   31034:	2125      	movs	r1, #37	; 0x25
   31036:	4a18      	ldr	r2, [pc, #96]	; (31098 <dfu_target_modem_delta_init+0x8c>)
   31038:	9500      	str	r5, [sp, #0]
   3103a:	a80e      	add	r0, sp, #56	; 0x38
   3103c:	f009 fb0a 	bl	3a654 <sniprintf>
	LOG_INF("Modem firmware version: %s", log_strdup(version_string));
   31040:	aa0e      	add	r2, sp, #56	; 0x38
   31042:	2149      	movs	r1, #73	; 0x49
   31044:	4815      	ldr	r0, [pc, #84]	; (3109c <dfu_target_modem_delta_init+0x90>)
   31046:	f00b fd33 	bl	3cab0 <z_log_minimal_printk>
	err = nrf_modem_delta_dfu_area(&scratch_space);
   3104a:	a804      	add	r0, sp, #16
   3104c:	f004 f944 	bl	352d8 <nrf_modem_delta_dfu_area>
	if (err != 0) {
   31050:	4602      	mov	r2, r0
   31052:	b110      	cbz	r0, 3105a <dfu_target_modem_delta_init+0x4e>
		LOG_ERR("Failed to retrieve size of modem DFU area, error %d", err);
   31054:	2145      	movs	r1, #69	; 0x45
   31056:	4812      	ldr	r0, [pc, #72]	; (310a0 <dfu_target_modem_delta_init+0x94>)
   31058:	e7e5      	b.n	31026 <dfu_target_modem_delta_init+0x1a>
	if (file_size > scratch_space) {
   3105a:	9b04      	ldr	r3, [sp, #16]
   3105c:	42a3      	cmp	r3, r4
   3105e:	d207      	bcs.n	31070 <dfu_target_modem_delta_init+0x64>
		LOG_ERR("Requested file too big to fit in flash %d > %d",
   31060:	4810      	ldr	r0, [pc, #64]	; (310a4 <dfu_target_modem_delta_init+0x98>)
   31062:	4622      	mov	r2, r4
   31064:	2145      	movs	r1, #69	; 0x45
   31066:	f00b fd23 	bl	3cab0 <z_log_minimal_printk>
		return -EFBIG;
   3106a:	f06f 001a 	mvn.w	r0, #26
   3106e:	e7de      	b.n	3102e <dfu_target_modem_delta_init+0x22>
	err = nrf_modem_delta_dfu_offset(&offset);
   31070:	a803      	add	r0, sp, #12
   31072:	f004 f90d 	bl	35290 <nrf_modem_delta_dfu_offset>
	if (err != 0) {
   31076:	b118      	cbz	r0, 31080 <dfu_target_modem_delta_init+0x74>
		LOG_ERR("Failed to retrieve offset in scratch area, error %d", err);
   31078:	4602      	mov	r2, r0
   3107a:	2145      	movs	r1, #69	; 0x45
   3107c:	480a      	ldr	r0, [pc, #40]	; (310a8 <dfu_target_modem_delta_init+0x9c>)
   3107e:	e7d2      	b.n	31026 <dfu_target_modem_delta_init+0x1a>
	if (offset == NRF_MODEM_DELTA_DFU_OFFSET_DIRTY) {
   31080:	9b03      	ldr	r3, [sp, #12]
   31082:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
   31086:	d1d2      	bne.n	3102e <dfu_target_modem_delta_init+0x22>
		err = delete_banked_modem_delta_fw();
   31088:	f7ff ff74 	bl	30f74 <delete_banked_modem_delta_fw>
		return err;
   3108c:	e7cf      	b.n	3102e <dfu_target_modem_delta_init+0x22>
   3108e:	bf00      	nop
   31090:	2001a400 	.word	0x2001a400
   31094:	0004b24f 	.word	0x0004b24f
   31098:	00048222 	.word	0x00048222
   3109c:	0004b27e 	.word	0x0004b27e
   310a0:	0004b29e 	.word	0x0004b29e
   310a4:	0004b2d7 	.word	0x0004b2d7
   310a8:	0004b30b 	.word	0x0004b30b

000310ac <dfu_target_modem_delta_offset_get>:

int dfu_target_modem_delta_offset_get(size_t *out)
{
   310ac:	b508      	push	{r3, lr}
	int err;

	err = nrf_modem_delta_dfu_offset(out);
   310ae:	f004 f8ef 	bl	35290 <nrf_modem_delta_dfu_offset>
	if (err != 0) {
   310b2:	b130      	cbz	r0, 310c2 <dfu_target_modem_delta_offset_get+0x16>
		LOG_ERR("Failed to retrieve offset in scratch area, error %d", err);
   310b4:	4602      	mov	r2, r0
   310b6:	2145      	movs	r1, #69	; 0x45
   310b8:	4802      	ldr	r0, [pc, #8]	; (310c4 <dfu_target_modem_delta_offset_get+0x18>)
   310ba:	f00b fcf9 	bl	3cab0 <z_log_minimal_printk>
		return -EFAULT;
   310be:	f06f 000d 	mvn.w	r0, #13
	}

	return 0;
}
   310c2:	bd08      	pop	{r3, pc}
   310c4:	0004b30b 	.word	0x0004b30b

000310c8 <dfu_target_modem_delta_write>:

int dfu_target_modem_delta_write(const void *const buf, size_t len)
{
   310c8:	b570      	push	{r4, r5, r6, lr}
   310ca:	4605      	mov	r5, r0
   310cc:	460e      	mov	r6, r1
	int err;

	err = nrf_modem_delta_dfu_write_init();
   310ce:	f004 f951 	bl	35374 <nrf_modem_delta_dfu_write_init>
	if (err != 0 && err != -NRF_EALREADY) {
   310d2:	4602      	mov	r2, r0
   310d4:	b148      	cbz	r0, 310ea <dfu_target_modem_delta_write+0x22>
   310d6:	f110 0f78 	cmn.w	r0, #120	; 0x78
   310da:	d006      	beq.n	310ea <dfu_target_modem_delta_write+0x22>
		LOG_ERR("Failed to ready modem for firmware update receival, error %d", err);
   310dc:	2145      	movs	r1, #69	; 0x45
   310de:	4816      	ldr	r0, [pc, #88]	; (31138 <dfu_target_modem_delta_write+0x70>)
		return -EFAULT;
	}

	err = nrf_modem_delta_dfu_write(buf, len);
	if (err < 0) {
		LOG_ERR("Write failed, modem library error %d", err);
   310e0:	f00b fce6 	bl	3cab0 <z_log_minimal_printk>
		return -EFAULT;
   310e4:	f06f 000d 	mvn.w	r0, #13
			return -EFAULT;
		}
	}

	return 0;
}
   310e8:	bd70      	pop	{r4, r5, r6, pc}
	err = nrf_modem_delta_dfu_write(buf, len);
   310ea:	4631      	mov	r1, r6
   310ec:	4628      	mov	r0, r5
   310ee:	f004 f96d 	bl	353cc <nrf_modem_delta_dfu_write>
	if (err < 0) {
   310f2:	1e04      	subs	r4, r0, #0
   310f4:	da03      	bge.n	310fe <dfu_target_modem_delta_write+0x36>
		LOG_ERR("Write failed, modem library error %d", err);
   310f6:	4622      	mov	r2, r4
   310f8:	2145      	movs	r1, #69	; 0x45
   310fa:	4810      	ldr	r0, [pc, #64]	; (3113c <dfu_target_modem_delta_write+0x74>)
   310fc:	e7f0      	b.n	310e0 <dfu_target_modem_delta_write+0x18>
	} else if (err > 0) {
   310fe:	d016      	beq.n	3112e <dfu_target_modem_delta_write+0x66>
		LOG_ERR("Write failed, modem error %d", err);
   31100:	4622      	mov	r2, r4
   31102:	2145      	movs	r1, #69	; 0x45
   31104:	480e      	ldr	r0, [pc, #56]	; (31140 <dfu_target_modem_delta_write+0x78>)
   31106:	f00b fcd3 	bl	3cab0 <z_log_minimal_printk>
		switch (err) {
   3110a:	2c0b      	cmp	r4, #11
   3110c:	d008      	beq.n	31120 <dfu_target_modem_delta_write+0x58>
   3110e:	2c0e      	cmp	r4, #14
   31110:	d006      	beq.n	31120 <dfu_target_modem_delta_write+0x58>
			return -EINVAL;
   31112:	2c09      	cmp	r4, #9
   31114:	bf14      	ite	ne
   31116:	f06f 000d 	mvnne.w	r0, #13
   3111a:	f06f 0015 	mvneq.w	r0, #21
   3111e:	e7e3      	b.n	310e8 <dfu_target_modem_delta_write+0x20>
			delete_banked_modem_delta_fw();
   31120:	f7ff ff28 	bl	30f74 <delete_banked_modem_delta_fw>
			err = dfu_target_modem_delta_write(buf, len);
   31124:	4631      	mov	r1, r6
   31126:	4628      	mov	r0, r5
   31128:	f7ff ffce 	bl	310c8 <dfu_target_modem_delta_write>
			if (err != 0) {
   3112c:	b908      	cbnz	r0, 31132 <dfu_target_modem_delta_write+0x6a>
				return 0;
   3112e:	2000      	movs	r0, #0
   31130:	e7da      	b.n	310e8 <dfu_target_modem_delta_write+0x20>
				return -EINVAL;
   31132:	f06f 0015 	mvn.w	r0, #21
   31136:	e7d7      	b.n	310e8 <dfu_target_modem_delta_write+0x20>
   31138:	0004b344 	.word	0x0004b344
   3113c:	0004b386 	.word	0x0004b386
   31140:	0004b3b0 	.word	0x0004b3b0

00031144 <dfu_target_modem_delta_done>:

int dfu_target_modem_delta_done(bool successful)
{
   31144:	b508      	push	{r3, lr}
	int err;

	ARG_UNUSED(successful);

	err = nrf_modem_delta_dfu_write_done();
   31146:	f004 f96d 	bl	35424 <nrf_modem_delta_dfu_write_done>
	if (err != 0) {
   3114a:	b130      	cbz	r0, 3115a <dfu_target_modem_delta_done+0x16>
		LOG_ERR("Failed to stop MFU and release resources, error %d", err);
   3114c:	4602      	mov	r2, r0
   3114e:	2145      	movs	r1, #69	; 0x45
   31150:	4802      	ldr	r0, [pc, #8]	; (3115c <dfu_target_modem_delta_done+0x18>)
   31152:	f00b fcad 	bl	3cab0 <z_log_minimal_printk>
		return -EFAULT;
   31156:	f06f 000d 	mvn.w	r0, #13
	}

	return 0;
}
   3115a:	bd08      	pop	{r3, pc}
   3115c:	0004b3d2 	.word	0x0004b3d2

00031160 <dfu_target_modem_delta_schedule_update>:

int dfu_target_modem_delta_schedule_update(int img_num)
{
   31160:	b510      	push	{r4, lr}
	int err;

	ARG_UNUSED(img_num);

	err = nrf_modem_delta_dfu_update();
   31162:	f004 f97f 	bl	35464 <nrf_modem_delta_dfu_update>

	if (err != 0) {
   31166:	4604      	mov	r4, r0
   31168:	b140      	cbz	r0, 3117c <dfu_target_modem_delta_schedule_update+0x1c>
		LOG_ERR("Modem firmware upgrade scheduling failed, error %d", err);
   3116a:	4602      	mov	r2, r0
   3116c:	2145      	movs	r1, #69	; 0x45
   3116e:	4806      	ldr	r0, [pc, #24]	; (31188 <dfu_target_modem_delta_schedule_update+0x28>)
   31170:	f00b fc9e 	bl	3cab0 <z_log_minimal_printk>
		return -EFAULT;
   31174:	f06f 040d 	mvn.w	r4, #13
	}
	LOG_INF("Scheduling modem firmware upgrade at next boot");

	return err;
}
   31178:	4620      	mov	r0, r4
   3117a:	bd10      	pop	{r4, pc}
	LOG_INF("Scheduling modem firmware upgrade at next boot");
   3117c:	2149      	movs	r1, #73	; 0x49
   3117e:	4803      	ldr	r0, [pc, #12]	; (3118c <dfu_target_modem_delta_schedule_update+0x2c>)
   31180:	f00b fc96 	bl	3cab0 <z_log_minimal_printk>
	return err;
   31184:	e7f8      	b.n	31178 <dfu_target_modem_delta_schedule_update+0x18>
   31186:	bf00      	nop
   31188:	0004b40a 	.word	0x0004b40a
   3118c:	0004b442 	.word	0x0004b442

00031190 <dfu_target_mcuboot_schedule_one_img.constprop.0>:

static int dfu_target_mcuboot_schedule_one_img(int img_num)
{
	int err = 0;

	err = boot_request_upgrade_multi(img_num, BOOT_UPGRADE_TEST);
   31190:	2100      	movs	r1, #0
static int dfu_target_mcuboot_schedule_one_img(int img_num)
   31192:	b510      	push	{r4, lr}
	err = boot_request_upgrade_multi(img_num, BOOT_UPGRADE_TEST);
   31194:	4608      	mov	r0, r1
   31196:	f00c facc 	bl	3d732 <boot_request_upgrade_multi>
	if (err != 0) {
   3119a:	4604      	mov	r4, r0
   3119c:	b138      	cbz	r0, 311ae <dfu_target_mcuboot_schedule_one_img.constprop.0+0x1e>
		LOG_ERR("boot_request_upgrade for image-%d error %d",
   3119e:	4603      	mov	r3, r0
   311a0:	2200      	movs	r2, #0
   311a2:	2145      	movs	r1, #69	; 0x45
   311a4:	4805      	ldr	r0, [pc, #20]	; (311bc <dfu_target_mcuboot_schedule_one_img.constprop.0+0x2c>)
   311a6:	f00b fc83 	bl	3cab0 <z_log_minimal_printk>
		LOG_INF("MCUBoot image-%d upgrade scheduled. "
			"Reset device to apply", img_num);
	}

	return err;
}
   311aa:	4620      	mov	r0, r4
   311ac:	bd10      	pop	{r4, pc}
		LOG_INF("MCUBoot image-%d upgrade scheduled. "
   311ae:	4602      	mov	r2, r0
   311b0:	2149      	movs	r1, #73	; 0x49
   311b2:	4803      	ldr	r0, [pc, #12]	; (311c0 <dfu_target_mcuboot_schedule_one_img.constprop.0+0x30>)
   311b4:	f00b fc7c 	bl	3cab0 <z_log_minimal_printk>
	return err;
   311b8:	e7f7      	b.n	311aa <dfu_target_mcuboot_schedule_one_img.constprop.0+0x1a>
   311ba:	bf00      	nop
   311bc:	0004b48d 	.word	0x0004b48d
   311c0:	0004b4bd 	.word	0x0004b4bd

000311c4 <dfu_target_mcuboot_identify>:
	return *((const uint32_t *)buf) == MCUBOOT_HEADER_MAGIC;
   311c4:	6800      	ldr	r0, [r0, #0]
}
   311c6:	4b02      	ldr	r3, [pc, #8]	; (311d0 <dfu_target_mcuboot_identify+0xc>)
   311c8:	1ac3      	subs	r3, r0, r3
   311ca:	4258      	negs	r0, r3
   311cc:	4158      	adcs	r0, r3
   311ce:	4770      	bx	lr
   311d0:	96f3b83d 	.word	0x96f3b83d

000311d4 <dfu_target_mcuboot_set_buf>:
	if (buf == NULL) {
   311d4:	b140      	cbz	r0, 311e8 <dfu_target_mcuboot_set_buf+0x14>
	if (!IS_ALIGNED_32(buf)) {
   311d6:	f010 0303 	ands.w	r3, r0, #3
   311da:	d105      	bne.n	311e8 <dfu_target_mcuboot_set_buf+0x14>
	stream_buf = buf;
   311dc:	4a04      	ldr	r2, [pc, #16]	; (311f0 <dfu_target_mcuboot_set_buf+0x1c>)
   311de:	6010      	str	r0, [r2, #0]
	stream_buf_len = len;
   311e0:	4a04      	ldr	r2, [pc, #16]	; (311f4 <dfu_target_mcuboot_set_buf+0x20>)
	return 0;
   311e2:	4618      	mov	r0, r3
	stream_buf_len = len;
   311e4:	6011      	str	r1, [r2, #0]
	return 0;
   311e6:	4770      	bx	lr
		return -EINVAL;
   311e8:	f06f 0015 	mvn.w	r0, #21
}
   311ec:	4770      	bx	lr
   311ee:	bf00      	nop
   311f0:	2001a404 	.word	0x2001a404
   311f4:	2001a40c 	.word	0x2001a40c

000311f8 <dfu_target_mcuboot_init>:
{
   311f8:	b530      	push	{r4, r5, lr}
	stream_buf_bytes = 0;
   311fa:	2500      	movs	r5, #0
   311fc:	4b21      	ldr	r3, [pc, #132]	; (31284 <dfu_target_mcuboot_init+0x8c>)
	if (stream_buf == NULL) {
   311fe:	4c22      	ldr	r4, [pc, #136]	; (31288 <dfu_target_mcuboot_init+0x90>)
	stream_buf_bytes = 0;
   31200:	601d      	str	r5, [r3, #0]
	if (stream_buf == NULL) {
   31202:	6823      	ldr	r3, [r4, #0]
{
   31204:	4602      	mov	r2, r0
   31206:	b089      	sub	sp, #36	; 0x24
	if (stream_buf == NULL) {
   31208:	b943      	cbnz	r3, 3121c <dfu_target_mcuboot_init+0x24>
		LOG_ERR("Missing stream_buf, call '..set_buf' before '..init");
   3120a:	2145      	movs	r1, #69	; 0x45
   3120c:	481f      	ldr	r0, [pc, #124]	; (3128c <dfu_target_mcuboot_init+0x94>)
   3120e:	f00b fc4f 	bl	3cab0 <z_log_minimal_printk>
		return -ENODEV;
   31212:	f06f 0412 	mvn.w	r4, #18
}
   31216:	4620      	mov	r0, r4
   31218:	b009      	add	sp, #36	; 0x24
   3121a:	bd30      	pop	{r4, r5, pc}
	if (file_size > secondary_size[img_num]) {
   3121c:	f5b0 2fd0 	cmp.w	r0, #425984	; 0x68000
   31220:	d908      	bls.n	31234 <dfu_target_mcuboot_init+0x3c>
		LOG_ERR("Requested file too big to fit in flash %zu > 0x%x",
   31222:	f44f 23d0 	mov.w	r3, #425984	; 0x68000
   31226:	2145      	movs	r1, #69	; 0x45
   31228:	4819      	ldr	r0, [pc, #100]	; (31290 <dfu_target_mcuboot_init+0x98>)
   3122a:	f00b fc41 	bl	3cab0 <z_log_minimal_printk>
		return -EFBIG;
   3122e:	f06f 041a 	mvn.w	r4, #26
   31232:	e7f0      	b.n	31216 <dfu_target_mcuboot_init+0x1e>
   31234:	4817      	ldr	r0, [pc, #92]	; (31294 <dfu_target_mcuboot_init+0x9c>)
   31236:	f004 fe39 	bl	35eac <z_impl_device_get_binding>
	if (flash_dev == NULL) {
   3123a:	b938      	cbnz	r0, 3124c <dfu_target_mcuboot_init+0x54>
		LOG_ERR("Failed to get device '%s'",
   3123c:	2145      	movs	r1, #69	; 0x45
   3123e:	4a15      	ldr	r2, [pc, #84]	; (31294 <dfu_target_mcuboot_init+0x9c>)
   31240:	4815      	ldr	r0, [pc, #84]	; (31298 <dfu_target_mcuboot_init+0xa0>)
   31242:	f00b fc35 	bl	3cab0 <z_log_minimal_printk>
		return -EFAULT;
   31246:	f06f 040d 	mvn.w	r4, #13
   3124a:	e7e4      	b.n	31216 <dfu_target_mcuboot_init+0x1e>
	err = dfu_target_stream_init(&(struct dfu_target_stream_init){
   3124c:	4b13      	ldr	r3, [pc, #76]	; (3129c <dfu_target_mcuboot_init+0xa4>)
   3124e:	f44f 22f0 	mov.w	r2, #491520	; 0x78000
   31252:	e9cd 3001 	strd	r3, r0, [sp, #4]
   31256:	6823      	ldr	r3, [r4, #0]
   31258:	a801      	add	r0, sp, #4
   3125a:	9303      	str	r3, [sp, #12]
   3125c:	4b10      	ldr	r3, [pc, #64]	; (312a0 <dfu_target_mcuboot_init+0xa8>)
   3125e:	9507      	str	r5, [sp, #28]
   31260:	681b      	ldr	r3, [r3, #0]
   31262:	9304      	str	r3, [sp, #16]
   31264:	f44f 23d0 	mov.w	r3, #425984	; 0x68000
   31268:	e9cd 2305 	strd	r2, r3, [sp, #20]
   3126c:	f7ff fe1c 	bl	30ea8 <dfu_target_stream_init>
	if (err < 0) {
   31270:	1e04      	subs	r4, r0, #0
   31272:	da05      	bge.n	31280 <dfu_target_mcuboot_init+0x88>
		LOG_ERR("dfu_target_stream_init failed %d", err);
   31274:	4622      	mov	r2, r4
   31276:	2145      	movs	r1, #69	; 0x45
   31278:	480a      	ldr	r0, [pc, #40]	; (312a4 <dfu_target_mcuboot_init+0xac>)
   3127a:	f00b fc19 	bl	3cab0 <z_log_minimal_printk>
		return err;
   3127e:	e7ca      	b.n	31216 <dfu_target_mcuboot_init+0x1e>
	return 0;
   31280:	462c      	mov	r4, r5
   31282:	e7c8      	b.n	31216 <dfu_target_mcuboot_init+0x1e>
   31284:	2001a408 	.word	0x2001a408
   31288:	2001a404 	.word	0x2001a404
   3128c:	0004b4fc 	.word	0x0004b4fc
   31290:	0004b535 	.word	0x0004b535
   31294:	000443d9 	.word	0x000443d9
   31298:	0004b56c 	.word	0x0004b56c
   3129c:	0004b58b 	.word	0x0004b58b
   312a0:	2001a40c 	.word	0x2001a40c
   312a4:	0004b594 	.word	0x0004b594

000312a8 <dfu_target_mcuboot_offset_get>:
{
   312a8:	b510      	push	{r4, lr}
   312aa:	4604      	mov	r4, r0
	err = dfu_target_stream_offset_get(out);
   312ac:	f7ff fe28 	bl	30f00 <dfu_target_stream_offset_get>
	if (err == 0) {
   312b0:	b920      	cbnz	r0, 312bc <dfu_target_mcuboot_offset_get+0x14>
		*out += stream_buf_bytes;
   312b2:	4a03      	ldr	r2, [pc, #12]	; (312c0 <dfu_target_mcuboot_offset_get+0x18>)
   312b4:	6823      	ldr	r3, [r4, #0]
   312b6:	6812      	ldr	r2, [r2, #0]
   312b8:	4413      	add	r3, r2
   312ba:	6023      	str	r3, [r4, #0]
}
   312bc:	bd10      	pop	{r4, pc}
   312be:	bf00      	nop
   312c0:	2001a408 	.word	0x2001a408

000312c4 <dfu_target_mcuboot_write>:
	stream_buf_bytes = (stream_buf_bytes + len) % stream_buf_len;
   312c4:	4a06      	ldr	r2, [pc, #24]	; (312e0 <dfu_target_mcuboot_write+0x1c>)
{
   312c6:	b430      	push	{r4, r5}
	stream_buf_bytes = (stream_buf_bytes + len) % stream_buf_len;
   312c8:	4c06      	ldr	r4, [pc, #24]	; (312e4 <dfu_target_mcuboot_write+0x20>)
   312ca:	6813      	ldr	r3, [r2, #0]
   312cc:	6824      	ldr	r4, [r4, #0]
   312ce:	440b      	add	r3, r1
   312d0:	fbb3 f5f4 	udiv	r5, r3, r4
   312d4:	fb04 3315 	mls	r3, r4, r5, r3
}
   312d8:	bc30      	pop	{r4, r5}
	stream_buf_bytes = (stream_buf_bytes + len) % stream_buf_len;
   312da:	6013      	str	r3, [r2, #0]
	return dfu_target_stream_write(buf, len);
   312dc:	f7ff be1a 	b.w	30f14 <dfu_target_stream_write>
   312e0:	2001a408 	.word	0x2001a408
   312e4:	2001a40c 	.word	0x2001a40c

000312e8 <dfu_target_mcuboot_done>:
{
   312e8:	b538      	push	{r3, r4, r5, lr}
   312ea:	4605      	mov	r5, r0
	err = dfu_target_stream_done(successful);
   312ec:	f7ff fe26 	bl	30f3c <dfu_target_stream_done>
	if (err != 0) {
   312f0:	4604      	mov	r4, r0
   312f2:	b130      	cbz	r0, 31302 <dfu_target_mcuboot_done+0x1a>
		LOG_ERR("dfu_target_stream_done error %d", err);
   312f4:	2145      	movs	r1, #69	; 0x45
   312f6:	4602      	mov	r2, r0
   312f8:	480c      	ldr	r0, [pc, #48]	; (3132c <dfu_target_mcuboot_done+0x44>)
			LOG_ERR("Unable to delete last page: %d", err);
   312fa:	f00b fbd9 	bl	3cab0 <z_log_minimal_printk>
}
   312fe:	4620      	mov	r0, r4
   31300:	bd38      	pop	{r3, r4, r5, pc}
	if (successful) {
   31302:	b16d      	cbz	r5, 31320 <dfu_target_mcuboot_done+0x38>
		stream_buf_bytes = 0;
   31304:	4b0a      	ldr	r3, [pc, #40]	; (31330 <dfu_target_mcuboot_done+0x48>)
   31306:	6018      	str	r0, [r3, #0]
		err = stream_flash_erase_page(dfu_target_stream_get_stream(),
   31308:	f7ff fdca 	bl	30ea0 <dfu_target_stream_get_stream>
   3130c:	4909      	ldr	r1, [pc, #36]	; (31334 <dfu_target_mcuboot_done+0x4c>)
   3130e:	f7f0 fcf7 	bl	21d00 <stream_flash_erase_page>
		if (err != 0) {
   31312:	4604      	mov	r4, r0
   31314:	2800      	cmp	r0, #0
   31316:	d0f2      	beq.n	312fe <dfu_target_mcuboot_done+0x16>
			LOG_ERR("Unable to delete last page: %d", err);
   31318:	4602      	mov	r2, r0
   3131a:	2145      	movs	r1, #69	; 0x45
   3131c:	4806      	ldr	r0, [pc, #24]	; (31338 <dfu_target_mcuboot_done+0x50>)
   3131e:	e7ec      	b.n	312fa <dfu_target_mcuboot_done+0x12>
		LOG_INF("MCUBoot image upgrade aborted.");
   31320:	2149      	movs	r1, #73	; 0x49
   31322:	4806      	ldr	r0, [pc, #24]	; (3133c <dfu_target_mcuboot_done+0x54>)
   31324:	f00b fbc4 	bl	3cab0 <z_log_minimal_printk>
   31328:	e7e9      	b.n	312fe <dfu_target_mcuboot_done+0x16>
   3132a:	bf00      	nop
   3132c:	0004b5ba 	.word	0x0004b5ba
   31330:	2001a408 	.word	0x2001a408
   31334:	000dffff 	.word	0x000dffff
   31338:	0004b5df 	.word	0x0004b5df
   3133c:	0004b603 	.word	0x0004b603

00031340 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   31340:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   31344:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   31346:	4c21      	ldr	r4, [pc, #132]	; (313cc <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   31348:	4e21      	ldr	r6, [pc, #132]	; (313d0 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   3134a:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   3134e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 313d8 <check_ext_api_requests+0x98>
{
   31352:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   31354:	45a8      	cmp	r8, r5
   31356:	d803      	bhi.n	31360 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   31358:	2000      	movs	r0, #0
   3135a:	b005      	add	sp, #20
   3135c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   31360:	6a63      	ldr	r3, [r4, #36]	; 0x24
   31362:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   31366:	681f      	ldr	r7, [r3, #0]
   31368:	ab01      	add	r3, sp, #4
   3136a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   3136e:	220c      	movs	r2, #12
   31370:	4619      	mov	r1, r3
   31372:	4638      	mov	r0, r7
   31374:	f010 f806 	bl	41384 <memcmp>
   31378:	b990      	cbnz	r0, 313a0 <check_ext_api_requests+0x60>
   3137a:	b18f      	cbz	r7, 313a0 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   3137c:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   3137e:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   31380:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   31382:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   31384:	4291      	cmp	r1, r2
   31386:	d10b      	bne.n	313a0 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   31388:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   3138a:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   3138c:	4291      	cmp	r1, r2
   3138e:	d807      	bhi.n	313a0 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   31390:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   31392:	4291      	cmp	r1, r2
   31394:	d904      	bls.n	313a0 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   31396:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   31398:	695b      	ldr	r3, [r3, #20]
   3139a:	ea32 0303 	bics.w	r3, r2, r3
   3139e:	d00a      	beq.n	313b6 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   313a0:	6a27      	ldr	r7, [r4, #32]
   313a2:	b167      	cbz	r7, 313be <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   313a4:	480b      	ldr	r0, [pc, #44]	; (313d4 <check_ext_api_requests+0x94>)
   313a6:	f00b f966 	bl	3c676 <printk>
			k_panic();
   313aa:	4040      	eors	r0, r0
   313ac:	f380 8811 	msr	BASEPRI, r0
   313b0:	f04f 0004 	mov.w	r0, #4
   313b4:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   313b6:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   313b8:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   313ba:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   313bc:	e7ca      	b.n	31354 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   313be:	4648      	mov	r0, r9
   313c0:	f00b f959 	bl	3c676 <printk>
			*ext_api_req->ext_api = NULL;
   313c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   313c6:	601f      	str	r7, [r3, #0]
   313c8:	e7f5      	b.n	313b6 <check_ext_api_requests+0x76>
   313ca:	bf00      	nop
   313cc:	0001c43c 	.word	0x0001c43c
   313d0:	000427ec 	.word	0x000427ec
   313d4:	0004b63a 	.word	0x0004b63a
   313d8:	0004b663 	.word	0x0004b663

000313dc <boot_write_magic>:
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
   313dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   313de:	b085      	sub	sp, #20
   313e0:	466e      	mov	r6, sp
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
   313e2:	6881      	ldr	r1, [r0, #8]
{
   313e4:	4605      	mov	r5, r0
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
   313e6:	3910      	subs	r1, #16
     * returned by boot_magic_off() is the start of magic which is not the
     * start of the flash write boundary and thus writes to the magic will fail.
     * To account for this change, write to magic is first padded with 0xFF
     * before writing to the trailer.
     */
    pad_off = ALIGN_DOWN(off, BOOT_MAX_ALIGN);
   313e8:	f021 0407 	bic.w	r4, r1, #7

    erased_val = flash_area_erased_val(fap);
   313ec:	f00c f827 	bl	3d43e <flash_area_erased_val>

    memset(&magic[0], erased_val, sizeof(magic));
    memcpy(&magic[BOOT_MAGIC_ALIGN_SIZE - BOOT_MAGIC_SZ], BOOT_IMG_MAGIC, BOOT_MAGIC_SZ);
   313f0:	4632      	mov	r2, r6
   313f2:	4b0a      	ldr	r3, [pc, #40]	; (3141c <boot_write_magic+0x40>)
   313f4:	f103 0c10 	add.w	ip, r3, #16
   313f8:	4637      	mov	r7, r6
   313fa:	6818      	ldr	r0, [r3, #0]
   313fc:	6859      	ldr	r1, [r3, #4]
   313fe:	3308      	adds	r3, #8
   31400:	c703      	stmia	r7!, {r0, r1}
   31402:	4563      	cmp	r3, ip
   31404:	463e      	mov	r6, r7
   31406:	d1f7      	bne.n	313f8 <boot_write_magic+0x1c>

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    rc = flash_area_write(fap, pad_off, &magic[0], BOOT_MAGIC_ALIGN_SIZE);
   31408:	2310      	movs	r3, #16
   3140a:	4621      	mov	r1, r4
   3140c:	4628      	mov	r0, r5
   3140e:	f00b ffda 	bl	3d3c6 <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
   31412:	3800      	subs	r0, #0
   31414:	bf18      	it	ne
   31416:	2001      	movne	r0, #1
   31418:	b005      	add	sp, #20
   3141a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3141c:	00043494 	.word	0x00043494

00031420 <boot_read_swap_state>:
{
   31420:	b530      	push	{r4, r5, lr}
   31422:	460c      	mov	r4, r1
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
   31424:	6881      	ldr	r1, [r0, #8]
{
   31426:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
   31428:	2310      	movs	r3, #16
   3142a:	aa02      	add	r2, sp, #8
   3142c:	3910      	subs	r1, #16
{
   3142e:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
   31430:	f00b ffad 	bl	3d38e <flash_area_read>
    if (rc < 0) {
   31434:	2800      	cmp	r0, #0
   31436:	da02      	bge.n	3143e <boot_read_swap_state+0x1e>
        return BOOT_EFLASH;
   31438:	2001      	movs	r0, #1
}
   3143a:	b007      	add	sp, #28
   3143c:	bd30      	pop	{r4, r5, pc}
    if (buffer == NULL || len == 0) {
   3143e:	2210      	movs	r2, #16
   31440:	4628      	mov	r0, r5
   31442:	a902      	add	r1, sp, #8
   31444:	f00e f9e3 	bl	3f80e <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
   31448:	b390      	cbz	r0, 314b0 <boot_read_swap_state+0x90>
        state->magic = BOOT_MAGIC_UNSET;
   3144a:	2303      	movs	r3, #3
        state->magic = boot_magic_decode(magic);
   3144c:	7023      	strb	r3, [r4, #0]
    off = boot_swap_info_off(fap);
   3144e:	4628      	mov	r0, r5
   31450:	f00e f9ee 	bl	3f830 <boot_swap_info_off>
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
   31454:	2301      	movs	r3, #1
    off = boot_swap_info_off(fap);
   31456:	4601      	mov	r1, r0
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
   31458:	f10d 0207 	add.w	r2, sp, #7
   3145c:	4628      	mov	r0, r5
   3145e:	f00b ff96 	bl	3d38e <flash_area_read>
    if (rc < 0) {
   31462:	2800      	cmp	r0, #0
   31464:	dbe8      	blt.n	31438 <boot_read_swap_state+0x18>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
   31466:	f89d 3007 	ldrb.w	r3, [sp, #7]
   3146a:	4628      	mov	r0, r5
   3146c:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
   31470:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
   31472:	7062      	strb	r2, [r4, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
   31474:	7123      	strb	r3, [r4, #4]
    if (buffer == NULL || len == 0) {
   31476:	2201      	movs	r2, #1
   31478:	f10d 0107 	add.w	r1, sp, #7
   3147c:	f00e f9c7 	bl	3f80e <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
   31480:	b910      	cbnz	r0, 31488 <boot_read_swap_state+0x68>
   31482:	7863      	ldrb	r3, [r4, #1]
   31484:	2b04      	cmp	r3, #4
   31486:	d903      	bls.n	31490 <boot_read_swap_state+0x70>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
   31488:	2301      	movs	r3, #1
   3148a:	7063      	strb	r3, [r4, #1]
        state->image_num = 0;
   3148c:	2300      	movs	r3, #0
   3148e:	7123      	strb	r3, [r4, #4]
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
   31490:	68aa      	ldr	r2, [r5, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
   31492:	4628      	mov	r0, r5
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
   31494:	3a18      	subs	r2, #24
   31496:	f022 0207 	bic.w	r2, r2, #7
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
   3149a:	3a08      	subs	r2, #8
   3149c:	1ca1      	adds	r1, r4, #2
   3149e:	f00e f9d3 	bl	3f848 <boot_read_flag>
    if (rc) {
   314a2:	2800      	cmp	r0, #0
   314a4:	d1c8      	bne.n	31438 <boot_read_swap_state+0x18>
    return boot_read_image_ok(fap, &state->image_ok);
   314a6:	4628      	mov	r0, r5
   314a8:	1ce1      	adds	r1, r4, #3
   314aa:	f00e fa28 	bl	3f8fe <boot_read_image_ok>
   314ae:	e7c4      	b.n	3143a <boot_read_swap_state+0x1a>
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
   314b0:	2210      	movs	r2, #16
   314b2:	4904      	ldr	r1, [pc, #16]	; (314c4 <boot_read_swap_state+0xa4>)
   314b4:	a802      	add	r0, sp, #8
   314b6:	f00f ff65 	bl	41384 <memcmp>
        return BOOT_MAGIC_GOOD;
   314ba:	2800      	cmp	r0, #0
   314bc:	bf14      	ite	ne
   314be:	2302      	movne	r3, #2
   314c0:	2301      	moveq	r3, #1
   314c2:	e7c3      	b.n	3144c <boot_read_swap_state+0x2c>
   314c4:	00043494 	.word	0x00043494

000314c8 <boot_write_swap_info>:
                     uint8_t image_num)
{
    uint32_t off;
    uint8_t swap_info;

    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
   314c8:	2a0e      	cmp	r2, #14
{
   314ca:	b513      	push	{r0, r1, r4, lr}
   314cc:	4604      	mov	r4, r0
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
   314ce:	d906      	bls.n	314de <boot_write_swap_info+0x16>
   314d0:	4b0c      	ldr	r3, [pc, #48]	; (31504 <boot_write_swap_info+0x3c>)
   314d2:	f240 11b1 	movw	r1, #433	; 0x1b1
   314d6:	4a0c      	ldr	r2, [pc, #48]	; (31508 <boot_write_swap_info+0x40>)
   314d8:	480c      	ldr	r0, [pc, #48]	; (3150c <boot_write_swap_info+0x44>)
   314da:	f008 fa83 	bl	399e4 <__assert_func>
   314de:	290e      	cmp	r1, #14
   314e0:	d901      	bls.n	314e6 <boot_write_swap_info+0x1e>
   314e2:	4b0b      	ldr	r3, [pc, #44]	; (31510 <boot_write_swap_info+0x48>)
   314e4:	e7f5      	b.n	314d2 <boot_write_swap_info+0xa>
   314e6:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
   314ea:	f88d 1007 	strb.w	r1, [sp, #7]
    off = boot_swap_info_off(fap);
   314ee:	f00e f99f 	bl	3f830 <boot_swap_info_off>
    BOOT_LOG_DBG("writing swap_info; fa_id=%d off=0x%lx (0x%lx), swap_type=0x%x"
                 " image_num=0x%x",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off),
                 swap_type, image_num);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
   314f2:	2301      	movs	r3, #1
    off = boot_swap_info_off(fap);
   314f4:	4601      	mov	r1, r0
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
   314f6:	f10d 0207 	add.w	r2, sp, #7
   314fa:	4620      	mov	r0, r4
   314fc:	f00e f9c1 	bl	3f882 <boot_write_trailer>
}
   31500:	b002      	add	sp, #8
   31502:	bd10      	pop	{r4, pc}
   31504:	0004b696 	.word	0x0004b696
   31508:	0004b721 	.word	0x0004b721
   3150c:	0004b6a8 	.word	0x0004b6a8
   31510:	0004b6eb 	.word	0x0004b6eb

00031514 <boot_set_pending_multi>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending_multi(int image_index, int permanent)
{
   31514:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   31516:	460e      	mov	r6, r1
    const struct flash_area *fap;
    struct boot_swap_state state_secondary_slot;
    uint8_t swap_type;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap);
   31518:	2009      	movs	r0, #9
   3151a:	a901      	add	r1, sp, #4
   3151c:	f7f0 fb8a 	bl	21c34 <flash_area_open>
    if (rc != 0) {
   31520:	2800      	cmp	r0, #0
   31522:	d137      	bne.n	31594 <boot_set_pending_multi+0x80>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state_secondary_slot);
   31524:	9801      	ldr	r0, [sp, #4]
   31526:	a902      	add	r1, sp, #8
   31528:	f7ff ff7a 	bl	31420 <boot_read_swap_state>
    if (rc != 0) {
   3152c:	4604      	mov	r4, r0
   3152e:	b938      	cbnz	r0, 31540 <boot_set_pending_multi+0x2c>
        goto done;
    }

    switch (state_secondary_slot.magic) {
   31530:	f89d 5008 	ldrb.w	r5, [sp, #8]
   31534:	2d02      	cmp	r5, #2
   31536:	d01f      	beq.n	31578 <boot_set_pending_multi+0x64>
   31538:	2d03      	cmp	r5, #3
   3153a:	d007      	beq.n	3154c <boot_set_pending_multi+0x38>
   3153c:	2d01      	cmp	r5, #1
   3153e:	d122      	bne.n	31586 <boot_set_pending_multi+0x72>
        assert(0);
        rc = BOOT_EBADIMAGE;
    }

done:
    flash_area_close(fap);
   31540:	9801      	ldr	r0, [sp, #4]
   31542:	f00b ff23 	bl	3d38c <flash_area_close>
    return rc;
}
   31546:	4620      	mov	r0, r4
   31548:	b004      	add	sp, #16
   3154a:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_write_magic(fap);
   3154c:	9801      	ldr	r0, [sp, #4]
   3154e:	f7ff ff45 	bl	313dc <boot_write_magic>
        if (rc == 0 && permanent) {
   31552:	4604      	mov	r4, r0
   31554:	2800      	cmp	r0, #0
   31556:	d1f3      	bne.n	31540 <boot_set_pending_multi+0x2c>
   31558:	b166      	cbz	r6, 31574 <boot_set_pending_multi+0x60>
            rc = boot_write_image_ok(fap);
   3155a:	9801      	ldr	r0, [sp, #4]
   3155c:	f00e f9c8 	bl	3f8f0 <boot_write_image_ok>
        if (rc == 0) {
   31560:	4604      	mov	r4, r0
   31562:	2800      	cmp	r0, #0
   31564:	d1ec      	bne.n	31540 <boot_set_pending_multi+0x2c>
            rc = boot_write_swap_info(fap, swap_type, 0);
   31566:	2200      	movs	r2, #0
   31568:	4629      	mov	r1, r5
   3156a:	9801      	ldr	r0, [sp, #4]
   3156c:	f7ff ffac 	bl	314c8 <boot_write_swap_info>
   31570:	4604      	mov	r4, r0
   31572:	e7e5      	b.n	31540 <boot_set_pending_multi+0x2c>
                swap_type = BOOT_SWAP_TYPE_TEST;
   31574:	2502      	movs	r5, #2
   31576:	e7f6      	b.n	31566 <boot_set_pending_multi+0x52>
        flash_area_erase(fap, 0, flash_area_get_size(fap));
   31578:	9801      	ldr	r0, [sp, #4]
   3157a:	4621      	mov	r1, r4
   3157c:	6882      	ldr	r2, [r0, #8]
   3157e:	f00b ff3e 	bl	3d3fe <flash_area_erase>
        rc = BOOT_EBADIMAGE;
   31582:	2403      	movs	r4, #3
        break;
   31584:	e7dc      	b.n	31540 <boot_set_pending_multi+0x2c>
        assert(0);
   31586:	f240 2146 	movw	r1, #582	; 0x246
   3158a:	4b03      	ldr	r3, [pc, #12]	; (31598 <boot_set_pending_multi+0x84>)
   3158c:	4a03      	ldr	r2, [pc, #12]	; (3159c <boot_set_pending_multi+0x88>)
   3158e:	4804      	ldr	r0, [pc, #16]	; (315a0 <boot_set_pending_multi+0x8c>)
   31590:	f008 fa28 	bl	399e4 <__assert_func>
        return BOOT_EFLASH;
   31594:	2401      	movs	r4, #1
   31596:	e7d6      	b.n	31546 <boot_set_pending_multi+0x32>
   31598:	00045a45 	.word	0x00045a45
   3159c:	0004b70a 	.word	0x0004b70a
   315a0:	0004b6a8 	.word	0x0004b6a8

000315a4 <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   315a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   315a8:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
   315aa:	4b15      	ldr	r3, [pc, #84]	; (31600 <tfm_ns_interface_dispatch+0x5c>)
   315ac:	4604      	mov	r4, r0
   315ae:	f893 8000 	ldrb.w	r8, [r3]
   315b2:	460d      	mov	r5, r1
   315b4:	4616      	mov	r6, r2
   315b6:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();

	if (!is_pre_kernel) {
   315b8:	f1b8 0f00 	cmp.w	r8, #0
   315bc:	d115      	bne.n	315ea <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   315be:	4668      	mov	r0, sp
   315c0:	f7f1 fe60 	bl	23284 <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   315c4:	463a      	mov	r2, r7
   315c6:	4631      	mov	r1, r6
   315c8:	4628      	mov	r0, r5
   315ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   315cc:	47a0      	blx	r4
   315ce:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   315d0:	4668      	mov	r0, sp
   315d2:	f00c f86c 	bl	3d6ae <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   315d6:	f1b8 0f00 	cmp.w	r8, #0
   315da:	d002      	beq.n	315e2 <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   315dc:	4809      	ldr	r0, [pc, #36]	; (31604 <tfm_ns_interface_dispatch+0x60>)
   315de:	f005 fa3b 	bl	36a58 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   315e2:	4620      	mov	r0, r4
   315e4:	b022      	add	sp, #136	; 0x88
   315e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   315ea:	f04f 32ff 	mov.w	r2, #4294967295
   315ee:	f04f 33ff 	mov.w	r3, #4294967295
   315f2:	4804      	ldr	r0, [pc, #16]	; (31604 <tfm_ns_interface_dispatch+0x60>)
   315f4:	f005 f95e 	bl	368b4 <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   315f8:	2800      	cmp	r0, #0
   315fa:	d0e0      	beq.n	315be <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
   315fc:	241f      	movs	r4, #31
   315fe:	e7f0      	b.n	315e2 <tfm_ns_interface_dispatch+0x3e>
   31600:	2001d3cc 	.word	0x2001d3cc
   31604:	20014fb8 	.word	0x20014fb8

00031608 <parse_string>:
{
   31608:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   3160c:	680a      	ldr	r2, [r1, #0]
   3160e:	688b      	ldr	r3, [r1, #8]
{
   31610:	4680      	mov	r8, r0
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   31612:	1c5d      	adds	r5, r3, #1
    if (buffer_at_offset(input_buffer)[0] != '\"')
   31614:	18d0      	adds	r0, r2, r3
   31616:	5cd3      	ldrb	r3, [r2, r3]
{
   31618:	468a      	mov	sl, r1
    if (buffer_at_offset(input_buffer)[0] != '\"')
   3161a:	2b22      	cmp	r3, #34	; 0x22
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   3161c:	4415      	add	r5, r2
    if (buffer_at_offset(input_buffer)[0] != '\"')
   3161e:	f040 80dd 	bne.w	317dc <parse_string+0x1d4>
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   31622:	462f      	mov	r7, r5
        size_t skipped_bytes = 0;
   31624:	2300      	movs	r3, #0
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
   31626:	684c      	ldr	r4, [r1, #4]
   31628:	1ab9      	subs	r1, r7, r2
   3162a:	42a1      	cmp	r1, r4
   3162c:	f080 80d6 	bcs.w	317dc <parse_string+0x1d4>
   31630:	7839      	ldrb	r1, [r7, #0]
   31632:	2922      	cmp	r1, #34	; 0x22
   31634:	d10e      	bne.n	31654 <parse_string+0x4c>
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   31636:	f1c3 0301 	rsb	r3, r3, #1
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
   3163a:	1a38      	subs	r0, r7, r0
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   3163c:	f8da 2010 	ldr.w	r2, [sl, #16]
   31640:	4418      	add	r0, r3
   31642:	4790      	blx	r2
        if (output == NULL)
   31644:	4683      	mov	fp, r0
   31646:	2800      	cmp	r0, #0
   31648:	f000 80c8 	beq.w	317dc <parse_string+0x1d4>
   3164c:	4604      	mov	r4, r0
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   3164e:	f8df 9198 	ldr.w	r9, [pc, #408]	; 317e8 <parse_string+0x1e0>
   31652:	e00f      	b.n	31674 <parse_string+0x6c>
            if (input_end[0] == '\\')
   31654:	295c      	cmp	r1, #92	; 0x5c
   31656:	d105      	bne.n	31664 <parse_string+0x5c>
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
   31658:	3701      	adds	r7, #1
   3165a:	1ab9      	subs	r1, r7, r2
   3165c:	428c      	cmp	r4, r1
   3165e:	f240 80bd 	bls.w	317dc <parse_string+0x1d4>
                skipped_bytes++;
   31662:	3301      	adds	r3, #1
            input_end++;
   31664:	3701      	adds	r7, #1
   31666:	e7df      	b.n	31628 <parse_string+0x20>
        if (*input_pointer != '\\')
   31668:	782b      	ldrb	r3, [r5, #0]
   3166a:	2b5c      	cmp	r3, #92	; 0x5c
   3166c:	d012      	beq.n	31694 <parse_string+0x8c>
            *output_pointer++ = *input_pointer++;
   3166e:	3501      	adds	r5, #1
   31670:	f804 3b01 	strb.w	r3, [r4], #1
    while (input_pointer < input_end)
   31674:	42bd      	cmp	r5, r7
   31676:	d3f7      	bcc.n	31668 <parse_string+0x60>
    *output_pointer = '\0';
   31678:	2300      	movs	r3, #0
   3167a:	7023      	strb	r3, [r4, #0]
    item->type = cJSON_String;
   3167c:	2310      	movs	r3, #16
    return true;
   3167e:	2001      	movs	r0, #1
    item->valuestring = (char*)output;
   31680:	e9c8 3b03 	strd	r3, fp, [r8, #12]
    input_buffer->offset = (size_t) (input_end - input_buffer->content);
   31684:	f8da 3000 	ldr.w	r3, [sl]
   31688:	1afb      	subs	r3, r7, r3
    input_buffer->offset++;
   3168a:	3301      	adds	r3, #1
   3168c:	f8ca 3008 	str.w	r3, [sl, #8]
}
   31690:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if ((input_end - input_pointer) < 1)
   31694:	1b7a      	subs	r2, r7, r5
   31696:	2a00      	cmp	r2, #0
   31698:	dd0d      	ble.n	316b6 <parse_string+0xae>
            switch (input_pointer[1])
   3169a:	786b      	ldrb	r3, [r5, #1]
   3169c:	2b75      	cmp	r3, #117	; 0x75
   3169e:	d80a      	bhi.n	316b6 <parse_string+0xae>
   316a0:	2b6d      	cmp	r3, #109	; 0x6d
   316a2:	d812      	bhi.n	316ca <parse_string+0xc2>
   316a4:	2b62      	cmp	r3, #98	; 0x62
   316a6:	d02b      	beq.n	31700 <parse_string+0xf8>
   316a8:	d826      	bhi.n	316f8 <parse_string+0xf0>
   316aa:	2b2f      	cmp	r3, #47	; 0x2f
   316ac:	d029      	beq.n	31702 <parse_string+0xfa>
   316ae:	2b5c      	cmp	r3, #92	; 0x5c
   316b0:	d027      	beq.n	31702 <parse_string+0xfa>
   316b2:	2b22      	cmp	r3, #34	; 0x22
   316b4:	d025      	beq.n	31702 <parse_string+0xfa>
        input_buffer->hooks.deallocate(output);
   316b6:	4658      	mov	r0, fp
   316b8:	f8da 3014 	ldr.w	r3, [sl, #20]
   316bc:	4798      	blx	r3
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
   316be:	f8da 0000 	ldr.w	r0, [sl]
   316c2:	1a28      	subs	r0, r5, r0
   316c4:	f8ca 0008 	str.w	r0, [sl, #8]
   316c8:	e08b      	b.n	317e2 <parse_string+0x1da>
            switch (input_pointer[1])
   316ca:	3b6e      	subs	r3, #110	; 0x6e
   316cc:	2b07      	cmp	r3, #7
   316ce:	d8f2      	bhi.n	316b6 <parse_string+0xae>
   316d0:	a101      	add	r1, pc, #4	; (adr r1, 316d8 <parse_string+0xd0>)
   316d2:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   316d6:	bf00      	nop
   316d8:	0003170d 	.word	0x0003170d
   316dc:	000316b7 	.word	0x000316b7
   316e0:	000316b7 	.word	0x000316b7
   316e4:	000316b7 	.word	0x000316b7
   316e8:	00031711 	.word	0x00031711
   316ec:	000316b7 	.word	0x000316b7
   316f0:	00031715 	.word	0x00031715
   316f4:	00031719 	.word	0x00031719
   316f8:	2b66      	cmp	r3, #102	; 0x66
   316fa:	d1dc      	bne.n	316b6 <parse_string+0xae>
                    *output_pointer++ = '\f';
   316fc:	230c      	movs	r3, #12
   316fe:	e000      	b.n	31702 <parse_string+0xfa>
                    *output_pointer++ = '\b';
   31700:	2308      	movs	r3, #8
                    *output_pointer++ = '\f';
   31702:	f804 3b01 	strb.w	r3, [r4], #1
            unsigned char sequence_length = 2;
   31706:	2302      	movs	r3, #2
            input_pointer += sequence_length;
   31708:	441d      	add	r5, r3
   3170a:	e7b3      	b.n	31674 <parse_string+0x6c>
                    *output_pointer++ = '\n';
   3170c:	230a      	movs	r3, #10
   3170e:	e7f8      	b.n	31702 <parse_string+0xfa>
                    *output_pointer++ = '\r';
   31710:	230d      	movs	r3, #13
   31712:	e7f6      	b.n	31702 <parse_string+0xfa>
                    *output_pointer++ = '\t';
   31714:	2309      	movs	r3, #9
   31716:	e7f4      	b.n	31702 <parse_string+0xfa>
    if ((input_end - first_sequence) < 6)
   31718:	2a05      	cmp	r2, #5
   3171a:	ddcc      	ble.n	316b6 <parse_string+0xae>
    first_code = parse_hex4(first_sequence + 2);
   3171c:	1ca8      	adds	r0, r5, #2
   3171e:	f00e f91f 	bl	3f960 <parse_hex4>
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   31722:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   31726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    first_code = parse_hex4(first_sequence + 2);
   3172a:	4606      	mov	r6, r0
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   3172c:	d3c3      	bcc.n	316b6 <parse_string+0xae>
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
   3172e:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
   31732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   31736:	d22d      	bcs.n	31794 <parse_string+0x18c>
        const unsigned char *second_sequence = first_sequence + 6;
   31738:	1dab      	adds	r3, r5, #6
        if ((input_end - second_sequence) < 6)
   3173a:	1afb      	subs	r3, r7, r3
   3173c:	2b05      	cmp	r3, #5
   3173e:	ddba      	ble.n	316b6 <parse_string+0xae>
        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
   31740:	79ab      	ldrb	r3, [r5, #6]
   31742:	2b5c      	cmp	r3, #92	; 0x5c
   31744:	d1b7      	bne.n	316b6 <parse_string+0xae>
   31746:	79eb      	ldrb	r3, [r5, #7]
   31748:	2b75      	cmp	r3, #117	; 0x75
   3174a:	d1b4      	bne.n	316b6 <parse_string+0xae>
        second_code = parse_hex4(second_sequence + 2);
   3174c:	f105 0008 	add.w	r0, r5, #8
   31750:	f00e f906 	bl	3f960 <parse_hex4>
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
   31754:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   31758:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   3175c:	d2ab      	bcs.n	316b6 <parse_string+0xae>
        sequence_length = 12; /* \uXXXX\uXXXX */
   3175e:	230c      	movs	r3, #12
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   31760:	ea09 2686 	and.w	r6, r9, r6, lsl #10
   31764:	f3c0 0009 	ubfx	r0, r0, #0, #10
   31768:	4330      	orrs	r0, r6
   3176a:	f500 3680 	add.w	r6, r0, #65536	; 0x10000
        first_byte_mark = 0xF0; /* 11110000 */
   3176e:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
        utf8_length = 4;
   31772:	2004      	movs	r0, #4
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   31774:	f100 3eff 	add.w	lr, r0, #4294967295
   31778:	fa54 fe8e 	uxtab	lr, r4, lr
   3177c:	45a6      	cmp	lr, r4
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   3177e:	b2f2      	uxtb	r2, r6
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   31780:	d124      	bne.n	317cc <parse_string+0x1c4>
    if (utf8_length > 1)
   31782:	2801      	cmp	r0, #1
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
   31784:	bf14      	ite	ne
   31786:	ea42 020c 	orrne.w	r2, r2, ip
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
   3178a:	f002 027f 	andeq.w	r2, r2, #127	; 0x7f
   3178e:	7022      	strb	r2, [r4, #0]
    *output_pointer += utf8_length;
   31790:	4404      	add	r4, r0
                    if (sequence_length == 0)
   31792:	e7b9      	b.n	31708 <parse_string+0x100>
    if (codepoint < 0x80)
   31794:	287f      	cmp	r0, #127	; 0x7f
   31796:	d90a      	bls.n	317ae <parse_string+0x1a6>
    else if (codepoint < 0x800)
   31798:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   3179c:	d30c      	bcc.n	317b8 <parse_string+0x1b0>
    else if (codepoint < 0x10000)
   3179e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   317a2:	d30e      	bcc.n	317c2 <parse_string+0x1ba>
    else if (codepoint <= 0x10FFFF)
   317a4:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   317a8:	d285      	bcs.n	316b6 <parse_string+0xae>
        sequence_length = 6; /* \uXXXX */
   317aa:	2306      	movs	r3, #6
   317ac:	e7df      	b.n	3176e <parse_string+0x166>
   317ae:	2306      	movs	r3, #6
    unsigned char first_byte_mark = 0;
   317b0:	f04f 0c00 	mov.w	ip, #0
        utf8_length = 1;
   317b4:	2001      	movs	r0, #1
   317b6:	e7dd      	b.n	31774 <parse_string+0x16c>
        sequence_length = 6; /* \uXXXX */
   317b8:	2306      	movs	r3, #6
        first_byte_mark = 0xC0; /* 11000000 */
   317ba:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
        utf8_length = 2;
   317be:	2002      	movs	r0, #2
   317c0:	e7d8      	b.n	31774 <parse_string+0x16c>
        sequence_length = 6; /* \uXXXX */
   317c2:	2306      	movs	r3, #6
        first_byte_mark = 0xE0; /* 11100000 */
   317c4:	f04f 0ce0 	mov.w	ip, #224	; 0xe0
        utf8_length = 3;
   317c8:	2003      	movs	r0, #3
   317ca:	e7d3      	b.n	31774 <parse_string+0x16c>
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   317cc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   317d0:	f062 017f 	orn	r1, r2, #127	; 0x7f
   317d4:	f80e 1901 	strb.w	r1, [lr], #-1
        codepoint >>= 6;
   317d8:	09b6      	lsrs	r6, r6, #6
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   317da:	e7cf      	b.n	3177c <parse_string+0x174>
    if (input_pointer != NULL)
   317dc:	2d00      	cmp	r5, #0
   317de:	f47f af6e 	bne.w	316be <parse_string+0xb6>
    return false;
   317e2:	2000      	movs	r0, #0
   317e4:	e754      	b.n	31690 <parse_string+0x88>
   317e6:	bf00      	nop
   317e8:	000ffc00 	.word	0x000ffc00

000317ec <compare_double>:
{
   317ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   317f0:	4616      	mov	r6, r2
   317f2:	461f      	mov	r7, r3
   317f4:	4680      	mov	r8, r0
   317f6:	4689      	mov	r9, r1
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
   317f8:	f00f fdab 	bl	41352 <fabs>
   317fc:	4604      	mov	r4, r0
   317fe:	460d      	mov	r5, r1
   31800:	4630      	mov	r0, r6
   31802:	4639      	mov	r1, r7
   31804:	f00f fda5 	bl	41352 <fabs>
   31808:	4602      	mov	r2, r0
   3180a:	460b      	mov	r3, r1
   3180c:	4620      	mov	r0, r4
   3180e:	4629      	mov	r1, r5
   31810:	f7eb fa62 	bl	1ccd8 <__aeabi_dcmpgt>
   31814:	b300      	cbz	r0, 31858 <compare_double+0x6c>
   31816:	4640      	mov	r0, r8
   31818:	4649      	mov	r1, r9
   3181a:	f00f fd9a 	bl	41352 <fabs>
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
   3181e:	4632      	mov	r2, r6
   31820:	463b      	mov	r3, r7
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
   31822:	4604      	mov	r4, r0
   31824:	460d      	mov	r5, r1
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
   31826:	4640      	mov	r0, r8
   31828:	4649      	mov	r1, r9
   3182a:	f7ea fe0d 	bl	1c448 <__aeabi_dsub>
   3182e:	f00f fd90 	bl	41352 <fabs>
   31832:	2200      	movs	r2, #0
   31834:	4606      	mov	r6, r0
   31836:	460f      	mov	r7, r1
   31838:	4620      	mov	r0, r4
   3183a:	4629      	mov	r1, r5
   3183c:	4b08      	ldr	r3, [pc, #32]	; (31860 <compare_double+0x74>)
   3183e:	f7ea ffbb 	bl	1c7b8 <__aeabi_dmul>
   31842:	4602      	mov	r2, r0
   31844:	460b      	mov	r3, r1
   31846:	4630      	mov	r0, r6
   31848:	4639      	mov	r1, r7
   3184a:	f7eb fa31 	bl	1ccb0 <__aeabi_dcmple>
}
   3184e:	3800      	subs	r0, #0
   31850:	bf18      	it	ne
   31852:	2001      	movne	r0, #1
   31854:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
   31858:	4630      	mov	r0, r6
   3185a:	4639      	mov	r1, r7
   3185c:	e7dd      	b.n	3181a <compare_double+0x2e>
   3185e:	bf00      	nop
   31860:	3cb00000 	.word	0x3cb00000

00031864 <get_object_item>:
{
   31864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31866:	460d      	mov	r5, r1
    if ((object == NULL) || (name == NULL))
   31868:	b360      	cbz	r0, 318c4 <get_object_item+0x60>
   3186a:	b359      	cbz	r1, 318c4 <get_object_item+0x60>
    current_element = object->child;
   3186c:	6884      	ldr	r4, [r0, #8]
    if (case_sensitive)
   3186e:	b9fa      	cbnz	r2, 318b0 <get_object_item+0x4c>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   31870:	4e17      	ldr	r6, [pc, #92]	; (318d0 <get_object_item+0x6c>)
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
   31872:	b33c      	cbz	r4, 318c4 <get_object_item+0x60>
   31874:	6a23      	ldr	r3, [r4, #32]
    if ((string1 == NULL) || (string2 == NULL))
   31876:	b1c3      	cbz	r3, 318aa <get_object_item+0x46>
    if (string1 == string2)
   31878:	42ab      	cmp	r3, r5
   3187a:	d021      	beq.n	318c0 <get_object_item+0x5c>
   3187c:	f105 3cff 	add.w	ip, r5, #4294967295
   31880:	3b01      	subs	r3, #1
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   31882:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   31886:	460f      	mov	r7, r1
   31888:	5d8a      	ldrb	r2, [r1, r6]
   3188a:	f002 0203 	and.w	r2, r2, #3
   3188e:	2a01      	cmp	r2, #1
   31890:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   31894:	bf08      	it	eq
   31896:	f101 0720 	addeq.w	r7, r1, #32
   3189a:	5cb0      	ldrb	r0, [r6, r2]
   3189c:	f000 0003 	and.w	r0, r0, #3
   318a0:	2801      	cmp	r0, #1
   318a2:	bf08      	it	eq
   318a4:	3220      	addeq	r2, #32
   318a6:	4297      	cmp	r7, r2
   318a8:	d00f      	beq.n	318ca <get_object_item+0x66>
            current_element = current_element->next;
   318aa:	6824      	ldr	r4, [r4, #0]
   318ac:	e7e1      	b.n	31872 <get_object_item+0xe>
            current_element = current_element->next;
   318ae:	6824      	ldr	r4, [r4, #0]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
   318b0:	b144      	cbz	r4, 318c4 <get_object_item+0x60>
   318b2:	6a21      	ldr	r1, [r4, #32]
   318b4:	b121      	cbz	r1, 318c0 <get_object_item+0x5c>
   318b6:	4628      	mov	r0, r5
   318b8:	f7eb fcb9 	bl	1d22e <strcmp>
   318bc:	2800      	cmp	r0, #0
   318be:	d1f6      	bne.n	318ae <get_object_item+0x4a>
    if ((current_element == NULL) || (current_element->string == NULL)) {
   318c0:	6a23      	ldr	r3, [r4, #32]
   318c2:	b903      	cbnz	r3, 318c6 <get_object_item+0x62>
        return NULL;
   318c4:	2400      	movs	r4, #0
}
   318c6:	4620      	mov	r0, r4
   318c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (*string1 == '\0')
   318ca:	2900      	cmp	r1, #0
   318cc:	d1d9      	bne.n	31882 <get_object_item+0x1e>
   318ce:	e7f7      	b.n	318c0 <get_object_item+0x5c>
   318d0:	0004bc8c 	.word	0x0004bc8c

000318d4 <print_string_ptr>:
{
   318d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const char quotes[] = "\"\"";
   318d8:	4b52      	ldr	r3, [pc, #328]	; (31a24 <print_string_ptr+0x150>)
{
   318da:	b085      	sub	sp, #20
    const char quotes[] = "\"\"";
   318dc:	881a      	ldrh	r2, [r3, #0]
   318de:	789b      	ldrb	r3, [r3, #2]
{
   318e0:	4605      	mov	r5, r0
    if (output_buffer == NULL)
   318e2:	460f      	mov	r7, r1
    const char quotes[] = "\"\"";
   318e4:	f8ad 200c 	strh.w	r2, [sp, #12]
   318e8:	f88d 300e 	strb.w	r3, [sp, #14]
    if (output_buffer == NULL)
   318ec:	b919      	cbnz	r1, 318f6 <print_string_ptr+0x22>
        return false;
   318ee:	2000      	movs	r0, #0
}
   318f0:	b005      	add	sp, #20
   318f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (input == NULL)
   318f6:	b340      	cbz	r0, 3194a <print_string_ptr+0x76>
   318f8:	4601      	mov	r1, r0
    size_t escape_characters = 0;
   318fa:	f04f 0b00 	mov.w	fp, #0
   318fe:	2001      	movs	r0, #1
   31900:	4c49      	ldr	r4, [pc, #292]	; (31a28 <print_string_ptr+0x154>)
   31902:	468a      	mov	sl, r1
    for (input_pointer = input; *input_pointer; input_pointer++)
   31904:	f811 3b01 	ldrb.w	r3, [r1], #1
   31908:	bb6b      	cbnz	r3, 31966 <print_string_ptr+0x92>
    output_length = (size_t)(input_pointer - input) + escape_characters;
   3190a:	ebaa 0a05 	sub.w	sl, sl, r5
   3190e:	44da      	add	sl, fp
    output = ensure(output_buffer, output_length + sizeof(quotes));
   31910:	4638      	mov	r0, r7
   31912:	f10a 0103 	add.w	r1, sl, #3
   31916:	f00e f889 	bl	3fa2c <ensure>
    if (output == NULL)
   3191a:	4606      	mov	r6, r0
   3191c:	2800      	cmp	r0, #0
   3191e:	d0e6      	beq.n	318ee <print_string_ptr+0x1a>
    if (escape_characters == 0)
   31920:	2322      	movs	r3, #34	; 0x22
        output[output_length + 1] = '\"';
   31922:	f10a 0901 	add.w	r9, sl, #1
        output[output_length + 2] = '\0';
   31926:	f10a 0802 	add.w	r8, sl, #2
        memcpy(output + 1, input, output_length);
   3192a:	1c44      	adds	r4, r0, #1
        output[0] = '\"';
   3192c:	7003      	strb	r3, [r0, #0]
    if (escape_characters == 0)
   3192e:	f1bb 0f00 	cmp.w	fp, #0
   31932:	d12e      	bne.n	31992 <print_string_ptr+0xbe>
   31934:	4652      	mov	r2, sl
   31936:	4629      	mov	r1, r5
   31938:	4620      	mov	r0, r4
   3193a:	f00f fd33 	bl	413a4 <memcpy>
        output[output_length + 1] = '\"';
   3193e:	2322      	movs	r3, #34	; 0x22
   31940:	f806 3009 	strb.w	r3, [r6, r9]
        output[output_length + 2] = '\0';
   31944:	f806 b008 	strb.w	fp, [r6, r8]
        return true;
   31948:	e00b      	b.n	31962 <print_string_ptr+0x8e>
        output = ensure(output_buffer, sizeof(quotes));
   3194a:	2103      	movs	r1, #3
   3194c:	4638      	mov	r0, r7
   3194e:	f00e f86d 	bl	3fa2c <ensure>
        if (output == NULL)
   31952:	2800      	cmp	r0, #0
   31954:	d0cb      	beq.n	318ee <print_string_ptr+0x1a>
        strncpy((char*)output, quotes, output_buffer->length - output_buffer->offset);
   31956:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   3195a:	a903      	add	r1, sp, #12
   3195c:	1ad2      	subs	r2, r2, r3
   3195e:	f00f ff28 	bl	417b2 <strncpy>
    return true;
   31962:	2001      	movs	r0, #1
   31964:	e7c4      	b.n	318f0 <print_string_ptr+0x1c>
        switch (*input_pointer)
   31966:	2b22      	cmp	r3, #34	; 0x22
   31968:	d80b      	bhi.n	31982 <print_string_ptr+0xae>
   3196a:	2b07      	cmp	r3, #7
   3196c:	d90c      	bls.n	31988 <print_string_ptr+0xb4>
   3196e:	f1a3 0208 	sub.w	r2, r3, #8
   31972:	b2d2      	uxtb	r2, r2
   31974:	fa00 f202 	lsl.w	r2, r0, r2
   31978:	4222      	tst	r2, r4
   3197a:	d005      	beq.n	31988 <print_string_ptr+0xb4>
                escape_characters++;
   3197c:	f10b 0b01 	add.w	fp, fp, #1
                break;
   31980:	e7bf      	b.n	31902 <print_string_ptr+0x2e>
        switch (*input_pointer)
   31982:	2b5c      	cmp	r3, #92	; 0x5c
   31984:	d1bd      	bne.n	31902 <print_string_ptr+0x2e>
   31986:	e7f9      	b.n	3197c <print_string_ptr+0xa8>
                if (*input_pointer < 32)
   31988:	2b1f      	cmp	r3, #31
                    escape_characters += 5;
   3198a:	bf98      	it	ls
   3198c:	f10b 0b05 	addls.w	fp, fp, #5
    for (input_pointer = input; *input_pointer; input_pointer++)
   31990:	e7b7      	b.n	31902 <print_string_ptr+0x2e>
            *output_pointer++ = '\\';
   31992:	f04f 0a5c 	mov.w	sl, #92	; 0x5c
                    *output_pointer = 't';
   31996:	f04f 0b74 	mov.w	fp, #116	; 0x74
   3199a:	1e6b      	subs	r3, r5, #1
                    snprintf((char*)output_pointer, output_buffer->length - (size_t)(output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   3199c:	4a23      	ldr	r2, [pc, #140]	; (31a2c <print_string_ptr+0x158>)
   3199e:	9301      	str	r3, [sp, #4]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   319a0:	9901      	ldr	r1, [sp, #4]
   319a2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   319a6:	9101      	str	r1, [sp, #4]
   319a8:	b92b      	cbnz	r3, 319b6 <print_string_ptr+0xe2>
    output[output_length + 1] = '\"';
   319aa:	2222      	movs	r2, #34	; 0x22
   319ac:	f806 2009 	strb.w	r2, [r6, r9]
    output[output_length + 2] = '\0';
   319b0:	f806 3008 	strb.w	r3, [r6, r8]
   319b4:	e7d5      	b.n	31962 <print_string_ptr+0x8e>
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
   319b6:	2b1f      	cmp	r3, #31
   319b8:	d907      	bls.n	319ca <print_string_ptr+0xf6>
   319ba:	2b22      	cmp	r3, #34	; 0x22
   319bc:	d005      	beq.n	319ca <print_string_ptr+0xf6>
   319be:	2b5c      	cmp	r3, #92	; 0x5c
   319c0:	d003      	beq.n	319ca <print_string_ptr+0xf6>
            *output_pointer = *input_pointer;
   319c2:	4620      	mov	r0, r4
   319c4:	7023      	strb	r3, [r4, #0]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   319c6:	1c44      	adds	r4, r0, #1
   319c8:	e7ea      	b.n	319a0 <print_string_ptr+0xcc>
            *output_pointer++ = '\\';
   319ca:	4620      	mov	r0, r4
            switch (*input_pointer)
   319cc:	9b01      	ldr	r3, [sp, #4]
            *output_pointer++ = '\\';
   319ce:	f800 ab01 	strb.w	sl, [r0], #1
            switch (*input_pointer)
   319d2:	781b      	ldrb	r3, [r3, #0]
   319d4:	2b0d      	cmp	r3, #13
   319d6:	d80a      	bhi.n	319ee <print_string_ptr+0x11a>
   319d8:	2b07      	cmp	r3, #7
   319da:	d919      	bls.n	31a10 <print_string_ptr+0x13c>
   319dc:	f1a3 0108 	sub.w	r1, r3, #8
   319e0:	2905      	cmp	r1, #5
   319e2:	d815      	bhi.n	31a10 <print_string_ptr+0x13c>
   319e4:	e8df f001 	tbb	[pc, r1]
   319e8:	140d1109 	.word	0x140d1109
   319ec:	0f0b      	.short	0x0f0b
   319ee:	2b22      	cmp	r3, #34	; 0x22
   319f0:	d001      	beq.n	319f6 <print_string_ptr+0x122>
   319f2:	2b5c      	cmp	r3, #92	; 0x5c
   319f4:	d10c      	bne.n	31a10 <print_string_ptr+0x13c>
                    *output_pointer = 'b';
   319f6:	7063      	strb	r3, [r4, #1]
                    break;
   319f8:	e7e5      	b.n	319c6 <print_string_ptr+0xf2>
                    *output_pointer = 'b';
   319fa:	2362      	movs	r3, #98	; 0x62
   319fc:	e7fb      	b.n	319f6 <print_string_ptr+0x122>
                    *output_pointer = 'f';
   319fe:	2366      	movs	r3, #102	; 0x66
   31a00:	e7f9      	b.n	319f6 <print_string_ptr+0x122>
                    *output_pointer = 'n';
   31a02:	236e      	movs	r3, #110	; 0x6e
   31a04:	e7f7      	b.n	319f6 <print_string_ptr+0x122>
                    *output_pointer = 'r';
   31a06:	2372      	movs	r3, #114	; 0x72
   31a08:	e7f5      	b.n	319f6 <print_string_ptr+0x122>
                    *output_pointer = 't';
   31a0a:	f884 b001 	strb.w	fp, [r4, #1]
                    break;
   31a0e:	e7da      	b.n	319c6 <print_string_ptr+0xf2>
                    snprintf((char*)output_pointer, output_buffer->length - (size_t)(output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   31a10:	6839      	ldr	r1, [r7, #0]
   31a12:	687d      	ldr	r5, [r7, #4]
   31a14:	1a41      	subs	r1, r0, r1
   31a16:	1a69      	subs	r1, r5, r1
   31a18:	f008 fe1c 	bl	3a654 <sniprintf>
                    output_pointer += 4;
   31a1c:	4a03      	ldr	r2, [pc, #12]	; (31a2c <print_string_ptr+0x158>)
   31a1e:	1d60      	adds	r0, r4, #5
                    break;
   31a20:	e7d1      	b.n	319c6 <print_string_ptr+0xf2>
   31a22:	bf00      	nop
   31a24:	0004b73c 	.word	0x0004b73c
   31a28:	04000037 	.word	0x04000037
   31a2c:	0004b736 	.word	0x0004b736

00031a30 <cJSON_strdup.constprop.0>:
static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
   31a30:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (string == NULL)
   31a32:	4605      	mov	r5, r0
   31a34:	b180      	cbz	r0, 31a58 <cJSON_strdup.constprop.0+0x28>
    length = strlen((const char*)string) + sizeof("");
   31a36:	f7eb fc04 	bl	1d242 <strlen>
    copy = (unsigned char*)hooks->allocate(length);
   31a3a:	4b08      	ldr	r3, [pc, #32]	; (31a5c <cJSON_strdup.constprop.0+0x2c>)
    length = strlen((const char*)string) + sizeof("");
   31a3c:	1c42      	adds	r2, r0, #1
    copy = (unsigned char*)hooks->allocate(length);
   31a3e:	4610      	mov	r0, r2
   31a40:	681b      	ldr	r3, [r3, #0]
   31a42:	9201      	str	r2, [sp, #4]
   31a44:	4798      	blx	r3
    if (copy == NULL)
   31a46:	4604      	mov	r4, r0
   31a48:	b118      	cbz	r0, 31a52 <cJSON_strdup.constprop.0+0x22>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   31a4a:	4629      	mov	r1, r5
   31a4c:	9a01      	ldr	r2, [sp, #4]
   31a4e:	f00f fca9 	bl	413a4 <memcpy>
}
   31a52:	4620      	mov	r0, r4
   31a54:	b003      	add	sp, #12
   31a56:	bd30      	pop	{r4, r5, pc}
        return NULL;
   31a58:	4604      	mov	r4, r0
   31a5a:	e7fa      	b.n	31a52 <cJSON_strdup.constprop.0+0x22>
   31a5c:	200146f0 	.word	0x200146f0

00031a60 <add_item_to_object.constprop.0>:
static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
   31a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31a62:	460d      	mov	r5, r1
   31a64:	4614      	mov	r4, r2
    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
   31a66:	4607      	mov	r7, r0
   31a68:	b300      	cbz	r0, 31aac <add_item_to_object.constprop.0+0x4c>
   31a6a:	b1f9      	cbz	r1, 31aac <add_item_to_object.constprop.0+0x4c>
   31a6c:	b1f2      	cbz	r2, 31aac <add_item_to_object.constprop.0+0x4c>
   31a6e:	4290      	cmp	r0, r2
   31a70:	d01c      	beq.n	31aac <add_item_to_object.constprop.0+0x4c>
    if (constant_key)
   31a72:	b193      	cbz	r3, 31a9a <add_item_to_object.constprop.0+0x3a>
        new_type = item->type | cJSON_StringIsConst;
   31a74:	68d6      	ldr	r6, [r2, #12]
   31a76:	f446 7600 	orr.w	r6, r6, #512	; 0x200
    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   31a7a:	68e3      	ldr	r3, [r4, #12]
   31a7c:	059b      	lsls	r3, r3, #22
   31a7e:	d404      	bmi.n	31a8a <add_item_to_object.constprop.0+0x2a>
   31a80:	6a20      	ldr	r0, [r4, #32]
   31a82:	b110      	cbz	r0, 31a8a <add_item_to_object.constprop.0+0x2a>
        hooks->deallocate(item->string);
   31a84:	4b0a      	ldr	r3, [pc, #40]	; (31ab0 <add_item_to_object.constprop.0+0x50>)
   31a86:	685b      	ldr	r3, [r3, #4]
   31a88:	4798      	blx	r3
    return add_item_to_array(object, item);
   31a8a:	4621      	mov	r1, r4
   31a8c:	4638      	mov	r0, r7
    item->string = new_key;
   31a8e:	6225      	str	r5, [r4, #32]
    item->type = new_type;
   31a90:	60e6      	str	r6, [r4, #12]
}
   31a92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return add_item_to_array(object, item);
   31a96:	f00d bfb5 	b.w	3fa04 <add_item_to_array>
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
   31a9a:	4608      	mov	r0, r1
   31a9c:	f7ff ffc8 	bl	31a30 <cJSON_strdup.constprop.0>
        if (new_key == NULL)
   31aa0:	4605      	mov	r5, r0
   31aa2:	b118      	cbz	r0, 31aac <add_item_to_object.constprop.0+0x4c>
        new_type = item->type & ~cJSON_StringIsConst;
   31aa4:	68e6      	ldr	r6, [r4, #12]
   31aa6:	f426 7600 	bic.w	r6, r6, #512	; 0x200
   31aaa:	e7e6      	b.n	31a7a <add_item_to_object.constprop.0+0x1a>
}
   31aac:	2000      	movs	r0, #0
   31aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   31ab0:	200146f0 	.word	0x200146f0

00031ab4 <print_value>:
{
   31ab4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   31ab8:	460c      	mov	r4, r1
    if ((item == NULL) || (output_buffer == NULL))
   31aba:	4606      	mov	r6, r0
{
   31abc:	b08f      	sub	sp, #60	; 0x3c
    if ((item == NULL) || (output_buffer == NULL))
   31abe:	b908      	cbnz	r0, 31ac4 <print_value+0x10>
    switch ((item->type) & 0xFF)
   31ac0:	2500      	movs	r5, #0
   31ac2:	e06f      	b.n	31ba4 <print_value+0xf0>
    if ((item == NULL) || (output_buffer == NULL))
   31ac4:	2900      	cmp	r1, #0
   31ac6:	d0fb      	beq.n	31ac0 <print_value+0xc>
    switch ((item->type) & 0xFF)
   31ac8:	7b05      	ldrb	r5, [r0, #12]
   31aca:	2d10      	cmp	r5, #16
   31acc:	f000 80ea 	beq.w	31ca4 <print_value+0x1f0>
   31ad0:	dc18      	bgt.n	31b04 <print_value+0x50>
   31ad2:	1e6b      	subs	r3, r5, #1
   31ad4:	2b07      	cmp	r3, #7
   31ad6:	d8f3      	bhi.n	31ac0 <print_value+0xc>
   31ad8:	2b07      	cmp	r3, #7
   31ada:	d8f1      	bhi.n	31ac0 <print_value+0xc>
   31adc:	a201      	add	r2, pc, #4	; (adr r2, 31ae4 <print_value+0x30>)
   31ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   31ae2:	bf00      	nop
   31ae4:	00031b81 	.word	0x00031b81
   31ae8:	00031bad 	.word	0x00031bad
   31aec:	00031ac1 	.word	0x00031ac1
   31af0:	00031b59 	.word	0x00031b59
   31af4:	00031ac1 	.word	0x00031ac1
   31af8:	00031ac1 	.word	0x00031ac1
   31afc:	00031ac1 	.word	0x00031ac1
   31b00:	00031bb1 	.word	0x00031bb1
   31b04:	2d40      	cmp	r5, #64	; 0x40
   31b06:	f000 80fc 	beq.w	31d02 <print_value+0x24e>
   31b0a:	2d80      	cmp	r5, #128	; 0x80
   31b0c:	f000 80b6 	beq.w	31c7c <print_value+0x1c8>
   31b10:	2d20      	cmp	r5, #32
   31b12:	d1d5      	bne.n	31ac0 <print_value+0xc>
            return print_array(item, output_buffer);
   31b14:	6886      	ldr	r6, [r0, #8]
    output_pointer = ensure(output_buffer, 1);
   31b16:	2101      	movs	r1, #1
   31b18:	4620      	mov	r0, r4
   31b1a:	f00d ff87 	bl	3fa2c <ensure>
    if (output_pointer == NULL)
   31b1e:	2800      	cmp	r0, #0
   31b20:	d0ce      	beq.n	31ac0 <print_value+0xc>
    *output_pointer = '[';
   31b22:	235b      	movs	r3, #91	; 0x5b
            *output_pointer++ = ',';
   31b24:	272c      	movs	r7, #44	; 0x2c
            *output_pointer = '\0';
   31b26:	f04f 0800 	mov.w	r8, #0
    *output_pointer = '[';
   31b2a:	7003      	strb	r3, [r0, #0]
    output_buffer->offset++;
   31b2c:	68a3      	ldr	r3, [r4, #8]
   31b2e:	3301      	adds	r3, #1
   31b30:	60a3      	str	r3, [r4, #8]
    output_buffer->depth++;
   31b32:	68e3      	ldr	r3, [r4, #12]
   31b34:	3301      	adds	r3, #1
   31b36:	60e3      	str	r3, [r4, #12]
    while (current_element != NULL)
   31b38:	2e00      	cmp	r6, #0
   31b3a:	f040 80b9 	bne.w	31cb0 <print_value+0x1fc>
    output_pointer = ensure(output_buffer, 2);
   31b3e:	2102      	movs	r1, #2
   31b40:	4620      	mov	r0, r4
   31b42:	f00d ff73 	bl	3fa2c <ensure>
    if (output_pointer == NULL)
   31b46:	2800      	cmp	r0, #0
   31b48:	d0ba      	beq.n	31ac0 <print_value+0xc>
    *output_pointer++ = ']';
   31b4a:	235d      	movs	r3, #93	; 0x5d
    *output_pointer = '\0';
   31b4c:	7046      	strb	r6, [r0, #1]
    *output_pointer++ = ']';
   31b4e:	7003      	strb	r3, [r0, #0]
    output_buffer->depth--;
   31b50:	68e3      	ldr	r3, [r4, #12]
   31b52:	3b01      	subs	r3, #1
   31b54:	60e3      	str	r3, [r4, #12]
   31b56:	e011      	b.n	31b7c <print_value+0xc8>
            const char buff[] = "null";
   31b58:	4b82      	ldr	r3, [pc, #520]	; (31d64 <print_value+0x2b0>)
            const char buff[] = "true";
   31b5a:	6818      	ldr	r0, [r3, #0]
   31b5c:	791b      	ldrb	r3, [r3, #4]
   31b5e:	9007      	str	r0, [sp, #28]
            output = ensure(output_buffer, sizeof(buff));
   31b60:	2105      	movs	r1, #5
   31b62:	4620      	mov	r0, r4
            const char buff[] = "true";
   31b64:	f88d 3020 	strb.w	r3, [sp, #32]
            output = ensure(output_buffer, sizeof(buff));
   31b68:	f00d ff60 	bl	3fa2c <ensure>
            if (output == NULL)
   31b6c:	4605      	mov	r5, r0
   31b6e:	b1c8      	cbz	r0, 31ba4 <print_value+0xf0>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   31b70:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   31b74:	a907      	add	r1, sp, #28
   31b76:	1ad2      	subs	r2, r2, r3
   31b78:	f00f fe1b 	bl	417b2 <strncpy>
    return true;
   31b7c:	2501      	movs	r5, #1
   31b7e:	e011      	b.n	31ba4 <print_value+0xf0>
            const char buff[] = "false";
   31b80:	4b79      	ldr	r3, [pc, #484]	; (31d68 <print_value+0x2b4>)
            output = ensure(output_buffer, sizeof(buff));
   31b82:	2106      	movs	r1, #6
            const char buff[] = "false";
   31b84:	6818      	ldr	r0, [r3, #0]
   31b86:	889b      	ldrh	r3, [r3, #4]
   31b88:	9007      	str	r0, [sp, #28]
            output = ensure(output_buffer, sizeof(buff));
   31b8a:	4620      	mov	r0, r4
            const char buff[] = "false";
   31b8c:	f8ad 3020 	strh.w	r3, [sp, #32]
            output = ensure(output_buffer, sizeof(buff));
   31b90:	f00d ff4c 	bl	3fa2c <ensure>
            if (output == NULL)
   31b94:	2800      	cmp	r0, #0
   31b96:	d093      	beq.n	31ac0 <print_value+0xc>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   31b98:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   31b9c:	a907      	add	r1, sp, #28
   31b9e:	1ad2      	subs	r2, r2, r3
   31ba0:	f00f fe07 	bl	417b2 <strncpy>
}
   31ba4:	4628      	mov	r0, r5
   31ba6:	b00f      	add	sp, #60	; 0x3c
   31ba8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            const char buff[] = "true";
   31bac:	4b6f      	ldr	r3, [pc, #444]	; (31d6c <print_value+0x2b8>)
   31bae:	e7d4      	b.n	31b5a <print_value+0xa6>
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
   31bb0:	2100      	movs	r1, #0
    double d = item->valuedouble;
   31bb2:	e9d0 6706 	ldrd	r6, r7, [r0, #24]
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
   31bb6:	2216      	movs	r2, #22
   31bb8:	a808      	add	r0, sp, #32
   31bba:	9107      	str	r1, [sp, #28]
   31bbc:	f00f fc12 	bl	413e4 <memset>
    double test = 0.0;
   31bc0:	2200      	movs	r2, #0
   31bc2:	2300      	movs	r3, #0
    if (isnan(d) || isinf(d))
   31bc4:	4630      	mov	r0, r6
    double test = 0.0;
   31bc6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    if (isnan(d) || isinf(d))
   31bca:	4639      	mov	r1, r7
   31bcc:	4632      	mov	r2, r6
   31bce:	463b      	mov	r3, r7
   31bd0:	f7eb f88c 	bl	1ccec <__aeabi_dcmpun>
   31bd4:	b988      	cbnz	r0, 31bfa <print_value+0x146>
   31bd6:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   31bda:	f04f 32ff 	mov.w	r2, #4294967295
   31bde:	4630      	mov	r0, r6
   31be0:	4649      	mov	r1, r9
   31be2:	4b63      	ldr	r3, [pc, #396]	; (31d70 <print_value+0x2bc>)
   31be4:	f7eb f882 	bl	1ccec <__aeabi_dcmpun>
   31be8:	b9f0      	cbnz	r0, 31c28 <print_value+0x174>
   31bea:	f04f 32ff 	mov.w	r2, #4294967295
   31bee:	4630      	mov	r0, r6
   31bf0:	4649      	mov	r1, r9
   31bf2:	4b5f      	ldr	r3, [pc, #380]	; (31d70 <print_value+0x2bc>)
   31bf4:	f7eb f85c 	bl	1ccb0 <__aeabi_dcmple>
   31bf8:	b9b0      	cbnz	r0, 31c28 <print_value+0x174>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "null");
   31bfa:	495a      	ldr	r1, [pc, #360]	; (31d64 <print_value+0x2b0>)
   31bfc:	a807      	add	r0, sp, #28
   31bfe:	f00f fdbc 	bl	4177a <strcpy>
   31c02:	2504      	movs	r5, #4
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
   31c04:	4620      	mov	r0, r4
   31c06:	1c69      	adds	r1, r5, #1
   31c08:	f00d ff10 	bl	3fa2c <ensure>
    if (output_pointer == NULL)
   31c0c:	2800      	cmp	r0, #0
   31c0e:	f43f af57 	beq.w	31ac0 <print_value+0xc>
   31c12:	4602      	mov	r2, r0
   31c14:	ab07      	add	r3, sp, #28
   31c16:	1946      	adds	r6, r0, r5
    for (i = 0; i < ((size_t)length); i++)
   31c18:	4296      	cmp	r6, r2
   31c1a:	d129      	bne.n	31c70 <print_value+0x1bc>
    output_pointer[i] = '\0';
   31c1c:	2300      	movs	r3, #0
   31c1e:	5543      	strb	r3, [r0, r5]
    output_buffer->offset += (size_t)length;
   31c20:	68a0      	ldr	r0, [r4, #8]
   31c22:	4428      	add	r0, r5
   31c24:	60a0      	str	r0, [r4, #8]
    return true;
   31c26:	e7a9      	b.n	31b7c <print_value+0xc8>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   31c28:	211a      	movs	r1, #26
   31c2a:	4a52      	ldr	r2, [pc, #328]	; (31d74 <print_value+0x2c0>)
   31c2c:	e9cd 6700 	strd	r6, r7, [sp]
   31c30:	a807      	add	r0, sp, #28
   31c32:	f008 fd0f 	bl	3a654 <sniprintf>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
   31c36:	4950      	ldr	r1, [pc, #320]	; (31d78 <print_value+0x2c4>)
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   31c38:	4605      	mov	r5, r0
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
   31c3a:	aa04      	add	r2, sp, #16
   31c3c:	a807      	add	r0, sp, #28
   31c3e:	f008 fd3d 	bl	3a6bc <siscanf>
   31c42:	2801      	cmp	r0, #1
   31c44:	d00b      	beq.n	31c5e <print_value+0x1aa>
            length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.17g", d);
   31c46:	211a      	movs	r1, #26
   31c48:	e9cd 6700 	strd	r6, r7, [sp]
   31c4c:	4a4b      	ldr	r2, [pc, #300]	; (31d7c <print_value+0x2c8>)
   31c4e:	a807      	add	r0, sp, #28
   31c50:	f008 fd00 	bl	3a654 <sniprintf>
   31c54:	4605      	mov	r5, r0
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
   31c56:	2d19      	cmp	r5, #25
   31c58:	f73f af32 	bgt.w	31ac0 <print_value+0xc>
   31c5c:	e7d2      	b.n	31c04 <print_value+0x150>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
   31c5e:	4632      	mov	r2, r6
   31c60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   31c64:	463b      	mov	r3, r7
   31c66:	f7ff fdc1 	bl	317ec <compare_double>
   31c6a:	2800      	cmp	r0, #0
   31c6c:	d0eb      	beq.n	31c46 <print_value+0x192>
   31c6e:	e7f2      	b.n	31c56 <print_value+0x1a2>
        if (number_buffer[i] == decimal_point)
   31c70:	f813 1b01 	ldrb.w	r1, [r3], #1
   31c74:	3201      	adds	r2, #1
            output_pointer[i] = '.';
   31c76:	f802 1c01 	strb.w	r1, [r2, #-1]
    for (i = 0; i < ((size_t)length); i++)
   31c7a:	e7cd      	b.n	31c18 <print_value+0x164>
            if (item->valuestring == NULL)
   31c7c:	6900      	ldr	r0, [r0, #16]
   31c7e:	2800      	cmp	r0, #0
   31c80:	f43f af1e 	beq.w	31ac0 <print_value+0xc>
            raw_length = strlen(item->valuestring) + sizeof("");
   31c84:	f7eb fadd 	bl	1d242 <strlen>
   31c88:	1c42      	adds	r2, r0, #1
            output = ensure(output_buffer, raw_length);
   31c8a:	4611      	mov	r1, r2
   31c8c:	4620      	mov	r0, r4
   31c8e:	9203      	str	r2, [sp, #12]
   31c90:	f00d fecc 	bl	3fa2c <ensure>
            if (output == NULL)
   31c94:	2800      	cmp	r0, #0
   31c96:	f43f af13 	beq.w	31ac0 <print_value+0xc>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   31c9a:	9a03      	ldr	r2, [sp, #12]
   31c9c:	6931      	ldr	r1, [r6, #16]
   31c9e:	f00f fb81 	bl	413a4 <memcpy>
   31ca2:	e76b      	b.n	31b7c <print_value+0xc8>
    return print_string_ptr((unsigned char*)item->valuestring, p);
   31ca4:	6900      	ldr	r0, [r0, #16]
}
   31ca6:	b00f      	add	sp, #60	; 0x3c
   31ca8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    return print_string_ptr((unsigned char*)item->valuestring, p);
   31cac:	f7ff be12 	b.w	318d4 <print_string_ptr>
        if (!print_value(current_element, output_buffer))
   31cb0:	4621      	mov	r1, r4
   31cb2:	4630      	mov	r0, r6
   31cb4:	f7ff fefe 	bl	31ab4 <print_value>
   31cb8:	2800      	cmp	r0, #0
   31cba:	f43f af01 	beq.w	31ac0 <print_value+0xc>
        update_offset(output_buffer);
   31cbe:	4620      	mov	r0, r4
   31cc0:	f00d fe93 	bl	3f9ea <update_offset>
        if (current_element->next)
   31cc4:	6833      	ldr	r3, [r6, #0]
   31cc6:	b1bb      	cbz	r3, 31cf8 <print_value+0x244>
            length = (size_t) (output_buffer->format ? 2 : 1);
   31cc8:	6963      	ldr	r3, [r4, #20]
            output_pointer = ensure(output_buffer, length + 1);
   31cca:	4620      	mov	r0, r4
            length = (size_t) (output_buffer->format ? 2 : 1);
   31ccc:	2b00      	cmp	r3, #0
   31cce:	bf14      	ite	ne
   31cd0:	f04f 0902 	movne.w	r9, #2
   31cd4:	f04f 0901 	moveq.w	r9, #1
            output_pointer = ensure(output_buffer, length + 1);
   31cd8:	f109 0101 	add.w	r1, r9, #1
   31cdc:	f00d fea6 	bl	3fa2c <ensure>
            if (output_pointer == NULL)
   31ce0:	2800      	cmp	r0, #0
   31ce2:	f43f aeed 	beq.w	31ac0 <print_value+0xc>
            *output_pointer++ = ',';
   31ce6:	7007      	strb	r7, [r0, #0]
            if(output_buffer->format)
   31ce8:	6963      	ldr	r3, [r4, #20]
   31cea:	b93b      	cbnz	r3, 31cfc <print_value+0x248>
            *output_pointer++ = ',';
   31cec:	1c43      	adds	r3, r0, #1
            *output_pointer = '\0';
   31cee:	f883 8000 	strb.w	r8, [r3]
            output_buffer->offset += length;
   31cf2:	68a3      	ldr	r3, [r4, #8]
   31cf4:	444b      	add	r3, r9
   31cf6:	60a3      	str	r3, [r4, #8]
        current_element = current_element->next;
   31cf8:	6836      	ldr	r6, [r6, #0]
   31cfa:	e71d      	b.n	31b38 <print_value+0x84>
                *output_pointer++ = ' ';
   31cfc:	1c83      	adds	r3, r0, #2
   31cfe:	7045      	strb	r5, [r0, #1]
   31d00:	e7f5      	b.n	31cee <print_value+0x23a>
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   31d02:	694b      	ldr	r3, [r1, #20]
   31d04:	6885      	ldr	r5, [r0, #8]
   31d06:	2b00      	cmp	r3, #0
   31d08:	bf14      	ite	ne
   31d0a:	2702      	movne	r7, #2
   31d0c:	2701      	moveq	r7, #1
    output_pointer = ensure(output_buffer, length + 1);
   31d0e:	4620      	mov	r0, r4
   31d10:	1c79      	adds	r1, r7, #1
   31d12:	f00d fe8b 	bl	3fa2c <ensure>
    if (output_pointer == NULL)
   31d16:	2800      	cmp	r0, #0
   31d18:	f43f aed2 	beq.w	31ac0 <print_value+0xc>
    *output_pointer++ = '{';
   31d1c:	237b      	movs	r3, #123	; 0x7b
   31d1e:	7003      	strb	r3, [r0, #0]
    output_buffer->depth++;
   31d20:	68e2      	ldr	r2, [r4, #12]
    if (output_buffer->format)
   31d22:	6963      	ldr	r3, [r4, #20]
    output_buffer->depth++;
   31d24:	3201      	adds	r2, #1
   31d26:	60e2      	str	r2, [r4, #12]
    if (output_buffer->format)
   31d28:	b10b      	cbz	r3, 31d2e <print_value+0x27a>
        *output_pointer++ = '\n';
   31d2a:	230a      	movs	r3, #10
   31d2c:	7043      	strb	r3, [r0, #1]
    output_buffer->offset += length;
   31d2e:	68a3      	ldr	r3, [r4, #8]
                *output_pointer++ = '\t';
   31d30:	2609      	movs	r6, #9
    output_buffer->offset += length;
   31d32:	443b      	add	r3, r7
        *output_pointer++ = ':';
   31d34:	273a      	movs	r7, #58	; 0x3a
    output_buffer->offset += length;
   31d36:	60a3      	str	r3, [r4, #8]
        if (output_buffer->format)
   31d38:	6963      	ldr	r3, [r4, #20]
    while (current_item)
   31d3a:	bb0d      	cbnz	r5, 31d80 <print_value+0x2cc>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   31d3c:	2b00      	cmp	r3, #0
   31d3e:	d07f      	beq.n	31e40 <print_value+0x38c>
   31d40:	68e1      	ldr	r1, [r4, #12]
   31d42:	3101      	adds	r1, #1
   31d44:	4620      	mov	r0, r4
   31d46:	f00d fe71 	bl	3fa2c <ensure>
    if (output_pointer == NULL)
   31d4a:	2800      	cmp	r0, #0
   31d4c:	f43f aeb8 	beq.w	31ac0 <print_value+0xc>
    if (output_buffer->format)
   31d50:	6963      	ldr	r3, [r4, #20]
   31d52:	2b00      	cmp	r3, #0
   31d54:	d17e      	bne.n	31e54 <print_value+0x3a0>
   31d56:	4603      	mov	r3, r0
    *output_pointer++ = '}';
   31d58:	227d      	movs	r2, #125	; 0x7d
   31d5a:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
   31d5c:	2200      	movs	r2, #0
   31d5e:	705a      	strb	r2, [r3, #1]
   31d60:	e6f6      	b.n	31b50 <print_value+0x9c>
   31d62:	bf00      	nop
   31d64:	0004b73f 	.word	0x0004b73f
   31d68:	0004b756 	.word	0x0004b756
   31d6c:	0004b75c 	.word	0x0004b75c
   31d70:	7fefffff 	.word	0x7fefffff
   31d74:	0004b744 	.word	0x0004b744
   31d78:	0004b74b 	.word	0x0004b74b
   31d7c:	0004b74f 	.word	0x0004b74f
        if (output_buffer->format)
   31d80:	b173      	cbz	r3, 31da0 <print_value+0x2ec>
            output_pointer = ensure(output_buffer, output_buffer->depth);
   31d82:	4620      	mov	r0, r4
   31d84:	68e1      	ldr	r1, [r4, #12]
   31d86:	f00d fe51 	bl	3fa2c <ensure>
            if (output_pointer == NULL)
   31d8a:	2800      	cmp	r0, #0
   31d8c:	f43f ae98 	beq.w	31ac0 <print_value+0xc>
   31d90:	4602      	mov	r2, r0
            for (i = 0; i < output_buffer->depth; i++)
   31d92:	68e1      	ldr	r1, [r4, #12]
   31d94:	1a13      	subs	r3, r2, r0
   31d96:	428b      	cmp	r3, r1
   31d98:	d34f      	bcc.n	31e3a <print_value+0x386>
            output_buffer->offset += output_buffer->depth;
   31d9a:	68a3      	ldr	r3, [r4, #8]
   31d9c:	440b      	add	r3, r1
   31d9e:	60a3      	str	r3, [r4, #8]
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
   31da0:	4621      	mov	r1, r4
   31da2:	6a28      	ldr	r0, [r5, #32]
   31da4:	f7ff fd96 	bl	318d4 <print_string_ptr>
   31da8:	2800      	cmp	r0, #0
   31daa:	f43f ae89 	beq.w	31ac0 <print_value+0xc>
        update_offset(output_buffer);
   31dae:	4620      	mov	r0, r4
   31db0:	f00d fe1b 	bl	3f9ea <update_offset>
        length = (size_t) (output_buffer->format ? 2 : 1);
   31db4:	6963      	ldr	r3, [r4, #20]
        output_pointer = ensure(output_buffer, length);
   31db6:	4620      	mov	r0, r4
        length = (size_t) (output_buffer->format ? 2 : 1);
   31db8:	2b00      	cmp	r3, #0
   31dba:	bf14      	ite	ne
   31dbc:	f04f 0802 	movne.w	r8, #2
   31dc0:	f04f 0801 	moveq.w	r8, #1
        output_pointer = ensure(output_buffer, length);
   31dc4:	4641      	mov	r1, r8
   31dc6:	f00d fe31 	bl	3fa2c <ensure>
        if (output_pointer == NULL)
   31dca:	2800      	cmp	r0, #0
   31dcc:	f43f ae78 	beq.w	31ac0 <print_value+0xc>
        *output_pointer++ = ':';
   31dd0:	7007      	strb	r7, [r0, #0]
        if (output_buffer->format)
   31dd2:	6963      	ldr	r3, [r4, #20]
   31dd4:	b103      	cbz	r3, 31dd8 <print_value+0x324>
            *output_pointer++ = '\t';
   31dd6:	7046      	strb	r6, [r0, #1]
        output_buffer->offset += length;
   31dd8:	68a3      	ldr	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   31dda:	4621      	mov	r1, r4
        output_buffer->offset += length;
   31ddc:	4443      	add	r3, r8
        if (!print_value(current_item, output_buffer))
   31dde:	4628      	mov	r0, r5
        output_buffer->offset += length;
   31de0:	60a3      	str	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   31de2:	f7ff fe67 	bl	31ab4 <print_value>
   31de6:	2800      	cmp	r0, #0
   31de8:	f43f ae6a 	beq.w	31ac0 <print_value+0xc>
        update_offset(output_buffer);
   31dec:	4620      	mov	r0, r4
   31dee:	f00d fdfc 	bl	3f9ea <update_offset>
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
   31df2:	682b      	ldr	r3, [r5, #0]
   31df4:	6962      	ldr	r2, [r4, #20]
   31df6:	f1b3 0800 	subs.w	r8, r3, #0
   31dfa:	bf18      	it	ne
   31dfc:	f04f 0801 	movne.w	r8, #1
   31e00:	2a00      	cmp	r2, #0
   31e02:	bf18      	it	ne
   31e04:	f108 0801 	addne.w	r8, r8, #1
        output_pointer = ensure(output_buffer, length + 1);
   31e08:	4620      	mov	r0, r4
   31e0a:	f108 0101 	add.w	r1, r8, #1
   31e0e:	f00d fe0d 	bl	3fa2c <ensure>
        if (output_pointer == NULL)
   31e12:	2800      	cmp	r0, #0
   31e14:	f43f ae54 	beq.w	31ac0 <print_value+0xc>
        if (current_item->next)
   31e18:	682b      	ldr	r3, [r5, #0]
   31e1a:	b113      	cbz	r3, 31e22 <print_value+0x36e>
            *output_pointer++ = ',';
   31e1c:	232c      	movs	r3, #44	; 0x2c
   31e1e:	f800 3b01 	strb.w	r3, [r0], #1
        if (output_buffer->format)
   31e22:	6963      	ldr	r3, [r4, #20]
   31e24:	b113      	cbz	r3, 31e2c <print_value+0x378>
            *output_pointer++ = '\n';
   31e26:	230a      	movs	r3, #10
   31e28:	f800 3b01 	strb.w	r3, [r0], #1
        *output_pointer = '\0';
   31e2c:	2300      	movs	r3, #0
   31e2e:	7003      	strb	r3, [r0, #0]
        output_buffer->offset += length;
   31e30:	68a3      	ldr	r3, [r4, #8]
        current_item = current_item->next;
   31e32:	682d      	ldr	r5, [r5, #0]
        output_buffer->offset += length;
   31e34:	4443      	add	r3, r8
   31e36:	60a3      	str	r3, [r4, #8]
        current_item = current_item->next;
   31e38:	e77e      	b.n	31d38 <print_value+0x284>
                *output_pointer++ = '\t';
   31e3a:	f802 6b01 	strb.w	r6, [r2], #1
            for (i = 0; i < output_buffer->depth; i++)
   31e3e:	e7a8      	b.n	31d92 <print_value+0x2de>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   31e40:	2102      	movs	r1, #2
   31e42:	e77f      	b.n	31d44 <print_value+0x290>
            *output_pointer++ = '\t';
   31e44:	f803 5b01 	strb.w	r5, [r3], #1
        for (i = 0; i < (output_buffer->depth - 1); i++)
   31e48:	68e2      	ldr	r2, [r4, #12]
   31e4a:	1a19      	subs	r1, r3, r0
   31e4c:	3a01      	subs	r2, #1
   31e4e:	4291      	cmp	r1, r2
   31e50:	d3f8      	bcc.n	31e44 <print_value+0x390>
   31e52:	e781      	b.n	31d58 <print_value+0x2a4>
   31e54:	4603      	mov	r3, r0
            *output_pointer++ = '\t';
   31e56:	2509      	movs	r5, #9
   31e58:	e7f6      	b.n	31e48 <print_value+0x394>
   31e5a:	bf00      	nop

00031e5c <print.constprop.0>:
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   31e5c:	b570      	push	{r4, r5, r6, lr}
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   31e5e:	4d23      	ldr	r5, [pc, #140]	; (31eec <print.constprop.0+0x90>)
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   31e60:	b08a      	sub	sp, #40	; 0x28
   31e62:	460e      	mov	r6, r1
    memset(buffer, 0, sizeof(buffer));
   31e64:	2224      	movs	r2, #36	; 0x24
   31e66:	2100      	movs	r1, #0
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   31e68:	4604      	mov	r4, r0
    memset(buffer, 0, sizeof(buffer));
   31e6a:	a801      	add	r0, sp, #4
   31e6c:	f00f faba 	bl	413e4 <memset>
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   31e70:	682b      	ldr	r3, [r5, #0]
   31e72:	f44f 7080 	mov.w	r0, #256	; 0x100
   31e76:	4798      	blx	r3
    buffer->length = default_buffer_size;
   31e78:	f44f 7280 	mov.w	r2, #256	; 0x100
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   31e7c:	4603      	mov	r3, r0
    buffer->format = format;
   31e7e:	9606      	str	r6, [sp, #24]
    buffer->hooks = *hooks;
   31e80:	ae0a      	add	r6, sp, #40	; 0x28
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   31e82:	9001      	str	r0, [sp, #4]
    buffer->length = default_buffer_size;
   31e84:	9202      	str	r2, [sp, #8]
    buffer->hooks = *hooks;
   31e86:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   31e8a:	e906 0007 	stmdb	r6, {r0, r1, r2}
    if (buffer->buffer == NULL)
   31e8e:	b17b      	cbz	r3, 31eb0 <print.constprop.0+0x54>
    if (!print_value(item, buffer))
   31e90:	4620      	mov	r0, r4
   31e92:	a901      	add	r1, sp, #4
   31e94:	f7ff fe0e 	bl	31ab4 <print_value>
   31e98:	b150      	cbz	r0, 31eb0 <print.constprop.0+0x54>
    update_offset(buffer);
   31e9a:	a801      	add	r0, sp, #4
   31e9c:	f00d fda5 	bl	3f9ea <update_offset>
    if (hooks->reallocate != NULL)
   31ea0:	68ae      	ldr	r6, [r5, #8]
   31ea2:	9903      	ldr	r1, [sp, #12]
   31ea4:	b15e      	cbz	r6, 31ebe <print.constprop.0+0x62>
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
   31ea6:	9801      	ldr	r0, [sp, #4]
   31ea8:	3101      	adds	r1, #1
   31eaa:	47b0      	blx	r6
        if (printed == NULL) {
   31eac:	4604      	mov	r4, r0
   31eae:	b9d0      	cbnz	r0, 31ee6 <print.constprop.0+0x8a>
    if (buffer->buffer != NULL)
   31eb0:	9c01      	ldr	r4, [sp, #4]
   31eb2:	b1c4      	cbz	r4, 31ee6 <print.constprop.0+0x8a>
        hooks->deallocate(buffer->buffer);
   31eb4:	4620      	mov	r0, r4
   31eb6:	686b      	ldr	r3, [r5, #4]
   31eb8:	4798      	blx	r3
    return NULL;
   31eba:	2400      	movs	r4, #0
   31ebc:	e013      	b.n	31ee6 <print.constprop.0+0x8a>
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
   31ebe:	682b      	ldr	r3, [r5, #0]
   31ec0:	1c48      	adds	r0, r1, #1
   31ec2:	4798      	blx	r3
        if (printed == NULL)
   31ec4:	4604      	mov	r4, r0
   31ec6:	2800      	cmp	r0, #0
   31ec8:	d0f2      	beq.n	31eb0 <print.constprop.0+0x54>
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
   31eca:	9a03      	ldr	r2, [sp, #12]
   31ecc:	9b02      	ldr	r3, [sp, #8]
   31ece:	3201      	adds	r2, #1
   31ed0:	429a      	cmp	r2, r3
   31ed2:	bf28      	it	cs
   31ed4:	461a      	movcs	r2, r3
   31ed6:	9901      	ldr	r1, [sp, #4]
   31ed8:	f00f fa64 	bl	413a4 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
   31edc:	9b03      	ldr	r3, [sp, #12]
   31ede:	54e6      	strb	r6, [r4, r3]
        hooks->deallocate(buffer->buffer);
   31ee0:	686b      	ldr	r3, [r5, #4]
   31ee2:	9801      	ldr	r0, [sp, #4]
   31ee4:	4798      	blx	r3
}
   31ee6:	4620      	mov	r0, r4
   31ee8:	b00a      	add	sp, #40	; 0x28
   31eea:	bd70      	pop	{r4, r5, r6, pc}
   31eec:	200146f0 	.word	0x200146f0

00031ef0 <cJSON_InitHooks>:
{
   31ef0:	b530      	push	{r4, r5, lr}
   31ef2:	4b0e      	ldr	r3, [pc, #56]	; (31f2c <cJSON_InitHooks+0x3c>)
   31ef4:	490e      	ldr	r1, [pc, #56]	; (31f30 <cJSON_InitHooks+0x40>)
   31ef6:	4a0f      	ldr	r2, [pc, #60]	; (31f34 <cJSON_InitHooks+0x44>)
    if (hooks == NULL)
   31ef8:	b920      	cbnz	r0, 31f04 <cJSON_InitHooks+0x14>
        global_hooks.deallocate = free;
   31efa:	e9c3 1200 	strd	r1, r2, [r3]
        global_hooks.reallocate = realloc;
   31efe:	4a0e      	ldr	r2, [pc, #56]	; (31f38 <cJSON_InitHooks+0x48>)
   31f00:	609a      	str	r2, [r3, #8]
   31f02:	e011      	b.n	31f28 <cJSON_InitHooks+0x38>
    if (hooks->malloc_fn != NULL)
   31f04:	6805      	ldr	r5, [r0, #0]
        global_hooks.allocate = hooks->malloc_fn;
   31f06:	2d00      	cmp	r5, #0
   31f08:	bf14      	ite	ne
   31f0a:	462c      	movne	r4, r5
   31f0c:	460c      	moveq	r4, r1
    if (hooks->free_fn != NULL)
   31f0e:	6845      	ldr	r5, [r0, #4]
        global_hooks.allocate = hooks->malloc_fn;
   31f10:	601c      	str	r4, [r3, #0]
        global_hooks.deallocate = hooks->free_fn;
   31f12:	2d00      	cmp	r5, #0
   31f14:	bf14      	ite	ne
   31f16:	4628      	movne	r0, r5
   31f18:	4610      	moveq	r0, r2
    global_hooks.reallocate = NULL;
   31f1a:	2500      	movs	r5, #0
    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
   31f1c:	428c      	cmp	r4, r1
        global_hooks.deallocate = hooks->free_fn;
   31f1e:	6058      	str	r0, [r3, #4]
    global_hooks.reallocate = NULL;
   31f20:	609d      	str	r5, [r3, #8]
    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
   31f22:	d101      	bne.n	31f28 <cJSON_InitHooks+0x38>
   31f24:	4290      	cmp	r0, r2
   31f26:	d0ea      	beq.n	31efe <cJSON_InitHooks+0xe>
}
   31f28:	bd30      	pop	{r4, r5, pc}
   31f2a:	bf00      	nop
   31f2c:	200146f0 	.word	0x200146f0
   31f30:	00039b9d 	.word	0x00039b9d
   31f34:	00039bad 	.word	0x00039bad
   31f38:	0003a625 	.word	0x0003a625

00031f3c <cJSON_Delete>:
{
   31f3c:	b570      	push	{r4, r5, r6, lr}
   31f3e:	4604      	mov	r4, r0
   31f40:	4d0f      	ldr	r5, [pc, #60]	; (31f80 <cJSON_Delete+0x44>)
    while (item != NULL)
   31f42:	b904      	cbnz	r4, 31f46 <cJSON_Delete+0xa>
}
   31f44:	bd70      	pop	{r4, r5, r6, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   31f46:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
   31f48:	6826      	ldr	r6, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   31f4a:	05d9      	lsls	r1, r3, #23
   31f4c:	d403      	bmi.n	31f56 <cJSON_Delete+0x1a>
   31f4e:	68a0      	ldr	r0, [r4, #8]
   31f50:	b968      	cbnz	r0, 31f6e <cJSON_Delete+0x32>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   31f52:	6920      	ldr	r0, [r4, #16]
   31f54:	b988      	cbnz	r0, 31f7a <cJSON_Delete+0x3e>
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   31f56:	68e3      	ldr	r3, [r4, #12]
   31f58:	059b      	lsls	r3, r3, #22
   31f5a:	d403      	bmi.n	31f64 <cJSON_Delete+0x28>
   31f5c:	6a20      	ldr	r0, [r4, #32]
   31f5e:	b108      	cbz	r0, 31f64 <cJSON_Delete+0x28>
            global_hooks.deallocate(item->string);
   31f60:	686b      	ldr	r3, [r5, #4]
   31f62:	4798      	blx	r3
        global_hooks.deallocate(item);
   31f64:	4620      	mov	r0, r4
   31f66:	686b      	ldr	r3, [r5, #4]
   31f68:	4798      	blx	r3
        item = next;
   31f6a:	4634      	mov	r4, r6
   31f6c:	e7e9      	b.n	31f42 <cJSON_Delete+0x6>
            cJSON_Delete(item->child);
   31f6e:	f7ff ffe5 	bl	31f3c <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   31f72:	68e3      	ldr	r3, [r4, #12]
   31f74:	05da      	lsls	r2, r3, #23
   31f76:	d5ec      	bpl.n	31f52 <cJSON_Delete+0x16>
   31f78:	e7ed      	b.n	31f56 <cJSON_Delete+0x1a>
            global_hooks.deallocate(item->valuestring);
   31f7a:	686b      	ldr	r3, [r5, #4]
   31f7c:	4798      	blx	r3
   31f7e:	e7ea      	b.n	31f56 <cJSON_Delete+0x1a>
   31f80:	200146f0 	.word	0x200146f0

00031f84 <cJSON_ParseWithLengthOpts>:
{
   31f84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   31f88:	4605      	mov	r5, r0
    global_error.json = NULL;
   31f8a:	f04f 0900 	mov.w	r9, #0
{
   31f8e:	b089      	sub	sp, #36	; 0x24
    global_error.json = NULL;
   31f90:	4f30      	ldr	r7, [pc, #192]	; (32054 <cJSON_ParseWithLengthOpts+0xd0>)
{
   31f92:	460c      	mov	r4, r1
   31f94:	4616      	mov	r6, r2
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
   31f96:	2100      	movs	r1, #0
   31f98:	221c      	movs	r2, #28
   31f9a:	a801      	add	r0, sp, #4
{
   31f9c:	4698      	mov	r8, r3
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
   31f9e:	f00f fa21 	bl	413e4 <memset>
    global_error.position = 0;
   31fa2:	e9c7 9900 	strd	r9, r9, [r7]
    if (value == NULL || 0 == buffer_length)
   31fa6:	2d00      	cmp	r5, #0
   31fa8:	d04a      	beq.n	32040 <cJSON_ParseWithLengthOpts+0xbc>
   31faa:	2c00      	cmp	r4, #0
   31fac:	d03d      	beq.n	3202a <cJSON_ParseWithLengthOpts+0xa6>
    buffer.hooks = global_hooks;
   31fae:	4b2a      	ldr	r3, [pc, #168]	; (32058 <cJSON_ParseWithLengthOpts+0xd4>)
    buffer.length = buffer_length; 
   31fb0:	e9cd 5401 	strd	r5, r4, [sp, #4]
    buffer.hooks = global_hooks;
   31fb4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   31fb8:	ab08      	add	r3, sp, #32
   31fba:	e903 0007 	stmdb	r3, {r0, r1, r2}
    item = cJSON_New_Item(&global_hooks);
   31fbe:	f00d fd76 	bl	3faae <cJSON_New_Item.isra.0>
    if (item == NULL) /* memory fail */
   31fc2:	4604      	mov	r4, r0
   31fc4:	2800      	cmp	r0, #0
   31fc6:	d030      	beq.n	3202a <cJSON_ParseWithLengthOpts+0xa6>
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
   31fc8:	9801      	ldr	r0, [sp, #4]
   31fca:	b128      	cbz	r0, 31fd8 <cJSON_ParseWithLengthOpts+0x54>
   31fcc:	9b03      	ldr	r3, [sp, #12]
   31fce:	b9e3      	cbnz	r3, 3200a <cJSON_ParseWithLengthOpts+0x86>
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   31fd0:	9b02      	ldr	r3, [sp, #8]
   31fd2:	2b04      	cmp	r3, #4
   31fd4:	d80f      	bhi.n	31ff6 <cJSON_ParseWithLengthOpts+0x72>
    return buffer;
   31fd6:	a801      	add	r0, sp, #4
    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
   31fd8:	f00d fce7 	bl	3f9aa <buffer_skip_whitespace>
   31fdc:	4601      	mov	r1, r0
   31fde:	4620      	mov	r0, r4
   31fe0:	f7ec f8fa 	bl	1e1d8 <parse_value>
   31fe4:	b1f0      	cbz	r0, 32024 <cJSON_ParseWithLengthOpts+0xa0>
    if (require_null_terminated)
   31fe6:	f1b8 0f00 	cmp.w	r8, #0
   31fea:	d110      	bne.n	3200e <cJSON_ParseWithLengthOpts+0x8a>
    if (return_parse_end)
   31fec:	bb56      	cbnz	r6, 32044 <cJSON_ParseWithLengthOpts+0xc0>
}
   31fee:	4620      	mov	r0, r4
   31ff0:	b009      	add	sp, #36	; 0x24
   31ff2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   31ff6:	2203      	movs	r2, #3
   31ff8:	4918      	ldr	r1, [pc, #96]	; (3205c <cJSON_ParseWithLengthOpts+0xd8>)
   31ffa:	f00f fbc6 	bl	4178a <strncmp>
   31ffe:	2800      	cmp	r0, #0
   32000:	d1e9      	bne.n	31fd6 <cJSON_ParseWithLengthOpts+0x52>
        buffer->offset += 3;
   32002:	9b03      	ldr	r3, [sp, #12]
   32004:	3303      	adds	r3, #3
   32006:	9303      	str	r3, [sp, #12]
   32008:	e7e5      	b.n	31fd6 <cJSON_ParseWithLengthOpts+0x52>
        return NULL;
   3200a:	4648      	mov	r0, r9
   3200c:	e7e4      	b.n	31fd8 <cJSON_ParseWithLengthOpts+0x54>
        buffer_skip_whitespace(&buffer);
   3200e:	a801      	add	r0, sp, #4
   32010:	f00d fccb 	bl	3f9aa <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
   32014:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   32018:	4293      	cmp	r3, r2
   3201a:	d203      	bcs.n	32024 <cJSON_ParseWithLengthOpts+0xa0>
   3201c:	9a01      	ldr	r2, [sp, #4]
   3201e:	5cd3      	ldrb	r3, [r2, r3]
   32020:	2b00      	cmp	r3, #0
   32022:	d0e3      	beq.n	31fec <cJSON_ParseWithLengthOpts+0x68>
        cJSON_Delete(item);
   32024:	4620      	mov	r0, r4
   32026:	f7ff ff89 	bl	31f3c <cJSON_Delete>
        if (buffer.offset < buffer.length)
   3202a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   3202e:	429a      	cmp	r2, r3
   32030:	d30d      	bcc.n	3204e <cJSON_ParseWithLengthOpts+0xca>
        else if (buffer.length > 0)
   32032:	b103      	cbz	r3, 32036 <cJSON_ParseWithLengthOpts+0xb2>
            local_error.position = buffer.length - 1;
   32034:	3b01      	subs	r3, #1
        if (return_parse_end != NULL)
   32036:	b10e      	cbz	r6, 3203c <cJSON_ParseWithLengthOpts+0xb8>
            *return_parse_end = (const char*)local_error.json + local_error.position;
   32038:	18ea      	adds	r2, r5, r3
   3203a:	6032      	str	r2, [r6, #0]
        global_error = local_error;
   3203c:	e9c7 5300 	strd	r5, r3, [r7]
    return NULL;
   32040:	2400      	movs	r4, #0
   32042:	e7d4      	b.n	31fee <cJSON_ParseWithLengthOpts+0x6a>
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
   32044:	9b01      	ldr	r3, [sp, #4]
   32046:	9a03      	ldr	r2, [sp, #12]
   32048:	4413      	add	r3, r2
   3204a:	6033      	str	r3, [r6, #0]
   3204c:	e7cf      	b.n	31fee <cJSON_ParseWithLengthOpts+0x6a>
   3204e:	4613      	mov	r3, r2
   32050:	e7f1      	b.n	32036 <cJSON_ParseWithLengthOpts+0xb2>
   32052:	bf00      	nop
   32054:	2001a410 	.word	0x2001a410
   32058:	200146f0 	.word	0x200146f0
   3205c:	0004b761 	.word	0x0004b761

00032060 <cJSON_CreateNull>:
{
   32060:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   32062:	4b04      	ldr	r3, [pc, #16]	; (32074 <cJSON_CreateNull+0x14>)
   32064:	6818      	ldr	r0, [r3, #0]
   32066:	f00d fd22 	bl	3faae <cJSON_New_Item.isra.0>
    if(item)
   3206a:	b108      	cbz	r0, 32070 <cJSON_CreateNull+0x10>
        item->type = cJSON_NULL;
   3206c:	2304      	movs	r3, #4
   3206e:	60c3      	str	r3, [r0, #12]
}
   32070:	bd08      	pop	{r3, pc}
   32072:	bf00      	nop
   32074:	200146f0 	.word	0x200146f0

00032078 <cJSON_CreateString>:

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
   32078:	b538      	push	{r3, r4, r5, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   3207a:	4b0a      	ldr	r3, [pc, #40]	; (320a4 <cJSON_CreateString+0x2c>)
{
   3207c:	4605      	mov	r5, r0
    cJSON *item = cJSON_New_Item(&global_hooks);
   3207e:	6818      	ldr	r0, [r3, #0]
   32080:	f00d fd15 	bl	3faae <cJSON_New_Item.isra.0>
    if(item)
   32084:	4604      	mov	r4, r0
   32086:	b158      	cbz	r0, 320a0 <cJSON_CreateString+0x28>
    {
        item->type = cJSON_String;
   32088:	2310      	movs	r3, #16
   3208a:	60c3      	str	r3, [r0, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
   3208c:	4628      	mov	r0, r5
   3208e:	f7ff fccf 	bl	31a30 <cJSON_strdup.constprop.0>
   32092:	4605      	mov	r5, r0
   32094:	6120      	str	r0, [r4, #16]
        if(!item->valuestring)
   32096:	b918      	cbnz	r0, 320a0 <cJSON_CreateString+0x28>
        {
            cJSON_Delete(item);
   32098:	4620      	mov	r0, r4
   3209a:	f7ff ff4f 	bl	31f3c <cJSON_Delete>
            return NULL;
   3209e:	462c      	mov	r4, r5
        }
    }

    return item;
}
   320a0:	4620      	mov	r0, r4
   320a2:	bd38      	pop	{r3, r4, r5, pc}
   320a4:	200146f0 	.word	0x200146f0

000320a8 <cJSON_CreateArray>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
{
   320a8:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   320aa:	4b04      	ldr	r3, [pc, #16]	; (320bc <cJSON_CreateArray+0x14>)
   320ac:	6818      	ldr	r0, [r3, #0]
   320ae:	f00d fcfe 	bl	3faae <cJSON_New_Item.isra.0>
    if(item)
   320b2:	b108      	cbz	r0, 320b8 <cJSON_CreateArray+0x10>
    {
        item->type=cJSON_Array;
   320b4:	2320      	movs	r3, #32
   320b6:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   320b8:	bd08      	pop	{r3, pc}
   320ba:	bf00      	nop
   320bc:	200146f0 	.word	0x200146f0

000320c0 <cJSON_CreateObject>:

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
   320c0:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   320c2:	4b04      	ldr	r3, [pc, #16]	; (320d4 <cJSON_CreateObject+0x14>)
   320c4:	6818      	ldr	r0, [r3, #0]
   320c6:	f00d fcf2 	bl	3faae <cJSON_New_Item.isra.0>
    if (item)
   320ca:	b108      	cbz	r0, 320d0 <cJSON_CreateObject+0x10>
    {
        item->type = cJSON_Object;
   320cc:	2340      	movs	r3, #64	; 0x40
   320ce:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   320d0:	bd08      	pop	{r3, pc}
   320d2:	bf00      	nop
   320d4:	200146f0 	.word	0x200146f0

000320d8 <cJSON_GetNumberValue>:
{
   320d8:	b508      	push	{r3, lr}
   320da:	4602      	mov	r2, r0
    if (!cJSON_IsNumber(item)) 
   320dc:	f00d fe20 	bl	3fd20 <cJSON_IsNumber>
   320e0:	b110      	cbz	r0, 320e8 <cJSON_GetNumberValue+0x10>
    return item->valuedouble;
   320e2:	e9d2 0106 	ldrd	r0, r1, [r2, #24]
}
   320e6:	bd08      	pop	{r3, pc}
        return (double) NAN;
   320e8:	2000      	movs	r0, #0
   320ea:	4901      	ldr	r1, [pc, #4]	; (320f0 <cJSON_GetNumberValue+0x18>)
   320ec:	e7fb      	b.n	320e6 <cJSON_GetNumberValue+0xe>
   320ee:	bf00      	nop
   320f0:	7ff80000 	.word	0x7ff80000

000320f4 <cJSON_free>:
    return global_hooks.allocate(size);
}

CJSON_PUBLIC(void) cJSON_free(void *object)
{
    global_hooks.deallocate(object);
   320f4:	4b01      	ldr	r3, [pc, #4]	; (320fc <cJSON_free+0x8>)
   320f6:	685b      	ldr	r3, [r3, #4]
   320f8:	4718      	bx	r3
   320fa:	bf00      	nop
   320fc:	200146f0 	.word	0x200146f0

00032100 <cJSON_Init>:
static void free_fn_hook(void *p_ptr) { k_free(p_ptr); }

/**@brief Initialize cJSON by assigning function hooks. */
void cJSON_Init(void)
{
	_cjson_hooks.malloc_fn = malloc_fn_hook;
   32100:	4803      	ldr	r0, [pc, #12]	; (32110 <cJSON_Init+0x10>)
   32102:	4b04      	ldr	r3, [pc, #16]	; (32114 <cJSON_Init+0x14>)
   32104:	6003      	str	r3, [r0, #0]
	_cjson_hooks.free_fn = free_fn_hook;
   32106:	4b04      	ldr	r3, [pc, #16]	; (32118 <cJSON_Init+0x18>)
   32108:	6043      	str	r3, [r0, #4]

	cJSON_InitHooks(&_cjson_hooks);
   3210a:	f7ff bef1 	b.w	31ef0 <cJSON_InitHooks>
   3210e:	bf00      	nop
   32110:	2001a418 	.word	0x2001a418
   32114:	0003fd59 	.word	0x0003fd59
   32118:	0003fd5d 	.word	0x0003fd5d

0003211c <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   3211c:	4a07      	ldr	r2, [pc, #28]	; (3213c <SystemInit+0x20>)
   3211e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   32122:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   32126:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   3212a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   3212e:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   32132:	4b03      	ldr	r3, [pc, #12]	; (32140 <SystemInit+0x24>)
   32134:	4a03      	ldr	r2, [pc, #12]	; (32144 <SystemInit+0x28>)
   32136:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   32138:	4770      	bx	lr
   3213a:	bf00      	nop
   3213c:	e000ed00 	.word	0xe000ed00
   32140:	200146fc 	.word	0x200146fc
   32144:	03d09000 	.word	0x03d09000

00032148 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   32148:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   3214a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   3214c:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   3214e:	fab2 f382 	clz	r3, r2
   32152:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
   32156:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
   32158:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
   3215a:	d010      	beq.n	3217e <nrfx_flag32_alloc+0x36>
        new_mask = prev_mask & ~NRFX_BIT(idx);
   3215c:	fa05 f303 	lsl.w	r3, r5, r3
   32160:	ea22 0303 	bic.w	r3, r2, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   32164:	e8d0 6fef 	ldaex	r6, [r0]
   32168:	4296      	cmp	r6, r2
   3216a:	d104      	bne.n	32176 <nrfx_flag32_alloc+0x2e>
   3216c:	e8c0 3fec 	stlex	ip, r3, [r0]
   32170:	f1bc 0f00 	cmp.w	ip, #0
   32174:	d1f6      	bne.n	32164 <nrfx_flag32_alloc+0x1c>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   32176:	d1e9      	bne.n	3214c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   32178:	4802      	ldr	r0, [pc, #8]	; (32184 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   3217a:	700c      	strb	r4, [r1, #0]
}
   3217c:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   3217e:	4802      	ldr	r0, [pc, #8]	; (32188 <nrfx_flag32_alloc+0x40>)
   32180:	e7fc      	b.n	3217c <nrfx_flag32_alloc+0x34>
   32182:	bf00      	nop
   32184:	0bad0000 	.word	0x0bad0000
   32188:	0bad0002 	.word	0x0bad0002

0003218c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   3218c:	6803      	ldr	r3, [r0, #0]
{
   3218e:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   32190:	40cb      	lsrs	r3, r1
   32192:	07db      	lsls	r3, r3, #31
   32194:	d411      	bmi.n	321ba <nrfx_flag32_free+0x2e>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   32196:	2301      	movs	r3, #1
   32198:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   3219c:	6803      	ldr	r3, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   3219e:	ea41 0203 	orr.w	r2, r1, r3
   321a2:	e8d0 4fef 	ldaex	r4, [r0]
   321a6:	429c      	cmp	r4, r3
   321a8:	d104      	bne.n	321b4 <nrfx_flag32_free+0x28>
   321aa:	e8c0 2fec 	stlex	ip, r2, [r0]
   321ae:	f1bc 0f00 	cmp.w	ip, #0
   321b2:	d1f6      	bne.n	321a2 <nrfx_flag32_free+0x16>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   321b4:	d1f2      	bne.n	3219c <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   321b6:	4802      	ldr	r0, [pc, #8]	; (321c0 <nrfx_flag32_free+0x34>)
}
   321b8:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   321ba:	4802      	ldr	r0, [pc, #8]	; (321c4 <nrfx_flag32_free+0x38>)
   321bc:	e7fc      	b.n	321b8 <nrfx_flag32_free+0x2c>
   321be:	bf00      	nop
   321c0:	0bad0000 	.word	0x0bad0000
   321c4:	0bad0004 	.word	0x0bad0004

000321c8 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   321c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
   321ca:	4604      	mov	r4, r0
   321cc:	b168      	cbz	r0, 321ea <clock_stop+0x22>
   321ce:	2801      	cmp	r0, #1
   321d0:	d02e      	beq.n	32230 <clock_stop+0x68>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   321d2:	492c      	ldr	r1, [pc, #176]	; (32284 <clock_stop+0xbc>)
   321d4:	482c      	ldr	r0, [pc, #176]	; (32288 <clock_stop+0xc0>)
   321d6:	22d8      	movs	r2, #216	; 0xd8
   321d8:	f00a fc30 	bl	3ca3c <assert_print>
   321dc:	21d8      	movs	r1, #216	; 0xd8
   321de:	4829      	ldr	r0, [pc, #164]	; (32284 <clock_stop+0xbc>)
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   321e0:	b003      	add	sp, #12
   321e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            NRFX_ASSERT(0);
   321e6:	f00a bc22 	b.w	3ca2e <assert_post_action>
    p_reg->INTENCLR = mask;
   321ea:	2202      	movs	r2, #2
   321ec:	4b27      	ldr	r3, [pc, #156]	; (3228c <clock_stop+0xc4>)
   321ee:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   321f2:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   321f6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   321fa:	2201      	movs	r2, #1
   321fc:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   321fe:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   32200:	429c      	cmp	r4, r3
   32202:	bf18      	it	ne
   32204:	2500      	movne	r5, #0
   32206:	f242 7710 	movw	r7, #10000	; 0x2710
   3220a:	4e20      	ldr	r6, [pc, #128]	; (3228c <clock_stop+0xc4>)
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   3220c:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   32210:	bf08      	it	eq
   32212:	f10d 0507 	addeq.w	r5, sp, #7
    switch (domain)
   32216:	b1ac      	cbz	r4, 32244 <clock_stop+0x7c>
   32218:	2c01      	cmp	r4, #1
   3221a:	d029      	beq.n	32270 <clock_stop+0xa8>
            NRFX_ASSERT(0);
   3221c:	491c      	ldr	r1, [pc, #112]	; (32290 <clock_stop+0xc8>)
   3221e:	481a      	ldr	r0, [pc, #104]	; (32288 <clock_stop+0xc0>)
   32220:	f44f 724f 	mov.w	r2, #828	; 0x33c
   32224:	f00a fc0a 	bl	3ca3c <assert_print>
   32228:	f44f 714f 	mov.w	r1, #828	; 0x33c
   3222c:	4818      	ldr	r0, [pc, #96]	; (32290 <clock_stop+0xc8>)
   3222e:	e7d7      	b.n	321e0 <clock_stop+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32230:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   32232:	4b16      	ldr	r3, [pc, #88]	; (3228c <clock_stop+0xc4>)
   32234:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32238:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   3223c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   32240:	6058      	str	r0, [r3, #4]
}
   32242:	e7dc      	b.n	321fe <clock_stop+0x36>
            if (p_clk_src != NULL)
   32244:	b125      	cbz	r5, 32250 <clock_stop+0x88>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   32246:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   3224a:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   3224e:	702b      	strb	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   32250:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   32254:	03db      	lsls	r3, r3, #15
   32256:	d509      	bpl.n	3226c <clock_stop+0xa4>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   32258:	b11d      	cbz	r5, 32262 <clock_stop+0x9a>
   3225a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   3225e:	2b01      	cmp	r3, #1
   32260:	d104      	bne.n	3226c <clock_stop+0xa4>
   32262:	2001      	movs	r0, #1
   32264:	f00d fd7f 	bl	3fd66 <nrfx_busy_wait>
   32268:	3f01      	subs	r7, #1
   3226a:	d1d4      	bne.n	32216 <clock_stop+0x4e>
}
   3226c:	b003      	add	sp, #12
   3226e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (p_clk_src != NULL)
   32270:	b125      	cbz	r5, 3227c <clock_stop+0xb4>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   32272:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   32276:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   3227a:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   3227c:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   32280:	e7e8      	b.n	32254 <clock_stop+0x8c>
   32282:	bf00      	nop
   32284:	0004b765 	.word	0x0004b765
   32288:	00043ff2 	.word	0x00043ff2
   3228c:	40005000 	.word	0x40005000
   32290:	0004b7a2 	.word	0x0004b7a2

00032294 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   32294:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   32296:	4604      	mov	r4, r0
   32298:	b950      	cbnz	r0, 322b0 <nrfx_clock_init+0x1c>
   3229a:	490a      	ldr	r1, [pc, #40]	; (322c4 <nrfx_clock_init+0x30>)
   3229c:	480a      	ldr	r0, [pc, #40]	; (322c8 <nrfx_clock_init+0x34>)
   3229e:	f240 1215 	movw	r2, #277	; 0x115
   322a2:	f00a fbcb 	bl	3ca3c <assert_print>
   322a6:	f240 1115 	movw	r1, #277	; 0x115
   322aa:	4806      	ldr	r0, [pc, #24]	; (322c4 <nrfx_clock_init+0x30>)
   322ac:	f00a fbbf 	bl	3ca2e <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   322b0:	4b06      	ldr	r3, [pc, #24]	; (322cc <nrfx_clock_init+0x38>)
   322b2:	791a      	ldrb	r2, [r3, #4]
   322b4:	b922      	cbnz	r2, 322c0 <nrfx_clock_init+0x2c>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   322b6:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   322b8:	4805      	ldr	r0, [pc, #20]	; (322d0 <nrfx_clock_init+0x3c>)
        m_clock_cb.event_handler = event_handler;
   322ba:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   322bc:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   322be:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   322c0:	4804      	ldr	r0, [pc, #16]	; (322d4 <nrfx_clock_init+0x40>)
    return err_code;
   322c2:	e7fc      	b.n	322be <nrfx_clock_init+0x2a>
   322c4:	0004b765 	.word	0x0004b765
   322c8:	00043ff2 	.word	0x00043ff2
   322cc:	2001a420 	.word	0x2001a420
   322d0:	0bad0000 	.word	0x0bad0000
   322d4:	0bad000c 	.word	0x0bad000c

000322d8 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   322d8:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   322da:	4b0d      	ldr	r3, [pc, #52]	; (32310 <nrfx_clock_enable+0x38>)
   322dc:	791b      	ldrb	r3, [r3, #4]
   322de:	b953      	cbnz	r3, 322f6 <nrfx_clock_enable+0x1e>
   322e0:	490c      	ldr	r1, [pc, #48]	; (32314 <nrfx_clock_enable+0x3c>)
   322e2:	480d      	ldr	r0, [pc, #52]	; (32318 <nrfx_clock_enable+0x40>)
   322e4:	f44f 7297 	mov.w	r2, #302	; 0x12e
   322e8:	f00a fba8 	bl	3ca3c <assert_print>
   322ec:	f44f 7197 	mov.w	r1, #302	; 0x12e
   322f0:	4808      	ldr	r0, [pc, #32]	; (32314 <nrfx_clock_enable+0x3c>)
   322f2:	f00a fb9c 	bl	3ca2e <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   322f6:	2005      	movs	r0, #5
   322f8:	f7f0 fc40 	bl	22b7c <arch_irq_is_enabled>
   322fc:	b910      	cbnz	r0, 32304 <nrfx_clock_enable+0x2c>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   322fe:	2005      	movs	r0, #5
   32300:	f7f0 fc18 	bl	22b34 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   32304:	2201      	movs	r2, #1
   32306:	4b05      	ldr	r3, [pc, #20]	; (3231c <nrfx_clock_enable+0x44>)
   32308:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   3230c:	bd08      	pop	{r3, pc}
   3230e:	bf00      	nop
   32310:	2001a420 	.word	0x2001a420
   32314:	0004b765 	.word	0x0004b765
   32318:	00043ff2 	.word	0x00043ff2
   3231c:	40005000 	.word	0x40005000

00032320 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   32320:	4b2c      	ldr	r3, [pc, #176]	; (323d4 <nrfx_clock_start+0xb4>)
{
   32322:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   32324:	791b      	ldrb	r3, [r3, #4]
{
   32326:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   32328:	b953      	cbnz	r3, 32340 <nrfx_clock_start+0x20>
   3232a:	492b      	ldr	r1, [pc, #172]	; (323d8 <nrfx_clock_start+0xb8>)
   3232c:	482b      	ldr	r0, [pc, #172]	; (323dc <nrfx_clock_start+0xbc>)
   3232e:	f44f 72b4 	mov.w	r2, #360	; 0x168
   32332:	f00a fb83 	bl	3ca3c <assert_print>
   32336:	f44f 71b4 	mov.w	r1, #360	; 0x168
   3233a:	4827      	ldr	r0, [pc, #156]	; (323d8 <nrfx_clock_start+0xb8>)
   3233c:	f00a fb77 	bl	3ca2e <assert_post_action>
    switch (domain)
   32340:	b174      	cbz	r4, 32360 <nrfx_clock_start+0x40>
   32342:	2c01      	cmp	r4, #1
   32344:	d03b      	beq.n	323be <nrfx_clock_start+0x9e>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   32346:	4924      	ldr	r1, [pc, #144]	; (323d8 <nrfx_clock_start+0xb8>)
   32348:	4824      	ldr	r0, [pc, #144]	; (323dc <nrfx_clock_start+0xbc>)
   3234a:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
   3234e:	f00a fb75 	bl	3ca3c <assert_print>
            break;
    }
}
   32352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
   32356:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   3235a:	481f      	ldr	r0, [pc, #124]	; (323d8 <nrfx_clock_start+0xb8>)
   3235c:	f00a bb67 	b.w	3ca2e <assert_post_action>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   32360:	4a1f      	ldr	r2, [pc, #124]	; (323e0 <nrfx_clock_start+0xc0>)
   32362:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   32366:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   3236a:	03c9      	lsls	r1, r1, #15
   3236c:	d412      	bmi.n	32394 <nrfx_clock_start+0x74>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   3236e:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   32372:	07db      	lsls	r3, r3, #31
   32374:	d418      	bmi.n	323a8 <nrfx_clock_start+0x88>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   32376:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
   32378:	4a19      	ldr	r2, [pc, #100]	; (323e0 <nrfx_clock_start+0xc0>)
   3237a:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3237e:	2300      	movs	r3, #0
   32380:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   32384:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   32388:	2302      	movs	r3, #2
   3238a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3238e:	2301      	movs	r3, #1
   32390:	6093      	str	r3, [r2, #8]
}
   32392:	bd10      	pop	{r4, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   32394:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   32398:	2b02      	cmp	r3, #2
   3239a:	d0ed      	beq.n	32378 <nrfx_clock_start+0x58>
    if (!is_correct_clk)
   3239c:	2b01      	cmp	r3, #1
   3239e:	d0eb      	beq.n	32378 <nrfx_clock_start+0x58>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   323a0:	2000      	movs	r0, #0
   323a2:	f7ff ff11 	bl	321c8 <clock_stop>
   323a6:	e7e6      	b.n	32376 <nrfx_clock_start+0x56>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   323a8:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
   323ac:	f003 0303 	and.w	r3, r3, #3
    if (!is_correct_clk)
   323b0:	3b01      	subs	r3, #1
   323b2:	2b01      	cmp	r3, #1
   323b4:	d8f4      	bhi.n	323a0 <nrfx_clock_start+0x80>
    p_reg->INTENSET = mask;
   323b6:	2302      	movs	r3, #2
   323b8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
   323bc:	e7e9      	b.n	32392 <nrfx_clock_start+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   323be:	2200      	movs	r2, #0
   323c0:	4b07      	ldr	r3, [pc, #28]	; (323e0 <nrfx_clock_start+0xc0>)
   323c2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   323c6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   323ca:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   323ce:	601c      	str	r4, [r3, #0]
}
   323d0:	e7df      	b.n	32392 <nrfx_clock_start+0x72>
   323d2:	bf00      	nop
   323d4:	2001a420 	.word	0x2001a420
   323d8:	0004b765 	.word	0x0004b765
   323dc:	00043ff2 	.word	0x00043ff2
   323e0:	40005000 	.word	0x40005000

000323e4 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   323e4:	4b0a      	ldr	r3, [pc, #40]	; (32410 <nrfx_clock_stop+0x2c>)
{
   323e6:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   323e8:	791b      	ldrb	r3, [r3, #4]
{
   323ea:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   323ec:	b953      	cbnz	r3, 32404 <nrfx_clock_stop+0x20>
   323ee:	4909      	ldr	r1, [pc, #36]	; (32414 <nrfx_clock_stop+0x30>)
   323f0:	4809      	ldr	r0, [pc, #36]	; (32418 <nrfx_clock_stop+0x34>)
   323f2:	f240 12ad 	movw	r2, #429	; 0x1ad
   323f6:	f00a fb21 	bl	3ca3c <assert_print>
   323fa:	f240 11ad 	movw	r1, #429	; 0x1ad
   323fe:	4805      	ldr	r0, [pc, #20]	; (32414 <nrfx_clock_stop+0x30>)
   32400:	f00a fb15 	bl	3ca2e <assert_post_action>
    clock_stop(domain);
   32404:	4620      	mov	r0, r4
}
   32406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    clock_stop(domain);
   3240a:	f7ff bedd 	b.w	321c8 <clock_stop>
   3240e:	bf00      	nop
   32410:	2001a420 	.word	0x2001a420
   32414:	0004b765 	.word	0x0004b765
   32418:	00043ff2 	.word	0x00043ff2

0003241c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   3241c:	4b17      	ldr	r3, [pc, #92]	; (3247c <nrfx_power_clock_irq_handler+0x60>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   3241e:	b510      	push	{r4, lr}
   32420:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   32424:	b152      	cbz	r2, 3243c <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32426:	2000      	movs	r0, #0
   32428:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   3242c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   32430:	2201      	movs	r2, #1
   32432:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   32436:	4b12      	ldr	r3, [pc, #72]	; (32480 <nrfx_power_clock_irq_handler+0x64>)
   32438:	681b      	ldr	r3, [r3, #0]
   3243a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   3243c:	4b0f      	ldr	r3, [pc, #60]	; (3247c <nrfx_power_clock_irq_handler+0x60>)
   3243e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   32442:	b18a      	cbz	r2, 32468 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32444:	2200      	movs	r2, #0
   32446:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   3244a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   3244e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   32452:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   32456:	f002 0203 	and.w	r2, r2, #3
   3245a:	2a01      	cmp	r2, #1
   3245c:	f04f 0102 	mov.w	r1, #2
   32460:	d103      	bne.n	3246a <nrfx_power_clock_irq_handler+0x4e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   32462:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   32466:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   32468:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   3246a:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   3246e:	4b04      	ldr	r3, [pc, #16]	; (32480 <nrfx_power_clock_irq_handler+0x64>)
   32470:	2001      	movs	r0, #1
}
   32472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   32476:	681b      	ldr	r3, [r3, #0]
   32478:	4718      	bx	r3
   3247a:	bf00      	nop
   3247c:	40005000 	.word	0x40005000
   32480:	2001a420 	.word	0x2001a420

00032484 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   32484:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   32486:	4801      	ldr	r0, [pc, #4]	; (3248c <nrfx_dppi_channel_alloc+0x8>)
   32488:	f7ff be5e 	b.w	32148 <nrfx_flag32_alloc>
   3248c:	20014700 	.word	0x20014700

00032490 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   32490:	4b03      	ldr	r3, [pc, #12]	; (324a0 <pin_in_use_by_te+0x10>)
   32492:	3008      	adds	r0, #8
   32494:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   32498:	f3c0 1040 	ubfx	r0, r0, #5, #1
   3249c:	4770      	bx	lr
   3249e:	bf00      	nop
   324a0:	20014704 	.word	0x20014704

000324a4 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   324a4:	4b04      	ldr	r3, [pc, #16]	; (324b8 <pin_has_trigger+0x14>)
   324a6:	3008      	adds	r0, #8
   324a8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   324ac:	f010 001c 	ands.w	r0, r0, #28
   324b0:	bf18      	it	ne
   324b2:	2001      	movne	r0, #1
   324b4:	4770      	bx	lr
   324b6:	bf00      	nop
   324b8:	20014704 	.word	0x20014704

000324bc <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   324bc:	4b03      	ldr	r3, [pc, #12]	; (324cc <pin_is_output+0x10>)
   324be:	3008      	adds	r0, #8
   324c0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   324c4:	f3c0 0040 	ubfx	r0, r0, #1, #1
   324c8:	4770      	bx	lr
   324ca:	bf00      	nop
   324cc:	20014704 	.word	0x20014704

000324d0 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   324d0:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   324d2:	4c0d      	ldr	r4, [pc, #52]	; (32508 <call_handler+0x38>)
   324d4:	f100 0308 	add.w	r3, r0, #8
   324d8:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   324dc:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   324de:	05da      	lsls	r2, r3, #23
{
   324e0:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   324e2:	d507      	bpl.n	324f4 <call_handler+0x24>
   324e4:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   324e8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   324ec:	6852      	ldr	r2, [r2, #4]
   324ee:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   324f2:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   324f4:	68a3      	ldr	r3, [r4, #8]
   324f6:	b12b      	cbz	r3, 32504 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   324f8:	4631      	mov	r1, r6
   324fa:	4628      	mov	r0, r5
   324fc:	68e2      	ldr	r2, [r4, #12]
    }
}
   324fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   32502:	4718      	bx	r3
}
   32504:	bd70      	pop	{r4, r5, r6, pc}
   32506:	bf00      	nop
   32508:	20014704 	.word	0x20014704

0003250c <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   3250c:	4a19      	ldr	r2, [pc, #100]	; (32574 <release_handler+0x68>)
   3250e:	3008      	adds	r0, #8
   32510:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
{
   32514:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   32516:	05d9      	lsls	r1, r3, #23
   32518:	d51d      	bpl.n	32556 <release_handler+0x4a>
   3251a:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   3251e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   32522:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   32526:	2000      	movs	r0, #0
   32528:	f102 0410 	add.w	r4, r2, #16
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   3252c:	f834 3b02 	ldrh.w	r3, [r4], #2
   32530:	f413 7f80 	tst.w	r3, #256	; 0x100
   32534:	d003      	beq.n	3253e <release_handler+0x32>
   32536:	f3c3 2343 	ubfx	r3, r3, #9, #4
   3253a:	4299      	cmp	r1, r3
   3253c:	d00b      	beq.n	32556 <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   3253e:	3001      	adds	r0, #1
   32540:	2820      	cmp	r0, #32
   32542:	d1f3      	bne.n	3252c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   32544:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   32546:	480c      	ldr	r0, [pc, #48]	; (32578 <release_handler+0x6c>)
        m_cb.handlers[handler_id].handler = NULL;
   32548:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   3254c:	f7ff fe1e 	bl	3218c <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   32550:	4b0a      	ldr	r3, [pc, #40]	; (3257c <release_handler+0x70>)
   32552:	4298      	cmp	r0, r3
   32554:	d100      	bne.n	32558 <release_handler+0x4c>
}
   32556:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   32558:	4909      	ldr	r1, [pc, #36]	; (32580 <release_handler+0x74>)
   3255a:	480a      	ldr	r0, [pc, #40]	; (32584 <release_handler+0x78>)
   3255c:	f44f 7299 	mov.w	r2, #306	; 0x132
   32560:	f00a fa6c 	bl	3ca3c <assert_print>
}
   32564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   32568:	f44f 7199 	mov.w	r1, #306	; 0x132
   3256c:	4804      	ldr	r0, [pc, #16]	; (32580 <release_handler+0x74>)
   3256e:	f00a ba5e 	b.w	3ca2e <assert_post_action>
   32572:	bf00      	nop
   32574:	20014704 	.word	0x20014704
   32578:	20014758 	.word	0x20014758
   3257c:	0bad0000 	.word	0x0bad0000
   32580:	0004b7d6 	.word	0x0004b7d6
   32584:	00043ff2 	.word	0x00043ff2

00032588 <pin_handler_trigger_uninit>:
{
   32588:	b538      	push	{r3, r4, r5, lr}
   3258a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   3258c:	f7ff ff80 	bl	32490 <pin_in_use_by_te>
   32590:	4c0b      	ldr	r4, [pc, #44]	; (325c0 <pin_handler_trigger_uninit+0x38>)
   32592:	f102 0508 	add.w	r5, r2, #8
   32596:	b160      	cbz	r0, 325b2 <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   32598:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   3259a:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   3259e:	0b5b      	lsrs	r3, r3, #13
   325a0:	009b      	lsls	r3, r3, #2
   325a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   325a6:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   325aa:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   325ae:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   325b2:	4610      	mov	r0, r2
   325b4:	f7ff ffaa 	bl	3250c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   325b8:	2300      	movs	r3, #0
   325ba:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   325be:	bd38      	pop	{r3, r4, r5, pc}
   325c0:	20014704 	.word	0x20014704

000325c4 <nrf_gpio_pin_port_decode>:
{
   325c4:	b510      	push	{r4, lr}
   325c6:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   325c8:	6800      	ldr	r0, [r0, #0]
   325ca:	f00d fbce 	bl	3fd6a <nrf_gpio_pin_present_check>
   325ce:	b950      	cbnz	r0, 325e6 <nrf_gpio_pin_port_decode+0x22>
   325d0:	490e      	ldr	r1, [pc, #56]	; (3260c <nrf_gpio_pin_port_decode+0x48>)
   325d2:	480f      	ldr	r0, [pc, #60]	; (32610 <nrf_gpio_pin_port_decode+0x4c>)
   325d4:	f240 2229 	movw	r2, #553	; 0x229
   325d8:	f00a fa30 	bl	3ca3c <assert_print>
   325dc:	f240 2129 	movw	r1, #553	; 0x229
   325e0:	480a      	ldr	r0, [pc, #40]	; (3260c <nrf_gpio_pin_port_decode+0x48>)
   325e2:	f00a fa24 	bl	3ca2e <assert_post_action>
    uint32_t pin_number = *p_pin;
   325e6:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   325e8:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   325ec:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   325ee:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   325f0:	d00a      	beq.n	32608 <nrf_gpio_pin_port_decode+0x44>
            NRFX_ASSERT(0);
   325f2:	4906      	ldr	r1, [pc, #24]	; (3260c <nrf_gpio_pin_port_decode+0x48>)
   325f4:	4806      	ldr	r0, [pc, #24]	; (32610 <nrf_gpio_pin_port_decode+0x4c>)
   325f6:	f240 222e 	movw	r2, #558	; 0x22e
   325fa:	f00a fa1f 	bl	3ca3c <assert_print>
   325fe:	f240 212e 	movw	r1, #558	; 0x22e
   32602:	4802      	ldr	r0, [pc, #8]	; (3260c <nrf_gpio_pin_port_decode+0x48>)
   32604:	f00a fa13 	bl	3ca2e <assert_post_action>
}
   32608:	4802      	ldr	r0, [pc, #8]	; (32614 <nrf_gpio_pin_port_decode+0x50>)
   3260a:	bd10      	pop	{r4, pc}
   3260c:	00044bd5 	.word	0x00044bd5
   32610:	00043ff2 	.word	0x00043ff2
   32614:	40842500 	.word	0x40842500

00032618 <nrfx_gpiote_input_configure>:
{
   32618:	b5f0      	push	{r4, r5, r6, r7, lr}
   3261a:	4604      	mov	r4, r0
   3261c:	4617      	mov	r7, r2
   3261e:	461d      	mov	r5, r3
   32620:	b085      	sub	sp, #20
    if (p_input_config)
   32622:	b1f1      	cbz	r1, 32662 <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
   32624:	f00d fbad 	bl	3fd82 <pin_is_task_output>
   32628:	b110      	cbz	r0, 32630 <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
   3262a:	484d      	ldr	r0, [pc, #308]	; (32760 <nrfx_gpiote_input_configure+0x148>)
}
   3262c:	b005      	add	sp, #20
   3262e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   32630:	460b      	mov	r3, r1
   32632:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   32636:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   3263a:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   3263e:	f10d 020f 	add.w	r2, sp, #15
   32642:	f10d 010e 	add.w	r1, sp, #14
   32646:	4620      	mov	r0, r4
   32648:	f00d fbaa 	bl	3fda0 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   3264c:	4a45      	ldr	r2, [pc, #276]	; (32764 <nrfx_gpiote_input_configure+0x14c>)
   3264e:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   32652:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   32656:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   3265a:	f043 0301 	orr.w	r3, r3, #1
   3265e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   32662:	b197      	cbz	r7, 3268a <nrfx_gpiote_input_configure+0x72>
        if (pin_is_output(pin))
   32664:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   32666:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   32668:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
   3266a:	f7ff ff27 	bl	324bc <pin_is_output>
   3266e:	b180      	cbz	r0, 32692 <nrfx_gpiote_input_configure+0x7a>
            if (use_evt)
   32670:	2a00      	cmp	r2, #0
   32672:	d1da      	bne.n	3262a <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   32674:	4a3b      	ldr	r2, [pc, #236]	; (32764 <nrfx_gpiote_input_configure+0x14c>)
   32676:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   3267a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   3267e:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   32682:	ea43 0686 	orr.w	r6, r3, r6, lsl #2
   32686:	f822 6011 	strh.w	r6, [r2, r1, lsl #1]
    if (p_handler_config)
   3268a:	2d00      	cmp	r5, #0
   3268c:	d13e      	bne.n	3270c <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
   3268e:	4836      	ldr	r0, [pc, #216]	; (32768 <nrfx_gpiote_input_configure+0x150>)
   32690:	e7cc      	b.n	3262c <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   32692:	4834      	ldr	r0, [pc, #208]	; (32764 <nrfx_gpiote_input_configure+0x14c>)
   32694:	f104 0708 	add.w	r7, r4, #8
   32698:	f830 1017 	ldrh.w	r1, [r0, r7, lsl #1]
   3269c:	f021 0120 	bic.w	r1, r1, #32
   326a0:	04c9      	lsls	r1, r1, #19
   326a2:	0cc9      	lsrs	r1, r1, #19
   326a4:	f820 1017 	strh.w	r1, [r0, r7, lsl #1]
            if (use_evt)
   326a8:	2a00      	cmp	r2, #0
   326aa:	d0e3      	beq.n	32674 <nrfx_gpiote_input_configure+0x5c>
                if (!edge)
   326ac:	2e03      	cmp	r6, #3
   326ae:	d8bc      	bhi.n	3262a <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
   326b0:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   326b4:	4662      	mov	r2, ip
   326b6:	0092      	lsls	r2, r2, #2
   326b8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   326bc:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   326c0:	b926      	cbnz	r6, 326cc <nrfx_gpiote_input_configure+0xb4>
    p_reg->CONFIG[idx] = 0;
   326c2:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   326c6:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
#endif
}
   326ca:	e7d3      	b.n	32674 <nrfx_gpiote_input_configure+0x5c>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   326cc:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   326d0:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
   326d4:	f023 0303 	bic.w	r3, r3, #3
   326d8:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   326dc:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   326e0:	f041 0120 	orr.w	r1, r1, #32
   326e4:	f423 3347 	bic.w	r3, r3, #203776	; 0x31c00
   326e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   326ec:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   326f0:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   326f4:	0223      	lsls	r3, r4, #8
   326f6:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
   326fa:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
   326fe:	ea43 030e 	orr.w	r3, r3, lr
   32702:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   32706:	f820 1017 	strh.w	r1, [r0, r7, lsl #1]
   3270a:	e7b3      	b.n	32674 <nrfx_gpiote_input_configure+0x5c>
    release_handler(pin);
   3270c:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   3270e:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   32712:	f7ff fefb 	bl	3250c <release_handler>
    if (!handler)
   32716:	2e00      	cmp	r6, #0
   32718:	d0b9      	beq.n	3268e <nrfx_gpiote_input_configure+0x76>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   3271a:	4d12      	ldr	r5, [pc, #72]	; (32764 <nrfx_gpiote_input_configure+0x14c>)
   3271c:	682b      	ldr	r3, [r5, #0]
   3271e:	429e      	cmp	r6, r3
   32720:	d104      	bne.n	3272c <nrfx_gpiote_input_configure+0x114>
   32722:	686b      	ldr	r3, [r5, #4]
   32724:	429f      	cmp	r7, r3
   32726:	d101      	bne.n	3272c <nrfx_gpiote_input_configure+0x114>
   32728:	2200      	movs	r2, #0
   3272a:	e00a      	b.n	32742 <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   3272c:	480f      	ldr	r0, [pc, #60]	; (3276c <nrfx_gpiote_input_configure+0x154>)
   3272e:	f10d 010f 	add.w	r1, sp, #15
   32732:	f7ff fd09 	bl	32148 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   32736:	4b0c      	ldr	r3, [pc, #48]	; (32768 <nrfx_gpiote_input_configure+0x150>)
   32738:	4298      	cmp	r0, r3
   3273a:	f47f af77 	bne.w	3262c <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
   3273e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
   32742:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   32746:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   32748:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   3274a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   3274e:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   32752:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   32756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   3275a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   3275e:	e796      	b.n	3268e <nrfx_gpiote_input_configure+0x76>
   32760:	0bad0004 	.word	0x0bad0004
   32764:	20014704 	.word	0x20014704
   32768:	0bad0000 	.word	0x0bad0000
   3276c:	20014758 	.word	0x20014758

00032770 <nrfx_gpiote_output_configure>:
{
   32770:	b5f0      	push	{r4, r5, r6, r7, lr}
   32772:	4604      	mov	r4, r0
   32774:	4615      	mov	r5, r2
   32776:	b085      	sub	sp, #20
    if (p_config)
   32778:	b321      	cbz	r1, 327c4 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
   3277a:	f7ff fe9f 	bl	324bc <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   3277e:	b920      	cbnz	r0, 3278a <nrfx_gpiote_output_configure+0x1a>
   32780:	4620      	mov	r0, r4
   32782:	f7ff fe85 	bl	32490 <pin_in_use_by_te>
   32786:	2800      	cmp	r0, #0
   32788:	d161      	bne.n	3284e <nrfx_gpiote_output_configure+0xde>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   3278a:	4620      	mov	r0, r4
   3278c:	f7ff fe8a 	bl	324a4 <pin_has_trigger>
   32790:	b110      	cbz	r0, 32798 <nrfx_gpiote_output_configure+0x28>
   32792:	784b      	ldrb	r3, [r1, #1]
   32794:	2b01      	cmp	r3, #1
   32796:	d05a      	beq.n	3284e <nrfx_gpiote_output_configure+0xde>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   32798:	2301      	movs	r3, #1
   3279a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   3279e:	2300      	movs	r3, #0
   327a0:	1c4a      	adds	r2, r1, #1
   327a2:	e9cd 1300 	strd	r1, r3, [sp]
   327a6:	4620      	mov	r0, r4
   327a8:	1c8b      	adds	r3, r1, #2
   327aa:	f10d 010f 	add.w	r1, sp, #15
   327ae:	f00d faf7 	bl	3fda0 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   327b2:	4a28      	ldr	r2, [pc, #160]	; (32854 <nrfx_gpiote_output_configure+0xe4>)
   327b4:	f104 0108 	add.w	r1, r4, #8
   327b8:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   327bc:	f043 0303 	orr.w	r3, r3, #3
   327c0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   327c4:	b915      	cbnz	r5, 327cc <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
   327c6:	4824      	ldr	r0, [pc, #144]	; (32858 <nrfx_gpiote_output_configure+0xe8>)
}
   327c8:	b005      	add	sp, #20
   327ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
   327cc:	4620      	mov	r0, r4
   327ce:	f7ff fe75 	bl	324bc <pin_is_output>
        if (pin_is_input(pin))
   327d2:	2800      	cmp	r0, #0
   327d4:	d03b      	beq.n	3284e <nrfx_gpiote_output_configure+0xde>
        uint32_t ch = p_task_config->task_ch;
   327d6:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   327da:	2300      	movs	r3, #0
   327dc:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   327de:	4e1d      	ldr	r6, [pc, #116]	; (32854 <nrfx_gpiote_output_configure+0xe4>)
   327e0:	f104 0708 	add.w	r7, r4, #8
   327e4:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   327e8:	0089      	lsls	r1, r1, #2
   327ea:	f020 0020 	bic.w	r0, r0, #32
   327ee:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   327f2:	04c0      	lsls	r0, r0, #19
   327f4:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   327f8:	0cc0      	lsrs	r0, r0, #19
   327fa:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   327fe:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   32802:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   32806:	786a      	ldrb	r2, [r5, #1]
   32808:	2a00      	cmp	r2, #0
   3280a:	d0dc      	beq.n	327c6 <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   3280c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   32810:	78ad      	ldrb	r5, [r5, #2]
   32812:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   32816:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   3281a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   3281e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   32822:	0223      	lsls	r3, r4, #8
   32824:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   32828:	0412      	lsls	r2, r2, #16
   3282a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   3282e:	ea43 030e 	orr.w	r3, r3, lr
   32832:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   32834:	052a      	lsls	r2, r5, #20
   32836:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   3283a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   3283e:	4313      	orrs	r3, r2
   32840:	f040 0020 	orr.w	r0, r0, #32
   32844:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   32848:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   3284c:	e7bb      	b.n	327c6 <nrfx_gpiote_output_configure+0x56>
            return NRFX_ERROR_INVALID_PARAM;
   3284e:	4803      	ldr	r0, [pc, #12]	; (3285c <nrfx_gpiote_output_configure+0xec>)
   32850:	e7ba      	b.n	327c8 <nrfx_gpiote_output_configure+0x58>
   32852:	bf00      	nop
   32854:	20014704 	.word	0x20014704
   32858:	0bad0000 	.word	0x0bad0000
   3285c:	0bad0004 	.word	0x0bad0004

00032860 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   32860:	4b01      	ldr	r3, [pc, #4]	; (32868 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   32862:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   32866:	4770      	bx	lr
   32868:	20014704 	.word	0x20014704

0003286c <nrfx_gpiote_channel_get>:
{
   3286c:	b538      	push	{r3, r4, r5, lr}
   3286e:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
   32870:	460d      	mov	r5, r1
   32872:	b951      	cbnz	r1, 3288a <nrfx_gpiote_channel_get+0x1e>
   32874:	490c      	ldr	r1, [pc, #48]	; (328a8 <nrfx_gpiote_channel_get+0x3c>)
   32876:	480d      	ldr	r0, [pc, #52]	; (328ac <nrfx_gpiote_channel_get+0x40>)
   32878:	f240 2235 	movw	r2, #565	; 0x235
   3287c:	f00a f8de 	bl	3ca3c <assert_print>
   32880:	f240 2135 	movw	r1, #565	; 0x235
   32884:	4808      	ldr	r0, [pc, #32]	; (328a8 <nrfx_gpiote_channel_get+0x3c>)
   32886:	f00a f8d2 	bl	3ca2e <assert_post_action>
    if (pin_in_use_by_te(pin))
   3288a:	4620      	mov	r0, r4
   3288c:	f7ff fe00 	bl	32490 <pin_in_use_by_te>
   32890:	b138      	cbz	r0, 328a2 <nrfx_gpiote_channel_get+0x36>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   32892:	4b07      	ldr	r3, [pc, #28]	; (328b0 <nrfx_gpiote_channel_get+0x44>)
   32894:	3408      	adds	r4, #8
   32896:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
        return NRFX_SUCCESS;
   3289a:	4806      	ldr	r0, [pc, #24]	; (328b4 <nrfx_gpiote_channel_get+0x48>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   3289c:	0b5b      	lsrs	r3, r3, #13
   3289e:	702b      	strb	r3, [r5, #0]
}
   328a0:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
   328a2:	4805      	ldr	r0, [pc, #20]	; (328b8 <nrfx_gpiote_channel_get+0x4c>)
   328a4:	e7fc      	b.n	328a0 <nrfx_gpiote_channel_get+0x34>
   328a6:	bf00      	nop
   328a8:	0004b7d6 	.word	0x0004b7d6
   328ac:	00043ff2 	.word	0x00043ff2
   328b0:	20014704 	.word	0x20014704
   328b4:	0bad0000 	.word	0x0bad0000
   328b8:	0bad0004 	.word	0x0bad0004

000328bc <nrfx_gpiote_init>:
{
   328bc:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   328be:	4c0f      	ldr	r4, [pc, #60]	; (328fc <nrfx_gpiote_init+0x40>)
   328c0:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
   328c4:	b9bd      	cbnz	r5, 328f6 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   328c6:	2240      	movs	r2, #64	; 0x40
   328c8:	4629      	mov	r1, r5
   328ca:	f104 0010 	add.w	r0, r4, #16
   328ce:	f00e fd89 	bl	413e4 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   328d2:	2031      	movs	r0, #49	; 0x31
   328d4:	f7f0 f92e 	bl	22b34 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   328d8:	4b09      	ldr	r3, [pc, #36]	; (32900 <nrfx_gpiote_init+0x44>)
    return err_code;
   328da:	480a      	ldr	r0, [pc, #40]	; (32904 <nrfx_gpiote_init+0x48>)
   328dc:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   328e0:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   328e4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   328e8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   328ec:	2301      	movs	r3, #1
   328ee:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   328f2:	6563      	str	r3, [r4, #84]	; 0x54
}
   328f4:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   328f6:	4804      	ldr	r0, [pc, #16]	; (32908 <nrfx_gpiote_init+0x4c>)
   328f8:	e7fc      	b.n	328f4 <nrfx_gpiote_init+0x38>
   328fa:	bf00      	nop
   328fc:	20014704 	.word	0x20014704
   32900:	40031000 	.word	0x40031000
   32904:	0bad0000 	.word	0x0bad0000
   32908:	0bad0005 	.word	0x0bad0005

0003290c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   3290c:	4b03      	ldr	r3, [pc, #12]	; (3291c <nrfx_gpiote_is_init+0x10>)
   3290e:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   32912:	3800      	subs	r0, #0
   32914:	bf18      	it	ne
   32916:	2001      	movne	r0, #1
   32918:	4770      	bx	lr
   3291a:	bf00      	nop
   3291c:	20014704 	.word	0x20014704

00032920 <nrfx_gpiote_channel_free>:
{
   32920:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   32922:	4801      	ldr	r0, [pc, #4]	; (32928 <nrfx_gpiote_channel_free+0x8>)
   32924:	f7ff bc32 	b.w	3218c <nrfx_flag32_free>
   32928:	20014754 	.word	0x20014754

0003292c <nrfx_gpiote_channel_alloc>:
{
   3292c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   3292e:	4801      	ldr	r0, [pc, #4]	; (32934 <nrfx_gpiote_channel_alloc+0x8>)
   32930:	f7ff bc0a 	b.w	32148 <nrfx_flag32_alloc>
   32934:	20014754 	.word	0x20014754

00032938 <nrfx_gpiote_trigger_enable>:
{
   32938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3293a:	4604      	mov	r4, r0
   3293c:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
   3293e:	f7ff fdb1 	bl	324a4 <pin_has_trigger>
   32942:	b950      	cbnz	r0, 3295a <nrfx_gpiote_trigger_enable+0x22>
   32944:	492e      	ldr	r1, [pc, #184]	; (32a00 <nrfx_gpiote_trigger_enable+0xc8>)
   32946:	482f      	ldr	r0, [pc, #188]	; (32a04 <nrfx_gpiote_trigger_enable+0xcc>)
   32948:	f240 32df 	movw	r2, #991	; 0x3df
   3294c:	f00a f876 	bl	3ca3c <assert_print>
   32950:	f240 31df 	movw	r1, #991	; 0x3df
   32954:	482a      	ldr	r0, [pc, #168]	; (32a00 <nrfx_gpiote_trigger_enable+0xc8>)
   32956:	f00a f86a 	bl	3ca2e <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   3295a:	4620      	mov	r0, r4
   3295c:	f7ff fd98 	bl	32490 <pin_in_use_by_te>
   32960:	4e29      	ldr	r6, [pc, #164]	; (32a08 <nrfx_gpiote_trigger_enable+0xd0>)
   32962:	f104 0708 	add.w	r7, r4, #8
   32966:	b318      	cbz	r0, 329b0 <nrfx_gpiote_trigger_enable+0x78>
    return !pin_is_output(pin);
   32968:	4620      	mov	r0, r4
   3296a:	f7ff fda7 	bl	324bc <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   3296e:	4602      	mov	r2, r0
   32970:	b9f0      	cbnz	r0, 329b0 <nrfx_gpiote_trigger_enable+0x78>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   32972:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   32976:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
   32978:	4608      	mov	r0, r1
   3297a:	f00d fa0d 	bl	3fd98 <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
   3297e:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   32982:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   32986:	601a      	str	r2, [r3, #0]
   32988:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   3298a:	008b      	lsls	r3, r1, #2
   3298c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   32990:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   32994:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   32998:	f042 0201 	orr.w	r2, r2, #1
   3299c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
   329a0:	b125      	cbz	r5, 329ac <nrfx_gpiote_trigger_enable+0x74>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   329a2:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
   329a4:	4a19      	ldr	r2, [pc, #100]	; (32a0c <nrfx_gpiote_trigger_enable+0xd4>)
   329a6:	408b      	lsls	r3, r1
   329a8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   329ac:	b003      	add	sp, #12
   329ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
   329b0:	b955      	cbnz	r5, 329c8 <nrfx_gpiote_trigger_enable+0x90>
   329b2:	4913      	ldr	r1, [pc, #76]	; (32a00 <nrfx_gpiote_trigger_enable+0xc8>)
   329b4:	4813      	ldr	r0, [pc, #76]	; (32a04 <nrfx_gpiote_trigger_enable+0xcc>)
   329b6:	f240 32ee 	movw	r2, #1006	; 0x3ee
   329ba:	f00a f83f 	bl	3ca3c <assert_print>
   329be:	f240 31ee 	movw	r1, #1006	; 0x3ee
   329c2:	480f      	ldr	r0, [pc, #60]	; (32a00 <nrfx_gpiote_trigger_enable+0xc8>)
   329c4:	f00a f833 	bl	3ca2e <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   329c8:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   329cc:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   329d0:	2b04      	cmp	r3, #4
   329d2:	d011      	beq.n	329f8 <nrfx_gpiote_trigger_enable+0xc0>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   329d4:	2b05      	cmp	r3, #5
   329d6:	d011      	beq.n	329fc <nrfx_gpiote_trigger_enable+0xc4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   329d8:	a801      	add	r0, sp, #4
   329da:	9401      	str	r4, [sp, #4]
   329dc:	f7ff fdf2 	bl	325c4 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   329e0:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   329e2:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   329e4:	40d9      	lsrs	r1, r3
   329e6:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   329ea:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   329ec:	4620      	mov	r0, r4
}
   329ee:	b003      	add	sp, #12
   329f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   329f4:	f00d ba1f 	b.w	3fe36 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   329f8:	2103      	movs	r1, #3
   329fa:	e7f7      	b.n	329ec <nrfx_gpiote_trigger_enable+0xb4>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   329fc:	2102      	movs	r1, #2
   329fe:	e7f5      	b.n	329ec <nrfx_gpiote_trigger_enable+0xb4>
   32a00:	0004b7d6 	.word	0x0004b7d6
   32a04:	00043ff2 	.word	0x00043ff2
   32a08:	20014704 	.word	0x20014704
   32a0c:	40031000 	.word	0x40031000

00032a10 <nrfx_gpiote_trigger_disable>:
{
   32a10:	b508      	push	{r3, lr}
   32a12:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   32a14:	f7ff fd3c 	bl	32490 <pin_in_use_by_te>
   32a18:	b1c8      	cbz	r0, 32a4e <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
   32a1a:	4610      	mov	r0, r2
   32a1c:	f7ff fd4e 	bl	324bc <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   32a20:	b9a8      	cbnz	r0, 32a4e <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   32a22:	4b0e      	ldr	r3, [pc, #56]	; (32a5c <nrfx_gpiote_trigger_disable+0x4c>)
   32a24:	3208      	adds	r2, #8
   32a26:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   32a2a:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   32a2c:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   32a2e:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   32a30:	490b      	ldr	r1, [pc, #44]	; (32a60 <nrfx_gpiote_trigger_disable+0x50>)
   32a32:	009b      	lsls	r3, r3, #2
   32a34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   32a38:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   32a3c:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   32a40:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   32a44:	f022 0203 	bic.w	r2, r2, #3
   32a48:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   32a4c:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   32a4e:	2100      	movs	r1, #0
}
   32a50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   32a54:	4610      	mov	r0, r2
   32a56:	f00d b9ee 	b.w	3fe36 <nrf_gpio_cfg_sense_set>
   32a5a:	bf00      	nop
   32a5c:	20014704 	.word	0x20014704
   32a60:	40031000 	.word	0x40031000

00032a64 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   32a64:	4b0d      	ldr	r3, [pc, #52]	; (32a9c <nrfx_gpiote_pin_uninit+0x38>)
   32a66:	f100 0208 	add.w	r2, r0, #8
   32a6a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   32a6e:	b513      	push	{r0, r1, r4, lr}
    if (!pin_in_use(pin))
   32a70:	07db      	lsls	r3, r3, #31
{
   32a72:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   32a74:	d510      	bpl.n	32a98 <nrfx_gpiote_pin_uninit+0x34>
    nrfx_gpiote_trigger_disable(pin);
   32a76:	f7ff ffcb 	bl	32a10 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   32a7a:	4620      	mov	r0, r4
   32a7c:	f7ff fd84 	bl	32588 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   32a80:	a801      	add	r0, sp, #4
   32a82:	9401      	str	r4, [sp, #4]
   32a84:	f7ff fd9e 	bl	325c4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   32a88:	2202      	movs	r2, #2
   32a8a:	9b01      	ldr	r3, [sp, #4]
   32a8c:	3380      	adds	r3, #128	; 0x80
   32a8e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   32a92:	4803      	ldr	r0, [pc, #12]	; (32aa0 <nrfx_gpiote_pin_uninit+0x3c>)
}
   32a94:	b002      	add	sp, #8
   32a96:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   32a98:	4802      	ldr	r0, [pc, #8]	; (32aa4 <nrfx_gpiote_pin_uninit+0x40>)
   32a9a:	e7fb      	b.n	32a94 <nrfx_gpiote_pin_uninit+0x30>
   32a9c:	20014704 	.word	0x20014704
   32aa0:	0bad0000 	.word	0x0bad0000
   32aa4:	0bad0004 	.word	0x0bad0004

00032aa8 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   32aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   32aac:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   32aae:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   32ab0:	4634      	mov	r4, r6
{
   32ab2:	4b53      	ldr	r3, [pc, #332]	; (32c00 <nrfx_gpiote_irq_handler+0x158>)
    return p_reg->INTENSET & mask;
   32ab4:	4853      	ldr	r0, [pc, #332]	; (32c04 <nrfx_gpiote_irq_handler+0x15c>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   32ab6:	4954      	ldr	r1, [pc, #336]	; (32c08 <nrfx_gpiote_irq_handler+0x160>)
{
   32ab8:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   32aba:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   32abc:	b135      	cbz	r5, 32acc <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   32abe:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   32ac2:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   32ac4:	bf1e      	ittt	ne
   32ac6:	601c      	strne	r4, [r3, #0]
   32ac8:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   32aca:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   32acc:	3304      	adds	r3, #4
   32ace:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   32ad0:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   32ad4:	d1f1      	bne.n	32aba <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   32ad6:	f8df 812c 	ldr.w	r8, [pc, #300]	; 32c04 <nrfx_gpiote_irq_handler+0x15c>
   32ada:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   32ade:	b183      	cbz	r3, 32b02 <nrfx_gpiote_irq_handler+0x5a>
        *p_masks = gpio_regs[i]->LATCH;
   32ae0:	4f4a      	ldr	r7, [pc, #296]	; (32c0c <nrfx_gpiote_irq_handler+0x164>)
   32ae2:	6a3b      	ldr	r3, [r7, #32]
   32ae4:	9302      	str	r3, [sp, #8]
        gpio_regs[i]->LATCH = *p_masks;
   32ae6:	623b      	str	r3, [r7, #32]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   32ae8:	f04f 0901 	mov.w	r9, #1
            while (latch[i])
   32aec:	9c02      	ldr	r4, [sp, #8]
   32aee:	b954      	cbnz	r4, 32b06 <nrfx_gpiote_irq_handler+0x5e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   32af0:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
   32af4:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   32af8:	6a3b      	ldr	r3, [r7, #32]
   32afa:	9302      	str	r3, [sp, #8]
        gpio_regs[i]->LATCH = *p_masks;
   32afc:	623b      	str	r3, [r7, #32]
        if (latch[port_idx])
   32afe:	2b00      	cmp	r3, #0
   32b00:	d1f2      	bne.n	32ae8 <nrfx_gpiote_irq_handler+0x40>
        mask &= ~NRFX_BIT(ch);
   32b02:	2401      	movs	r4, #1
   32b04:	e076      	b.n	32bf4 <nrfx_gpiote_irq_handler+0x14c>
                uint32_t pin = NRF_CTZ(latch[i]);
   32b06:	fa94 f4a4 	rbit	r4, r4
   32b0a:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   32b0e:	4a40      	ldr	r2, [pc, #256]	; (32c10 <nrfx_gpiote_irq_handler+0x168>)
   32b10:	f104 0308 	add.w	r3, r4, #8
   32b14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   32b18:	08e5      	lsrs	r5, r4, #3
   32b1a:	089a      	lsrs	r2, r3, #2
   32b1c:	f3c3 0b82 	ubfx	fp, r3, #2, #3
    bit = BITMASK_RELBIT_GET(bit);
   32b20:	f004 0107 	and.w	r1, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   32b24:	ab02      	add	r3, sp, #8
   32b26:	fa09 f001 	lsl.w	r0, r9, r1
   32b2a:	5d59      	ldrb	r1, [r3, r5]
   32b2c:	9201      	str	r2, [sp, #4]
   32b2e:	ea21 0100 	bic.w	r1, r1, r0
   32b32:	5559      	strb	r1, [r3, r5]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   32b34:	a803      	add	r0, sp, #12
   32b36:	9403      	str	r4, [sp, #12]
   32b38:	f7ff fd44 	bl	325c4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   32b3c:	9903      	ldr	r1, [sp, #12]
    if (is_level(trigger))
   32b3e:	9a01      	ldr	r2, [sp, #4]
   32b40:	3180      	adds	r1, #128	; 0x80
   32b42:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
   32b46:	0753      	lsls	r3, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   32b48:	46da      	mov	sl, fp
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   32b4a:	f3c5 4501 	ubfx	r5, r5, #16, #2
    if (is_level(trigger))
   32b4e:	d521      	bpl.n	32b94 <nrfx_gpiote_irq_handler+0xec>
        call_handler(pin, trigger);
   32b50:	4659      	mov	r1, fp
   32b52:	4620      	mov	r0, r4
   32b54:	f7ff fcbc 	bl	324d0 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   32b58:	a803      	add	r0, sp, #12
   32b5a:	9403      	str	r4, [sp, #12]
   32b5c:	f7ff fd32 	bl	325c4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   32b60:	9b03      	ldr	r3, [sp, #12]
   32b62:	b2ed      	uxtb	r5, r5
   32b64:	3380      	adds	r3, #128	; 0x80
   32b66:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   32b6a:	f3c3 4301 	ubfx	r3, r3, #16, #2
   32b6e:	429d      	cmp	r5, r3
   32b70:	d107      	bne.n	32b82 <nrfx_gpiote_irq_handler+0xda>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   32b72:	2100      	movs	r1, #0
   32b74:	4620      	mov	r0, r4
   32b76:	f00d f95e 	bl	3fe36 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   32b7a:	4629      	mov	r1, r5
   32b7c:	4620      	mov	r0, r4
   32b7e:	f00d f95a 	bl	3fe36 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   32b82:	a803      	add	r0, sp, #12
   32b84:	9403      	str	r4, [sp, #12]
   32b86:	f7ff fd1d 	bl	325c4 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   32b8a:	9b03      	ldr	r3, [sp, #12]
   32b8c:	fa09 f303 	lsl.w	r3, r9, r3
   32b90:	6203      	str	r3, [r0, #32]
   32b92:	e7ab      	b.n	32aec <nrfx_gpiote_irq_handler+0x44>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   32b94:	2d02      	cmp	r5, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   32b96:	bf0c      	ite	eq
   32b98:	2103      	moveq	r1, #3
   32b9a:	2102      	movne	r1, #2
   32b9c:	4620      	mov	r0, r4
   32b9e:	f00d f94a 	bl	3fe36 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   32ba2:	f1bb 0f03 	cmp.w	fp, #3
   32ba6:	d004      	beq.n	32bb2 <nrfx_gpiote_irq_handler+0x10a>
   32ba8:	2d02      	cmp	r5, #2
   32baa:	d107      	bne.n	32bbc <nrfx_gpiote_irq_handler+0x114>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   32bac:	f1bb 0f01 	cmp.w	fp, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   32bb0:	d1e7      	bne.n	32b82 <nrfx_gpiote_irq_handler+0xda>
            call_handler(pin, trigger);
   32bb2:	4651      	mov	r1, sl
   32bb4:	4620      	mov	r0, r4
   32bb6:	f7ff fc8b 	bl	324d0 <call_handler>
   32bba:	e7e2      	b.n	32b82 <nrfx_gpiote_irq_handler+0xda>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   32bbc:	2d03      	cmp	r5, #3
   32bbe:	d1e0      	bne.n	32b82 <nrfx_gpiote_irq_handler+0xda>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   32bc0:	f1bb 0f02 	cmp.w	fp, #2
   32bc4:	e7f4      	b.n	32bb0 <nrfx_gpiote_irq_handler+0x108>
        uint32_t ch = NRF_CTZ(mask);
   32bc6:	fa96 f3a6 	rbit	r3, r6
   32bca:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   32bce:	fa04 f203 	lsl.w	r2, r4, r3
   32bd2:	009b      	lsls	r3, r3, #2
   32bd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   32bd8:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   32bdc:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   32be0:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   32be4:	f3c0 2004 	ubfx	r0, r0, #8, #5
   32be8:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   32bec:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   32bf0:	f7ff fc6e 	bl	324d0 <call_handler>
    while (mask)
   32bf4:	2e00      	cmp	r6, #0
   32bf6:	d1e6      	bne.n	32bc6 <nrfx_gpiote_irq_handler+0x11e>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   32bf8:	b005      	add	sp, #20
   32bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32bfe:	bf00      	nop
   32c00:	40031100 	.word	0x40031100
   32c04:	40031000 	.word	0x40031000
   32c08:	40031120 	.word	0x40031120
   32c0c:	40842500 	.word	0x40842500
   32c10:	20014704 	.word	0x20014704

00032c14 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   32c14:	b570      	push	{r4, r5, r6, lr}
   32c16:	4616      	mov	r6, r2
    NRFX_ASSERT(handler);
   32c18:	460d      	mov	r5, r1
   32c1a:	b941      	cbnz	r1, 32c2e <nrfx_ipc_init+0x1a>
   32c1c:	490b      	ldr	r1, [pc, #44]	; (32c4c <nrfx_ipc_init+0x38>)
   32c1e:	480c      	ldr	r0, [pc, #48]	; (32c50 <nrfx_ipc_init+0x3c>)
   32c20:	2234      	movs	r2, #52	; 0x34
   32c22:	f009 ff0b 	bl	3ca3c <assert_print>
   32c26:	2134      	movs	r1, #52	; 0x34
   32c28:	4808      	ldr	r0, [pc, #32]	; (32c4c <nrfx_ipc_init+0x38>)
   32c2a:	f009 ff00 	bl	3ca2e <assert_post_action>
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   32c2e:	4c09      	ldr	r4, [pc, #36]	; (32c54 <nrfx_ipc_init+0x40>)
   32c30:	7923      	ldrb	r3, [r4, #4]
   32c32:	b943      	cbnz	r3, 32c46 <nrfx_ipc_init+0x32>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   32c34:	202a      	movs	r0, #42	; 0x2a
   32c36:	f7ef ff7d 	bl	22b34 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   32c3a:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   32c3c:	4806      	ldr	r0, [pc, #24]	; (32c58 <nrfx_ipc_init+0x44>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   32c3e:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   32c40:	6025      	str	r5, [r4, #0]
    m_ipc_cb.p_context = p_context;
   32c42:	60a6      	str	r6, [r4, #8]
}
   32c44:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   32c46:	4805      	ldr	r0, [pc, #20]	; (32c5c <nrfx_ipc_init+0x48>)
   32c48:	e7fc      	b.n	32c44 <nrfx_ipc_init+0x30>
   32c4a:	bf00      	nop
   32c4c:	0004b814 	.word	0x0004b814
   32c50:	00043ff2 	.word	0x00043ff2
   32c54:	2001a428 	.word	0x2001a428
   32c58:	0bad0000 	.word	0x0bad0000
   32c5c:	0bad000c 	.word	0x0bad000c

00032c60 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   32c60:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   32c62:	4604      	mov	r4, r0
   32c64:	b940      	cbnz	r0, 32c78 <nrfx_ipc_config_load+0x18>
   32c66:	4919      	ldr	r1, [pc, #100]	; (32ccc <nrfx_ipc_config_load+0x6c>)
   32c68:	4819      	ldr	r0, [pc, #100]	; (32cd0 <nrfx_ipc_config_load+0x70>)
   32c6a:	2246      	movs	r2, #70	; 0x46
   32c6c:	f009 fee6 	bl	3ca3c <assert_print>
   32c70:	2146      	movs	r1, #70	; 0x46
   32c72:	4816      	ldr	r0, [pc, #88]	; (32ccc <nrfx_ipc_config_load+0x6c>)
   32c74:	f009 fedb 	bl	3ca2e <assert_post_action>
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   32c78:	4b16      	ldr	r3, [pc, #88]	; (32cd4 <nrfx_ipc_config_load+0x74>)
   32c7a:	791b      	ldrb	r3, [r3, #4]
   32c7c:	2b01      	cmp	r3, #1
   32c7e:	d008      	beq.n	32c92 <nrfx_ipc_config_load+0x32>
   32c80:	4912      	ldr	r1, [pc, #72]	; (32ccc <nrfx_ipc_config_load+0x6c>)
   32c82:	4813      	ldr	r0, [pc, #76]	; (32cd0 <nrfx_ipc_config_load+0x70>)
   32c84:	2247      	movs	r2, #71	; 0x47
   32c86:	f009 fed9 	bl	3ca3c <assert_print>
   32c8a:	2147      	movs	r1, #71	; 0x47
   32c8c:	480f      	ldr	r0, [pc, #60]	; (32ccc <nrfx_ipc_config_load+0x6c>)
   32c8e:	f009 fece 	bl	3ca2e <assert_post_action>
{
   32c92:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   32c94:	4a10      	ldr	r2, [pc, #64]	; (32cd8 <nrfx_ipc_config_load+0x78>)

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   32c96:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   32c9a:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   32c9e:	3301      	adds	r3, #1
   32ca0:	2b08      	cmp	r3, #8
   32ca2:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   32ca6:	d1f6      	bne.n	32c96 <nrfx_ipc_config_load+0x36>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   32ca8:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   32caa:	4a0b      	ldr	r2, [pc, #44]	; (32cd8 <nrfx_ipc_config_load+0x78>)
   32cac:	f104 0120 	add.w	r1, r4, #32
   32cb0:	f503 70b2 	add.w	r0, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   32cb4:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
   32cb8:	3301      	adds	r3, #1
   32cba:	2b08      	cmp	r3, #8
   32cbc:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   32cc0:	d1f6      	bne.n	32cb0 <nrfx_ipc_config_load+0x50>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   32cc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    p_reg->INTENSET = mask;
   32cc4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   32cc8:	bd38      	pop	{r3, r4, r5, pc}
   32cca:	bf00      	nop
   32ccc:	0004b814 	.word	0x0004b814
   32cd0:	00043ff2 	.word	0x00043ff2
   32cd4:	2001a428 	.word	0x2001a428
   32cd8:	4002a000 	.word	0x4002a000

00032cdc <nrfx_ipc_uninit>:

void nrfx_ipc_uninit(void)
{
   32cdc:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   32cde:	4c1a      	ldr	r4, [pc, #104]	; (32d48 <nrfx_ipc_uninit+0x6c>)
   32ce0:	7923      	ldrb	r3, [r4, #4]
   32ce2:	2b01      	cmp	r3, #1
   32ce4:	d008      	beq.n	32cf8 <nrfx_ipc_uninit+0x1c>
   32ce6:	4919      	ldr	r1, [pc, #100]	; (32d4c <nrfx_ipc_uninit+0x70>)
   32ce8:	4819      	ldr	r0, [pc, #100]	; (32d50 <nrfx_ipc_uninit+0x74>)
   32cea:	2259      	movs	r2, #89	; 0x59
   32cec:	f009 fea6 	bl	3ca3c <assert_print>
   32cf0:	2159      	movs	r1, #89	; 0x59
   32cf2:	4816      	ldr	r0, [pc, #88]	; (32d4c <nrfx_ipc_uninit+0x70>)
   32cf4:	f009 fe9b 	bl	3ca2e <assert_post_action>
    p_reg->SEND_CNF[index] = channels_mask;
   32cf8:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   32cfa:	f04f 31ff 	mov.w	r1, #4294967295
    p_reg->SEND_CNF[index] = channels_mask;
   32cfe:	4a15      	ldr	r2, [pc, #84]	; (32d54 <nrfx_ipc_uninit+0x78>)
   32d00:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   32d04:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
   32d08:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   32d0c:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   32d10:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
   32d14:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
   32d18:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
   32d1c:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    p_reg->RECEIVE_CNF[index] = channels_mask;
   32d20:	f8c2 3590 	str.w	r3, [r2, #1424]	; 0x590
   32d24:	f8c2 3594 	str.w	r3, [r2, #1428]	; 0x594
   32d28:	f8c2 3598 	str.w	r3, [r2, #1432]	; 0x598
   32d2c:	f8c2 359c 	str.w	r3, [r2, #1436]	; 0x59c
   32d30:	f8c2 35a0 	str.w	r3, [r2, #1440]	; 0x5a0
   32d34:	f8c2 35a4 	str.w	r3, [r2, #1444]	; 0x5a4
   32d38:	f8c2 35a8 	str.w	r3, [r2, #1448]	; 0x5a8
   32d3c:	f8c2 35ac 	str.w	r3, [r2, #1452]	; 0x5ac
    p_reg->INTENCLR = mask;
   32d40:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
   32d44:	7123      	strb	r3, [r4, #4]
}
   32d46:	bd10      	pop	{r4, pc}
   32d48:	2001a428 	.word	0x2001a428
   32d4c:	0004b814 	.word	0x0004b814
   32d50:	00043ff2 	.word	0x00043ff2
   32d54:	4002a000 	.word	0x4002a000

00032d58 <nrfx_ipc_receive_event_enable>:

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
   32d58:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   32d5a:	4b0a      	ldr	r3, [pc, #40]	; (32d84 <nrfx_ipc_receive_event_enable+0x2c>)
{
   32d5c:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   32d5e:	791b      	ldrb	r3, [r3, #4]
   32d60:	2b01      	cmp	r3, #1
   32d62:	d008      	beq.n	32d76 <nrfx_ipc_receive_event_enable+0x1e>
   32d64:	4908      	ldr	r1, [pc, #32]	; (32d88 <nrfx_ipc_receive_event_enable+0x30>)
   32d66:	4809      	ldr	r0, [pc, #36]	; (32d8c <nrfx_ipc_receive_event_enable+0x34>)
   32d68:	226c      	movs	r2, #108	; 0x6c
   32d6a:	f009 fe67 	bl	3ca3c <assert_print>
   32d6e:	216c      	movs	r1, #108	; 0x6c
   32d70:	4805      	ldr	r0, [pc, #20]	; (32d88 <nrfx_ipc_receive_event_enable+0x30>)
   32d72:	f009 fe5c 	bl	3ca2e <assert_post_action>
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   32d76:	2301      	movs	r3, #1
   32d78:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->INTENSET = mask;
   32d7c:	4b04      	ldr	r3, [pc, #16]	; (32d90 <nrfx_ipc_receive_event_enable+0x38>)
   32d7e:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
}
   32d82:	bd10      	pop	{r4, pc}
   32d84:	2001a428 	.word	0x2001a428
   32d88:	0004b814 	.word	0x0004b814
   32d8c:	00043ff2 	.word	0x00043ff2
   32d90:	4002a000 	.word	0x4002a000

00032d94 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
   32d94:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   32d96:	4b0a      	ldr	r3, [pc, #40]	; (32dc0 <nrfx_ipc_receive_event_disable+0x2c>)
{
   32d98:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   32d9a:	791b      	ldrb	r3, [r3, #4]
   32d9c:	2b01      	cmp	r3, #1
   32d9e:	d008      	beq.n	32db2 <nrfx_ipc_receive_event_disable+0x1e>
   32da0:	4908      	ldr	r1, [pc, #32]	; (32dc4 <nrfx_ipc_receive_event_disable+0x30>)
   32da2:	4809      	ldr	r0, [pc, #36]	; (32dc8 <nrfx_ipc_receive_event_disable+0x34>)
   32da4:	2272      	movs	r2, #114	; 0x72
   32da6:	f009 fe49 	bl	3ca3c <assert_print>
   32daa:	2172      	movs	r1, #114	; 0x72
   32dac:	4805      	ldr	r0, [pc, #20]	; (32dc4 <nrfx_ipc_receive_event_disable+0x30>)
   32dae:	f009 fe3e 	bl	3ca2e <assert_post_action>
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   32db2:	2301      	movs	r3, #1
   32db4:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->INTENCLR = mask;
   32db8:	4b04      	ldr	r3, [pc, #16]	; (32dcc <nrfx_ipc_receive_event_disable+0x38>)
   32dba:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
}
   32dbe:	bd10      	pop	{r4, pc}
   32dc0:	2001a428 	.word	0x2001a428
   32dc4:	0004b814 	.word	0x0004b814
   32dc8:	00043ff2 	.word	0x00043ff2
   32dcc:	4002a000 	.word	0x4002a000

00032dd0 <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
   32dd0:	4b16      	ldr	r3, [pc, #88]	; (32e2c <nrfx_ipc_irq_handler+0x5c>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   32dd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   32dd6:	f8d3 630c 	ldr.w	r6, [r3, #780]	; 0x30c
    // Clear these events
    uint32_t bitmask = events_map;
    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   32dda:	f04f 0801 	mov.w	r8, #1
    uint32_t bitmask = events_map;
   32dde:	4635      	mov	r5, r6
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
   32de0:	4f13      	ldr	r7, [pc, #76]	; (32e30 <nrfx_ipc_irq_handler+0x60>)
   32de2:	f8df 9058 	ldr.w	r9, [pc, #88]	; 32e3c <nrfx_ipc_irq_handler+0x6c>
    while (bitmask)
   32de6:	b935      	cbnz	r5, 32df6 <nrfx_ipc_irq_handler+0x26>
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   32de8:	4b12      	ldr	r3, [pc, #72]	; (32e34 <nrfx_ipc_irq_handler+0x64>)
   32dea:	4630      	mov	r0, r6
}
   32dec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   32df0:	681a      	ldr	r2, [r3, #0]
   32df2:	6899      	ldr	r1, [r3, #8]
   32df4:	4710      	bx	r2
        uint8_t event_idx = NRF_CTZ(bitmask);
   32df6:	fa95 f4a5 	rbit	r4, r5
   32dfa:	fab4 f484 	clz	r4, r4
        bitmask &= ~(1UL << event_idx);
   32dfe:	fa08 f304 	lsl.w	r3, r8, r4
   32e02:	2c07      	cmp	r4, #7
   32e04:	ea25 0503 	bic.w	r5, r5, r3
   32e08:	dd0a      	ble.n	32e20 <nrfx_ipc_irq_handler+0x50>
   32e0a:	4639      	mov	r1, r7
   32e0c:	4648      	mov	r0, r9
   32e0e:	f240 12e7 	movw	r2, #487	; 0x1e7
   32e12:	f009 fe13 	bl	3ca3c <assert_print>
   32e16:	f240 11e7 	movw	r1, #487	; 0x1e7
   32e1a:	4638      	mov	r0, r7
   32e1c:	f009 fe07 	bl	3ca2e <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32e20:	2200      	movs	r2, #0
   32e22:	4b05      	ldr	r3, [pc, #20]	; (32e38 <nrfx_ipc_irq_handler+0x68>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   32e24:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32e26:	511a      	str	r2, [r3, r4]
}
   32e28:	e7dd      	b.n	32de6 <nrfx_ipc_irq_handler+0x16>
   32e2a:	bf00      	nop
   32e2c:	4002a000 	.word	0x4002a000
   32e30:	0004b84f 	.word	0x0004b84f
   32e34:	2001a428 	.word	0x2001a428
   32e38:	4002a100 	.word	0x4002a100
   32e3c:	00043ff2 	.word	0x00043ff2

00032e40 <nvmc_word_write>:
}

#if defined(NVMC_READYNEXT_READYNEXT_Msk)
NRF_STATIC_INLINE bool nrf_nvmc_write_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
   32e40:	4a04      	ldr	r2, [pc, #16]	; (32e54 <nvmc_word_write+0x14>)
   32e42:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
}

static void nvmc_word_write(uint32_t addr, uint32_t value)
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
   32e46:	07db      	lsls	r3, r3, #31
   32e48:	d5fb      	bpl.n	32e42 <nvmc_word_write+0x2>
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
#endif

    *(volatile uint32_t *)addr = value;
   32e4a:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   32e4c:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   32e50:	4770      	bx	lr
   32e52:	bf00      	nop
   32e54:	40039000 	.word	0x40039000

00032e58 <nrfx_nvmc_page_erase>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   32e58:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   32e5c:	b510      	push	{r4, lr}
   32e5e:	4604      	mov	r4, r0
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   32e60:	d30a      	bcc.n	32e78 <nrfx_nvmc_page_erase+0x20>
    NRFX_ASSERT(is_valid_address(addr, false));
   32e62:	4910      	ldr	r1, [pc, #64]	; (32ea4 <nrfx_nvmc_page_erase+0x4c>)
   32e64:	4810      	ldr	r0, [pc, #64]	; (32ea8 <nrfx_nvmc_page_erase+0x50>)
   32e66:	f44f 7283 	mov.w	r2, #262	; 0x106
   32e6a:	f009 fde7 	bl	3ca3c <assert_print>
   32e6e:	f44f 7183 	mov.w	r1, #262	; 0x106
   32e72:	480c      	ldr	r0, [pc, #48]	; (32ea4 <nrfx_nvmc_page_erase+0x4c>)
   32e74:	f009 fddb 	bl	3ca2e <assert_post_action>
    return !(addr % flash_page_size_get());
   32e78:	f3c4 030b 	ubfx	r3, r4, #0, #12

    if (!is_page_aligned_check(addr))
   32e7c:	b97b      	cbnz	r3, 32e9e <nrfx_nvmc_page_erase+0x46>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   32e7e:	2202      	movs	r2, #2
   32e80:	4b0a      	ldr	r3, [pc, #40]	; (32eac <nrfx_nvmc_page_erase+0x54>)
   32e82:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   32e86:	f04f 32ff 	mov.w	r2, #4294967295
   32e8a:	6022      	str	r2, [r4, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   32e8c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   32e90:	07d2      	lsls	r2, r2, #31
   32e92:	d5fb      	bpl.n	32e8c <nrfx_nvmc_page_erase+0x34>
    p_reg->CONFIGNS = (uint32_t)mode;
   32e94:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   32e96:	4806      	ldr	r0, [pc, #24]	; (32eb0 <nrfx_nvmc_page_erase+0x58>)
   32e98:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
}
   32e9c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_ADDR;
   32e9e:	4805      	ldr	r0, [pc, #20]	; (32eb4 <nrfx_nvmc_page_erase+0x5c>)
   32ea0:	e7fc      	b.n	32e9c <nrfx_nvmc_page_erase+0x44>
   32ea2:	bf00      	nop
   32ea4:	0004b881 	.word	0x0004b881
   32ea8:	00043ff2 	.word	0x00043ff2
   32eac:	40039000 	.word	0x40039000
   32eb0:	0bad0000 	.word	0x0bad0000
   32eb4:	0bad000a 	.word	0x0bad000a

00032eb8 <nrfx_nvmc_word_write>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   32eb8:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   32ebc:	b570      	push	{r4, r5, r6, lr}
   32ebe:	4604      	mov	r4, r0
   32ec0:	460d      	mov	r5, r1
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   32ec2:	d30a      	bcc.n	32eda <nrfx_nvmc_word_write+0x22>
    NRFX_ASSERT(is_valid_address(addr, true));
   32ec4:	4911      	ldr	r1, [pc, #68]	; (32f0c <nrfx_nvmc_word_write+0x54>)
   32ec6:	4812      	ldr	r0, [pc, #72]	; (32f10 <nrfx_nvmc_word_write+0x58>)
   32ec8:	f44f 72ca 	mov.w	r2, #404	; 0x194
   32ecc:	f009 fdb6 	bl	3ca3c <assert_print>
   32ed0:	f44f 71ca 	mov.w	r1, #404	; 0x194
   32ed4:	480d      	ldr	r0, [pc, #52]	; (32f0c <nrfx_nvmc_word_write+0x54>)
   32ed6:	f009 fdaa 	bl	3ca2e <assert_post_action>
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   32eda:	07a3      	lsls	r3, r4, #30
   32edc:	d00a      	beq.n	32ef4 <nrfx_nvmc_word_write+0x3c>
   32ede:	490b      	ldr	r1, [pc, #44]	; (32f0c <nrfx_nvmc_word_write+0x54>)
   32ee0:	480b      	ldr	r0, [pc, #44]	; (32f10 <nrfx_nvmc_word_write+0x58>)
   32ee2:	f240 1295 	movw	r2, #405	; 0x195
   32ee6:	f009 fda9 	bl	3ca3c <assert_print>
   32eea:	f240 1195 	movw	r1, #405	; 0x195
   32eee:	4807      	ldr	r0, [pc, #28]	; (32f0c <nrfx_nvmc_word_write+0x54>)
   32ef0:	f009 fd9d 	bl	3ca2e <assert_post_action>
   32ef4:	2301      	movs	r3, #1
   32ef6:	4e07      	ldr	r6, [pc, #28]	; (32f14 <nrfx_nvmc_word_write+0x5c>)

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   32ef8:	4629      	mov	r1, r5
   32efa:	f8c6 3584 	str.w	r3, [r6, #1412]	; 0x584
   32efe:	4620      	mov	r0, r4
   32f00:	f7ff ff9e 	bl	32e40 <nvmc_word_write>
   32f04:	2300      	movs	r3, #0
   32f06:	f8c6 3584 	str.w	r3, [r6, #1412]	; 0x584

    nvmc_readonly_mode_set();
}
   32f0a:	bd70      	pop	{r4, r5, r6, pc}
   32f0c:	0004b881 	.word	0x0004b881
   32f10:	00043ff2 	.word	0x00043ff2
   32f14:	40039000 	.word	0x40039000

00032f18 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   32f18:	6803      	ldr	r3, [r0, #0]
{
   32f1a:	b510      	push	{r4, lr}
    switch (port)
   32f1c:	095a      	lsrs	r2, r3, #5
   32f1e:	bf0c      	ite	eq
   32f20:	f04f 32ff 	moveq.w	r2, #4294967295
   32f24:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   32f26:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   32f2a:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   32f2e:	07db      	lsls	r3, r3, #31
{
   32f30:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   32f32:	d40a      	bmi.n	32f4a <nrf_gpio_pin_port_decode+0x32>
   32f34:	490e      	ldr	r1, [pc, #56]	; (32f70 <nrf_gpio_pin_port_decode+0x58>)
   32f36:	480f      	ldr	r0, [pc, #60]	; (32f74 <nrf_gpio_pin_port_decode+0x5c>)
   32f38:	f240 2229 	movw	r2, #553	; 0x229
   32f3c:	f009 fd7e 	bl	3ca3c <assert_print>
   32f40:	f240 2129 	movw	r1, #553	; 0x229
   32f44:	480a      	ldr	r0, [pc, #40]	; (32f70 <nrf_gpio_pin_port_decode+0x58>)
   32f46:	f009 fd72 	bl	3ca2e <assert_post_action>
    uint32_t pin_number = *p_pin;
   32f4a:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   32f4c:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   32f50:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   32f52:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   32f54:	d00a      	beq.n	32f6c <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
   32f56:	4906      	ldr	r1, [pc, #24]	; (32f70 <nrf_gpio_pin_port_decode+0x58>)
   32f58:	4806      	ldr	r0, [pc, #24]	; (32f74 <nrf_gpio_pin_port_decode+0x5c>)
   32f5a:	f240 222e 	movw	r2, #558	; 0x22e
   32f5e:	f009 fd6d 	bl	3ca3c <assert_print>
   32f62:	f240 212e 	movw	r1, #558	; 0x22e
   32f66:	4802      	ldr	r0, [pc, #8]	; (32f70 <nrf_gpio_pin_port_decode+0x58>)
   32f68:	f009 fd61 	bl	3ca2e <assert_post_action>
}
   32f6c:	4802      	ldr	r0, [pc, #8]	; (32f78 <nrf_gpio_pin_port_decode+0x60>)
   32f6e:	bd10      	pop	{r4, pc}
   32f70:	00044bd5 	.word	0x00044bd5
   32f74:	00043ff2 	.word	0x00043ff2
   32f78:	40842500 	.word	0x40842500

00032f7c <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
   32f7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32f80:	4606      	mov	r6, r0
   32f82:	4690      	mov	r8, r2
   32f84:	4699      	mov	r9, r3
    NRFX_ASSERT(p_config);
   32f86:	460c      	mov	r4, r1
   32f88:	b951      	cbnz	r1, 32fa0 <nrfx_twim_init+0x24>
   32f8a:	492f      	ldr	r1, [pc, #188]	; (33048 <nrfx_twim_init+0xcc>)
   32f8c:	482f      	ldr	r0, [pc, #188]	; (3304c <nrfx_twim_init+0xd0>)
   32f8e:	f240 1215 	movw	r2, #277	; 0x115
   32f92:	f009 fd53 	bl	3ca3c <assert_print>
   32f96:	f240 1115 	movw	r1, #277	; 0x115
   32f9a:	482b      	ldr	r0, [pc, #172]	; (33048 <nrfx_twim_init+0xcc>)
   32f9c:	f009 fd47 	bl	3ca2e <assert_post_action>
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   32fa0:	2734      	movs	r7, #52	; 0x34
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   32fa2:	f896 a004 	ldrb.w	sl, [r6, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   32fa6:	4d2a      	ldr	r5, [pc, #168]	; (33050 <nrfx_twim_init+0xd4>)
   32fa8:	fb07 f70a 	mul.w	r7, r7, sl
   32fac:	19e9      	adds	r1, r5, r7
   32fae:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
   32fb2:	2800      	cmp	r0, #0
   32fb4:	d145      	bne.n	33042 <nrfx_twim_init+0xc6>
    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
    p_cb->int_mask        = 0;
    p_cb->repeated        = false;
    p_cb->busy            = false;
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   32fb6:	7b63      	ldrb	r3, [r4, #13]
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   32fb8:	f8d6 b000 	ldr.w	fp, [r6]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   32fbc:	f881 3032 	strb.w	r3, [r1, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   32fc0:	7ba3      	ldrb	r3, [r4, #14]
    p_cb->int_mask        = 0;
   32fc2:	6088      	str	r0, [r1, #8]
    p_cb->handler         = event_handler;
   32fc4:	f845 8007 	str.w	r8, [r5, r7]
    p_cb->p_context       = p_context;
   32fc8:	f8c1 9004 	str.w	r9, [r1, #4]
    p_cb->repeated        = false;
   32fcc:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    p_cb->busy            = false;
   32fd0:	f881 002f 	strb.w	r0, [r1, #47]	; 0x2f
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   32fd4:	f881 3033 	strb.w	r3, [r1, #51]	; 0x33
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   32fd8:	b1f3      	cbz	r3, 33018 <nrfx_twim_init+0x9c>
   32fda:	7be3      	ldrb	r3, [r4, #15]
   32fdc:	b92b      	cbnz	r3, 32fea <nrfx_twim_init+0x6e>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
   32fde:	e9d4 2300 	ldrd	r2, r3, [r4]

NRF_STATIC_INLINE void nrf_twim_pins_set(NRF_TWIM_Type * p_reg,
                                         uint32_t scl_pin,
                                         uint32_t sda_pin)
{
    p_reg->PSEL.SCL = scl_pin;
   32fe2:	f8cb 2508 	str.w	r2, [fp, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   32fe6:	f8cb 350c 	str.w	r3, [fp, #1292]	; 0x50c
    if (!twim_pins_configure(p_twim, p_config))
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
   32fea:	68a3      	ldr	r3, [r4, #8]
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   32fec:	f8cb 3524 	str.w	r3, [fp, #1316]	; 0x524

    if (p_cb->handler)
   32ff0:	2334      	movs	r3, #52	; 0x34
   32ff2:	fb03 f30a 	mul.w	r3, r3, sl
   32ff6:	58eb      	ldr	r3, [r5, r3]
   32ff8:	b123      	cbz	r3, 33004 <nrfx_twim_init+0x88>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   32ffa:	6830      	ldr	r0, [r6, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   32ffc:	f340 3007 	sbfx	r0, r0, #12, #8
   33000:	f7ef fd98 	bl	22b34 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   33004:	2334      	movs	r3, #52	; 0x34
   33006:	fb03 550a 	mla	r5, r3, sl, r5
   3300a:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   3300c:	4811      	ldr	r0, [pc, #68]	; (33054 <nrfx_twim_init+0xd8>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   3300e:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   33012:	b003      	add	sp, #12
   33014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        TWIM_PIN_INIT(p_config->scl, drive);
   33018:	6823      	ldr	r3, [r4, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3301a:	a801      	add	r0, sp, #4
    reg->PIN_CNF[pin_number] = cnf;
   3301c:	f240 670c 	movw	r7, #1548	; 0x60c
   33020:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   33022:	f7ff ff79 	bl	32f18 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   33026:	9b01      	ldr	r3, [sp, #4]
   33028:	3380      	adds	r3, #128	; 0x80
   3302a:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
        TWIM_PIN_INIT(p_config->sda, drive);
   3302e:	6863      	ldr	r3, [r4, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   33030:	a801      	add	r0, sp, #4
   33032:	9301      	str	r3, [sp, #4]
   33034:	f7ff ff70 	bl	32f18 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   33038:	9b01      	ldr	r3, [sp, #4]
   3303a:	3380      	adds	r3, #128	; 0x80
   3303c:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   33040:	e7cb      	b.n	32fda <nrfx_twim_init+0x5e>
        return err_code;
   33042:	4805      	ldr	r0, [pc, #20]	; (33058 <nrfx_twim_init+0xdc>)
   33044:	e7e5      	b.n	33012 <nrfx_twim_init+0x96>
   33046:	bf00      	nop
   33048:	0004b8bd 	.word	0x0004b8bd
   3304c:	00043ff2 	.word	0x00043ff2
   33050:	2001a434 	.word	0x2001a434
   33054:	0bad0000 	.word	0x0bad0000
   33058:	0bad0005 	.word	0x0bad0005

0003305c <nrfx_twim_enable>:
}

void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   3305c:	2334      	movs	r3, #52	; 0x34
{
   3305e:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   33060:	4c0f      	ldr	r4, [pc, #60]	; (330a0 <nrfx_twim_enable+0x44>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   33062:	7906      	ldrb	r6, [r0, #4]
{
   33064:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   33066:	fb03 4306 	mla	r3, r3, r6, r4
   3306a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   3306e:	2b01      	cmp	r3, #1
   33070:	d00a      	beq.n	33088 <nrfx_twim_enable+0x2c>
   33072:	490c      	ldr	r1, [pc, #48]	; (330a4 <nrfx_twim_enable+0x48>)
   33074:	480c      	ldr	r0, [pc, #48]	; (330a8 <nrfx_twim_enable+0x4c>)
   33076:	f240 1279 	movw	r2, #377	; 0x179
   3307a:	f009 fcdf 	bl	3ca3c <assert_print>
   3307e:	f240 1179 	movw	r1, #377	; 0x179
   33082:	4808      	ldr	r0, [pc, #32]	; (330a4 <nrfx_twim_enable+0x48>)
   33084:	f009 fcd3 	bl	3ca2e <assert_post_action>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   33088:	2206      	movs	r2, #6

    nrf_twim_enable(p_instance->p_twim);
   3308a:	682b      	ldr	r3, [r5, #0]
   3308c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   33090:	2334      	movs	r3, #52	; 0x34
   33092:	fb03 4406 	mla	r4, r3, r6, r4
   33096:	2302      	movs	r3, #2
   33098:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
   3309c:	bd70      	pop	{r4, r5, r6, pc}
   3309e:	bf00      	nop
   330a0:	2001a434 	.word	0x2001a434
   330a4:	0004b8bd 	.word	0x0004b8bd
   330a8:	00043ff2 	.word	0x00043ff2

000330ac <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   330ac:	2234      	movs	r2, #52	; 0x34
{
   330ae:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   330b0:	4c14      	ldr	r4, [pc, #80]	; (33104 <nrfx_twim_disable+0x58>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   330b2:	7906      	ldrb	r6, [r0, #4]
{
   330b4:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   330b6:	fb02 4206 	mla	r2, r2, r6, r4
   330ba:	f892 302d 	ldrb.w	r3, [r2, #45]	; 0x2d
   330be:	b953      	cbnz	r3, 330d6 <nrfx_twim_disable+0x2a>
   330c0:	4911      	ldr	r1, [pc, #68]	; (33108 <nrfx_twim_disable+0x5c>)
   330c2:	4812      	ldr	r0, [pc, #72]	; (3310c <nrfx_twim_disable+0x60>)
   330c4:	f44f 72c2 	mov.w	r2, #388	; 0x184
   330c8:	f009 fcb8 	bl	3ca3c <assert_print>
   330cc:	f44f 71c2 	mov.w	r1, #388	; 0x184
   330d0:	480d      	ldr	r0, [pc, #52]	; (33108 <nrfx_twim_disable+0x5c>)
   330d2:	f009 fcac 	bl	3ca2e <assert_post_action>

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    p_cb->int_mask = 0;
   330d6:	2334      	movs	r3, #52	; 0x34
   330d8:	2100      	movs	r1, #0
   330da:	fb03 4306 	mla	r3, r3, r6, r4
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   330de:	682a      	ldr	r2, [r5, #0]
    p_reg->INTENCLR = mask;
   330e0:	480b      	ldr	r0, [pc, #44]	; (33110 <nrfx_twim_disable+0x64>)
    p_cb->int_mask = 0;
   330e2:	6099      	str	r1, [r3, #8]
   330e4:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   330e8:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
   330ec:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
   330f0:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   330f4:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   330f8:	2201      	movs	r2, #1
    p_cb->busy = false;
   330fa:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   330fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
   33102:	bd70      	pop	{r4, r5, r6, pc}
   33104:	2001a434 	.word	0x2001a434
   33108:	0004b8bd 	.word	0x0004b8bd
   3310c:	00043ff2 	.word	0x00043ff2
   33110:	019c0202 	.word	0x019c0202

00033114 <nrfx_twim_uninit>:
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   33114:	2334      	movs	r3, #52	; 0x34
{
   33116:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   33118:	4d23      	ldr	r5, [pc, #140]	; (331a8 <nrfx_twim_uninit+0x94>)
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   3311a:	7906      	ldrb	r6, [r0, #4]
{
   3311c:	4604      	mov	r4, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   3311e:	fb03 5306 	mla	r3, r3, r6, r5
   33122:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   33126:	b953      	cbnz	r3, 3313e <nrfx_twim_uninit+0x2a>
   33128:	4920      	ldr	r1, [pc, #128]	; (331ac <nrfx_twim_uninit+0x98>)
   3312a:	4821      	ldr	r0, [pc, #132]	; (331b0 <nrfx_twim_uninit+0x9c>)
   3312c:	f44f 72b0 	mov.w	r2, #352	; 0x160
   33130:	f009 fc84 	bl	3ca3c <assert_print>
   33134:	f44f 71b0 	mov.w	r1, #352	; 0x160
   33138:	481c      	ldr	r0, [pc, #112]	; (331ac <nrfx_twim_uninit+0x98>)
   3313a:	f009 fc78 	bl	3ca2e <assert_post_action>
    if (p_cb->handler)
   3313e:	2334      	movs	r3, #52	; 0x34
   33140:	4373      	muls	r3, r6
   33142:	58eb      	ldr	r3, [r5, r3]
   33144:	b123      	cbz	r3, 33150 <nrfx_twim_uninit+0x3c>
   33146:	6820      	ldr	r0, [r4, #0]
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_twim));
   33148:	f340 3007 	sbfx	r0, r0, #12, #8
   3314c:	f7ef fd02 	bl	22b54 <arch_irq_disable>
    nrfx_twim_disable(p_instance);
   33150:	4620      	mov	r0, r4
   33152:	f7ff ffab 	bl	330ac <nrfx_twim_disable>
    if (!p_cb->skip_gpio_cfg && !p_cb->hold_bus_uninit)
   33156:	2334      	movs	r3, #52	; 0x34
   33158:	fb03 5306 	mla	r3, r3, r6, r5
   3315c:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
   33160:	b9ca      	cbnz	r2, 33196 <nrfx_twim_uninit+0x82>
   33162:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   33166:	b9b3      	cbnz	r3, 33196 <nrfx_twim_uninit+0x82>
        nrf_gpio_cfg_default(nrf_twim_scl_pin_get(p_instance->p_twim));
   33168:	6823      	ldr	r3, [r4, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3316a:	a801      	add	r0, sp, #4
    return p_reg->PSEL.SCL;
   3316c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   33170:	2702      	movs	r7, #2
   33172:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   33174:	f7ff fed0 	bl	32f18 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   33178:	9b01      	ldr	r3, [sp, #4]
   3317a:	3380      	adds	r3, #128	; 0x80
   3317c:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
        nrf_gpio_cfg_default(nrf_twim_sda_pin_get(p_instance->p_twim));
   33180:	6823      	ldr	r3, [r4, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   33182:	a801      	add	r0, sp, #4
    return p_reg->PSEL.SDA;
   33184:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
    nrf_gpio_cfg(
   33188:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3318a:	f7ff fec5 	bl	32f18 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   3318e:	9b01      	ldr	r3, [sp, #4]
   33190:	3380      	adds	r3, #128	; 0x80
   33192:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   33196:	2334      	movs	r3, #52	; 0x34
   33198:	fb03 5506 	mla	r5, r3, r6, r5
   3319c:	2300      	movs	r3, #0
   3319e:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   331a2:	b003      	add	sp, #12
   331a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   331a6:	bf00      	nop
   331a8:	2001a434 	.word	0x2001a434
   331ac:	0004b8bd 	.word	0x0004b8bd
   331b0:	00043ff2 	.word	0x00043ff2

000331b4 <nrfx_twim_xfer>:


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   331b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   331b8:	7903      	ldrb	r3, [r0, #4]
{
   331ba:	4604      	mov	r4, r0
   331bc:	460d      	mov	r5, r1
   331be:	4616      	mov	r6, r2
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   331c0:	b93b      	cbnz	r3, 331d2 <nrfx_twim_xfer+0x1e>
   331c2:	684b      	ldr	r3, [r1, #4]
   331c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   331c8:	d203      	bcs.n	331d2 <nrfx_twim_xfer+0x1e>
   331ca:	688b      	ldr	r3, [r1, #8]
   331cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   331d0:	d30a      	bcc.n	331e8 <nrfx_twim_xfer+0x34>
   331d2:	49ba      	ldr	r1, [pc, #744]	; (334bc <nrfx_twim_xfer+0x308>)
   331d4:	48ba      	ldr	r0, [pc, #744]	; (334c0 <nrfx_twim_xfer+0x30c>)
   331d6:	f240 2299 	movw	r2, #665	; 0x299
   331da:	f009 fc2f 	bl	3ca3c <assert_print>
   331de:	f240 2199 	movw	r1, #665	; 0x299
   331e2:	48b6      	ldr	r0, [pc, #728]	; (334bc <nrfx_twim_xfer+0x308>)
   331e4:	f009 fc23 	bl	3ca2e <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];

    // TXRX and TXTX transfers are supported only in non-blocking mode.
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   331e8:	2734      	movs	r7, #52	; 0x34
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   331ea:	f894 9004 	ldrb.w	r9, [r4, #4]
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   331ee:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 334d8 <nrfx_twim_xfer+0x324>
   331f2:	fb07 f709 	mul.w	r7, r7, r9
   331f6:	f858 3007 	ldr.w	r3, [r8, r7]
   331fa:	bb03      	cbnz	r3, 3323e <nrfx_twim_xfer+0x8a>
   331fc:	782b      	ldrb	r3, [r5, #0]
   331fe:	2b02      	cmp	r3, #2
   33200:	d00e      	beq.n	33220 <nrfx_twim_xfer+0x6c>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
   33202:	782b      	ldrb	r3, [r5, #0]
   33204:	2b03      	cmp	r3, #3
   33206:	d11a      	bne.n	3323e <nrfx_twim_xfer+0x8a>
   33208:	f240 22a2 	movw	r2, #674	; 0x2a2
   3320c:	49ab      	ldr	r1, [pc, #684]	; (334bc <nrfx_twim_xfer+0x308>)
   3320e:	48ac      	ldr	r0, [pc, #688]	; (334c0 <nrfx_twim_xfer+0x30c>)
   33210:	f009 fc14 	bl	3ca3c <assert_print>
   33214:	f240 21a2 	movw	r1, #674	; 0x2a2
   33218:	48a8      	ldr	r0, [pc, #672]	; (334bc <nrfx_twim_xfer+0x308>)
   3321a:	f009 fc08 	bl	3ca2e <assert_post_action>
   3321e:	e00e      	b.n	3323e <nrfx_twim_xfer+0x8a>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXRX)));
   33220:	f240 22a1 	movw	r2, #673	; 0x2a1
   33224:	49a5      	ldr	r1, [pc, #660]	; (334bc <nrfx_twim_xfer+0x308>)
   33226:	48a6      	ldr	r0, [pc, #664]	; (334c0 <nrfx_twim_xfer+0x30c>)
   33228:	f009 fc08 	bl	3ca3c <assert_print>
   3322c:	f240 21a1 	movw	r1, #673	; 0x2a1
   33230:	48a2      	ldr	r0, [pc, #648]	; (334bc <nrfx_twim_xfer+0x308>)
   33232:	f009 fbfc 	bl	3ca2e <assert_post_action>
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWIM_XFER_TXTX)));
   33236:	f858 3007 	ldr.w	r3, [r8, r7]
   3323a:	2b00      	cmp	r3, #0
   3323c:	d0e1      	beq.n	33202 <nrfx_twim_xfer+0x4e>
    p_cb->error = false;
   3323e:	2334      	movs	r3, #52	; 0x34
   33240:	2200      	movs	r2, #0
   33242:	fb03 8309 	mla	r3, r3, r9, r8
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   33246:	6824      	ldr	r4, [r4, #0]
    p_cb->error = false;
   33248:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   3324c:	686b      	ldr	r3, [r5, #4]
   3324e:	b14b      	cbz	r3, 33264 <nrfx_twim_xfer+0xb0>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   33250:	68eb      	ldr	r3, [r5, #12]
   33252:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   33256:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   3325a:	d003      	beq.n	33264 <nrfx_twim_xfer+0xb0>
        return err_code;
   3325c:	4f99      	ldr	r7, [pc, #612]	; (334c4 <nrfx_twim_xfer+0x310>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   3325e:	4638      	mov	r0, r7
   33260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
   33264:	2734      	movs	r7, #52	; 0x34
   33266:	fb07 8709 	mla	r7, r7, r9, r8
    p_reg->INTENCLR = mask;
   3326a:	4b97      	ldr	r3, [pc, #604]	; (334c8 <nrfx_twim_xfer+0x314>)
   3326c:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
   33270:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   33274:	f003 0aff 	and.w	sl, r3, #255	; 0xff
   33278:	b123      	cbz	r3, 33284 <nrfx_twim_xfer+0xd0>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   3327a:	68bb      	ldr	r3, [r7, #8]
        return err_code;
   3327c:	4f93      	ldr	r7, [pc, #588]	; (334cc <nrfx_twim_xfer+0x318>)
    p_reg->INTENSET = mask;
   3327e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   33282:	e7ec      	b.n	3325e <nrfx_twim_xfer+0xaa>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   33284:	f016 0f14 	tst.w	r6, #20
   33288:	bf0c      	ite	eq
   3328a:	2301      	moveq	r3, #1
   3328c:	2300      	movne	r3, #0
    p_cb->xfer_desc = *p_xfer_desc;
   3328e:	46ae      	mov	lr, r5
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   33290:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
   33294:	f107 0c0c 	add.w	ip, r7, #12
   33298:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   3329c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   332a0:	f8de 3000 	ldr.w	r3, [lr]
    p_cb->flags = flags;
   332a4:	623e      	str	r6, [r7, #32]
    p_cb->xfer_desc = *p_xfer_desc;
   332a6:	f8cc 3000 	str.w	r3, [ip]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   332aa:	f3c6 1300 	ubfx	r3, r6, #4, #1
   332ae:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
   332b2:	786b      	ldrb	r3, [r5, #1]
   332b4:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   332b8:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
   332bc:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   332c0:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
   332c4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   332c8:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
   332cc:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   332d0:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
   332d4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   332d8:	f016 0301 	ands.w	r3, r6, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   332dc:	bf18      	it	ne
   332de:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   332e0:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   332e4:	f016 0302 	ands.w	r3, r6, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   332e8:	bf18      	it	ne
   332ea:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   332ec:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
   332f0:	782b      	ldrb	r3, [r5, #0]
   332f2:	2b03      	cmp	r3, #3
   332f4:	f200 80df 	bhi.w	334b6 <nrfx_twim_xfer+0x302>
   332f8:	e8df f003 	tbb	[pc, r3]
   332fc:	0293caae 	.word	0x0293caae
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_REPEATED_XFER));
   33300:	06f3      	lsls	r3, r6, #27
   33302:	d50a      	bpl.n	3331a <nrfx_twim_xfer+0x166>
   33304:	496d      	ldr	r1, [pc, #436]	; (334bc <nrfx_twim_xfer+0x308>)
   33306:	486e      	ldr	r0, [pc, #440]	; (334c0 <nrfx_twim_xfer+0x30c>)
   33308:	f240 12dd 	movw	r2, #477	; 0x1dd
   3330c:	f009 fb96 	bl	3ca3c <assert_print>
   33310:	f240 11dd 	movw	r1, #477	; 0x1dd
   33314:	4869      	ldr	r0, [pc, #420]	; (334bc <nrfx_twim_xfer+0x308>)
   33316:	f009 fb8a 	bl	3ca2e <assert_post_action>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_HOLD_XFER));
   3331a:	0737      	lsls	r7, r6, #28
   3331c:	d50a      	bpl.n	33334 <nrfx_twim_xfer+0x180>
   3331e:	4967      	ldr	r1, [pc, #412]	; (334bc <nrfx_twim_xfer+0x308>)
   33320:	4867      	ldr	r0, [pc, #412]	; (334c0 <nrfx_twim_xfer+0x30c>)
   33322:	f44f 72ef 	mov.w	r2, #478	; 0x1de
   33326:	f009 fb89 	bl	3ca3c <assert_print>
   3332a:	f44f 71ef 	mov.w	r1, #478	; 0x1de
   3332e:	4863      	ldr	r0, [pc, #396]	; (334bc <nrfx_twim_xfer+0x308>)
   33330:	f009 fb7d 	bl	3ca2e <assert_post_action>
        NRFX_ASSERT(!(flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER));
   33334:	0770      	lsls	r0, r6, #29
   33336:	d50a      	bpl.n	3334e <nrfx_twim_xfer+0x19a>
   33338:	4960      	ldr	r1, [pc, #384]	; (334bc <nrfx_twim_xfer+0x308>)
   3333a:	4861      	ldr	r0, [pc, #388]	; (334c0 <nrfx_twim_xfer+0x30c>)
   3333c:	f240 12df 	movw	r2, #479	; 0x1df
   33340:	f009 fb7c 	bl	3ca3c <assert_print>
   33344:	f240 11df 	movw	r1, #479	; 0x1df
   33348:	485c      	ldr	r0, [pc, #368]	; (334bc <nrfx_twim_xfer+0x308>)
   3334a:	f009 fb70 	bl	3ca2e <assert_post_action>
   3334e:	692b      	ldr	r3, [r5, #16]
   33350:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   33354:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   33358:	d180      	bne.n	3325c <nrfx_twim_xfer+0xa8>
    p_reg->SHORTS = mask;
   3335a:	f44f 7280 	mov.w	r2, #256	; 0x100
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   3335e:	68e9      	ldr	r1, [r5, #12]
    p_reg->SHORTS = mask;
   33360:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   33364:	686a      	ldr	r2, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   33366:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   3336a:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3336e:	2200      	movs	r2, #0
   33370:	f8c4 2150 	str.w	r2, [r4, #336]	; 0x150
   33374:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   33378:	2101      	movs	r1, #1
   3337a:	6221      	str	r1, [r4, #32]
   3337c:	60a1      	str	r1, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3337e:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   33382:	2900      	cmp	r1, #0
   33384:	d0fb      	beq.n	3337e <nrfx_twim_xfer+0x1ca>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   33386:	f8c4 2150 	str.w	r2, [r4, #336]	; 0x150
   3338a:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   3338e:	68aa      	ldr	r2, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   33390:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   33394:	2334      	movs	r3, #52	; 0x34
    p_reg->TXD.MAXCNT = length;
   33396:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
   3339a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   3339e:	fb03 8309 	mla	r3, r3, r9, r8
   333a2:	609a      	str	r2, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   333a4:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   333a6:	4f4a      	ldr	r7, [pc, #296]	; (334d0 <nrfx_twim_xfer+0x31c>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   333a8:	0731      	lsls	r1, r6, #28
   333aa:	d407      	bmi.n	333bc <nrfx_twim_xfer+0x208>
   333ac:	782a      	ldrb	r2, [r5, #0]
   333ae:	2a03      	cmp	r2, #3
   333b0:	d004      	beq.n	333bc <nrfx_twim_xfer+0x208>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   333b2:	2201      	movs	r2, #1
   333b4:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
   333b6:	686b      	ldr	r3, [r5, #4]
   333b8:	b903      	cbnz	r3, 333bc <nrfx_twim_xfer+0x208>
   333ba:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
   333bc:	2334      	movs	r3, #52	; 0x34
   333be:	fb03 f309 	mul.w	r3, r3, r9
   333c2:	f858 2003 	ldr.w	r2, [r8, r3]
   333c6:	eb08 0103 	add.w	r1, r8, r3
   333ca:	2a00      	cmp	r2, #0
   333cc:	f040 8086 	bne.w	334dc <nrfx_twim_xfer+0x328>
                transmission_finished = true;
   333d0:	2101      	movs	r1, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   333d2:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   333d6:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   333da:	2800      	cmp	r0, #0
   333dc:	f040 8099 	bne.w	33512 <nrfx_twim_xfer+0x35e>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
   333e0:	3b00      	subs	r3, #0
   333e2:	bf18      	it	ne
   333e4:	2301      	movne	r3, #1
   333e6:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   333ea:	2800      	cmp	r0, #0
   333ec:	f000 8097 	beq.w	3351e <nrfx_twim_xfer+0x36a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   333f0:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   333f4:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   333f8:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
   333fc:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
   33400:	b115      	cbz	r5, 33408 <nrfx_twim_xfer+0x254>
   33402:	f410 7f00 	tst.w	r0, #512	; 0x200
   33406:	d104      	bne.n	33412 <nrfx_twim_xfer+0x25e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   33408:	6221      	str	r1, [r4, #32]
   3340a:	6161      	str	r1, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   3340c:	2d00      	cmp	r5, #0
   3340e:	d0e0      	beq.n	333d2 <nrfx_twim_xfer+0x21e>
                    transmission_finished = false;
   33410:	2300      	movs	r3, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   33412:	05c0      	lsls	r0, r0, #23
   33414:	f140 8083 	bpl.w	3351e <nrfx_twim_xfer+0x36a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   33418:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
   3341c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        } while (!transmission_finished);
   33420:	e7d7      	b.n	333d2 <nrfx_twim_xfer+0x21e>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   33422:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   33424:	68ea      	ldr	r2, [r5, #12]
   33426:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   3342a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   3342e:	692b      	ldr	r3, [r5, #16]
   33430:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   33434:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   33438:	f47f af10 	bne.w	3325c <nrfx_twim_xfer+0xa8>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   3343c:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   3343e:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
   33442:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
   33446:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   3344a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   3344e:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   33450:	2202      	movs	r2, #2
   33452:	fb03 8309 	mla	r3, r3, r9, r8
   33456:	e012      	b.n	3347e <nrfx_twim_xfer+0x2ca>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   33458:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   3345a:	68ea      	ldr	r2, [r5, #12]
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   3345c:	f016 0f20 	tst.w	r6, #32
   33460:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   33464:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   33468:	f04f 0334 	mov.w	r3, #52	; 0x34
   3346c:	d00b      	beq.n	33486 <nrfx_twim_xfer+0x2d2>
    p_reg->SHORTS = mask;
   3346e:	f44f 7280 	mov.w	r2, #256	; 0x100
   33472:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   33476:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   3347a:	fb03 8309 	mla	r3, r3, r9, r8
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   3347e:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   33480:	2301      	movs	r3, #1
   33482:	6223      	str	r3, [r4, #32]
   33484:	e78e      	b.n	333a4 <nrfx_twim_xfer+0x1f0>
    p_reg->SHORTS = mask;
   33486:	f44f 7200 	mov.w	r2, #512	; 0x200
   3348a:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
   3348e:	e7df      	b.n	33450 <nrfx_twim_xfer+0x29c>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   33490:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   33492:	68ea      	ldr	r2, [r5, #12]
   33494:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   33498:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   3349c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   334a0:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   334a4:	2334      	movs	r3, #52	; 0x34
   334a6:	2202      	movs	r2, #2
   334a8:	fb03 8309 	mla	r3, r3, r9, r8
   334ac:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   334ae:	2301      	movs	r3, #1
   334b0:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
   334b2:	2300      	movs	r3, #0
   334b4:	e777      	b.n	333a6 <nrfx_twim_xfer+0x1f2>
    switch (p_xfer_desc->type)
   334b6:	2308      	movs	r3, #8
   334b8:	4f06      	ldr	r7, [pc, #24]	; (334d4 <nrfx_twim_xfer+0x320>)
   334ba:	e775      	b.n	333a8 <nrfx_twim_xfer+0x1f4>
   334bc:	0004b8bd 	.word	0x0004b8bd
   334c0:	00043ff2 	.word	0x00043ff2
   334c4:	0bad000a 	.word	0x0bad000a
   334c8:	019c0202 	.word	0x019c0202
   334cc:	0bad000b 	.word	0x0bad000b
   334d0:	0bad0000 	.word	0x0bad0000
   334d4:	0bad0004 	.word	0x0bad0004
   334d8:	2001a434 	.word	0x2001a434
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   334dc:	0772      	lsls	r2, r6, #29
            p_cb->int_mask = 0;
   334de:	bf44      	itt	mi
   334e0:	2300      	movmi	r3, #0
   334e2:	608b      	strmi	r3, [r1, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
   334e4:	0673      	lsls	r3, r6, #25
   334e6:	d406      	bmi.n	334f6 <nrfx_twim_xfer+0x342>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
   334e8:	2334      	movs	r3, #52	; 0x34
   334ea:	fb03 8309 	mla	r3, r3, r9, r8
   334ee:	689a      	ldr	r2, [r3, #8]
   334f0:	f042 0202 	orr.w	r2, r2, #2
   334f4:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
   334f6:	2334      	movs	r3, #52	; 0x34
   334f8:	fb03 8809 	mla	r8, r3, r9, r8
   334fc:	f8d8 3008 	ldr.w	r3, [r8, #8]
   33500:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   33504:	f8c8 3008 	str.w	r3, [r8, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   33508:	f8d8 3008 	ldr.w	r3, [r8, #8]
    p_reg->INTENSET = mask;
   3350c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   33510:	e6a5      	b.n	3325e <nrfx_twim_xfer+0xaa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   33512:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   33516:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
                transmission_finished = true;
   3351a:	2301      	movs	r3, #1
   3351c:	e763      	b.n	333e6 <nrfx_twim_xfer+0x232>
        } while (!transmission_finished);
   3351e:	2b00      	cmp	r3, #0
   33520:	f43f af57 	beq.w	333d2 <nrfx_twim_xfer+0x21e>
        p_cb->busy = false;
   33524:	2134      	movs	r1, #52	; 0x34
   33526:	2000      	movs	r0, #0
   33528:	fb01 8209 	mla	r2, r1, r9, r8
    uint32_t error_source = p_reg->ERRORSRC;
   3352c:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   33530:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
   33534:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
   33538:	b18b      	cbz	r3, 3355e <nrfx_twim_xfer+0x3aa>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   3353a:	4a0f      	ldr	r2, [pc, #60]	; (33578 <nrfx_twim_xfer+0x3c4>)
   3353c:	f013 0f01 	tst.w	r3, #1
   33540:	4f0e      	ldr	r7, [pc, #56]	; (3357c <nrfx_twim_xfer+0x3c8>)
   33542:	bf18      	it	ne
   33544:	4617      	movne	r7, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   33546:	f013 0f02 	tst.w	r3, #2
   3354a:	f102 0201 	add.w	r2, r2, #1
   3354e:	bf18      	it	ne
   33550:	4617      	movne	r7, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   33552:	f013 0f04 	tst.w	r3, #4
   33556:	4b0a      	ldr	r3, [pc, #40]	; (33580 <nrfx_twim_xfer+0x3cc>)
   33558:	bf18      	it	ne
   3355a:	461f      	movne	r7, r3
   3355c:	e67f      	b.n	3325e <nrfx_twim_xfer+0xaa>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   3355e:	0673      	lsls	r3, r6, #25
   33560:	f53f ae7d 	bmi.w	3325e <nrfx_twim_xfer+0xaa>
                !xfer_completeness_check(p_twim, p_cb))
   33564:	4620      	mov	r0, r4
   33566:	fb09 8101 	mla	r1, r9, r1, r8
   3356a:	f00c fc7c 	bl	3fe66 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
   3356e:	4b03      	ldr	r3, [pc, #12]	; (3357c <nrfx_twim_xfer+0x3c8>)
   33570:	2800      	cmp	r0, #0
   33572:	bf08      	it	eq
   33574:	461f      	moveq	r7, r3
   33576:	e672      	b.n	3325e <nrfx_twim_xfer+0xaa>
   33578:	0bae0000 	.word	0x0bae0000
   3357c:	0bad0001 	.word	0x0bad0001
   33580:	0bae0002 	.word	0x0bae0002

00033584 <nrfx_twim_2_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TWIM2_ENABLED)
void nrfx_twim_2_irq_handler(void)
{
   33584:	b5f0      	push	{r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_cb->handler);
   33586:	4c61      	ldr	r4, [pc, #388]	; (3370c <nrfx_twim_2_irq_handler+0x188>)
{
   33588:	b087      	sub	sp, #28
    NRFX_ASSERT(p_cb->handler);
   3358a:	6823      	ldr	r3, [r4, #0]
   3358c:	b953      	cbnz	r3, 335a4 <nrfx_twim_2_irq_handler+0x20>
   3358e:	4960      	ldr	r1, [pc, #384]	; (33710 <nrfx_twim_2_irq_handler+0x18c>)
   33590:	4860      	ldr	r0, [pc, #384]	; (33714 <nrfx_twim_2_irq_handler+0x190>)
   33592:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   33596:	f009 fa51 	bl	3ca3c <assert_print>
   3359a:	f44f 7137 	mov.w	r1, #732	; 0x2dc
   3359e:	485c      	ldr	r0, [pc, #368]	; (33710 <nrfx_twim_2_irq_handler+0x18c>)
   335a0:	f009 fa45 	bl	3ca2e <assert_post_action>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   335a4:	4d5c      	ldr	r5, [pc, #368]	; (33718 <nrfx_twim_2_irq_handler+0x194>)
   335a6:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   335aa:	b1fb      	cbz	r3, 335ec <nrfx_twim_2_irq_handler+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   335ac:	2300      	movs	r3, #0
   335ae:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
   335b2:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   335b6:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   335ba:	b9bb      	cbnz	r3, 335ec <nrfx_twim_2_irq_handler+0x68>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   335bc:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   335be:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   335c2:	2302      	movs	r3, #2
   335c4:	60a3      	str	r3, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   335c6:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   335c8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   335cc:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
   335d0:	b11b      	cbz	r3, 335da <nrfx_twim_2_irq_handler+0x56>
    return p_reg->SHORTS;
   335d2:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
   335d6:	059e      	lsls	r6, r3, #22
   335d8:	d403      	bmi.n	335e2 <nrfx_twim_2_irq_handler+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   335da:	2201      	movs	r2, #1
   335dc:	4b4e      	ldr	r3, [pc, #312]	; (33718 <nrfx_twim_2_irq_handler+0x194>)
   335de:	621a      	str	r2, [r3, #32]
   335e0:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
   335e2:	2301      	movs	r3, #1
   335e4:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM2, &m_cb[NRFX_TWIM2_INST_IDX]);
}
   335e8:	b007      	add	sp, #28
   335ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   335ec:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   335f0:	2b00      	cmp	r3, #0
   335f2:	d054      	beq.n	3369e <nrfx_twim_2_irq_handler+0x11a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   335f4:	2300      	movs	r3, #0
   335f6:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   335fa:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
   335fe:	6a23      	ldr	r3, [r4, #32]
   33600:	065d      	lsls	r5, r3, #25
   33602:	d40a      	bmi.n	3361a <nrfx_twim_2_irq_handler+0x96>
   33604:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   33608:	b93b      	cbnz	r3, 3361a <nrfx_twim_2_irq_handler+0x96>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
   3360a:	4940      	ldr	r1, [pc, #256]	; (3370c <nrfx_twim_2_irq_handler+0x188>)
   3360c:	4842      	ldr	r0, [pc, #264]	; (33718 <nrfx_twim_2_irq_handler+0x194>)
   3360e:	f00c fc2a 	bl	3fe66 <xfer_completeness_check>
   33612:	f080 0001 	eor.w	r0, r0, #1
   33616:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   3361a:	6a23      	ldr	r3, [r4, #32]
   3361c:	f013 0704 	ands.w	r7, r3, #4
   33620:	d122      	bne.n	33668 <nrfx_twim_2_irq_handler+0xe4>
            event.xfer_desc = p_cb->xfer_desc;
   33622:	4e3e      	ldr	r6, [pc, #248]	; (3371c <nrfx_twim_2_irq_handler+0x198>)
   33624:	ad01      	add	r5, sp, #4
   33626:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   33628:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   3362a:	6833      	ldr	r3, [r6, #0]
            if (!p_cb->repeated || p_cb->error)
   3362c:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
            event.xfer_desc = p_cb->xfer_desc;
   33630:	602b      	str	r3, [r5, #0]
   33632:	4b39      	ldr	r3, [pc, #228]	; (33718 <nrfx_twim_2_irq_handler+0x194>)
   33634:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
   33638:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
   3363c:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
   33640:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
   33644:	f1bc 0f00 	cmp.w	ip, #0
   33648:	d002      	beq.n	33650 <nrfx_twim_2_irq_handler+0xcc>
   3364a:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
   3364e:	b15a      	cbz	r2, 33668 <nrfx_twim_2_irq_handler+0xe4>
    p_reg->SHORTS = mask;
   33650:	2200      	movs	r2, #0
   33652:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
   33656:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   33658:	4a31      	ldr	r2, [pc, #196]	; (33720 <nrfx_twim_2_irq_handler+0x19c>)
   3365a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   3365e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   33662:	4b30      	ldr	r3, [pc, #192]	; (33724 <nrfx_twim_2_irq_handler+0x1a0>)
   33664:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
   33668:	4a2b      	ldr	r2, [pc, #172]	; (33718 <nrfx_twim_2_irq_handler+0x194>)
   3366a:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   3366e:	0798      	lsls	r0, r3, #30
    p_reg->ERRORSRC = error_source;
   33670:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
   33674:	d53c      	bpl.n	336f0 <nrfx_twim_2_irq_handler+0x16c>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   33676:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
   33678:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
   3367c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   33680:	b90b      	cbnz	r3, 33686 <nrfx_twim_2_irq_handler+0x102>
        p_cb->busy = false;
   33682:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
   33686:	6a23      	ldr	r3, [r4, #32]
   33688:	075b      	lsls	r3, r3, #29
   3368a:	d503      	bpl.n	33694 <nrfx_twim_2_irq_handler+0x110>
   3368c:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   33690:	2b00      	cmp	r3, #0
   33692:	d0a9      	beq.n	335e8 <nrfx_twim_2_irq_handler+0x64>
        p_cb->handler(&event, p_cb->p_context);
   33694:	e9d4 3100 	ldrd	r3, r1, [r4]
   33698:	4668      	mov	r0, sp
   3369a:	4798      	blx	r3
}
   3369c:	e7a4      	b.n	335e8 <nrfx_twim_2_irq_handler+0x64>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3369e:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
   336a2:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   336a6:	7b23      	ldrb	r3, [r4, #12]
   336a8:	b983      	cbnz	r3, 336cc <nrfx_twim_2_irq_handler+0x148>
            event.xfer_desc = p_cb->xfer_desc;
   336aa:	4f1c      	ldr	r7, [pc, #112]	; (3371c <nrfx_twim_2_irq_handler+0x198>)
   336ac:	ae01      	add	r6, sp, #4
   336ae:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   336b0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   336b2:	683b      	ldr	r3, [r7, #0]
   336b4:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   336b6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   336ba:	2b00      	cmp	r3, #0
   336bc:	d1d4      	bne.n	33668 <nrfx_twim_2_irq_handler+0xe4>
    p_reg->SHORTS = mask;
   336be:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
   336c2:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   336c4:	4b16      	ldr	r3, [pc, #88]	; (33720 <nrfx_twim_2_irq_handler+0x19c>)
   336c6:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   336ca:	e7c8      	b.n	3365e <nrfx_twim_2_irq_handler+0xda>
    p_reg->SHORTS = mask;
   336cc:	f44f 7300 	mov.w	r3, #512	; 0x200
   336d0:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   336d4:	f240 2302 	movw	r3, #514	; 0x202
   336d8:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   336da:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   336de:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   336e2:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   336e4:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   336e8:	2301      	movs	r3, #1
   336ea:	60ab      	str	r3, [r5, #8]
   336ec:	622b      	str	r3, [r5, #32]
            return;
   336ee:	e77b      	b.n	335e8 <nrfx_twim_2_irq_handler+0x64>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   336f0:	0759      	lsls	r1, r3, #29
   336f2:	d501      	bpl.n	336f8 <nrfx_twim_2_irq_handler+0x174>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
   336f4:	2302      	movs	r3, #2
   336f6:	e7bf      	b.n	33678 <nrfx_twim_2_irq_handler+0xf4>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   336f8:	07da      	lsls	r2, r3, #31
   336fa:	d501      	bpl.n	33700 <nrfx_twim_2_irq_handler+0x17c>
        event.type = NRFX_TWIM_EVT_OVERRUN;
   336fc:	2303      	movs	r3, #3
   336fe:	e7bb      	b.n	33678 <nrfx_twim_2_irq_handler+0xf4>
    else if (p_cb->error)
   33700:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   33704:	2b00      	cmp	r3, #0
   33706:	d0b7      	beq.n	33678 <nrfx_twim_2_irq_handler+0xf4>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
   33708:	2304      	movs	r3, #4
   3370a:	e7b5      	b.n	33678 <nrfx_twim_2_irq_handler+0xf4>
   3370c:	2001a434 	.word	0x2001a434
   33710:	0004b8bd 	.word	0x0004b8bd
   33714:	00043ff2 	.word	0x00043ff2
   33718:	4000a000 	.word	0x4000a000
   3371c:	2001a440 	.word	0x2001a440
   33720:	019c0202 	.word	0x019c0202
   33724:	e000e100 	.word	0xe000e100

00033728 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   33728:	6803      	ldr	r3, [r0, #0]
{
   3372a:	b510      	push	{r4, lr}
    switch (port)
   3372c:	095a      	lsrs	r2, r3, #5
   3372e:	bf0c      	ite	eq
   33730:	f04f 32ff 	moveq.w	r2, #4294967295
   33734:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   33736:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   3373a:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   3373e:	07db      	lsls	r3, r3, #31
{
   33740:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   33742:	d40a      	bmi.n	3375a <nrf_gpio_pin_port_decode+0x32>
   33744:	490e      	ldr	r1, [pc, #56]	; (33780 <nrf_gpio_pin_port_decode+0x58>)
   33746:	480f      	ldr	r0, [pc, #60]	; (33784 <nrf_gpio_pin_port_decode+0x5c>)
   33748:	f240 2229 	movw	r2, #553	; 0x229
   3374c:	f009 f976 	bl	3ca3c <assert_print>
   33750:	f240 2129 	movw	r1, #553	; 0x229
   33754:	480a      	ldr	r0, [pc, #40]	; (33780 <nrf_gpio_pin_port_decode+0x58>)
   33756:	f009 f96a 	bl	3ca2e <assert_post_action>
    uint32_t pin_number = *p_pin;
   3375a:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   3375c:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   33760:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   33762:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   33764:	d00a      	beq.n	3377c <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
   33766:	4906      	ldr	r1, [pc, #24]	; (33780 <nrf_gpio_pin_port_decode+0x58>)
   33768:	4806      	ldr	r0, [pc, #24]	; (33784 <nrf_gpio_pin_port_decode+0x5c>)
   3376a:	f240 222e 	movw	r2, #558	; 0x22e
   3376e:	f009 f965 	bl	3ca3c <assert_print>
   33772:	f240 212e 	movw	r1, #558	; 0x22e
   33776:	4802      	ldr	r0, [pc, #8]	; (33780 <nrf_gpio_pin_port_decode+0x58>)
   33778:	f009 f959 	bl	3ca2e <assert_post_action>
}
   3377c:	4802      	ldr	r0, [pc, #8]	; (33788 <nrf_gpio_pin_port_decode+0x60>)
   3377e:	bd10      	pop	{r4, pc}
   33780:	00044bd5 	.word	0x00044bd5
   33784:	00043ff2 	.word	0x00043ff2
   33788:	40842500 	.word	0x40842500

0003378c <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   3378c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3378e:	460c      	mov	r4, r1
   33790:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
   33792:	f00c fb98 	bl	3fec6 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
   33796:	4620      	mov	r0, r4
   33798:	f00c fb95 	bl	3fec6 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3379c:	a801      	add	r0, sp, #4
    reg->PIN_CNF[pin_number] = cnf;
   3379e:	f240 650d 	movw	r5, #1549	; 0x60d
   337a2:	9601      	str	r6, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   337a4:	f7ff ffc0 	bl	33728 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   337a8:	9b01      	ldr	r3, [sp, #4]
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   337aa:	2701      	movs	r7, #1
    reg->PIN_CNF[pin_number] = cnf;
   337ac:	3380      	adds	r3, #128	; 0x80
   337ae:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   337b2:	a801      	add	r0, sp, #4
   337b4:	9401      	str	r4, [sp, #4]
   337b6:	f7ff ffb7 	bl	33728 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   337ba:	9b01      	ldr	r3, [sp, #4]
   337bc:	3380      	adds	r3, #128	; 0x80
   337be:	f840 5023 	str.w	r5, [r0, r3, lsl #2]

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   337c2:	2004      	movs	r0, #4
   337c4:	f00c facf 	bl	3fd66 <nrfx_busy_wait>
   337c8:	2509      	movs	r5, #9
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   337ca:	a801      	add	r0, sp, #4
   337cc:	9401      	str	r4, [sp, #4]
   337ce:	f7ff ffab 	bl	33728 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   337d2:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   337d4:	6903      	ldr	r3, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   337d6:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
   337d8:	07db      	lsls	r3, r3, #31
   337da:	d414      	bmi.n	33806 <nrfx_twi_twim_bus_recover+0x7a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   337dc:	a801      	add	r0, sp, #4
   337de:	9601      	str	r6, [sp, #4]
   337e0:	f7ff ffa2 	bl	33728 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   337e4:	9b01      	ldr	r3, [sp, #4]
    for (uint8_t i = 0; i < 9; i++)
   337e6:	3d01      	subs	r5, #1
   337e8:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
   337ec:	60c3      	str	r3, [r0, #12]
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   337ee:	2004      	movs	r0, #4
   337f0:	f00c fab9 	bl	3fd66 <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
   337f4:	4630      	mov	r0, r6
   337f6:	f00c fb66 	bl	3fec6 <nrf_gpio_pin_set>
            NRFX_DELAY_US(4);
   337fa:	2004      	movs	r0, #4
   337fc:	f00c fab3 	bl	3fd66 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   33800:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   33804:	d1e1      	bne.n	337ca <nrfx_twi_twim_bus_recover+0x3e>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   33806:	a801      	add	r0, sp, #4
   33808:	9401      	str	r4, [sp, #4]
   3380a:	f7ff ff8d 	bl	33728 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   3380e:	2301      	movs	r3, #1
   33810:	9a01      	ldr	r2, [sp, #4]
   33812:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   33814:	60c3      	str	r3, [r0, #12]
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   33816:	2004      	movs	r0, #4
   33818:	f00c faa5 	bl	3fd66 <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
   3381c:	4620      	mov	r0, r4
   3381e:	f00c fb52 	bl	3fec6 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
   33822:	2004      	movs	r0, #4
   33824:	f00c fa9f 	bl	3fd66 <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   33828:	a801      	add	r0, sp, #4
   3382a:	9401      	str	r4, [sp, #4]
   3382c:	f7ff ff7c 	bl	33728 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   33830:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   33832:	6903      	ldr	r3, [r0, #16]
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   33834:	4803      	ldr	r0, [pc, #12]	; (33844 <nrfx_twi_twim_bus_recover+0xb8>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   33836:	40d3      	lsrs	r3, r2
   33838:	f003 0301 	and.w	r3, r3, #1
   3383c:	1ac0      	subs	r0, r0, r3
   3383e:	b003      	add	sp, #12
   33840:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33842:	bf00      	nop
   33844:	0bad0001 	.word	0x0bad0001

00033848 <rpc_handle_data_message>:
   33848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3384c:	4680      	mov	r8, r0
   3384e:	4605      	mov	r5, r0
   33850:	2404      	movs	r4, #4
   33852:	f858 7b08 	ldr.w	r7, [r8], #8
   33856:	4e0c      	ldr	r6, [pc, #48]	; (33888 <rpc_handle_data_message+0x40>)
   33858:	b2ff      	uxtb	r7, r7
   3385a:	7833      	ldrb	r3, [r6, #0]
   3385c:	42bb      	cmp	r3, r7
   3385e:	d009      	beq.n	33874 <rpc_handle_data_message+0x2c>
   33860:	3c01      	subs	r4, #1
   33862:	f106 060c 	add.w	r6, r6, #12
   33866:	d1f8      	bne.n	3385a <rpc_handle_data_message+0x12>
   33868:	68a8      	ldr	r0, [r5, #8]
   3386a:	b108      	cbz	r0, 33870 <rpc_handle_data_message+0x28>
   3386c:	f00c fb7b 	bl	3ff66 <rpc_transport_peer_data_free>
   33870:	4620      	mov	r0, r4
   33872:	e006      	b.n	33882 <rpc_handle_data_message+0x3a>
   33874:	6829      	ldr	r1, [r5, #0]
   33876:	4640      	mov	r0, r8
   33878:	6873      	ldr	r3, [r6, #4]
   3387a:	0c09      	lsrs	r1, r1, #16
   3387c:	4798      	blx	r3
   3387e:	2802      	cmp	r0, #2
   33880:	d0ee      	beq.n	33860 <rpc_handle_data_message+0x18>
   33882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33886:	bf00      	nop
   33888:	000430b8 	.word	0x000430b8

0003388c <trace_write>:
   3388c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33890:	7803      	ldrb	r3, [r0, #0]
   33892:	4605      	mov	r5, r0
   33894:	2b62      	cmp	r3, #98	; 0x62
   33896:	d045      	beq.n	33924 <trace_write+0x98>
   33898:	2b63      	cmp	r3, #99	; 0x63
   3389a:	d048      	beq.n	3392e <trace_write+0xa2>
   3389c:	2b61      	cmp	r3, #97	; 0x61
   3389e:	f040 8083 	bne.w	339a8 <trace_write+0x11c>
   338a2:	4b42      	ldr	r3, [pc, #264]	; (339ac <trace_write+0x120>)
   338a4:	8819      	ldrh	r1, [r3, #0]
   338a6:	4b42      	ldr	r3, [pc, #264]	; (339b0 <trace_write+0x124>)
   338a8:	b289      	uxth	r1, r1
   338aa:	6928      	ldr	r0, [r5, #16]
   338ac:	f8d5 800c 	ldr.w	r8, [r5, #12]
   338b0:	68aa      	ldr	r2, [r5, #8]
   338b2:	eba0 0708 	sub.w	r7, r0, r8
   338b6:	eba2 0208 	sub.w	r2, r2, r8
   338ba:	b2bf      	uxth	r7, r7
   338bc:	fa11 f282 	uxtah	r2, r1, r2
   338c0:	fbb2 f1f7 	udiv	r1, r2, r7
   338c4:	681b      	ldr	r3, [r3, #0]
   338c6:	fb07 2211 	mls	r2, r7, r1, r2
   338ca:	eba3 0308 	sub.w	r3, r3, r8
   338ce:	b29b      	uxth	r3, r3
   338d0:	1a9b      	subs	r3, r3, r2
   338d2:	443b      	add	r3, r7
   338d4:	fb93 f1f7 	sdiv	r1, r3, r7
   338d8:	fb07 3311 	mls	r3, r7, r1, r3
   338dc:	fa1f f983 	uxth.w	r9, r3
   338e0:	fa12 f383 	uxtah	r3, r2, r3
   338e4:	429f      	cmp	r7, r3
   338e6:	4490      	add	r8, r2
   338e8:	bfbf      	itttt	lt
   338ea:	eba0 0008 	sublt.w	r0, r0, r8
   338ee:	b280      	uxthlt	r0, r0
   338f0:	eba9 0400 	sublt.w	r4, r9, r0
   338f4:	4681      	movlt	r9, r0
   338f6:	bfac      	ite	ge
   338f8:	2400      	movge	r4, #0
   338fa:	b2a4      	uxthlt	r4, r4
   338fc:	f1b9 0f00 	cmp.w	r9, #0
   33900:	d052      	beq.n	339a8 <trace_write+0x11c>
   33902:	2005      	movs	r0, #5
   33904:	f7f2 f8a6 	bl	25a54 <nrf_modem_os_trace_alloc>
   33908:	4607      	mov	r7, r0
   3390a:	2800      	cmp	r0, #0
   3390c:	d04c      	beq.n	339a8 <trace_write+0x11c>
   3390e:	b19c      	cbz	r4, 33938 <trace_write+0xac>
   33910:	2005      	movs	r0, #5
   33912:	f7f2 f89f 	bl	25a54 <nrf_modem_os_trace_alloc>
   33916:	4606      	mov	r6, r0
   33918:	b970      	cbnz	r0, 33938 <trace_write+0xac>
   3391a:	4638      	mov	r0, r7
   3391c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33920:	f7f2 b8a0 	b.w	25a64 <nrf_modem_os_trace_free>
   33924:	4b23      	ldr	r3, [pc, #140]	; (339b4 <trace_write+0x128>)
   33926:	8819      	ldrh	r1, [r3, #0]
   33928:	4b23      	ldr	r3, [pc, #140]	; (339b8 <trace_write+0x12c>)
   3392a:	b289      	uxth	r1, r1
   3392c:	e7bd      	b.n	338aa <trace_write+0x1e>
   3392e:	4b23      	ldr	r3, [pc, #140]	; (339bc <trace_write+0x130>)
   33930:	8819      	ldrh	r1, [r3, #0]
   33932:	4b23      	ldr	r3, [pc, #140]	; (339c0 <trace_write+0x134>)
   33934:	b289      	uxth	r1, r1
   33936:	e7b8      	b.n	338aa <trace_write+0x1e>
   33938:	782a      	ldrb	r2, [r5, #0]
   3393a:	2a62      	cmp	r2, #98	; 0x62
   3393c:	d030      	beq.n	339a0 <trace_write+0x114>
   3393e:	2a63      	cmp	r2, #99	; 0x63
   33940:	d030      	beq.n	339a4 <trace_write+0x118>
   33942:	2a61      	cmp	r2, #97	; 0x61
   33944:	d107      	bne.n	33956 <trace_write+0xca>
   33946:	4919      	ldr	r1, [pc, #100]	; (339ac <trace_write+0x120>)
   33948:	880b      	ldrh	r3, [r1, #0]
   3394a:	eb09 0004 	add.w	r0, r9, r4
   3394e:	fa10 f383 	uxtah	r3, r0, r3
   33952:	b29b      	uxth	r3, r3
   33954:	800b      	strh	r3, [r1, #0]
   33956:	f06f 0b10 	mvn.w	fp, #16
   3395a:	f06f 0a41 	mvn.w	sl, #65	; 0x41
   3395e:	2105      	movs	r1, #5
   33960:	4638      	mov	r0, r7
   33962:	f887 b000 	strb.w	fp, [r7]
   33966:	f887 a001 	strb.w	sl, [r7, #1]
   3396a:	713a      	strb	r2, [r7, #4]
   3396c:	f8a7 9002 	strh.w	r9, [r7, #2]
   33970:	f00b f9c7 	bl	3ed02 <nrf_modem_os_trace_put>
   33974:	4649      	mov	r1, r9
   33976:	4640      	mov	r0, r8
   33978:	f00b f9c3 	bl	3ed02 <nrf_modem_os_trace_put>
   3397c:	b1a4      	cbz	r4, 339a8 <trace_write+0x11c>
   3397e:	f886 b000 	strb.w	fp, [r6]
   33982:	f886 a001 	strb.w	sl, [r6, #1]
   33986:	782b      	ldrb	r3, [r5, #0]
   33988:	2105      	movs	r1, #5
   3398a:	4630      	mov	r0, r6
   3398c:	7133      	strb	r3, [r6, #4]
   3398e:	8074      	strh	r4, [r6, #2]
   33990:	f00b f9b7 	bl	3ed02 <nrf_modem_os_trace_put>
   33994:	4621      	mov	r1, r4
   33996:	68e8      	ldr	r0, [r5, #12]
   33998:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3399c:	f00b b9b1 	b.w	3ed02 <nrf_modem_os_trace_put>
   339a0:	4904      	ldr	r1, [pc, #16]	; (339b4 <trace_write+0x128>)
   339a2:	e7d1      	b.n	33948 <trace_write+0xbc>
   339a4:	4905      	ldr	r1, [pc, #20]	; (339bc <trace_write+0x130>)
   339a6:	e7cf      	b.n	33948 <trace_write+0xbc>
   339a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   339ac:	2001a598 	.word	0x2001a598
   339b0:	2001a470 	.word	0x2001a470
   339b4:	2001a594 	.word	0x2001a594
   339b8:	2001a468 	.word	0x2001a468
   339bc:	2001a596 	.word	0x2001a596
   339c0:	2001a46c 	.word	0x2001a46c

000339c4 <ipc_trace_init>:
   339c4:	2300      	movs	r3, #0
   339c6:	4a04      	ldr	r2, [pc, #16]	; (339d8 <ipc_trace_init+0x14>)
   339c8:	8013      	strh	r3, [r2, #0]
   339ca:	4a04      	ldr	r2, [pc, #16]	; (339dc <ipc_trace_init+0x18>)
   339cc:	8013      	strh	r3, [r2, #0]
   339ce:	4a04      	ldr	r2, [pc, #16]	; (339e0 <ipc_trace_init+0x1c>)
   339d0:	8013      	strh	r3, [r2, #0]
   339d2:	4b04      	ldr	r3, [pc, #16]	; (339e4 <ipc_trace_init+0x20>)
   339d4:	6018      	str	r0, [r3, #0]
   339d6:	4770      	bx	lr
   339d8:	2001a598 	.word	0x2001a598
   339dc:	2001a594 	.word	0x2001a594
   339e0:	2001a596 	.word	0x2001a596
   339e4:	2001a480 	.word	0x2001a480

000339e8 <nrf_modem_trace_irq_handler>:
   339e8:	b508      	push	{r3, lr}
   339ea:	4b10      	ldr	r3, [pc, #64]	; (33a2c <nrf_modem_trace_irq_handler+0x44>)
   339ec:	781b      	ldrb	r3, [r3, #0]
   339ee:	b90b      	cbnz	r3, 339f4 <nrf_modem_trace_irq_handler+0xc>
   339f0:	f7f2 f804 	bl	259fc <nrf_modem_os_trace_irq_clear>
   339f4:	4b0e      	ldr	r3, [pc, #56]	; (33a30 <nrf_modem_trace_irq_handler+0x48>)
   339f6:	6818      	ldr	r0, [r3, #0]
   339f8:	6842      	ldr	r2, [r0, #4]
   339fa:	6883      	ldr	r3, [r0, #8]
   339fc:	429a      	cmp	r2, r3
   339fe:	d001      	beq.n	33a04 <nrf_modem_trace_irq_handler+0x1c>
   33a00:	f7ff ff44 	bl	3388c <trace_write>
   33a04:	4b0b      	ldr	r3, [pc, #44]	; (33a34 <nrf_modem_trace_irq_handler+0x4c>)
   33a06:	6818      	ldr	r0, [r3, #0]
   33a08:	6882      	ldr	r2, [r0, #8]
   33a0a:	6843      	ldr	r3, [r0, #4]
   33a0c:	429a      	cmp	r2, r3
   33a0e:	d001      	beq.n	33a14 <nrf_modem_trace_irq_handler+0x2c>
   33a10:	f7ff ff3c 	bl	3388c <trace_write>
   33a14:	4b08      	ldr	r3, [pc, #32]	; (33a38 <nrf_modem_trace_irq_handler+0x50>)
   33a16:	6818      	ldr	r0, [r3, #0]
   33a18:	6882      	ldr	r2, [r0, #8]
   33a1a:	6843      	ldr	r3, [r0, #4]
   33a1c:	429a      	cmp	r2, r3
   33a1e:	d003      	beq.n	33a28 <nrf_modem_trace_irq_handler+0x40>
   33a20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   33a24:	f7ff bf32 	b.w	3388c <trace_write>
   33a28:	bd08      	pop	{r3, pc}
   33a2a:	bf00      	nop
   33a2c:	2001d3bb 	.word	0x2001d3bb
   33a30:	2001a47c 	.word	0x2001a47c
   33a34:	2001a474 	.word	0x2001a474
   33a38:	2001a478 	.word	0x2001a478

00033a3c <ipc_trace_handle>:
   33a3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33a40:	4b55      	ldr	r3, [pc, #340]	; (33b98 <ipc_trace_handle+0x15c>)
   33a42:	681b      	ldr	r3, [r3, #0]
   33a44:	6919      	ldr	r1, [r3, #16]
   33a46:	f8d3 b014 	ldr.w	fp, [r3, #20]
   33a4a:	7c1a      	ldrb	r2, [r3, #16]
   33a4c:	2200      	movs	r2, #0
   33a4e:	741a      	strb	r2, [r3, #16]
   33a50:	7c58      	ldrb	r0, [r3, #17]
   33a52:	745a      	strb	r2, [r3, #17]
   33a54:	7c98      	ldrb	r0, [r3, #18]
   33a56:	749a      	strb	r2, [r3, #18]
   33a58:	7cd8      	ldrb	r0, [r3, #19]
   33a5a:	74da      	strb	r2, [r3, #19]
   33a5c:	7d18      	ldrb	r0, [r3, #20]
   33a5e:	751a      	strb	r2, [r3, #20]
   33a60:	7d58      	ldrb	r0, [r3, #21]
   33a62:	755a      	strb	r2, [r3, #21]
   33a64:	7d98      	ldrb	r0, [r3, #22]
   33a66:	759a      	strb	r2, [r3, #22]
   33a68:	7dd8      	ldrb	r0, [r3, #23]
   33a6a:	75da      	strb	r2, [r3, #23]
   33a6c:	2900      	cmp	r1, #0
   33a6e:	d047      	beq.n	33b00 <ipc_trace_handle+0xc4>
   33a70:	3901      	subs	r1, #1
   33a72:	2903      	cmp	r1, #3
   33a74:	d844      	bhi.n	33b00 <ipc_trace_handle+0xc4>
   33a76:	e8df f001 	tbb	[pc, r1]
   33a7a:	7b02      	.short	0x7b02
   33a7c:	6962      	.short	0x6962
   33a7e:	4a47      	ldr	r2, [pc, #284]	; (33b9c <ipc_trace_handle+0x160>)
   33a80:	7811      	ldrb	r1, [r2, #0]
   33a82:	b109      	cbz	r1, 33a88 <ipc_trace_handle+0x4c>
   33a84:	2100      	movs	r1, #0
   33a86:	7011      	strb	r1, [r2, #0]
   33a88:	2100      	movs	r1, #0
   33a8a:	468e      	mov	lr, r1
   33a8c:	468a      	mov	sl, r1
   33a8e:	4608      	mov	r0, r1
   33a90:	f8db 2008 	ldr.w	r2, [fp, #8]
   33a94:	4d42      	ldr	r5, [pc, #264]	; (33ba0 <ipc_trace_handle+0x164>)
   33a96:	9201      	str	r2, [sp, #4]
   33a98:	4a42      	ldr	r2, [pc, #264]	; (33ba4 <ipc_trace_handle+0x168>)
   33a9a:	682e      	ldr	r6, [r5, #0]
   33a9c:	6812      	ldr	r2, [r2, #0]
   33a9e:	9200      	str	r2, [sp, #0]
   33aa0:	4a41      	ldr	r2, [pc, #260]	; (33ba8 <ipc_trace_handle+0x16c>)
   33aa2:	f8d2 c000 	ldr.w	ip, [r2]
   33aa6:	4a41      	ldr	r2, [pc, #260]	; (33bac <ipc_trace_handle+0x170>)
   33aa8:	6817      	ldr	r7, [r2, #0]
   33aaa:	4a41      	ldr	r2, [pc, #260]	; (33bb0 <ipc_trace_handle+0x174>)
   33aac:	f8d2 9000 	ldr.w	r9, [r2]
   33ab0:	4a40      	ldr	r2, [pc, #256]	; (33bb4 <ipc_trace_handle+0x178>)
   33ab2:	f8d2 8000 	ldr.w	r8, [r2]
   33ab6:	9a01      	ldr	r2, [sp, #4]
   33ab8:	4282      	cmp	r2, r0
   33aba:	d124      	bne.n	33b06 <ipc_trace_handle+0xca>
   33abc:	f1ba 0f00 	cmp.w	sl, #0
   33ac0:	d005      	beq.n	33ace <ipc_trace_handle+0x92>
   33ac2:	4a3b      	ldr	r2, [pc, #236]	; (33bb0 <ipc_trace_handle+0x174>)
   33ac4:	f8c2 9000 	str.w	r9, [r2]
   33ac8:	4a3a      	ldr	r2, [pc, #232]	; (33bb4 <ipc_trace_handle+0x178>)
   33aca:	f8c2 8000 	str.w	r8, [r2]
   33ace:	f1be 0f00 	cmp.w	lr, #0
   33ad2:	d004      	beq.n	33ade <ipc_trace_handle+0xa2>
   33ad4:	4a34      	ldr	r2, [pc, #208]	; (33ba8 <ipc_trace_handle+0x16c>)
   33ad6:	f8c2 c000 	str.w	ip, [r2]
   33ada:	4a34      	ldr	r2, [pc, #208]	; (33bac <ipc_trace_handle+0x170>)
   33adc:	6017      	str	r7, [r2, #0]
   33ade:	b119      	cbz	r1, 33ae8 <ipc_trace_handle+0xac>
   33ae0:	4a30      	ldr	r2, [pc, #192]	; (33ba4 <ipc_trace_handle+0x168>)
   33ae2:	9900      	ldr	r1, [sp, #0]
   33ae4:	602e      	str	r6, [r5, #0]
   33ae6:	6011      	str	r1, [r2, #0]
   33ae8:	7a1a      	ldrb	r2, [r3, #8]
   33aea:	2101      	movs	r1, #1
   33aec:	2200      	movs	r2, #0
   33aee:	7219      	strb	r1, [r3, #8]
   33af0:	7a59      	ldrb	r1, [r3, #9]
   33af2:	725a      	strb	r2, [r3, #9]
   33af4:	7a99      	ldrb	r1, [r3, #10]
   33af6:	729a      	strb	r2, [r3, #10]
   33af8:	7ada      	ldrb	r2, [r3, #11]
   33afa:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   33afe:	72da      	strb	r2, [r3, #11]
   33b00:	b003      	add	sp, #12
   33b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33b06:	1c82      	adds	r2, r0, #2
   33b08:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
   33b0c:	6852      	ldr	r2, [r2, #4]
   33b0e:	7814      	ldrb	r4, [r2, #0]
   33b10:	2c62      	cmp	r4, #98	; 0x62
   33b12:	d00a      	beq.n	33b2a <ipc_trace_handle+0xee>
   33b14:	2c63      	cmp	r4, #99	; 0x63
   33b16:	d00d      	beq.n	33b34 <ipc_trace_handle+0xf8>
   33b18:	2c61      	cmp	r4, #97	; 0x61
   33b1a:	d104      	bne.n	33b26 <ipc_trace_handle+0xea>
   33b1c:	4691      	mov	r9, r2
   33b1e:	f04f 0a01 	mov.w	sl, #1
   33b22:	f8d2 8004 	ldr.w	r8, [r2, #4]
   33b26:	3001      	adds	r0, #1
   33b28:	e7c5      	b.n	33ab6 <ipc_trace_handle+0x7a>
   33b2a:	4694      	mov	ip, r2
   33b2c:	f04f 0e01 	mov.w	lr, #1
   33b30:	6857      	ldr	r7, [r2, #4]
   33b32:	e7f8      	b.n	33b26 <ipc_trace_handle+0xea>
   33b34:	6851      	ldr	r1, [r2, #4]
   33b36:	4616      	mov	r6, r2
   33b38:	9100      	str	r1, [sp, #0]
   33b3a:	2101      	movs	r1, #1
   33b3c:	e7f3      	b.n	33b26 <ipc_trace_handle+0xea>
   33b3e:	2101      	movs	r1, #1
   33b40:	4a16      	ldr	r2, [pc, #88]	; (33b9c <ipc_trace_handle+0x160>)
   33b42:	7011      	strb	r1, [r2, #0]
   33b44:	7a1a      	ldrb	r2, [r3, #8]
   33b46:	2103      	movs	r1, #3
   33b48:	2200      	movs	r2, #0
   33b4a:	e7d0      	b.n	33aee <ipc_trace_handle+0xb2>
   33b4c:	7a19      	ldrb	r1, [r3, #8]
   33b4e:	2104      	movs	r1, #4
   33b50:	7219      	strb	r1, [r3, #8]
   33b52:	7a59      	ldrb	r1, [r3, #9]
   33b54:	725a      	strb	r2, [r3, #9]
   33b56:	7a99      	ldrb	r1, [r3, #10]
   33b58:	729a      	strb	r2, [r3, #10]
   33b5a:	7ad9      	ldrb	r1, [r3, #11]
   33b5c:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   33b60:	72d9      	strb	r1, [r3, #11]
   33b62:	4b0e      	ldr	r3, [pc, #56]	; (33b9c <ipc_trace_handle+0x160>)
   33b64:	701a      	strb	r2, [r3, #0]
   33b66:	b003      	add	sp, #12
   33b68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33b6c:	f7ff bf3c 	b.w	339e8 <nrf_modem_trace_irq_handler>
   33b70:	4b0f      	ldr	r3, [pc, #60]	; (33bb0 <ipc_trace_handle+0x174>)
   33b72:	681b      	ldr	r3, [r3, #0]
   33b74:	685a      	ldr	r2, [r3, #4]
   33b76:	4b0f      	ldr	r3, [pc, #60]	; (33bb4 <ipc_trace_handle+0x178>)
   33b78:	601a      	str	r2, [r3, #0]
   33b7a:	4b0b      	ldr	r3, [pc, #44]	; (33ba8 <ipc_trace_handle+0x16c>)
   33b7c:	681b      	ldr	r3, [r3, #0]
   33b7e:	685a      	ldr	r2, [r3, #4]
   33b80:	4b0a      	ldr	r3, [pc, #40]	; (33bac <ipc_trace_handle+0x170>)
   33b82:	601a      	str	r2, [r3, #0]
   33b84:	4b06      	ldr	r3, [pc, #24]	; (33ba0 <ipc_trace_handle+0x164>)
   33b86:	681b      	ldr	r3, [r3, #0]
   33b88:	685a      	ldr	r2, [r3, #4]
   33b8a:	4b06      	ldr	r3, [pc, #24]	; (33ba4 <ipc_trace_handle+0x168>)
   33b8c:	601a      	str	r2, [r3, #0]
   33b8e:	b003      	add	sp, #12
   33b90:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33b94:	f7f1 bf2a 	b.w	259ec <nrf_modem_os_trace_irq_set>
   33b98:	2001a480 	.word	0x2001a480
   33b9c:	2001d3bb 	.word	0x2001d3bb
   33ba0:	2001a478 	.word	0x2001a478
   33ba4:	2001a46c 	.word	0x2001a46c
   33ba8:	2001a474 	.word	0x2001a474
   33bac:	2001a468 	.word	0x2001a468
   33bb0:	2001a47c 	.word	0x2001a47c
   33bb4:	2001a470 	.word	0x2001a470

00033bb8 <rpc_trace_coredump_in_progress>:
   33bb8:	4b01      	ldr	r3, [pc, #4]	; (33bc0 <rpc_trace_coredump_in_progress+0x8>)
   33bba:	7818      	ldrb	r0, [r3, #0]
   33bbc:	4770      	bx	lr
   33bbe:	bf00      	nop
   33bc0:	2001d3bb 	.word	0x2001d3bb

00033bc4 <rpc_transport_ipc_msg_alloc>:
   33bc4:	b570      	push	{r4, r5, r6, lr}
   33bc6:	4616      	mov	r6, r2
   33bc8:	2400      	movs	r4, #0
   33bca:	6803      	ldr	r3, [r0, #0]
   33bcc:	42a3      	cmp	r3, r4
   33bce:	d101      	bne.n	33bd4 <rpc_transport_ipc_msg_alloc+0x10>
   33bd0:	2300      	movs	r3, #0
   33bd2:	e01c      	b.n	33c0e <rpc_transport_ipc_msg_alloc+0x4a>
   33bd4:	eb00 02c4 	add.w	r2, r0, r4, lsl #3
   33bd8:	6855      	ldr	r5, [r2, #4]
   33bda:	b2ed      	uxtb	r5, r5
   33bdc:	2d03      	cmp	r5, #3
   33bde:	d118      	bne.n	33c12 <rpc_transport_ipc_msg_alloc+0x4e>
   33be0:	eb01 1384 	add.w	r3, r1, r4, lsl #6
   33be4:	6093      	str	r3, [r2, #8]
   33be6:	6851      	ldr	r1, [r2, #4]
   33be8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   33bec:	6051      	str	r1, [r2, #4]
   33bee:	490c      	ldr	r1, [pc, #48]	; (33c20 <rpc_transport_ipc_msg_alloc+0x5c>)
   33bf0:	8808      	ldrh	r0, [r1, #0]
   33bf2:	1c44      	adds	r4, r0, #1
   33bf4:	800c      	strh	r4, [r1, #0]
   33bf6:	6851      	ldr	r1, [r2, #4]
   33bf8:	b289      	uxth	r1, r1
   33bfa:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   33bfe:	6051      	str	r1, [r2, #4]
   33c00:	4618      	mov	r0, r3
   33c02:	2240      	movs	r2, #64	; 0x40
   33c04:	2100      	movs	r1, #0
   33c06:	f00d fbed 	bl	413e4 <memset>
   33c0a:	4603      	mov	r3, r0
   33c0c:	6046      	str	r6, [r0, #4]
   33c0e:	4618      	mov	r0, r3
   33c10:	bd70      	pop	{r4, r5, r6, pc}
   33c12:	b915      	cbnz	r5, 33c1a <rpc_transport_ipc_msg_alloc+0x56>
   33c14:	6895      	ldr	r5, [r2, #8]
   33c16:	2d00      	cmp	r5, #0
   33c18:	d0e2      	beq.n	33be0 <rpc_transport_ipc_msg_alloc+0x1c>
   33c1a:	3401      	adds	r4, #1
   33c1c:	e7d6      	b.n	33bcc <rpc_transport_ipc_msg_alloc+0x8>
   33c1e:	bf00      	nop
   33c20:	2001a59c 	.word	0x2001a59c

00033c24 <handle_modem_rpc_msg.part.0>:
   33c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33c28:	4606      	mov	r6, r0
   33c2a:	460f      	mov	r7, r1
   33c2c:	2500      	movs	r5, #0
   33c2e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 33ca4 <handle_modem_rpc_msg.part.0+0x80>
   33c32:	6833      	ldr	r3, [r6, #0]
   33c34:	429d      	cmp	r5, r3
   33c36:	d301      	bcc.n	33c3c <handle_modem_rpc_msg.part.0+0x18>
   33c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33c3c:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
   33c40:	68a3      	ldr	r3, [r4, #8]
   33c42:	b1fb      	cbz	r3, 33c84 <handle_modem_rpc_msg.part.0+0x60>
   33c44:	6863      	ldr	r3, [r4, #4]
   33c46:	b2db      	uxtb	r3, r3
   33c48:	2b01      	cmp	r3, #1
   33c4a:	d11b      	bne.n	33c84 <handle_modem_rpc_msg.part.0+0x60>
   33c4c:	6862      	ldr	r2, [r4, #4]
   33c4e:	f8b8 3000 	ldrh.w	r3, [r8]
   33c52:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   33c56:	d115      	bne.n	33c84 <handle_modem_rpc_msg.part.0+0x60>
   33c58:	2f02      	cmp	r7, #2
   33c5a:	68a0      	ldr	r0, [r4, #8]
   33c5c:	d114      	bne.n	33c88 <handle_modem_rpc_msg.part.0+0x64>
   33c5e:	f7ff fdf3 	bl	33848 <rpc_handle_data_message>
   33c62:	2802      	cmp	r0, #2
   33c64:	d00e      	beq.n	33c84 <handle_modem_rpc_msg.part.0+0x60>
   33c66:	2801      	cmp	r0, #1
   33c68:	d113      	bne.n	33c92 <handle_modem_rpc_msg.part.0+0x6e>
   33c6a:	6863      	ldr	r3, [r4, #4]
   33c6c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   33c70:	f043 0302 	orr.w	r3, r3, #2
   33c74:	6063      	str	r3, [r4, #4]
   33c76:	f8b8 3000 	ldrh.w	r3, [r8]
   33c7a:	3301      	adds	r3, #1
   33c7c:	f8a8 3000 	strh.w	r3, [r8]
   33c80:	f7f1 fea4 	bl	259cc <nrf_modem_os_application_irq_set>
   33c84:	3501      	adds	r5, #1
   33c86:	e7d4      	b.n	33c32 <handle_modem_rpc_msg.part.0+0xe>
   33c88:	6801      	ldr	r1, [r0, #0]
   33c8a:	0c09      	lsrs	r1, r1, #16
   33c8c:	f00c f927 	bl	3fede <rpc_handle_ctrl_message>
   33c90:	e7e7      	b.n	33c62 <handle_modem_rpc_msg.part.0+0x3e>
   33c92:	2800      	cmp	r0, #0
   33c94:	d1ef      	bne.n	33c76 <handle_modem_rpc_msg.part.0+0x52>
   33c96:	6863      	ldr	r3, [r4, #4]
   33c98:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   33c9c:	f043 0303 	orr.w	r3, r3, #3
   33ca0:	e7e8      	b.n	33c74 <handle_modem_rpc_msg.part.0+0x50>
   33ca2:	bf00      	nop
   33ca4:	2001a59a 	.word	0x2001a59a

00033ca8 <ipc_irq_handler>:
   33ca8:	b538      	push	{r3, r4, r5, lr}
   33caa:	4604      	mov	r4, r0
   33cac:	0620      	lsls	r0, r4, #24
   33cae:	d50c      	bpl.n	33cca <ipc_irq_handler+0x22>
   33cb0:	f7ff fec4 	bl	33a3c <ipc_trace_handle>
   33cb4:	f7ff ff80 	bl	33bb8 <rpc_trace_coredump_in_progress>
   33cb8:	b138      	cbz	r0, 33cca <ipc_irq_handler+0x22>
   33cba:	22e0      	movs	r2, #224	; 0xe0
   33cbc:	4b37      	ldr	r3, [pc, #220]	; (33d9c <ipc_irq_handler+0xf4>)
   33cbe:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
   33cc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   33cc6:	605a      	str	r2, [r3, #4]
   33cc8:	bd38      	pop	{r3, r4, r5, pc}
   33cca:	07e1      	lsls	r1, r4, #31
   33ccc:	d539      	bpl.n	33d42 <ipc_irq_handler+0x9a>
   33cce:	2203      	movs	r2, #3
   33cd0:	4b33      	ldr	r3, [pc, #204]	; (33da0 <ipc_irq_handler+0xf8>)
   33cd2:	701a      	strb	r2, [r3, #0]
   33cd4:	4b33      	ldr	r3, [pc, #204]	; (33da4 <ipc_irq_handler+0xfc>)
   33cd6:	4a34      	ldr	r2, [pc, #208]	; (33da8 <ipc_irq_handler+0x100>)
   33cd8:	f8d3 0614 	ldr.w	r0, [r3, #1556]	; 0x614
   33cdc:	4290      	cmp	r0, r2
   33cde:	d02c      	beq.n	33d3a <ipc_irq_handler+0x92>
   33ce0:	d80c      	bhi.n	33cfc <ipc_irq_handler+0x54>
   33ce2:	3a02      	subs	r2, #2
   33ce4:	4290      	cmp	r0, r2
   33ce6:	d020      	beq.n	33d2a <ipc_irq_handler+0x82>
   33ce8:	3201      	adds	r2, #1
   33cea:	4290      	cmp	r0, r2
   33cec:	d021      	beq.n	33d32 <ipc_irq_handler+0x8a>
   33cee:	f8d3 1618 	ldr.w	r1, [r3, #1560]	; 0x618
   33cf2:	f3c0 000b 	ubfx	r0, r0, #0, #12
   33cf6:	f002 f893 	bl	35e20 <nrf_modem_fault_handler_internal>
   33cfa:	e012      	b.n	33d22 <ipc_irq_handler+0x7a>
   33cfc:	4a2b      	ldr	r2, [pc, #172]	; (33dac <ipc_irq_handler+0x104>)
   33cfe:	4290      	cmp	r0, r2
   33d00:	d80a      	bhi.n	33d18 <ipc_irq_handler+0x70>
   33d02:	f1b0 6f88 	cmp.w	r0, #71303168	; 0x4400000
   33d06:	d80a      	bhi.n	33d1e <ipc_irq_handler+0x76>
   33d08:	4a29      	ldr	r2, [pc, #164]	; (33db0 <ipc_irq_handler+0x108>)
   33d0a:	4290      	cmp	r0, r2
   33d0c:	d1ef      	bne.n	33cee <ipc_irq_handler+0x46>
   33d0e:	f06f 0204 	mvn.w	r2, #4
   33d12:	4b28      	ldr	r3, [pc, #160]	; (33db4 <ipc_irq_handler+0x10c>)
   33d14:	601a      	str	r2, [r3, #0]
   33d16:	e004      	b.n	33d22 <ipc_irq_handler+0x7a>
   33d18:	4a27      	ldr	r2, [pc, #156]	; (33db8 <ipc_irq_handler+0x110>)
   33d1a:	4290      	cmp	r0, r2
   33d1c:	d1e7      	bne.n	33cee <ipc_irq_handler+0x46>
   33d1e:	4b25      	ldr	r3, [pc, #148]	; (33db4 <ipc_irq_handler+0x10c>)
   33d20:	6018      	str	r0, [r3, #0]
   33d22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   33d26:	f7f1 be71 	b.w	25a0c <nrf_modem_os_event_notify>
   33d2a:	f06f 0215 	mvn.w	r2, #21
   33d2e:	4b21      	ldr	r3, [pc, #132]	; (33db4 <ipc_irq_handler+0x10c>)
   33d30:	e7f0      	b.n	33d14 <ipc_irq_handler+0x6c>
   33d32:	f06f 025e 	mvn.w	r2, #94	; 0x5e
   33d36:	4b1f      	ldr	r3, [pc, #124]	; (33db4 <ipc_irq_handler+0x10c>)
   33d38:	e7ec      	b.n	33d14 <ipc_irq_handler+0x6c>
   33d3a:	f06f 020b 	mvn.w	r2, #11
   33d3e:	4b1d      	ldr	r3, [pc, #116]	; (33db4 <ipc_irq_handler+0x10c>)
   33d40:	e7e8      	b.n	33d14 <ipc_irq_handler+0x6c>
   33d42:	f014 0540 	ands.w	r5, r4, #64	; 0x40
   33d46:	d003      	beq.n	33d50 <ipc_irq_handler+0xa8>
   33d48:	2202      	movs	r2, #2
   33d4a:	4b15      	ldr	r3, [pc, #84]	; (33da0 <ipc_irq_handler+0xf8>)
   33d4c:	701a      	strb	r2, [r3, #0]
   33d4e:	e7e8      	b.n	33d22 <ipc_irq_handler+0x7a>
   33d50:	0762      	lsls	r2, r4, #29
   33d52:	d504      	bpl.n	33d5e <ipc_irq_handler+0xb6>
   33d54:	4b12      	ldr	r3, [pc, #72]	; (33da0 <ipc_irq_handler+0xf8>)
   33d56:	781a      	ldrb	r2, [r3, #0]
   33d58:	b93a      	cbnz	r2, 33d6a <ipc_irq_handler+0xc2>
   33d5a:	f7f1 fe37 	bl	259cc <nrf_modem_os_application_irq_set>
   33d5e:	06e3      	lsls	r3, r4, #27
   33d60:	d5b2      	bpl.n	33cc8 <ipc_irq_handler+0x20>
   33d62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   33d66:	f7f1 be31 	b.w	259cc <nrf_modem_os_application_irq_set>
   33d6a:	781a      	ldrb	r2, [r3, #0]
   33d6c:	2a01      	cmp	r2, #1
   33d6e:	d1f6      	bne.n	33d5e <ipc_irq_handler+0xb6>
   33d70:	4a12      	ldr	r2, [pc, #72]	; (33dbc <ipc_irq_handler+0x114>)
   33d72:	4813      	ldr	r0, [pc, #76]	; (33dc0 <ipc_irq_handler+0x118>)
   33d74:	6812      	ldr	r2, [r2, #0]
   33d76:	6891      	ldr	r1, [r2, #8]
   33d78:	6041      	str	r1, [r0, #4]
   33d7a:	6852      	ldr	r2, [r2, #4]
   33d7c:	6002      	str	r2, [r0, #0]
   33d7e:	b121      	cbz	r1, 33d8a <ipc_irq_handler+0xe2>
   33d80:	b11a      	cbz	r2, 33d8a <ipc_irq_handler+0xe2>
   33d82:	6809      	ldr	r1, [r1, #0]
   33d84:	b109      	cbz	r1, 33d8a <ipc_irq_handler+0xe2>
   33d86:	6812      	ldr	r2, [r2, #0]
   33d88:	b932      	cbnz	r2, 33d98 <ipc_irq_handler+0xf0>
   33d8a:	f06f 0104 	mvn.w	r1, #4
   33d8e:	4a09      	ldr	r2, [pc, #36]	; (33db4 <ipc_irq_handler+0x10c>)
   33d90:	6011      	str	r1, [r2, #0]
   33d92:	2203      	movs	r2, #3
   33d94:	701a      	strb	r2, [r3, #0]
   33d96:	e7e2      	b.n	33d5e <ipc_irq_handler+0xb6>
   33d98:	701d      	strb	r5, [r3, #0]
   33d9a:	e7e0      	b.n	33d5e <ipc_irq_handler+0xb6>
   33d9c:	e000e100 	.word	0xe000e100
   33da0:	2001d3bc 	.word	0x2001d3bc
   33da4:	4002a000 	.word	0x4002a000
   33da8:	00010022 	.word	0x00010022
   33dac:	04400004 	.word	0x04400004
   33db0:	00013032 	.word	0x00013032
   33db4:	2001a484 	.word	0x2001a484
   33db8:	05500001 	.word	0x05500001
   33dbc:	2001a490 	.word	0x2001a490
   33dc0:	2001a488 	.word	0x2001a488

00033dc4 <rpc_transport_ipc_data_msg_send>:
   33dc4:	b508      	push	{r3, lr}
   33dc6:	4b0b      	ldr	r3, [pc, #44]	; (33df4 <rpc_transport_ipc_data_msg_send+0x30>)
   33dc8:	681b      	ldr	r3, [r3, #0]
   33dca:	1ac0      	subs	r0, r0, r3
   33dcc:	4b0a      	ldr	r3, [pc, #40]	; (33df8 <rpc_transport_ipc_data_msg_send+0x34>)
   33dce:	f3c0 1089 	ubfx	r0, r0, #6, #10
   33dd2:	681b      	ldr	r3, [r3, #0]
   33dd4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   33dd8:	6843      	ldr	r3, [r0, #4]
   33dda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   33dde:	f043 0301 	orr.w	r3, r3, #1
   33de2:	6043      	str	r3, [r0, #4]
   33de4:	2003      	movs	r0, #3
   33de6:	f00a ff6a 	bl	3ecbe <nrf_modem_os_busywait>
   33dea:	2201      	movs	r2, #1
   33dec:	4b03      	ldr	r3, [pc, #12]	; (33dfc <rpc_transport_ipc_data_msg_send+0x38>)
   33dee:	60da      	str	r2, [r3, #12]
   33df0:	bd08      	pop	{r3, pc}
   33df2:	bf00      	nop
   33df4:	2001a49c 	.word	0x2001a49c
   33df8:	2001a4a0 	.word	0x2001a4a0
   33dfc:	4002a000 	.word	0x4002a000

00033e00 <rpc_transport_ipc_ctrl_msg_send>:
   33e00:	b508      	push	{r3, lr}
   33e02:	4b0b      	ldr	r3, [pc, #44]	; (33e30 <rpc_transport_ipc_ctrl_msg_send+0x30>)
   33e04:	681b      	ldr	r3, [r3, #0]
   33e06:	1ac0      	subs	r0, r0, r3
   33e08:	4b0a      	ldr	r3, [pc, #40]	; (33e34 <rpc_transport_ipc_ctrl_msg_send+0x34>)
   33e0a:	f3c0 1089 	ubfx	r0, r0, #6, #10
   33e0e:	681b      	ldr	r3, [r3, #0]
   33e10:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   33e14:	6843      	ldr	r3, [r0, #4]
   33e16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   33e1a:	f043 0301 	orr.w	r3, r3, #1
   33e1e:	6043      	str	r3, [r0, #4]
   33e20:	2003      	movs	r0, #3
   33e22:	f00a ff4c 	bl	3ecbe <nrf_modem_os_busywait>
   33e26:	2201      	movs	r2, #1
   33e28:	4b03      	ldr	r3, [pc, #12]	; (33e38 <rpc_transport_ipc_ctrl_msg_send+0x38>)
   33e2a:	605a      	str	r2, [r3, #4]
   33e2c:	bd08      	pop	{r3, pc}
   33e2e:	bf00      	nop
   33e30:	2001a494 	.word	0x2001a494
   33e34:	2001a498 	.word	0x2001a498
   33e38:	4002a000 	.word	0x4002a000

00033e3c <rpc_transport_ipc_data_msg_alloc>:
   33e3c:	4b05      	ldr	r3, [pc, #20]	; (33e54 <rpc_transport_ipc_data_msg_alloc+0x18>)
   33e3e:	781b      	ldrb	r3, [r3, #0]
   33e40:	b933      	cbnz	r3, 33e50 <rpc_transport_ipc_data_msg_alloc+0x14>
   33e42:	4b05      	ldr	r3, [pc, #20]	; (33e58 <rpc_transport_ipc_data_msg_alloc+0x1c>)
   33e44:	2202      	movs	r2, #2
   33e46:	6819      	ldr	r1, [r3, #0]
   33e48:	4b04      	ldr	r3, [pc, #16]	; (33e5c <rpc_transport_ipc_data_msg_alloc+0x20>)
   33e4a:	6818      	ldr	r0, [r3, #0]
   33e4c:	f7ff beba 	b.w	33bc4 <rpc_transport_ipc_msg_alloc>
   33e50:	2000      	movs	r0, #0
   33e52:	4770      	bx	lr
   33e54:	2001d3bd 	.word	0x2001d3bd
   33e58:	2001a49c 	.word	0x2001a49c
   33e5c:	2001a4a0 	.word	0x2001a4a0

00033e60 <rpc_transport_ipc_ctrl_msg_alloc>:
   33e60:	230a      	movs	r3, #10
   33e62:	b573      	push	{r0, r1, r4, r5, r6, lr}
   33e64:	4d0d      	ldr	r5, [pc, #52]	; (33e9c <rpc_transport_ipc_ctrl_msg_alloc+0x3c>)
   33e66:	4e0e      	ldr	r6, [pc, #56]	; (33ea0 <rpc_transport_ipc_ctrl_msg_alloc+0x40>)
   33e68:	9301      	str	r3, [sp, #4]
   33e6a:	2201      	movs	r2, #1
   33e6c:	6829      	ldr	r1, [r5, #0]
   33e6e:	6830      	ldr	r0, [r6, #0]
   33e70:	f7ff fea8 	bl	33bc4 <rpc_transport_ipc_msg_alloc>
   33e74:	4604      	mov	r4, r0
   33e76:	b938      	cbnz	r0, 33e88 <rpc_transport_ipc_ctrl_msg_alloc+0x28>
   33e78:	f00a ff23 	bl	3ecc2 <nrf_modem_os_is_in_isr>
   33e7c:	b938      	cbnz	r0, 33e8e <rpc_transport_ipc_ctrl_msg_alloc+0x2e>
   33e7e:	a901      	add	r1, sp, #4
   33e80:	f7f1 fc3c 	bl	256fc <nrf_modem_os_timedwait>
   33e84:	306e      	adds	r0, #110	; 0x6e
   33e86:	d1f0      	bne.n	33e6a <rpc_transport_ipc_ctrl_msg_alloc+0xa>
   33e88:	4620      	mov	r0, r4
   33e8a:	b002      	add	sp, #8
   33e8c:	bd70      	pop	{r4, r5, r6, pc}
   33e8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   33e92:	9b01      	ldr	r3, [sp, #4]
   33e94:	4358      	muls	r0, r3
   33e96:	f00a ff12 	bl	3ecbe <nrf_modem_os_busywait>
   33e9a:	e7e6      	b.n	33e6a <rpc_transport_ipc_ctrl_msg_alloc+0xa>
   33e9c:	2001a494 	.word	0x2001a494
   33ea0:	2001a498 	.word	0x2001a498

00033ea4 <rpc_transport_ipc_data_alloc>:
   33ea4:	4b03      	ldr	r3, [pc, #12]	; (33eb4 <rpc_transport_ipc_data_alloc+0x10>)
   33ea6:	781b      	ldrb	r3, [r3, #0]
   33ea8:	b90b      	cbnz	r3, 33eae <rpc_transport_ipc_data_alloc+0xa>
   33eaa:	f7f1 bde1 	b.w	25a70 <nrf_modem_os_shm_tx_alloc>
   33eae:	2000      	movs	r0, #0
   33eb0:	4770      	bx	lr
   33eb2:	bf00      	nop
   33eb4:	2001d3bd 	.word	0x2001d3bd

00033eb8 <nrf_modem_application_irq_handler>:
   33eb8:	b510      	push	{r4, lr}
   33eba:	4c08      	ldr	r4, [pc, #32]	; (33edc <nrf_modem_application_irq_handler+0x24>)
   33ebc:	f7f1 fd8e 	bl	259dc <nrf_modem_os_application_irq_clear>
   33ec0:	6820      	ldr	r0, [r4, #0]
   33ec2:	b110      	cbz	r0, 33eca <nrf_modem_application_irq_handler+0x12>
   33ec4:	2101      	movs	r1, #1
   33ec6:	f7ff fead 	bl	33c24 <handle_modem_rpc_msg.part.0>
   33eca:	6860      	ldr	r0, [r4, #4]
   33ecc:	b120      	cbz	r0, 33ed8 <nrf_modem_application_irq_handler+0x20>
   33ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   33ed2:	2102      	movs	r1, #2
   33ed4:	f7ff bea6 	b.w	33c24 <handle_modem_rpc_msg.part.0>
   33ed8:	bd10      	pop	{r4, pc}
   33eda:	bf00      	nop
   33edc:	2001a488 	.word	0x2001a488

00033ee0 <rpc_transport_ipc_msg_free>:
   33ee0:	2300      	movs	r3, #0
   33ee2:	4911      	ldr	r1, [pc, #68]	; (33f28 <rpc_transport_ipc_msg_free+0x48>)
   33ee4:	b530      	push	{r4, r5, lr}
   33ee6:	680a      	ldr	r2, [r1, #0]
   33ee8:	6814      	ldr	r4, [r2, #0]
   33eea:	42a3      	cmp	r3, r4
   33eec:	d10b      	bne.n	33f06 <rpc_transport_ipc_msg_free+0x26>
   33eee:	2300      	movs	r3, #0
   33ef0:	684a      	ldr	r2, [r1, #4]
   33ef2:	6811      	ldr	r1, [r2, #0]
   33ef4:	428b      	cmp	r3, r1
   33ef6:	d015      	beq.n	33f24 <rpc_transport_ipc_msg_free+0x44>
   33ef8:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   33efc:	68a4      	ldr	r4, [r4, #8]
   33efe:	42a0      	cmp	r0, r4
   33f00:	d008      	beq.n	33f14 <rpc_transport_ipc_msg_free+0x34>
   33f02:	3301      	adds	r3, #1
   33f04:	e7f6      	b.n	33ef4 <rpc_transport_ipc_msg_free+0x14>
   33f06:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   33f0a:	68ad      	ldr	r5, [r5, #8]
   33f0c:	42a8      	cmp	r0, r5
   33f0e:	d001      	beq.n	33f14 <rpc_transport_ipc_msg_free+0x34>
   33f10:	3301      	adds	r3, #1
   33f12:	e7ea      	b.n	33eea <rpc_transport_ipc_msg_free+0xa>
   33f14:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   33f18:	685a      	ldr	r2, [r3, #4]
   33f1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   33f1e:	f042 0203 	orr.w	r2, r2, #3
   33f22:	605a      	str	r2, [r3, #4]
   33f24:	bd30      	pop	{r4, r5, pc}
   33f26:	bf00      	nop
   33f28:	2001a488 	.word	0x2001a488

00033f2c <rpc_transport_ipc_peer_data_free>:
   33f2c:	b510      	push	{r4, lr}
   33f2e:	4b0b      	ldr	r3, [pc, #44]	; (33f5c <rpc_transport_ipc_peer_data_free+0x30>)
   33f30:	4604      	mov	r4, r0
   33f32:	781b      	ldrb	r3, [r3, #0]
   33f34:	2b03      	cmp	r3, #3
   33f36:	d010      	beq.n	33f5a <rpc_transport_ipc_peer_data_free+0x2e>
   33f38:	f7ff ff92 	bl	33e60 <rpc_transport_ipc_ctrl_msg_alloc>
   33f3c:	b168      	cbz	r0, 33f5a <rpc_transport_ipc_peer_data_free+0x2e>
   33f3e:	2101      	movs	r1, #1
   33f40:	2200      	movs	r2, #0
   33f42:	7001      	strb	r1, [r0, #0]
   33f44:	2102      	movs	r1, #2
   33f46:	6084      	str	r4, [r0, #8]
   33f48:	7042      	strb	r2, [r0, #1]
   33f4a:	7081      	strb	r1, [r0, #2]
   33f4c:	70c2      	strb	r2, [r0, #3]
   33f4e:	f7ff ff57 	bl	33e00 <rpc_transport_ipc_ctrl_msg_send>
   33f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   33f56:	f7f1 bd39 	b.w	259cc <nrf_modem_os_application_irq_set>
   33f5a:	bd10      	pop	{r4, pc}
   33f5c:	2001d3bc 	.word	0x2001d3bc

00033f60 <rpc_transport_ipc_init>:
   33f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33f64:	2200      	movs	r2, #0
   33f66:	b095      	sub	sp, #84	; 0x54
   33f68:	4605      	mov	r5, r0
   33f6a:	4957      	ldr	r1, [pc, #348]	; (340c8 <rpc_transport_ipc_init+0x168>)
   33f6c:	7900      	ldrb	r0, [r0, #4]
   33f6e:	f7fe fe51 	bl	32c14 <nrfx_ipc_init>
   33f72:	2238      	movs	r2, #56	; 0x38
   33f74:	2100      	movs	r1, #0
   33f76:	a803      	add	r0, sp, #12
   33f78:	f00d fa34 	bl	413e4 <memset>
   33f7c:	2302      	movs	r3, #2
   33f7e:	9304      	str	r3, [sp, #16]
   33f80:	2308      	movs	r3, #8
   33f82:	9306      	str	r3, [sp, #24]
   33f84:	2320      	movs	r3, #32
   33f86:	9308      	str	r3, [sp, #32]
   33f88:	2301      	movs	r3, #1
   33f8a:	930b      	str	r3, [sp, #44]	; 0x2c
   33f8c:	2304      	movs	r3, #4
   33f8e:	930d      	str	r3, [sp, #52]	; 0x34
   33f90:	2310      	movs	r3, #16
   33f92:	f04f 0c40 	mov.w	ip, #64	; 0x40
   33f96:	930f      	str	r3, [sp, #60]	; 0x3c
   33f98:	2380      	movs	r3, #128	; 0x80
   33f9a:	e9cd c311 	strd	ip, r3, [sp, #68]	; 0x44
   33f9e:	23d5      	movs	r3, #213	; 0xd5
   33fa0:	a803      	add	r0, sp, #12
   33fa2:	9313      	str	r3, [sp, #76]	; 0x4c
   33fa4:	f7fe fe5c 	bl	32c60 <nrfx_ipc_config_load>
   33fa8:	6828      	ldr	r0, [r5, #0]
   33faa:	6842      	ldr	r2, [r0, #4]
   33fac:	f5b2 6f9d 	cmp.w	r2, #1256	; 0x4e8
   33fb0:	f040 8085 	bne.w	340be <rpc_transport_ipc_init+0x15e>
   33fb4:	6941      	ldr	r1, [r0, #20]
   33fb6:	68c3      	ldr	r3, [r0, #12]
   33fb8:	440b      	add	r3, r1
   33fba:	69c1      	ldr	r1, [r0, #28]
   33fbc:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
   33fc0:	440b      	add	r3, r1
   33fc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   33fc6:	d87a      	bhi.n	340be <rpc_transport_ipc_init+0x15e>
   33fc8:	2100      	movs	r1, #0
   33fca:	6800      	ldr	r0, [r0, #0]
   33fcc:	f00d fa0a 	bl	413e4 <memset>
   33fd0:	682a      	ldr	r2, [r5, #0]
   33fd2:	6814      	ldr	r4, [r2, #0]
   33fd4:	69d3      	ldr	r3, [r2, #28]
   33fd6:	f104 0660 	add.w	r6, r4, #96	; 0x60
   33fda:	f104 07a4 	add.w	r7, r4, #164	; 0xa4
   33fde:	f104 0ae8 	add.w	sl, r4, #232	; 0xe8
   33fe2:	f504 7b3a 	add.w	fp, r4, #744	; 0x2e8
   33fe6:	f104 0920 	add.w	r9, r4, #32
   33fea:	2b00      	cmp	r3, #0
   33fec:	d05c      	beq.n	340a8 <rpc_transport_ipc_init+0x148>
   33fee:	f104 0840 	add.w	r8, r4, #64	; 0x40
   33ff2:	4936      	ldr	r1, [pc, #216]	; (340cc <rpc_transport_ipc_init+0x16c>)
   33ff4:	f8c1 9000 	str.w	r9, [r1]
   33ff8:	b13b      	cbz	r3, 3400a <rpc_transport_ipc_init+0xaa>
   33ffa:	6992      	ldr	r2, [r2, #24]
   33ffc:	4640      	mov	r0, r8
   33ffe:	f8c8 2004 	str.w	r2, [r8, #4]
   34002:	f8c8 3000 	str.w	r3, [r8]
   34006:	f7ff fcdd 	bl	339c4 <ipc_trace_init>
   3400a:	6828      	ldr	r0, [r5, #0]
   3400c:	2300      	movs	r3, #0
   3400e:	6902      	ldr	r2, [r0, #16]
   34010:	2101      	movs	r1, #1
   34012:	6062      	str	r2, [r4, #4]
   34014:	6942      	ldr	r2, [r0, #20]
   34016:	7023      	strb	r3, [r4, #0]
   34018:	60a2      	str	r2, [r4, #8]
   3401a:	4a2d      	ldr	r2, [pc, #180]	; (340d0 <rpc_transport_ipc_init+0x170>)
   3401c:	60e6      	str	r6, [r4, #12]
   3401e:	6017      	str	r7, [r2, #0]
   34020:	4a2c      	ldr	r2, [pc, #176]	; (340d4 <rpc_transport_ipc_init+0x174>)
   34022:	6127      	str	r7, [r4, #16]
   34024:	6016      	str	r6, [r2, #0]
   34026:	2208      	movs	r2, #8
   34028:	7063      	strb	r3, [r4, #1]
   3402a:	f884 20a4 	strb.w	r2, [r4, #164]	; 0xa4
   3402e:	70a1      	strb	r1, [r4, #2]
   34030:	70e3      	strb	r3, [r4, #3]
   34032:	f8c4 9014 	str.w	r9, [r4, #20]
   34036:	f8c4 8018 	str.w	r8, [r4, #24]
   3403a:	707b      	strb	r3, [r7, #1]
   3403c:	70bb      	strb	r3, [r7, #2]
   3403e:	70fb      	strb	r3, [r7, #3]
   34040:	270a      	movs	r7, #10
   34042:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
   34046:	4a24      	ldr	r2, [pc, #144]	; (340d8 <rpc_transport_ipc_init+0x178>)
   34048:	7073      	strb	r3, [r6, #1]
   3404a:	f8c2 b000 	str.w	fp, [r2]
   3404e:	4a23      	ldr	r2, [pc, #140]	; (340dc <rpc_transport_ipc_init+0x17c>)
   34050:	70b3      	strb	r3, [r6, #2]
   34052:	f8c2 a000 	str.w	sl, [r2]
   34056:	4a22      	ldr	r2, [pc, #136]	; (340e0 <rpc_transport_ipc_init+0x180>)
   34058:	70f3      	strb	r3, [r6, #3]
   3405a:	4d22      	ldr	r5, [pc, #136]	; (340e4 <rpc_transport_ipc_init+0x184>)
   3405c:	f8c2 4610 	str.w	r4, [r2, #1552]	; 0x610
   34060:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
   34064:	4c20      	ldr	r4, [pc, #128]	; (340e8 <rpc_transport_ipc_init+0x188>)
   34066:	4a21      	ldr	r2, [pc, #132]	; (340ec <rpc_transport_ipc_init+0x18c>)
   34068:	7021      	strb	r1, [r4, #0]
   3406a:	602b      	str	r3, [r5, #0]
   3406c:	9302      	str	r3, [sp, #8]
   3406e:	6113      	str	r3, [r2, #16]
   34070:	6913      	ldr	r3, [r2, #16]
   34072:	4e1f      	ldr	r6, [pc, #124]	; (340f0 <rpc_transport_ipc_init+0x190>)
   34074:	9302      	str	r3, [sp, #8]
   34076:	9b02      	ldr	r3, [sp, #8]
   34078:	7823      	ldrb	r3, [r4, #0]
   3407a:	2b01      	cmp	r3, #1
   3407c:	d100      	bne.n	34080 <rpc_transport_ipc_init+0x120>
   3407e:	b9ae      	cbnz	r6, 340ac <rpc_transport_ipc_init+0x14c>
   34080:	7823      	ldrb	r3, [r4, #0]
   34082:	2b01      	cmp	r3, #1
   34084:	bf01      	itttt	eq
   34086:	f06f 0373 	mvneq.w	r3, #115	; 0x73
   3408a:	602b      	streq	r3, [r5, #0]
   3408c:	2303      	moveq	r3, #3
   3408e:	7023      	strbeq	r3, [r4, #0]
   34090:	682c      	ldr	r4, [r5, #0]
   34092:	b9b4      	cbnz	r4, 340c2 <rpc_transport_ipc_init+0x162>
   34094:	4b17      	ldr	r3, [pc, #92]	; (340f4 <rpc_transport_ipc_init+0x194>)
   34096:	701c      	strb	r4, [r3, #0]
   34098:	4b17      	ldr	r3, [pc, #92]	; (340f8 <rpc_transport_ipc_init+0x198>)
   3409a:	801c      	strh	r4, [r3, #0]
   3409c:	4b17      	ldr	r3, [pc, #92]	; (340fc <rpc_transport_ipc_init+0x19c>)
   3409e:	801c      	strh	r4, [r3, #0]
   340a0:	4620      	mov	r0, r4
   340a2:	b015      	add	sp, #84	; 0x54
   340a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   340a8:	4698      	mov	r8, r3
   340aa:	e7a2      	b.n	33ff2 <rpc_transport_ipc_init+0x92>
   340ac:	2000      	movs	r0, #0
   340ae:	a901      	add	r1, sp, #4
   340b0:	9701      	str	r7, [sp, #4]
   340b2:	f7f1 fb23 	bl	256fc <nrf_modem_os_timedwait>
   340b6:	9b01      	ldr	r3, [sp, #4]
   340b8:	3b0a      	subs	r3, #10
   340ba:	441e      	add	r6, r3
   340bc:	e7dc      	b.n	34078 <rpc_transport_ipc_init+0x118>
   340be:	f06f 0415 	mvn.w	r4, #21
   340c2:	f7fe fe0b 	bl	32cdc <nrfx_ipc_uninit>
   340c6:	e7eb      	b.n	340a0 <rpc_transport_ipc_init+0x140>
   340c8:	00033ca9 	.word	0x00033ca9
   340cc:	2001a490 	.word	0x2001a490
   340d0:	2001a4a0 	.word	0x2001a4a0
   340d4:	2001a498 	.word	0x2001a498
   340d8:	2001a49c 	.word	0x2001a49c
   340dc:	2001a494 	.word	0x2001a494
   340e0:	4002a000 	.word	0x4002a000
   340e4:	2001a484 	.word	0x2001a484
   340e8:	2001d3bc 	.word	0x2001d3bc
   340ec:	40005600 	.word	0x40005600
   340f0:	000249f0 	.word	0x000249f0
   340f4:	2001d3bd 	.word	0x2001d3bd
   340f8:	2001a59c 	.word	0x2001a59c
   340fc:	2001a59a 	.word	0x2001a59a

00034100 <sock_init>:
   34100:	f44f 7240 	mov.w	r2, #768	; 0x300
   34104:	2100      	movs	r1, #0
   34106:	b508      	push	{r3, lr}
   34108:	4808      	ldr	r0, [pc, #32]	; (3412c <sock_init+0x2c>)
   3410a:	f00d f96b 	bl	413e4 <memset>
   3410e:	2100      	movs	r1, #0
   34110:	2208      	movs	r2, #8
   34112:	4b07      	ldr	r3, [pc, #28]	; (34130 <sock_init+0x30>)
   34114:	4807      	ldr	r0, [pc, #28]	; (34134 <sock_init+0x34>)
   34116:	7019      	strb	r1, [r3, #0]
   34118:	4b04      	ldr	r3, [pc, #16]	; (3412c <sock_init+0x2c>)
   3411a:	3a01      	subs	r2, #1
   3411c:	e9c3 0100 	strd	r0, r1, [r3]
   34120:	6099      	str	r1, [r3, #8]
   34122:	f103 0360 	add.w	r3, r3, #96	; 0x60
   34126:	d1f8      	bne.n	3411a <sock_init+0x1a>
   34128:	bd08      	pop	{r3, pc}
   3412a:	bf00      	nop
   3412c:	20014760 	.word	0x20014760
   34130:	2001d3be 	.word	0x2001d3be
   34134:	1badf11e 	.word	0x1badf11e

00034138 <sock_open>:
   34138:	2300      	movs	r3, #0
   3413a:	2060      	movs	r0, #96	; 0x60
   3413c:	b530      	push	{r4, r5, lr}
   3413e:	4a0d      	ldr	r2, [pc, #52]	; (34174 <sock_open+0x3c>)
   34140:	4c0d      	ldr	r4, [pc, #52]	; (34178 <sock_open+0x40>)
   34142:	fb00 f103 	mul.w	r1, r0, r3
   34146:	588d      	ldr	r5, [r1, r2]
   34148:	42a5      	cmp	r5, r4
   3414a:	d10e      	bne.n	3416a <sock_open+0x32>
   3414c:	f04f 33ff 	mov.w	r3, #4294967295
   34150:	1850      	adds	r0, r2, r1
   34152:	5053      	str	r3, [r2, r1]
   34154:	4a09      	ldr	r2, [pc, #36]	; (3417c <sock_open+0x44>)
   34156:	7f03      	ldrb	r3, [r0, #28]
   34158:	7812      	ldrb	r2, [r2, #0]
   3415a:	f362 1386 	bfi	r3, r2, #6, #1
   3415e:	7703      	strb	r3, [r0, #28]
   34160:	2302      	movs	r3, #2
   34162:	8783      	strh	r3, [r0, #60]	; 0x3c
   34164:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
   34168:	bd30      	pop	{r4, r5, pc}
   3416a:	3301      	adds	r3, #1
   3416c:	2b08      	cmp	r3, #8
   3416e:	d1e8      	bne.n	34142 <sock_open+0xa>
   34170:	2000      	movs	r0, #0
   34172:	e7f9      	b.n	34168 <sock_open+0x30>
   34174:	20014760 	.word	0x20014760
   34178:	1badf11e 	.word	0x1badf11e
   3417c:	2001d3be 	.word	0x2001d3be

00034180 <sock_find>:
   34180:	b530      	push	{r4, r5, lr}
   34182:	2200      	movs	r2, #0
   34184:	2460      	movs	r4, #96	; 0x60
   34186:	4b06      	ldr	r3, [pc, #24]	; (341a0 <sock_find+0x20>)
   34188:	fb04 f102 	mul.w	r1, r4, r2
   3418c:	58cd      	ldr	r5, [r1, r3]
   3418e:	4285      	cmp	r5, r0
   34190:	d101      	bne.n	34196 <sock_find+0x16>
   34192:	1858      	adds	r0, r3, r1
   34194:	bd30      	pop	{r4, r5, pc}
   34196:	3201      	adds	r2, #1
   34198:	2a08      	cmp	r2, #8
   3419a:	d1f5      	bne.n	34188 <sock_find+0x8>
   3419c:	2000      	movs	r0, #0
   3419e:	e7f9      	b.n	34194 <sock_find+0x14>
   341a0:	20014760 	.word	0x20014760

000341a4 <_sock_close>:
   341a4:	b538      	push	{r3, r4, r5, lr}
   341a6:	f7ff ffeb 	bl	34180 <sock_find>
   341aa:	4604      	mov	r4, r0
   341ac:	1d05      	adds	r5, r0, #4
   341ae:	4628      	mov	r0, r5
   341b0:	f00c f94a 	bl	40448 <pkt_flush>
   341b4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   341b6:	b108      	cbz	r0, 341bc <_sock_close+0x18>
   341b8:	f7f1 fc46 	bl	25a48 <nrf_modem_os_free>
   341bc:	225c      	movs	r2, #92	; 0x5c
   341be:	2100      	movs	r1, #0
   341c0:	4628      	mov	r0, r5
   341c2:	f00d f90f 	bl	413e4 <memset>
   341c6:	4b01      	ldr	r3, [pc, #4]	; (341cc <_sock_close+0x28>)
   341c8:	6023      	str	r3, [r4, #0]
   341ca:	bd38      	pop	{r3, r4, r5, pc}
   341cc:	1badf11e 	.word	0x1badf11e

000341d0 <sock_flow_control_set>:
   341d0:	1e02      	subs	r2, r0, #0
   341d2:	bf18      	it	ne
   341d4:	2201      	movne	r2, #1
   341d6:	4b0a      	ldr	r3, [pc, #40]	; (34200 <sock_flow_control_set+0x30>)
   341d8:	b570      	push	{r4, r5, r6, lr}
   341da:	701a      	strb	r2, [r3, #0]
   341dc:	2560      	movs	r5, #96	; 0x60
   341de:	2200      	movs	r2, #0
   341e0:	4908      	ldr	r1, [pc, #32]	; (34204 <sock_flow_control_set+0x34>)
   341e2:	4e09      	ldr	r6, [pc, #36]	; (34208 <sock_flow_control_set+0x38>)
   341e4:	fb05 f302 	mul.w	r3, r5, r2
   341e8:	585c      	ldr	r4, [r3, r1]
   341ea:	3201      	adds	r2, #1
   341ec:	42b4      	cmp	r4, r6
   341ee:	bf1f      	itttt	ne
   341f0:	185b      	addne	r3, r3, r1
   341f2:	7f1c      	ldrbne	r4, [r3, #28]
   341f4:	f360 1486 	bfine	r4, r0, #6, #1
   341f8:	771c      	strbne	r4, [r3, #28]
   341fa:	2a08      	cmp	r2, #8
   341fc:	d1f2      	bne.n	341e4 <sock_flow_control_set+0x14>
   341fe:	bd70      	pop	{r4, r5, r6, pc}
   34200:	2001d3be 	.word	0x2001d3be
   34204:	20014760 	.word	0x20014760
   34208:	1badf11e 	.word	0x1badf11e

0003420c <on_getaddrinfo_res>:
   3420c:	2301      	movs	r3, #1
   3420e:	4a03      	ldr	r2, [pc, #12]	; (3421c <on_getaddrinfo_res+0x10>)
   34210:	7013      	strb	r3, [r2, #0]
   34212:	4a03      	ldr	r2, [pc, #12]	; (34220 <on_getaddrinfo_res+0x14>)
   34214:	6010      	str	r0, [r2, #0]
   34216:	4618      	mov	r0, r3
   34218:	4770      	bx	lr
   3421a:	bf00      	nop
   3421c:	2001d3bf 	.word	0x2001d3bf
   34220:	2001a4b4 	.word	0x2001a4b4

00034224 <addrinfo_init>:
   34224:	2201      	movs	r2, #1
   34226:	4802      	ldr	r0, [pc, #8]	; (34230 <addrinfo_init+0xc>)
   34228:	4611      	mov	r1, r2
   3422a:	f7f1 bb3d 	b.w	258a8 <nrf_modem_os_sem_init>
   3422e:	bf00      	nop
   34230:	2001a4a4 	.word	0x2001a4a4

00034234 <nrf_getaddrinfo>:
   34234:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34238:	4604      	mov	r4, r0
   3423a:	460e      	mov	r6, r1
   3423c:	4617      	mov	r7, r2
   3423e:	461d      	mov	r5, r3
   34240:	f001 fe04 	bl	35e4c <nrf_modem_state_is_initialized>
   34244:	b940      	cbnz	r0, 34258 <nrf_getaddrinfo+0x24>
   34246:	2001      	movs	r0, #1
   34248:	f7f1 fb1a 	bl	25880 <nrf_modem_os_errno_set>
   3424c:	f04f 34ff 	mov.w	r4, #4294967295
   34250:	4620      	mov	r0, r4
   34252:	b003      	add	sp, #12
   34254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34258:	ea54 0306 	orrs.w	r3, r4, r6
   3425c:	f000 817c 	beq.w	34558 <nrf_getaddrinfo+0x324>
   34260:	b327      	cbz	r7, 342ac <nrf_getaddrinfo+0x78>
   34262:	683b      	ldr	r3, [r7, #0]
   34264:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
   34268:	f023 0302 	bic.w	r3, r3, #2
   3426c:	2b00      	cmp	r3, #0
   3426e:	f040 8176 	bne.w	3455e <nrf_getaddrinfo+0x32a>
   34272:	6878      	ldr	r0, [r7, #4]
   34274:	b938      	cbnz	r0, 34286 <nrf_getaddrinfo+0x52>
   34276:	68b8      	ldr	r0, [r7, #8]
   34278:	b160      	cbz	r0, 34294 <nrf_getaddrinfo+0x60>
   3427a:	f00c f874 	bl	40366 <sock_type_is_valid>
   3427e:	b948      	cbnz	r0, 34294 <nrf_getaddrinfo+0x60>
   34280:	f240 1413 	movw	r4, #275	; 0x113
   34284:	e7e4      	b.n	34250 <nrf_getaddrinfo+0x1c>
   34286:	f00c f865 	bl	40354 <sock_family_is_valid>
   3428a:	2800      	cmp	r0, #0
   3428c:	d1f3      	bne.n	34276 <nrf_getaddrinfo+0x42>
   3428e:	f44f 7487 	mov.w	r4, #270	; 0x10e
   34292:	e7dd      	b.n	34250 <nrf_getaddrinfo+0x1c>
   34294:	68f8      	ldr	r0, [r7, #12]
   34296:	b148      	cbz	r0, 342ac <nrf_getaddrinfo+0x78>
   34298:	68b9      	ldr	r1, [r7, #8]
   3429a:	f00c f878 	bl	4038e <sock_proto_supports_type>
   3429e:	b928      	cbnz	r0, 342ac <nrf_getaddrinfo+0x78>
   342a0:	206b      	movs	r0, #107	; 0x6b
   342a2:	f7f1 faed 	bl	25880 <nrf_modem_os_errno_set>
   342a6:	f240 1415 	movw	r4, #277	; 0x115
   342aa:	e7d1      	b.n	34250 <nrf_getaddrinfo+0x1c>
   342ac:	4baf      	ldr	r3, [pc, #700]	; (3456c <nrf_getaddrinfo+0x338>)
   342ae:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
   342b2:	6818      	ldr	r0, [r3, #0]
   342b4:	f7f1 fb50 	bl	25958 <nrf_modem_os_sem_take>
   342b8:	4680      	mov	r8, r0
   342ba:	2800      	cmp	r0, #0
   342bc:	f040 8152 	bne.w	34564 <nrf_getaddrinfo+0x330>
   342c0:	2e00      	cmp	r6, #0
   342c2:	d042      	beq.n	3434a <nrf_getaddrinfo+0x116>
   342c4:	b31f      	cbz	r7, 3430e <nrf_getaddrinfo+0xda>
   342c6:	683b      	ldr	r3, [r7, #0]
   342c8:	f403 53a0 	and.w	r3, r3, #5120	; 0x1400
   342cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   342d0:	d11d      	bne.n	3430e <nrf_getaddrinfo+0xda>
   342d2:	683b      	ldr	r3, [r7, #0]
   342d4:	04db      	lsls	r3, r3, #19
   342d6:	d53c      	bpl.n	34352 <nrf_getaddrinfo+0x11e>
   342d8:	213a      	movs	r1, #58	; 0x3a
   342da:	4630      	mov	r0, r6
   342dc:	f00d fa40 	bl	41760 <strchr>
   342e0:	4681      	mov	r9, r0
   342e2:	b120      	cbz	r0, 342ee <nrf_getaddrinfo+0xba>
   342e4:	48a2      	ldr	r0, [pc, #648]	; (34570 <nrf_getaddrinfo+0x33c>)
   342e6:	f7e8 ffac 	bl	1d242 <strlen>
   342ea:	eb09 0600 	add.w	r6, r9, r0
   342ee:	4630      	mov	r0, r6
   342f0:	49a0      	ldr	r1, [pc, #640]	; (34574 <nrf_getaddrinfo+0x340>)
   342f2:	f00d fa91 	bl	41818 <strstr>
   342f6:	4681      	mov	r9, r0
   342f8:	b318      	cbz	r0, 34342 <nrf_getaddrinfo+0x10e>
   342fa:	489e      	ldr	r0, [pc, #632]	; (34574 <nrf_getaddrinfo+0x340>)
   342fc:	f7e8 ffa1 	bl	1d242 <strlen>
   34300:	220a      	movs	r2, #10
   34302:	2100      	movs	r1, #0
   34304:	4448      	add	r0, r9
   34306:	f006 fa93 	bl	3a830 <strtol>
   3430a:	4606      	mov	r6, r0
   3430c:	e023      	b.n	34356 <nrf_getaddrinfo+0x122>
   3430e:	220a      	movs	r2, #10
   34310:	2100      	movs	r1, #0
   34312:	4630      	mov	r0, r6
   34314:	f006 fba8 	bl	3aa68 <strtoul>
   34318:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   3431c:	1e42      	subs	r2, r0, #1
   3431e:	429a      	cmp	r2, r3
   34320:	f200 8114 	bhi.w	3454c <nrf_getaddrinfo+0x318>
   34324:	0203      	lsls	r3, r0, #8
   34326:	ea43 2010 	orr.w	r0, r3, r0, lsr #8
   3432a:	4b93      	ldr	r3, [pc, #588]	; (34578 <nrf_getaddrinfo+0x344>)
   3432c:	8018      	strh	r0, [r3, #0]
   3432e:	2f00      	cmp	r7, #0
   34330:	d1cf      	bne.n	342d2 <nrf_getaddrinfo+0x9e>
   34332:	f04f 36ff 	mov.w	r6, #4294967295
   34336:	2200      	movs	r2, #0
   34338:	4b90      	ldr	r3, [pc, #576]	; (3457c <nrf_getaddrinfo+0x348>)
   3433a:	601a      	str	r2, [r3, #0]
   3433c:	b997      	cbnz	r7, 34364 <nrf_getaddrinfo+0x130>
   3433e:	2301      	movs	r3, #1
   34340:	e014      	b.n	3436c <nrf_getaddrinfo+0x138>
   34342:	4601      	mov	r1, r0
   34344:	220a      	movs	r2, #10
   34346:	4630      	mov	r0, r6
   34348:	e7dd      	b.n	34306 <nrf_getaddrinfo+0xd2>
   3434a:	4b8b      	ldr	r3, [pc, #556]	; (34578 <nrf_getaddrinfo+0x344>)
   3434c:	8018      	strh	r0, [r3, #0]
   3434e:	2f00      	cmp	r7, #0
   34350:	d0ef      	beq.n	34332 <nrf_getaddrinfo+0xfe>
   34352:	f04f 36ff 	mov.w	r6, #4294967295
   34356:	6878      	ldr	r0, [r7, #4]
   34358:	2800      	cmp	r0, #0
   3435a:	d0ec      	beq.n	34336 <nrf_getaddrinfo+0x102>
   3435c:	f00c fd0d 	bl	40d7a <nrf_af_to_rpc_af>
   34360:	4b86      	ldr	r3, [pc, #536]	; (3457c <nrf_getaddrinfo+0x348>)
   34362:	6018      	str	r0, [r3, #0]
   34364:	68bb      	ldr	r3, [r7, #8]
   34366:	2b00      	cmp	r3, #0
   34368:	bf08      	it	eq
   3436a:	2301      	moveq	r3, #1
   3436c:	f8df b210 	ldr.w	fp, [pc, #528]	; 34580 <nrf_getaddrinfo+0x34c>
   34370:	f8cb 3000 	str.w	r3, [fp]
   34374:	2f00      	cmp	r7, #0
   34376:	d049      	beq.n	3440c <nrf_getaddrinfo+0x1d8>
   34378:	68fb      	ldr	r3, [r7, #12]
   3437a:	2b00      	cmp	r3, #0
   3437c:	bf08      	it	eq
   3437e:	2306      	moveq	r3, #6
   34380:	f8df a200 	ldr.w	sl, [pc, #512]	; 34584 <nrf_getaddrinfo+0x350>
   34384:	f8ca 3000 	str.w	r3, [sl]
   34388:	b10f      	cbz	r7, 3438e <nrf_getaddrinfo+0x15a>
   3438a:	f8d7 8000 	ldr.w	r8, [r7]
   3438e:	4f7e      	ldr	r7, [pc, #504]	; (34588 <nrf_getaddrinfo+0x354>)
   34390:	4620      	mov	r0, r4
   34392:	f8c7 8000 	str.w	r8, [r7]
   34396:	b10c      	cbz	r4, 3439c <nrf_getaddrinfo+0x168>
   34398:	f7e8 ff53 	bl	1d242 <strlen>
   3439c:	f00b fdf8 	bl	3ff90 <rpc_client_request_alloc>
   343a0:	4680      	mov	r8, r0
   343a2:	2800      	cmp	r0, #0
   343a4:	f000 80d5 	beq.w	34552 <nrf_getaddrinfo+0x31e>
   343a8:	6106      	str	r6, [r0, #16]
   343aa:	b144      	cbz	r4, 343be <nrf_getaddrinfo+0x18a>
   343ac:	6806      	ldr	r6, [r0, #0]
   343ae:	4620      	mov	r0, r4
   343b0:	f7e8 ff47 	bl	1d242 <strlen>
   343b4:	4621      	mov	r1, r4
   343b6:	4602      	mov	r2, r0
   343b8:	4630      	mov	r0, r6
   343ba:	f00c fff3 	bl	413a4 <memcpy>
   343be:	4b6f      	ldr	r3, [pc, #444]	; (3457c <nrf_getaddrinfo+0x348>)
   343c0:	4642      	mov	r2, r8
   343c2:	681b      	ldr	r3, [r3, #0]
   343c4:	f247 010d 	movw	r1, #28685	; 0x700d
   343c8:	f8c8 3018 	str.w	r3, [r8, #24]
   343cc:	f8db 3000 	ldr.w	r3, [fp]
   343d0:	2004      	movs	r0, #4
   343d2:	f8c8 301c 	str.w	r3, [r8, #28]
   343d6:	f8da 3000 	ldr.w	r3, [sl]
   343da:	4e6c      	ldr	r6, [pc, #432]	; (3458c <nrf_getaddrinfo+0x358>)
   343dc:	f8c8 3020 	str.w	r3, [r8, #32]
   343e0:	683b      	ldr	r3, [r7, #0]
   343e2:	f8c8 3014 	str.w	r3, [r8, #20]
   343e6:	f00b fdd9 	bl	3ff9c <rpc_client_request_send>
   343ea:	2300      	movs	r3, #0
   343ec:	7033      	strb	r3, [r6, #0]
   343ee:	f04f 33ff 	mov.w	r3, #4294967295
   343f2:	9301      	str	r3, [sp, #4]
   343f4:	2000      	movs	r0, #0
   343f6:	a901      	add	r1, sp, #4
   343f8:	f7f1 f980 	bl	256fc <nrf_modem_os_timedwait>
   343fc:	4604      	mov	r4, r0
   343fe:	b138      	cbz	r0, 34410 <nrf_getaddrinfo+0x1dc>
   34400:	206e      	movs	r0, #110	; 0x6e
   34402:	f7f1 fa3d 	bl	25880 <nrf_modem_os_errno_set>
   34406:	f46f 748a 	mvn.w	r4, #276	; 0x114
   3440a:	e721      	b.n	34250 <nrf_getaddrinfo+0x1c>
   3440c:	2306      	movs	r3, #6
   3440e:	e7b7      	b.n	34380 <nrf_getaddrinfo+0x14c>
   34410:	7833      	ldrb	r3, [r6, #0]
   34412:	2b01      	cmp	r3, #1
   34414:	d1ee      	bne.n	343f4 <nrf_getaddrinfo+0x1c0>
   34416:	4b5e      	ldr	r3, [pc, #376]	; (34590 <nrf_getaddrinfo+0x35c>)
   34418:	681b      	ldr	r3, [r3, #0]
   3441a:	6958      	ldr	r0, [r3, #20]
   3441c:	2800      	cmp	r0, #0
   3441e:	f040 8091 	bne.w	34544 <nrf_getaddrinfo+0x310>
   34422:	2020      	movs	r0, #32
   34424:	681e      	ldr	r6, [r3, #0]
   34426:	f7f1 fb07 	bl	25a38 <nrf_modem_os_alloc>
   3442a:	6028      	str	r0, [r5, #0]
   3442c:	b300      	cbz	r0, 34470 <nrf_getaddrinfo+0x23c>
   3442e:	f8d6 8008 	ldr.w	r8, [r6, #8]
   34432:	f1b8 0f01 	cmp.w	r8, #1
   34436:	d013      	beq.n	34460 <nrf_getaddrinfo+0x22c>
   34438:	f1b8 0f02 	cmp.w	r8, #2
   3443c:	d03a      	beq.n	344b4 <nrf_getaddrinfo+0x280>
   3443e:	f44f 7487 	mov.w	r4, #270	; 0x10e
   34442:	4b53      	ldr	r3, [pc, #332]	; (34590 <nrf_getaddrinfo+0x35c>)
   34444:	681b      	ldr	r3, [r3, #0]
   34446:	6818      	ldr	r0, [r3, #0]
   34448:	b108      	cbz	r0, 3444e <nrf_getaddrinfo+0x21a>
   3444a:	f00b fdb1 	bl	3ffb0 <rpc_client_data_free>
   3444e:	4b50      	ldr	r3, [pc, #320]	; (34590 <nrf_getaddrinfo+0x35c>)
   34450:	6818      	ldr	r0, [r3, #0]
   34452:	f00b fdaa 	bl	3ffaa <rpc_client_message_free>
   34456:	4b45      	ldr	r3, [pc, #276]	; (3456c <nrf_getaddrinfo+0x338>)
   34458:	6818      	ldr	r0, [r3, #0]
   3445a:	f7f1 fa5d 	bl	25918 <nrf_modem_os_sem_give>
   3445e:	e6f7      	b.n	34250 <nrf_getaddrinfo+0x1c>
   34460:	2010      	movs	r0, #16
   34462:	f7f1 fae9 	bl	25a38 <nrf_modem_os_alloc>
   34466:	4681      	mov	r9, r0
   34468:	b928      	cbnz	r0, 34476 <nrf_getaddrinfo+0x242>
   3446a:	6828      	ldr	r0, [r5, #0]
   3446c:	f7f1 faec 	bl	25a48 <nrf_modem_os_free>
   34470:	f240 140f 	movw	r4, #271	; 0x10f
   34474:	e7e5      	b.n	34442 <nrf_getaddrinfo+0x20e>
   34476:	2210      	movs	r2, #16
   34478:	493f      	ldr	r1, [pc, #252]	; (34578 <nrf_getaddrinfo+0x344>)
   3447a:	7002      	strb	r2, [r0, #0]
   3447c:	8809      	ldrh	r1, [r1, #0]
   3447e:	f8c0 8004 	str.w	r8, [r0, #4]
   34482:	8101      	strh	r1, [r0, #8]
   34484:	69b1      	ldr	r1, [r6, #24]
   34486:	60c1      	str	r1, [r0, #12]
   34488:	6829      	ldr	r1, [r5, #0]
   3448a:	610a      	str	r2, [r1, #16]
   3448c:	683a      	ldr	r2, [r7, #0]
   3448e:	f8d5 8000 	ldr.w	r8, [r5]
   34492:	f012 0202 	ands.w	r2, r2, #2
   34496:	d052      	beq.n	3453e <nrf_getaddrinfo+0x30a>
   34498:	8af0      	ldrh	r0, [r6, #22]
   3449a:	3001      	adds	r0, #1
   3449c:	f7f1 facc 	bl	25a38 <nrf_modem_os_alloc>
   344a0:	682a      	ldr	r2, [r5, #0]
   344a2:	f8c8 0018 	str.w	r0, [r8, #24]
   344a6:	6990      	ldr	r0, [r2, #24]
   344a8:	bb38      	cbnz	r0, 344fa <nrf_getaddrinfo+0x2c6>
   344aa:	4628      	mov	r0, r5
   344ac:	f7f1 facc 	bl	25a48 <nrf_modem_os_free>
   344b0:	4648      	mov	r0, r9
   344b2:	e7db      	b.n	3446c <nrf_getaddrinfo+0x238>
   344b4:	2024      	movs	r0, #36	; 0x24
   344b6:	f7f1 fabf 	bl	25a38 <nrf_modem_os_alloc>
   344ba:	4681      	mov	r9, r0
   344bc:	2800      	cmp	r0, #0
   344be:	d0d4      	beq.n	3446a <nrf_getaddrinfo+0x236>
   344c0:	2224      	movs	r2, #36	; 0x24
   344c2:	4621      	mov	r1, r4
   344c4:	f00c ff8e 	bl	413e4 <memset>
   344c8:	2224      	movs	r2, #36	; 0x24
   344ca:	f889 2000 	strb.w	r2, [r9]
   344ce:	4a2a      	ldr	r2, [pc, #168]	; (34578 <nrf_getaddrinfo+0x344>)
   344d0:	f8c9 8004 	str.w	r8, [r9, #4]
   344d4:	8812      	ldrh	r2, [r2, #0]
   344d6:	f109 0110 	add.w	r1, r9, #16
   344da:	f8a9 2008 	strh.w	r2, [r9, #8]
   344de:	f106 0028 	add.w	r0, r6, #40	; 0x28
   344e2:	f106 0218 	add.w	r2, r6, #24
   344e6:	f852 cb04 	ldr.w	ip, [r2], #4
   344ea:	4282      	cmp	r2, r0
   344ec:	f841 cb04 	str.w	ip, [r1], #4
   344f0:	d1f9      	bne.n	344e6 <nrf_getaddrinfo+0x2b2>
   344f2:	2124      	movs	r1, #36	; 0x24
   344f4:	682a      	ldr	r2, [r5, #0]
   344f6:	6111      	str	r1, [r2, #16]
   344f8:	e7c8      	b.n	3448c <nrf_getaddrinfo+0x258>
   344fa:	f8b6 c014 	ldrh.w	ip, [r6, #20]
   344fe:	f106 0118 	add.w	r1, r6, #24
   34502:	8af2      	ldrh	r2, [r6, #22]
   34504:	4461      	add	r1, ip
   34506:	f00c ff4d 	bl	413a4 <memcpy>
   3450a:	2000      	movs	r0, #0
   3450c:	6829      	ldr	r1, [r5, #0]
   3450e:	8af2      	ldrh	r2, [r6, #22]
   34510:	6989      	ldr	r1, [r1, #24]
   34512:	5488      	strb	r0, [r1, r2]
   34514:	68b0      	ldr	r0, [r6, #8]
   34516:	f8d5 8000 	ldr.w	r8, [r5]
   3451a:	f00c fc2f 	bl	40d7c <rpc_af_to_nrf_af>
   3451e:	2300      	movs	r3, #0
   34520:	682a      	ldr	r2, [r5, #0]
   34522:	f8db 1000 	ldr.w	r1, [fp]
   34526:	f8c8 0004 	str.w	r0, [r8, #4]
   3452a:	6091      	str	r1, [r2, #8]
   3452c:	f8da 1000 	ldr.w	r1, [sl]
   34530:	f8c2 9014 	str.w	r9, [r2, #20]
   34534:	60d1      	str	r1, [r2, #12]
   34536:	6839      	ldr	r1, [r7, #0]
   34538:	61d3      	str	r3, [r2, #28]
   3453a:	6011      	str	r1, [r2, #0]
   3453c:	e781      	b.n	34442 <nrf_getaddrinfo+0x20e>
   3453e:	f8c8 2018 	str.w	r2, [r8, #24]
   34542:	e7e7      	b.n	34514 <nrf_getaddrinfo+0x2e0>
   34544:	f00c fc5c 	bl	40e00 <rpc_error_to_nrf_gai_errno>
   34548:	4604      	mov	r4, r0
   3454a:	e77a      	b.n	34442 <nrf_getaddrinfo+0x20e>
   3454c:	f44f 7489 	mov.w	r4, #274	; 0x112
   34550:	e781      	b.n	34456 <nrf_getaddrinfo+0x222>
   34552:	f240 140f 	movw	r4, #271	; 0x10f
   34556:	e77e      	b.n	34456 <nrf_getaddrinfo+0x222>
   34558:	f240 1411 	movw	r4, #273	; 0x111
   3455c:	e678      	b.n	34250 <nrf_getaddrinfo+0x1c>
   3455e:	f240 1403 	movw	r4, #259	; 0x103
   34562:	e675      	b.n	34250 <nrf_getaddrinfo+0x1c>
   34564:	f44f 7481 	mov.w	r4, #258	; 0x102
   34568:	e672      	b.n	34250 <nrf_getaddrinfo+0x1c>
   3456a:	bf00      	nop
   3456c:	2001a4a4 	.word	0x2001a4a4
   34570:	0004b907 	.word	0x0004b907
   34574:	0004b8f9 	.word	0x0004b8f9
   34578:	2001a59e 	.word	0x2001a59e
   3457c:	2001a4a8 	.word	0x2001a4a8
   34580:	2001a4b8 	.word	0x2001a4b8
   34584:	2001a4b0 	.word	0x2001a4b0
   34588:	2001a4ac 	.word	0x2001a4ac
   3458c:	2001d3bf 	.word	0x2001d3bf
   34590:	2001a4b4 	.word	0x2001a4b4

00034594 <rpc_ip_event_handler>:
   34594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34596:	f248 030f 	movw	r3, #32783	; 0x800f
   3459a:	4299      	cmp	r1, r3
   3459c:	4605      	mov	r5, r0
   3459e:	460e      	mov	r6, r1
   345a0:	d00b      	beq.n	345ba <rpc_ip_event_handler+0x26>
   345a2:	f249 0304 	movw	r3, #36868	; 0x9004
   345a6:	4299      	cmp	r1, r3
   345a8:	d00a      	beq.n	345c0 <rpc_ip_event_handler+0x2c>
   345aa:	f248 030d 	movw	r3, #32781	; 0x800d
   345ae:	4299      	cmp	r1, r3
   345b0:	d117      	bne.n	345e2 <rpc_ip_event_handler+0x4e>
   345b2:	f7ff fe2b 	bl	3420c <on_getaddrinfo_res>
   345b6:	b2c0      	uxtb	r0, r0
   345b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   345ba:	f00b ff53 	bl	40464 <on_conf_dnssrv_res>
   345be:	e7fa      	b.n	345b6 <rpc_ip_event_handler+0x22>
   345c0:	6903      	ldr	r3, [r0, #16]
   345c2:	2b03      	cmp	r3, #3
   345c4:	d806      	bhi.n	345d4 <rpc_ip_event_handler+0x40>
   345c6:	e8df f003 	tbb	[pc, r3]
   345ca:	0a02      	.short	0x0a02
   345cc:	0702      	.short	0x0702
   345ce:	2000      	movs	r0, #0
   345d0:	f7ff fdfe 	bl	341d0 <sock_flow_control_set>
   345d4:	2000      	movs	r0, #0
   345d6:	e7ef      	b.n	345b8 <rpc_ip_event_handler+0x24>
   345d8:	2201      	movs	r2, #1
   345da:	4b71      	ldr	r3, [pc, #452]	; (347a0 <rpc_ip_event_handler+0x20c>)
   345dc:	701a      	strb	r2, [r3, #0]
   345de:	2001      	movs	r0, #1
   345e0:	e7f6      	b.n	345d0 <rpc_ip_event_handler+0x3c>
   345e2:	f5b1 4f10 	cmp.w	r1, #36864	; 0x9000
   345e6:	bf8c      	ite	hi
   345e8:	68c0      	ldrhi	r0, [r0, #12]
   345ea:	6928      	ldrls	r0, [r5, #16]
   345ec:	f7ff fdc8 	bl	34180 <sock_find>
   345f0:	4604      	mov	r4, r0
   345f2:	b928      	cbnz	r0, 34600 <rpc_ip_event_handler+0x6c>
   345f4:	6828      	ldr	r0, [r5, #0]
   345f6:	2800      	cmp	r0, #0
   345f8:	d0ec      	beq.n	345d4 <rpc_ip_event_handler+0x40>
   345fa:	f00b fcd9 	bl	3ffb0 <rpc_client_data_free>
   345fe:	e7e9      	b.n	345d4 <rpc_ip_event_handler+0x40>
   34600:	f248 030c 	movw	r3, #32780	; 0x800c
   34604:	429e      	cmp	r6, r3
   34606:	d823      	bhi.n	34650 <rpc_ip_event_handler+0xbc>
   34608:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   3460c:	d9f2      	bls.n	345f4 <rpc_ip_event_handler+0x60>
   3460e:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
   34612:	3e01      	subs	r6, #1
   34614:	2e0b      	cmp	r6, #11
   34616:	d8ed      	bhi.n	345f4 <rpc_ip_event_handler+0x60>
   34618:	a301      	add	r3, pc, #4	; (adr r3, 34620 <rpc_ip_event_handler+0x8c>)
   3461a:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   3461e:	bf00      	nop
   34620:	000346c3 	.word	0x000346c3
   34624:	000346df 	.word	0x000346df
   34628:	000346c3 	.word	0x000346c3
   3462c:	000346c3 	.word	0x000346c3
   34630:	000346c3 	.word	0x000346c3
   34634:	000346c3 	.word	0x000346c3
   34638:	000346c3 	.word	0x000346c3
   3463c:	000346c3 	.word	0x000346c3
   34640:	000346bb 	.word	0x000346bb
   34644:	000345f5 	.word	0x000345f5
   34648:	000345f5 	.word	0x000345f5
   3464c:	00034723 	.word	0x00034723
   34650:	f249 0302 	movw	r3, #36866	; 0x9002
   34654:	429e      	cmp	r6, r3
   34656:	d068      	beq.n	3472a <rpc_ip_event_handler+0x196>
   34658:	d822      	bhi.n	346a0 <rpc_ip_event_handler+0x10c>
   3465a:	f248 0381 	movw	r3, #32897	; 0x8081
   3465e:	429e      	cmp	r6, r3
   34660:	f000 8098 	beq.w	34794 <rpc_ip_event_handler+0x200>
   34664:	f249 0301 	movw	r3, #36865	; 0x9001
   34668:	429e      	cmp	r6, r3
   3466a:	d1c3      	bne.n	345f4 <rpc_ip_event_handler+0x60>
   3466c:	2010      	movs	r0, #16
   3466e:	f7f1 f9e3 	bl	25a38 <nrf_modem_os_alloc>
   34672:	4606      	mov	r6, r0
   34674:	2800      	cmp	r0, #0
   34676:	d065      	beq.n	34744 <rpc_ip_event_handler+0x1b0>
   34678:	2710      	movs	r7, #16
   3467a:	2100      	movs	r1, #0
   3467c:	463a      	mov	r2, r7
   3467e:	f00c feb1 	bl	413e4 <memset>
   34682:	682b      	ldr	r3, [r5, #0]
   34684:	6073      	str	r3, [r6, #4]
   34686:	686b      	ldr	r3, [r5, #4]
   34688:	8133      	strh	r3, [r6, #8]
   3468a:	8a6b      	ldrh	r3, [r5, #18]
   3468c:	2b04      	cmp	r3, #4
   3468e:	d051      	beq.n	34734 <rpc_ip_event_handler+0x1a0>
   34690:	42bb      	cmp	r3, r7
   34692:	d064      	beq.n	3475e <rpc_ip_event_handler+0x1ca>
   34694:	4620      	mov	r0, r4
   34696:	4631      	mov	r1, r6
   34698:	f00b fda3 	bl	401e2 <sock_pkt_append>
   3469c:	2000      	movs	r0, #0
   3469e:	e78a      	b.n	345b6 <rpc_ip_event_handler+0x22>
   346a0:	f249 0303 	movw	r3, #36867	; 0x9003
   346a4:	429e      	cmp	r6, r3
   346a6:	d010      	beq.n	346ca <rpc_ip_event_handler+0x136>
   346a8:	f249 0382 	movw	r3, #36994	; 0x9082
   346ac:	429e      	cmp	r6, r3
   346ae:	d1a1      	bne.n	345f4 <rpc_ip_event_handler+0x60>
   346b0:	4601      	mov	r1, r0
   346b2:	4628      	mov	r0, r5
   346b4:	f000 fb36 	bl	34d24 <on_tls_handshake_ntf>
   346b8:	e77d      	b.n	345b6 <rpc_ip_event_handler+0x22>
   346ba:	7f03      	ldrb	r3, [r0, #28]
   346bc:	f043 0302 	orr.w	r3, r3, #2
   346c0:	7723      	strb	r3, [r4, #28]
   346c2:	4628      	mov	r0, r5
   346c4:	f00c fbb6 	bl	40e34 <res_forward>
   346c8:	e775      	b.n	345b6 <rpc_ip_event_handler+0x22>
   346ca:	7f03      	ldrb	r3, [r0, #28]
   346cc:	f043 0302 	orr.w	r3, r3, #2
   346d0:	7703      	strb	r3, [r0, #28]
   346d2:	6928      	ldr	r0, [r5, #16]
   346d4:	2869      	cmp	r0, #105	; 0x69
   346d6:	d109      	bne.n	346ec <rpc_ip_event_handler+0x158>
   346d8:	2368      	movs	r3, #104	; 0x68
   346da:	61a3      	str	r3, [r4, #24]
   346dc:	e77a      	b.n	345d4 <rpc_ip_event_handler+0x40>
   346de:	7f03      	ldrb	r3, [r0, #28]
   346e0:	68ee      	ldr	r6, [r5, #12]
   346e2:	f36f 0382 	bfc	r3, #2, #1
   346e6:	7703      	strb	r3, [r0, #28]
   346e8:	6968      	ldr	r0, [r5, #20]
   346ea:	b118      	cbz	r0, 346f4 <rpc_ip_event_handler+0x160>
   346ec:	f000 fba8 	bl	34e40 <rpc_error_to_nrf_errno>
   346f0:	61a0      	str	r0, [r4, #24]
   346f2:	e76f      	b.n	345d4 <rpc_ip_event_handler+0x40>
   346f4:	61a0      	str	r0, [r4, #24]
   346f6:	4620      	mov	r0, r4
   346f8:	f00b fda4 	bl	40244 <sock_proto_is_secure>
   346fc:	b918      	cbnz	r0, 34706 <rpc_ip_event_handler+0x172>
   346fe:	7f23      	ldrb	r3, [r4, #28]
   34700:	f043 0308 	orr.w	r3, r3, #8
   34704:	7723      	strb	r3, [r4, #28]
   34706:	4620      	mov	r0, r4
   34708:	f00b fd9c 	bl	40244 <sock_proto_is_secure>
   3470c:	2800      	cmp	r0, #0
   3470e:	f43f af61 	beq.w	345d4 <rpc_ip_event_handler+0x40>
   34712:	2e00      	cmp	r6, #0
   34714:	f43f af5e 	beq.w	345d4 <rpc_ip_event_handler+0x40>
   34718:	2100      	movs	r1, #0
   3471a:	4620      	mov	r0, r4
   3471c:	f000 fb18 	bl	34d50 <tls_attach>
   34720:	e758      	b.n	345d4 <rpc_ip_event_handler+0x40>
   34722:	7f03      	ldrb	r3, [r0, #28]
   34724:	f36f 1345 	bfc	r3, #5, #1
   34728:	e7ca      	b.n	346c0 <rpc_ip_event_handler+0x12c>
   3472a:	7f03      	ldrb	r3, [r0, #28]
   3472c:	f043 0320 	orr.w	r3, r3, #32
   34730:	7703      	strb	r3, [r0, #28]
   34732:	e74f      	b.n	345d4 <rpc_ip_event_handler+0x40>
   34734:	4638      	mov	r0, r7
   34736:	f7f1 f97f 	bl	25a38 <nrf_modem_os_alloc>
   3473a:	60f0      	str	r0, [r6, #12]
   3473c:	b920      	cbnz	r0, 34748 <rpc_ip_event_handler+0x1b4>
   3473e:	4630      	mov	r0, r6
   34740:	f7f1 f982 	bl	25a48 <nrf_modem_os_free>
   34744:	2002      	movs	r0, #2
   34746:	e736      	b.n	345b6 <rpc_ip_event_handler+0x22>
   34748:	2301      	movs	r3, #1
   3474a:	7007      	strb	r7, [r0, #0]
   3474c:	7c6a      	ldrb	r2, [r5, #17]
   3474e:	6043      	str	r3, [r0, #4]
   34750:	7c2b      	ldrb	r3, [r5, #16]
   34752:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   34756:	8103      	strh	r3, [r0, #8]
   34758:	696b      	ldr	r3, [r5, #20]
   3475a:	60c3      	str	r3, [r0, #12]
   3475c:	e79a      	b.n	34694 <rpc_ip_event_handler+0x100>
   3475e:	2024      	movs	r0, #36	; 0x24
   34760:	f7f1 f96a 	bl	25a38 <nrf_modem_os_alloc>
   34764:	60f0      	str	r0, [r6, #12]
   34766:	2800      	cmp	r0, #0
   34768:	d0e9      	beq.n	3473e <rpc_ip_event_handler+0x1aa>
   3476a:	2324      	movs	r3, #36	; 0x24
   3476c:	7003      	strb	r3, [r0, #0]
   3476e:	2302      	movs	r3, #2
   34770:	7c6a      	ldrb	r2, [r5, #17]
   34772:	6043      	str	r3, [r0, #4]
   34774:	7c2b      	ldrb	r3, [r5, #16]
   34776:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   3477a:	8103      	strh	r3, [r0, #8]
   3477c:	f105 0214 	add.w	r2, r5, #20
   34780:	f100 0310 	add.w	r3, r0, #16
   34784:	3524      	adds	r5, #36	; 0x24
   34786:	f852 1b04 	ldr.w	r1, [r2], #4
   3478a:	42aa      	cmp	r2, r5
   3478c:	f843 1b04 	str.w	r1, [r3], #4
   34790:	d1f9      	bne.n	34786 <rpc_ip_event_handler+0x1f2>
   34792:	e77f      	b.n	34694 <rpc_ip_event_handler+0x100>
   34794:	4601      	mov	r1, r0
   34796:	4628      	mov	r0, r5
   34798:	f000 fab4 	bl	34d04 <on_tls_attach_res>
   3479c:	e70b      	b.n	345b6 <rpc_ip_event_handler+0x22>
   3479e:	bf00      	nop
   347a0:	2001d3c0 	.word	0x2001d3c0

000347a4 <ip_interface_init>:
   347a4:	b508      	push	{r3, lr}
   347a6:	f7ff fcab 	bl	34100 <sock_init>
   347aa:	f7ff fd3b 	bl	34224 <addrinfo_init>
   347ae:	2200      	movs	r2, #0
   347b0:	4b04      	ldr	r3, [pc, #16]	; (347c4 <ip_interface_init+0x20>)
   347b2:	4805      	ldr	r0, [pc, #20]	; (347c8 <ip_interface_init+0x24>)
   347b4:	701a      	strb	r2, [r3, #0]
   347b6:	2201      	movs	r2, #1
   347b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   347bc:	4611      	mov	r1, r2
   347be:	f7f1 b873 	b.w	258a8 <nrf_modem_os_sem_init>
   347c2:	bf00      	nop
   347c4:	2001d3c0 	.word	0x2001d3c0
   347c8:	2001a4bc 	.word	0x2001a4bc

000347cc <nrf_connect>:
   347cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   347d0:	4607      	mov	r7, r0
   347d2:	460c      	mov	r4, r1
   347d4:	4690      	mov	r8, r2
   347d6:	f7ff fcd3 	bl	34180 <sock_find>
   347da:	4605      	mov	r5, r0
   347dc:	b940      	cbnz	r0, 347f0 <nrf_connect+0x24>
   347de:	2009      	movs	r0, #9
   347e0:	f7f1 f84e 	bl	25880 <nrf_modem_os_errno_set>
   347e4:	f04f 34ff 	mov.w	r4, #4294967295
   347e8:	4620      	mov	r0, r4
   347ea:	b002      	add	sp, #8
   347ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   347f0:	f00b fd38 	bl	40264 <sock_is_connected>
   347f4:	b108      	cbz	r0, 347fa <nrf_connect+0x2e>
   347f6:	207f      	movs	r0, #127	; 0x7f
   347f8:	e7f2      	b.n	347e0 <nrf_connect+0x14>
   347fa:	4628      	mov	r0, r5
   347fc:	f00b fd2e 	bl	4025c <sock_is_connecting>
   34800:	4606      	mov	r6, r0
   34802:	b108      	cbz	r0, 34808 <nrf_connect+0x3c>
   34804:	2078      	movs	r0, #120	; 0x78
   34806:	e7eb      	b.n	347e0 <nrf_connect+0x14>
   34808:	b90c      	cbnz	r4, 3480e <nrf_connect+0x42>
   3480a:	200e      	movs	r0, #14
   3480c:	e7e8      	b.n	347e0 <nrf_connect+0x14>
   3480e:	4641      	mov	r1, r8
   34810:	4620      	mov	r0, r4
   34812:	f00b fdd6 	bl	403c2 <sock_sockaddr_len_is_valid>
   34816:	b908      	cbnz	r0, 3481c <nrf_connect+0x50>
   34818:	2016      	movs	r0, #22
   3481a:	e7e1      	b.n	347e0 <nrf_connect+0x14>
   3481c:	4621      	mov	r1, r4
   3481e:	4628      	mov	r0, r5
   34820:	f00b fde3 	bl	403ea <sock_sockaddr_fam_is_valid>
   34824:	b908      	cbnz	r0, 3482a <nrf_connect+0x5e>
   34826:	206a      	movs	r0, #106	; 0x6a
   34828:	e7da      	b.n	347e0 <nrf_connect+0x14>
   3482a:	4628      	mov	r0, r5
   3482c:	f00b fd22 	bl	40274 <sock_is_nonblock>
   34830:	b1a8      	cbz	r0, 3485e <nrf_connect+0x92>
   34832:	696b      	ldr	r3, [r5, #20]
   34834:	2b11      	cmp	r3, #17
   34836:	d00b      	beq.n	34850 <nrf_connect+0x84>
   34838:	4628      	mov	r0, r5
   3483a:	f00b fd03 	bl	40244 <sock_proto_is_secure>
   3483e:	b130      	cbz	r0, 3484e <nrf_connect+0x82>
   34840:	4b32      	ldr	r3, [pc, #200]	; (3490c <nrf_connect+0x140>)
   34842:	6818      	ldr	r0, [r3, #0]
   34844:	f00a fa3f 	bl	3ecc6 <nrf_modem_os_sem_count_get>
   34848:	b908      	cbnz	r0, 3484e <nrf_connect+0x82>
   3484a:	2010      	movs	r0, #16
   3484c:	e7c8      	b.n	347e0 <nrf_connect+0x14>
   3484e:	2601      	movs	r6, #1
   34850:	2000      	movs	r0, #0
   34852:	f00b fb9d 	bl	3ff90 <rpc_client_request_alloc>
   34856:	4602      	mov	r2, r0
   34858:	b918      	cbnz	r0, 34862 <nrf_connect+0x96>
   3485a:	2069      	movs	r0, #105	; 0x69
   3485c:	e7c0      	b.n	347e0 <nrf_connect+0x14>
   3485e:	4606      	mov	r6, r0
   34860:	e7f6      	b.n	34850 <nrf_connect+0x84>
   34862:	2114      	movs	r1, #20
   34864:	2300      	movs	r3, #0
   34866:	7201      	strb	r1, [r0, #8]
   34868:	6861      	ldr	r1, [r4, #4]
   3486a:	6107      	str	r7, [r0, #16]
   3486c:	2901      	cmp	r1, #1
   3486e:	7243      	strb	r3, [r0, #9]
   34870:	7283      	strb	r3, [r0, #10]
   34872:	72c3      	strb	r3, [r0, #11]
   34874:	d00e      	beq.n	34894 <nrf_connect+0xc8>
   34876:	2902      	cmp	r1, #2
   34878:	d014      	beq.n	348a4 <nrf_connect+0xd8>
   3487a:	7f2b      	ldrb	r3, [r5, #28]
   3487c:	f247 0102 	movw	r1, #28674	; 0x7002
   34880:	f043 0304 	orr.w	r3, r3, #4
   34884:	772b      	strb	r3, [r5, #28]
   34886:	2004      	movs	r0, #4
   34888:	60d6      	str	r6, [r2, #12]
   3488a:	f00b fb87 	bl	3ff9c <rpc_client_request_send>
   3488e:	b1ce      	cbz	r6, 348c4 <nrf_connect+0xf8>
   34890:	2077      	movs	r0, #119	; 0x77
   34892:	e7a5      	b.n	347e0 <nrf_connect+0x14>
   34894:	8921      	ldrh	r1, [r4, #8]
   34896:	75c3      	strb	r3, [r0, #23]
   34898:	8281      	strh	r1, [r0, #20]
   3489a:	2104      	movs	r1, #4
   3489c:	7581      	strb	r1, [r0, #22]
   3489e:	68e3      	ldr	r3, [r4, #12]
   348a0:	6183      	str	r3, [r0, #24]
   348a2:	e7ea      	b.n	3487a <nrf_connect+0xae>
   348a4:	8921      	ldrh	r1, [r4, #8]
   348a6:	75c3      	strb	r3, [r0, #23]
   348a8:	8281      	strh	r1, [r0, #20]
   348aa:	2110      	movs	r1, #16
   348ac:	1863      	adds	r3, r4, r1
   348ae:	7581      	strb	r1, [r0, #22]
   348b0:	3420      	adds	r4, #32
   348b2:	f100 0118 	add.w	r1, r0, #24
   348b6:	f853 0b04 	ldr.w	r0, [r3], #4
   348ba:	42a3      	cmp	r3, r4
   348bc:	f841 0b04 	str.w	r0, [r1], #4
   348c0:	d1f9      	bne.n	348b6 <nrf_connect+0xea>
   348c2:	e7da      	b.n	3487a <nrf_connect+0xae>
   348c4:	4628      	mov	r0, r5
   348c6:	f00b fd33 	bl	40330 <sock_sndtimeo_ms_get>
   348ca:	9001      	str	r0, [sp, #4]
   348cc:	4628      	mov	r0, r5
   348ce:	f00b fcc5 	bl	4025c <sock_is_connecting>
   348d2:	b918      	cbnz	r0, 348dc <nrf_connect+0x110>
   348d4:	69ac      	ldr	r4, [r5, #24]
   348d6:	b16c      	cbz	r4, 348f4 <nrf_connect+0x128>
   348d8:	4620      	mov	r0, r4
   348da:	e781      	b.n	347e0 <nrf_connect+0x14>
   348dc:	2000      	movs	r0, #0
   348de:	a901      	add	r1, sp, #4
   348e0:	f7f0 ff0c 	bl	256fc <nrf_modem_os_timedwait>
   348e4:	2800      	cmp	r0, #0
   348e6:	d0f1      	beq.n	348cc <nrf_connect+0x100>
   348e8:	f110 0f0b 	cmn.w	r0, #11
   348ec:	bf0c      	ite	eq
   348ee:	2074      	moveq	r0, #116	; 0x74
   348f0:	206e      	movne	r0, #110	; 0x6e
   348f2:	e775      	b.n	347e0 <nrf_connect+0x14>
   348f4:	4628      	mov	r0, r5
   348f6:	f00b fca5 	bl	40244 <sock_proto_is_secure>
   348fa:	2800      	cmp	r0, #0
   348fc:	f43f af74 	beq.w	347e8 <nrf_connect+0x1c>
   34900:	4628      	mov	r0, r5
   34902:	9901      	ldr	r1, [sp, #4]
   34904:	f000 fa24 	bl	34d50 <tls_attach>
   34908:	4604      	mov	r4, r0
   3490a:	e76d      	b.n	347e8 <nrf_connect+0x1c>
   3490c:	2001a4bc 	.word	0x2001a4bc

00034910 <nrf_sendto>:
   34910:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34914:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   34916:	4682      	mov	sl, r0
   34918:	4689      	mov	r9, r1
   3491a:	4617      	mov	r7, r2
   3491c:	461e      	mov	r6, r3
   3491e:	f7ff fc2f 	bl	34180 <sock_find>
   34922:	4604      	mov	r4, r0
   34924:	b928      	cbnz	r0, 34932 <nrf_sendto+0x22>
   34926:	2009      	movs	r0, #9
   34928:	f7f0 ffaa 	bl	25880 <nrf_modem_os_errno_set>
   3492c:	f04f 34ff 	mov.w	r4, #4294967295
   34930:	e096      	b.n	34a60 <nrf_sendto+0x150>
   34932:	f036 0340 	bics.w	r3, r6, #64	; 0x40
   34936:	d001      	beq.n	3493c <nrf_sendto+0x2c>
   34938:	205f      	movs	r0, #95	; 0x5f
   3493a:	e7f5      	b.n	34928 <nrf_sendto+0x18>
   3493c:	2d00      	cmp	r5, #0
   3493e:	f000 80dc 	beq.w	34afa <nrf_sendto+0x1ea>
   34942:	f00b fc70 	bl	40226 <sock_is_stream>
   34946:	b9b8      	cbnz	r0, 34978 <nrf_sendto+0x68>
   34948:	4629      	mov	r1, r5
   3494a:	4620      	mov	r0, r4
   3494c:	f00b fd4d 	bl	403ea <sock_sockaddr_fam_is_valid>
   34950:	b908      	cbnz	r0, 34956 <nrf_sendto+0x46>
   34952:	206a      	movs	r0, #106	; 0x6a
   34954:	e7e8      	b.n	34928 <nrf_sendto+0x18>
   34956:	4628      	mov	r0, r5
   34958:	990d      	ldr	r1, [sp, #52]	; 0x34
   3495a:	f00b fd32 	bl	403c2 <sock_sockaddr_len_is_valid>
   3495e:	b908      	cbnz	r0, 34964 <nrf_sendto+0x54>
   34960:	2016      	movs	r0, #22
   34962:	e7e1      	b.n	34928 <nrf_sendto+0x18>
   34964:	4620      	mov	r0, r4
   34966:	f00b fc63 	bl	40230 <sock_is_datagram>
   3496a:	b128      	cbz	r0, 34978 <nrf_sendto+0x68>
   3496c:	4620      	mov	r0, r4
   3496e:	f00b fc69 	bl	40244 <sock_proto_is_secure>
   34972:	b108      	cbz	r0, 34978 <nrf_sendto+0x68>
   34974:	207f      	movs	r0, #127	; 0x7f
   34976:	e7d7      	b.n	34928 <nrf_sendto+0x18>
   34978:	4620      	mov	r0, r4
   3497a:	f00b fc83 	bl	40284 <sock_is_closed>
   3497e:	b108      	cbz	r0, 34984 <nrf_sendto+0x74>
   34980:	69a0      	ldr	r0, [r4, #24]
   34982:	e7d1      	b.n	34928 <nrf_sendto+0x18>
   34984:	4620      	mov	r0, r4
   34986:	f00b fcd3 	bl	40330 <sock_sndtimeo_ms_get>
   3498a:	9000      	str	r0, [sp, #0]
   3498c:	4620      	mov	r0, r4
   3498e:	f00b fc71 	bl	40274 <sock_is_nonblock>
   34992:	bb18      	cbnz	r0, 349dc <nrf_sendto+0xcc>
   34994:	f3c6 1880 	ubfx	r8, r6, #6, #1
   34998:	4620      	mov	r0, r4
   3499a:	f00b fc44 	bl	40226 <sock_is_stream>
   3499e:	b140      	cbz	r0, 349b2 <nrf_sendto+0xa2>
   349a0:	4620      	mov	r0, r4
   349a2:	f00b fc4f 	bl	40244 <sock_proto_is_secure>
   349a6:	b120      	cbz	r0, 349b2 <nrf_sendto+0xa2>
   349a8:	f5b7 6f00 	cmp.w	r7, #2048	; 0x800
   349ac:	bf28      	it	cs
   349ae:	f44f 6700 	movcs.w	r7, #2048	; 0x800
   349b2:	4620      	mov	r0, r4
   349b4:	f00b fc71 	bl	4029a <sock_has_flow_control>
   349b8:	b118      	cbz	r0, 349c2 <nrf_sendto+0xb2>
   349ba:	4620      	mov	r0, r4
   349bc:	f00b fc62 	bl	40284 <sock_is_closed>
   349c0:	b178      	cbz	r0, 349e2 <nrf_sendto+0xd2>
   349c2:	4638      	mov	r0, r7
   349c4:	f00b fae4 	bl	3ff90 <rpc_client_request_alloc>
   349c8:	4683      	mov	fp, r0
   349ca:	b9b8      	cbnz	r0, 349fc <nrf_sendto+0xec>
   349cc:	4669      	mov	r1, sp
   349ce:	f7f0 fe95 	bl	256fc <nrf_modem_os_timedwait>
   349d2:	b980      	cbnz	r0, 349f6 <nrf_sendto+0xe6>
   349d4:	f1b8 0f00 	cmp.w	r8, #0
   349d8:	d0f3      	beq.n	349c2 <nrf_sendto+0xb2>
   349da:	e005      	b.n	349e8 <nrf_sendto+0xd8>
   349dc:	f04f 0801 	mov.w	r8, #1
   349e0:	e7da      	b.n	34998 <nrf_sendto+0x88>
   349e2:	f1b8 0f00 	cmp.w	r8, #0
   349e6:	d001      	beq.n	349ec <nrf_sendto+0xdc>
   349e8:	200b      	movs	r0, #11
   349ea:	e79d      	b.n	34928 <nrf_sendto+0x18>
   349ec:	4669      	mov	r1, sp
   349ee:	f7f0 fe85 	bl	256fc <nrf_modem_os_timedwait>
   349f2:	2800      	cmp	r0, #0
   349f4:	d0dd      	beq.n	349b2 <nrf_sendto+0xa2>
   349f6:	f00c fcaf 	bl	41358 <abs>
   349fa:	e795      	b.n	34928 <nrf_sendto+0x18>
   349fc:	f8c0 a010 	str.w	sl, [r0, #16]
   34a00:	f1b9 0f00 	cmp.w	r9, #0
   34a04:	d004      	beq.n	34a10 <nrf_sendto+0x100>
   34a06:	463a      	mov	r2, r7
   34a08:	4649      	mov	r1, r9
   34a0a:	6800      	ldr	r0, [r0, #0]
   34a0c:	f00c fcca 	bl	413a4 <memcpy>
   34a10:	6b22      	ldr	r2, [r4, #48]	; 0x30
   34a12:	b112      	cbz	r2, 34a1a <nrf_sendto+0x10a>
   34a14:	4316      	orrs	r6, r2
   34a16:	2200      	movs	r2, #0
   34a18:	6322      	str	r2, [r4, #48]	; 0x30
   34a1a:	2d00      	cmp	r5, #0
   34a1c:	d044      	beq.n	34aa8 <nrf_sendto+0x198>
   34a1e:	4620      	mov	r0, r4
   34a20:	f00b fc01 	bl	40226 <sock_is_stream>
   34a24:	2800      	cmp	r0, #0
   34a26:	d13f      	bne.n	34aa8 <nrf_sendto+0x198>
   34a28:	2218      	movs	r2, #24
   34a2a:	f88b 2008 	strb.w	r2, [fp, #8]
   34a2e:	686a      	ldr	r2, [r5, #4]
   34a30:	f88b 0009 	strb.w	r0, [fp, #9]
   34a34:	2a01      	cmp	r2, #1
   34a36:	f88b 000a 	strb.w	r0, [fp, #10]
   34a3a:	f88b 000b 	strb.w	r0, [fp, #11]
   34a3e:	f8cb 6014 	str.w	r6, [fp, #20]
   34a42:	d011      	beq.n	34a68 <nrf_sendto+0x158>
   34a44:	2a02      	cmp	r2, #2
   34a46:	d01b      	beq.n	34a80 <nrf_sendto+0x170>
   34a48:	f247 0007 	movw	r0, #28679	; 0x7007
   34a4c:	4659      	mov	r1, fp
   34a4e:	aa01      	add	r2, sp, #4
   34a50:	f000 fa02 	bl	34e58 <req_forward>
   34a54:	4603      	mov	r3, r0
   34a56:	bbb0      	cbnz	r0, 34ac6 <nrf_sendto+0x1b6>
   34a58:	9801      	ldr	r0, [sp, #4]
   34a5a:	6984      	ldr	r4, [r0, #24]
   34a5c:	f00b faa5 	bl	3ffaa <rpc_client_message_free>
   34a60:	4620      	mov	r0, r4
   34a62:	b003      	add	sp, #12
   34a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34a68:	892a      	ldrh	r2, [r5, #8]
   34a6a:	f88b 001b 	strb.w	r0, [fp, #27]
   34a6e:	f8ab 2018 	strh.w	r2, [fp, #24]
   34a72:	2204      	movs	r2, #4
   34a74:	f88b 201a 	strb.w	r2, [fp, #26]
   34a78:	68ea      	ldr	r2, [r5, #12]
   34a7a:	f8cb 201c 	str.w	r2, [fp, #28]
   34a7e:	e7e3      	b.n	34a48 <nrf_sendto+0x138>
   34a80:	892a      	ldrh	r2, [r5, #8]
   34a82:	f10b 011c 	add.w	r1, fp, #28
   34a86:	f8ab 2018 	strh.w	r2, [fp, #24]
   34a8a:	2210      	movs	r2, #16
   34a8c:	f88b 001b 	strb.w	r0, [fp, #27]
   34a90:	f88b 201a 	strb.w	r2, [fp, #26]
   34a94:	f105 0020 	add.w	r0, r5, #32
   34a98:	18aa      	adds	r2, r5, r2
   34a9a:	f852 cb04 	ldr.w	ip, [r2], #4
   34a9e:	4282      	cmp	r2, r0
   34aa0:	f841 cb04 	str.w	ip, [r1], #4
   34aa4:	d1f9      	bne.n	34a9a <nrf_sendto+0x18a>
   34aa6:	e7cf      	b.n	34a48 <nrf_sendto+0x138>
   34aa8:	2200      	movs	r2, #0
   34aaa:	2104      	movs	r1, #4
   34aac:	f247 0006 	movw	r0, #28678	; 0x7006
   34ab0:	f88b 1008 	strb.w	r1, [fp, #8]
   34ab4:	f88b 2009 	strb.w	r2, [fp, #9]
   34ab8:	f88b 200a 	strb.w	r2, [fp, #10]
   34abc:	f88b 200b 	strb.w	r2, [fp, #11]
   34ac0:	f8cb 6014 	str.w	r6, [fp, #20]
   34ac4:	e7c2      	b.n	34a4c <nrf_sendto+0x13c>
   34ac6:	286e      	cmp	r0, #110	; 0x6e
   34ac8:	f43f af2e 	beq.w	34928 <nrf_sendto+0x18>
   34acc:	280c      	cmp	r0, #12
   34ace:	dc09      	bgt.n	34ae4 <nrf_sendto+0x1d4>
   34ad0:	280a      	cmp	r0, #10
   34ad2:	dd0a      	ble.n	34aea <nrf_sendto+0x1da>
   34ad4:	4b0f      	ldr	r3, [pc, #60]	; (34b14 <nrf_sendto+0x204>)
   34ad6:	7818      	ldrb	r0, [r3, #0]
   34ad8:	b148      	cbz	r0, 34aee <nrf_sendto+0x1de>
   34ada:	f1b8 0f00 	cmp.w	r8, #0
   34ade:	f43f af68 	beq.w	349b2 <nrf_sendto+0xa2>
   34ae2:	e781      	b.n	349e8 <nrf_sendto+0xd8>
   34ae4:	288c      	cmp	r0, #140	; 0x8c
   34ae6:	f43f af1f 	beq.w	34928 <nrf_sendto+0x18>
   34aea:	4618      	mov	r0, r3
   34aec:	e71c      	b.n	34928 <nrf_sendto+0x18>
   34aee:	4669      	mov	r1, sp
   34af0:	f7f0 fe04 	bl	256fc <nrf_modem_os_timedwait>
   34af4:	2800      	cmp	r0, #0
   34af6:	d0f0      	beq.n	34ada <nrf_sendto+0x1ca>
   34af8:	e77d      	b.n	349f6 <nrf_sendto+0xe6>
   34afa:	f00b fb99 	bl	40230 <sock_is_datagram>
   34afe:	2800      	cmp	r0, #0
   34b00:	f43f af3a 	beq.w	34978 <nrf_sendto+0x68>
   34b04:	4620      	mov	r0, r4
   34b06:	f00b fbad 	bl	40264 <sock_is_connected>
   34b0a:	2800      	cmp	r0, #0
   34b0c:	f47f af34 	bne.w	34978 <nrf_sendto+0x68>
   34b10:	2079      	movs	r0, #121	; 0x79
   34b12:	e709      	b.n	34928 <nrf_sendto+0x18>
   34b14:	2001d3c0 	.word	0x2001d3c0

00034b18 <nrf_setsockopt>:
   34b18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   34b1c:	b085      	sub	sp, #20
   34b1e:	4680      	mov	r8, r0
   34b20:	4689      	mov	r9, r1
   34b22:	4617      	mov	r7, r2
   34b24:	461d      	mov	r5, r3
   34b26:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   34b28:	f7ff fb2a 	bl	34180 <sock_find>
   34b2c:	b928      	cbnz	r0, 34b3a <nrf_setsockopt+0x22>
   34b2e:	2009      	movs	r0, #9
   34b30:	f7f0 fea6 	bl	25880 <nrf_modem_os_errno_set>
   34b34:	f04f 34ff 	mov.w	r4, #4294967295
   34b38:	e06d      	b.n	34c16 <nrf_setsockopt+0xfe>
   34b3a:	b915      	cbnz	r5, 34b42 <nrf_setsockopt+0x2a>
   34b3c:	b10c      	cbz	r4, 34b42 <nrf_setsockopt+0x2a>
   34b3e:	2016      	movs	r0, #22
   34b40:	e7f6      	b.n	34b30 <nrf_setsockopt+0x18>
   34b42:	f5b9 7f8d 	cmp.w	r9, #282	; 0x11a
   34b46:	d12c      	bne.n	34ba2 <nrf_setsockopt+0x8a>
   34b48:	1e7b      	subs	r3, r7, #1
   34b4a:	2b08      	cmp	r3, #8
   34b4c:	d829      	bhi.n	34ba2 <nrf_setsockopt+0x8a>
   34b4e:	e8df f003 	tbb	[pc, r3]
   34b52:	0c05      	.short	0x0c05
   34b54:	a7211a13 	.word	0xa7211a13
   34b58:	a728      	.short	0xa728
   34b5a:	a7          	.byte	0xa7
   34b5b:	00          	.byte	0x00
   34b5c:	4622      	mov	r2, r4
   34b5e:	4629      	mov	r1, r5
   34b60:	b005      	add	sp, #20
   34b62:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   34b66:	f00b bfea 	b.w	40b3e <tls_setopt_role>
   34b6a:	4622      	mov	r2, r4
   34b6c:	4629      	mov	r1, r5
   34b6e:	b005      	add	sp, #20
   34b70:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   34b74:	f00b bffa 	b.w	40b6c <tls_setopt_taglist>
   34b78:	4622      	mov	r2, r4
   34b7a:	4629      	mov	r1, r5
   34b7c:	b005      	add	sp, #20
   34b7e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   34b82:	f00c b806 	b.w	40b92 <tls_setopt_sess_cache>
   34b86:	4622      	mov	r2, r4
   34b88:	4629      	mov	r1, r5
   34b8a:	b005      	add	sp, #20
   34b8c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   34b90:	f00c b811 	b.w	40bb6 <tls_setopt_peer_verify>
   34b94:	4622      	mov	r2, r4
   34b96:	4629      	mov	r1, r5
   34b98:	b005      	add	sp, #20
   34b9a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   34b9e:	f00c b819 	b.w	40bd4 <tls_setopt_hostname>
   34ba2:	2f37      	cmp	r7, #55	; 0x37
   34ba4:	dc07      	bgt.n	34bb6 <nrf_setsockopt+0x9e>
   34ba6:	2f31      	cmp	r7, #49	; 0x31
   34ba8:	dc07      	bgt.n	34bba <nrf_setsockopt+0xa2>
   34baa:	2f02      	cmp	r7, #2
   34bac:	d078      	beq.n	34ca0 <nrf_setsockopt+0x188>
   34bae:	f1a7 0314 	sub.w	r3, r7, #20
   34bb2:	2b0c      	cmp	r3, #12
   34bb4:	d90a      	bls.n	34bcc <nrf_setsockopt+0xb4>
   34bb6:	206d      	movs	r0, #109	; 0x6d
   34bb8:	e7ba      	b.n	34b30 <nrf_setsockopt+0x18>
   34bba:	f1a7 0333 	sub.w	r3, r7, #51	; 0x33
   34bbe:	2b04      	cmp	r3, #4
   34bc0:	d849      	bhi.n	34c56 <nrf_setsockopt+0x13e>
   34bc2:	e8df f003 	tbb	[pc, r3]
   34bc6:	3f3b      	.short	0x3f3b
   34bc8:	4542      	.short	0x4542
   34bca:	6d          	.byte	0x6d
   34bcb:	00          	.byte	0x00
   34bcc:	2b0c      	cmp	r3, #12
   34bce:	d8f2      	bhi.n	34bb6 <nrf_setsockopt+0x9e>
   34bd0:	a201      	add	r2, pc, #4	; (adr r2, 34bd8 <nrf_setsockopt+0xc0>)
   34bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   34bd6:	bf00      	nop
   34bd8:	00034c0d 	.word	0x00034c0d
   34bdc:	00034c1f 	.word	0x00034c1f
   34be0:	00034bb7 	.word	0x00034bb7
   34be4:	00034bb7 	.word	0x00034bb7
   34be8:	00034bb7 	.word	0x00034bb7
   34bec:	00034c71 	.word	0x00034c71
   34bf0:	00034bb7 	.word	0x00034bb7
   34bf4:	00034bb7 	.word	0x00034bb7
   34bf8:	00034bb7 	.word	0x00034bb7
   34bfc:	00034bb7 	.word	0x00034bb7
   34c00:	00034ca1 	.word	0x00034ca1
   34c04:	00034ca1 	.word	0x00034ca1
   34c08:	00034ca1 	.word	0x00034ca1
   34c0c:	f100 0320 	add.w	r3, r0, #32
   34c10:	b954      	cbnz	r4, 34c28 <nrf_setsockopt+0x110>
   34c12:	6204      	str	r4, [r0, #32]
   34c14:	605c      	str	r4, [r3, #4]
   34c16:	4620      	mov	r0, r4
   34c18:	b005      	add	sp, #20
   34c1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   34c1e:	f100 0328 	add.w	r3, r0, #40	; 0x28
   34c22:	b90c      	cbnz	r4, 34c28 <nrf_setsockopt+0x110>
   34c24:	6284      	str	r4, [r0, #40]	; 0x28
   34c26:	e7f5      	b.n	34c14 <nrf_setsockopt+0xfc>
   34c28:	2c08      	cmp	r4, #8
   34c2a:	4622      	mov	r2, r4
   34c2c:	4629      	mov	r1, r5
   34c2e:	bf28      	it	cs
   34c30:	2208      	movcs	r2, #8
   34c32:	4618      	mov	r0, r3
   34c34:	f00c fbb6 	bl	413a4 <memcpy>
   34c38:	2400      	movs	r4, #0
   34c3a:	e7ec      	b.n	34c16 <nrf_setsockopt+0xfe>
   34c3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   34c40:	6303      	str	r3, [r0, #48]	; 0x30
   34c42:	e7f9      	b.n	34c38 <nrf_setsockopt+0x120>
   34c44:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   34c48:	e7fa      	b.n	34c40 <nrf_setsockopt+0x128>
   34c4a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   34c4e:	e7f7      	b.n	34c40 <nrf_setsockopt+0x128>
   34c50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   34c54:	e7f4      	b.n	34c40 <nrf_setsockopt+0x128>
   34c56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   34c5a:	6303      	str	r3, [r0, #48]	; 0x30
   34c5c:	2300      	movs	r3, #0
   34c5e:	4640      	mov	r0, r8
   34c60:	461a      	mov	r2, r3
   34c62:	4619      	mov	r1, r3
   34c64:	e9cd 3300 	strd	r3, r3, [sp]
   34c68:	f7ff fe52 	bl	34910 <nrf_sendto>
   34c6c:	4604      	mov	r4, r0
   34c6e:	e7d2      	b.n	34c16 <nrf_setsockopt+0xfe>
   34c70:	2d00      	cmp	r5, #0
   34c72:	f43f af64 	beq.w	34b3e <nrf_setsockopt+0x26>
   34c76:	4822      	ldr	r0, [pc, #136]	; (34d00 <nrf_setsockopt+0x1e8>)
   34c78:	f7e8 fae3 	bl	1d242 <strlen>
   34c7c:	4920      	ldr	r1, [pc, #128]	; (34d00 <nrf_setsockopt+0x1e8>)
   34c7e:	4602      	mov	r2, r0
   34c80:	4628      	mov	r0, r5
   34c82:	f00c fb7f 	bl	41384 <memcmp>
   34c86:	4604      	mov	r4, r0
   34c88:	b988      	cbnz	r0, 34cae <nrf_setsockopt+0x196>
   34c8a:	481d      	ldr	r0, [pc, #116]	; (34d00 <nrf_setsockopt+0x1e8>)
   34c8c:	f7e8 fad9 	bl	1d242 <strlen>
   34c90:	220a      	movs	r2, #10
   34c92:	4621      	mov	r1, r4
   34c94:	4428      	add	r0, r5
   34c96:	f005 fee7 	bl	3aa68 <strtoul>
   34c9a:	2404      	movs	r4, #4
   34c9c:	9003      	str	r0, [sp, #12]
   34c9e:	ad03      	add	r5, sp, #12
   34ca0:	4620      	mov	r0, r4
   34ca2:	f00b f975 	bl	3ff90 <rpc_client_request_alloc>
   34ca6:	4606      	mov	r6, r0
   34ca8:	b928      	cbnz	r0, 34cb6 <nrf_setsockopt+0x19e>
   34caa:	2069      	movs	r0, #105	; 0x69
   34cac:	e740      	b.n	34b30 <nrf_setsockopt+0x18>
   34cae:	220a      	movs	r2, #10
   34cb0:	2100      	movs	r1, #0
   34cb2:	4628      	mov	r0, r5
   34cb4:	e7ef      	b.n	34c96 <nrf_setsockopt+0x17e>
   34cb6:	2308      	movs	r3, #8
   34cb8:	f8c0 8010 	str.w	r8, [r0, #16]
   34cbc:	f04f 0800 	mov.w	r8, #0
   34cc0:	7203      	strb	r3, [r0, #8]
   34cc2:	f880 8009 	strb.w	r8, [r0, #9]
   34cc6:	f880 800a 	strb.w	r8, [r0, #10]
   34cca:	f880 800b 	strb.w	r8, [r0, #11]
   34cce:	4648      	mov	r0, r9
   34cd0:	f00c f877 	bl	40dc2 <nrf_sol_to_rpc_sol>
   34cd4:	6170      	str	r0, [r6, #20]
   34cd6:	4638      	mov	r0, r7
   34cd8:	f000 f8a6 	bl	34e28 <nrf_so_to_rpc_so>
   34cdc:	4622      	mov	r2, r4
   34cde:	4629      	mov	r1, r5
   34ce0:	61b0      	str	r0, [r6, #24]
   34ce2:	6830      	ldr	r0, [r6, #0]
   34ce4:	f00c fb5e 	bl	413a4 <memcpy>
   34ce8:	6074      	str	r4, [r6, #4]
   34cea:	4642      	mov	r2, r8
   34cec:	4631      	mov	r1, r6
   34cee:	f247 0003 	movw	r0, #28675	; 0x7003
   34cf2:	f000 f8b1 	bl	34e58 <req_forward>
   34cf6:	4604      	mov	r4, r0
   34cf8:	2800      	cmp	r0, #0
   34cfa:	d08c      	beq.n	34c16 <nrf_setsockopt+0xfe>
   34cfc:	e718      	b.n	34b30 <nrf_setsockopt+0x18>
   34cfe:	bf00      	nop
   34d00:	0004b8f9 	.word	0x0004b8f9

00034d04 <on_tls_attach_res>:
   34d04:	b510      	push	{r4, lr}
   34d06:	6940      	ldr	r0, [r0, #20]
   34d08:	460c      	mov	r4, r1
   34d0a:	b130      	cbz	r0, 34d1a <on_tls_attach_res+0x16>
   34d0c:	f000 f898 	bl	34e40 <rpc_error_to_nrf_errno>
   34d10:	4b03      	ldr	r3, [pc, #12]	; (34d20 <on_tls_attach_res+0x1c>)
   34d12:	61a0      	str	r0, [r4, #24]
   34d14:	6818      	ldr	r0, [r3, #0]
   34d16:	f7f0 fdff 	bl	25918 <nrf_modem_os_sem_give>
   34d1a:	2000      	movs	r0, #0
   34d1c:	bd10      	pop	{r4, pc}
   34d1e:	bf00      	nop
   34d20:	2001a4bc 	.word	0x2001a4bc

00034d24 <on_tls_handshake_ntf>:
   34d24:	b510      	push	{r4, lr}
   34d26:	6900      	ldr	r0, [r0, #16]
   34d28:	460c      	mov	r4, r1
   34d2a:	b958      	cbnz	r0, 34d44 <on_tls_handshake_ntf+0x20>
   34d2c:	7f0b      	ldrb	r3, [r1, #28]
   34d2e:	f023 0318 	bic.w	r3, r3, #24
   34d32:	f043 0318 	orr.w	r3, r3, #24
   34d36:	770b      	strb	r3, [r1, #28]
   34d38:	4b04      	ldr	r3, [pc, #16]	; (34d4c <on_tls_handshake_ntf+0x28>)
   34d3a:	6818      	ldr	r0, [r3, #0]
   34d3c:	f7f0 fdec 	bl	25918 <nrf_modem_os_sem_give>
   34d40:	2000      	movs	r0, #0
   34d42:	bd10      	pop	{r4, pc}
   34d44:	f000 f87c 	bl	34e40 <rpc_error_to_nrf_errno>
   34d48:	61a0      	str	r0, [r4, #24]
   34d4a:	e7f5      	b.n	34d38 <on_tls_handshake_ntf+0x14>
   34d4c:	2001a4bc 	.word	0x2001a4bc

00034d50 <tls_attach>:
   34d50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   34d54:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 34e24 <tls_attach+0xd4>
   34d58:	4606      	mov	r6, r0
   34d5a:	f8d8 0000 	ldr.w	r0, [r8]
   34d5e:	9101      	str	r1, [sp, #4]
   34d60:	f7f0 fdfa 	bl	25958 <nrf_modem_os_sem_take>
   34d64:	4607      	mov	r7, r0
   34d66:	b120      	cbz	r0, 34d72 <tls_attach+0x22>
   34d68:	2310      	movs	r3, #16
   34d6a:	61b3      	str	r3, [r6, #24]
   34d6c:	f04f 37ff 	mov.w	r7, #4294967295
   34d70:	e054      	b.n	34e1c <tls_attach+0xcc>
   34d72:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   34d74:	b1a8      	cbz	r0, 34da2 <tls_attach+0x52>
   34d76:	f7e8 fa64 	bl	1d242 <strlen>
   34d7a:	1c45      	adds	r5, r0, #1
   34d7c:	4628      	mov	r0, r5
   34d7e:	f00b f907 	bl	3ff90 <rpc_client_request_alloc>
   34d82:	4604      	mov	r4, r0
   34d84:	b978      	cbnz	r0, 34da6 <tls_attach+0x56>
   34d86:	4630      	mov	r0, r6
   34d88:	f00b fa74 	bl	40274 <sock_is_nonblock>
   34d8c:	b108      	cbz	r0, 34d92 <tls_attach+0x42>
   34d8e:	2369      	movs	r3, #105	; 0x69
   34d90:	61b3      	str	r3, [r6, #24]
   34d92:	f8d8 0000 	ldr.w	r0, [r8]
   34d96:	f7f0 fdbf 	bl	25918 <nrf_modem_os_sem_give>
   34d9a:	2069      	movs	r0, #105	; 0x69
   34d9c:	f7f0 fd70 	bl	25880 <nrf_modem_os_errno_set>
   34da0:	e7e4      	b.n	34d6c <tls_attach+0x1c>
   34da2:	463d      	mov	r5, r7
   34da4:	e7ea      	b.n	34d7c <tls_attach+0x2c>
   34da6:	6833      	ldr	r3, [r6, #0]
   34da8:	f106 013c 	add.w	r1, r6, #60	; 0x3c
   34dac:	6103      	str	r3, [r0, #16]
   34dae:	f896 203f 	ldrb.w	r2, [r6, #63]	; 0x3f
   34db2:	3014      	adds	r0, #20
   34db4:	3201      	adds	r2, #1
   34db6:	0092      	lsls	r2, r2, #2
   34db8:	f840 2c0c 	str.w	r2, [r0, #-12]
   34dbc:	f00c faf2 	bl	413a4 <memcpy>
   34dc0:	b1b5      	cbz	r5, 34df0 <tls_attach+0xa0>
   34dc2:	6bb1      	ldr	r1, [r6, #56]	; 0x38
   34dc4:	6820      	ldr	r0, [r4, #0]
   34dc6:	f00c fcd8 	bl	4177a <strcpy>
   34dca:	6065      	str	r5, [r4, #4]
   34dcc:	2004      	movs	r0, #4
   34dce:	4622      	mov	r2, r4
   34dd0:	f247 0181 	movw	r1, #28801	; 0x7081
   34dd4:	f00b f8e2 	bl	3ff9c <rpc_client_request_send>
   34dd8:	4630      	mov	r0, r6
   34dda:	f00b fa4b 	bl	40274 <sock_is_nonblock>
   34dde:	b9e8      	cbnz	r0, 34e1c <tls_attach+0xcc>
   34de0:	4630      	mov	r0, r6
   34de2:	f00b fa43 	bl	4026c <sock_is_secured>
   34de6:	69b3      	ldr	r3, [r6, #24]
   34de8:	b9b0      	cbnz	r0, 34e18 <tls_attach+0xc8>
   34dea:	b153      	cbz	r3, 34e02 <tls_attach+0xb2>
   34dec:	4618      	mov	r0, r3
   34dee:	e7d5      	b.n	34d9c <tls_attach+0x4c>
   34df0:	7025      	strb	r5, [r4, #0]
   34df2:	7065      	strb	r5, [r4, #1]
   34df4:	70a5      	strb	r5, [r4, #2]
   34df6:	70e5      	strb	r5, [r4, #3]
   34df8:	7125      	strb	r5, [r4, #4]
   34dfa:	7165      	strb	r5, [r4, #5]
   34dfc:	71a5      	strb	r5, [r4, #6]
   34dfe:	71e5      	strb	r5, [r4, #7]
   34e00:	e7e4      	b.n	34dcc <tls_attach+0x7c>
   34e02:	a901      	add	r1, sp, #4
   34e04:	f7f0 fc7a 	bl	256fc <nrf_modem_os_timedwait>
   34e08:	2800      	cmp	r0, #0
   34e0a:	d0e9      	beq.n	34de0 <tls_attach+0x90>
   34e0c:	f110 0f0b 	cmn.w	r0, #11
   34e10:	bf0c      	ite	eq
   34e12:	2074      	moveq	r0, #116	; 0x74
   34e14:	206e      	movne	r0, #110	; 0x6e
   34e16:	e7c1      	b.n	34d9c <tls_attach+0x4c>
   34e18:	2b00      	cmp	r3, #0
   34e1a:	d1e7      	bne.n	34dec <tls_attach+0x9c>
   34e1c:	4638      	mov	r0, r7
   34e1e:	b002      	add	sp, #8
   34e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34e24:	2001a4bc 	.word	0x2001a4bc

00034e28 <nrf_so_to_rpc_so>:
   34e28:	3802      	subs	r0, #2
   34e2a:	2835      	cmp	r0, #53	; 0x35
   34e2c:	bf9a      	itte	ls
   34e2e:	4b03      	ldrls	r3, [pc, #12]	; (34e3c <nrf_so_to_rpc_so+0x14>)
   34e30:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   34e34:	f04f 30ff 	movhi.w	r0, #4294967295
   34e38:	4770      	bx	lr
   34e3a:	bf00      	nop
   34e3c:	000430e8 	.word	0x000430e8

00034e40 <rpc_error_to_nrf_errno>:
   34e40:	286c      	cmp	r0, #108	; 0x6c
   34e42:	bf9a      	itte	ls
   34e44:	4b02      	ldrls	r3, [pc, #8]	; (34e50 <rpc_error_to_nrf_errno+0x10>)
   34e46:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   34e4a:	4802      	ldrhi	r0, [pc, #8]	; (34e54 <rpc_error_to_nrf_errno+0x14>)
   34e4c:	4770      	bx	lr
   34e4e:	bf00      	nop
   34e50:	000431c0 	.word	0x000431c0
   34e54:	baadbaad 	.word	0xbaadbaad

00034e58 <req_forward>:
   34e58:	b573      	push	{r0, r1, r4, r5, r6, lr}
   34e5a:	4616      	mov	r6, r2
   34e5c:	b9aa      	cbnz	r2, 34e8a <req_forward+0x32>
   34e5e:	ad01      	add	r5, sp, #4
   34e60:	2300      	movs	r3, #0
   34e62:	460a      	mov	r2, r1
   34e64:	602b      	str	r3, [r5, #0]
   34e66:	60cd      	str	r5, [r1, #12]
   34e68:	b281      	uxth	r1, r0
   34e6a:	2004      	movs	r0, #4
   34e6c:	f00b f896 	bl	3ff9c <rpc_client_request_send>
   34e70:	4c0c      	ldr	r4, [pc, #48]	; (34ea4 <req_forward+0x4c>)
   34e72:	6828      	ldr	r0, [r5, #0]
   34e74:	b158      	cbz	r0, 34e8e <req_forward+0x36>
   34e76:	6940      	ldr	r0, [r0, #20]
   34e78:	f7ff ffe2 	bl	34e40 <rpc_error_to_nrf_errno>
   34e7c:	4604      	mov	r4, r0
   34e7e:	b106      	cbz	r6, 34e82 <req_forward+0x2a>
   34e80:	b168      	cbz	r0, 34e9e <req_forward+0x46>
   34e82:	6828      	ldr	r0, [r5, #0]
   34e84:	f00b f891 	bl	3ffaa <rpc_client_message_free>
   34e88:	e009      	b.n	34e9e <req_forward+0x46>
   34e8a:	4615      	mov	r5, r2
   34e8c:	e7e8      	b.n	34e60 <req_forward+0x8>
   34e8e:	4621      	mov	r1, r4
   34e90:	f7f0 fc34 	bl	256fc <nrf_modem_os_timedwait>
   34e94:	2800      	cmp	r0, #0
   34e96:	d0ec      	beq.n	34e72 <req_forward+0x1a>
   34e98:	f00c fa5e 	bl	41358 <abs>
   34e9c:	4604      	mov	r4, r0
   34e9e:	4620      	mov	r0, r4
   34ea0:	b002      	add	sp, #8
   34ea2:	bd70      	pop	{r4, r5, r6, pc}
   34ea4:	20014a60 	.word	0x20014a60

00034ea8 <at_cmd_send>:
   34ea8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   34eaa:	4614      	mov	r4, r2
   34eac:	f06f 0258 	mvn.w	r2, #88	; 0x58
   34eb0:	2300      	movs	r3, #0
   34eb2:	7302      	strb	r2, [r0, #12]
   34eb4:	2204      	movs	r2, #4
   34eb6:	4d0f      	ldr	r5, [pc, #60]	; (34ef4 <at_cmd_send+0x4c>)
   34eb8:	7343      	strb	r3, [r0, #13]
   34eba:	7383      	strb	r3, [r0, #14]
   34ebc:	73c3      	strb	r3, [r0, #15]
   34ebe:	7202      	strb	r2, [r0, #8]
   34ec0:	7243      	strb	r3, [r0, #9]
   34ec2:	7283      	strb	r3, [r0, #10]
   34ec4:	72c3      	strb	r3, [r0, #11]
   34ec6:	4602      	mov	r2, r0
   34ec8:	b289      	uxth	r1, r1
   34eca:	2003      	movs	r0, #3
   34ecc:	702b      	strb	r3, [r5, #0]
   34ece:	f00b f865 	bl	3ff9c <rpc_client_request_send>
   34ed2:	f04f 33ff 	mov.w	r3, #4294967295
   34ed6:	9301      	str	r3, [sp, #4]
   34ed8:	782b      	ldrb	r3, [r5, #0]
   34eda:	42a3      	cmp	r3, r4
   34edc:	d101      	bne.n	34ee2 <at_cmd_send+0x3a>
   34ede:	2000      	movs	r0, #0
   34ee0:	e005      	b.n	34eee <at_cmd_send+0x46>
   34ee2:	2000      	movs	r0, #0
   34ee4:	a901      	add	r1, sp, #4
   34ee6:	f7f0 fc09 	bl	256fc <nrf_modem_os_timedwait>
   34eea:	2800      	cmp	r0, #0
   34eec:	d0f4      	beq.n	34ed8 <at_cmd_send+0x30>
   34eee:	b003      	add	sp, #12
   34ef0:	bd30      	pop	{r4, r5, pc}
   34ef2:	bf00      	nop
   34ef4:	2001d3c1 	.word	0x2001d3c1

00034ef8 <at_response_match>:
   34ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34efa:	4605      	mov	r5, r0
   34efc:	2400      	movs	r4, #0
   34efe:	4f10      	ldr	r7, [pc, #64]	; (34f40 <at_response_match+0x48>)
   34f00:	f857 6b04 	ldr.w	r6, [r7], #4
   34f04:	4628      	mov	r0, r5
   34f06:	4631      	mov	r1, r6
   34f08:	f00c fc86 	bl	41818 <strstr>
   34f0c:	b928      	cbnz	r0, 34f1a <at_response_match+0x22>
   34f0e:	3401      	adds	r4, #1
   34f10:	2c04      	cmp	r4, #4
   34f12:	d1f5      	bne.n	34f00 <at_response_match+0x8>
   34f14:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   34f18:	e00e      	b.n	34f38 <at_response_match+0x40>
   34f1a:	2c01      	cmp	r4, #1
   34f1c:	d0fa      	beq.n	34f14 <at_response_match+0x1c>
   34f1e:	1ea3      	subs	r3, r4, #2
   34f20:	2b01      	cmp	r3, #1
   34f22:	d80a      	bhi.n	34f3a <at_response_match+0x42>
   34f24:	4630      	mov	r0, r6
   34f26:	f7e8 f98c 	bl	1d242 <strlen>
   34f2a:	220a      	movs	r2, #10
   34f2c:	2100      	movs	r1, #0
   34f2e:	4428      	add	r0, r5
   34f30:	f005 fc7e 	bl	3a830 <strtol>
   34f34:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
   34f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34f3a:	2000      	movs	r0, #0
   34f3c:	e7fc      	b.n	34f38 <at_response_match+0x40>
   34f3e:	bf00      	nop
   34f40:	00043374 	.word	0x00043374

00034f44 <at_vprintf>:
   34f44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   34f48:	4607      	mov	r7, r0
   34f4a:	460e      	mov	r6, r1
   34f4c:	481e      	ldr	r0, [pc, #120]	; (34fc8 <at_vprintf+0x84>)
   34f4e:	2100      	movs	r1, #0
   34f50:	4690      	mov	r8, r2
   34f52:	461d      	mov	r5, r3
   34f54:	9301      	str	r3, [sp, #4]
   34f56:	f005 fd91 	bl	3aa7c <vsniprintf>
   34f5a:	3001      	adds	r0, #1
   34f5c:	f00b f818 	bl	3ff90 <rpc_client_request_alloc>
   34f60:	4604      	mov	r4, r0
   34f62:	b368      	cbz	r0, 34fc0 <at_vprintf+0x7c>
   34f64:	9501      	str	r5, [sp, #4]
   34f66:	6841      	ldr	r1, [r0, #4]
   34f68:	462b      	mov	r3, r5
   34f6a:	4642      	mov	r2, r8
   34f6c:	6800      	ldr	r0, [r0, #0]
   34f6e:	f005 fd85 	bl	3aa7c <vsniprintf>
   34f72:	4620      	mov	r0, r4
   34f74:	2202      	movs	r2, #2
   34f76:	2101      	movs	r1, #1
   34f78:	f7ff ff96 	bl	34ea8 <at_cmd_send>
   34f7c:	4604      	mov	r4, r0
   34f7e:	b970      	cbnz	r0, 34f9e <at_vprintf+0x5a>
   34f80:	4d12      	ldr	r5, [pc, #72]	; (34fcc <at_vprintf+0x88>)
   34f82:	682c      	ldr	r4, [r5, #0]
   34f84:	6821      	ldr	r1, [r4, #0]
   34f86:	b977      	cbnz	r7, 34fa6 <at_vprintf+0x62>
   34f88:	6820      	ldr	r0, [r4, #0]
   34f8a:	f7ff ffb5 	bl	34ef8 <at_response_match>
   34f8e:	4604      	mov	r4, r0
   34f90:	682b      	ldr	r3, [r5, #0]
   34f92:	6818      	ldr	r0, [r3, #0]
   34f94:	f00b f80c 	bl	3ffb0 <rpc_client_data_free>
   34f98:	6828      	ldr	r0, [r5, #0]
   34f9a:	f00b f806 	bl	3ffaa <rpc_client_message_free>
   34f9e:	4620      	mov	r0, r4
   34fa0:	b002      	add	sp, #8
   34fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34fa6:	6862      	ldr	r2, [r4, #4]
   34fa8:	4638      	mov	r0, r7
   34faa:	42b2      	cmp	r2, r6
   34fac:	bf28      	it	cs
   34fae:	4632      	movcs	r2, r6
   34fb0:	f00c f9f8 	bl	413a4 <memcpy>
   34fb4:	6863      	ldr	r3, [r4, #4]
   34fb6:	42b3      	cmp	r3, r6
   34fb8:	d9e6      	bls.n	34f88 <at_vprintf+0x44>
   34fba:	f06f 0406 	mvn.w	r4, #6
   34fbe:	e7e7      	b.n	34f90 <at_vprintf+0x4c>
   34fc0:	f06f 040b 	mvn.w	r4, #11
   34fc4:	e7eb      	b.n	34f9e <at_vprintf+0x5a>
   34fc6:	bf00      	nop
   34fc8:	00042814 	.word	0x00042814
   34fcc:	2001a4d0 	.word	0x2001a4d0

00034fd0 <nrf_modem_at_init>:
   34fd0:	2201      	movs	r2, #1
   34fd2:	b508      	push	{r3, lr}
   34fd4:	4611      	mov	r1, r2
   34fd6:	4808      	ldr	r0, [pc, #32]	; (34ff8 <nrf_modem_at_init+0x28>)
   34fd8:	f7f0 fc66 	bl	258a8 <nrf_modem_os_sem_init>
   34fdc:	2000      	movs	r0, #0
   34fde:	f00a ffd7 	bl	3ff90 <rpc_client_request_alloc>
   34fe2:	b128      	cbz	r0, 34ff0 <nrf_modem_at_init+0x20>
   34fe4:	2201      	movs	r2, #1
   34fe6:	2105      	movs	r1, #5
   34fe8:	f7ff ff5e 	bl	34ea8 <at_cmd_send>
   34fec:	2000      	movs	r0, #0
   34fee:	bd08      	pop	{r3, pc}
   34ff0:	f06f 000b 	mvn.w	r0, #11
   34ff4:	e7fb      	b.n	34fee <nrf_modem_at_init+0x1e>
   34ff6:	bf00      	nop
   34ff8:	2001a4c0 	.word	0x2001a4c0

00034ffc <nrf_modem_at_notif_handler_set>:
   34ffc:	4b01      	ldr	r3, [pc, #4]	; (35004 <nrf_modem_at_notif_handler_set+0x8>)
   34ffe:	6018      	str	r0, [r3, #0]
   35000:	2000      	movs	r0, #0
   35002:	4770      	bx	lr
   35004:	2001a4cc 	.word	0x2001a4cc

00035008 <nrf_modem_at_printf>:
   35008:	b40f      	push	{r0, r1, r2, r3}
   3500a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3500c:	9c06      	ldr	r4, [sp, #24]
   3500e:	f000 ff1d 	bl	35e4c <nrf_modem_state_is_initialized>
   35012:	b1b8      	cbz	r0, 35044 <nrf_modem_at_printf+0x3c>
   35014:	b1cc      	cbz	r4, 3504a <nrf_modem_at_printf+0x42>
   35016:	4d0e      	ldr	r5, [pc, #56]	; (35050 <nrf_modem_at_printf+0x48>)
   35018:	f04f 31ff 	mov.w	r1, #4294967295
   3501c:	6828      	ldr	r0, [r5, #0]
   3501e:	f7f0 fc9b 	bl	25958 <nrf_modem_os_sem_take>
   35022:	2100      	movs	r1, #0
   35024:	4622      	mov	r2, r4
   35026:	ab07      	add	r3, sp, #28
   35028:	4608      	mov	r0, r1
   3502a:	9301      	str	r3, [sp, #4]
   3502c:	f7ff ff8a 	bl	34f44 <at_vprintf>
   35030:	4604      	mov	r4, r0
   35032:	6828      	ldr	r0, [r5, #0]
   35034:	f7f0 fc70 	bl	25918 <nrf_modem_os_sem_give>
   35038:	4620      	mov	r0, r4
   3503a:	b003      	add	sp, #12
   3503c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   35040:	b004      	add	sp, #16
   35042:	4770      	bx	lr
   35044:	f04f 34ff 	mov.w	r4, #4294967295
   35048:	e7f6      	b.n	35038 <nrf_modem_at_printf+0x30>
   3504a:	f06f 040d 	mvn.w	r4, #13
   3504e:	e7f3      	b.n	35038 <nrf_modem_at_printf+0x30>
   35050:	2001a4c0 	.word	0x2001a4c0

00035054 <nrf_modem_at_cmd>:
   35054:	b40c      	push	{r2, r3}
   35056:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   3505a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   3505c:	4605      	mov	r5, r0
   3505e:	460e      	mov	r6, r1
   35060:	f000 fef4 	bl	35e4c <nrf_modem_state_is_initialized>
   35064:	2800      	cmp	r0, #0
   35066:	d051      	beq.n	3510c <nrf_modem_at_cmd+0xb8>
   35068:	2d00      	cmp	r5, #0
   3506a:	d052      	beq.n	35112 <nrf_modem_at_cmd+0xbe>
   3506c:	2f00      	cmp	r7, #0
   3506e:	d050      	beq.n	35112 <nrf_modem_at_cmd+0xbe>
   35070:	2e00      	cmp	r6, #0
   35072:	d051      	beq.n	35118 <nrf_modem_at_cmd+0xc4>
   35074:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 35120 <nrf_modem_at_cmd+0xcc>
   35078:	f8d9 3000 	ldr.w	r3, [r9]
   3507c:	b1fb      	cbz	r3, 350be <nrf_modem_at_cmd+0x6a>
   3507e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 35124 <nrf_modem_at_cmd+0xd0>
   35082:	f8d8 3000 	ldr.w	r3, [r8]
   35086:	b1d3      	cbz	r3, 350be <nrf_modem_at_cmd+0x6a>
   35088:	2400      	movs	r4, #0
   3508a:	f8d9 3000 	ldr.w	r3, [r9]
   3508e:	429c      	cmp	r4, r3
   35090:	d215      	bcs.n	350be <nrf_modem_at_cmd+0x6a>
   35092:	f8d8 3000 	ldr.w	r3, [r8]
   35096:	ea4f 0ac4 	mov.w	sl, r4, lsl #3
   3509a:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   3509e:	f7e8 f8d0 	bl	1d242 <strlen>
   350a2:	f8d8 3000 	ldr.w	r3, [r8]
   350a6:	4602      	mov	r2, r0
   350a8:	4639      	mov	r1, r7
   350aa:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   350ae:	f00c fb6c 	bl	4178a <strncmp>
   350b2:	b9c8      	cbnz	r0, 350e8 <nrf_modem_at_cmd+0x94>
   350b4:	f8d8 3000 	ldr.w	r3, [r8]
   350b8:	4453      	add	r3, sl
   350ba:	685b      	ldr	r3, [r3, #4]
   350bc:	b9b3      	cbnz	r3, 350ec <nrf_modem_at_cmd+0x98>
   350be:	f8df 8068 	ldr.w	r8, [pc, #104]	; 35128 <nrf_modem_at_cmd+0xd4>
   350c2:	f04f 31ff 	mov.w	r1, #4294967295
   350c6:	f8d8 0000 	ldr.w	r0, [r8]
   350ca:	f7f0 fc45 	bl	25958 <nrf_modem_os_sem_take>
   350ce:	ab0b      	add	r3, sp, #44	; 0x2c
   350d0:	463a      	mov	r2, r7
   350d2:	4631      	mov	r1, r6
   350d4:	4628      	mov	r0, r5
   350d6:	9301      	str	r3, [sp, #4]
   350d8:	f7ff ff34 	bl	34f44 <at_vprintf>
   350dc:	4604      	mov	r4, r0
   350de:	f8d8 0000 	ldr.w	r0, [r8]
   350e2:	f7f0 fc19 	bl	25918 <nrf_modem_os_sem_give>
   350e6:	e00b      	b.n	35100 <nrf_modem_at_cmd+0xac>
   350e8:	3401      	adds	r4, #1
   350ea:	e7ce      	b.n	3508a <nrf_modem_at_cmd+0x36>
   350ec:	463a      	mov	r2, r7
   350ee:	4631      	mov	r1, r6
   350f0:	4628      	mov	r0, r5
   350f2:	4798      	blx	r3
   350f4:	1e04      	subs	r4, r0, #0
   350f6:	db03      	blt.n	35100 <nrf_modem_at_cmd+0xac>
   350f8:	4628      	mov	r0, r5
   350fa:	f7ff fefd 	bl	34ef8 <at_response_match>
   350fe:	4604      	mov	r4, r0
   35100:	4620      	mov	r0, r4
   35102:	b002      	add	sp, #8
   35104:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   35108:	b002      	add	sp, #8
   3510a:	4770      	bx	lr
   3510c:	f04f 34ff 	mov.w	r4, #4294967295
   35110:	e7f6      	b.n	35100 <nrf_modem_at_cmd+0xac>
   35112:	f06f 040d 	mvn.w	r4, #13
   35116:	e7f3      	b.n	35100 <nrf_modem_at_cmd+0xac>
   35118:	f06f 0415 	mvn.w	r4, #21
   3511c:	e7f0      	b.n	35100 <nrf_modem_at_cmd+0xac>
   3511e:	bf00      	nop
   35120:	2001a4c8 	.word	0x2001a4c8
   35124:	2001a4c4 	.word	0x2001a4c4
   35128:	2001a4c0 	.word	0x2001a4c0

0003512c <nrf_modem_at_scanf>:
   3512c:	b40e      	push	{r1, r2, r3}
   3512e:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
   35130:	9f07      	ldr	r7, [sp, #28]
   35132:	4605      	mov	r5, r0
   35134:	f000 fe8a 	bl	35e4c <nrf_modem_state_is_initialized>
   35138:	2800      	cmp	r0, #0
   3513a:	d03b      	beq.n	351b4 <nrf_modem_at_scanf+0x88>
   3513c:	2d00      	cmp	r5, #0
   3513e:	d03c      	beq.n	351ba <nrf_modem_at_scanf+0x8e>
   35140:	2f00      	cmp	r7, #0
   35142:	d03a      	beq.n	351ba <nrf_modem_at_scanf+0x8e>
   35144:	4e1e      	ldr	r6, [pc, #120]	; (351c0 <nrf_modem_at_scanf+0x94>)
   35146:	f04f 31ff 	mov.w	r1, #4294967295
   3514a:	6830      	ldr	r0, [r6, #0]
   3514c:	f7f0 fc04 	bl	25958 <nrf_modem_os_sem_take>
   35150:	4628      	mov	r0, r5
   35152:	f7e8 f876 	bl	1d242 <strlen>
   35156:	3001      	adds	r0, #1
   35158:	f00a ff1a 	bl	3ff90 <rpc_client_request_alloc>
   3515c:	4604      	mov	r4, r0
   3515e:	b330      	cbz	r0, 351ae <nrf_modem_at_scanf+0x82>
   35160:	4629      	mov	r1, r5
   35162:	6800      	ldr	r0, [r0, #0]
   35164:	f00c fb09 	bl	4177a <strcpy>
   35168:	4620      	mov	r0, r4
   3516a:	2202      	movs	r2, #2
   3516c:	2101      	movs	r1, #1
   3516e:	f7ff fe9b 	bl	34ea8 <at_cmd_send>
   35172:	4604      	mov	r4, r0
   35174:	b990      	cbnz	r0, 3519c <nrf_modem_at_scanf+0x70>
   35176:	4d13      	ldr	r5, [pc, #76]	; (351c4 <nrf_modem_at_scanf+0x98>)
   35178:	aa08      	add	r2, sp, #32
   3517a:	682b      	ldr	r3, [r5, #0]
   3517c:	4639      	mov	r1, r7
   3517e:	6818      	ldr	r0, [r3, #0]
   35180:	9201      	str	r2, [sp, #4]
   35182:	f005 fccd 	bl	3ab20 <vsiscanf>
   35186:	682b      	ldr	r3, [r5, #0]
   35188:	1e04      	subs	r4, r0, #0
   3518a:	6818      	ldr	r0, [r3, #0]
   3518c:	bf08      	it	eq
   3518e:	f06f 044c 	mvneq.w	r4, #76	; 0x4c
   35192:	f00a ff0d 	bl	3ffb0 <rpc_client_data_free>
   35196:	6828      	ldr	r0, [r5, #0]
   35198:	f00a ff07 	bl	3ffaa <rpc_client_message_free>
   3519c:	6830      	ldr	r0, [r6, #0]
   3519e:	f7f0 fbbb 	bl	25918 <nrf_modem_os_sem_give>
   351a2:	4620      	mov	r0, r4
   351a4:	b002      	add	sp, #8
   351a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   351aa:	b003      	add	sp, #12
   351ac:	4770      	bx	lr
   351ae:	f06f 040b 	mvn.w	r4, #11
   351b2:	e7f3      	b.n	3519c <nrf_modem_at_scanf+0x70>
   351b4:	f04f 34ff 	mov.w	r4, #4294967295
   351b8:	e7f3      	b.n	351a2 <nrf_modem_at_scanf+0x76>
   351ba:	f06f 040d 	mvn.w	r4, #13
   351be:	e7f0      	b.n	351a2 <nrf_modem_at_scanf+0x76>
   351c0:	2001a4c0 	.word	0x2001a4c0
   351c4:	2001a4d0 	.word	0x2001a4d0

000351c8 <rpc_at_event_handler>:
   351c8:	b570      	push	{r4, r5, r6, lr}
   351ca:	68c3      	ldr	r3, [r0, #12]
   351cc:	4605      	mov	r5, r0
   351ce:	2ba7      	cmp	r3, #167	; 0xa7
   351d0:	d003      	beq.n	351da <rpc_at_event_handler+0x12>
   351d2:	6828      	ldr	r0, [r5, #0]
   351d4:	f00a feec 	bl	3ffb0 <rpc_client_data_free>
   351d8:	e008      	b.n	351ec <rpc_at_event_handler+0x24>
   351da:	2903      	cmp	r1, #3
   351dc:	d008      	beq.n	351f0 <rpc_at_event_handler+0x28>
   351de:	2904      	cmp	r1, #4
   351e0:	d019      	beq.n	35216 <rpc_at_event_handler+0x4e>
   351e2:	2902      	cmp	r1, #2
   351e4:	d102      	bne.n	351ec <rpc_at_event_handler+0x24>
   351e6:	2201      	movs	r2, #1
   351e8:	4b0e      	ldr	r3, [pc, #56]	; (35224 <rpc_at_event_handler+0x5c>)
   351ea:	701a      	strb	r2, [r3, #0]
   351ec:	2000      	movs	r0, #0
   351ee:	e00a      	b.n	35206 <rpc_at_event_handler+0x3e>
   351f0:	4e0d      	ldr	r6, [pc, #52]	; (35228 <rpc_at_event_handler+0x60>)
   351f2:	6833      	ldr	r3, [r6, #0]
   351f4:	b143      	cbz	r3, 35208 <rpc_at_event_handler+0x40>
   351f6:	2400      	movs	r4, #0
   351f8:	6800      	ldr	r0, [r0, #0]
   351fa:	4798      	blx	r3
   351fc:	6828      	ldr	r0, [r5, #0]
   351fe:	6034      	str	r4, [r6, #0]
   35200:	f00a fed6 	bl	3ffb0 <rpc_client_data_free>
   35204:	b2e0      	uxtb	r0, r4
   35206:	bd70      	pop	{r4, r5, r6, pc}
   35208:	2202      	movs	r2, #2
   3520a:	4b08      	ldr	r3, [pc, #32]	; (3522c <rpc_at_event_handler+0x64>)
   3520c:	2401      	movs	r4, #1
   3520e:	6018      	str	r0, [r3, #0]
   35210:	4b04      	ldr	r3, [pc, #16]	; (35224 <rpc_at_event_handler+0x5c>)
   35212:	701a      	strb	r2, [r3, #0]
   35214:	e7f6      	b.n	35204 <rpc_at_event_handler+0x3c>
   35216:	4b06      	ldr	r3, [pc, #24]	; (35230 <rpc_at_event_handler+0x68>)
   35218:	681b      	ldr	r3, [r3, #0]
   3521a:	2b00      	cmp	r3, #0
   3521c:	d0d9      	beq.n	351d2 <rpc_at_event_handler+0xa>
   3521e:	6800      	ldr	r0, [r0, #0]
   35220:	4798      	blx	r3
   35222:	e7d6      	b.n	351d2 <rpc_at_event_handler+0xa>
   35224:	2001d3c1 	.word	0x2001d3c1
   35228:	2001a4d4 	.word	0x2001a4d4
   3522c:	2001a4d0 	.word	0x2001a4d0
   35230:	2001a4cc 	.word	0x2001a4cc

00035234 <mfu_client_send>:
   35234:	f04f 33ff 	mov.w	r3, #4294967295
   35238:	b513      	push	{r0, r1, r4, lr}
   3523a:	9301      	str	r3, [sp, #4]
   3523c:	231a      	movs	r3, #26
   3523e:	7303      	strb	r3, [r0, #12]
   35240:	f06f 031e 	mvn.w	r3, #30
   35244:	7343      	strb	r3, [r0, #13]
   35246:	f06f 0354 	mvn.w	r3, #84	; 0x54
   3524a:	7383      	strb	r3, [r0, #14]
   3524c:	2315      	movs	r3, #21
   3524e:	2903      	cmp	r1, #3
   35250:	73c3      	strb	r3, [r0, #15]
   35252:	bf14      	ite	ne
   35254:	2304      	movne	r3, #4
   35256:	2308      	moveq	r3, #8
   35258:	6083      	str	r3, [r0, #8]
   3525a:	2300      	movs	r3, #0
   3525c:	4c0a      	ldr	r4, [pc, #40]	; (35288 <mfu_client_send+0x54>)
   3525e:	4602      	mov	r2, r0
   35260:	2006      	movs	r0, #6
   35262:	7023      	strb	r3, [r4, #0]
   35264:	f00a fe9a 	bl	3ff9c <rpc_client_request_send>
   35268:	7823      	ldrb	r3, [r4, #0]
   3526a:	2b01      	cmp	r3, #1
   3526c:	d104      	bne.n	35278 <mfu_client_send+0x44>
   3526e:	4b07      	ldr	r3, [pc, #28]	; (3528c <mfu_client_send+0x58>)
   35270:	681b      	ldr	r3, [r3, #0]
   35272:	6918      	ldr	r0, [r3, #16]
   35274:	4240      	negs	r0, r0
   35276:	e005      	b.n	35284 <mfu_client_send+0x50>
   35278:	2000      	movs	r0, #0
   3527a:	a901      	add	r1, sp, #4
   3527c:	f7f0 fa3e 	bl	256fc <nrf_modem_os_timedwait>
   35280:	2800      	cmp	r0, #0
   35282:	d0f1      	beq.n	35268 <mfu_client_send+0x34>
   35284:	b002      	add	sp, #8
   35286:	bd10      	pop	{r4, pc}
   35288:	2001d3c2 	.word	0x2001d3c2
   3528c:	2001a4d8 	.word	0x2001a4d8

00035290 <nrf_modem_delta_dfu_offset>:
   35290:	b538      	push	{r3, r4, r5, lr}
   35292:	4605      	mov	r5, r0
   35294:	f000 fdda 	bl	35e4c <nrf_modem_state_is_initialized>
   35298:	b190      	cbz	r0, 352c0 <nrf_modem_delta_dfu_offset+0x30>
   3529a:	b1a5      	cbz	r5, 352c6 <nrf_modem_delta_dfu_offset+0x36>
   3529c:	2000      	movs	r0, #0
   3529e:	f00a fe77 	bl	3ff90 <rpc_client_request_alloc>
   352a2:	b198      	cbz	r0, 352cc <nrf_modem_delta_dfu_offset+0x3c>
   352a4:	2109      	movs	r1, #9
   352a6:	f7ff ffc5 	bl	35234 <mfu_client_send>
   352aa:	4b0a      	ldr	r3, [pc, #40]	; (352d4 <nrf_modem_delta_dfu_offset+0x44>)
   352ac:	4604      	mov	r4, r0
   352ae:	b910      	cbnz	r0, 352b6 <nrf_modem_delta_dfu_offset+0x26>
   352b0:	681a      	ldr	r2, [r3, #0]
   352b2:	6952      	ldr	r2, [r2, #20]
   352b4:	602a      	str	r2, [r5, #0]
   352b6:	6818      	ldr	r0, [r3, #0]
   352b8:	f00a fe77 	bl	3ffaa <rpc_client_message_free>
   352bc:	4620      	mov	r0, r4
   352be:	bd38      	pop	{r3, r4, r5, pc}
   352c0:	f04f 34ff 	mov.w	r4, #4294967295
   352c4:	e7fa      	b.n	352bc <nrf_modem_delta_dfu_offset+0x2c>
   352c6:	f06f 040d 	mvn.w	r4, #13
   352ca:	e7f7      	b.n	352bc <nrf_modem_delta_dfu_offset+0x2c>
   352cc:	f06f 040b 	mvn.w	r4, #11
   352d0:	e7f4      	b.n	352bc <nrf_modem_delta_dfu_offset+0x2c>
   352d2:	bf00      	nop
   352d4:	2001a4d8 	.word	0x2001a4d8

000352d8 <nrf_modem_delta_dfu_area>:
   352d8:	b538      	push	{r3, r4, r5, lr}
   352da:	4605      	mov	r5, r0
   352dc:	f000 fdb6 	bl	35e4c <nrf_modem_state_is_initialized>
   352e0:	b190      	cbz	r0, 35308 <nrf_modem_delta_dfu_area+0x30>
   352e2:	b1a5      	cbz	r5, 3530e <nrf_modem_delta_dfu_area+0x36>
   352e4:	2000      	movs	r0, #0
   352e6:	f00a fe53 	bl	3ff90 <rpc_client_request_alloc>
   352ea:	b198      	cbz	r0, 35314 <nrf_modem_delta_dfu_area+0x3c>
   352ec:	2102      	movs	r1, #2
   352ee:	f7ff ffa1 	bl	35234 <mfu_client_send>
   352f2:	4b0a      	ldr	r3, [pc, #40]	; (3531c <nrf_modem_delta_dfu_area+0x44>)
   352f4:	4604      	mov	r4, r0
   352f6:	b910      	cbnz	r0, 352fe <nrf_modem_delta_dfu_area+0x26>
   352f8:	681a      	ldr	r2, [r3, #0]
   352fa:	6952      	ldr	r2, [r2, #20]
   352fc:	602a      	str	r2, [r5, #0]
   352fe:	6818      	ldr	r0, [r3, #0]
   35300:	f00a fe53 	bl	3ffaa <rpc_client_message_free>
   35304:	4620      	mov	r0, r4
   35306:	bd38      	pop	{r3, r4, r5, pc}
   35308:	f04f 34ff 	mov.w	r4, #4294967295
   3530c:	e7fa      	b.n	35304 <nrf_modem_delta_dfu_area+0x2c>
   3530e:	f06f 040d 	mvn.w	r4, #13
   35312:	e7f7      	b.n	35304 <nrf_modem_delta_dfu_area+0x2c>
   35314:	f06f 040b 	mvn.w	r4, #11
   35318:	e7f4      	b.n	35304 <nrf_modem_delta_dfu_area+0x2c>
   3531a:	bf00      	nop
   3531c:	2001a4d8 	.word	0x2001a4d8

00035320 <nrf_modem_delta_dfu_uuid>:
   35320:	b538      	push	{r3, r4, r5, lr}
   35322:	4605      	mov	r5, r0
   35324:	f000 fd92 	bl	35e4c <nrf_modem_state_is_initialized>
   35328:	b1c8      	cbz	r0, 3535e <nrf_modem_delta_dfu_uuid+0x3e>
   3532a:	b1dd      	cbz	r5, 35364 <nrf_modem_delta_dfu_uuid+0x44>
   3532c:	2000      	movs	r0, #0
   3532e:	f00a fe2f 	bl	3ff90 <rpc_client_request_alloc>
   35332:	b1d0      	cbz	r0, 3536a <nrf_modem_delta_dfu_uuid+0x4a>
   35334:	2101      	movs	r1, #1
   35336:	f7ff ff7d 	bl	35234 <mfu_client_send>
   3533a:	490d      	ldr	r1, [pc, #52]	; (35370 <nrf_modem_delta_dfu_uuid+0x50>)
   3533c:	4604      	mov	r4, r0
   3533e:	b948      	cbnz	r0, 35354 <nrf_modem_delta_dfu_uuid+0x34>
   35340:	680b      	ldr	r3, [r1, #0]
   35342:	f103 0214 	add.w	r2, r3, #20
   35346:	3338      	adds	r3, #56	; 0x38
   35348:	f852 0b04 	ldr.w	r0, [r2], #4
   3534c:	429a      	cmp	r2, r3
   3534e:	f845 0b04 	str.w	r0, [r5], #4
   35352:	d1f9      	bne.n	35348 <nrf_modem_delta_dfu_uuid+0x28>
   35354:	6808      	ldr	r0, [r1, #0]
   35356:	f00a fe28 	bl	3ffaa <rpc_client_message_free>
   3535a:	4620      	mov	r0, r4
   3535c:	bd38      	pop	{r3, r4, r5, pc}
   3535e:	f04f 34ff 	mov.w	r4, #4294967295
   35362:	e7fa      	b.n	3535a <nrf_modem_delta_dfu_uuid+0x3a>
   35364:	f06f 040d 	mvn.w	r4, #13
   35368:	e7f7      	b.n	3535a <nrf_modem_delta_dfu_uuid+0x3a>
   3536a:	f06f 040b 	mvn.w	r4, #11
   3536e:	e7f4      	b.n	3535a <nrf_modem_delta_dfu_uuid+0x3a>
   35370:	2001a4d8 	.word	0x2001a4d8

00035374 <nrf_modem_delta_dfu_write_init>:
   35374:	b537      	push	{r0, r1, r2, r4, r5, lr}
   35376:	f000 fd69 	bl	35e4c <nrf_modem_state_is_initialized>
   3537a:	b1d0      	cbz	r0, 353b2 <nrf_modem_delta_dfu_write_init+0x3e>
   3537c:	4d11      	ldr	r5, [pc, #68]	; (353c4 <nrf_modem_delta_dfu_write_init+0x50>)
   3537e:	782b      	ldrb	r3, [r5, #0]
   35380:	b9d3      	cbnz	r3, 353b8 <nrf_modem_delta_dfu_write_init+0x44>
   35382:	a801      	add	r0, sp, #4
   35384:	f7ff ff84 	bl	35290 <nrf_modem_delta_dfu_offset>
   35388:	4604      	mov	r4, r0
   3538a:	b978      	cbnz	r0, 353ac <nrf_modem_delta_dfu_write_init+0x38>
   3538c:	f00a fe00 	bl	3ff90 <rpc_client_request_alloc>
   35390:	b1a8      	cbz	r0, 353be <nrf_modem_delta_dfu_write_init+0x4a>
   35392:	9a01      	ldr	r2, [sp, #4]
   35394:	2103      	movs	r1, #3
   35396:	6102      	str	r2, [r0, #16]
   35398:	f7ff ff4c 	bl	35234 <mfu_client_send>
   3539c:	4604      	mov	r4, r0
   3539e:	4b0a      	ldr	r3, [pc, #40]	; (353c8 <nrf_modem_delta_dfu_write_init+0x54>)
   353a0:	6818      	ldr	r0, [r3, #0]
   353a2:	f00a fe02 	bl	3ffaa <rpc_client_message_free>
   353a6:	b90c      	cbnz	r4, 353ac <nrf_modem_delta_dfu_write_init+0x38>
   353a8:	2301      	movs	r3, #1
   353aa:	702b      	strb	r3, [r5, #0]
   353ac:	4620      	mov	r0, r4
   353ae:	b003      	add	sp, #12
   353b0:	bd30      	pop	{r4, r5, pc}
   353b2:	f04f 34ff 	mov.w	r4, #4294967295
   353b6:	e7f9      	b.n	353ac <nrf_modem_delta_dfu_write_init+0x38>
   353b8:	f06f 0477 	mvn.w	r4, #119	; 0x77
   353bc:	e7f6      	b.n	353ac <nrf_modem_delta_dfu_write_init+0x38>
   353be:	f06f 040b 	mvn.w	r4, #11
   353c2:	e7f3      	b.n	353ac <nrf_modem_delta_dfu_write_init+0x38>
   353c4:	2001d3c3 	.word	0x2001d3c3
   353c8:	2001a4d8 	.word	0x2001a4d8

000353cc <nrf_modem_delta_dfu_write>:
   353cc:	b570      	push	{r4, r5, r6, lr}
   353ce:	4606      	mov	r6, r0
   353d0:	460d      	mov	r5, r1
   353d2:	f000 fd3b 	bl	35e4c <nrf_modem_state_is_initialized>
   353d6:	b1b0      	cbz	r0, 35406 <nrf_modem_delta_dfu_write+0x3a>
   353d8:	b1c6      	cbz	r6, 3540c <nrf_modem_delta_dfu_write+0x40>
   353da:	b1d5      	cbz	r5, 35412 <nrf_modem_delta_dfu_write+0x46>
   353dc:	4628      	mov	r0, r5
   353de:	f00a fdd7 	bl	3ff90 <rpc_client_request_alloc>
   353e2:	4604      	mov	r4, r0
   353e4:	b1c0      	cbz	r0, 35418 <nrf_modem_delta_dfu_write+0x4c>
   353e6:	462a      	mov	r2, r5
   353e8:	4631      	mov	r1, r6
   353ea:	6800      	ldr	r0, [r0, #0]
   353ec:	f00b ffda 	bl	413a4 <memcpy>
   353f0:	4620      	mov	r0, r4
   353f2:	2104      	movs	r1, #4
   353f4:	f7ff ff1e 	bl	35234 <mfu_client_send>
   353f8:	4b09      	ldr	r3, [pc, #36]	; (35420 <nrf_modem_delta_dfu_write+0x54>)
   353fa:	4604      	mov	r4, r0
   353fc:	6818      	ldr	r0, [r3, #0]
   353fe:	f00a fdd4 	bl	3ffaa <rpc_client_message_free>
   35402:	4620      	mov	r0, r4
   35404:	bd70      	pop	{r4, r5, r6, pc}
   35406:	f04f 34ff 	mov.w	r4, #4294967295
   3540a:	e7fa      	b.n	35402 <nrf_modem_delta_dfu_write+0x36>
   3540c:	f06f 040d 	mvn.w	r4, #13
   35410:	e7f7      	b.n	35402 <nrf_modem_delta_dfu_write+0x36>
   35412:	f06f 0415 	mvn.w	r4, #21
   35416:	e7f4      	b.n	35402 <nrf_modem_delta_dfu_write+0x36>
   35418:	f06f 040b 	mvn.w	r4, #11
   3541c:	e7f1      	b.n	35402 <nrf_modem_delta_dfu_write+0x36>
   3541e:	bf00      	nop
   35420:	2001a4d8 	.word	0x2001a4d8

00035424 <nrf_modem_delta_dfu_write_done>:
   35424:	b510      	push	{r4, lr}
   35426:	f000 fd11 	bl	35e4c <nrf_modem_state_is_initialized>
   3542a:	b180      	cbz	r0, 3544e <nrf_modem_delta_dfu_write_done+0x2a>
   3542c:	2000      	movs	r0, #0
   3542e:	f00a fdaf 	bl	3ff90 <rpc_client_request_alloc>
   35432:	b178      	cbz	r0, 35454 <nrf_modem_delta_dfu_write_done+0x30>
   35434:	2106      	movs	r1, #6
   35436:	f7ff fefd 	bl	35234 <mfu_client_send>
   3543a:	4b08      	ldr	r3, [pc, #32]	; (3545c <nrf_modem_delta_dfu_write_done+0x38>)
   3543c:	4604      	mov	r4, r0
   3543e:	6818      	ldr	r0, [r3, #0]
   35440:	f00a fdb3 	bl	3ffaa <rpc_client_message_free>
   35444:	2200      	movs	r2, #0
   35446:	4b06      	ldr	r3, [pc, #24]	; (35460 <nrf_modem_delta_dfu_write_done+0x3c>)
   35448:	701a      	strb	r2, [r3, #0]
   3544a:	4620      	mov	r0, r4
   3544c:	bd10      	pop	{r4, pc}
   3544e:	f04f 34ff 	mov.w	r4, #4294967295
   35452:	e7fa      	b.n	3544a <nrf_modem_delta_dfu_write_done+0x26>
   35454:	f06f 040b 	mvn.w	r4, #11
   35458:	e7f7      	b.n	3544a <nrf_modem_delta_dfu_write_done+0x26>
   3545a:	bf00      	nop
   3545c:	2001a4d8 	.word	0x2001a4d8
   35460:	2001d3c3 	.word	0x2001d3c3

00035464 <nrf_modem_delta_dfu_update>:
   35464:	b510      	push	{r4, lr}
   35466:	f000 fcf1 	bl	35e4c <nrf_modem_state_is_initialized>
   3546a:	b168      	cbz	r0, 35488 <nrf_modem_delta_dfu_update+0x24>
   3546c:	2000      	movs	r0, #0
   3546e:	f00a fd8f 	bl	3ff90 <rpc_client_request_alloc>
   35472:	b160      	cbz	r0, 3548e <nrf_modem_delta_dfu_update+0x2a>
   35474:	2105      	movs	r1, #5
   35476:	f7ff fedd 	bl	35234 <mfu_client_send>
   3547a:	4b06      	ldr	r3, [pc, #24]	; (35494 <nrf_modem_delta_dfu_update+0x30>)
   3547c:	4604      	mov	r4, r0
   3547e:	6818      	ldr	r0, [r3, #0]
   35480:	f00a fd93 	bl	3ffaa <rpc_client_message_free>
   35484:	4620      	mov	r0, r4
   35486:	bd10      	pop	{r4, pc}
   35488:	f04f 34ff 	mov.w	r4, #4294967295
   3548c:	e7fa      	b.n	35484 <nrf_modem_delta_dfu_update+0x20>
   3548e:	f06f 040b 	mvn.w	r4, #11
   35492:	e7f7      	b.n	35484 <nrf_modem_delta_dfu_update+0x20>
   35494:	2001a4d8 	.word	0x2001a4d8

00035498 <nrf_modem_delta_dfu_erase>:
   35498:	b510      	push	{r4, lr}
   3549a:	f000 fcd7 	bl	35e4c <nrf_modem_state_is_initialized>
   3549e:	b168      	cbz	r0, 354bc <nrf_modem_delta_dfu_erase+0x24>
   354a0:	2000      	movs	r0, #0
   354a2:	f00a fd75 	bl	3ff90 <rpc_client_request_alloc>
   354a6:	b160      	cbz	r0, 354c2 <nrf_modem_delta_dfu_erase+0x2a>
   354a8:	2108      	movs	r1, #8
   354aa:	f7ff fec3 	bl	35234 <mfu_client_send>
   354ae:	4b06      	ldr	r3, [pc, #24]	; (354c8 <nrf_modem_delta_dfu_erase+0x30>)
   354b0:	4604      	mov	r4, r0
   354b2:	6818      	ldr	r0, [r3, #0]
   354b4:	f00a fd79 	bl	3ffaa <rpc_client_message_free>
   354b8:	4620      	mov	r0, r4
   354ba:	bd10      	pop	{r4, pc}
   354bc:	f04f 34ff 	mov.w	r4, #4294967295
   354c0:	e7fa      	b.n	354b8 <nrf_modem_delta_dfu_erase+0x20>
   354c2:	f06f 040b 	mvn.w	r4, #11
   354c6:	e7f7      	b.n	354b8 <nrf_modem_delta_dfu_erase+0x20>
   354c8:	2001a4d8 	.word	0x2001a4d8

000354cc <rpc_dfu_event_handler>:
   354cc:	b510      	push	{r4, lr}
   354ce:	4604      	mov	r4, r0
   354d0:	6800      	ldr	r0, [r0, #0]
   354d2:	b108      	cbz	r0, 354d8 <rpc_dfu_event_handler+0xc>
   354d4:	f00a fd6c 	bl	3ffb0 <rpc_client_data_free>
   354d8:	4b05      	ldr	r3, [pc, #20]	; (354f0 <rpc_dfu_event_handler+0x24>)
   354da:	68e2      	ldr	r2, [r4, #12]
   354dc:	429a      	cmp	r2, r3
   354de:	bf05      	ittet	eq
   354e0:	2001      	moveq	r0, #1
   354e2:	4b04      	ldreq	r3, [pc, #16]	; (354f4 <rpc_dfu_event_handler+0x28>)
   354e4:	2000      	movne	r0, #0
   354e6:	7018      	strbeq	r0, [r3, #0]
   354e8:	bf04      	itt	eq
   354ea:	4b03      	ldreq	r3, [pc, #12]	; (354f8 <rpc_dfu_event_handler+0x2c>)
   354ec:	601c      	streq	r4, [r3, #0]
   354ee:	bd10      	pop	{r4, pc}
   354f0:	15abe11a 	.word	0x15abe11a
   354f4:	2001d3c2 	.word	0x2001d3c2
   354f8:	2001a4d8 	.word	0x2001a4d8

000354fc <send_message>:
   354fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   35500:	4607      	mov	r7, r0
   35502:	4688      	mov	r8, r1
   35504:	4616      	mov	r6, r2
   35506:	f000 fca1 	bl	35e4c <nrf_modem_state_is_initialized>
   3550a:	2800      	cmp	r0, #0
   3550c:	d053      	beq.n	355b6 <send_message+0xba>
   3550e:	4d2b      	ldr	r5, [pc, #172]	; (355bc <send_message+0xc0>)
   35510:	782b      	ldrb	r3, [r5, #0]
   35512:	f003 09ff 	and.w	r9, r3, #255	; 0xff
   35516:	2b00      	cmp	r3, #0
   35518:	d14d      	bne.n	355b6 <send_message+0xba>
   3551a:	2301      	movs	r3, #1
   3551c:	4630      	mov	r0, r6
   3551e:	702b      	strb	r3, [r5, #0]
   35520:	f00a fd36 	bl	3ff90 <rpc_client_request_alloc>
   35524:	4604      	mov	r4, r0
   35526:	2800      	cmp	r0, #0
   35528:	d03c      	beq.n	355a4 <send_message+0xa8>
   3552a:	4a25      	ldr	r2, [pc, #148]	; (355c0 <send_message+0xc4>)
   3552c:	4641      	mov	r1, r8
   3552e:	8813      	ldrh	r3, [r2, #0]
   35530:	3301      	adds	r3, #1
   35532:	b29b      	uxth	r3, r3
   35534:	8013      	strh	r3, [r2, #0]
   35536:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
   3553a:	f8c8 3000 	str.w	r3, [r8]
   3553e:	2343      	movs	r3, #67	; 0x43
   35540:	7303      	strb	r3, [r0, #12]
   35542:	2354      	movs	r3, #84	; 0x54
   35544:	7343      	strb	r3, [r0, #13]
   35546:	2376      	movs	r3, #118	; 0x76
   35548:	7383      	strb	r3, [r0, #14]
   3554a:	2349      	movs	r3, #73	; 0x49
   3554c:	4632      	mov	r2, r6
   3554e:	73c3      	strb	r3, [r0, #15]
   35550:	6046      	str	r6, [r0, #4]
   35552:	f880 9008 	strb.w	r9, [r0, #8]
   35556:	f880 9009 	strb.w	r9, [r0, #9]
   3555a:	f880 900a 	strb.w	r9, [r0, #10]
   3555e:	f880 900b 	strb.w	r9, [r0, #11]
   35562:	6800      	ldr	r0, [r0, #0]
   35564:	f00b ff1e 	bl	413a4 <memcpy>
   35568:	4622      	mov	r2, r4
   3556a:	4639      	mov	r1, r7
   3556c:	2007      	movs	r0, #7
   3556e:	f00a fd15 	bl	3ff9c <rpc_client_request_send>
   35572:	f04f 33ff 	mov.w	r3, #4294967295
   35576:	4c13      	ldr	r4, [pc, #76]	; (355c4 <send_message+0xc8>)
   35578:	9301      	str	r3, [sp, #4]
   3557a:	4620      	mov	r0, r4
   3557c:	a901      	add	r1, sp, #4
   3557e:	f7f0 f8bd 	bl	256fc <nrf_modem_os_timedwait>
   35582:	782b      	ldrb	r3, [r5, #0]
   35584:	2b01      	cmp	r3, #1
   35586:	d102      	bne.n	3558e <send_message+0x92>
   35588:	f110 0f6e 	cmn.w	r0, #110	; 0x6e
   3558c:	d1f5      	bne.n	3557a <send_message+0x7e>
   3558e:	782b      	ldrb	r3, [r5, #0]
   35590:	2b02      	cmp	r3, #2
   35592:	d00d      	beq.n	355b0 <send_message+0xb4>
   35594:	782b      	ldrb	r3, [r5, #0]
   35596:	2b03      	cmp	r3, #3
   35598:	bf08      	it	eq
   3559a:	f06f 005e 	mvneq.w	r0, #94	; 0x5e
   3559e:	2300      	movs	r3, #0
   355a0:	702b      	strb	r3, [r5, #0]
   355a2:	e002      	b.n	355aa <send_message+0xae>
   355a4:	7028      	strb	r0, [r5, #0]
   355a6:	f06f 000b 	mvn.w	r0, #11
   355aa:	b003      	add	sp, #12
   355ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   355b0:	f06f 0015 	mvn.w	r0, #21
   355b4:	e7f3      	b.n	3559e <send_message+0xa2>
   355b6:	f04f 30ff 	mov.w	r0, #4294967295
   355ba:	e7f6      	b.n	355aa <send_message+0xae>
   355bc:	2001d3c6 	.word	0x2001d3c6
   355c0:	2001a5a0 	.word	0x2001a5a0
   355c4:	49765443 	.word	0x49765443

000355c8 <rpc_gnss_event_handler>:
   355c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   355cc:	6804      	ldr	r4, [r0, #0]
   355ce:	4607      	mov	r7, r0
   355d0:	460d      	mov	r5, r1
   355d2:	2c00      	cmp	r4, #0
   355d4:	f000 8086 	beq.w	356e4 <rpc_gnss_event_handler+0x11c>
   355d8:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   355dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   355e0:	d142      	bne.n	35668 <rpc_gnss_event_handler+0xa0>
   355e2:	f8df 817c 	ldr.w	r8, [pc, #380]	; 35760 <rpc_gnss_event_handler+0x198>
   355e6:	f898 3000 	ldrb.w	r3, [r8]
   355ea:	2b01      	cmp	r3, #1
   355ec:	d131      	bne.n	35652 <rpc_gnss_event_handler+0x8a>
   355ee:	4b5d      	ldr	r3, [pc, #372]	; (35764 <rpc_gnss_event_handler+0x19c>)
   355f0:	6822      	ldr	r2, [r4, #0]
   355f2:	881b      	ldrh	r3, [r3, #0]
   355f4:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   355f8:	d12b      	bne.n	35652 <rpc_gnss_event_handler+0x8a>
   355fa:	6863      	ldr	r3, [r4, #4]
   355fc:	bb6b      	cbnz	r3, 3565a <rpc_gnss_event_handler+0x92>
   355fe:	4b5a      	ldr	r3, [pc, #360]	; (35768 <rpc_gnss_event_handler+0x1a0>)
   35600:	681e      	ldr	r6, [r3, #0]
   35602:	b31e      	cbz	r6, 3564c <rpc_gnss_event_handler+0x84>
   35604:	f242 0309 	movw	r3, #8201	; 0x2009
   35608:	4299      	cmp	r1, r3
   3560a:	d11f      	bne.n	3564c <rpc_gnss_event_handler+0x84>
   3560c:	4630      	mov	r0, r6
   3560e:	8923      	ldrh	r3, [r4, #8]
   35610:	2280      	movs	r2, #128	; 0x80
   35612:	f840 3b04 	str.w	r3, [r0], #4
   35616:	f104 010a 	add.w	r1, r4, #10
   3561a:	f00b fec3 	bl	413a4 <memcpy>
   3561e:	2280      	movs	r2, #128	; 0x80
   35620:	f104 018a 	add.w	r1, r4, #138	; 0x8a
   35624:	f106 0084 	add.w	r0, r6, #132	; 0x84
   35628:	f00b febc 	bl	413a4 <memcpy>
   3562c:	f8d4 310a 	ldr.w	r3, [r4, #266]	; 0x10a
   35630:	f8c6 3104 	str.w	r3, [r6, #260]	; 0x104
   35634:	f8d4 310e 	ldr.w	r3, [r4, #270]	; 0x10e
   35638:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
   3563c:	f8d4 3112 	ldr.w	r3, [r4, #274]	; 0x112
   35640:	f8c6 310c 	str.w	r3, [r6, #268]	; 0x10c
   35644:	f8d4 3116 	ldr.w	r3, [r4, #278]	; 0x116
   35648:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
   3564c:	2300      	movs	r3, #0
   3564e:	f888 3000 	strb.w	r3, [r8]
   35652:	6838      	ldr	r0, [r7, #0]
   35654:	f00a fcac 	bl	3ffb0 <rpc_client_data_free>
   35658:	e044      	b.n	356e4 <rpc_gnss_event_handler+0x11c>
   3565a:	f647 72ff 	movw	r2, #32767	; 0x7fff
   3565e:	4293      	cmp	r3, r2
   35660:	bf0c      	ite	eq
   35662:	2303      	moveq	r3, #3
   35664:	2302      	movne	r3, #2
   35666:	e7f2      	b.n	3564e <rpc_gnss_event_handler+0x86>
   35668:	4e40      	ldr	r6, [pc, #256]	; (3576c <rpc_gnss_event_handler+0x1a4>)
   3566a:	6833      	ldr	r3, [r6, #0]
   3566c:	2b00      	cmp	r3, #0
   3566e:	d0f0      	beq.n	35652 <rpc_gnss_event_handler+0x8a>
   35670:	f244 0204 	movw	r2, #16388	; 0x4004
   35674:	4291      	cmp	r1, r2
   35676:	d80b      	bhi.n	35690 <rpc_gnss_event_handler+0xc8>
   35678:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   3567c:	d9e9      	bls.n	35652 <rpc_gnss_event_handler+0x8a>
   3567e:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
   35682:	3a02      	subs	r2, #2
   35684:	2a02      	cmp	r2, #2
   35686:	d80b      	bhi.n	356a0 <rpc_gnss_event_handler+0xd8>
   35688:	e8df f002 	tbb	[pc, r2]
   3568c:	4f45      	.short	0x4f45
   3568e:	59          	.byte	0x59
   3568f:	00          	.byte	0x00
   35690:	f244 1301 	movw	r3, #16641	; 0x4101
   35694:	4299      	cmp	r1, r3
   35696:	d003      	beq.n	356a0 <rpc_gnss_event_handler+0xd8>
   35698:	f244 2301 	movw	r3, #16897	; 0x4201
   3569c:	4299      	cmp	r1, r3
   3569e:	d1d8      	bne.n	35652 <rpc_gnss_event_handler+0x8a>
   356a0:	4f33      	ldr	r7, [pc, #204]	; (35770 <rpc_gnss_event_handler+0x1a8>)
   356a2:	6838      	ldr	r0, [r7, #0]
   356a4:	b108      	cbz	r0, 356aa <rpc_gnss_event_handler+0xe2>
   356a6:	f00a fc83 	bl	3ffb0 <rpc_client_data_free>
   356aa:	f244 2301 	movw	r3, #16897	; 0x4201
   356ae:	429d      	cmp	r5, r3
   356b0:	4b30      	ldr	r3, [pc, #192]	; (35774 <rpc_gnss_event_handler+0x1ac>)
   356b2:	d11a      	bne.n	356ea <rpc_gnss_event_handler+0x122>
   356b4:	2202      	movs	r2, #2
   356b6:	603c      	str	r4, [r7, #0]
   356b8:	f894 4051 	ldrb.w	r4, [r4, #81]	; 0x51
   356bc:	701a      	strb	r2, [r3, #0]
   356be:	4d2e      	ldr	r5, [pc, #184]	; (35778 <rpc_gnss_event_handler+0x1b0>)
   356c0:	f014 0718 	ands.w	r7, r4, #24
   356c4:	6833      	ldr	r3, [r6, #0]
   356c6:	782a      	ldrb	r2, [r5, #0]
   356c8:	d01f      	beq.n	3570a <rpc_gnss_event_handler+0x142>
   356ca:	b91a      	cbnz	r2, 356d4 <rpc_gnss_event_handler+0x10c>
   356cc:	2005      	movs	r0, #5
   356ce:	4798      	blx	r3
   356d0:	2301      	movs	r3, #1
   356d2:	702b      	strb	r3, [r5, #0]
   356d4:	07e3      	lsls	r3, r4, #31
   356d6:	d502      	bpl.n	356de <rpc_gnss_event_handler+0x116>
   356d8:	2002      	movs	r0, #2
   356da:	6833      	ldr	r3, [r6, #0]
   356dc:	4798      	blx	r3
   356de:	2001      	movs	r0, #1
   356e0:	6833      	ldr	r3, [r6, #0]
   356e2:	4798      	blx	r3
   356e4:	2000      	movs	r0, #0
   356e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   356ea:	f244 1201 	movw	r2, #16641	; 0x4101
   356ee:	4295      	cmp	r5, r2
   356f0:	bf0b      	itete	eq
   356f2:	2201      	moveq	r2, #1
   356f4:	2200      	movne	r2, #0
   356f6:	603c      	streq	r4, [r7, #0]
   356f8:	603c      	strne	r4, [r7, #0]
   356fa:	bf0b      	itete	eq
   356fc:	f894 4041 	ldrbeq.w	r4, [r4, #65]	; 0x41
   35700:	f894 403d 	ldrbne.w	r4, [r4, #61]	; 0x3d
   35704:	701a      	strbeq	r2, [r3, #0]
   35706:	701a      	strbne	r2, [r3, #0]
   35708:	e7d9      	b.n	356be <rpc_gnss_event_handler+0xf6>
   3570a:	2a00      	cmp	r2, #0
   3570c:	d0e2      	beq.n	356d4 <rpc_gnss_event_handler+0x10c>
   3570e:	2006      	movs	r0, #6
   35710:	4798      	blx	r3
   35712:	702f      	strb	r7, [r5, #0]
   35714:	e7de      	b.n	356d4 <rpc_gnss_event_handler+0x10c>
   35716:	4c19      	ldr	r4, [pc, #100]	; (3577c <rpc_gnss_event_handler+0x1b4>)
   35718:	6820      	ldr	r0, [r4, #0]
   3571a:	b108      	cbz	r0, 35720 <rpc_gnss_event_handler+0x158>
   3571c:	f00a fc48 	bl	3ffb0 <rpc_client_data_free>
   35720:	683b      	ldr	r3, [r7, #0]
   35722:	2003      	movs	r0, #3
   35724:	6023      	str	r3, [r4, #0]
   35726:	6833      	ldr	r3, [r6, #0]
   35728:	e7db      	b.n	356e2 <rpc_gnss_event_handler+0x11a>
   3572a:	4c15      	ldr	r4, [pc, #84]	; (35780 <rpc_gnss_event_handler+0x1b8>)
   3572c:	6820      	ldr	r0, [r4, #0]
   3572e:	b108      	cbz	r0, 35734 <rpc_gnss_event_handler+0x16c>
   35730:	f00a fc3e 	bl	3ffb0 <rpc_client_data_free>
   35734:	683b      	ldr	r3, [r7, #0]
   35736:	2004      	movs	r0, #4
   35738:	6023      	str	r3, [r4, #0]
   3573a:	6833      	ldr	r3, [r6, #0]
   3573c:	e7d1      	b.n	356e2 <rpc_gnss_event_handler+0x11a>
   3573e:	7822      	ldrb	r2, [r4, #0]
   35740:	2a03      	cmp	r2, #3
   35742:	d886      	bhi.n	35652 <rpc_gnss_event_handler+0x8a>
   35744:	e8df f002 	tbb	[pc, r2]
   35748:	09070502 	.word	0x09070502
   3574c:	2007      	movs	r0, #7
   3574e:	4798      	blx	r3
   35750:	e77f      	b.n	35652 <rpc_gnss_event_handler+0x8a>
   35752:	2008      	movs	r0, #8
   35754:	e7fb      	b.n	3574e <rpc_gnss_event_handler+0x186>
   35756:	2009      	movs	r0, #9
   35758:	e7f9      	b.n	3574e <rpc_gnss_event_handler+0x186>
   3575a:	200a      	movs	r0, #10
   3575c:	e7f7      	b.n	3574e <rpc_gnss_event_handler+0x186>
   3575e:	bf00      	nop
   35760:	2001d3c6 	.word	0x2001d3c6
   35764:	2001a5a0 	.word	0x2001a5a0
   35768:	2001a4ec 	.word	0x2001a4ec
   3576c:	2001a4dc 	.word	0x2001a4dc
   35770:	2001a4e0 	.word	0x2001a4e0
   35774:	2001d3c5 	.word	0x2001d3c5
   35778:	2001d3c4 	.word	0x2001d3c4
   3577c:	2001a4e8 	.word	0x2001a4e8
   35780:	2001a4e4 	.word	0x2001a4e4

00035784 <nrf_modem_gnss_read>:
   35784:	b570      	push	{r4, r5, r6, lr}
   35786:	4604      	mov	r4, r0
   35788:	2800      	cmp	r0, #0
   3578a:	f000 817d 	beq.w	35a88 <nrf_modem_gnss_read+0x304>
   3578e:	2a02      	cmp	r2, #2
   35790:	f000 815a 	beq.w	35a48 <nrf_modem_gnss_read+0x2c4>
   35794:	2a03      	cmp	r2, #3
   35796:	f000 8166 	beq.w	35a66 <nrf_modem_gnss_read+0x2e2>
   3579a:	2a01      	cmp	r2, #1
   3579c:	f040 8174 	bne.w	35a88 <nrf_modem_gnss_read+0x304>
   357a0:	29e7      	cmp	r1, #231	; 0xe7
   357a2:	f240 8174 	bls.w	35a8e <nrf_modem_gnss_read+0x30a>
   357a6:	f00a fbe2 	bl	3ff6e <rpc_transport_rx_data_suspend>
   357aa:	4bba      	ldr	r3, [pc, #744]	; (35a94 <nrf_modem_gnss_read+0x310>)
   357ac:	681d      	ldr	r5, [r3, #0]
   357ae:	b925      	cbnz	r5, 357ba <nrf_modem_gnss_read+0x36>
   357b0:	f00a fbdf 	bl	3ff72 <rpc_transport_rx_data_resume>
   357b4:	f06f 0022 	mvn.w	r0, #34	; 0x22
   357b8:	e083      	b.n	358c2 <nrf_modem_gnss_read+0x13e>
   357ba:	2100      	movs	r1, #0
   357bc:	22e8      	movs	r2, #232	; 0xe8
   357be:	4620      	mov	r0, r4
   357c0:	f00b fe10 	bl	413e4 <memset>
   357c4:	4bb4      	ldr	r3, [pc, #720]	; (35a98 <nrf_modem_gnss_read+0x314>)
   357c6:	68a9      	ldr	r1, [r5, #8]
   357c8:	781b      	ldrb	r3, [r3, #0]
   357ca:	2b01      	cmp	r3, #1
   357cc:	d07a      	beq.n	358c4 <nrf_modem_gnss_read+0x140>
   357ce:	2b02      	cmp	r3, #2
   357d0:	460b      	mov	r3, r1
   357d2:	686a      	ldr	r2, [r5, #4]
   357d4:	e9c4 2300 	strd	r2, r3, [r4]
   357d8:	692b      	ldr	r3, [r5, #16]
   357da:	68ea      	ldr	r2, [r5, #12]
   357dc:	e9c4 2302 	strd	r2, r3, [r4, #8]
   357e0:	696b      	ldr	r3, [r5, #20]
   357e2:	6123      	str	r3, [r4, #16]
   357e4:	69ab      	ldr	r3, [r5, #24]
   357e6:	6163      	str	r3, [r4, #20]
   357e8:	69eb      	ldr	r3, [r5, #28]
   357ea:	f040 80d4 	bne.w	35996 <nrf_modem_gnss_read+0x212>
   357ee:	61a3      	str	r3, [r4, #24]
   357f0:	6a2b      	ldr	r3, [r5, #32]
   357f2:	260a      	movs	r6, #10
   357f4:	61e3      	str	r3, [r4, #28]
   357f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   357f8:	6223      	str	r3, [r4, #32]
   357fa:	6aab      	ldr	r3, [r5, #40]	; 0x28
   357fc:	6263      	str	r3, [r4, #36]	; 0x24
   357fe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   35800:	62a3      	str	r3, [r4, #40]	; 0x28
   35802:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   35804:	62e3      	str	r3, [r4, #44]	; 0x2c
   35806:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   35808:	6323      	str	r3, [r4, #48]	; 0x30
   3580a:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
   3580e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
   35812:	f8d5 3041 	ldr.w	r3, [r5, #65]	; 0x41
   35816:	6423      	str	r3, [r4, #64]	; 0x40
   35818:	f8d5 3045 	ldr.w	r3, [r5, #69]	; 0x45
   3581c:	6463      	str	r3, [r4, #68]	; 0x44
   3581e:	f8d5 3049 	ldr.w	r3, [r5, #73]	; 0x49
   35822:	64a3      	str	r3, [r4, #72]	; 0x48
   35824:	f8d5 304d 	ldr.w	r3, [r5, #77]	; 0x4d
   35828:	64e3      	str	r3, [r4, #76]	; 0x4c
   3582a:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   3582e:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   35832:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   35836:	86a3      	strh	r3, [r4, #52]	; 0x34
   35838:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
   3583c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   35840:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
   35844:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
   35848:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   3584c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   35850:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
   35854:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   35858:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
   3585c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   35860:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
   35864:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
   35868:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   3586c:	87a3      	strh	r3, [r4, #60]	; 0x3c
   3586e:	f8d5 30ca 	ldr.w	r3, [r5, #202]	; 0xca
   35872:	462a      	mov	r2, r5
   35874:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
   35878:	2300      	movs	r3, #0
   3587a:	fb06 5103 	mla	r1, r6, r3, r5
   3587e:	f8b1 0052 	ldrh.w	r0, [r1, #82]	; 0x52
   35882:	3301      	adds	r3, #1
   35884:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
   35888:	f892 0054 	ldrb.w	r0, [r2, #84]	; 0x54
   3588c:	2b0c      	cmp	r3, #12
   3588e:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
   35892:	f8b1 0055 	ldrh.w	r0, [r1, #85]	; 0x55
   35896:	f104 040c 	add.w	r4, r4, #12
   3589a:	f8a4 004a 	strh.w	r0, [r4, #74]	; 0x4a
   3589e:	f9b1 0057 	ldrsh.w	r0, [r1, #87]	; 0x57
   358a2:	f102 020a 	add.w	r2, r2, #10
   358a6:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
   358aa:	f9b1 1059 	ldrsh.w	r1, [r1, #89]	; 0x59
   358ae:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
   358b2:	f892 1051 	ldrb.w	r1, [r2, #81]	; 0x51
   358b6:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
   358ba:	d1de      	bne.n	3587a <nrf_modem_gnss_read+0xf6>
   358bc:	f00a fb59 	bl	3ff72 <rpc_transport_rx_data_resume>
   358c0:	2000      	movs	r0, #0
   358c2:	bd70      	pop	{r4, r5, r6, pc}
   358c4:	460b      	mov	r3, r1
   358c6:	686a      	ldr	r2, [r5, #4]
   358c8:	260a      	movs	r6, #10
   358ca:	e9c4 2300 	strd	r2, r3, [r4]
   358ce:	68ea      	ldr	r2, [r5, #12]
   358d0:	692b      	ldr	r3, [r5, #16]
   358d2:	e9c4 2302 	strd	r2, r3, [r4, #8]
   358d6:	696b      	ldr	r3, [r5, #20]
   358d8:	6123      	str	r3, [r4, #16]
   358da:	69ab      	ldr	r3, [r5, #24]
   358dc:	6163      	str	r3, [r4, #20]
   358de:	69eb      	ldr	r3, [r5, #28]
   358e0:	61e3      	str	r3, [r4, #28]
   358e2:	6a2b      	ldr	r3, [r5, #32]
   358e4:	6223      	str	r3, [r4, #32]
   358e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   358e8:	62e3      	str	r3, [r4, #44]	; 0x2c
   358ea:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
   358ee:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
   358f2:	f8d5 3031 	ldr.w	r3, [r5, #49]	; 0x31
   358f6:	6423      	str	r3, [r4, #64]	; 0x40
   358f8:	f8d5 3035 	ldr.w	r3, [r5, #53]	; 0x35
   358fc:	6463      	str	r3, [r4, #68]	; 0x44
   358fe:	f8d5 3039 	ldr.w	r3, [r5, #57]	; 0x39
   35902:	64a3      	str	r3, [r4, #72]	; 0x48
   35904:	f8d5 303d 	ldr.w	r3, [r5, #61]	; 0x3d
   35908:	64e3      	str	r3, [r4, #76]	; 0x4c
   3590a:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
   3590e:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   35912:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   35916:	86a3      	strh	r3, [r4, #52]	; 0x34
   35918:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
   3591c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   35920:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   35924:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
   35928:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   3592c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   35930:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   35934:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   35938:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   3593c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   35940:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
   35944:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   35948:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   3594c:	87a3      	strh	r3, [r4, #60]	; 0x3c
   3594e:	462a      	mov	r2, r5
   35950:	2300      	movs	r3, #0
   35952:	fb06 5103 	mla	r1, r6, r3, r5
   35956:	f8b1 0042 	ldrh.w	r0, [r1, #66]	; 0x42
   3595a:	3301      	adds	r3, #1
   3595c:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
   35960:	f892 0044 	ldrb.w	r0, [r2, #68]	; 0x44
   35964:	2b0c      	cmp	r3, #12
   35966:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
   3596a:	f8b1 0045 	ldrh.w	r0, [r1, #69]	; 0x45
   3596e:	f104 040c 	add.w	r4, r4, #12
   35972:	f8a4 004a 	strh.w	r0, [r4, #74]	; 0x4a
   35976:	f9b1 0047 	ldrsh.w	r0, [r1, #71]	; 0x47
   3597a:	f102 020a 	add.w	r2, r2, #10
   3597e:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
   35982:	f9b1 1049 	ldrsh.w	r1, [r1, #73]	; 0x49
   35986:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
   3598a:	f892 1041 	ldrb.w	r1, [r2, #65]	; 0x41
   3598e:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
   35992:	d1de      	bne.n	35952 <nrf_modem_gnss_read+0x1ce>
   35994:	e792      	b.n	358bc <nrf_modem_gnss_read+0x138>
   35996:	61e3      	str	r3, [r4, #28]
   35998:	6a2b      	ldr	r3, [r5, #32]
   3599a:	260a      	movs	r6, #10
   3599c:	62e3      	str	r3, [r4, #44]	; 0x2c
   3599e:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
   359a2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
   359a6:	f8d5 302d 	ldr.w	r3, [r5, #45]	; 0x2d
   359aa:	6423      	str	r3, [r4, #64]	; 0x40
   359ac:	f8d5 3031 	ldr.w	r3, [r5, #49]	; 0x31
   359b0:	6463      	str	r3, [r4, #68]	; 0x44
   359b2:	f8d5 3035 	ldr.w	r3, [r5, #53]	; 0x35
   359b6:	64a3      	str	r3, [r4, #72]	; 0x48
   359b8:	f8d5 3039 	ldr.w	r3, [r5, #57]	; 0x39
   359bc:	64e3      	str	r3, [r4, #76]	; 0x4c
   359be:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
   359c2:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   359c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   359ca:	86a3      	strh	r3, [r4, #52]	; 0x34
   359cc:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   359d0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   359d4:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
   359d8:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
   359dc:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   359e0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   359e4:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   359e8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   359ec:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
   359f0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   359f4:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
   359f8:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   359fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   35a00:	87a3      	strh	r3, [r4, #60]	; 0x3c
   35a02:	462a      	mov	r2, r5
   35a04:	2300      	movs	r3, #0
   35a06:	fb06 5103 	mla	r1, r6, r3, r5
   35a0a:	8fc8      	ldrh	r0, [r1, #62]	; 0x3e
   35a0c:	3301      	adds	r3, #1
   35a0e:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
   35a12:	f892 0040 	ldrb.w	r0, [r2, #64]	; 0x40
   35a16:	2b0c      	cmp	r3, #12
   35a18:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
   35a1c:	f8b1 0041 	ldrh.w	r0, [r1, #65]	; 0x41
   35a20:	f104 040c 	add.w	r4, r4, #12
   35a24:	f8a4 004a 	strh.w	r0, [r4, #74]	; 0x4a
   35a28:	f9b1 0043 	ldrsh.w	r0, [r1, #67]	; 0x43
   35a2c:	f102 020a 	add.w	r2, r2, #10
   35a30:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
   35a34:	f9b1 1045 	ldrsh.w	r1, [r1, #69]	; 0x45
   35a38:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
   35a3c:	f892 103d 	ldrb.w	r1, [r2, #61]	; 0x3d
   35a40:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
   35a44:	d1df      	bne.n	35a06 <nrf_modem_gnss_read+0x282>
   35a46:	e739      	b.n	358bc <nrf_modem_gnss_read+0x138>
   35a48:	2952      	cmp	r1, #82	; 0x52
   35a4a:	d920      	bls.n	35a8e <nrf_modem_gnss_read+0x30a>
   35a4c:	4d13      	ldr	r5, [pc, #76]	; (35a9c <nrf_modem_gnss_read+0x318>)
   35a4e:	682b      	ldr	r3, [r5, #0]
   35a50:	2b00      	cmp	r3, #0
   35a52:	f43f aeaf 	beq.w	357b4 <nrf_modem_gnss_read+0x30>
   35a56:	f00a fa8a 	bl	3ff6e <rpc_transport_rx_data_suspend>
   35a5a:	2253      	movs	r2, #83	; 0x53
   35a5c:	4620      	mov	r0, r4
   35a5e:	6829      	ldr	r1, [r5, #0]
   35a60:	f00b fca0 	bl	413a4 <memcpy>
   35a64:	e72a      	b.n	358bc <nrf_modem_gnss_read+0x138>
   35a66:	290b      	cmp	r1, #11
   35a68:	d911      	bls.n	35a8e <nrf_modem_gnss_read+0x30a>
   35a6a:	4d0d      	ldr	r5, [pc, #52]	; (35aa0 <nrf_modem_gnss_read+0x31c>)
   35a6c:	682b      	ldr	r3, [r5, #0]
   35a6e:	2b00      	cmp	r3, #0
   35a70:	f43f aea0 	beq.w	357b4 <nrf_modem_gnss_read+0x30>
   35a74:	f00a fa7b 	bl	3ff6e <rpc_transport_rx_data_suspend>
   35a78:	682b      	ldr	r3, [r5, #0]
   35a7a:	681a      	ldr	r2, [r3, #0]
   35a7c:	6022      	str	r2, [r4, #0]
   35a7e:	685a      	ldr	r2, [r3, #4]
   35a80:	6062      	str	r2, [r4, #4]
   35a82:	891b      	ldrh	r3, [r3, #8]
   35a84:	60a3      	str	r3, [r4, #8]
   35a86:	e719      	b.n	358bc <nrf_modem_gnss_read+0x138>
   35a88:	f06f 0015 	mvn.w	r0, #21
   35a8c:	e719      	b.n	358c2 <nrf_modem_gnss_read+0x13e>
   35a8e:	f06f 0079 	mvn.w	r0, #121	; 0x79
   35a92:	e716      	b.n	358c2 <nrf_modem_gnss_read+0x13e>
   35a94:	2001a4e0 	.word	0x2001a4e0
   35a98:	2001d3c5 	.word	0x2001d3c5
   35a9c:	2001a4e8 	.word	0x2001a4e8
   35aa0:	2001a4e4 	.word	0x2001a4e4

00035aa4 <nrf_modem_gnss_start>:
   35aa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   35aa8:	4f27      	ldr	r7, [pc, #156]	; (35b48 <nrf_modem_gnss_start+0xa4>)
   35aaa:	b087      	sub	sp, #28
   35aac:	783b      	ldrb	r3, [r7, #0]
   35aae:	2b00      	cmp	r3, #0
   35ab0:	d146      	bne.n	35b40 <nrf_modem_gnss_start+0x9c>
   35ab2:	f8df 8098 	ldr.w	r8, [pc, #152]	; 35b4c <nrf_modem_gnss_start+0xa8>
   35ab6:	f898 3000 	ldrb.w	r3, [r8]
   35aba:	bb63      	cbnz	r3, 35b16 <nrf_modem_gnss_start+0x72>
   35abc:	2502      	movs	r5, #2
   35abe:	f04f 0905 	mov.w	r9, #5
   35ac2:	462e      	mov	r6, r5
   35ac4:	2214      	movs	r2, #20
   35ac6:	2100      	movs	r1, #0
   35ac8:	a801      	add	r0, sp, #4
   35aca:	f00b fc8b 	bl	413e4 <memset>
   35ace:	2214      	movs	r2, #20
   35ad0:	f241 0004 	movw	r0, #4100	; 0x1004
   35ad4:	a901      	add	r1, sp, #4
   35ad6:	f88d 9008 	strb.w	r9, [sp, #8]
   35ada:	f8cd 6009 	str.w	r6, [sp, #9]
   35ade:	f7ff fd0d 	bl	354fc <send_message>
   35ae2:	4604      	mov	r4, r0
   35ae4:	b110      	cbz	r0, 35aec <nrf_modem_gnss_start+0x48>
   35ae6:	2601      	movs	r6, #1
   35ae8:	42b5      	cmp	r5, r6
   35aea:	d127      	bne.n	35b3c <nrf_modem_gnss_start+0x98>
   35aec:	2214      	movs	r2, #20
   35aee:	2100      	movs	r1, #0
   35af0:	a801      	add	r0, sp, #4
   35af2:	f00b fc77 	bl	413e4 <memset>
   35af6:	2501      	movs	r5, #1
   35af8:	2380      	movs	r3, #128	; 0x80
   35afa:	2214      	movs	r2, #20
   35afc:	f241 2003 	movw	r0, #4611	; 0x1203
   35b00:	a901      	add	r1, sp, #4
   35b02:	9302      	str	r3, [sp, #8]
   35b04:	f88d 5016 	strb.w	r5, [sp, #22]
   35b08:	f7ff fcf8 	bl	354fc <send_message>
   35b0c:	ea54 0300 	orrs.w	r3, r4, r0
   35b10:	bf08      	it	eq
   35b12:	f888 5000 	strbeq.w	r5, [r8]
   35b16:	2401      	movs	r4, #1
   35b18:	2214      	movs	r2, #20
   35b1a:	2100      	movs	r1, #0
   35b1c:	a801      	add	r0, sp, #4
   35b1e:	f00b fc61 	bl	413e4 <memset>
   35b22:	2214      	movs	r2, #20
   35b24:	f241 0004 	movw	r0, #4100	; 0x1004
   35b28:	a901      	add	r1, sp, #4
   35b2a:	f88d 4008 	strb.w	r4, [sp, #8]
   35b2e:	f7ff fce5 	bl	354fc <send_message>
   35b32:	b900      	cbnz	r0, 35b36 <nrf_modem_gnss_start+0x92>
   35b34:	703c      	strb	r4, [r7, #0]
   35b36:	b007      	add	sp, #28
   35b38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   35b3c:	4635      	mov	r5, r6
   35b3e:	e7c1      	b.n	35ac4 <nrf_modem_gnss_start+0x20>
   35b40:	f04f 30ff 	mov.w	r0, #4294967295
   35b44:	e7f7      	b.n	35b36 <nrf_modem_gnss_start+0x92>
   35b46:	bf00      	nop
   35b48:	2001d3c8 	.word	0x2001d3c8
   35b4c:	2001d3c7 	.word	0x2001d3c7

00035b50 <nrf_modem_gnss_stop>:
   35b50:	b510      	push	{r4, lr}
   35b52:	4c0b      	ldr	r4, [pc, #44]	; (35b80 <nrf_modem_gnss_stop+0x30>)
   35b54:	b086      	sub	sp, #24
   35b56:	7823      	ldrb	r3, [r4, #0]
   35b58:	2b01      	cmp	r3, #1
   35b5a:	d10e      	bne.n	35b7a <nrf_modem_gnss_stop+0x2a>
   35b5c:	2214      	movs	r2, #20
   35b5e:	2100      	movs	r1, #0
   35b60:	a801      	add	r0, sp, #4
   35b62:	f00b fc3f 	bl	413e4 <memset>
   35b66:	2214      	movs	r2, #20
   35b68:	f241 0004 	movw	r0, #4100	; 0x1004
   35b6c:	a901      	add	r1, sp, #4
   35b6e:	f7ff fcc5 	bl	354fc <send_message>
   35b72:	b900      	cbnz	r0, 35b76 <nrf_modem_gnss_stop+0x26>
   35b74:	7020      	strb	r0, [r4, #0]
   35b76:	b006      	add	sp, #24
   35b78:	bd10      	pop	{r4, pc}
   35b7a:	f04f 30ff 	mov.w	r0, #4294967295
   35b7e:	e7fa      	b.n	35b76 <nrf_modem_gnss_stop+0x26>
   35b80:	2001d3c8 	.word	0x2001d3c8

00035b84 <nrf_modem_gnss_use_case_set>:
   35b84:	b510      	push	{r4, lr}
   35b86:	4b0d      	ldr	r3, [pc, #52]	; (35bbc <nrf_modem_gnss_use_case_set+0x38>)
   35b88:	4604      	mov	r4, r0
   35b8a:	781b      	ldrb	r3, [r3, #0]
   35b8c:	b086      	sub	sp, #24
   35b8e:	f003 01ff 	and.w	r1, r3, #255	; 0xff
   35b92:	b97b      	cbnz	r3, 35bb4 <nrf_modem_gnss_use_case_set+0x30>
   35b94:	2214      	movs	r2, #20
   35b96:	a801      	add	r0, sp, #4
   35b98:	f00b fc24 	bl	413e4 <memset>
   35b9c:	2302      	movs	r3, #2
   35b9e:	2214      	movs	r2, #20
   35ba0:	f241 1003 	movw	r0, #4355	; 0x1103
   35ba4:	a901      	add	r1, sp, #4
   35ba6:	9302      	str	r3, [sp, #8]
   35ba8:	f88d 400d 	strb.w	r4, [sp, #13]
   35bac:	f7ff fca6 	bl	354fc <send_message>
   35bb0:	b006      	add	sp, #24
   35bb2:	bd10      	pop	{r4, pc}
   35bb4:	f04f 30ff 	mov.w	r0, #4294967295
   35bb8:	e7fa      	b.n	35bb0 <nrf_modem_gnss_use_case_set+0x2c>
   35bba:	bf00      	nop
   35bbc:	2001d3c8 	.word	0x2001d3c8

00035bc0 <nrf_modem_gnss_fix_interval_set>:
   35bc0:	b510      	push	{r4, lr}
   35bc2:	4b0d      	ldr	r3, [pc, #52]	; (35bf8 <nrf_modem_gnss_fix_interval_set+0x38>)
   35bc4:	4604      	mov	r4, r0
   35bc6:	781b      	ldrb	r3, [r3, #0]
   35bc8:	b086      	sub	sp, #24
   35bca:	f003 01ff 	and.w	r1, r3, #255	; 0xff
   35bce:	b97b      	cbnz	r3, 35bf0 <nrf_modem_gnss_fix_interval_set+0x30>
   35bd0:	2214      	movs	r2, #20
   35bd2:	a801      	add	r0, sp, #4
   35bd4:	f00b fc06 	bl	413e4 <memset>
   35bd8:	2308      	movs	r3, #8
   35bda:	2214      	movs	r2, #20
   35bdc:	f241 1003 	movw	r0, #4355	; 0x1103
   35be0:	a901      	add	r1, sp, #4
   35be2:	9302      	str	r3, [sp, #8]
   35be4:	f8ad 400f 	strh.w	r4, [sp, #15]
   35be8:	f7ff fc88 	bl	354fc <send_message>
   35bec:	b006      	add	sp, #24
   35bee:	bd10      	pop	{r4, pc}
   35bf0:	f04f 30ff 	mov.w	r0, #4294967295
   35bf4:	e7fa      	b.n	35bec <nrf_modem_gnss_fix_interval_set+0x2c>
   35bf6:	bf00      	nop
   35bf8:	2001d3c8 	.word	0x2001d3c8

00035bfc <nrf_modem_gnss_event_handler_set>:
   35bfc:	4a05      	ldr	r2, [pc, #20]	; (35c14 <nrf_modem_gnss_event_handler_set+0x18>)
   35bfe:	4603      	mov	r3, r0
   35c00:	7812      	ldrb	r2, [r2, #0]
   35c02:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   35c06:	b912      	cbnz	r2, 35c0e <nrf_modem_gnss_event_handler_set+0x12>
   35c08:	4a03      	ldr	r2, [pc, #12]	; (35c18 <nrf_modem_gnss_event_handler_set+0x1c>)
   35c0a:	6013      	str	r3, [r2, #0]
   35c0c:	4770      	bx	lr
   35c0e:	f04f 30ff 	mov.w	r0, #4294967295
   35c12:	4770      	bx	lr
   35c14:	2001d3c8 	.word	0x2001d3c8
   35c18:	2001a4dc 	.word	0x2001a4dc

00035c1c <full_dfu_ipc_irq_handler>:
   35c1c:	b510      	push	{r4, lr}
   35c1e:	4604      	mov	r4, r0
   35c20:	4b04      	ldr	r3, [pc, #16]	; (35c34 <full_dfu_ipc_irq_handler+0x18>)
   35c22:	6818      	ldr	r0, [r3, #0]
   35c24:	f7ef fe78 	bl	25918 <nrf_modem_os_sem_give>
   35c28:	07e3      	lsls	r3, r4, #31
   35c2a:	bf42      	ittt	mi
   35c2c:	2201      	movmi	r2, #1
   35c2e:	4b02      	ldrmi	r3, [pc, #8]	; (35c38 <full_dfu_ipc_irq_handler+0x1c>)
   35c30:	701a      	strbmi	r2, [r3, #0]
   35c32:	bd10      	pop	{r4, pc}
   35c34:	2001a4f0 	.word	0x2001a4f0
   35c38:	2001d3c9 	.word	0x2001d3c9

00035c3c <modem_ipc_wait_for_event>:
   35c3c:	b508      	push	{r3, lr}
   35c3e:	4b08      	ldr	r3, [pc, #32]	; (35c60 <modem_ipc_wait_for_event+0x24>)
   35c40:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   35c44:	6818      	ldr	r0, [r3, #0]
   35c46:	f7ef fe87 	bl	25958 <nrf_modem_os_sem_take>
   35c4a:	b930      	cbnz	r0, 35c5a <modem_ipc_wait_for_event+0x1e>
   35c4c:	4b05      	ldr	r3, [pc, #20]	; (35c64 <modem_ipc_wait_for_event+0x28>)
   35c4e:	781b      	ldrb	r3, [r3, #0]
   35c50:	2b01      	cmp	r3, #1
   35c52:	bf08      	it	eq
   35c54:	f06f 0004 	mvneq.w	r0, #4
   35c58:	bd08      	pop	{r3, pc}
   35c5a:	f06f 0073 	mvn.w	r0, #115	; 0x73
   35c5e:	e7fb      	b.n	35c58 <modem_ipc_wait_for_event+0x1c>
   35c60:	2001a4f0 	.word	0x2001a4f0
   35c64:	2001d3c9 	.word	0x2001d3c9

00035c68 <nrf_modem_full_dfu_setup>:
   35c68:	2200      	movs	r2, #0
   35c6a:	2300      	movs	r3, #0
   35c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   35c6e:	4d2d      	ldr	r5, [pc, #180]	; (35d24 <nrf_modem_full_dfu_setup+0xbc>)
   35c70:	4f2d      	ldr	r7, [pc, #180]	; (35d28 <nrf_modem_full_dfu_setup+0xc0>)
   35c72:	e9c5 2302 	strd	r2, r3, [r5, #8]
   35c76:	e9c5 2304 	strd	r2, r3, [r5, #16]
   35c7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   35c7e:	4b2b      	ldr	r3, [pc, #172]	; (35d2c <nrf_modem_full_dfu_setup+0xc4>)
   35c80:	2400      	movs	r4, #0
   35c82:	601a      	str	r2, [r3, #0]
   35c84:	f100 031c 	add.w	r3, r0, #28
   35c88:	603b      	str	r3, [r7, #0]
   35c8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   35c8e:	6043      	str	r3, [r0, #4]
   35c90:	231c      	movs	r3, #28
   35c92:	7203      	strb	r3, [r0, #8]
   35c94:	2320      	movs	r3, #32
   35c96:	2601      	movs	r6, #1
   35c98:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   35c9c:	7243      	strb	r3, [r0, #9]
   35c9e:	4b24      	ldr	r3, [pc, #144]	; (35d30 <nrf_modem_full_dfu_setup+0xc8>)
   35ca0:	7004      	strb	r4, [r0, #0]
   35ca2:	7044      	strb	r4, [r0, #1]
   35ca4:	70c2      	strb	r2, [r0, #3]
   35ca6:	7284      	strb	r4, [r0, #10]
   35ca8:	72c4      	strb	r4, [r0, #11]
   35caa:	7086      	strb	r6, [r0, #2]
   35cac:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   35cb0:	702c      	strb	r4, [r5, #0]
   35cb2:	f8c3 0610 	str.w	r0, [r3, #1552]	; 0x610
   35cb6:	f8c3 4614 	str.w	r4, [r3, #1556]	; 0x614
   35cba:	4b1e      	ldr	r3, [pc, #120]	; (35d34 <nrf_modem_full_dfu_setup+0xcc>)
   35cbc:	b093      	sub	sp, #76	; 0x4c
   35cbe:	4622      	mov	r2, r4
   35cc0:	4620      	mov	r0, r4
   35cc2:	491d      	ldr	r1, [pc, #116]	; (35d38 <nrf_modem_full_dfu_setup+0xd0>)
   35cc4:	701c      	strb	r4, [r3, #0]
   35cc6:	f7fc ffa5 	bl	32c14 <nrfx_ipc_init>
   35cca:	4621      	mov	r1, r4
   35ccc:	2240      	movs	r2, #64	; 0x40
   35cce:	a801      	add	r0, sp, #4
   35cd0:	f00b fb88 	bl	413e4 <memset>
   35cd4:	2302      	movs	r3, #2
   35cd6:	9302      	str	r3, [sp, #8]
   35cd8:	2304      	movs	r3, #4
   35cda:	930b      	str	r3, [sp, #44]	; 0x2c
   35cdc:	2305      	movs	r3, #5
   35cde:	a801      	add	r0, sp, #4
   35ce0:	9311      	str	r3, [sp, #68]	; 0x44
   35ce2:	9609      	str	r6, [sp, #36]	; 0x24
   35ce4:	f7fc ffbc 	bl	32c60 <nrfx_ipc_config_load>
   35ce8:	4621      	mov	r1, r4
   35cea:	4632      	mov	r2, r6
   35cec:	4813      	ldr	r0, [pc, #76]	; (35d3c <nrf_modem_full_dfu_setup+0xd4>)
   35cee:	683f      	ldr	r7, [r7, #0]
   35cf0:	f7ef fdda 	bl	258a8 <nrf_modem_os_sem_init>
   35cf4:	4b12      	ldr	r3, [pc, #72]	; (35d40 <nrf_modem_full_dfu_setup+0xd8>)
   35cf6:	9400      	str	r4, [sp, #0]
   35cf8:	611c      	str	r4, [r3, #16]
   35cfa:	691b      	ldr	r3, [r3, #16]
   35cfc:	9300      	str	r3, [sp, #0]
   35cfe:	9b00      	ldr	r3, [sp, #0]
   35d00:	f7ff ff9c 	bl	35c3c <modem_ipc_wait_for_event>
   35d04:	4604      	mov	r4, r0
   35d06:	b130      	cbz	r0, 35d16 <nrf_modem_full_dfu_setup+0xae>
   35d08:	2303      	movs	r3, #3
   35d0a:	702b      	strb	r3, [r5, #0]
   35d0c:	f7fc ffe6 	bl	32cdc <nrfx_ipc_uninit>
   35d10:	4620      	mov	r0, r4
   35d12:	b013      	add	sp, #76	; 0x4c
   35d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35d16:	683a      	ldr	r2, [r7, #0]
   35d18:	4b0a      	ldr	r3, [pc, #40]	; (35d44 <nrf_modem_full_dfu_setup+0xdc>)
   35d1a:	429a      	cmp	r2, r3
   35d1c:	d0f8      	beq.n	35d10 <nrf_modem_full_dfu_setup+0xa8>
   35d1e:	f06f 0404 	mvn.w	r4, #4
   35d22:	e7f3      	b.n	35d0c <nrf_modem_full_dfu_setup+0xa4>
   35d24:	20018de8 	.word	0x20018de8
   35d28:	2001a4f4 	.word	0x2001a4f4
   35d2c:	2001a4f8 	.word	0x2001a4f8
   35d30:	4002a000 	.word	0x4002a000
   35d34:	2001d3c9 	.word	0x2001d3c9
   35d38:	00035c1d 	.word	0x00035c1d
   35d3c:	2001a4f0 	.word	0x2001a4f0
   35d40:	40005600 	.word	0x40005600
   35d44:	a5000001 	.word	0xa5000001

00035d48 <modem_off>:
   35d48:	b537      	push	{r0, r1, r2, r4, r5, lr}
   35d4a:	2501      	movs	r5, #1
   35d4c:	4c07      	ldr	r4, [pc, #28]	; (35d6c <modem_off+0x24>)
   35d4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   35d52:	6165      	str	r5, [r4, #20]
   35d54:	f008 ffb3 	bl	3ecbe <nrf_modem_os_busywait>
   35d58:	2300      	movs	r3, #0
   35d5a:	6163      	str	r3, [r4, #20]
   35d5c:	9301      	str	r3, [sp, #4]
   35d5e:	6125      	str	r5, [r4, #16]
   35d60:	6923      	ldr	r3, [r4, #16]
   35d62:	9301      	str	r3, [sp, #4]
   35d64:	9b01      	ldr	r3, [sp, #4]
   35d66:	b003      	add	sp, #12
   35d68:	bd30      	pop	{r4, r5, pc}
   35d6a:	bf00      	nop
   35d6c:	40005600 	.word	0x40005600

00035d70 <nrf_modem_init>:
   35d70:	b537      	push	{r0, r1, r2, r4, r5, lr}
   35d72:	4604      	mov	r4, r0
   35d74:	460d      	mov	r5, r1
   35d76:	f000 f871 	bl	35e5c <nrf_modem_state_is_uninitialized>
   35d7a:	2800      	cmp	r0, #0
   35d7c:	d03b      	beq.n	35df6 <nrf_modem_init+0x86>
   35d7e:	2c00      	cmp	r4, #0
   35d80:	d03c      	beq.n	35dfc <nrf_modem_init+0x8c>
   35d82:	6a60      	ldr	r0, [r4, #36]	; 0x24
   35d84:	2800      	cmp	r0, #0
   35d86:	d03c      	beq.n	35e02 <nrf_modem_init+0x92>
   35d88:	f000 f844 	bl	35e14 <nrf_modem_fault_handler_set>
   35d8c:	b9ed      	cbnz	r5, 35dca <nrf_modem_init+0x5a>
   35d8e:	f7ef fe7d 	bl	25a8c <nrf_modem_os_init>
   35d92:	2001      	movs	r0, #1
   35d94:	f000 f854 	bl	35e40 <nrf_modem_state_set>
   35d98:	6a23      	ldr	r3, [r4, #32]
   35d9a:	4668      	mov	r0, sp
   35d9c:	9400      	str	r4, [sp, #0]
   35d9e:	f88d 3004 	strb.w	r3, [sp, #4]
   35da2:	f7fe f8dd 	bl	33f60 <rpc_transport_ipc_init>
   35da6:	4604      	mov	r4, r0
   35da8:	b938      	cbnz	r0, 35dba <nrf_modem_init+0x4a>
   35daa:	f7ff f911 	bl	34fd0 <nrf_modem_at_init>
   35dae:	4604      	mov	r4, r0
   35db0:	b918      	cbnz	r0, 35dba <nrf_modem_init+0x4a>
   35db2:	f7fe fcf7 	bl	347a4 <ip_interface_init>
   35db6:	4604      	mov	r4, r0
   35db8:	b1c8      	cbz	r0, 35dee <nrf_modem_init+0x7e>
   35dba:	2000      	movs	r0, #0
   35dbc:	f000 f840 	bl	35e40 <nrf_modem_state_set>
   35dc0:	f7ff ffc2 	bl	35d48 <modem_off>
   35dc4:	4620      	mov	r0, r4
   35dc6:	b003      	add	sp, #12
   35dc8:	bd30      	pop	{r4, r5, pc}
   35dca:	68e2      	ldr	r2, [r4, #12]
   35dcc:	6863      	ldr	r3, [r4, #4]
   35dce:	4413      	add	r3, r2
   35dd0:	6962      	ldr	r2, [r4, #20]
   35dd2:	4413      	add	r3, r2
   35dd4:	69e2      	ldr	r2, [r4, #28]
   35dd6:	4413      	add	r3, r2
   35dd8:	f242 021b 	movw	r2, #8219	; 0x201b
   35ddc:	4293      	cmp	r3, r2
   35dde:	d913      	bls.n	35e08 <nrf_modem_init+0x98>
   35de0:	2002      	movs	r0, #2
   35de2:	f000 f82d 	bl	35e40 <nrf_modem_state_set>
   35de6:	6820      	ldr	r0, [r4, #0]
   35de8:	f7ff ff3e 	bl	35c68 <nrf_modem_full_dfu_setup>
   35dec:	e7e3      	b.n	35db6 <nrf_modem_init+0x46>
   35dee:	4b08      	ldr	r3, [pc, #32]	; (35e10 <nrf_modem_init+0xa0>)
   35df0:	2400      	movs	r4, #0
   35df2:	701d      	strb	r5, [r3, #0]
   35df4:	e7e6      	b.n	35dc4 <nrf_modem_init+0x54>
   35df6:	f04f 34ff 	mov.w	r4, #4294967295
   35dfa:	e7e3      	b.n	35dc4 <nrf_modem_init+0x54>
   35dfc:	f06f 040d 	mvn.w	r4, #13
   35e00:	e7e0      	b.n	35dc4 <nrf_modem_init+0x54>
   35e02:	f06f 0415 	mvn.w	r4, #21
   35e06:	e7dd      	b.n	35dc4 <nrf_modem_init+0x54>
   35e08:	f06f 040b 	mvn.w	r4, #11
   35e0c:	e7da      	b.n	35dc4 <nrf_modem_init+0x54>
   35e0e:	bf00      	nop
   35e10:	2001d3ca 	.word	0x2001d3ca

00035e14 <nrf_modem_fault_handler_set>:
   35e14:	4b01      	ldr	r3, [pc, #4]	; (35e1c <nrf_modem_fault_handler_set+0x8>)
   35e16:	6018      	str	r0, [r3, #0]
   35e18:	4770      	bx	lr
   35e1a:	bf00      	nop
   35e1c:	2001a4fc 	.word	0x2001a4fc

00035e20 <nrf_modem_fault_handler_internal>:
   35e20:	b537      	push	{r0, r1, r2, r4, r5, lr}
   35e22:	460c      	mov	r4, r1
   35e24:	4605      	mov	r5, r0
   35e26:	2003      	movs	r0, #3
   35e28:	f000 f80a 	bl	35e40 <nrf_modem_state_set>
   35e2c:	4b03      	ldr	r3, [pc, #12]	; (35e3c <nrf_modem_fault_handler_internal+0x1c>)
   35e2e:	4668      	mov	r0, sp
   35e30:	e9cd 5400 	strd	r5, r4, [sp]
   35e34:	681b      	ldr	r3, [r3, #0]
   35e36:	4798      	blx	r3
   35e38:	b003      	add	sp, #12
   35e3a:	bd30      	pop	{r4, r5, pc}
   35e3c:	2001a4fc 	.word	0x2001a4fc

00035e40 <nrf_modem_state_set>:
   35e40:	4b01      	ldr	r3, [pc, #4]	; (35e48 <nrf_modem_state_set+0x8>)
   35e42:	7018      	strb	r0, [r3, #0]
   35e44:	4770      	bx	lr
   35e46:	bf00      	nop
   35e48:	2001d3cb 	.word	0x2001d3cb

00035e4c <nrf_modem_state_is_initialized>:
   35e4c:	4b02      	ldr	r3, [pc, #8]	; (35e58 <nrf_modem_state_is_initialized+0xc>)
   35e4e:	7818      	ldrb	r0, [r3, #0]
   35e50:	1e43      	subs	r3, r0, #1
   35e52:	4258      	negs	r0, r3
   35e54:	4158      	adcs	r0, r3
   35e56:	4770      	bx	lr
   35e58:	2001d3cb 	.word	0x2001d3cb

00035e5c <nrf_modem_state_is_uninitialized>:
   35e5c:	4b02      	ldr	r3, [pc, #8]	; (35e68 <nrf_modem_state_is_uninitialized+0xc>)
   35e5e:	7818      	ldrb	r0, [r3, #0]
   35e60:	fab0 f080 	clz	r0, r0
   35e64:	0940      	lsrs	r0, r0, #5
   35e66:	4770      	bx	lr
   35e68:	2001d3cb 	.word	0x2001d3cb

00035e6c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   35e6c:	4b0e      	ldr	r3, [pc, #56]	; (35ea8 <z_sys_init_run_level+0x3c>)
{
   35e6e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   35e70:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   35e74:	3001      	adds	r0, #1
   35e76:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   35e7a:	42a6      	cmp	r6, r4
   35e7c:	d800      	bhi.n	35e80 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   35e7e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   35e80:	e9d4 3500 	ldrd	r3, r5, [r4]
   35e84:	4628      	mov	r0, r5
   35e86:	4798      	blx	r3
		if (dev != NULL) {
   35e88:	b165      	cbz	r5, 35ea4 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   35e8a:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   35e8c:	b130      	cbz	r0, 35e9c <z_sys_init_run_level+0x30>
				if (rc < 0) {
   35e8e:	2800      	cmp	r0, #0
   35e90:	bfb8      	it	lt
   35e92:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   35e94:	28ff      	cmp	r0, #255	; 0xff
   35e96:	bfa8      	it	ge
   35e98:	20ff      	movge	r0, #255	; 0xff
   35e9a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   35e9c:	785a      	ldrb	r2, [r3, #1]
   35e9e:	f042 0201 	orr.w	r2, r2, #1
   35ea2:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   35ea4:	3408      	adds	r4, #8
   35ea6:	e7e8      	b.n	35e7a <z_sys_init_run_level+0xe>
   35ea8:	00043384 	.word	0x00043384

00035eac <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   35eac:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   35eae:	4605      	mov	r5, r0
   35eb0:	b910      	cbnz	r0, 35eb8 <z_impl_device_get_binding+0xc>
		return NULL;
   35eb2:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   35eb4:	4620      	mov	r0, r4
   35eb6:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   35eb8:	7803      	ldrb	r3, [r0, #0]
   35eba:	2b00      	cmp	r3, #0
   35ebc:	d0f9      	beq.n	35eb2 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   35ebe:	4c0e      	ldr	r4, [pc, #56]	; (35ef8 <z_impl_device_get_binding+0x4c>)
   35ec0:	4e0e      	ldr	r6, [pc, #56]	; (35efc <z_impl_device_get_binding+0x50>)
   35ec2:	42b4      	cmp	r4, r6
   35ec4:	d108      	bne.n	35ed8 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   35ec6:	4c0c      	ldr	r4, [pc, #48]	; (35ef8 <z_impl_device_get_binding+0x4c>)
   35ec8:	42b4      	cmp	r4, r6
   35eca:	d0f2      	beq.n	35eb2 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   35ecc:	4620      	mov	r0, r4
   35ece:	f00b f802 	bl	40ed6 <z_device_is_ready>
   35ed2:	b950      	cbnz	r0, 35eea <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   35ed4:	3418      	adds	r4, #24
   35ed6:	e7f7      	b.n	35ec8 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   35ed8:	4620      	mov	r0, r4
   35eda:	f00a fffc 	bl	40ed6 <z_device_is_ready>
   35ede:	b110      	cbz	r0, 35ee6 <z_impl_device_get_binding+0x3a>
   35ee0:	6823      	ldr	r3, [r4, #0]
   35ee2:	42ab      	cmp	r3, r5
   35ee4:	d0e6      	beq.n	35eb4 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   35ee6:	3418      	adds	r4, #24
   35ee8:	e7eb      	b.n	35ec2 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   35eea:	4628      	mov	r0, r5
   35eec:	6821      	ldr	r1, [r4, #0]
   35eee:	f7e7 f99e 	bl	1d22e <strcmp>
   35ef2:	2800      	cmp	r0, #0
   35ef4:	d1ee      	bne.n	35ed4 <z_impl_device_get_binding+0x28>
   35ef6:	e7dd      	b.n	35eb4 <z_impl_device_get_binding+0x8>
   35ef8:	000422f4 	.word	0x000422f4
   35efc:	0004239c 	.word	0x0004239c

00035f00 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   35f00:	4b01      	ldr	r3, [pc, #4]	; (35f08 <z_impl_z_errno+0x8>)
   35f02:	6898      	ldr	r0, [r3, #8]
}
   35f04:	3070      	adds	r0, #112	; 0x70
   35f06:	4770      	bx	lr
   35f08:	2001a500 	.word	0x2001a500

00035f0c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   35f0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   35f0e:	4604      	mov	r4, r0
   35f10:	460e      	mov	r6, r1
	__asm__ volatile(
   35f12:	f04f 0320 	mov.w	r3, #32
   35f16:	f3ef 8711 	mrs	r7, BASEPRI
   35f1a:	f383 8812 	msr	BASEPRI_MAX, r3
   35f1e:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   35f22:	f002 fb95 	bl	38650 <z_impl_z_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   35f26:	2200      	movs	r2, #0
   35f28:	2c04      	cmp	r4, #4
   35f2a:	bf98      	it	ls
   35f2c:	4b1d      	ldrls	r3, [pc, #116]	; (35fa4 <z_fatal_error+0x98>)
   35f2e:	4605      	mov	r5, r0
	switch (reason) {
   35f30:	bf94      	ite	ls
   35f32:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   35f36:	4b1c      	ldrhi	r3, [pc, #112]	; (35fa8 <z_fatal_error+0x9c>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   35f38:	9200      	str	r2, [sp, #0]
   35f3a:	2145      	movs	r1, #69	; 0x45
   35f3c:	4622      	mov	r2, r4
   35f3e:	481b      	ldr	r0, [pc, #108]	; (35fac <z_fatal_error+0xa0>)
   35f40:	f006 fdb6 	bl	3cab0 <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   35f44:	b13e      	cbz	r6, 35f56 <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   35f46:	69f3      	ldr	r3, [r6, #28]
   35f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
   35f4c:	b11b      	cbz	r3, 35f56 <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
   35f4e:	2145      	movs	r1, #69	; 0x45
   35f50:	4817      	ldr	r0, [pc, #92]	; (35fb0 <z_fatal_error+0xa4>)
   35f52:	f006 fdad 	bl	3cab0 <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   35f56:	b12d      	cbz	r5, 35f64 <z_fatal_error+0x58>
   35f58:	4628      	mov	r0, r5
   35f5a:	f00a ffe6 	bl	40f2a <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   35f5e:	b108      	cbz	r0, 35f64 <z_fatal_error+0x58>
   35f60:	7803      	ldrb	r3, [r0, #0]
   35f62:	b903      	cbnz	r3, 35f66 <z_fatal_error+0x5a>
		thread_name = "unknown";
   35f64:	4813      	ldr	r0, [pc, #76]	; (35fb4 <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   35f66:	4603      	mov	r3, r0
   35f68:	462a      	mov	r2, r5
   35f6a:	2145      	movs	r1, #69	; 0x45
   35f6c:	4812      	ldr	r0, [pc, #72]	; (35fb8 <z_fatal_error+0xac>)
   35f6e:	f006 fd9f 	bl	3cab0 <z_log_minimal_printk>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   35f72:	4631      	mov	r1, r6
   35f74:	4620      	mov	r0, r4
   35f76:	f7f2 fd07 	bl	28988 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   35f7a:	2c04      	cmp	r4, #4
   35f7c:	d108      	bne.n	35f90 <z_fatal_error+0x84>
   35f7e:	490f      	ldr	r1, [pc, #60]	; (35fbc <z_fatal_error+0xb0>)
   35f80:	480f      	ldr	r0, [pc, #60]	; (35fc0 <z_fatal_error+0xb4>)
   35f82:	228f      	movs	r2, #143	; 0x8f
   35f84:	f006 fd5a 	bl	3ca3c <assert_print>
   35f88:	218f      	movs	r1, #143	; 0x8f
   35f8a:	480c      	ldr	r0, [pc, #48]	; (35fbc <z_fatal_error+0xb0>)
   35f8c:	f006 fd4f 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   35f90:	f387 8811 	msr	BASEPRI, r7
   35f94:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   35f98:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   35f9a:	b003      	add	sp, #12
   35f9c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   35fa0:	f7ed ba1c 	b.w	233dc <z_impl_k_thread_abort>
   35fa4:	0004339c 	.word	0x0004339c
   35fa8:	0004b915 	.word	0x0004b915
   35fac:	0004b92b 	.word	0x0004b92b
   35fb0:	0004b958 	.word	0x0004b958
   35fb4:	0004b923 	.word	0x0004b923
   35fb8:	0004b97e 	.word	0x0004b97e
   35fbc:	0004b99b 	.word	0x0004b99b
   35fc0:	00043ff2 	.word	0x00043ff2

00035fc4 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   35fc4:	2201      	movs	r2, #1
{
   35fc6:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   35fc8:	4b09      	ldr	r3, [pc, #36]	; (35ff0 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   35fca:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   35fcc:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   35fce:	f7ff ff4d 	bl	35e6c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   35fd2:	f003 fc87 	bl	398e4 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   35fd6:	2003      	movs	r0, #3
   35fd8:	f7ff ff48 	bl	35e6c <z_sys_init_run_level>

	z_init_static_threads();
   35fdc:	f000 fa74 	bl	364c8 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   35fe0:	f7e9 ff22 	bl	1fe28 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   35fe4:	4a03      	ldr	r2, [pc, #12]	; (35ff4 <bg_thread_main+0x30>)
   35fe6:	7b13      	ldrb	r3, [r2, #12]
   35fe8:	f023 0301 	bic.w	r3, r3, #1
   35fec:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   35fee:	bd08      	pop	{r3, pc}
   35ff0:	2001d3cc 	.word	0x2001d3cc
   35ff4:	20018ed0 	.word	0x20018ed0

00035ff8 <z_bss_zero>:
{
   35ff8:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   35ffa:	4803      	ldr	r0, [pc, #12]	; (36008 <z_bss_zero+0x10>)
   35ffc:	4a03      	ldr	r2, [pc, #12]	; (3600c <z_bss_zero+0x14>)
   35ffe:	2100      	movs	r1, #0
   36000:	1a12      	subs	r2, r2, r0
   36002:	f00a ff72 	bl	40eea <z_early_memset>
}
   36006:	bd08      	pop	{r3, pc}
   36008:	20015150 	.word	0x20015150
   3600c:	2001d3d0 	.word	0x2001d3d0

00036010 <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
   36010:	23d0      	movs	r3, #208	; 0xd0
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   36012:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   36014:	4e13      	ldr	r6, [pc, #76]	; (36064 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
   36016:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
   36018:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   3601c:	2300      	movs	r3, #0
{
   3601e:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   36020:	e9cd 2304 	strd	r2, r3, [sp, #16]
   36024:	220f      	movs	r2, #15
   36026:	9301      	str	r3, [sp, #4]
   36028:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   3602c:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
   3602e:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   36032:	4d0d      	ldr	r5, [pc, #52]	; (36068 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   36034:	490d      	ldr	r1, [pc, #52]	; (3606c <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   36036:	fb03 5500 	mla	r5, r3, r0, r5
{
   3603a:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   3603c:	fb02 1100 	mla	r1, r2, r0, r1
   36040:	4b0b      	ldr	r3, [pc, #44]	; (36070 <z_init_cpu+0x60>)
   36042:	4630      	mov	r0, r6
   36044:	9500      	str	r5, [sp, #0]
   36046:	f000 f9a1 	bl	3638c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   3604a:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   3604c:	4809      	ldr	r0, [pc, #36]	; (36074 <z_init_cpu+0x64>)
	_kernel.cpus[id].id = id;
   3604e:	752c      	strb	r4, [r5, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   36050:	3401      	adds	r4, #1
   36052:	f023 0304 	bic.w	r3, r3, #4
   36056:	eb00 24c4 	add.w	r4, r0, r4, lsl #11
   3605a:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   3605c:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   3605e:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   36060:	b006      	add	sp, #24
   36062:	bd70      	pop	{r4, r5, r6, pc}
   36064:	20018e00 	.word	0x20018e00
   36068:	2001a500 	.word	0x2001a500
   3606c:	20021a00 	.word	0x20021a00
   36070:	0003660d 	.word	0x0003660d
   36074:	20021b40 	.word	0x20021b40

00036078 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   36078:	b500      	push	{lr}
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   3607a:	4b2e      	ldr	r3, [pc, #184]	; (36134 <z_cstart+0xbc>)
   3607c:	b0bd      	sub	sp, #244	; 0xf4
	uint32_t msp =
   3607e:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   36082:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   36086:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   3608a:	2400      	movs	r4, #0
   3608c:	23e0      	movs	r3, #224	; 0xe0
   3608e:	4d2a      	ldr	r5, [pc, #168]	; (36138 <z_cstart+0xc0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   36090:	4e2a      	ldr	r6, [pc, #168]	; (3613c <z_cstart+0xc4>)
   36092:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   36096:	77ec      	strb	r4, [r5, #31]
   36098:	762c      	strb	r4, [r5, #24]
   3609a:	766c      	strb	r4, [r5, #25]
   3609c:	76ac      	strb	r4, [r5, #26]
   3609e:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   360a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   360a4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   360a8:	626b      	str	r3, [r5, #36]	; 0x24
   360aa:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   360ae:	f7ed f8d3 	bl	23258 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   360b2:	f7ec fcbb 	bl	22a2c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   360b6:	f04f 33ff 	mov.w	r3, #4294967295
   360ba:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   360bc:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   360be:	f7ed fb61 	bl	23784 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   360c2:	f7ed f9a1 	bl	23408 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   360c6:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   360ca:	ad08      	add	r5, sp, #32
   360cc:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   360ce:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	dummy_thread->stack_info.size = 0U;
   360d2:	e9cd 4425 	strd	r4, r4, [sp, #148]	; 0x94
	k_thread_system_pool_assign(dummy_thread);
   360d6:	f003 fbe3 	bl	398a0 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   360da:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   360dc:	f00a fefa 	bl	40ed4 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   360e0:	4620      	mov	r0, r4
   360e2:	f7ff fec3 	bl	35e6c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   360e6:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   360e8:	4d15      	ldr	r5, [pc, #84]	; (36140 <z_cstart+0xc8>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   360ea:	f7ff febf 	bl	35e6c <z_sys_init_run_level>
	z_sched_init();
   360ee:	f002 f965 	bl	383bc <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   360f2:	4b14      	ldr	r3, [pc, #80]	; (36144 <z_cstart+0xcc>)
	_kernel.ready_q.cache = &z_main_thread;
   360f4:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   360f6:	9305      	str	r3, [sp, #20]
   360f8:	2301      	movs	r3, #1
   360fa:	4e13      	ldr	r6, [pc, #76]	; (36148 <z_cstart+0xd0>)
   360fc:	4913      	ldr	r1, [pc, #76]	; (3614c <z_cstart+0xd4>)
   360fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
   36102:	e9cd 4303 	strd	r4, r3, [sp, #12]
   36106:	4628      	mov	r0, r5
   36108:	4633      	mov	r3, r6
   3610a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   3610e:	9400      	str	r4, [sp, #0]
   36110:	f000 f93c 	bl	3638c <z_setup_new_thread>
   36114:	7b6a      	ldrb	r2, [r5, #13]
   36116:	9007      	str	r0, [sp, #28]
   36118:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   3611c:	4628      	mov	r0, r5
   3611e:	736a      	strb	r2, [r5, #13]
   36120:	f001 fe0a 	bl	37d38 <z_ready_thread>
	z_init_cpu(0);
   36124:	4620      	mov	r0, r4
   36126:	f7ff ff73 	bl	36010 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   3612a:	4632      	mov	r2, r6
   3612c:	4628      	mov	r0, r5
   3612e:	9907      	ldr	r1, [sp, #28]
   36130:	f7ec fe30 	bl	22d94 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   36134:	20021b40 	.word	0x20021b40
   36138:	e000ed00 	.word	0xe000ed00
   3613c:	2001a500 	.word	0x2001a500
   36140:	20018ed0 	.word	0x20018ed0
   36144:	000434fc 	.word	0x000434fc
   36148:	00035fc5 	.word	0x00035fc5
   3614c:	20021600 	.word	0x20021600

00036150 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   36150:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   36152:	4c0c      	ldr	r4, [pc, #48]	; (36184 <statics_init+0x34>)
   36154:	4d0c      	ldr	r5, [pc, #48]	; (36188 <statics_init+0x38>)
   36156:	4e0d      	ldr	r6, [pc, #52]	; (3618c <statics_init+0x3c>)
   36158:	42ac      	cmp	r4, r5
   3615a:	d908      	bls.n	3616e <statics_init+0x1e>
   3615c:	4631      	mov	r1, r6
   3615e:	480c      	ldr	r0, [pc, #48]	; (36190 <statics_init+0x40>)
   36160:	2218      	movs	r2, #24
   36162:	f006 fc6b 	bl	3ca3c <assert_print>
   36166:	2118      	movs	r1, #24
   36168:	4630      	mov	r0, r6
   3616a:	f006 fc60 	bl	3ca2e <assert_post_action>
   3616e:	42ac      	cmp	r4, r5
   36170:	d301      	bcc.n	36176 <statics_init+0x26>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   36172:	2000      	movs	r0, #0
   36174:	bd70      	pop	{r4, r5, r6, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   36176:	4620      	mov	r0, r4
   36178:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   3617c:	f00a feb9 	bl	40ef2 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   36180:	3418      	adds	r4, #24
   36182:	e7e9      	b.n	36158 <statics_init+0x8>
   36184:	20014e68 	.word	0x20014e68
   36188:	20014ec8 	.word	0x20014ec8
   3618c:	0004ba07 	.word	0x0004ba07
   36190:	00043ff2 	.word	0x00043ff2

00036194 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   36194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36198:	b085      	sub	sp, #20
   3619a:	e9dd 970e 	ldrd	r9, r7, [sp, #56]	; 0x38
   3619e:	4606      	mov	r6, r0
   361a0:	468b      	mov	fp, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   361a2:	4648      	mov	r0, r9
   361a4:	4639      	mov	r1, r7
{
   361a6:	4690      	mov	r8, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   361a8:	f00a ff92 	bl	410d0 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   361ac:	f106 0514 	add.w	r5, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   361b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
	__asm__ volatile(
   361b4:	f04f 0320 	mov.w	r3, #32
   361b8:	f3ef 8411 	mrs	r4, BASEPRI
   361bc:	f383 8812 	msr	BASEPRI_MAX, r3
   361c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   361c4:	4628      	mov	r0, r5
   361c6:	f000 f9fb 	bl	365c0 <z_spin_lock_valid>
   361ca:	b940      	cbnz	r0, 361de <k_heap_aligned_alloc+0x4a>
   361cc:	4932      	ldr	r1, [pc, #200]	; (36298 <k_heap_aligned_alloc+0x104>)
   361ce:	4833      	ldr	r0, [pc, #204]	; (3629c <k_heap_aligned_alloc+0x108>)
   361d0:	228e      	movs	r2, #142	; 0x8e
   361d2:	f006 fc33 	bl	3ca3c <assert_print>
   361d6:	218e      	movs	r1, #142	; 0x8e
   361d8:	482f      	ldr	r0, [pc, #188]	; (36298 <k_heap_aligned_alloc+0x104>)
   361da:	f006 fc28 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   361de:	4628      	mov	r0, r5
   361e0:	f000 fa0c 	bl	365fc <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   361e4:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   361e8:	b15b      	cbz	r3, 36202 <k_heap_aligned_alloc+0x6e>
   361ea:	ea59 0307 	orrs.w	r3, r9, r7
   361ee:	d008      	beq.n	36202 <k_heap_aligned_alloc+0x6e>
   361f0:	492b      	ldr	r1, [pc, #172]	; (362a0 <k_heap_aligned_alloc+0x10c>)
   361f2:	482a      	ldr	r0, [pc, #168]	; (3629c <k_heap_aligned_alloc+0x108>)
   361f4:	2249      	movs	r2, #73	; 0x49
   361f6:	f006 fc21 	bl	3ca3c <assert_print>
   361fa:	2149      	movs	r1, #73	; 0x49
   361fc:	4828      	ldr	r0, [pc, #160]	; (362a0 <k_heap_aligned_alloc+0x10c>)
   361fe:	f006 fc16 	bl	3ca2e <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36202:	f8df 9094 	ldr.w	r9, [pc, #148]	; 36298 <k_heap_aligned_alloc+0x104>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   36206:	f106 0a0c 	add.w	sl, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   3620a:	4642      	mov	r2, r8
   3620c:	4659      	mov	r1, fp
   3620e:	4630      	mov	r0, r6
   36210:	f7eb f81e 	bl	21250 <sys_heap_aligned_alloc>
   36214:	4607      	mov	r7, r0
		now = sys_clock_tick_get();
   36216:	f002 fdcf 	bl	38db8 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   3621a:	b1a7      	cbz	r7, 36246 <k_heap_aligned_alloc+0xb2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3621c:	4628      	mov	r0, r5
   3621e:	f000 f9dd 	bl	365dc <z_spin_unlock_valid>
   36222:	b940      	cbnz	r0, 36236 <k_heap_aligned_alloc+0xa2>
   36224:	491c      	ldr	r1, [pc, #112]	; (36298 <k_heap_aligned_alloc+0x104>)
   36226:	481d      	ldr	r0, [pc, #116]	; (3629c <k_heap_aligned_alloc+0x108>)
   36228:	22b9      	movs	r2, #185	; 0xb9
   3622a:	f006 fc07 	bl	3ca3c <assert_print>
   3622e:	21b9      	movs	r1, #185	; 0xb9
   36230:	4819      	ldr	r0, [pc, #100]	; (36298 <k_heap_aligned_alloc+0x104>)
   36232:	f006 fbfc 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   36236:	f384 8811 	msr	BASEPRI, r4
   3623a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   3623e:	4638      	mov	r0, r7
   36240:	b005      	add	sp, #20
   36242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   36246:	9b02      	ldr	r3, [sp, #8]
   36248:	1a18      	subs	r0, r3, r0
   3624a:	9b03      	ldr	r3, [sp, #12]
   3624c:	eb63 0101 	sbc.w	r1, r3, r1
   36250:	2801      	cmp	r0, #1
   36252:	f171 0300 	sbcs.w	r3, r1, #0
   36256:	dbe1      	blt.n	3621c <k_heap_aligned_alloc+0x88>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   36258:	e9cd 0100 	strd	r0, r1, [sp]
   3625c:	4652      	mov	r2, sl
   3625e:	4621      	mov	r1, r4
   36260:	4628      	mov	r0, r5
   36262:	f001 ff11 	bl	38088 <z_pend_curr>
	__asm__ volatile(
   36266:	f04f 0320 	mov.w	r3, #32
   3626a:	f3ef 8411 	mrs	r4, BASEPRI
   3626e:	f383 8812 	msr	BASEPRI_MAX, r3
   36272:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36276:	4628      	mov	r0, r5
   36278:	f000 f9a2 	bl	365c0 <z_spin_lock_valid>
   3627c:	b940      	cbnz	r0, 36290 <k_heap_aligned_alloc+0xfc>
   3627e:	4649      	mov	r1, r9
   36280:	4806      	ldr	r0, [pc, #24]	; (3629c <k_heap_aligned_alloc+0x108>)
   36282:	228e      	movs	r2, #142	; 0x8e
   36284:	f006 fbda 	bl	3ca3c <assert_print>
   36288:	218e      	movs	r1, #142	; 0x8e
   3628a:	4648      	mov	r0, r9
   3628c:	f006 fbcf 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   36290:	4628      	mov	r0, r5
   36292:	f000 f9b3 	bl	365fc <z_spin_lock_set_owner>
	return k;
   36296:	e7b8      	b.n	3620a <k_heap_aligned_alloc+0x76>
   36298:	0004402c 	.word	0x0004402c
   3629c:	00043ff2 	.word	0x00043ff2
   362a0:	0004ba07 	.word	0x0004ba07

000362a4 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   362a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   362a6:	4604      	mov	r4, r0
   362a8:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   362aa:	f100 0514 	add.w	r5, r0, #20
   362ae:	f04f 0320 	mov.w	r3, #32
   362b2:	f3ef 8711 	mrs	r7, BASEPRI
   362b6:	f383 8812 	msr	BASEPRI_MAX, r3
   362ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   362be:	4628      	mov	r0, r5
   362c0:	f000 f97e 	bl	365c0 <z_spin_lock_valid>
   362c4:	b940      	cbnz	r0, 362d8 <k_heap_free+0x34>
   362c6:	4916      	ldr	r1, [pc, #88]	; (36320 <k_heap_free+0x7c>)
   362c8:	4816      	ldr	r0, [pc, #88]	; (36324 <k_heap_free+0x80>)
   362ca:	228e      	movs	r2, #142	; 0x8e
   362cc:	f006 fbb6 	bl	3ca3c <assert_print>
   362d0:	218e      	movs	r1, #142	; 0x8e
   362d2:	4813      	ldr	r0, [pc, #76]	; (36320 <k_heap_free+0x7c>)
   362d4:	f006 fbab 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   362d8:	4628      	mov	r0, r5
   362da:	f000 f98f 	bl	365fc <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   362de:	4620      	mov	r0, r4
   362e0:	4631      	mov	r1, r6
   362e2:	f7ea ff7d 	bl	211e0 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   362e6:	f104 000c 	add.w	r0, r4, #12
   362ea:	f00a fed7 	bl	4109c <z_unpend_all>
   362ee:	b128      	cbz	r0, 362fc <k_heap_free+0x58>
		z_reschedule(&h->lock, key);
   362f0:	4639      	mov	r1, r7
   362f2:	4628      	mov	r0, r5
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   362f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   362f8:	f001 baee 	b.w	378d8 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   362fc:	4628      	mov	r0, r5
   362fe:	f000 f96d 	bl	365dc <z_spin_unlock_valid>
   36302:	b940      	cbnz	r0, 36316 <k_heap_free+0x72>
   36304:	4906      	ldr	r1, [pc, #24]	; (36320 <k_heap_free+0x7c>)
   36306:	4807      	ldr	r0, [pc, #28]	; (36324 <k_heap_free+0x80>)
   36308:	22b9      	movs	r2, #185	; 0xb9
   3630a:	f006 fb97 	bl	3ca3c <assert_print>
   3630e:	21b9      	movs	r1, #185	; 0xb9
   36310:	4803      	ldr	r0, [pc, #12]	; (36320 <k_heap_free+0x7c>)
   36312:	f006 fb8c 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   36316:	f387 8811 	msr	BASEPRI, r7
   3631a:	f3bf 8f6f 	isb	sy
}
   3631e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36320:	0004402c 	.word	0x0004402c
   36324:	00043ff2 	.word	0x00043ff2

00036328 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   36328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   3632a:	4c14      	ldr	r4, [pc, #80]	; (3637c <init_mem_slab_module+0x54>)
   3632c:	4d14      	ldr	r5, [pc, #80]	; (36380 <init_mem_slab_module+0x58>)
   3632e:	4e15      	ldr	r6, [pc, #84]	; (36384 <init_mem_slab_module+0x5c>)
   36330:	42ac      	cmp	r4, r5
   36332:	d908      	bls.n	36346 <init_mem_slab_module+0x1e>
   36334:	4631      	mov	r1, r6
   36336:	4814      	ldr	r0, [pc, #80]	; (36388 <init_mem_slab_module+0x60>)
   36338:	223d      	movs	r2, #61	; 0x3d
   3633a:	f006 fb7f 	bl	3ca3c <assert_print>
   3633e:	213d      	movs	r1, #61	; 0x3d
   36340:	4630      	mov	r0, r6
   36342:	f006 fb74 	bl	3ca2e <assert_post_action>
   36346:	42ac      	cmp	r4, r5
   36348:	d301      	bcc.n	3634e <init_mem_slab_module+0x26>
			goto out;
		}
		z_object_init(slab);
	}

out:
   3634a:	2000      	movs	r0, #0
	return rc;
}
   3634c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   3634e:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   36352:	ea42 0301 	orr.w	r3, r2, r1
   36356:	f013 0303 	ands.w	r3, r3, #3
   3635a:	d10b      	bne.n	36374 <init_mem_slab_module+0x4c>
	for (j = 0U; j < slab->num_blocks; j++) {
   3635c:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
   3635e:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   36360:	4283      	cmp	r3, r0
   36362:	d101      	bne.n	36368 <init_mem_slab_module+0x40>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   36364:	3420      	adds	r4, #32
   36366:	e7e3      	b.n	36330 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   36368:	69a7      	ldr	r7, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   3636a:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   3636c:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
   3636e:	61a2      	str	r2, [r4, #24]
		p += slab->block_size;
   36370:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   36372:	e7f5      	b.n	36360 <init_mem_slab_module+0x38>
	return rc;
   36374:	f06f 0015 	mvn.w	r0, #21
   36378:	e7e8      	b.n	3634c <init_mem_slab_module+0x24>
   3637a:	bf00      	nop
   3637c:	20014e68 	.word	0x20014e68
   36380:	20014e68 	.word	0x20014e68
   36384:	0004ba29 	.word	0x0004ba29
   36388:	00043ff2 	.word	0x00043ff2

0003638c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   3638c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   36390:	b085      	sub	sp, #20
   36392:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   36396:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   36398:	f1b9 0f0f 	cmp.w	r9, #15
{
   3639c:	460f      	mov	r7, r1
   3639e:	4615      	mov	r5, r2
   363a0:	4698      	mov	r8, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   363a2:	d130      	bne.n	36406 <z_setup_new_thread+0x7a>
   363a4:	4b20      	ldr	r3, [pc, #128]	; (36428 <z_setup_new_thread+0x9c>)
   363a6:	4598      	cmp	r8, r3
   363a8:	d131      	bne.n	3640e <z_setup_new_thread+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   363aa:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   363ae:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   363b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
	thread_base->pended_on = NULL;
   363b4:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
   363b6:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   363b8:	2304      	movs	r3, #4
   363ba:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   363bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   363be:	1de8      	adds	r0, r5, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   363c0:	9302      	str	r3, [sp, #8]
   363c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   363c4:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   363c8:	9301      	str	r3, [sp, #4]
   363ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	stack_ptr = (char *)stack + stack_obj_size;
   363cc:	183d      	adds	r5, r7, r0
	new_thread->stack_info.size = stack_buf_size;
   363ce:	e9c4 701d 	strd	r7, r0, [r4, #116]	; 0x74
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   363d2:	9300      	str	r3, [sp, #0]
   363d4:	462a      	mov	r2, r5
   363d6:	4643      	mov	r3, r8
   363d8:	4639      	mov	r1, r7
   363da:	4620      	mov	r0, r4
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   363dc:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
   363e0:	60a6      	str	r6, [r4, #8]

	thread_base->prio = priority;
   363e2:	f884 900e 	strb.w	r9, [r4, #14]

	thread_base->sched_locked = 0U;
   363e6:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   363e8:	67e6      	str	r6, [r4, #124]	; 0x7c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   363ea:	f7ec fcb3 	bl	22d54 <arch_new_thread>
	if (!_current) {
   363ee:	4b0f      	ldr	r3, [pc, #60]	; (3642c <z_setup_new_thread+0xa0>)
	new_thread->init_data = NULL;
   363f0:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   363f2:	689b      	ldr	r3, [r3, #8]
   363f4:	b10b      	cbz	r3, 363fa <z_setup_new_thread+0x6e>
	new_thread->resource_pool = _current->resource_pool;
   363f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
   363fa:	4628      	mov	r0, r5
   363fc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   36400:	b005      	add	sp, #20
   36402:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   36406:	f109 0310 	add.w	r3, r9, #16
   3640a:	2b1e      	cmp	r3, #30
   3640c:	d9cd      	bls.n	363aa <z_setup_new_thread+0x1e>
   3640e:	f240 12ff 	movw	r2, #511	; 0x1ff
   36412:	4907      	ldr	r1, [pc, #28]	; (36430 <z_setup_new_thread+0xa4>)
   36414:	4807      	ldr	r0, [pc, #28]	; (36434 <z_setup_new_thread+0xa8>)
   36416:	f006 fb11 	bl	3ca3c <assert_print>
   3641a:	f240 11ff 	movw	r1, #511	; 0x1ff
   3641e:	4804      	ldr	r0, [pc, #16]	; (36430 <z_setup_new_thread+0xa4>)
   36420:	f006 fb05 	bl	3ca2e <assert_post_action>
   36424:	e7c1      	b.n	363aa <z_setup_new_thread+0x1e>
   36426:	bf00      	nop
   36428:	0003660d 	.word	0x0003660d
   3642c:	2001a500 	.word	0x2001a500
   36430:	0004ba4e 	.word	0x0004ba4e
   36434:	00043ff2 	.word	0x00043ff2

00036438 <z_impl_k_thread_create>:
{
   36438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3643c:	b088      	sub	sp, #32
   3643e:	4604      	mov	r4, r0
   36440:	e9dd 6514 	ldrd	r6, r5, [sp, #80]	; 0x50
   36444:	460f      	mov	r7, r1
   36446:	4690      	mov	r8, r2
   36448:	f3ef 8205 	mrs	r2, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   3644c:	b162      	cbz	r2, 36468 <z_impl_k_thread_create+0x30>
   3644e:	f240 226e 	movw	r2, #622	; 0x26e
   36452:	491a      	ldr	r1, [pc, #104]	; (364bc <z_impl_k_thread_create+0x84>)
   36454:	481a      	ldr	r0, [pc, #104]	; (364c0 <z_impl_k_thread_create+0x88>)
   36456:	9307      	str	r3, [sp, #28]
   36458:	f006 faf0 	bl	3ca3c <assert_print>
   3645c:	f240 216e 	movw	r1, #622	; 0x26e
   36460:	4816      	ldr	r0, [pc, #88]	; (364bc <z_impl_k_thread_create+0x84>)
   36462:	f006 fae4 	bl	3ca2e <assert_post_action>
   36466:	9b07      	ldr	r3, [sp, #28]
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   36468:	2200      	movs	r2, #0
   3646a:	9205      	str	r2, [sp, #20]
   3646c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   3646e:	4639      	mov	r1, r7
   36470:	9204      	str	r2, [sp, #16]
   36472:	9a11      	ldr	r2, [sp, #68]	; 0x44
   36474:	4620      	mov	r0, r4
   36476:	9203      	str	r2, [sp, #12]
   36478:	9a10      	ldr	r2, [sp, #64]	; 0x40
   3647a:	9202      	str	r2, [sp, #8]
   3647c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   3647e:	9201      	str	r2, [sp, #4]
   36480:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   36482:	9200      	str	r2, [sp, #0]
   36484:	4642      	mov	r2, r8
   36486:	f7ff ff81 	bl	3638c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   3648a:	f1b5 3fff 	cmp.w	r5, #4294967295
   3648e:	bf08      	it	eq
   36490:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   36494:	d005      	beq.n	364a2 <z_impl_k_thread_create+0x6a>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   36496:	ea55 0306 	orrs.w	r3, r5, r6
   3649a:	d106      	bne.n	364aa <z_impl_k_thread_create+0x72>
	z_sched_start(thread);
   3649c:	4620      	mov	r0, r4
   3649e:	f001 fc81 	bl	37da4 <z_sched_start>
}
   364a2:	4620      	mov	r0, r4
   364a4:	b008      	add	sp, #32
   364a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   364aa:	4632      	mov	r2, r6
   364ac:	462b      	mov	r3, r5
   364ae:	4905      	ldr	r1, [pc, #20]	; (364c4 <z_impl_k_thread_create+0x8c>)
   364b0:	f104 0018 	add.w	r0, r4, #24
   364b4:	f002 fa4a 	bl	3894c <z_add_timeout>
   364b8:	e7f3      	b.n	364a2 <z_impl_k_thread_create+0x6a>
   364ba:	bf00      	nop
   364bc:	0004ba4e 	.word	0x0004ba4e
   364c0:	00043ff2 	.word	0x00043ff2
   364c4:	00037ead 	.word	0x00037ead

000364c8 <z_init_static_threads>:
{
   364c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   364cc:	4c37      	ldr	r4, [pc, #220]	; (365ac <z_init_static_threads+0xe4>)
	_FOREACH_STATIC_THREAD(thread_data) {
   364ce:	4d38      	ldr	r5, [pc, #224]	; (365b0 <z_init_static_threads+0xe8>)
   364d0:	4f38      	ldr	r7, [pc, #224]	; (365b4 <z_init_static_threads+0xec>)
{
   364d2:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   364d4:	42ac      	cmp	r4, r5
   364d6:	4626      	mov	r6, r4
   364d8:	d90a      	bls.n	364f0 <z_init_static_threads+0x28>
   364da:	4639      	mov	r1, r7
   364dc:	4836      	ldr	r0, [pc, #216]	; (365b8 <z_init_static_threads+0xf0>)
   364de:	f240 22d5 	movw	r2, #725	; 0x2d5
   364e2:	f006 faab 	bl	3ca3c <assert_print>
   364e6:	f240 21d5 	movw	r1, #725	; 0x2d5
   364ea:	4638      	mov	r0, r7
   364ec:	f006 fa9f 	bl	3ca2e <assert_post_action>
   364f0:	42ae      	cmp	r6, r5
   364f2:	f104 0430 	add.w	r4, r4, #48	; 0x30
   364f6:	d31b      	bcc.n	36530 <z_init_static_threads+0x68>
	k_sched_lock();
   364f8:	f001 fa24 	bl	37944 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   364fc:	4c2b      	ldr	r4, [pc, #172]	; (365ac <z_init_static_threads+0xe4>)
   364fe:	4e2d      	ldr	r6, [pc, #180]	; (365b4 <z_init_static_threads+0xec>)
   36500:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 365b8 <z_init_static_threads+0xf0>
   36504:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 365bc <z_init_static_threads+0xf4>
   36508:	42ac      	cmp	r4, r5
   3650a:	d90a      	bls.n	36522 <z_init_static_threads+0x5a>
   3650c:	4631      	mov	r1, r6
   3650e:	4640      	mov	r0, r8
   36510:	f44f 723d 	mov.w	r2, #756	; 0x2f4
   36514:	f006 fa92 	bl	3ca3c <assert_print>
   36518:	f44f 713d 	mov.w	r1, #756	; 0x2f4
   3651c:	4630      	mov	r0, r6
   3651e:	f006 fa86 	bl	3ca2e <assert_post_action>
   36522:	42ac      	cmp	r4, r5
   36524:	d320      	bcc.n	36568 <z_init_static_threads+0xa0>
}
   36526:	b007      	add	sp, #28
   36528:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   3652c:	f001 beac 	b.w	38288 <k_sched_unlock>
		z_setup_new_thread(
   36530:	f854 3c04 	ldr.w	r3, [r4, #-4]
   36534:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   36538:	9305      	str	r3, [sp, #20]
   3653a:	f854 3c10 	ldr.w	r3, [r4, #-16]
   3653e:	9304      	str	r3, [sp, #16]
   36540:	f854 3c14 	ldr.w	r3, [r4, #-20]
   36544:	9303      	str	r3, [sp, #12]
   36546:	f854 3c18 	ldr.w	r3, [r4, #-24]
   3654a:	9302      	str	r3, [sp, #8]
   3654c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   36550:	9301      	str	r3, [sp, #4]
   36552:	f854 3c20 	ldr.w	r3, [r4, #-32]
   36556:	9300      	str	r3, [sp, #0]
   36558:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   3655c:	f7ff ff16 	bl	3638c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   36560:	f854 3c30 	ldr.w	r3, [r4, #-48]
   36564:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   36566:	e7b5      	b.n	364d4 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   36568:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3656a:	1c5a      	adds	r2, r3, #1
   3656c:	d00f      	beq.n	3658e <z_init_static_threads+0xc6>
   3656e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   36572:	f240 30e7 	movw	r0, #999	; 0x3e7
   36576:	2100      	movs	r1, #0
					    K_MSEC(thread_data->init_delay));
   36578:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   3657c:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   36580:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   36584:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   36586:	d104      	bne.n	36592 <z_init_static_threads+0xca>
	z_sched_start(thread);
   36588:	4638      	mov	r0, r7
   3658a:	f001 fc0b 	bl	37da4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   3658e:	3430      	adds	r4, #48	; 0x30
   36590:	e7ba      	b.n	36508 <z_init_static_threads+0x40>
   36592:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   36596:	2300      	movs	r3, #0
   36598:	f7e6 fca6 	bl	1cee8 <__aeabi_uldivmod>
   3659c:	4602      	mov	r2, r0
   3659e:	460b      	mov	r3, r1
   365a0:	f107 0018 	add.w	r0, r7, #24
   365a4:	4649      	mov	r1, r9
   365a6:	f002 f9d1 	bl	3894c <z_add_timeout>
   365aa:	e7f0      	b.n	3658e <z_init_static_threads+0xc6>
   365ac:	20014d08 	.word	0x20014d08
   365b0:	20014df8 	.word	0x20014df8
   365b4:	0004ba4e 	.word	0x0004ba4e
   365b8:	00043ff2 	.word	0x00043ff2
   365bc:	00037ead 	.word	0x00037ead

000365c0 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   365c0:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   365c2:	b138      	cbz	r0, 365d4 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   365c4:	4b04      	ldr	r3, [pc, #16]	; (365d8 <z_spin_lock_valid+0x18>)
   365c6:	f000 0003 	and.w	r0, r0, #3
   365ca:	7d1b      	ldrb	r3, [r3, #20]
   365cc:	1ac0      	subs	r0, r0, r3
   365ce:	bf18      	it	ne
   365d0:	2001      	movne	r0, #1
   365d2:	4770      	bx	lr
			return false;
		}
	}
	return true;
   365d4:	2001      	movs	r0, #1
}
   365d6:	4770      	bx	lr
   365d8:	2001a500 	.word	0x2001a500

000365dc <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   365dc:	4a06      	ldr	r2, [pc, #24]	; (365f8 <z_spin_unlock_valid+0x1c>)
   365de:	7d11      	ldrb	r1, [r2, #20]
   365e0:	6893      	ldr	r3, [r2, #8]
   365e2:	6802      	ldr	r2, [r0, #0]
   365e4:	430b      	orrs	r3, r1
   365e6:	429a      	cmp	r2, r3
   365e8:	f04f 0300 	mov.w	r3, #0
		return false;
	}
	l->thread_cpu = 0;
   365ec:	bf06      	itte	eq
   365ee:	6003      	streq	r3, [r0, #0]
	return true;
   365f0:	2001      	moveq	r0, #1
		return false;
   365f2:	4618      	movne	r0, r3
}
   365f4:	4770      	bx	lr
   365f6:	bf00      	nop
   365f8:	2001a500 	.word	0x2001a500

000365fc <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   365fc:	4a02      	ldr	r2, [pc, #8]	; (36608 <z_spin_lock_set_owner+0xc>)
   365fe:	7d11      	ldrb	r1, [r2, #20]
   36600:	6893      	ldr	r3, [r2, #8]
   36602:	430b      	orrs	r3, r1
   36604:	6003      	str	r3, [r0, #0]
}
   36606:	4770      	bx	lr
   36608:	2001a500 	.word	0x2001a500

0003660c <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   3660c:	4c12      	ldr	r4, [pc, #72]	; (36658 <idle+0x4c>)
{
   3660e:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   36610:	68a3      	ldr	r3, [r4, #8]
   36612:	f993 300e 	ldrsb.w	r3, [r3, #14]
   36616:	2b00      	cmp	r3, #0
   36618:	da08      	bge.n	3662c <idle+0x20>
   3661a:	4910      	ldr	r1, [pc, #64]	; (3665c <idle+0x50>)
   3661c:	4810      	ldr	r0, [pc, #64]	; (36660 <idle+0x54>)
   3661e:	2227      	movs	r2, #39	; 0x27
   36620:	f006 fa0c 	bl	3ca3c <assert_print>
   36624:	2127      	movs	r1, #39	; 0x27
   36626:	480d      	ldr	r0, [pc, #52]	; (3665c <idle+0x50>)
   36628:	f006 fa01 	bl	3ca2e <assert_post_action>
   3662c:	4d0d      	ldr	r5, [pc, #52]	; (36664 <idle+0x58>)
	__asm__ volatile(
   3662e:	f04f 0220 	mov.w	r2, #32
   36632:	f3ef 8311 	mrs	r3, BASEPRI
   36636:	f382 8812 	msr	BASEPRI_MAX, r2
   3663a:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   3663e:	f002 faa9 	bl	38b94 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   36642:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   36644:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   36646:	b913      	cbnz	r3, 3664e <idle+0x42>
	arch_cpu_idle();
   36648:	f7ec f9f6 	bl	22a38 <arch_cpu_idle>
}
   3664c:	e7ef      	b.n	3662e <idle+0x22>
   3664e:	f7ec f91b 	bl	22888 <pm_system_suspend>
   36652:	2800      	cmp	r0, #0
   36654:	d1eb      	bne.n	3662e <idle+0x22>
   36656:	e7f7      	b.n	36648 <idle+0x3c>
   36658:	2001a500 	.word	0x2001a500
   3665c:	0004ba71 	.word	0x0004ba71
   36660:	00043ff2 	.word	0x00043ff2
   36664:	2001d3cc 	.word	0x2001d3cc

00036668 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   36668:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3666c:	4604      	mov	r4, r0
   3666e:	4689      	mov	r9, r1
   36670:	4690      	mov	r8, r2
   36672:	461d      	mov	r5, r3
   36674:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   36678:	b15b      	cbz	r3, 36692 <z_impl_k_msgq_put+0x2a>
   3667a:	ea52 0305 	orrs.w	r3, r2, r5
   3667e:	d008      	beq.n	36692 <z_impl_k_msgq_put+0x2a>
   36680:	493d      	ldr	r1, [pc, #244]	; (36778 <z_impl_k_msgq_put+0x110>)
   36682:	483e      	ldr	r0, [pc, #248]	; (3677c <z_impl_k_msgq_put+0x114>)
   36684:	2276      	movs	r2, #118	; 0x76
   36686:	f006 f9d9 	bl	3ca3c <assert_print>
   3668a:	2176      	movs	r1, #118	; 0x76
   3668c:	483a      	ldr	r0, [pc, #232]	; (36778 <z_impl_k_msgq_put+0x110>)
   3668e:	f006 f9ce 	bl	3ca2e <assert_post_action>

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   36692:	f104 0608 	add.w	r6, r4, #8
   36696:	f04f 0320 	mov.w	r3, #32
   3669a:	f3ef 8711 	mrs	r7, BASEPRI
   3669e:	f383 8812 	msr	BASEPRI_MAX, r3
   366a2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   366a6:	4630      	mov	r0, r6
   366a8:	f7ff ff8a 	bl	365c0 <z_spin_lock_valid>
   366ac:	b940      	cbnz	r0, 366c0 <z_impl_k_msgq_put+0x58>
   366ae:	4934      	ldr	r1, [pc, #208]	; (36780 <z_impl_k_msgq_put+0x118>)
   366b0:	4832      	ldr	r0, [pc, #200]	; (3677c <z_impl_k_msgq_put+0x114>)
   366b2:	228e      	movs	r2, #142	; 0x8e
   366b4:	f006 f9c2 	bl	3ca3c <assert_print>
   366b8:	218e      	movs	r1, #142	; 0x8e
   366ba:	4831      	ldr	r0, [pc, #196]	; (36780 <z_impl_k_msgq_put+0x118>)
   366bc:	f006 f9b7 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   366c0:	4630      	mov	r0, r6
   366c2:	f7ff ff9b 	bl	365fc <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
   366c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
   366c8:	6923      	ldr	r3, [r4, #16]
   366ca:	429a      	cmp	r2, r3
   366cc:	d240      	bcs.n	36750 <z_impl_k_msgq_put+0xe8>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   366ce:	4620      	mov	r0, r4
   366d0:	f001 fe36 	bl	38340 <z_unpend_first_thread>
   366d4:	4649      	mov	r1, r9
		if (pending_thread != NULL) {
   366d6:	4605      	mov	r5, r0
   366d8:	68e2      	ldr	r2, [r4, #12]
   366da:	b180      	cbz	r0, 366fe <z_impl_k_msgq_put+0x96>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   366dc:	2400      	movs	r4, #0
   366de:	6940      	ldr	r0, [r0, #20]
   366e0:	f00a fe60 	bl	413a4 <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   366e4:	4628      	mov	r0, r5
   366e6:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
   366ea:	f001 fb25 	bl	37d38 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   366ee:	4639      	mov	r1, r7
   366f0:	4630      	mov	r0, r6
   366f2:	f001 f8f1 	bl	378d8 <z_reschedule>
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   366f6:	4620      	mov	r0, r4
   366f8:	b003      	add	sp, #12
   366fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   366fe:	6a20      	ldr	r0, [r4, #32]
   36700:	f00a fe50 	bl	413a4 <memcpy>
			msgq->write_ptr += msgq->msg_size;
   36704:	6a23      	ldr	r3, [r4, #32]
   36706:	68e2      	ldr	r2, [r4, #12]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   36708:	f104 0028 	add.w	r0, r4, #40	; 0x28
			msgq->write_ptr += msgq->msg_size;
   3670c:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   3670e:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   36710:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   36712:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   36714:	bf08      	it	eq
   36716:	6963      	ldreq	r3, [r4, #20]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   36718:	f04f 0110 	mov.w	r1, #16
				msgq->write_ptr = msgq->buffer_start;
   3671c:	bf08      	it	eq
   3671e:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   36720:	6a63      	ldr	r3, [r4, #36]	; 0x24
   36722:	3301      	adds	r3, #1
   36724:	6263      	str	r3, [r4, #36]	; 0x24
	z_handle_obj_poll_events(&msgq->poll_events, state);
   36726:	f00a fd8c 	bl	41242 <z_handle_obj_poll_events>
		result = 0;
   3672a:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3672c:	4630      	mov	r0, r6
   3672e:	f7ff ff55 	bl	365dc <z_spin_unlock_valid>
   36732:	b940      	cbnz	r0, 36746 <z_impl_k_msgq_put+0xde>
   36734:	4912      	ldr	r1, [pc, #72]	; (36780 <z_impl_k_msgq_put+0x118>)
   36736:	4811      	ldr	r0, [pc, #68]	; (3677c <z_impl_k_msgq_put+0x114>)
   36738:	22b9      	movs	r2, #185	; 0xb9
   3673a:	f006 f97f 	bl	3ca3c <assert_print>
   3673e:	21b9      	movs	r1, #185	; 0xb9
   36740:	480f      	ldr	r0, [pc, #60]	; (36780 <z_impl_k_msgq_put+0x118>)
   36742:	f006 f974 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   36746:	f387 8811 	msr	BASEPRI, r7
   3674a:	f3bf 8f6f 	isb	sy
	return result;
   3674e:	e7d2      	b.n	366f6 <z_impl_k_msgq_put+0x8e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   36750:	ea58 0305 	orrs.w	r3, r8, r5
   36754:	d00c      	beq.n	36770 <z_impl_k_msgq_put+0x108>
		_current->base.swap_data = (void *) data;
   36756:	4b0b      	ldr	r3, [pc, #44]	; (36784 <z_impl_k_msgq_put+0x11c>)
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   36758:	4622      	mov	r2, r4
		_current->base.swap_data = (void *) data;
   3675a:	689b      	ldr	r3, [r3, #8]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3675c:	4639      	mov	r1, r7
		_current->base.swap_data = (void *) data;
   3675e:	f8c3 9014 	str.w	r9, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   36762:	4630      	mov	r0, r6
   36764:	e9cd 8500 	strd	r8, r5, [sp]
   36768:	f001 fc8e 	bl	38088 <z_pend_curr>
   3676c:	4604      	mov	r4, r0
		return result;
   3676e:	e7c2      	b.n	366f6 <z_impl_k_msgq_put+0x8e>
		result = -ENOMSG;
   36770:	f06f 0422 	mvn.w	r4, #34	; 0x22
   36774:	e7da      	b.n	3672c <z_impl_k_msgq_put+0xc4>
   36776:	bf00      	nop
   36778:	0004ba92 	.word	0x0004ba92
   3677c:	00043ff2 	.word	0x00043ff2
   36780:	0004402c 	.word	0x0004402c
   36784:	2001a500 	.word	0x2001a500

00036788 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   36788:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3678c:	4604      	mov	r4, r0
   3678e:	4688      	mov	r8, r1
   36790:	4617      	mov	r7, r2
   36792:	461d      	mov	r5, r3
   36794:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   36798:	b15b      	cbz	r3, 367b2 <z_impl_k_msgq_get+0x2a>
   3679a:	ea52 0305 	orrs.w	r3, r2, r5
   3679e:	d008      	beq.n	367b2 <z_impl_k_msgq_get+0x2a>
   367a0:	4940      	ldr	r1, [pc, #256]	; (368a4 <z_impl_k_msgq_get+0x11c>)
   367a2:	4841      	ldr	r0, [pc, #260]	; (368a8 <z_impl_k_msgq_get+0x120>)
   367a4:	22d0      	movs	r2, #208	; 0xd0
   367a6:	f006 f949 	bl	3ca3c <assert_print>
   367aa:	21d0      	movs	r1, #208	; 0xd0
   367ac:	483d      	ldr	r0, [pc, #244]	; (368a4 <z_impl_k_msgq_get+0x11c>)
   367ae:	f006 f93e 	bl	3ca2e <assert_post_action>

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   367b2:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   367b6:	f04f 0320 	mov.w	r3, #32
   367ba:	f3ef 8911 	mrs	r9, BASEPRI
   367be:	f383 8812 	msr	BASEPRI_MAX, r3
   367c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   367c6:	4630      	mov	r0, r6
   367c8:	f7ff fefa 	bl	365c0 <z_spin_lock_valid>
   367cc:	b940      	cbnz	r0, 367e0 <z_impl_k_msgq_get+0x58>
   367ce:	4937      	ldr	r1, [pc, #220]	; (368ac <z_impl_k_msgq_get+0x124>)
   367d0:	4835      	ldr	r0, [pc, #212]	; (368a8 <z_impl_k_msgq_get+0x120>)
   367d2:	228e      	movs	r2, #142	; 0x8e
   367d4:	f006 f932 	bl	3ca3c <assert_print>
   367d8:	218e      	movs	r1, #142	; 0x8e
   367da:	4834      	ldr	r0, [pc, #208]	; (368ac <z_impl_k_msgq_get+0x124>)
   367dc:	f006 f927 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   367e0:	4630      	mov	r0, r6
   367e2:	f7ff ff0b 	bl	365fc <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
   367e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   367e8:	2b00      	cmp	r3, #0
   367ea:	d036      	beq.n	3685a <z_impl_k_msgq_get+0xd2>
   367ec:	68e2      	ldr	r2, [r4, #12]
   367ee:	69e1      	ldr	r1, [r4, #28]
   367f0:	4640      	mov	r0, r8
   367f2:	f00a fdd7 	bl	413a4 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   367f6:	69e3      	ldr	r3, [r4, #28]
   367f8:	68e2      	ldr	r2, [r4, #12]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   367fa:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   367fc:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   367fe:	69a2      	ldr	r2, [r4, #24]
		msgq->read_ptr += msgq->msg_size;
   36800:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
   36802:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   36804:	bf04      	itt	eq
   36806:	6963      	ldreq	r3, [r4, #20]
   36808:	61e3      	streq	r3, [r4, #28]
		msgq->used_msgs--;
   3680a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3680c:	3b01      	subs	r3, #1
   3680e:	6263      	str	r3, [r4, #36]	; 0x24
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   36810:	f001 fd96 	bl	38340 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   36814:	4605      	mov	r5, r0
   36816:	2800      	cmp	r0, #0
   36818:	d031      	beq.n	3687e <z_impl_k_msgq_get+0xf6>
   3681a:	6941      	ldr	r1, [r0, #20]
   3681c:	68e2      	ldr	r2, [r4, #12]
   3681e:	6a20      	ldr	r0, [r4, #32]
   36820:	f00a fdc0 	bl	413a4 <memcpy>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   36824:	6a23      	ldr	r3, [r4, #32]
   36826:	68e2      	ldr	r2, [r4, #12]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   36828:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
   3682a:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   3682c:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   3682e:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   36830:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   36832:	bf04      	itt	eq
   36834:	6963      	ldreq	r3, [r4, #20]
   36836:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   36838:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3683a:	3301      	adds	r3, #1
   3683c:	6263      	str	r3, [r4, #36]	; 0x24
   3683e:	2400      	movs	r4, #0
   36840:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
			z_ready_thread(pending_thread);
   36844:	f001 fa78 	bl	37d38 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   36848:	4649      	mov	r1, r9
   3684a:	4630      	mov	r0, r6
   3684c:	f001 f844 	bl	378d8 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
   36850:	4625      	mov	r5, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   36852:	4628      	mov	r0, r5
   36854:	b003      	add	sp, #12
   36856:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3685a:	ea57 0305 	orrs.w	r3, r7, r5
   3685e:	d00c      	beq.n	3687a <z_impl_k_msgq_get+0xf2>
		_current->base.swap_data = data;
   36860:	4b13      	ldr	r3, [pc, #76]	; (368b0 <z_impl_k_msgq_get+0x128>)
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   36862:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   36864:	689b      	ldr	r3, [r3, #8]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   36866:	4649      	mov	r1, r9
		_current->base.swap_data = data;
   36868:	f8c3 8014 	str.w	r8, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3686c:	4630      	mov	r0, r6
   3686e:	e9cd 7500 	strd	r7, r5, [sp]
   36872:	f001 fc09 	bl	38088 <z_pend_curr>
   36876:	4605      	mov	r5, r0
		return result;
   36878:	e7eb      	b.n	36852 <z_impl_k_msgq_get+0xca>
		result = -ENOMSG;
   3687a:	f06f 0522 	mvn.w	r5, #34	; 0x22
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3687e:	4630      	mov	r0, r6
   36880:	f7ff feac 	bl	365dc <z_spin_unlock_valid>
   36884:	b940      	cbnz	r0, 36898 <z_impl_k_msgq_get+0x110>
   36886:	4909      	ldr	r1, [pc, #36]	; (368ac <z_impl_k_msgq_get+0x124>)
   36888:	4807      	ldr	r0, [pc, #28]	; (368a8 <z_impl_k_msgq_get+0x120>)
   3688a:	22b9      	movs	r2, #185	; 0xb9
   3688c:	f006 f8d6 	bl	3ca3c <assert_print>
   36890:	21b9      	movs	r1, #185	; 0xb9
   36892:	4806      	ldr	r0, [pc, #24]	; (368ac <z_impl_k_msgq_get+0x124>)
   36894:	f006 f8cb 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   36898:	f389 8811 	msr	BASEPRI, r9
   3689c:	f3bf 8f6f 	isb	sy
	return result;
   368a0:	e7d7      	b.n	36852 <z_impl_k_msgq_get+0xca>
   368a2:	bf00      	nop
   368a4:	0004ba92 	.word	0x0004ba92
   368a8:	00043ff2 	.word	0x00043ff2
   368ac:	0004402c 	.word	0x0004402c
   368b0:	2001a500 	.word	0x2001a500

000368b4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   368b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   368b8:	4604      	mov	r4, r0
   368ba:	4617      	mov	r7, r2
   368bc:	461e      	mov	r6, r3
   368be:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   368c2:	b143      	cbz	r3, 368d6 <z_impl_k_mutex_lock+0x22>
   368c4:	495f      	ldr	r1, [pc, #380]	; (36a44 <z_impl_k_mutex_lock+0x190>)
   368c6:	4860      	ldr	r0, [pc, #384]	; (36a48 <z_impl_k_mutex_lock+0x194>)
   368c8:	2265      	movs	r2, #101	; 0x65
   368ca:	f006 f8b7 	bl	3ca3c <assert_print>
   368ce:	2165      	movs	r1, #101	; 0x65
   368d0:	485c      	ldr	r0, [pc, #368]	; (36a44 <z_impl_k_mutex_lock+0x190>)
   368d2:	f006 f8ac 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   368d6:	f04f 0320 	mov.w	r3, #32
   368da:	f3ef 8811 	mrs	r8, BASEPRI
   368de:	f383 8812 	msr	BASEPRI_MAX, r3
   368e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   368e6:	4859      	ldr	r0, [pc, #356]	; (36a4c <z_impl_k_mutex_lock+0x198>)
   368e8:	f7ff fe6a 	bl	365c0 <z_spin_lock_valid>
   368ec:	b940      	cbnz	r0, 36900 <z_impl_k_mutex_lock+0x4c>
   368ee:	4958      	ldr	r1, [pc, #352]	; (36a50 <z_impl_k_mutex_lock+0x19c>)
   368f0:	4855      	ldr	r0, [pc, #340]	; (36a48 <z_impl_k_mutex_lock+0x194>)
   368f2:	228e      	movs	r2, #142	; 0x8e
   368f4:	f006 f8a2 	bl	3ca3c <assert_print>
   368f8:	218e      	movs	r1, #142	; 0x8e
   368fa:	4855      	ldr	r0, [pc, #340]	; (36a50 <z_impl_k_mutex_lock+0x19c>)
   368fc:	f006 f897 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   36900:	4852      	ldr	r0, [pc, #328]	; (36a4c <z_impl_k_mutex_lock+0x198>)
   36902:	f7ff fe7b 	bl	365fc <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   36906:	68e3      	ldr	r3, [r4, #12]
   36908:	4a52      	ldr	r2, [pc, #328]	; (36a54 <z_impl_k_mutex_lock+0x1a0>)
   3690a:	b1d3      	cbz	r3, 36942 <z_impl_k_mutex_lock+0x8e>
   3690c:	68a0      	ldr	r0, [r4, #8]
   3690e:	6891      	ldr	r1, [r2, #8]
   36910:	4288      	cmp	r0, r1
   36912:	d033      	beq.n	3697c <z_impl_k_mutex_lock+0xc8>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   36914:	ea57 0306 	orrs.w	r3, r7, r6
   36918:	d132      	bne.n	36980 <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3691a:	484c      	ldr	r0, [pc, #304]	; (36a4c <z_impl_k_mutex_lock+0x198>)
   3691c:	f7ff fe5e 	bl	365dc <z_spin_unlock_valid>
   36920:	b940      	cbnz	r0, 36934 <z_impl_k_mutex_lock+0x80>
   36922:	494b      	ldr	r1, [pc, #300]	; (36a50 <z_impl_k_mutex_lock+0x19c>)
   36924:	4848      	ldr	r0, [pc, #288]	; (36a48 <z_impl_k_mutex_lock+0x194>)
   36926:	22b9      	movs	r2, #185	; 0xb9
   36928:	f006 f888 	bl	3ca3c <assert_print>
   3692c:	21b9      	movs	r1, #185	; 0xb9
   3692e:	4848      	ldr	r0, [pc, #288]	; (36a50 <z_impl_k_mutex_lock+0x19c>)
   36930:	f006 f87d 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   36934:	f388 8811 	msr	BASEPRI, r8
   36938:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   3693c:	f06f 000f 	mvn.w	r0, #15
   36940:	e019      	b.n	36976 <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   36942:	6891      	ldr	r1, [r2, #8]
   36944:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   36948:	3301      	adds	r3, #1
   3694a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   3694c:	6893      	ldr	r3, [r2, #8]
   3694e:	483f      	ldr	r0, [pc, #252]	; (36a4c <z_impl_k_mutex_lock+0x198>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   36950:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   36952:	60a3      	str	r3, [r4, #8]
   36954:	f7ff fe42 	bl	365dc <z_spin_unlock_valid>
   36958:	b940      	cbnz	r0, 3696c <z_impl_k_mutex_lock+0xb8>
   3695a:	493d      	ldr	r1, [pc, #244]	; (36a50 <z_impl_k_mutex_lock+0x19c>)
   3695c:	483a      	ldr	r0, [pc, #232]	; (36a48 <z_impl_k_mutex_lock+0x194>)
   3695e:	22b9      	movs	r2, #185	; 0xb9
   36960:	f006 f86c 	bl	3ca3c <assert_print>
   36964:	21b9      	movs	r1, #185	; 0xb9
   36966:	483a      	ldr	r0, [pc, #232]	; (36a50 <z_impl_k_mutex_lock+0x19c>)
   36968:	f006 f861 	bl	3ca2e <assert_post_action>
   3696c:	f388 8811 	msr	BASEPRI, r8
   36970:	f3bf 8f6f 	isb	sy
		return 0;
   36974:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   36976:	b002      	add	sp, #8
   36978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   3697c:	6921      	ldr	r1, [r4, #16]
   3697e:	e7e3      	b.n	36948 <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   36980:	f991 100e 	ldrsb.w	r1, [r1, #14]
   36984:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   36988:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   3698c:	4299      	cmp	r1, r3
   3698e:	bfa8      	it	ge
   36990:	4619      	movge	r1, r3
   36992:	4291      	cmp	r1, r2
   36994:	bfb8      	it	lt
   36996:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   36998:	428b      	cmp	r3, r1
   3699a:	dd3e      	ble.n	36a1a <z_impl_k_mutex_lock+0x166>
		resched = adjust_owner_prio(mutex, new_prio);
   3699c:	f00a fad0 	bl	40f40 <adjust_owner_prio.isra.0>
   369a0:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   369a2:	4622      	mov	r2, r4
   369a4:	4641      	mov	r1, r8
   369a6:	e9cd 7600 	strd	r7, r6, [sp]
   369aa:	4828      	ldr	r0, [pc, #160]	; (36a4c <z_impl_k_mutex_lock+0x198>)
   369ac:	f001 fb6c 	bl	38088 <z_pend_curr>
	if (got_mutex == 0) {
   369b0:	2800      	cmp	r0, #0
   369b2:	d0e0      	beq.n	36976 <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   369b4:	f04f 0320 	mov.w	r3, #32
   369b8:	f3ef 8611 	mrs	r6, BASEPRI
   369bc:	f383 8812 	msr	BASEPRI_MAX, r3
   369c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   369c4:	4821      	ldr	r0, [pc, #132]	; (36a4c <z_impl_k_mutex_lock+0x198>)
   369c6:	f7ff fdfb 	bl	365c0 <z_spin_lock_valid>
   369ca:	b940      	cbnz	r0, 369de <z_impl_k_mutex_lock+0x12a>
   369cc:	4920      	ldr	r1, [pc, #128]	; (36a50 <z_impl_k_mutex_lock+0x19c>)
   369ce:	481e      	ldr	r0, [pc, #120]	; (36a48 <z_impl_k_mutex_lock+0x194>)
   369d0:	228e      	movs	r2, #142	; 0x8e
   369d2:	f006 f833 	bl	3ca3c <assert_print>
   369d6:	218e      	movs	r1, #142	; 0x8e
   369d8:	481d      	ldr	r0, [pc, #116]	; (36a50 <z_impl_k_mutex_lock+0x19c>)
   369da:	f006 f828 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   369de:	481b      	ldr	r0, [pc, #108]	; (36a4c <z_impl_k_mutex_lock+0x198>)
   369e0:	f7ff fe0c 	bl	365fc <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   369e4:	6823      	ldr	r3, [r4, #0]
   369e6:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   369e8:	429c      	cmp	r4, r3
   369ea:	d00a      	beq.n	36a02 <z_impl_k_mutex_lock+0x14e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   369ec:	b14b      	cbz	r3, 36a02 <z_impl_k_mutex_lock+0x14e>
   369ee:	f993 300e 	ldrsb.w	r3, [r3, #14]
   369f2:	4299      	cmp	r1, r3
   369f4:	bfa8      	it	ge
   369f6:	4619      	movge	r1, r3
   369f8:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   369fc:	4299      	cmp	r1, r3
   369fe:	bfb8      	it	lt
   36a00:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   36a02:	68a0      	ldr	r0, [r4, #8]
   36a04:	f00a fa9c 	bl	40f40 <adjust_owner_prio.isra.0>
   36a08:	b900      	cbnz	r0, 36a0c <z_impl_k_mutex_lock+0x158>
	if (resched) {
   36a0a:	b145      	cbz	r5, 36a1e <z_impl_k_mutex_lock+0x16a>
		z_reschedule(&lock, key);
   36a0c:	4631      	mov	r1, r6
   36a0e:	480f      	ldr	r0, [pc, #60]	; (36a4c <z_impl_k_mutex_lock+0x198>)
   36a10:	f000 ff62 	bl	378d8 <z_reschedule>
	return -EAGAIN;
   36a14:	f06f 000a 	mvn.w	r0, #10
   36a18:	e7ad      	b.n	36976 <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   36a1a:	2500      	movs	r5, #0
   36a1c:	e7c1      	b.n	369a2 <z_impl_k_mutex_lock+0xee>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36a1e:	480b      	ldr	r0, [pc, #44]	; (36a4c <z_impl_k_mutex_lock+0x198>)
   36a20:	f7ff fddc 	bl	365dc <z_spin_unlock_valid>
   36a24:	b940      	cbnz	r0, 36a38 <z_impl_k_mutex_lock+0x184>
   36a26:	490a      	ldr	r1, [pc, #40]	; (36a50 <z_impl_k_mutex_lock+0x19c>)
   36a28:	4807      	ldr	r0, [pc, #28]	; (36a48 <z_impl_k_mutex_lock+0x194>)
   36a2a:	22b9      	movs	r2, #185	; 0xb9
   36a2c:	f006 f806 	bl	3ca3c <assert_print>
   36a30:	21b9      	movs	r1, #185	; 0xb9
   36a32:	4807      	ldr	r0, [pc, #28]	; (36a50 <z_impl_k_mutex_lock+0x19c>)
   36a34:	f005 fffb 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   36a38:	f386 8811 	msr	BASEPRI, r6
   36a3c:	f3bf 8f6f 	isb	sy
   36a40:	e7e8      	b.n	36a14 <z_impl_k_mutex_lock+0x160>
   36a42:	bf00      	nop
   36a44:	0004bab4 	.word	0x0004bab4
   36a48:	00043ff2 	.word	0x00043ff2
   36a4c:	2001a52c 	.word	0x2001a52c
   36a50:	0004402c 	.word	0x0004402c
   36a54:	2001a500 	.word	0x2001a500

00036a58 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   36a58:	b538      	push	{r3, r4, r5, lr}
   36a5a:	4604      	mov	r4, r0
   36a5c:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   36a60:	b143      	cbz	r3, 36a74 <z_impl_k_mutex_unlock+0x1c>
   36a62:	4944      	ldr	r1, [pc, #272]	; (36b74 <z_impl_k_mutex_unlock+0x11c>)
   36a64:	4844      	ldr	r0, [pc, #272]	; (36b78 <z_impl_k_mutex_unlock+0x120>)
   36a66:	22c7      	movs	r2, #199	; 0xc7
   36a68:	f005 ffe8 	bl	3ca3c <assert_print>
   36a6c:	21c7      	movs	r1, #199	; 0xc7
   36a6e:	4841      	ldr	r0, [pc, #260]	; (36b74 <z_impl_k_mutex_unlock+0x11c>)
   36a70:	f005 ffdd 	bl	3ca2e <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   36a74:	68a3      	ldr	r3, [r4, #8]
   36a76:	2b00      	cmp	r3, #0
   36a78:	d075      	beq.n	36b66 <z_impl_k_mutex_unlock+0x10e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   36a7a:	4d40      	ldr	r5, [pc, #256]	; (36b7c <z_impl_k_mutex_unlock+0x124>)
   36a7c:	68aa      	ldr	r2, [r5, #8]
   36a7e:	4293      	cmp	r3, r2
   36a80:	d174      	bne.n	36b6c <z_impl_k_mutex_unlock+0x114>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   36a82:	68e3      	ldr	r3, [r4, #12]
   36a84:	b943      	cbnz	r3, 36a98 <z_impl_k_mutex_unlock+0x40>
   36a86:	493b      	ldr	r1, [pc, #236]	; (36b74 <z_impl_k_mutex_unlock+0x11c>)
   36a88:	483b      	ldr	r0, [pc, #236]	; (36b78 <z_impl_k_mutex_unlock+0x120>)
   36a8a:	22df      	movs	r2, #223	; 0xdf
   36a8c:	f005 ffd6 	bl	3ca3c <assert_print>
   36a90:	21df      	movs	r1, #223	; 0xdf
   36a92:	4838      	ldr	r0, [pc, #224]	; (36b74 <z_impl_k_mutex_unlock+0x11c>)
   36a94:	f005 ffcb 	bl	3ca2e <assert_post_action>
   36a98:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
   36a9c:	b143      	cbz	r3, 36ab0 <z_impl_k_mutex_unlock+0x58>
   36a9e:	4938      	ldr	r1, [pc, #224]	; (36b80 <z_impl_k_mutex_unlock+0x128>)
   36aa0:	4835      	ldr	r0, [pc, #212]	; (36b78 <z_impl_k_mutex_unlock+0x120>)
   36aa2:	22fd      	movs	r2, #253	; 0xfd
   36aa4:	f005 ffca 	bl	3ca3c <assert_print>
   36aa8:	21fd      	movs	r1, #253	; 0xfd
   36aaa:	4835      	ldr	r0, [pc, #212]	; (36b80 <z_impl_k_mutex_unlock+0x128>)
   36aac:	f005 ffbf 	bl	3ca2e <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   36ab0:	68ab      	ldr	r3, [r5, #8]
   36ab2:	7bdb      	ldrb	r3, [r3, #15]
   36ab4:	2b01      	cmp	r3, #1
   36ab6:	d108      	bne.n	36aca <z_impl_k_mutex_unlock+0x72>
   36ab8:	4931      	ldr	r1, [pc, #196]	; (36b80 <z_impl_k_mutex_unlock+0x128>)
   36aba:	482f      	ldr	r0, [pc, #188]	; (36b78 <z_impl_k_mutex_unlock+0x120>)
   36abc:	22fe      	movs	r2, #254	; 0xfe
   36abe:	f005 ffbd 	bl	3ca3c <assert_print>
   36ac2:	21fe      	movs	r1, #254	; 0xfe
   36ac4:	482e      	ldr	r0, [pc, #184]	; (36b80 <z_impl_k_mutex_unlock+0x128>)
   36ac6:	f005 ffb2 	bl	3ca2e <assert_post_action>

	--_current->base.sched_locked;
   36aca:	68aa      	ldr	r2, [r5, #8]
   36acc:	7bd3      	ldrb	r3, [r2, #15]
   36ace:	3b01      	subs	r3, #1
   36ad0:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   36ad2:	68e3      	ldr	r3, [r4, #12]
   36ad4:	2b01      	cmp	r3, #1
   36ad6:	d905      	bls.n	36ae4 <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count--;
   36ad8:	3b01      	subs	r3, #1
   36ada:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   36adc:	f001 fbd4 	bl	38288 <k_sched_unlock>

	return 0;
   36ae0:	2000      	movs	r0, #0
}
   36ae2:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   36ae4:	f04f 0320 	mov.w	r3, #32
   36ae8:	f3ef 8511 	mrs	r5, BASEPRI
   36aec:	f383 8812 	msr	BASEPRI_MAX, r3
   36af0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36af4:	4823      	ldr	r0, [pc, #140]	; (36b84 <z_impl_k_mutex_unlock+0x12c>)
   36af6:	f7ff fd63 	bl	365c0 <z_spin_lock_valid>
   36afa:	b940      	cbnz	r0, 36b0e <z_impl_k_mutex_unlock+0xb6>
   36afc:	4922      	ldr	r1, [pc, #136]	; (36b88 <z_impl_k_mutex_unlock+0x130>)
   36afe:	481e      	ldr	r0, [pc, #120]	; (36b78 <z_impl_k_mutex_unlock+0x120>)
   36b00:	228e      	movs	r2, #142	; 0x8e
   36b02:	f005 ff9b 	bl	3ca3c <assert_print>
   36b06:	218e      	movs	r1, #142	; 0x8e
   36b08:	481f      	ldr	r0, [pc, #124]	; (36b88 <z_impl_k_mutex_unlock+0x130>)
   36b0a:	f005 ff90 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   36b0e:	481d      	ldr	r0, [pc, #116]	; (36b84 <z_impl_k_mutex_unlock+0x12c>)
   36b10:	f7ff fd74 	bl	365fc <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   36b14:	6921      	ldr	r1, [r4, #16]
   36b16:	68a0      	ldr	r0, [r4, #8]
   36b18:	f00a fa12 	bl	40f40 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   36b1c:	4620      	mov	r0, r4
   36b1e:	f001 fc0f 	bl	38340 <z_unpend_first_thread>
	mutex->owner = new_owner;
   36b22:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   36b24:	b160      	cbz	r0, 36b40 <z_impl_k_mutex_unlock+0xe8>
		mutex->owner_orig_prio = new_owner->base.prio;
   36b26:	f990 200e 	ldrsb.w	r2, [r0, #14]
   36b2a:	6122      	str	r2, [r4, #16]
   36b2c:	2200      	movs	r2, #0
   36b2e:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		z_ready_thread(new_owner);
   36b32:	f001 f901 	bl	37d38 <z_ready_thread>
		z_reschedule(&lock, key);
   36b36:	4629      	mov	r1, r5
   36b38:	4812      	ldr	r0, [pc, #72]	; (36b84 <z_impl_k_mutex_unlock+0x12c>)
   36b3a:	f000 fecd 	bl	378d8 <z_reschedule>
   36b3e:	e7cd      	b.n	36adc <z_impl_k_mutex_unlock+0x84>
		mutex->lock_count = 0U;
   36b40:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36b42:	4810      	ldr	r0, [pc, #64]	; (36b84 <z_impl_k_mutex_unlock+0x12c>)
   36b44:	f7ff fd4a 	bl	365dc <z_spin_unlock_valid>
   36b48:	b940      	cbnz	r0, 36b5c <z_impl_k_mutex_unlock+0x104>
   36b4a:	490f      	ldr	r1, [pc, #60]	; (36b88 <z_impl_k_mutex_unlock+0x130>)
   36b4c:	480a      	ldr	r0, [pc, #40]	; (36b78 <z_impl_k_mutex_unlock+0x120>)
   36b4e:	22b9      	movs	r2, #185	; 0xb9
   36b50:	f005 ff74 	bl	3ca3c <assert_print>
   36b54:	21b9      	movs	r1, #185	; 0xb9
   36b56:	480c      	ldr	r0, [pc, #48]	; (36b88 <z_impl_k_mutex_unlock+0x130>)
   36b58:	f005 ff69 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   36b5c:	f385 8811 	msr	BASEPRI, r5
   36b60:	f3bf 8f6f 	isb	sy
   36b64:	e7ba      	b.n	36adc <z_impl_k_mutex_unlock+0x84>
		return -EINVAL;
   36b66:	f06f 0015 	mvn.w	r0, #21
   36b6a:	e7ba      	b.n	36ae2 <z_impl_k_mutex_unlock+0x8a>
		return -EPERM;
   36b6c:	f04f 30ff 	mov.w	r0, #4294967295
   36b70:	e7b7      	b.n	36ae2 <z_impl_k_mutex_unlock+0x8a>
   36b72:	bf00      	nop
   36b74:	0004bab4 	.word	0x0004bab4
   36b78:	00043ff2 	.word	0x00043ff2
   36b7c:	2001a500 	.word	0x2001a500
   36b80:	0004bad6 	.word	0x0004bad6
   36b84:	2001a52c 	.word	0x2001a52c
   36b88:	0004402c 	.word	0x0004402c

00036b8c <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   36b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   36b90:	4604      	mov	r4, r0
   36b92:	460d      	mov	r5, r1
   36b94:	4690      	mov	r8, r2
   36b96:	4699      	mov	r9, r3
   36b98:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   36b9c:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   36ba0:	f04f 0320 	mov.w	r3, #32
   36ba4:	f3ef 8711 	mrs	r7, BASEPRI
   36ba8:	f383 8812 	msr	BASEPRI_MAX, r3
   36bac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36bb0:	4630      	mov	r0, r6
   36bb2:	f7ff fd05 	bl	365c0 <z_spin_lock_valid>
   36bb6:	b940      	cbnz	r0, 36bca <queue_insert+0x3e>
   36bb8:	4937      	ldr	r1, [pc, #220]	; (36c98 <queue_insert+0x10c>)
   36bba:	4838      	ldr	r0, [pc, #224]	; (36c9c <queue_insert+0x110>)
   36bbc:	228e      	movs	r2, #142	; 0x8e
   36bbe:	f005 ff3d 	bl	3ca3c <assert_print>
   36bc2:	218e      	movs	r1, #142	; 0x8e
   36bc4:	4834      	ldr	r0, [pc, #208]	; (36c98 <queue_insert+0x10c>)
   36bc6:	f005 ff32 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   36bca:	4630      	mov	r0, r6
   36bcc:	f7ff fd16 	bl	365fc <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   36bd0:	f1ba 0f00 	cmp.w	sl, #0
   36bd4:	d000      	beq.n	36bd8 <queue_insert+0x4c>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   36bd6:	6865      	ldr	r5, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   36bd8:	f104 000c 	add.w	r0, r4, #12
   36bdc:	f001 fbb0 	bl	38340 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   36be0:	b160      	cbz	r0, 36bfc <queue_insert+0x70>
   36be2:	2400      	movs	r4, #0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   36be4:	f8c0 8014 	str.w	r8, [r0, #20]
   36be8:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
	z_ready_thread(thread);
   36bec:	f001 f8a4 	bl	37d38 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   36bf0:	4630      	mov	r0, r6
   36bf2:	4639      	mov	r1, r7
   36bf4:	f000 fe70 	bl	378d8 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
   36bf8:	2000      	movs	r0, #0
   36bfa:	e019      	b.n	36c30 <queue_insert+0xa4>
	if (alloc) {
   36bfc:	f1b9 0f00 	cmp.w	r9, #0
   36c00:	d028      	beq.n	36c54 <queue_insert+0xc8>
	return z_thread_aligned_alloc(0, size);
   36c02:	2108      	movs	r1, #8
   36c04:	f002 fe52 	bl	398ac <z_thread_aligned_alloc>
		if (anode == NULL) {
   36c08:	b9a0      	cbnz	r0, 36c34 <queue_insert+0xa8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36c0a:	4630      	mov	r0, r6
   36c0c:	f7ff fce6 	bl	365dc <z_spin_unlock_valid>
   36c10:	b940      	cbnz	r0, 36c24 <queue_insert+0x98>
   36c12:	4921      	ldr	r1, [pc, #132]	; (36c98 <queue_insert+0x10c>)
   36c14:	4821      	ldr	r0, [pc, #132]	; (36c9c <queue_insert+0x110>)
   36c16:	22b9      	movs	r2, #185	; 0xb9
   36c18:	f005 ff10 	bl	3ca3c <assert_print>
   36c1c:	21b9      	movs	r1, #185	; 0xb9
   36c1e:	481e      	ldr	r0, [pc, #120]	; (36c98 <queue_insert+0x10c>)
   36c20:	f005 ff05 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   36c24:	f387 8811 	msr	BASEPRI, r7
   36c28:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   36c2c:	f06f 000b 	mvn.w	r0, #11
}
   36c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   36c34:	2301      	movs	r3, #1
		anode->data = data;
   36c36:	f8c0 8004 	str.w	r8, [r0, #4]
   36c3a:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   36c3c:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   36c3e:	f003 0203 	and.w	r2, r3, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   36c42:	b95d      	cbnz	r5, 36c5c <queue_insert+0xd0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   36c44:	6823      	ldr	r3, [r4, #0]
   36c46:	4313      	orrs	r3, r2
   36c48:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   36c4a:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   36c4c:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   36c4e:	b973      	cbnz	r3, 36c6e <queue_insert+0xe2>
	list->tail = node;
   36c50:	6060      	str	r0, [r4, #4]
}
   36c52:	e00c      	b.n	36c6e <queue_insert+0xe2>
}
   36c54:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   36c56:	f8c8 9000 	str.w	r9, [r8]
}
   36c5a:	e7ef      	b.n	36c3c <queue_insert+0xb0>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   36c5c:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   36c5e:	f033 0303 	bics.w	r3, r3, #3
   36c62:	d110      	bne.n	36c86 <queue_insert+0xfa>
	parent->next_and_flags = cur_flags | (unative_t)child;
   36c64:	6002      	str	r2, [r0, #0]
	return list->tail;
   36c66:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   36c68:	b93a      	cbnz	r2, 36c7a <queue_insert+0xee>
	list->head = node;
   36c6a:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   36c6e:	2104      	movs	r1, #4
   36c70:	f104 0014 	add.w	r0, r4, #20
   36c74:	f00a fae5 	bl	41242 <z_handle_obj_poll_events>
   36c78:	e7ba      	b.n	36bf0 <queue_insert+0x64>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   36c7a:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   36c7c:	f003 0303 	and.w	r3, r3, #3
   36c80:	4303      	orrs	r3, r0
   36c82:	6013      	str	r3, [r2, #0]
   36c84:	e7e4      	b.n	36c50 <queue_insert+0xc4>
   36c86:	4313      	orrs	r3, r2
   36c88:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   36c8a:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   36c8c:	f003 0303 	and.w	r3, r3, #3
   36c90:	4303      	orrs	r3, r0
   36c92:	602b      	str	r3, [r5, #0]
}
   36c94:	e7eb      	b.n	36c6e <queue_insert+0xe2>
   36c96:	bf00      	nop
   36c98:	0004402c 	.word	0x0004402c
   36c9c:	00043ff2 	.word	0x00043ff2

00036ca0 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   36ca0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   36ca4:	4605      	mov	r5, r0
   36ca6:	4690      	mov	r8, r2
   36ca8:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   36caa:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   36cae:	f04f 0320 	mov.w	r3, #32
   36cb2:	f3ef 8911 	mrs	r9, BASEPRI
   36cb6:	f383 8812 	msr	BASEPRI_MAX, r3
   36cba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36cbe:	4630      	mov	r0, r6
   36cc0:	f7ff fc7e 	bl	365c0 <z_spin_lock_valid>
   36cc4:	b940      	cbnz	r0, 36cd8 <z_impl_k_queue_get+0x38>
   36cc6:	4921      	ldr	r1, [pc, #132]	; (36d4c <z_impl_k_queue_get+0xac>)
   36cc8:	4821      	ldr	r0, [pc, #132]	; (36d50 <z_impl_k_queue_get+0xb0>)
   36cca:	228e      	movs	r2, #142	; 0x8e
   36ccc:	f005 feb6 	bl	3ca3c <assert_print>
   36cd0:	218e      	movs	r1, #142	; 0x8e
   36cd2:	481e      	ldr	r0, [pc, #120]	; (36d4c <z_impl_k_queue_get+0xac>)
   36cd4:	f005 feab 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   36cd8:	4630      	mov	r0, r6
   36cda:	f7ff fc8f 	bl	365fc <z_spin_lock_set_owner>
	return list->head;
   36cde:	682c      	ldr	r4, [r5, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   36ce0:	b314      	cbz	r4, 36d28 <z_impl_k_queue_get+0x88>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   36ce2:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   36ce4:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   36ce6:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   36cea:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   36cec:	4620      	mov	r0, r4
   36cee:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   36cf2:	602b      	str	r3, [r5, #0]
	list->tail = node;
   36cf4:	bf08      	it	eq
   36cf6:	606b      	streq	r3, [r5, #4]
   36cf8:	f00a f931 	bl	40f5e <z_queue_node_peek>
   36cfc:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36cfe:	4630      	mov	r0, r6
   36d00:	f7ff fc6c 	bl	365dc <z_spin_unlock_valid>
   36d04:	b940      	cbnz	r0, 36d18 <z_impl_k_queue_get+0x78>
   36d06:	4911      	ldr	r1, [pc, #68]	; (36d4c <z_impl_k_queue_get+0xac>)
   36d08:	4811      	ldr	r0, [pc, #68]	; (36d50 <z_impl_k_queue_get+0xb0>)
   36d0a:	22b9      	movs	r2, #185	; 0xb9
   36d0c:	f005 fe96 	bl	3ca3c <assert_print>
   36d10:	21b9      	movs	r1, #185	; 0xb9
   36d12:	480e      	ldr	r0, [pc, #56]	; (36d4c <z_impl_k_queue_get+0xac>)
   36d14:	f005 fe8b 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   36d18:	f389 8811 	msr	BASEPRI, r9
   36d1c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   36d20:	4620      	mov	r0, r4
   36d22:	b003      	add	sp, #12
   36d24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   36d28:	ea58 0307 	orrs.w	r3, r8, r7
   36d2c:	d0e7      	beq.n	36cfe <z_impl_k_queue_get+0x5e>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   36d2e:	4649      	mov	r1, r9
   36d30:	4630      	mov	r0, r6
   36d32:	e9cd 8700 	strd	r8, r7, [sp]
   36d36:	f105 020c 	add.w	r2, r5, #12
   36d3a:	f001 f9a5 	bl	38088 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   36d3e:	2800      	cmp	r0, #0
   36d40:	d1ee      	bne.n	36d20 <z_impl_k_queue_get+0x80>
   36d42:	4b04      	ldr	r3, [pc, #16]	; (36d54 <z_impl_k_queue_get+0xb4>)
   36d44:	689b      	ldr	r3, [r3, #8]
   36d46:	695c      	ldr	r4, [r3, #20]
   36d48:	e7ea      	b.n	36d20 <z_impl_k_queue_get+0x80>
   36d4a:	bf00      	nop
   36d4c:	0004402c 	.word	0x0004402c
   36d50:	00043ff2 	.word	0x00043ff2
   36d54:	2001a500 	.word	0x2001a500

00036d58 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   36d58:	b538      	push	{r3, r4, r5, lr}
   36d5a:	4604      	mov	r4, r0
	__asm__ volatile(
   36d5c:	f04f 0320 	mov.w	r3, #32
   36d60:	f3ef 8511 	mrs	r5, BASEPRI
   36d64:	f383 8812 	msr	BASEPRI_MAX, r3
   36d68:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36d6c:	4815      	ldr	r0, [pc, #84]	; (36dc4 <z_impl_k_sem_give+0x6c>)
   36d6e:	f7ff fc27 	bl	365c0 <z_spin_lock_valid>
   36d72:	b940      	cbnz	r0, 36d86 <z_impl_k_sem_give+0x2e>
   36d74:	4914      	ldr	r1, [pc, #80]	; (36dc8 <z_impl_k_sem_give+0x70>)
   36d76:	4815      	ldr	r0, [pc, #84]	; (36dcc <z_impl_k_sem_give+0x74>)
   36d78:	228e      	movs	r2, #142	; 0x8e
   36d7a:	f005 fe5f 	bl	3ca3c <assert_print>
   36d7e:	218e      	movs	r1, #142	; 0x8e
   36d80:	4811      	ldr	r0, [pc, #68]	; (36dc8 <z_impl_k_sem_give+0x70>)
   36d82:	f005 fe54 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   36d86:	480f      	ldr	r0, [pc, #60]	; (36dc4 <z_impl_k_sem_give+0x6c>)
   36d88:	f7ff fc38 	bl	365fc <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   36d8c:	4620      	mov	r0, r4
   36d8e:	f001 fad7 	bl	38340 <z_unpend_first_thread>

	if (thread != NULL) {
   36d92:	b150      	cbz	r0, 36daa <z_impl_k_sem_give+0x52>
   36d94:	2200      	movs	r2, #0
   36d96:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   36d9a:	f000 ffcd 	bl	37d38 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   36d9e:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   36da0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   36da4:	4807      	ldr	r0, [pc, #28]	; (36dc4 <z_impl_k_sem_give+0x6c>)
   36da6:	f000 bd97 	b.w	378d8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   36daa:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   36dae:	429a      	cmp	r2, r3
   36db0:	bf18      	it	ne
   36db2:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   36db4:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   36db6:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   36db8:	f104 0010 	add.w	r0, r4, #16
   36dbc:	f00a fa41 	bl	41242 <z_handle_obj_poll_events>
}
   36dc0:	e7ed      	b.n	36d9e <z_impl_k_sem_give+0x46>
   36dc2:	bf00      	nop
   36dc4:	2001a530 	.word	0x2001a530
   36dc8:	0004402c 	.word	0x0004402c
   36dcc:	00043ff2 	.word	0x00043ff2

00036dd0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   36dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   36dd2:	4604      	mov	r4, r0
   36dd4:	4616      	mov	r6, r2
   36dd6:	461d      	mov	r5, r3
   36dd8:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   36ddc:	b15b      	cbz	r3, 36df6 <z_impl_k_sem_take+0x26>
   36dde:	ea52 0305 	orrs.w	r3, r2, r5
   36de2:	d008      	beq.n	36df6 <z_impl_k_sem_take+0x26>
   36de4:	492b      	ldr	r1, [pc, #172]	; (36e94 <z_impl_k_sem_take+0xc4>)
   36de6:	482c      	ldr	r0, [pc, #176]	; (36e98 <z_impl_k_sem_take+0xc8>)
   36de8:	2279      	movs	r2, #121	; 0x79
   36dea:	f005 fe27 	bl	3ca3c <assert_print>
   36dee:	2179      	movs	r1, #121	; 0x79
   36df0:	4828      	ldr	r0, [pc, #160]	; (36e94 <z_impl_k_sem_take+0xc4>)
   36df2:	f005 fe1c 	bl	3ca2e <assert_post_action>
   36df6:	f04f 0320 	mov.w	r3, #32
   36dfa:	f3ef 8711 	mrs	r7, BASEPRI
   36dfe:	f383 8812 	msr	BASEPRI_MAX, r3
   36e02:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36e06:	4825      	ldr	r0, [pc, #148]	; (36e9c <z_impl_k_sem_take+0xcc>)
   36e08:	f7ff fbda 	bl	365c0 <z_spin_lock_valid>
   36e0c:	b940      	cbnz	r0, 36e20 <z_impl_k_sem_take+0x50>
   36e0e:	4924      	ldr	r1, [pc, #144]	; (36ea0 <z_impl_k_sem_take+0xd0>)
   36e10:	4821      	ldr	r0, [pc, #132]	; (36e98 <z_impl_k_sem_take+0xc8>)
   36e12:	228e      	movs	r2, #142	; 0x8e
   36e14:	f005 fe12 	bl	3ca3c <assert_print>
   36e18:	218e      	movs	r1, #142	; 0x8e
   36e1a:	4821      	ldr	r0, [pc, #132]	; (36ea0 <z_impl_k_sem_take+0xd0>)
   36e1c:	f005 fe07 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   36e20:	481e      	ldr	r0, [pc, #120]	; (36e9c <z_impl_k_sem_take+0xcc>)
   36e22:	f7ff fbeb 	bl	365fc <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   36e26:	68a3      	ldr	r3, [r4, #8]
   36e28:	b1ab      	cbz	r3, 36e56 <z_impl_k_sem_take+0x86>
		sem->count--;
   36e2a:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36e2c:	481b      	ldr	r0, [pc, #108]	; (36e9c <z_impl_k_sem_take+0xcc>)
   36e2e:	60a3      	str	r3, [r4, #8]
   36e30:	f7ff fbd4 	bl	365dc <z_spin_unlock_valid>
   36e34:	b940      	cbnz	r0, 36e48 <z_impl_k_sem_take+0x78>
   36e36:	491a      	ldr	r1, [pc, #104]	; (36ea0 <z_impl_k_sem_take+0xd0>)
   36e38:	4817      	ldr	r0, [pc, #92]	; (36e98 <z_impl_k_sem_take+0xc8>)
   36e3a:	22b9      	movs	r2, #185	; 0xb9
   36e3c:	f005 fdfe 	bl	3ca3c <assert_print>
   36e40:	21b9      	movs	r1, #185	; 0xb9
   36e42:	4817      	ldr	r0, [pc, #92]	; (36ea0 <z_impl_k_sem_take+0xd0>)
   36e44:	f005 fdf3 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   36e48:	f387 8811 	msr	BASEPRI, r7
   36e4c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   36e50:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   36e52:	b003      	add	sp, #12
   36e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   36e56:	ea56 0305 	orrs.w	r3, r6, r5
   36e5a:	d113      	bne.n	36e84 <z_impl_k_sem_take+0xb4>
   36e5c:	480f      	ldr	r0, [pc, #60]	; (36e9c <z_impl_k_sem_take+0xcc>)
   36e5e:	f7ff fbbd 	bl	365dc <z_spin_unlock_valid>
   36e62:	b940      	cbnz	r0, 36e76 <z_impl_k_sem_take+0xa6>
   36e64:	490e      	ldr	r1, [pc, #56]	; (36ea0 <z_impl_k_sem_take+0xd0>)
   36e66:	480c      	ldr	r0, [pc, #48]	; (36e98 <z_impl_k_sem_take+0xc8>)
   36e68:	22b9      	movs	r2, #185	; 0xb9
   36e6a:	f005 fde7 	bl	3ca3c <assert_print>
   36e6e:	21b9      	movs	r1, #185	; 0xb9
   36e70:	480b      	ldr	r0, [pc, #44]	; (36ea0 <z_impl_k_sem_take+0xd0>)
   36e72:	f005 fddc 	bl	3ca2e <assert_post_action>
   36e76:	f387 8811 	msr	BASEPRI, r7
   36e7a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   36e7e:	f06f 000f 	mvn.w	r0, #15
   36e82:	e7e6      	b.n	36e52 <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   36e84:	4622      	mov	r2, r4
   36e86:	4639      	mov	r1, r7
   36e88:	e9cd 6500 	strd	r6, r5, [sp]
   36e8c:	4803      	ldr	r0, [pc, #12]	; (36e9c <z_impl_k_sem_take+0xcc>)
   36e8e:	f001 f8fb 	bl	38088 <z_pend_curr>
	return ret;
   36e92:	e7de      	b.n	36e52 <z_impl_k_sem_take+0x82>
   36e94:	0004bb01 	.word	0x0004bb01
   36e98:	00043ff2 	.word	0x00043ff2
   36e9c:	2001a530 	.word	0x2001a530
   36ea0:	0004402c 	.word	0x0004402c

00036ea4 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   36ea4:	b570      	push	{r4, r5, r6, lr}
   36ea6:	4604      	mov	r4, r0
	__asm__ volatile(
   36ea8:	f04f 0320 	mov.w	r3, #32
   36eac:	f3ef 8511 	mrs	r5, BASEPRI
   36eb0:	f383 8812 	msr	BASEPRI_MAX, r3
   36eb4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36eb8:	4813      	ldr	r0, [pc, #76]	; (36f08 <z_impl_k_sem_reset+0x64>)
   36eba:	f7ff fb81 	bl	365c0 <z_spin_lock_valid>
   36ebe:	b940      	cbnz	r0, 36ed2 <z_impl_k_sem_reset+0x2e>
   36ec0:	4912      	ldr	r1, [pc, #72]	; (36f0c <z_impl_k_sem_reset+0x68>)
   36ec2:	4813      	ldr	r0, [pc, #76]	; (36f10 <z_impl_k_sem_reset+0x6c>)
   36ec4:	228e      	movs	r2, #142	; 0x8e
   36ec6:	f005 fdb9 	bl	3ca3c <assert_print>
   36eca:	218e      	movs	r1, #142	; 0x8e
   36ecc:	480f      	ldr	r0, [pc, #60]	; (36f0c <z_impl_k_sem_reset+0x68>)
   36ece:	f005 fdae 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   36ed2:	480d      	ldr	r0, [pc, #52]	; (36f08 <z_impl_k_sem_reset+0x64>)
   36ed4:	f7ff fb92 	bl	365fc <z_spin_lock_set_owner>
   36ed8:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   36edc:	4620      	mov	r0, r4
   36ede:	f001 fa2f 	bl	38340 <z_unpend_first_thread>
		if (thread == NULL) {
   36ee2:	b120      	cbz	r0, 36eee <z_impl_k_sem_reset+0x4a>
   36ee4:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   36ee8:	f000 ff26 	bl	37d38 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   36eec:	e7f6      	b.n	36edc <z_impl_k_sem_reset+0x38>
	}
	sem->count = 0;
   36eee:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   36ef0:	2102      	movs	r1, #2
   36ef2:	f104 0010 	add.w	r0, r4, #16
   36ef6:	f00a f9a4 	bl	41242 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   36efa:	4629      	mov	r1, r5
}
   36efc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   36f00:	4801      	ldr	r0, [pc, #4]	; (36f08 <z_impl_k_sem_reset+0x64>)
   36f02:	f000 bce9 	b.w	378d8 <z_reschedule>
   36f06:	bf00      	nop
   36f08:	2001a530 	.word	0x2001a530
   36f0c:	0004402c 	.word	0x0004402c
   36f10:	00043ff2 	.word	0x00043ff2

00036f14 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   36f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36f18:	4604      	mov	r4, r0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36f1a:	4e70      	ldr	r6, [pc, #448]	; (370dc <work_queue_main+0x1c8>)
	return list->head;
   36f1c:	4f70      	ldr	r7, [pc, #448]	; (370e0 <work_queue_main+0x1cc>)
   36f1e:	b085      	sub	sp, #20
   36f20:	f04f 0320 	mov.w	r3, #32
   36f24:	f3ef 8811 	mrs	r8, BASEPRI
   36f28:	f383 8812 	msr	BASEPRI_MAX, r3
   36f2c:	f3bf 8f6f 	isb	sy
   36f30:	4630      	mov	r0, r6
   36f32:	f7ff fb45 	bl	365c0 <z_spin_lock_valid>
   36f36:	b940      	cbnz	r0, 36f4a <work_queue_main+0x36>
   36f38:	496a      	ldr	r1, [pc, #424]	; (370e4 <work_queue_main+0x1d0>)
   36f3a:	486b      	ldr	r0, [pc, #428]	; (370e8 <work_queue_main+0x1d4>)
   36f3c:	228e      	movs	r2, #142	; 0x8e
   36f3e:	f005 fd7d 	bl	3ca3c <assert_print>
   36f42:	218e      	movs	r1, #142	; 0x8e
   36f44:	4867      	ldr	r0, [pc, #412]	; (370e4 <work_queue_main+0x1d0>)
   36f46:	f005 fd72 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   36f4a:	4630      	mov	r0, r6
   36f4c:	f7ff fb56 	bl	365fc <z_spin_lock_set_owner>
   36f50:	f8d4 50d0 	ldr.w	r5, [r4, #208]	; 0xd0
Z_GENLIST_GET(slist, snode)
   36f54:	b9b5      	cbnz	r5, 36f84 <work_queue_main+0x70>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   36f56:	2102      	movs	r1, #2
   36f58:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
   36f5c:	f00a f826 	bl	40fac <flag_test_and_clear>
   36f60:	2800      	cmp	r0, #0
   36f62:	f040 8084 	bne.w	3706e <work_queue_main+0x15a>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   36f66:	2300      	movs	r3, #0
   36f68:	f04f 32ff 	mov.w	r2, #4294967295
   36f6c:	9302      	str	r3, [sp, #8]
   36f6e:	f04f 33ff 	mov.w	r3, #4294967295
   36f72:	4641      	mov	r1, r8
   36f74:	e9cd 2300 	strd	r2, r3, [sp]
   36f78:	4630      	mov	r0, r6
   36f7a:	f104 02d8 	add.w	r2, r4, #216	; 0xd8
   36f7e:	f001 fc49 	bl	38814 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   36f82:	e7cd      	b.n	36f20 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   36f84:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
	return node->next;
   36f88:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   36f8a:	4295      	cmp	r5, r2
	list->head = node;
   36f8c:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   36f90:	d101      	bne.n	36f96 <work_queue_main+0x82>
	list->tail = node;
   36f92:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
	*flagp |= BIT(bit);
   36f96:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36f9a:	4630      	mov	r0, r6
   36f9c:	f043 0302 	orr.w	r3, r3, #2
   36fa0:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
	*flagp &= ~BIT(bit);
   36fa4:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   36fa6:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   36faa:	f023 0304 	bic.w	r3, r3, #4
   36fae:	f043 0301 	orr.w	r3, r3, #1
   36fb2:	60eb      	str	r3, [r5, #12]
   36fb4:	f7ff fb12 	bl	365dc <z_spin_unlock_valid>
   36fb8:	b940      	cbnz	r0, 36fcc <work_queue_main+0xb8>
   36fba:	494a      	ldr	r1, [pc, #296]	; (370e4 <work_queue_main+0x1d0>)
   36fbc:	484a      	ldr	r0, [pc, #296]	; (370e8 <work_queue_main+0x1d4>)
   36fbe:	22b9      	movs	r2, #185	; 0xb9
   36fc0:	f005 fd3c 	bl	3ca3c <assert_print>
   36fc4:	21b9      	movs	r1, #185	; 0xb9
   36fc6:	4847      	ldr	r0, [pc, #284]	; (370e4 <work_queue_main+0x1d0>)
   36fc8:	f005 fd31 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   36fcc:	f388 8811 	msr	BASEPRI, r8
   36fd0:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   36fd4:	f1b9 0f00 	cmp.w	r9, #0
   36fd8:	d10a      	bne.n	36ff0 <work_queue_main+0xdc>
   36fda:	4944      	ldr	r1, [pc, #272]	; (370ec <work_queue_main+0x1d8>)
   36fdc:	4842      	ldr	r0, [pc, #264]	; (370e8 <work_queue_main+0x1d4>)
   36fde:	f44f 7222 	mov.w	r2, #648	; 0x288
   36fe2:	f005 fd2b 	bl	3ca3c <assert_print>
   36fe6:	f44f 7122 	mov.w	r1, #648	; 0x288
   36fea:	4840      	ldr	r0, [pc, #256]	; (370ec <work_queue_main+0x1d8>)
   36fec:	f005 fd1f 	bl	3ca2e <assert_post_action>
		handler(work);
   36ff0:	4628      	mov	r0, r5
   36ff2:	47c8      	blx	r9
	__asm__ volatile(
   36ff4:	f04f 0320 	mov.w	r3, #32
   36ff8:	f3ef 8a11 	mrs	sl, BASEPRI
   36ffc:	f383 8812 	msr	BASEPRI_MAX, r3
   37000:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37004:	4630      	mov	r0, r6
   37006:	f7ff fadb 	bl	365c0 <z_spin_lock_valid>
   3700a:	b940      	cbnz	r0, 3701e <work_queue_main+0x10a>
   3700c:	4935      	ldr	r1, [pc, #212]	; (370e4 <work_queue_main+0x1d0>)
   3700e:	4836      	ldr	r0, [pc, #216]	; (370e8 <work_queue_main+0x1d4>)
   37010:	228e      	movs	r2, #142	; 0x8e
   37012:	f005 fd13 	bl	3ca3c <assert_print>
   37016:	218e      	movs	r1, #142	; 0x8e
   37018:	4832      	ldr	r0, [pc, #200]	; (370e4 <work_queue_main+0x1d0>)
   3701a:	f005 fd08 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   3701e:	4630      	mov	r0, r6
   37020:	f7ff faec 	bl	365fc <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   37024:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   37026:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   37028:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   3702c:	d429      	bmi.n	37082 <work_queue_main+0x16e>
	*flagp &= ~BIT(bit);
   3702e:	60ea      	str	r2, [r5, #12]
   37030:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37034:	4630      	mov	r0, r6
   37036:	f023 0302 	bic.w	r3, r3, #2
   3703a:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
	return (*flagp & BIT(bit)) != 0U;
   3703e:	f3c3 2500 	ubfx	r5, r3, #8, #1
   37042:	f7ff facb 	bl	365dc <z_spin_unlock_valid>
   37046:	b940      	cbnz	r0, 3705a <work_queue_main+0x146>
   37048:	4926      	ldr	r1, [pc, #152]	; (370e4 <work_queue_main+0x1d0>)
   3704a:	4827      	ldr	r0, [pc, #156]	; (370e8 <work_queue_main+0x1d4>)
   3704c:	22b9      	movs	r2, #185	; 0xb9
   3704e:	f005 fcf5 	bl	3ca3c <assert_print>
   37052:	21b9      	movs	r1, #185	; 0xb9
   37054:	4823      	ldr	r0, [pc, #140]	; (370e4 <work_queue_main+0x1d0>)
   37056:	f005 fcea 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   3705a:	f38a 8811 	msr	BASEPRI, sl
   3705e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   37062:	2d00      	cmp	r5, #0
   37064:	f47f af5c 	bne.w	36f20 <work_queue_main+0xc>
	z_impl_k_yield();
   37068:	f001 f9b4 	bl	383d4 <z_impl_k_yield>
}
   3706c:	e758      	b.n	36f20 <work_queue_main+0xc>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   3706e:	f104 05e0 	add.w	r5, r4, #224	; 0xe0
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   37072:	2200      	movs	r2, #0
   37074:	2101      	movs	r1, #1
   37076:	4628      	mov	r0, r5
   37078:	f001 fb84 	bl	38784 <z_sched_wake>
   3707c:	2800      	cmp	r0, #0
   3707e:	d1f8      	bne.n	37072 <work_queue_main+0x15e>
   37080:	e771      	b.n	36f66 <work_queue_main+0x52>
	return list->head;
   37082:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   37084:	f023 0303 	bic.w	r3, r3, #3
   37088:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   3708a:	2800      	cmp	r0, #0
   3708c:	d0d0      	beq.n	37030 <work_queue_main+0x11c>
	return node->next;
   3708e:	f04f 0800 	mov.w	r8, #0
	parent->next = child;
   37092:	46c3      	mov	fp, r8
	return node->next;
   37094:	f8d0 9000 	ldr.w	r9, [r0]
		if (wc->work == work) {
   37098:	6843      	ldr	r3, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   3709a:	4602      	mov	r2, r0
		if (wc->work == work) {
   3709c:	429d      	cmp	r5, r3
   3709e:	d10d      	bne.n	370bc <work_queue_main+0x1a8>
   370a0:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   370a2:	f1b8 0f00 	cmp.w	r8, #0
   370a6:	d111      	bne.n	370cc <work_queue_main+0x1b8>
   370a8:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   370aa:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   370ac:	4283      	cmp	r3, r0
   370ae:	d100      	bne.n	370b2 <work_queue_main+0x19e>
	list->tail = node;
   370b0:	607a      	str	r2, [r7, #4]
	parent->next = child;
   370b2:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   370b6:	f7ff fe4f 	bl	36d58 <z_impl_k_sem_give>
}
   370ba:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   370bc:	f1b9 0f00 	cmp.w	r9, #0
   370c0:	d0b6      	beq.n	37030 <work_queue_main+0x11c>
	return node->next;
   370c2:	4648      	mov	r0, r9
   370c4:	4690      	mov	r8, r2
   370c6:	f8d9 9000 	ldr.w	r9, [r9]
   370ca:	e7e5      	b.n	37098 <work_queue_main+0x184>
	return list->tail;
   370cc:	687b      	ldr	r3, [r7, #4]
	parent->next = child;
   370ce:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   370d2:	4298      	cmp	r0, r3
	list->tail = node;
   370d4:	bf08      	it	eq
   370d6:	f8c7 8004 	streq.w	r8, [r7, #4]
}
   370da:	e7ea      	b.n	370b2 <work_queue_main+0x19e>
   370dc:	2001a534 	.word	0x2001a534
   370e0:	2001a538 	.word	0x2001a538
   370e4:	0004402c 	.word	0x0004402c
   370e8:	00043ff2 	.word	0x00043ff2
   370ec:	0004bb21 	.word	0x0004bb21

000370f0 <submit_to_queue_locked>:
{
   370f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   370f2:	68c3      	ldr	r3, [r0, #12]
{
   370f4:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   370f6:	079a      	lsls	r2, r3, #30
{
   370f8:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   370fa:	f3c3 0540 	ubfx	r5, r3, #1, #1
   370fe:	d42a      	bmi.n	37156 <submit_to_queue_locked+0x66>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   37100:	075f      	lsls	r7, r3, #29
   37102:	d42a      	bmi.n	3715a <submit_to_queue_locked+0x6a>
		if (*queuep == NULL) {
   37104:	680a      	ldr	r2, [r1, #0]
   37106:	b90a      	cbnz	r2, 3710c <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   37108:	6882      	ldr	r2, [r0, #8]
   3710a:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   3710c:	07d8      	lsls	r0, r3, #31
   3710e:	d527      	bpl.n	37160 <submit_to_queue_locked+0x70>
			__ASSERT_NO_MSG(work->queue != NULL);
   37110:	68a3      	ldr	r3, [r4, #8]
   37112:	b953      	cbnz	r3, 3712a <submit_to_queue_locked+0x3a>
   37114:	4923      	ldr	r1, [pc, #140]	; (371a4 <submit_to_queue_locked+0xb4>)
   37116:	4824      	ldr	r0, [pc, #144]	; (371a8 <submit_to_queue_locked+0xb8>)
   37118:	f44f 72a7 	mov.w	r2, #334	; 0x14e
   3711c:	f005 fc8e 	bl	3ca3c <assert_print>
   37120:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   37124:	481f      	ldr	r0, [pc, #124]	; (371a4 <submit_to_queue_locked+0xb4>)
   37126:	f005 fc82 	bl	3ca2e <assert_post_action>
			ret = 2;
   3712a:	2502      	movs	r5, #2
			*queuep = work->queue;
   3712c:	68a3      	ldr	r3, [r4, #8]
   3712e:	6033      	str	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   37130:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
   37132:	b38f      	cbz	r7, 37198 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   37134:	4b1d      	ldr	r3, [pc, #116]	; (371ac <submit_to_queue_locked+0xbc>)
   37136:	689b      	ldr	r3, [r3, #8]
   37138:	42bb      	cmp	r3, r7
   3713a:	d113      	bne.n	37164 <submit_to_queue_locked+0x74>
   3713c:	f009 feec 	bl	40f18 <k_is_in_isr>
   37140:	f080 0001 	eor.w	r0, r0, #1
   37144:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   37146:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   3714a:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   3714c:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   37150:	d525      	bpl.n	3719e <submit_to_queue_locked+0xae>
	} else if (draining && !chained) {
   37152:	b14a      	cbz	r2, 37168 <submit_to_queue_locked+0x78>
   37154:	b950      	cbnz	r0, 3716c <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   37156:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   3715a:	2300      	movs	r3, #0
   3715c:	6033      	str	r3, [r6, #0]
	return ret;
   3715e:	e015      	b.n	3718c <submit_to_queue_locked+0x9c>
		ret = 1;
   37160:	2501      	movs	r5, #1
   37162:	e7e5      	b.n	37130 <submit_to_queue_locked+0x40>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   37164:	2000      	movs	r0, #0
   37166:	e7ee      	b.n	37146 <submit_to_queue_locked+0x56>
	} else if (plugged && !draining) {
   37168:	071b      	lsls	r3, r3, #28
   3716a:	d4f4      	bmi.n	37156 <submit_to_queue_locked+0x66>
	parent->next = child;
   3716c:	2300      	movs	r3, #0
   3716e:	6023      	str	r3, [r4, #0]
	return list->tail;
   37170:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
Z_GENLIST_APPEND(slist, snode)
   37174:	b963      	cbnz	r3, 37190 <submit_to_queue_locked+0xa0>
	list->head = node;
   37176:	e9c7 4434 	strd	r4, r4, [r7, #208]	; 0xd0
		(void)notify_queue_locked(queue);
   3717a:	4638      	mov	r0, r7
   3717c:	f009 ff2f 	bl	40fde <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   37180:	68e3      	ldr	r3, [r4, #12]
   37182:	f043 0304 	orr.w	r3, r3, #4
   37186:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   37188:	6833      	ldr	r3, [r6, #0]
   3718a:	60a3      	str	r3, [r4, #8]
}
   3718c:	4628      	mov	r0, r5
   3718e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   37190:	601c      	str	r4, [r3, #0]
	list->tail = node;
   37192:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
}
   37196:	e7f0      	b.n	3717a <submit_to_queue_locked+0x8a>
		return -EINVAL;
   37198:	f06f 0515 	mvn.w	r5, #21
   3719c:	e7dd      	b.n	3715a <submit_to_queue_locked+0x6a>
		ret = -ENODEV;
   3719e:	f06f 0512 	mvn.w	r5, #18
   371a2:	e7da      	b.n	3715a <submit_to_queue_locked+0x6a>
   371a4:	0004bb21 	.word	0x0004bb21
   371a8:	00043ff2 	.word	0x00043ff2
   371ac:	2001a500 	.word	0x2001a500

000371b0 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   371b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   371b2:	4604      	mov	r4, r0
	__asm__ volatile(
   371b4:	f04f 0320 	mov.w	r3, #32
   371b8:	f3ef 8511 	mrs	r5, BASEPRI
   371bc:	f383 8812 	msr	BASEPRI_MAX, r3
   371c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   371c4:	4818      	ldr	r0, [pc, #96]	; (37228 <work_timeout+0x78>)
   371c6:	f7ff f9fb 	bl	365c0 <z_spin_lock_valid>
   371ca:	b940      	cbnz	r0, 371de <work_timeout+0x2e>
   371cc:	4917      	ldr	r1, [pc, #92]	; (3722c <work_timeout+0x7c>)
   371ce:	4818      	ldr	r0, [pc, #96]	; (37230 <work_timeout+0x80>)
   371d0:	228e      	movs	r2, #142	; 0x8e
   371d2:	f005 fc33 	bl	3ca3c <assert_print>
   371d6:	218e      	movs	r1, #142	; 0x8e
   371d8:	4814      	ldr	r0, [pc, #80]	; (3722c <work_timeout+0x7c>)
   371da:	f005 fc28 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   371de:	4812      	ldr	r0, [pc, #72]	; (37228 <work_timeout+0x78>)
   371e0:	f7ff fa0c 	bl	365fc <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   371e4:	2300      	movs	r3, #0
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   371e6:	2103      	movs	r1, #3
   371e8:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
   371ea:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   371ec:	f1a4 0610 	sub.w	r6, r4, #16
   371f0:	f009 fedc 	bl	40fac <flag_test_and_clear>
   371f4:	b128      	cbz	r0, 37202 <work_timeout+0x52>
		queue = dw->queue;
   371f6:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   371f8:	4630      	mov	r0, r6
   371fa:	a901      	add	r1, sp, #4
		queue = dw->queue;
   371fc:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   371fe:	f7ff ff77 	bl	370f0 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37202:	4809      	ldr	r0, [pc, #36]	; (37228 <work_timeout+0x78>)
   37204:	f7ff f9ea 	bl	365dc <z_spin_unlock_valid>
   37208:	b940      	cbnz	r0, 3721c <work_timeout+0x6c>
   3720a:	4908      	ldr	r1, [pc, #32]	; (3722c <work_timeout+0x7c>)
   3720c:	4808      	ldr	r0, [pc, #32]	; (37230 <work_timeout+0x80>)
   3720e:	22b9      	movs	r2, #185	; 0xb9
   37210:	f005 fc14 	bl	3ca3c <assert_print>
   37214:	21b9      	movs	r1, #185	; 0xb9
   37216:	4805      	ldr	r0, [pc, #20]	; (3722c <work_timeout+0x7c>)
   37218:	f005 fc09 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   3721c:	f385 8811 	msr	BASEPRI, r5
   37220:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   37224:	b002      	add	sp, #8
   37226:	bd70      	pop	{r4, r5, r6, pc}
   37228:	2001a534 	.word	0x2001a534
   3722c:	0004402c 	.word	0x0004402c
   37230:	00043ff2 	.word	0x00043ff2

00037234 <k_work_init>:
{
   37234:	b538      	push	{r3, r4, r5, lr}
   37236:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   37238:	4604      	mov	r4, r0
   3723a:	b940      	cbnz	r0, 3724e <k_work_init+0x1a>
   3723c:	490c      	ldr	r1, [pc, #48]	; (37270 <k_work_init+0x3c>)
   3723e:	480d      	ldr	r0, [pc, #52]	; (37274 <k_work_init+0x40>)
   37240:	2289      	movs	r2, #137	; 0x89
   37242:	f005 fbfb 	bl	3ca3c <assert_print>
   37246:	2189      	movs	r1, #137	; 0x89
   37248:	4809      	ldr	r0, [pc, #36]	; (37270 <k_work_init+0x3c>)
   3724a:	f005 fbf0 	bl	3ca2e <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   3724e:	b945      	cbnz	r5, 37262 <k_work_init+0x2e>
   37250:	4907      	ldr	r1, [pc, #28]	; (37270 <k_work_init+0x3c>)
   37252:	4808      	ldr	r0, [pc, #32]	; (37274 <k_work_init+0x40>)
   37254:	228a      	movs	r2, #138	; 0x8a
   37256:	f005 fbf1 	bl	3ca3c <assert_print>
   3725a:	218a      	movs	r1, #138	; 0x8a
   3725c:	4804      	ldr	r0, [pc, #16]	; (37270 <k_work_init+0x3c>)
   3725e:	f005 fbe6 	bl	3ca2e <assert_post_action>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   37262:	2210      	movs	r2, #16
   37264:	2100      	movs	r1, #0
   37266:	4620      	mov	r0, r4
   37268:	f00a f8bc 	bl	413e4 <memset>
   3726c:	6065      	str	r5, [r4, #4]
}
   3726e:	bd38      	pop	{r3, r4, r5, pc}
   37270:	0004bb21 	.word	0x0004bb21
   37274:	00043ff2 	.word	0x00043ff2

00037278 <k_work_busy_get>:
{
   37278:	b538      	push	{r3, r4, r5, lr}
   3727a:	4604      	mov	r4, r0
	__asm__ volatile(
   3727c:	f04f 0320 	mov.w	r3, #32
   37280:	f3ef 8511 	mrs	r5, BASEPRI
   37284:	f383 8812 	msr	BASEPRI_MAX, r3
   37288:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3728c:	4812      	ldr	r0, [pc, #72]	; (372d8 <k_work_busy_get+0x60>)
   3728e:	f7ff f997 	bl	365c0 <z_spin_lock_valid>
   37292:	b940      	cbnz	r0, 372a6 <k_work_busy_get+0x2e>
   37294:	4911      	ldr	r1, [pc, #68]	; (372dc <k_work_busy_get+0x64>)
   37296:	4812      	ldr	r0, [pc, #72]	; (372e0 <k_work_busy_get+0x68>)
   37298:	228e      	movs	r2, #142	; 0x8e
   3729a:	f005 fbcf 	bl	3ca3c <assert_print>
   3729e:	218e      	movs	r1, #142	; 0x8e
   372a0:	480e      	ldr	r0, [pc, #56]	; (372dc <k_work_busy_get+0x64>)
   372a2:	f005 fbc4 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   372a6:	480c      	ldr	r0, [pc, #48]	; (372d8 <k_work_busy_get+0x60>)
   372a8:	f7ff f9a8 	bl	365fc <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   372ac:	68e4      	ldr	r4, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   372ae:	480a      	ldr	r0, [pc, #40]	; (372d8 <k_work_busy_get+0x60>)
   372b0:	f004 040f 	and.w	r4, r4, #15
   372b4:	f7ff f992 	bl	365dc <z_spin_unlock_valid>
   372b8:	b940      	cbnz	r0, 372cc <k_work_busy_get+0x54>
   372ba:	4908      	ldr	r1, [pc, #32]	; (372dc <k_work_busy_get+0x64>)
   372bc:	4808      	ldr	r0, [pc, #32]	; (372e0 <k_work_busy_get+0x68>)
   372be:	22b9      	movs	r2, #185	; 0xb9
   372c0:	f005 fbbc 	bl	3ca3c <assert_print>
   372c4:	21b9      	movs	r1, #185	; 0xb9
   372c6:	4805      	ldr	r0, [pc, #20]	; (372dc <k_work_busy_get+0x64>)
   372c8:	f005 fbb1 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   372cc:	f385 8811 	msr	BASEPRI, r5
   372d0:	f3bf 8f6f 	isb	sy
}
   372d4:	4620      	mov	r0, r4
   372d6:	bd38      	pop	{r3, r4, r5, pc}
   372d8:	2001a534 	.word	0x2001a534
   372dc:	0004402c 	.word	0x0004402c
   372e0:	00043ff2 	.word	0x00043ff2

000372e4 <k_work_submit_to_queue>:
{
   372e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   372e6:	460c      	mov	r4, r1
{
   372e8:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   372ea:	b951      	cbnz	r1, 37302 <k_work_submit_to_queue+0x1e>
   372ec:	4923      	ldr	r1, [pc, #140]	; (3737c <k_work_submit_to_queue+0x98>)
   372ee:	4824      	ldr	r0, [pc, #144]	; (37380 <k_work_submit_to_queue+0x9c>)
   372f0:	f240 1269 	movw	r2, #361	; 0x169
   372f4:	f005 fba2 	bl	3ca3c <assert_print>
   372f8:	f240 1169 	movw	r1, #361	; 0x169
   372fc:	481f      	ldr	r0, [pc, #124]	; (3737c <k_work_submit_to_queue+0x98>)
   372fe:	f005 fb96 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   37302:	f04f 0320 	mov.w	r3, #32
   37306:	f3ef 8511 	mrs	r5, BASEPRI
   3730a:	f383 8812 	msr	BASEPRI_MAX, r3
   3730e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37312:	481c      	ldr	r0, [pc, #112]	; (37384 <k_work_submit_to_queue+0xa0>)
   37314:	f7ff f954 	bl	365c0 <z_spin_lock_valid>
   37318:	b940      	cbnz	r0, 3732c <k_work_submit_to_queue+0x48>
   3731a:	491b      	ldr	r1, [pc, #108]	; (37388 <k_work_submit_to_queue+0xa4>)
   3731c:	4818      	ldr	r0, [pc, #96]	; (37380 <k_work_submit_to_queue+0x9c>)
   3731e:	228e      	movs	r2, #142	; 0x8e
   37320:	f005 fb8c 	bl	3ca3c <assert_print>
   37324:	218e      	movs	r1, #142	; 0x8e
   37326:	4818      	ldr	r0, [pc, #96]	; (37388 <k_work_submit_to_queue+0xa4>)
   37328:	f005 fb81 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   3732c:	4815      	ldr	r0, [pc, #84]	; (37384 <k_work_submit_to_queue+0xa0>)
   3732e:	f7ff f965 	bl	365fc <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   37332:	4620      	mov	r0, r4
   37334:	a901      	add	r1, sp, #4
   37336:	f7ff fedb 	bl	370f0 <submit_to_queue_locked>
   3733a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3733c:	4811      	ldr	r0, [pc, #68]	; (37384 <k_work_submit_to_queue+0xa0>)
   3733e:	f7ff f94d 	bl	365dc <z_spin_unlock_valid>
   37342:	b940      	cbnz	r0, 37356 <k_work_submit_to_queue+0x72>
   37344:	4910      	ldr	r1, [pc, #64]	; (37388 <k_work_submit_to_queue+0xa4>)
   37346:	480e      	ldr	r0, [pc, #56]	; (37380 <k_work_submit_to_queue+0x9c>)
   37348:	22b9      	movs	r2, #185	; 0xb9
   3734a:	f005 fb77 	bl	3ca3c <assert_print>
   3734e:	21b9      	movs	r1, #185	; 0xb9
   37350:	480d      	ldr	r0, [pc, #52]	; (37388 <k_work_submit_to_queue+0xa4>)
   37352:	f005 fb6c 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   37356:	f385 8811 	msr	BASEPRI, r5
   3735a:	f3bf 8f6f 	isb	sy
	if (ret > 0) {
   3735e:	2c00      	cmp	r4, #0
   37360:	dd09      	ble.n	37376 <k_work_submit_to_queue+0x92>
	__asm__ volatile(
   37362:	f04f 0320 	mov.w	r3, #32
   37366:	f3ef 8011 	mrs	r0, BASEPRI
   3736a:	f383 8812 	msr	BASEPRI_MAX, r3
   3736e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   37372:	f009 fe77 	bl	41064 <z_reschedule_irqlock>
}
   37376:	4620      	mov	r0, r4
   37378:	b003      	add	sp, #12
   3737a:	bd30      	pop	{r4, r5, pc}
   3737c:	0004bb21 	.word	0x0004bb21
   37380:	00043ff2 	.word	0x00043ff2
   37384:	2001a534 	.word	0x2001a534
   37388:	0004402c 	.word	0x0004402c

0003738c <k_work_submit>:
{
   3738c:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   3738e:	4801      	ldr	r0, [pc, #4]	; (37394 <k_work_submit+0x8>)
   37390:	f7ff bfa8 	b.w	372e4 <k_work_submit_to_queue>
   37394:	20018fa8 	.word	0x20018fa8

00037398 <k_work_cancel>:
{
   37398:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   3739a:	4604      	mov	r4, r0
   3739c:	b950      	cbnz	r0, 373b4 <k_work_cancel+0x1c>
   3739e:	4924      	ldr	r1, [pc, #144]	; (37430 <k_work_cancel+0x98>)
   373a0:	4824      	ldr	r0, [pc, #144]	; (37434 <k_work_cancel+0x9c>)
   373a2:	f240 220e 	movw	r2, #526	; 0x20e
   373a6:	f005 fb49 	bl	3ca3c <assert_print>
   373aa:	f240 210e 	movw	r1, #526	; 0x20e
   373ae:	4820      	ldr	r0, [pc, #128]	; (37430 <k_work_cancel+0x98>)
   373b0:	f005 fb3d 	bl	3ca2e <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
   373b4:	68e3      	ldr	r3, [r4, #12]
	__ASSERT_NO_MSG(!flag_test(&work->flags, K_WORK_DELAYABLE_BIT));
   373b6:	05db      	lsls	r3, r3, #23
   373b8:	d50a      	bpl.n	373d0 <k_work_cancel+0x38>
   373ba:	491d      	ldr	r1, [pc, #116]	; (37430 <k_work_cancel+0x98>)
   373bc:	481d      	ldr	r0, [pc, #116]	; (37434 <k_work_cancel+0x9c>)
   373be:	f240 220f 	movw	r2, #527	; 0x20f
   373c2:	f005 fb3b 	bl	3ca3c <assert_print>
   373c6:	f240 210f 	movw	r1, #527	; 0x20f
   373ca:	4819      	ldr	r0, [pc, #100]	; (37430 <k_work_cancel+0x98>)
   373cc:	f005 fb2f 	bl	3ca2e <assert_post_action>
   373d0:	f04f 0320 	mov.w	r3, #32
   373d4:	f3ef 8511 	mrs	r5, BASEPRI
   373d8:	f383 8812 	msr	BASEPRI_MAX, r3
   373dc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   373e0:	4815      	ldr	r0, [pc, #84]	; (37438 <k_work_cancel+0xa0>)
   373e2:	f7ff f8ed 	bl	365c0 <z_spin_lock_valid>
   373e6:	b940      	cbnz	r0, 373fa <k_work_cancel+0x62>
   373e8:	4914      	ldr	r1, [pc, #80]	; (3743c <k_work_cancel+0xa4>)
   373ea:	4812      	ldr	r0, [pc, #72]	; (37434 <k_work_cancel+0x9c>)
   373ec:	228e      	movs	r2, #142	; 0x8e
   373ee:	f005 fb25 	bl	3ca3c <assert_print>
   373f2:	218e      	movs	r1, #142	; 0x8e
   373f4:	4811      	ldr	r0, [pc, #68]	; (3743c <k_work_cancel+0xa4>)
   373f6:	f005 fb1a 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   373fa:	480f      	ldr	r0, [pc, #60]	; (37438 <k_work_cancel+0xa0>)
   373fc:	f7ff f8fe 	bl	365fc <z_spin_lock_set_owner>
	int ret = cancel_async_locked(work);
   37400:	4620      	mov	r0, r4
   37402:	f009 fdf3 	bl	40fec <cancel_async_locked>
   37406:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37408:	480b      	ldr	r0, [pc, #44]	; (37438 <k_work_cancel+0xa0>)
   3740a:	f7ff f8e7 	bl	365dc <z_spin_unlock_valid>
   3740e:	b940      	cbnz	r0, 37422 <k_work_cancel+0x8a>
   37410:	490a      	ldr	r1, [pc, #40]	; (3743c <k_work_cancel+0xa4>)
   37412:	4808      	ldr	r0, [pc, #32]	; (37434 <k_work_cancel+0x9c>)
   37414:	22b9      	movs	r2, #185	; 0xb9
   37416:	f005 fb11 	bl	3ca3c <assert_print>
   3741a:	21b9      	movs	r1, #185	; 0xb9
   3741c:	4807      	ldr	r0, [pc, #28]	; (3743c <k_work_cancel+0xa4>)
   3741e:	f005 fb06 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   37422:	f385 8811 	msr	BASEPRI, r5
   37426:	f3bf 8f6f 	isb	sy
}
   3742a:	4620      	mov	r0, r4
   3742c:	bd38      	pop	{r3, r4, r5, pc}
   3742e:	bf00      	nop
   37430:	0004bb21 	.word	0x0004bb21
   37434:	00043ff2 	.word	0x00043ff2
   37438:	2001a534 	.word	0x2001a534
   3743c:	0004402c 	.word	0x0004402c

00037440 <k_work_queue_start>:
{
   37440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   37444:	b088      	sub	sp, #32
   37446:	460e      	mov	r6, r1
   37448:	4617      	mov	r7, r2
   3744a:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(queue);
   3744c:	4604      	mov	r4, r0
{
   3744e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   37450:	b950      	cbnz	r0, 37468 <k_work_queue_start+0x28>
   37452:	492d      	ldr	r1, [pc, #180]	; (37508 <k_work_queue_start+0xc8>)
   37454:	482d      	ldr	r0, [pc, #180]	; (3750c <k_work_queue_start+0xcc>)
   37456:	f240 22b5 	movw	r2, #693	; 0x2b5
   3745a:	f005 faef 	bl	3ca3c <assert_print>
   3745e:	f240 21b5 	movw	r1, #693	; 0x2b5
   37462:	4829      	ldr	r0, [pc, #164]	; (37508 <k_work_queue_start+0xc8>)
   37464:	f005 fae3 	bl	3ca2e <assert_post_action>
	__ASSERT_NO_MSG(stack);
   37468:	b956      	cbnz	r6, 37480 <k_work_queue_start+0x40>
   3746a:	4927      	ldr	r1, [pc, #156]	; (37508 <k_work_queue_start+0xc8>)
   3746c:	4827      	ldr	r0, [pc, #156]	; (3750c <k_work_queue_start+0xcc>)
   3746e:	f240 22b6 	movw	r2, #694	; 0x2b6
   37472:	f005 fae3 	bl	3ca3c <assert_print>
   37476:	f240 21b6 	movw	r1, #694	; 0x2b6
   3747a:	4823      	ldr	r0, [pc, #140]	; (37508 <k_work_queue_start+0xc8>)
   3747c:	f005 fad7 	bl	3ca2e <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
   37480:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   37484:	07db      	lsls	r3, r3, #31
   37486:	d50a      	bpl.n	3749e <k_work_queue_start+0x5e>
   37488:	491f      	ldr	r1, [pc, #124]	; (37508 <k_work_queue_start+0xc8>)
   3748a:	4820      	ldr	r0, [pc, #128]	; (3750c <k_work_queue_start+0xcc>)
   3748c:	f240 22b7 	movw	r2, #695	; 0x2b7
   37490:	f005 fad4 	bl	3ca3c <assert_print>
   37494:	f240 21b7 	movw	r1, #695	; 0x2b7
   37498:	481b      	ldr	r0, [pc, #108]	; (37508 <k_work_queue_start+0xc8>)
   3749a:	f005 fac8 	bl	3ca2e <assert_post_action>
	list->head = NULL;
   3749e:	2300      	movs	r3, #0
	list->tail = NULL;
   374a0:	e9c4 3334 	strd	r3, r3, [r4, #208]	; 0xd0
   374a4:	f104 03d8 	add.w	r3, r4, #216	; 0xd8
	list->tail = (sys_dnode_t *)list;
   374a8:	e9c4 3336 	strd	r3, r3, [r4, #216]	; 0xd8
   374ac:	f104 03e0 	add.w	r3, r4, #224	; 0xe0
   374b0:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
	if ((cfg != NULL) && cfg->no_yield) {
   374b4:	b32d      	cbz	r5, 37502 <k_work_queue_start+0xc2>
   374b6:	792b      	ldrb	r3, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   374b8:	f240 1101 	movw	r1, #257	; 0x101
   374bc:	2b00      	cmp	r3, #0
   374be:	bf08      	it	eq
   374c0:	2101      	moveq	r1, #1
	*flagp = flags;
   374c2:	f8c4 10e8 	str.w	r1, [r4, #232]	; 0xe8
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   374c6:	f04f 32ff 	mov.w	r2, #4294967295
   374ca:	f04f 33ff 	mov.w	r3, #4294967295
   374ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
   374d2:	2200      	movs	r2, #0
   374d4:	4631      	mov	r1, r6
   374d6:	e9cd 8203 	strd	r8, r2, [sp, #12]
   374da:	e9cd 2201 	strd	r2, r2, [sp, #4]
   374de:	4620      	mov	r0, r4
   374e0:	463a      	mov	r2, r7
   374e2:	4b0b      	ldr	r3, [pc, #44]	; (37510 <k_work_queue_start+0xd0>)
   374e4:	9400      	str	r4, [sp, #0]
   374e6:	f7fe ffa7 	bl	36438 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   374ea:	b125      	cbz	r5, 374f6 <k_work_queue_start+0xb6>
   374ec:	6829      	ldr	r1, [r5, #0]
   374ee:	b111      	cbz	r1, 374f6 <k_work_queue_start+0xb6>
	return z_impl_k_thread_name_set(thread, str);
   374f0:	4620      	mov	r0, r4
   374f2:	f009 fd17 	bl	40f24 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   374f6:	4620      	mov	r0, r4
}
   374f8:	b008      	add	sp, #32
   374fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   374fe:	f009 bd16 	b.w	40f2e <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   37502:	2101      	movs	r1, #1
   37504:	e7dd      	b.n	374c2 <k_work_queue_start+0x82>
   37506:	bf00      	nop
   37508:	0004bb21 	.word	0x0004bb21
   3750c:	00043ff2 	.word	0x00043ff2
   37510:	00036f15 	.word	0x00036f15

00037514 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   37514:	b538      	push	{r3, r4, r5, lr}
   37516:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   37518:	4604      	mov	r4, r0
   3751a:	b950      	cbnz	r0, 37532 <k_work_init_delayable+0x1e>
   3751c:	4910      	ldr	r1, [pc, #64]	; (37560 <k_work_init_delayable+0x4c>)
   3751e:	4811      	ldr	r0, [pc, #68]	; (37564 <k_work_init_delayable+0x50>)
   37520:	f240 322d 	movw	r2, #813	; 0x32d
   37524:	f005 fa8a 	bl	3ca3c <assert_print>
   37528:	f240 312d 	movw	r1, #813	; 0x32d
   3752c:	480c      	ldr	r0, [pc, #48]	; (37560 <k_work_init_delayable+0x4c>)
   3752e:	f005 fa7e 	bl	3ca2e <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   37532:	b955      	cbnz	r5, 3754a <k_work_init_delayable+0x36>
   37534:	490a      	ldr	r1, [pc, #40]	; (37560 <k_work_init_delayable+0x4c>)
   37536:	480b      	ldr	r0, [pc, #44]	; (37564 <k_work_init_delayable+0x50>)
   37538:	f240 322e 	movw	r2, #814	; 0x32e
   3753c:	f005 fa7e 	bl	3ca3c <assert_print>
   37540:	f240 312e 	movw	r1, #814	; 0x32e
   37544:	4806      	ldr	r0, [pc, #24]	; (37560 <k_work_init_delayable+0x4c>)
   37546:	f005 fa72 	bl	3ca2e <assert_post_action>

	*dwork = (struct k_work_delayable){
   3754a:	2230      	movs	r2, #48	; 0x30
   3754c:	2100      	movs	r1, #0
   3754e:	4620      	mov	r0, r4
   37550:	f009 ff48 	bl	413e4 <memset>
   37554:	f44f 7380 	mov.w	r3, #256	; 0x100
   37558:	6065      	str	r5, [r4, #4]
   3755a:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   3755c:	bd38      	pop	{r3, r4, r5, pc}
   3755e:	bf00      	nop
   37560:	0004bb21 	.word	0x0004bb21
   37564:	00043ff2 	.word	0x00043ff2

00037568 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   37568:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3756a:	4616      	mov	r6, r2
   3756c:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   3756e:	460c      	mov	r4, r1
{
   37570:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   37572:	b951      	cbnz	r1, 3758a <k_work_schedule_for_queue+0x22>
   37574:	4929      	ldr	r1, [pc, #164]	; (3761c <k_work_schedule_for_queue+0xb4>)
   37576:	482a      	ldr	r0, [pc, #168]	; (37620 <k_work_schedule_for_queue+0xb8>)
   37578:	f44f 7269 	mov.w	r2, #932	; 0x3a4
   3757c:	f005 fa5e 	bl	3ca3c <assert_print>
   37580:	f44f 7169 	mov.w	r1, #932	; 0x3a4
   37584:	4825      	ldr	r0, [pc, #148]	; (3761c <k_work_schedule_for_queue+0xb4>)
   37586:	f005 fa52 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   3758a:	f04f 0320 	mov.w	r3, #32
   3758e:	f3ef 8711 	mrs	r7, BASEPRI
   37592:	f383 8812 	msr	BASEPRI_MAX, r3
   37596:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3759a:	4822      	ldr	r0, [pc, #136]	; (37624 <k_work_schedule_for_queue+0xbc>)
   3759c:	f7ff f810 	bl	365c0 <z_spin_lock_valid>
   375a0:	b940      	cbnz	r0, 375b4 <k_work_schedule_for_queue+0x4c>
   375a2:	4921      	ldr	r1, [pc, #132]	; (37628 <k_work_schedule_for_queue+0xc0>)
   375a4:	481e      	ldr	r0, [pc, #120]	; (37620 <k_work_schedule_for_queue+0xb8>)
   375a6:	228e      	movs	r2, #142	; 0x8e
   375a8:	f005 fa48 	bl	3ca3c <assert_print>
   375ac:	218e      	movs	r1, #142	; 0x8e
   375ae:	481e      	ldr	r0, [pc, #120]	; (37628 <k_work_schedule_for_queue+0xc0>)
   375b0:	f005 fa3d 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   375b4:	481b      	ldr	r0, [pc, #108]	; (37624 <k_work_schedule_for_queue+0xbc>)
   375b6:	f7ff f821 	bl	365fc <z_spin_lock_set_owner>
	return *flagp;
   375ba:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   375bc:	f013 0f0e 	tst.w	r3, #14
   375c0:	d129      	bne.n	37616 <k_work_schedule_for_queue+0xae>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   375c2:	ea55 0206 	orrs.w	r2, r5, r6
   375c6:	d118      	bne.n	375fa <k_work_schedule_for_queue+0x92>
		return submit_to_queue_locked(work, queuep);
   375c8:	4620      	mov	r0, r4
   375ca:	a901      	add	r1, sp, #4
   375cc:	f7ff fd90 	bl	370f0 <submit_to_queue_locked>
   375d0:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   375d2:	4814      	ldr	r0, [pc, #80]	; (37624 <k_work_schedule_for_queue+0xbc>)
   375d4:	f7ff f802 	bl	365dc <z_spin_unlock_valid>
   375d8:	b940      	cbnz	r0, 375ec <k_work_schedule_for_queue+0x84>
   375da:	4913      	ldr	r1, [pc, #76]	; (37628 <k_work_schedule_for_queue+0xc0>)
   375dc:	4810      	ldr	r0, [pc, #64]	; (37620 <k_work_schedule_for_queue+0xb8>)
   375de:	22b9      	movs	r2, #185	; 0xb9
   375e0:	f005 fa2c 	bl	3ca3c <assert_print>
   375e4:	21b9      	movs	r1, #185	; 0xb9
   375e6:	4810      	ldr	r0, [pc, #64]	; (37628 <k_work_schedule_for_queue+0xc0>)
   375e8:	f005 fa21 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   375ec:	f387 8811 	msr	BASEPRI, r7
   375f0:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   375f4:	4620      	mov	r0, r4
   375f6:	b003      	add	sp, #12
   375f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   375fa:	f043 0308 	orr.w	r3, r3, #8
   375fe:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   37600:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   37602:	f104 0010 	add.w	r0, r4, #16
	dwork->queue = *queuep;
   37606:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   37608:	4632      	mov	r2, r6
   3760a:	462b      	mov	r3, r5
   3760c:	4907      	ldr	r1, [pc, #28]	; (3762c <k_work_schedule_for_queue+0xc4>)
   3760e:	f001 f99d 	bl	3894c <z_add_timeout>
	return ret;
   37612:	2401      	movs	r4, #1
   37614:	e7dd      	b.n	375d2 <k_work_schedule_for_queue+0x6a>
	int ret = 0;
   37616:	2400      	movs	r4, #0
   37618:	e7db      	b.n	375d2 <k_work_schedule_for_queue+0x6a>
   3761a:	bf00      	nop
   3761c:	0004bb21 	.word	0x0004bb21
   37620:	00043ff2 	.word	0x00043ff2
   37624:	2001a534 	.word	0x2001a534
   37628:	0004402c 	.word	0x0004402c
   3762c:	000371b1 	.word	0x000371b1

00037630 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   37630:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   37632:	4801      	ldr	r0, [pc, #4]	; (37638 <k_work_schedule+0x8>)
   37634:	f7ff bf98 	b.w	37568 <k_work_schedule_for_queue>
   37638:	20018fa8 	.word	0x20018fa8

0003763c <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   3763c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3763e:	4616      	mov	r6, r2
   37640:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   37642:	460c      	mov	r4, r1
{
   37644:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   37646:	b951      	cbnz	r1, 3765e <k_work_reschedule_for_queue+0x22>
   37648:	4928      	ldr	r1, [pc, #160]	; (376ec <k_work_reschedule_for_queue+0xb0>)
   3764a:	4829      	ldr	r0, [pc, #164]	; (376f0 <k_work_reschedule_for_queue+0xb4>)
   3764c:	f44f 7272 	mov.w	r2, #968	; 0x3c8
   37650:	f005 f9f4 	bl	3ca3c <assert_print>
   37654:	f44f 7172 	mov.w	r1, #968	; 0x3c8
   37658:	4824      	ldr	r0, [pc, #144]	; (376ec <k_work_reschedule_for_queue+0xb0>)
   3765a:	f005 f9e8 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   3765e:	f04f 0320 	mov.w	r3, #32
   37662:	f3ef 8711 	mrs	r7, BASEPRI
   37666:	f383 8812 	msr	BASEPRI_MAX, r3
   3766a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3766e:	4821      	ldr	r0, [pc, #132]	; (376f4 <k_work_reschedule_for_queue+0xb8>)
   37670:	f7fe ffa6 	bl	365c0 <z_spin_lock_valid>
   37674:	b940      	cbnz	r0, 37688 <k_work_reschedule_for_queue+0x4c>
   37676:	4920      	ldr	r1, [pc, #128]	; (376f8 <k_work_reschedule_for_queue+0xbc>)
   37678:	481d      	ldr	r0, [pc, #116]	; (376f0 <k_work_reschedule_for_queue+0xb4>)
   3767a:	228e      	movs	r2, #142	; 0x8e
   3767c:	f005 f9de 	bl	3ca3c <assert_print>
   37680:	218e      	movs	r1, #142	; 0x8e
   37682:	481d      	ldr	r0, [pc, #116]	; (376f8 <k_work_reschedule_for_queue+0xbc>)
   37684:	f005 f9d3 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   37688:	481a      	ldr	r0, [pc, #104]	; (376f4 <k_work_reschedule_for_queue+0xb8>)
   3768a:	f7fe ffb7 	bl	365fc <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   3768e:	4620      	mov	r0, r4
   37690:	f009 fc97 	bl	40fc2 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   37694:	ea55 0306 	orrs.w	r3, r5, r6
   37698:	d118      	bne.n	376cc <k_work_reschedule_for_queue+0x90>
		return submit_to_queue_locked(work, queuep);
   3769a:	4620      	mov	r0, r4
   3769c:	a901      	add	r1, sp, #4
   3769e:	f7ff fd27 	bl	370f0 <submit_to_queue_locked>
   376a2:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   376a4:	4813      	ldr	r0, [pc, #76]	; (376f4 <k_work_reschedule_for_queue+0xb8>)
   376a6:	f7fe ff99 	bl	365dc <z_spin_unlock_valid>
   376aa:	b940      	cbnz	r0, 376be <k_work_reschedule_for_queue+0x82>
   376ac:	4912      	ldr	r1, [pc, #72]	; (376f8 <k_work_reschedule_for_queue+0xbc>)
   376ae:	4810      	ldr	r0, [pc, #64]	; (376f0 <k_work_reschedule_for_queue+0xb4>)
   376b0:	22b9      	movs	r2, #185	; 0xb9
   376b2:	f005 f9c3 	bl	3ca3c <assert_print>
   376b6:	21b9      	movs	r1, #185	; 0xb9
   376b8:	480f      	ldr	r0, [pc, #60]	; (376f8 <k_work_reschedule_for_queue+0xbc>)
   376ba:	f005 f9b8 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   376be:	f387 8811 	msr	BASEPRI, r7
   376c2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   376c6:	4620      	mov	r0, r4
   376c8:	b003      	add	sp, #12
   376ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   376cc:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   376ce:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   376d2:	f043 0308 	orr.w	r3, r3, #8
   376d6:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   376d8:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   376da:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   376dc:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   376de:	4907      	ldr	r1, [pc, #28]	; (376fc <k_work_reschedule_for_queue+0xc0>)
   376e0:	462b      	mov	r3, r5
   376e2:	f001 f933 	bl	3894c <z_add_timeout>
	return ret;
   376e6:	2401      	movs	r4, #1
   376e8:	e7dc      	b.n	376a4 <k_work_reschedule_for_queue+0x68>
   376ea:	bf00      	nop
   376ec:	0004bb21 	.word	0x0004bb21
   376f0:	00043ff2 	.word	0x00043ff2
   376f4:	2001a534 	.word	0x2001a534
   376f8:	0004402c 	.word	0x0004402c
   376fc:	000371b1 	.word	0x000371b1

00037700 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   37700:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   37702:	4801      	ldr	r0, [pc, #4]	; (37708 <k_work_reschedule+0x8>)
   37704:	f7ff bf9a 	b.w	3763c <k_work_reschedule_for_queue>
   37708:	20018fa8 	.word	0x20018fa8

0003770c <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   3770c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   3770e:	4604      	mov	r4, r0
   37710:	b950      	cbnz	r0, 37728 <k_work_cancel_delayable+0x1c>
   37712:	491e      	ldr	r1, [pc, #120]	; (3778c <k_work_cancel_delayable+0x80>)
   37714:	481e      	ldr	r0, [pc, #120]	; (37790 <k_work_cancel_delayable+0x84>)
   37716:	f240 32ea 	movw	r2, #1002	; 0x3ea
   3771a:	f005 f98f 	bl	3ca3c <assert_print>
   3771e:	f240 31ea 	movw	r1, #1002	; 0x3ea
   37722:	481a      	ldr	r0, [pc, #104]	; (3778c <k_work_cancel_delayable+0x80>)
   37724:	f005 f983 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   37728:	f04f 0320 	mov.w	r3, #32
   3772c:	f3ef 8511 	mrs	r5, BASEPRI
   37730:	f383 8812 	msr	BASEPRI_MAX, r3
   37734:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37738:	4816      	ldr	r0, [pc, #88]	; (37794 <k_work_cancel_delayable+0x88>)
   3773a:	f7fe ff41 	bl	365c0 <z_spin_lock_valid>
   3773e:	b940      	cbnz	r0, 37752 <k_work_cancel_delayable+0x46>
   37740:	4915      	ldr	r1, [pc, #84]	; (37798 <k_work_cancel_delayable+0x8c>)
   37742:	4813      	ldr	r0, [pc, #76]	; (37790 <k_work_cancel_delayable+0x84>)
   37744:	228e      	movs	r2, #142	; 0x8e
   37746:	f005 f979 	bl	3ca3c <assert_print>
   3774a:	218e      	movs	r1, #142	; 0x8e
   3774c:	4812      	ldr	r0, [pc, #72]	; (37798 <k_work_cancel_delayable+0x8c>)
   3774e:	f005 f96e 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   37752:	4810      	ldr	r0, [pc, #64]	; (37794 <k_work_cancel_delayable+0x88>)
   37754:	f7fe ff52 	bl	365fc <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   37758:	4620      	mov	r0, r4
   3775a:	f009 fc32 	bl	40fc2 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   3775e:	4620      	mov	r0, r4
   37760:	f009 fc44 	bl	40fec <cancel_async_locked>
   37764:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37766:	480b      	ldr	r0, [pc, #44]	; (37794 <k_work_cancel_delayable+0x88>)
   37768:	f7fe ff38 	bl	365dc <z_spin_unlock_valid>
   3776c:	b940      	cbnz	r0, 37780 <k_work_cancel_delayable+0x74>
   3776e:	490a      	ldr	r1, [pc, #40]	; (37798 <k_work_cancel_delayable+0x8c>)
   37770:	4807      	ldr	r0, [pc, #28]	; (37790 <k_work_cancel_delayable+0x84>)
   37772:	22b9      	movs	r2, #185	; 0xb9
   37774:	f005 f962 	bl	3ca3c <assert_print>
   37778:	21b9      	movs	r1, #185	; 0xb9
   3777a:	4807      	ldr	r0, [pc, #28]	; (37798 <k_work_cancel_delayable+0x8c>)
   3777c:	f005 f957 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   37780:	f385 8811 	msr	BASEPRI, r5
   37784:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   37788:	4620      	mov	r0, r4
   3778a:	bd38      	pop	{r3, r4, r5, pc}
   3778c:	0004bb21 	.word	0x0004bb21
   37790:	00043ff2 	.word	0x00043ff2
   37794:	2001a534 	.word	0x2001a534
   37798:	0004402c 	.word	0x0004402c

0003779c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   3779c:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   3779e:	4d07      	ldr	r5, [pc, #28]	; (377bc <z_reset_time_slice+0x20>)
   377a0:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   377a2:	b154      	cbz	r4, 377ba <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   377a4:	f7ed fed4 	bl	25550 <sys_clock_elapsed>
   377a8:	4b05      	ldr	r3, [pc, #20]	; (377c0 <z_reset_time_slice+0x24>)
   377aa:	4420      	add	r0, r4
   377ac:	6118      	str	r0, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   377ae:	2100      	movs	r1, #0
   377b0:	6828      	ldr	r0, [r5, #0]
	}
}
   377b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   377b6:	f001 ba23 	b.w	38c00 <z_set_timeout_expiry>
}
   377ba:	bd38      	pop	{r3, r4, r5, pc}
   377bc:	2001a54c 	.word	0x2001a54c
   377c0:	2001a500 	.word	0x2001a500

000377c4 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   377c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   377c6:	4604      	mov	r4, r0
   377c8:	460d      	mov	r5, r1
	__asm__ volatile(
   377ca:	f04f 0320 	mov.w	r3, #32
   377ce:	f3ef 8711 	mrs	r7, BASEPRI
   377d2:	f383 8812 	msr	BASEPRI_MAX, r3
   377d6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   377da:	481e      	ldr	r0, [pc, #120]	; (37854 <k_sched_time_slice_set+0x90>)
   377dc:	f7fe fef0 	bl	365c0 <z_spin_lock_valid>
   377e0:	b940      	cbnz	r0, 377f4 <k_sched_time_slice_set+0x30>
   377e2:	491d      	ldr	r1, [pc, #116]	; (37858 <k_sched_time_slice_set+0x94>)
   377e4:	481d      	ldr	r0, [pc, #116]	; (3785c <k_sched_time_slice_set+0x98>)
   377e6:	228e      	movs	r2, #142	; 0x8e
   377e8:	f005 f928 	bl	3ca3c <assert_print>
   377ec:	218e      	movs	r1, #142	; 0x8e
   377ee:	481a      	ldr	r0, [pc, #104]	; (37858 <k_sched_time_slice_set+0x94>)
   377f0:	f005 f91d 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   377f4:	4817      	ldr	r0, [pc, #92]	; (37854 <k_sched_time_slice_set+0x90>)
   377f6:	f7fe ff01 	bl	365fc <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   377fa:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   377fc:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   37800:	f240 30e7 	movw	r0, #999	; 0x3e7
   37804:	4e16      	ldr	r6, [pc, #88]	; (37860 <k_sched_time_slice_set+0x9c>)
   37806:	2300      	movs	r3, #0
   37808:	6131      	str	r1, [r6, #16]
   3780a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3780e:	fbe4 010c 	umlal	r0, r1, r4, ip
   37812:	f7e5 fb69 	bl	1cee8 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   37816:	2c00      	cmp	r4, #0
   37818:	4b12      	ldr	r3, [pc, #72]	; (37864 <k_sched_time_slice_set+0xa0>)
   3781a:	dc17      	bgt.n	3784c <k_sched_time_slice_set+0x88>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
   3781c:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   3781e:	4b12      	ldr	r3, [pc, #72]	; (37868 <k_sched_time_slice_set+0xa4>)
		z_reset_time_slice(_current);
   37820:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
   37822:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
   37824:	f7ff ffba 	bl	3779c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37828:	480a      	ldr	r0, [pc, #40]	; (37854 <k_sched_time_slice_set+0x90>)
   3782a:	f7fe fed7 	bl	365dc <z_spin_unlock_valid>
   3782e:	b940      	cbnz	r0, 37842 <k_sched_time_slice_set+0x7e>
   37830:	4909      	ldr	r1, [pc, #36]	; (37858 <k_sched_time_slice_set+0x94>)
   37832:	480a      	ldr	r0, [pc, #40]	; (3785c <k_sched_time_slice_set+0x98>)
   37834:	22b9      	movs	r2, #185	; 0xb9
   37836:	f005 f901 	bl	3ca3c <assert_print>
   3783a:	21b9      	movs	r1, #185	; 0xb9
   3783c:	4806      	ldr	r0, [pc, #24]	; (37858 <k_sched_time_slice_set+0x94>)
   3783e:	f005 f8f6 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   37842:	f387 8811 	msr	BASEPRI, r7
   37846:	f3bf 8f6f 	isb	sy
	}
}
   3784a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
   3784c:	2802      	cmp	r0, #2
   3784e:	bfb8      	it	lt
   37850:	2002      	movlt	r0, #2
   37852:	e7e3      	b.n	3781c <k_sched_time_slice_set+0x58>
   37854:	2001a544 	.word	0x2001a544
   37858:	0004402c 	.word	0x0004402c
   3785c:	00043ff2 	.word	0x00043ff2
   37860:	2001a500 	.word	0x2001a500
   37864:	2001a54c 	.word	0x2001a54c
   37868:	2001a548 	.word	0x2001a548

0003786c <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   3786c:	b538      	push	{r3, r4, r5, lr}
   3786e:	4604      	mov	r4, r0
	__asm__ volatile(
   37870:	f04f 0320 	mov.w	r3, #32
   37874:	f3ef 8511 	mrs	r5, BASEPRI
   37878:	f383 8812 	msr	BASEPRI_MAX, r3
   3787c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37880:	4812      	ldr	r0, [pc, #72]	; (378cc <z_unpend_thread_no_timeout+0x60>)
   37882:	f7fe fe9d 	bl	365c0 <z_spin_lock_valid>
   37886:	b940      	cbnz	r0, 3789a <z_unpend_thread_no_timeout+0x2e>
   37888:	4911      	ldr	r1, [pc, #68]	; (378d0 <z_unpend_thread_no_timeout+0x64>)
   3788a:	4812      	ldr	r0, [pc, #72]	; (378d4 <z_unpend_thread_no_timeout+0x68>)
   3788c:	228e      	movs	r2, #142	; 0x8e
   3788e:	f005 f8d5 	bl	3ca3c <assert_print>
   37892:	218e      	movs	r1, #142	; 0x8e
   37894:	480e      	ldr	r0, [pc, #56]	; (378d0 <z_unpend_thread_no_timeout+0x64>)
   37896:	f005 f8ca 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   3789a:	480c      	ldr	r0, [pc, #48]	; (378cc <z_unpend_thread_no_timeout+0x60>)
   3789c:	f7fe feae 	bl	365fc <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   378a0:	4620      	mov	r0, r4
   378a2:	f000 f8c1 	bl	37a28 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   378a6:	4809      	ldr	r0, [pc, #36]	; (378cc <z_unpend_thread_no_timeout+0x60>)
   378a8:	f7fe fe98 	bl	365dc <z_spin_unlock_valid>
   378ac:	b940      	cbnz	r0, 378c0 <z_unpend_thread_no_timeout+0x54>
   378ae:	4908      	ldr	r1, [pc, #32]	; (378d0 <z_unpend_thread_no_timeout+0x64>)
   378b0:	4808      	ldr	r0, [pc, #32]	; (378d4 <z_unpend_thread_no_timeout+0x68>)
   378b2:	22b9      	movs	r2, #185	; 0xb9
   378b4:	f005 f8c2 	bl	3ca3c <assert_print>
   378b8:	21b9      	movs	r1, #185	; 0xb9
   378ba:	4805      	ldr	r0, [pc, #20]	; (378d0 <z_unpend_thread_no_timeout+0x64>)
   378bc:	f005 f8b7 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   378c0:	f385 8811 	msr	BASEPRI, r5
   378c4:	f3bf 8f6f 	isb	sy
	}
}
   378c8:	bd38      	pop	{r3, r4, r5, pc}
   378ca:	bf00      	nop
   378cc:	2001a544 	.word	0x2001a544
   378d0:	0004402c 	.word	0x0004402c
   378d4:	00043ff2 	.word	0x00043ff2

000378d8 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   378d8:	b510      	push	{r4, lr}
   378da:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   378dc:	460c      	mov	r4, r1
   378de:	b9c1      	cbnz	r1, 37912 <z_reschedule+0x3a>
   378e0:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key.key) && need_swap()) {
   378e4:	b9aa      	cbnz	r2, 37912 <z_reschedule+0x3a>
	new_thread = _kernel.ready_q.cache;
   378e6:	4a14      	ldr	r2, [pc, #80]	; (37938 <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
   378e8:	69d1      	ldr	r1, [r2, #28]
   378ea:	6892      	ldr	r2, [r2, #8]
   378ec:	4291      	cmp	r1, r2
   378ee:	d010      	beq.n	37912 <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   378f0:	f7fe fe74 	bl	365dc <z_spin_unlock_valid>
   378f4:	b940      	cbnz	r0, 37908 <z_reschedule+0x30>
   378f6:	4911      	ldr	r1, [pc, #68]	; (3793c <z_reschedule+0x64>)
   378f8:	4811      	ldr	r0, [pc, #68]	; (37940 <z_reschedule+0x68>)
   378fa:	22d0      	movs	r2, #208	; 0xd0
   378fc:	f005 f89e 	bl	3ca3c <assert_print>
   37900:	21d0      	movs	r1, #208	; 0xd0
   37902:	480e      	ldr	r0, [pc, #56]	; (3793c <z_reschedule+0x64>)
   37904:	f005 f893 	bl	3ca2e <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   37908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   3790c:	2000      	movs	r0, #0
   3790e:	f7eb b9a9 	b.w	22c64 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37912:	4618      	mov	r0, r3
   37914:	f7fe fe62 	bl	365dc <z_spin_unlock_valid>
   37918:	b940      	cbnz	r0, 3792c <z_reschedule+0x54>
   3791a:	4908      	ldr	r1, [pc, #32]	; (3793c <z_reschedule+0x64>)
   3791c:	4808      	ldr	r0, [pc, #32]	; (37940 <z_reschedule+0x68>)
   3791e:	22b9      	movs	r2, #185	; 0xb9
   37920:	f005 f88c 	bl	3ca3c <assert_print>
   37924:	21b9      	movs	r1, #185	; 0xb9
   37926:	4805      	ldr	r0, [pc, #20]	; (3793c <z_reschedule+0x64>)
   37928:	f005 f881 	bl	3ca2e <assert_post_action>
   3792c:	f384 8811 	msr	BASEPRI, r4
   37930:	f3bf 8f6f 	isb	sy
   37934:	bd10      	pop	{r4, pc}
   37936:	bf00      	nop
   37938:	2001a500 	.word	0x2001a500
   3793c:	0004402c 	.word	0x0004402c
   37940:	00043ff2 	.word	0x00043ff2

00037944 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   37944:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   37946:	f04f 0320 	mov.w	r3, #32
   3794a:	f3ef 8511 	mrs	r5, BASEPRI
   3794e:	f383 8812 	msr	BASEPRI_MAX, r3
   37952:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37956:	4820      	ldr	r0, [pc, #128]	; (379d8 <k_sched_lock+0x94>)
   37958:	f7fe fe32 	bl	365c0 <z_spin_lock_valid>
   3795c:	b940      	cbnz	r0, 37970 <k_sched_lock+0x2c>
   3795e:	491f      	ldr	r1, [pc, #124]	; (379dc <k_sched_lock+0x98>)
   37960:	481f      	ldr	r0, [pc, #124]	; (379e0 <k_sched_lock+0x9c>)
   37962:	228e      	movs	r2, #142	; 0x8e
   37964:	f005 f86a 	bl	3ca3c <assert_print>
   37968:	218e      	movs	r1, #142	; 0x8e
   3796a:	481c      	ldr	r0, [pc, #112]	; (379dc <k_sched_lock+0x98>)
   3796c:	f005 f85f 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   37970:	4819      	ldr	r0, [pc, #100]	; (379d8 <k_sched_lock+0x94>)
   37972:	f7fe fe43 	bl	365fc <z_spin_lock_set_owner>
   37976:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   3797a:	b143      	cbz	r3, 3798e <k_sched_lock+0x4a>
   3797c:	4919      	ldr	r1, [pc, #100]	; (379e4 <k_sched_lock+0xa0>)
   3797e:	4818      	ldr	r0, [pc, #96]	; (379e0 <k_sched_lock+0x9c>)
   37980:	22fd      	movs	r2, #253	; 0xfd
   37982:	f005 f85b 	bl	3ca3c <assert_print>
   37986:	21fd      	movs	r1, #253	; 0xfd
   37988:	4816      	ldr	r0, [pc, #88]	; (379e4 <k_sched_lock+0xa0>)
   3798a:	f005 f850 	bl	3ca2e <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   3798e:	4c16      	ldr	r4, [pc, #88]	; (379e8 <k_sched_lock+0xa4>)
   37990:	68a3      	ldr	r3, [r4, #8]
   37992:	7bdb      	ldrb	r3, [r3, #15]
   37994:	2b01      	cmp	r3, #1
   37996:	d108      	bne.n	379aa <k_sched_lock+0x66>
   37998:	4912      	ldr	r1, [pc, #72]	; (379e4 <k_sched_lock+0xa0>)
   3799a:	4811      	ldr	r0, [pc, #68]	; (379e0 <k_sched_lock+0x9c>)
   3799c:	22fe      	movs	r2, #254	; 0xfe
   3799e:	f005 f84d 	bl	3ca3c <assert_print>
   379a2:	21fe      	movs	r1, #254	; 0xfe
   379a4:	480f      	ldr	r0, [pc, #60]	; (379e4 <k_sched_lock+0xa0>)
   379a6:	f005 f842 	bl	3ca2e <assert_post_action>
	--_current->base.sched_locked;
   379aa:	68a2      	ldr	r2, [r4, #8]
   379ac:	7bd3      	ldrb	r3, [r2, #15]
   379ae:	3b01      	subs	r3, #1
   379b0:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   379b2:	4809      	ldr	r0, [pc, #36]	; (379d8 <k_sched_lock+0x94>)
   379b4:	f7fe fe12 	bl	365dc <z_spin_unlock_valid>
   379b8:	b940      	cbnz	r0, 379cc <k_sched_lock+0x88>
   379ba:	4908      	ldr	r1, [pc, #32]	; (379dc <k_sched_lock+0x98>)
   379bc:	4808      	ldr	r0, [pc, #32]	; (379e0 <k_sched_lock+0x9c>)
   379be:	22b9      	movs	r2, #185	; 0xb9
   379c0:	f005 f83c 	bl	3ca3c <assert_print>
   379c4:	21b9      	movs	r1, #185	; 0xb9
   379c6:	4805      	ldr	r0, [pc, #20]	; (379dc <k_sched_lock+0x98>)
   379c8:	f005 f831 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   379cc:	f385 8811 	msr	BASEPRI, r5
   379d0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   379d4:	bd38      	pop	{r3, r4, r5, pc}
   379d6:	bf00      	nop
   379d8:	2001a544 	.word	0x2001a544
   379dc:	0004402c 	.word	0x0004402c
   379e0:	00043ff2 	.word	0x00043ff2
   379e4:	0004bad6 	.word	0x0004bad6
   379e8:	2001a500 	.word	0x2001a500

000379ec <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   379ec:	4b0b      	ldr	r3, [pc, #44]	; (37a1c <z_priq_dumb_remove+0x30>)
{
   379ee:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   379f0:	4299      	cmp	r1, r3
{
   379f2:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   379f4:	d10a      	bne.n	37a0c <z_priq_dumb_remove+0x20>
   379f6:	490a      	ldr	r1, [pc, #40]	; (37a20 <z_priq_dumb_remove+0x34>)
   379f8:	480a      	ldr	r0, [pc, #40]	; (37a24 <z_priq_dumb_remove+0x38>)
   379fa:	f240 423d 	movw	r2, #1085	; 0x43d
   379fe:	f005 f81d 	bl	3ca3c <assert_print>
   37a02:	f240 413d 	movw	r1, #1085	; 0x43d
   37a06:	4806      	ldr	r0, [pc, #24]	; (37a20 <z_priq_dumb_remove+0x34>)
   37a08:	f005 f811 	bl	3ca2e <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   37a0c:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
   37a10:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   37a12:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   37a14:	2300      	movs	r3, #0
	node->prev = NULL;
   37a16:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   37a1a:	bd10      	pop	{r4, pc}
   37a1c:	20018e00 	.word	0x20018e00
   37a20:	0004bb42 	.word	0x0004bb42
   37a24:	00043ff2 	.word	0x00043ff2

00037a28 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   37a28:	6883      	ldr	r3, [r0, #8]
{
   37a2a:	b510      	push	{r4, lr}
   37a2c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   37a2e:	b953      	cbnz	r3, 37a46 <unpend_thread_no_timeout+0x1e>
   37a30:	490a      	ldr	r1, [pc, #40]	; (37a5c <unpend_thread_no_timeout+0x34>)
   37a32:	480b      	ldr	r0, [pc, #44]	; (37a60 <unpend_thread_no_timeout+0x38>)
   37a34:	f240 22b9 	movw	r2, #697	; 0x2b9
   37a38:	f005 f800 	bl	3ca3c <assert_print>
   37a3c:	f240 21b9 	movw	r1, #697	; 0x2b9
   37a40:	4806      	ldr	r0, [pc, #24]	; (37a5c <unpend_thread_no_timeout+0x34>)
   37a42:	f004 fff4 	bl	3ca2e <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   37a46:	4621      	mov	r1, r4
   37a48:	68a0      	ldr	r0, [r4, #8]
   37a4a:	f7ff ffcf 	bl	379ec <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   37a4e:	7b63      	ldrb	r3, [r4, #13]
   37a50:	f023 0302 	bic.w	r3, r3, #2
   37a54:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   37a56:	2300      	movs	r3, #0
   37a58:	60a3      	str	r3, [r4, #8]
}
   37a5a:	bd10      	pop	{r4, pc}
   37a5c:	0004bb42 	.word	0x0004bb42
   37a60:	00043ff2 	.word	0x00043ff2

00037a64 <z_unpend_thread>:
{
   37a64:	b538      	push	{r3, r4, r5, lr}
   37a66:	4604      	mov	r4, r0
	__asm__ volatile(
   37a68:	f04f 0320 	mov.w	r3, #32
   37a6c:	f3ef 8511 	mrs	r5, BASEPRI
   37a70:	f383 8812 	msr	BASEPRI_MAX, r3
   37a74:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37a78:	4814      	ldr	r0, [pc, #80]	; (37acc <z_unpend_thread+0x68>)
   37a7a:	f7fe fda1 	bl	365c0 <z_spin_lock_valid>
   37a7e:	b940      	cbnz	r0, 37a92 <z_unpend_thread+0x2e>
   37a80:	4913      	ldr	r1, [pc, #76]	; (37ad0 <z_unpend_thread+0x6c>)
   37a82:	4814      	ldr	r0, [pc, #80]	; (37ad4 <z_unpend_thread+0x70>)
   37a84:	228e      	movs	r2, #142	; 0x8e
   37a86:	f004 ffd9 	bl	3ca3c <assert_print>
   37a8a:	218e      	movs	r1, #142	; 0x8e
   37a8c:	4810      	ldr	r0, [pc, #64]	; (37ad0 <z_unpend_thread+0x6c>)
   37a8e:	f004 ffce 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   37a92:	480e      	ldr	r0, [pc, #56]	; (37acc <z_unpend_thread+0x68>)
   37a94:	f7fe fdb2 	bl	365fc <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   37a98:	4620      	mov	r0, r4
   37a9a:	f7ff ffc5 	bl	37a28 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37a9e:	480b      	ldr	r0, [pc, #44]	; (37acc <z_unpend_thread+0x68>)
   37aa0:	f7fe fd9c 	bl	365dc <z_spin_unlock_valid>
   37aa4:	b940      	cbnz	r0, 37ab8 <z_unpend_thread+0x54>
   37aa6:	490a      	ldr	r1, [pc, #40]	; (37ad0 <z_unpend_thread+0x6c>)
   37aa8:	480a      	ldr	r0, [pc, #40]	; (37ad4 <z_unpend_thread+0x70>)
   37aaa:	22b9      	movs	r2, #185	; 0xb9
   37aac:	f004 ffc6 	bl	3ca3c <assert_print>
   37ab0:	21b9      	movs	r1, #185	; 0xb9
   37ab2:	4807      	ldr	r0, [pc, #28]	; (37ad0 <z_unpend_thread+0x6c>)
   37ab4:	f004 ffbb 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   37ab8:	f385 8811 	msr	BASEPRI, r5
   37abc:	f3bf 8f6f 	isb	sy
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   37ac0:	f104 0018 	add.w	r0, r4, #24
}
   37ac4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   37ac8:	f000 bfee 	b.w	38aa8 <z_abort_timeout>
   37acc:	2001a544 	.word	0x2001a544
   37ad0:	0004402c 	.word	0x0004402c
   37ad4:	00043ff2 	.word	0x00043ff2

00037ad8 <update_cache>:
{
   37ad8:	b538      	push	{r3, r4, r5, lr}
   37ada:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   37adc:	4812      	ldr	r0, [pc, #72]	; (37b28 <update_cache+0x50>)
   37ade:	f009 fad7 	bl	41090 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   37ae2:	4d12      	ldr	r5, [pc, #72]	; (37b2c <update_cache+0x54>)
   37ae4:	4604      	mov	r4, r0
   37ae6:	b900      	cbnz	r0, 37aea <update_cache+0x12>
   37ae8:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   37aea:	b9aa      	cbnz	r2, 37b18 <update_cache+0x40>
	__ASSERT(_current != NULL, "");
   37aec:	68ab      	ldr	r3, [r5, #8]
   37aee:	b943      	cbnz	r3, 37b02 <update_cache+0x2a>
   37af0:	490f      	ldr	r1, [pc, #60]	; (37b30 <update_cache+0x58>)
   37af2:	4810      	ldr	r0, [pc, #64]	; (37b34 <update_cache+0x5c>)
   37af4:	2289      	movs	r2, #137	; 0x89
   37af6:	f004 ffa1 	bl	3ca3c <assert_print>
   37afa:	2189      	movs	r1, #137	; 0x89
   37afc:	480c      	ldr	r0, [pc, #48]	; (37b30 <update_cache+0x58>)
   37afe:	f004 ff96 	bl	3ca2e <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   37b02:	68ab      	ldr	r3, [r5, #8]
   37b04:	7b5a      	ldrb	r2, [r3, #13]
   37b06:	06d2      	lsls	r2, r2, #27
   37b08:	d106      	bne.n	37b18 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   37b0a:	69a2      	ldr	r2, [r4, #24]
   37b0c:	b922      	cbnz	r2, 37b18 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   37b0e:	89da      	ldrh	r2, [r3, #14]
   37b10:	2a7f      	cmp	r2, #127	; 0x7f
   37b12:	d901      	bls.n	37b18 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   37b14:	61eb      	str	r3, [r5, #28]
}
   37b16:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   37b18:	68ab      	ldr	r3, [r5, #8]
   37b1a:	42a3      	cmp	r3, r4
   37b1c:	d002      	beq.n	37b24 <update_cache+0x4c>
			z_reset_time_slice(thread);
   37b1e:	4620      	mov	r0, r4
   37b20:	f7ff fe3c 	bl	3779c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   37b24:	61ec      	str	r4, [r5, #28]
}
   37b26:	e7f6      	b.n	37b16 <update_cache+0x3e>
   37b28:	2001a520 	.word	0x2001a520
   37b2c:	2001a500 	.word	0x2001a500
   37b30:	0004bb42 	.word	0x0004bb42
   37b34:	00043ff2 	.word	0x00043ff2

00037b38 <move_thread_to_end_of_prio_q>:
{
   37b38:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   37b3a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   37b3e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   37b40:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   37b42:	7b43      	ldrb	r3, [r0, #13]
   37b44:	da06      	bge.n	37b54 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   37b46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   37b4a:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   37b4c:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   37b4e:	481d      	ldr	r0, [pc, #116]	; (37bc4 <move_thread_to_end_of_prio_q+0x8c>)
   37b50:	f7ff ff4c 	bl	379ec <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   37b54:	7b63      	ldrb	r3, [r4, #13]
   37b56:	f063 037f 	orn	r3, r3, #127	; 0x7f
   37b5a:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   37b5c:	4b1a      	ldr	r3, [pc, #104]	; (37bc8 <move_thread_to_end_of_prio_q+0x90>)
   37b5e:	429c      	cmp	r4, r3
   37b60:	d108      	bne.n	37b74 <move_thread_to_end_of_prio_q+0x3c>
   37b62:	491a      	ldr	r1, [pc, #104]	; (37bcc <move_thread_to_end_of_prio_q+0x94>)
   37b64:	481a      	ldr	r0, [pc, #104]	; (37bd0 <move_thread_to_end_of_prio_q+0x98>)
   37b66:	22ba      	movs	r2, #186	; 0xba
   37b68:	f004 ff68 	bl	3ca3c <assert_print>
   37b6c:	21ba      	movs	r1, #186	; 0xba
   37b6e:	4817      	ldr	r0, [pc, #92]	; (37bcc <move_thread_to_end_of_prio_q+0x94>)
   37b70:	f004 ff5d 	bl	3ca2e <assert_post_action>
	return list->head == list;
   37b74:	4a17      	ldr	r2, [pc, #92]	; (37bd4 <move_thread_to_end_of_prio_q+0x9c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   37b76:	f102 0520 	add.w	r5, r2, #32
	return (node == list->tail) ? NULL : node->next;
   37b7a:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   37b7e:	42ab      	cmp	r3, r5
   37b80:	d01b      	beq.n	37bba <move_thread_to_end_of_prio_q+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   37b82:	b1d3      	cbz	r3, 37bba <move_thread_to_end_of_prio_q+0x82>
	int32_t b1 = thread_1->base.prio;
   37b84:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   37b88:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   37b8c:	428e      	cmp	r6, r1
   37b8e:	d00f      	beq.n	37bb0 <move_thread_to_end_of_prio_q+0x78>
		return b2 - b1;
   37b90:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   37b92:	2900      	cmp	r1, #0
   37b94:	dd0c      	ble.n	37bb0 <move_thread_to_end_of_prio_q+0x78>
	sys_dnode_t *const prev = successor->prev;
   37b96:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   37b98:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   37b9c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   37b9e:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   37ba0:	6890      	ldr	r0, [r2, #8]
   37ba2:	1b03      	subs	r3, r0, r4
   37ba4:	4258      	negs	r0, r3
   37ba6:	4158      	adcs	r0, r3
}
   37ba8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   37bac:	f7ff bf94 	b.w	37ad8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   37bb0:	4283      	cmp	r3, r0
   37bb2:	d002      	beq.n	37bba <move_thread_to_end_of_prio_q+0x82>
   37bb4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   37bb6:	2b00      	cmp	r3, #0
   37bb8:	d1e6      	bne.n	37b88 <move_thread_to_end_of_prio_q+0x50>
	node->prev = tail;
   37bba:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
   37bbe:	6004      	str	r4, [r0, #0]
	list->tail = node;
   37bc0:	6254      	str	r4, [r2, #36]	; 0x24
}
   37bc2:	e7ed      	b.n	37ba0 <move_thread_to_end_of_prio_q+0x68>
   37bc4:	2001a520 	.word	0x2001a520
   37bc8:	20018e00 	.word	0x20018e00
   37bcc:	0004bb42 	.word	0x0004bb42
   37bd0:	00043ff2 	.word	0x00043ff2
   37bd4:	2001a500 	.word	0x2001a500

00037bd8 <z_time_slice>:
{
   37bd8:	b570      	push	{r4, r5, r6, lr}
   37bda:	4605      	mov	r5, r0
	__asm__ volatile(
   37bdc:	f04f 0320 	mov.w	r3, #32
   37be0:	f3ef 8611 	mrs	r6, BASEPRI
   37be4:	f383 8812 	msr	BASEPRI_MAX, r3
   37be8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37bec:	4825      	ldr	r0, [pc, #148]	; (37c84 <z_time_slice+0xac>)
   37bee:	f7fe fce7 	bl	365c0 <z_spin_lock_valid>
   37bf2:	b940      	cbnz	r0, 37c06 <z_time_slice+0x2e>
   37bf4:	4924      	ldr	r1, [pc, #144]	; (37c88 <z_time_slice+0xb0>)
   37bf6:	4825      	ldr	r0, [pc, #148]	; (37c8c <z_time_slice+0xb4>)
   37bf8:	228e      	movs	r2, #142	; 0x8e
   37bfa:	f004 ff1f 	bl	3ca3c <assert_print>
   37bfe:	218e      	movs	r1, #142	; 0x8e
   37c00:	4821      	ldr	r0, [pc, #132]	; (37c88 <z_time_slice+0xb0>)
   37c02:	f004 ff14 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   37c06:	481f      	ldr	r0, [pc, #124]	; (37c84 <z_time_slice+0xac>)
   37c08:	f7fe fcf8 	bl	365fc <z_spin_lock_set_owner>
	if (pending_current == _current) {
   37c0c:	4b20      	ldr	r3, [pc, #128]	; (37c90 <z_time_slice+0xb8>)
   37c0e:	4a21      	ldr	r2, [pc, #132]	; (37c94 <z_time_slice+0xbc>)
   37c10:	689c      	ldr	r4, [r3, #8]
   37c12:	6811      	ldr	r1, [r2, #0]
   37c14:	428c      	cmp	r4, r1
   37c16:	d114      	bne.n	37c42 <z_time_slice+0x6a>
	z_reset_time_slice(curr);
   37c18:	4620      	mov	r0, r4
   37c1a:	f7ff fdbf 	bl	3779c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37c1e:	4819      	ldr	r0, [pc, #100]	; (37c84 <z_time_slice+0xac>)
   37c20:	f7fe fcdc 	bl	365dc <z_spin_unlock_valid>
   37c24:	b940      	cbnz	r0, 37c38 <z_time_slice+0x60>
   37c26:	4918      	ldr	r1, [pc, #96]	; (37c88 <z_time_slice+0xb0>)
   37c28:	4818      	ldr	r0, [pc, #96]	; (37c8c <z_time_slice+0xb4>)
   37c2a:	22b9      	movs	r2, #185	; 0xb9
   37c2c:	f004 ff06 	bl	3ca3c <assert_print>
   37c30:	21b9      	movs	r1, #185	; 0xb9
   37c32:	4815      	ldr	r0, [pc, #84]	; (37c88 <z_time_slice+0xb0>)
   37c34:	f004 fefb 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   37c38:	f386 8811 	msr	BASEPRI, r6
   37c3c:	f3bf 8f6f 	isb	sy
}
   37c40:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   37c42:	2100      	movs	r1, #0
   37c44:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   37c46:	4a14      	ldr	r2, [pc, #80]	; (37c98 <z_time_slice+0xc0>)
	if (slice_time(_current) && sliceable(_current)) {
   37c48:	6812      	ldr	r2, [r2, #0]
   37c4a:	b1c2      	cbz	r2, 37c7e <z_time_slice+0xa6>
		&& !z_is_idle_thread_object(thread);
   37c4c:	89e2      	ldrh	r2, [r4, #14]
   37c4e:	2a7f      	cmp	r2, #127	; 0x7f
   37c50:	d815      	bhi.n	37c7e <z_time_slice+0xa6>
		&& !z_is_thread_prevented_from_running(thread)
   37c52:	7b62      	ldrb	r2, [r4, #13]
   37c54:	06d2      	lsls	r2, r2, #27
   37c56:	d112      	bne.n	37c7e <z_time_slice+0xa6>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   37c58:	4a10      	ldr	r2, [pc, #64]	; (37c9c <z_time_slice+0xc4>)
   37c5a:	f994 100e 	ldrsb.w	r1, [r4, #14]
   37c5e:	6812      	ldr	r2, [r2, #0]
   37c60:	4291      	cmp	r1, r2
   37c62:	db0c      	blt.n	37c7e <z_time_slice+0xa6>
	if (slice_time(_current) && sliceable(_current)) {
   37c64:	4a0e      	ldr	r2, [pc, #56]	; (37ca0 <z_time_slice+0xc8>)
   37c66:	4294      	cmp	r4, r2
   37c68:	d009      	beq.n	37c7e <z_time_slice+0xa6>
		if (ticks >= _current_cpu->slice_ticks) {
   37c6a:	691a      	ldr	r2, [r3, #16]
   37c6c:	42aa      	cmp	r2, r5
   37c6e:	dc03      	bgt.n	37c78 <z_time_slice+0xa0>
		move_thread_to_end_of_prio_q(curr);
   37c70:	4620      	mov	r0, r4
   37c72:	f7ff ff61 	bl	37b38 <move_thread_to_end_of_prio_q>
   37c76:	e7cf      	b.n	37c18 <z_time_slice+0x40>
			_current_cpu->slice_ticks -= ticks;
   37c78:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
   37c7a:	611a      	str	r2, [r3, #16]
   37c7c:	e7cf      	b.n	37c1e <z_time_slice+0x46>
   37c7e:	2200      	movs	r2, #0
   37c80:	e7fb      	b.n	37c7a <z_time_slice+0xa2>
   37c82:	bf00      	nop
   37c84:	2001a544 	.word	0x2001a544
   37c88:	0004402c 	.word	0x0004402c
   37c8c:	00043ff2 	.word	0x00043ff2
   37c90:	2001a500 	.word	0x2001a500
   37c94:	2001a540 	.word	0x2001a540
   37c98:	2001a54c 	.word	0x2001a54c
   37c9c:	2001a548 	.word	0x2001a548
   37ca0:	20018e00 	.word	0x20018e00

00037ca4 <ready_thread>:
{
   37ca4:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   37ca6:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   37caa:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   37cac:	2a00      	cmp	r2, #0
   37cae:	7b43      	ldrb	r3, [r0, #13]
   37cb0:	db38      	blt.n	37d24 <ready_thread+0x80>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   37cb2:	06da      	lsls	r2, r3, #27
   37cb4:	d136      	bne.n	37d24 <ready_thread+0x80>
   37cb6:	6982      	ldr	r2, [r0, #24]
   37cb8:	2a00      	cmp	r2, #0
   37cba:	d133      	bne.n	37d24 <ready_thread+0x80>
	thread->base.thread_state |= _THREAD_QUEUED;
   37cbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   37cc0:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   37cc2:	4b19      	ldr	r3, [pc, #100]	; (37d28 <ready_thread+0x84>)
   37cc4:	4298      	cmp	r0, r3
   37cc6:	d108      	bne.n	37cda <ready_thread+0x36>
   37cc8:	4918      	ldr	r1, [pc, #96]	; (37d2c <ready_thread+0x88>)
   37cca:	4819      	ldr	r0, [pc, #100]	; (37d30 <ready_thread+0x8c>)
   37ccc:	22ba      	movs	r2, #186	; 0xba
   37cce:	f004 feb5 	bl	3ca3c <assert_print>
   37cd2:	21ba      	movs	r1, #186	; 0xba
   37cd4:	4815      	ldr	r0, [pc, #84]	; (37d2c <ready_thread+0x88>)
   37cd6:	f004 feaa 	bl	3ca2e <assert_post_action>
	return list->head == list;
   37cda:	4a16      	ldr	r2, [pc, #88]	; (37d34 <ready_thread+0x90>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   37cdc:	f102 0520 	add.w	r5, r2, #32
	return (node == list->tail) ? NULL : node->next;
   37ce0:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   37ce4:	42ab      	cmp	r3, r5
   37ce6:	d018      	beq.n	37d1a <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   37ce8:	b1bb      	cbz	r3, 37d1a <ready_thread+0x76>
	int32_t b1 = thread_1->base.prio;
   37cea:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   37cee:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   37cf2:	428e      	cmp	r6, r1
   37cf4:	d00c      	beq.n	37d10 <ready_thread+0x6c>
		return b2 - b1;
   37cf6:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   37cf8:	2900      	cmp	r1, #0
   37cfa:	dd09      	ble.n	37d10 <ready_thread+0x6c>
	sys_dnode_t *const prev = successor->prev;
   37cfc:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   37cfe:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   37d02:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   37d04:	605c      	str	r4, [r3, #4]
		update_cache(0);
   37d06:	2000      	movs	r0, #0
}
   37d08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   37d0c:	f7ff bee4 	b.w	37ad8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   37d10:	4298      	cmp	r0, r3
   37d12:	d002      	beq.n	37d1a <ready_thread+0x76>
   37d14:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   37d16:	2b00      	cmp	r3, #0
   37d18:	d1e9      	bne.n	37cee <ready_thread+0x4a>
	node->prev = tail;
   37d1a:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
   37d1e:	6004      	str	r4, [r0, #0]
	list->tail = node;
   37d20:	6254      	str	r4, [r2, #36]	; 0x24
}
   37d22:	e7f0      	b.n	37d06 <ready_thread+0x62>
}
   37d24:	bd70      	pop	{r4, r5, r6, pc}
   37d26:	bf00      	nop
   37d28:	20018e00 	.word	0x20018e00
   37d2c:	0004bb42 	.word	0x0004bb42
   37d30:	00043ff2 	.word	0x00043ff2
   37d34:	2001a500 	.word	0x2001a500

00037d38 <z_ready_thread>:
{
   37d38:	b538      	push	{r3, r4, r5, lr}
   37d3a:	4604      	mov	r4, r0
	__asm__ volatile(
   37d3c:	f04f 0320 	mov.w	r3, #32
   37d40:	f3ef 8511 	mrs	r5, BASEPRI
   37d44:	f383 8812 	msr	BASEPRI_MAX, r3
   37d48:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37d4c:	4812      	ldr	r0, [pc, #72]	; (37d98 <z_ready_thread+0x60>)
   37d4e:	f7fe fc37 	bl	365c0 <z_spin_lock_valid>
   37d52:	b940      	cbnz	r0, 37d66 <z_ready_thread+0x2e>
   37d54:	4911      	ldr	r1, [pc, #68]	; (37d9c <z_ready_thread+0x64>)
   37d56:	4812      	ldr	r0, [pc, #72]	; (37da0 <z_ready_thread+0x68>)
   37d58:	228e      	movs	r2, #142	; 0x8e
   37d5a:	f004 fe6f 	bl	3ca3c <assert_print>
   37d5e:	218e      	movs	r1, #142	; 0x8e
   37d60:	480e      	ldr	r0, [pc, #56]	; (37d9c <z_ready_thread+0x64>)
   37d62:	f004 fe64 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   37d66:	480c      	ldr	r0, [pc, #48]	; (37d98 <z_ready_thread+0x60>)
   37d68:	f7fe fc48 	bl	365fc <z_spin_lock_set_owner>
			ready_thread(thread);
   37d6c:	4620      	mov	r0, r4
   37d6e:	f7ff ff99 	bl	37ca4 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37d72:	4809      	ldr	r0, [pc, #36]	; (37d98 <z_ready_thread+0x60>)
   37d74:	f7fe fc32 	bl	365dc <z_spin_unlock_valid>
   37d78:	b940      	cbnz	r0, 37d8c <z_ready_thread+0x54>
   37d7a:	4908      	ldr	r1, [pc, #32]	; (37d9c <z_ready_thread+0x64>)
   37d7c:	4808      	ldr	r0, [pc, #32]	; (37da0 <z_ready_thread+0x68>)
   37d7e:	22b9      	movs	r2, #185	; 0xb9
   37d80:	f004 fe5c 	bl	3ca3c <assert_print>
   37d84:	21b9      	movs	r1, #185	; 0xb9
   37d86:	4805      	ldr	r0, [pc, #20]	; (37d9c <z_ready_thread+0x64>)
   37d88:	f004 fe51 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   37d8c:	f385 8811 	msr	BASEPRI, r5
   37d90:	f3bf 8f6f 	isb	sy
}
   37d94:	bd38      	pop	{r3, r4, r5, pc}
   37d96:	bf00      	nop
   37d98:	2001a544 	.word	0x2001a544
   37d9c:	0004402c 	.word	0x0004402c
   37da0:	00043ff2 	.word	0x00043ff2

00037da4 <z_sched_start>:
{
   37da4:	b538      	push	{r3, r4, r5, lr}
   37da6:	4604      	mov	r4, r0
	__asm__ volatile(
   37da8:	f04f 0320 	mov.w	r3, #32
   37dac:	f3ef 8511 	mrs	r5, BASEPRI
   37db0:	f383 8812 	msr	BASEPRI_MAX, r3
   37db4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37db8:	4818      	ldr	r0, [pc, #96]	; (37e1c <z_sched_start+0x78>)
   37dba:	f7fe fc01 	bl	365c0 <z_spin_lock_valid>
   37dbe:	b940      	cbnz	r0, 37dd2 <z_sched_start+0x2e>
   37dc0:	4917      	ldr	r1, [pc, #92]	; (37e20 <z_sched_start+0x7c>)
   37dc2:	4818      	ldr	r0, [pc, #96]	; (37e24 <z_sched_start+0x80>)
   37dc4:	228e      	movs	r2, #142	; 0x8e
   37dc6:	f004 fe39 	bl	3ca3c <assert_print>
   37dca:	218e      	movs	r1, #142	; 0x8e
   37dcc:	4814      	ldr	r0, [pc, #80]	; (37e20 <z_sched_start+0x7c>)
   37dce:	f004 fe2e 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   37dd2:	4812      	ldr	r0, [pc, #72]	; (37e1c <z_sched_start+0x78>)
   37dd4:	f7fe fc12 	bl	365fc <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   37dd8:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   37dda:	075a      	lsls	r2, r3, #29
   37ddc:	d411      	bmi.n	37e02 <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37dde:	480f      	ldr	r0, [pc, #60]	; (37e1c <z_sched_start+0x78>)
   37de0:	f7fe fbfc 	bl	365dc <z_spin_unlock_valid>
   37de4:	b940      	cbnz	r0, 37df8 <z_sched_start+0x54>
   37de6:	490e      	ldr	r1, [pc, #56]	; (37e20 <z_sched_start+0x7c>)
   37de8:	480e      	ldr	r0, [pc, #56]	; (37e24 <z_sched_start+0x80>)
   37dea:	22b9      	movs	r2, #185	; 0xb9
   37dec:	f004 fe26 	bl	3ca3c <assert_print>
   37df0:	21b9      	movs	r1, #185	; 0xb9
   37df2:	480b      	ldr	r0, [pc, #44]	; (37e20 <z_sched_start+0x7c>)
   37df4:	f004 fe1b 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   37df8:	f385 8811 	msr	BASEPRI, r5
   37dfc:	f3bf 8f6f 	isb	sy
}
   37e00:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   37e02:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   37e06:	4620      	mov	r0, r4
   37e08:	7363      	strb	r3, [r4, #13]
   37e0a:	f7ff ff4b 	bl	37ca4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   37e0e:	4629      	mov	r1, r5
}
   37e10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   37e14:	4801      	ldr	r0, [pc, #4]	; (37e1c <z_sched_start+0x78>)
   37e16:	f7ff bd5f 	b.w	378d8 <z_reschedule>
   37e1a:	bf00      	nop
   37e1c:	2001a544 	.word	0x2001a544
   37e20:	0004402c 	.word	0x0004402c
   37e24:	00043ff2 	.word	0x00043ff2

00037e28 <z_impl_k_thread_resume>:
{
   37e28:	b538      	push	{r3, r4, r5, lr}
   37e2a:	4604      	mov	r4, r0
	__asm__ volatile(
   37e2c:	f04f 0320 	mov.w	r3, #32
   37e30:	f3ef 8511 	mrs	r5, BASEPRI
   37e34:	f383 8812 	msr	BASEPRI_MAX, r3
   37e38:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37e3c:	4818      	ldr	r0, [pc, #96]	; (37ea0 <z_impl_k_thread_resume+0x78>)
   37e3e:	f7fe fbbf 	bl	365c0 <z_spin_lock_valid>
   37e42:	b940      	cbnz	r0, 37e56 <z_impl_k_thread_resume+0x2e>
   37e44:	4917      	ldr	r1, [pc, #92]	; (37ea4 <z_impl_k_thread_resume+0x7c>)
   37e46:	4818      	ldr	r0, [pc, #96]	; (37ea8 <z_impl_k_thread_resume+0x80>)
   37e48:	228e      	movs	r2, #142	; 0x8e
   37e4a:	f004 fdf7 	bl	3ca3c <assert_print>
   37e4e:	218e      	movs	r1, #142	; 0x8e
   37e50:	4814      	ldr	r0, [pc, #80]	; (37ea4 <z_impl_k_thread_resume+0x7c>)
   37e52:	f004 fdec 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   37e56:	4812      	ldr	r0, [pc, #72]	; (37ea0 <z_impl_k_thread_resume+0x78>)
   37e58:	f7fe fbd0 	bl	365fc <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_SUSPENDED) != 0U;
   37e5c:	7b63      	ldrb	r3, [r4, #13]
	if (!z_is_thread_suspended(thread)) {
   37e5e:	06da      	lsls	r2, r3, #27
   37e60:	d411      	bmi.n	37e86 <z_impl_k_thread_resume+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37e62:	480f      	ldr	r0, [pc, #60]	; (37ea0 <z_impl_k_thread_resume+0x78>)
   37e64:	f7fe fbba 	bl	365dc <z_spin_unlock_valid>
   37e68:	b940      	cbnz	r0, 37e7c <z_impl_k_thread_resume+0x54>
   37e6a:	490e      	ldr	r1, [pc, #56]	; (37ea4 <z_impl_k_thread_resume+0x7c>)
   37e6c:	480e      	ldr	r0, [pc, #56]	; (37ea8 <z_impl_k_thread_resume+0x80>)
   37e6e:	22b9      	movs	r2, #185	; 0xb9
   37e70:	f004 fde4 	bl	3ca3c <assert_print>
   37e74:	21b9      	movs	r1, #185	; 0xb9
   37e76:	480b      	ldr	r0, [pc, #44]	; (37ea4 <z_impl_k_thread_resume+0x7c>)
   37e78:	f004 fdd9 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   37e7c:	f385 8811 	msr	BASEPRI, r5
   37e80:	f3bf 8f6f 	isb	sy
}
   37e84:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   37e86:	f023 0310 	bic.w	r3, r3, #16
	ready_thread(thread);
   37e8a:	4620      	mov	r0, r4
   37e8c:	7363      	strb	r3, [r4, #13]
   37e8e:	f7ff ff09 	bl	37ca4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   37e92:	4629      	mov	r1, r5
}
   37e94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   37e98:	4801      	ldr	r0, [pc, #4]	; (37ea0 <z_impl_k_thread_resume+0x78>)
   37e9a:	f7ff bd1d 	b.w	378d8 <z_reschedule>
   37e9e:	bf00      	nop
   37ea0:	2001a544 	.word	0x2001a544
   37ea4:	0004402c 	.word	0x0004402c
   37ea8:	00043ff2 	.word	0x00043ff2

00037eac <z_thread_timeout>:
{
   37eac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   37eae:	4604      	mov	r4, r0
	__asm__ volatile(
   37eb0:	f04f 0320 	mov.w	r3, #32
   37eb4:	f3ef 8511 	mrs	r5, BASEPRI
   37eb8:	f383 8812 	msr	BASEPRI_MAX, r3
   37ebc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37ec0:	481c      	ldr	r0, [pc, #112]	; (37f34 <z_thread_timeout+0x88>)
   37ec2:	f7fe fb7d 	bl	365c0 <z_spin_lock_valid>
   37ec6:	b940      	cbnz	r0, 37eda <z_thread_timeout+0x2e>
   37ec8:	491b      	ldr	r1, [pc, #108]	; (37f38 <z_thread_timeout+0x8c>)
   37eca:	481c      	ldr	r0, [pc, #112]	; (37f3c <z_thread_timeout+0x90>)
   37ecc:	228e      	movs	r2, #142	; 0x8e
   37ece:	f004 fdb5 	bl	3ca3c <assert_print>
   37ed2:	218e      	movs	r1, #142	; 0x8e
   37ed4:	4818      	ldr	r0, [pc, #96]	; (37f38 <z_thread_timeout+0x8c>)
   37ed6:	f004 fdaa 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   37eda:	4816      	ldr	r0, [pc, #88]	; (37f34 <z_thread_timeout+0x88>)
   37edc:	f7fe fb8e 	bl	365fc <z_spin_lock_set_owner>
		if (!killed) {
   37ee0:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   37ee4:	f013 0f28 	tst.w	r3, #40	; 0x28
   37ee8:	d110      	bne.n	37f0c <z_thread_timeout+0x60>
			if (thread->base.pended_on != NULL) {
   37eea:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   37eee:	f1a4 0018 	sub.w	r0, r4, #24
			if (thread->base.pended_on != NULL) {
   37ef2:	b11b      	cbz	r3, 37efc <z_thread_timeout+0x50>
				unpend_thread_no_timeout(thread);
   37ef4:	9001      	str	r0, [sp, #4]
   37ef6:	f7ff fd97 	bl	37a28 <unpend_thread_no_timeout>
   37efa:	9801      	ldr	r0, [sp, #4]
   37efc:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   37f00:	f023 0314 	bic.w	r3, r3, #20
   37f04:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   37f08:	f7ff fecc 	bl	37ca4 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37f0c:	4809      	ldr	r0, [pc, #36]	; (37f34 <z_thread_timeout+0x88>)
   37f0e:	f7fe fb65 	bl	365dc <z_spin_unlock_valid>
   37f12:	b940      	cbnz	r0, 37f26 <z_thread_timeout+0x7a>
   37f14:	4908      	ldr	r1, [pc, #32]	; (37f38 <z_thread_timeout+0x8c>)
   37f16:	4809      	ldr	r0, [pc, #36]	; (37f3c <z_thread_timeout+0x90>)
   37f18:	22b9      	movs	r2, #185	; 0xb9
   37f1a:	f004 fd8f 	bl	3ca3c <assert_print>
   37f1e:	21b9      	movs	r1, #185	; 0xb9
   37f20:	4805      	ldr	r0, [pc, #20]	; (37f38 <z_thread_timeout+0x8c>)
   37f22:	f004 fd84 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   37f26:	f385 8811 	msr	BASEPRI, r5
   37f2a:	f3bf 8f6f 	isb	sy
}
   37f2e:	b003      	add	sp, #12
   37f30:	bd30      	pop	{r4, r5, pc}
   37f32:	bf00      	nop
   37f34:	2001a544 	.word	0x2001a544
   37f38:	0004402c 	.word	0x0004402c
   37f3c:	00043ff2 	.word	0x00043ff2

00037f40 <unready_thread>:
{
   37f40:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   37f42:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   37f46:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   37f48:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   37f4a:	7b43      	ldrb	r3, [r0, #13]
   37f4c:	da06      	bge.n	37f5c <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   37f4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   37f52:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
   37f54:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   37f56:	4806      	ldr	r0, [pc, #24]	; (37f70 <unready_thread+0x30>)
   37f58:	f7ff fd48 	bl	379ec <z_priq_dumb_remove>
	update_cache(thread == _current);
   37f5c:	4b05      	ldr	r3, [pc, #20]	; (37f74 <unready_thread+0x34>)
   37f5e:	6898      	ldr	r0, [r3, #8]
   37f60:	1b03      	subs	r3, r0, r4
   37f62:	4258      	negs	r0, r3
   37f64:	4158      	adcs	r0, r3
}
   37f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   37f6a:	f7ff bdb5 	b.w	37ad8 <update_cache>
   37f6e:	bf00      	nop
   37f70:	2001a520 	.word	0x2001a520
   37f74:	2001a500 	.word	0x2001a500

00037f78 <add_to_waitq_locked>:
{
   37f78:	b538      	push	{r3, r4, r5, lr}
   37f7a:	4604      	mov	r4, r0
   37f7c:	460d      	mov	r5, r1
	unready_thread(thread);
   37f7e:	f7ff ffdf 	bl	37f40 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   37f82:	7b63      	ldrb	r3, [r4, #13]
   37f84:	f043 0302 	orr.w	r3, r3, #2
   37f88:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   37f8a:	b1f5      	cbz	r5, 37fca <add_to_waitq_locked+0x52>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   37f8c:	4b15      	ldr	r3, [pc, #84]	; (37fe4 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   37f8e:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   37f90:	429c      	cmp	r4, r3
   37f92:	d108      	bne.n	37fa6 <add_to_waitq_locked+0x2e>
   37f94:	4914      	ldr	r1, [pc, #80]	; (37fe8 <add_to_waitq_locked+0x70>)
   37f96:	4815      	ldr	r0, [pc, #84]	; (37fec <add_to_waitq_locked+0x74>)
   37f98:	22ba      	movs	r2, #186	; 0xba
   37f9a:	f004 fd4f 	bl	3ca3c <assert_print>
   37f9e:	21ba      	movs	r1, #186	; 0xba
   37fa0:	4811      	ldr	r0, [pc, #68]	; (37fe8 <add_to_waitq_locked+0x70>)
   37fa2:	f004 fd44 	bl	3ca2e <assert_post_action>
	return list->head == list;
   37fa6:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   37fa8:	429d      	cmp	r5, r3
   37faa:	d015      	beq.n	37fd8 <add_to_waitq_locked+0x60>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   37fac:	b1a3      	cbz	r3, 37fd8 <add_to_waitq_locked+0x60>
	int32_t b1 = thread_1->base.prio;
   37fae:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   37fb2:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   37fb6:	4291      	cmp	r1, r2
   37fb8:	d008      	beq.n	37fcc <add_to_waitq_locked+0x54>
		return b2 - b1;
   37fba:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   37fbc:	2a00      	cmp	r2, #0
   37fbe:	dd05      	ble.n	37fcc <add_to_waitq_locked+0x54>
	sys_dnode_t *const prev = successor->prev;
   37fc0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   37fc2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   37fc6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   37fc8:	605c      	str	r4, [r3, #4]
}
   37fca:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   37fcc:	686a      	ldr	r2, [r5, #4]
   37fce:	4293      	cmp	r3, r2
   37fd0:	d002      	beq.n	37fd8 <add_to_waitq_locked+0x60>
   37fd2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   37fd4:	2b00      	cmp	r3, #0
   37fd6:	d1ec      	bne.n	37fb2 <add_to_waitq_locked+0x3a>
	sys_dnode_t *const tail = list->tail;
   37fd8:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   37fda:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   37fde:	601c      	str	r4, [r3, #0]
	list->tail = node;
   37fe0:	606c      	str	r4, [r5, #4]
}
   37fe2:	e7f2      	b.n	37fca <add_to_waitq_locked+0x52>
   37fe4:	20018e00 	.word	0x20018e00
   37fe8:	0004bb42 	.word	0x0004bb42
   37fec:	00043ff2 	.word	0x00043ff2

00037ff0 <pend>:
{
   37ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   37ff4:	4604      	mov	r4, r0
   37ff6:	4688      	mov	r8, r1
   37ff8:	4616      	mov	r6, r2
   37ffa:	461d      	mov	r5, r3
	__asm__ volatile(
   37ffc:	f04f 0320 	mov.w	r3, #32
   38000:	f3ef 8711 	mrs	r7, BASEPRI
   38004:	f383 8812 	msr	BASEPRI_MAX, r3
   38008:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3800c:	481a      	ldr	r0, [pc, #104]	; (38078 <pend+0x88>)
   3800e:	f7fe fad7 	bl	365c0 <z_spin_lock_valid>
   38012:	b940      	cbnz	r0, 38026 <pend+0x36>
   38014:	4919      	ldr	r1, [pc, #100]	; (3807c <pend+0x8c>)
   38016:	481a      	ldr	r0, [pc, #104]	; (38080 <pend+0x90>)
   38018:	228e      	movs	r2, #142	; 0x8e
   3801a:	f004 fd0f 	bl	3ca3c <assert_print>
   3801e:	218e      	movs	r1, #142	; 0x8e
   38020:	4816      	ldr	r0, [pc, #88]	; (3807c <pend+0x8c>)
   38022:	f004 fd04 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   38026:	4814      	ldr	r0, [pc, #80]	; (38078 <pend+0x88>)
   38028:	f7fe fae8 	bl	365fc <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   3802c:	4620      	mov	r0, r4
   3802e:	4641      	mov	r1, r8
   38030:	f7ff ffa2 	bl	37f78 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38034:	4810      	ldr	r0, [pc, #64]	; (38078 <pend+0x88>)
   38036:	f7fe fad1 	bl	365dc <z_spin_unlock_valid>
   3803a:	b940      	cbnz	r0, 3804e <pend+0x5e>
   3803c:	490f      	ldr	r1, [pc, #60]	; (3807c <pend+0x8c>)
   3803e:	4810      	ldr	r0, [pc, #64]	; (38080 <pend+0x90>)
   38040:	22b9      	movs	r2, #185	; 0xb9
   38042:	f004 fcfb 	bl	3ca3c <assert_print>
   38046:	21b9      	movs	r1, #185	; 0xb9
   38048:	480c      	ldr	r0, [pc, #48]	; (3807c <pend+0x8c>)
   3804a:	f004 fcf0 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   3804e:	f387 8811 	msr	BASEPRI, r7
   38052:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   38056:	f1b5 3fff 	cmp.w	r5, #4294967295
   3805a:	bf08      	it	eq
   3805c:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   38060:	d008      	beq.n	38074 <pend+0x84>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   38062:	4632      	mov	r2, r6
   38064:	462b      	mov	r3, r5
   38066:	f104 0018 	add.w	r0, r4, #24
   3806a:	4906      	ldr	r1, [pc, #24]	; (38084 <pend+0x94>)
}
   3806c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   38070:	f000 bc6c 	b.w	3894c <z_add_timeout>
   38074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   38078:	2001a544 	.word	0x2001a544
   3807c:	0004402c 	.word	0x0004402c
   38080:	00043ff2 	.word	0x00043ff2
   38084:	00037ead 	.word	0x00037ead

00038088 <z_pend_curr>:
{
   38088:	b538      	push	{r3, r4, r5, lr}
   3808a:	4605      	mov	r5, r0
	pending_current = _current;
   3808c:	4b0d      	ldr	r3, [pc, #52]	; (380c4 <z_pend_curr+0x3c>)
{
   3808e:	460c      	mov	r4, r1
	pending_current = _current;
   38090:	6898      	ldr	r0, [r3, #8]
   38092:	4b0d      	ldr	r3, [pc, #52]	; (380c8 <z_pend_curr+0x40>)
{
   38094:	4611      	mov	r1, r2
	pending_current = _current;
   38096:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   38098:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   3809c:	f7ff ffa8 	bl	37ff0 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   380a0:	4628      	mov	r0, r5
   380a2:	f7fe fa9b 	bl	365dc <z_spin_unlock_valid>
   380a6:	b940      	cbnz	r0, 380ba <z_pend_curr+0x32>
   380a8:	4908      	ldr	r1, [pc, #32]	; (380cc <z_pend_curr+0x44>)
   380aa:	4809      	ldr	r0, [pc, #36]	; (380d0 <z_pend_curr+0x48>)
   380ac:	22d0      	movs	r2, #208	; 0xd0
   380ae:	f004 fcc5 	bl	3ca3c <assert_print>
   380b2:	21d0      	movs	r1, #208	; 0xd0
   380b4:	4805      	ldr	r0, [pc, #20]	; (380cc <z_pend_curr+0x44>)
   380b6:	f004 fcba 	bl	3ca2e <assert_post_action>
   380ba:	4620      	mov	r0, r4
}
   380bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   380c0:	f7ea bdd0 	b.w	22c64 <arch_swap>
   380c4:	2001a500 	.word	0x2001a500
   380c8:	2001a540 	.word	0x2001a540
   380cc:	0004402c 	.word	0x0004402c
   380d0:	00043ff2 	.word	0x00043ff2

000380d4 <z_set_prio>:
{
   380d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   380d6:	4604      	mov	r4, r0
   380d8:	460d      	mov	r5, r1
	__asm__ volatile(
   380da:	f04f 0320 	mov.w	r3, #32
   380de:	f3ef 8611 	mrs	r6, BASEPRI
   380e2:	f383 8812 	msr	BASEPRI_MAX, r3
   380e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   380ea:	4834      	ldr	r0, [pc, #208]	; (381bc <z_set_prio+0xe8>)
   380ec:	f7fe fa68 	bl	365c0 <z_spin_lock_valid>
   380f0:	b940      	cbnz	r0, 38104 <z_set_prio+0x30>
   380f2:	4933      	ldr	r1, [pc, #204]	; (381c0 <z_set_prio+0xec>)
   380f4:	4833      	ldr	r0, [pc, #204]	; (381c4 <z_set_prio+0xf0>)
   380f6:	228e      	movs	r2, #142	; 0x8e
   380f8:	f004 fca0 	bl	3ca3c <assert_print>
   380fc:	218e      	movs	r1, #142	; 0x8e
   380fe:	4830      	ldr	r0, [pc, #192]	; (381c0 <z_set_prio+0xec>)
   38100:	f004 fc95 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   38104:	482d      	ldr	r0, [pc, #180]	; (381bc <z_set_prio+0xe8>)
   38106:	f7fe fa79 	bl	365fc <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   3810a:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   3810c:	b26d      	sxtb	r5, r5
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   3810e:	06da      	lsls	r2, r3, #27
   38110:	d151      	bne.n	381b6 <z_set_prio+0xe2>
		if (need_sched) {
   38112:	69a2      	ldr	r2, [r4, #24]
   38114:	2a00      	cmp	r2, #0
   38116:	d14e      	bne.n	381b6 <z_set_prio+0xe2>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   38118:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   3811c:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   3811e:	4621      	mov	r1, r4
   38120:	4829      	ldr	r0, [pc, #164]	; (381c8 <z_set_prio+0xf4>)
   38122:	f7ff fc63 	bl	379ec <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   38126:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   38128:	73a5      	strb	r5, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   3812a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   3812e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   38130:	4b26      	ldr	r3, [pc, #152]	; (381cc <z_set_prio+0xf8>)
   38132:	429c      	cmp	r4, r3
   38134:	d108      	bne.n	38148 <z_set_prio+0x74>
   38136:	4926      	ldr	r1, [pc, #152]	; (381d0 <z_set_prio+0xfc>)
   38138:	4822      	ldr	r0, [pc, #136]	; (381c4 <z_set_prio+0xf0>)
   3813a:	22ba      	movs	r2, #186	; 0xba
   3813c:	f004 fc7e 	bl	3ca3c <assert_print>
   38140:	21ba      	movs	r1, #186	; 0xba
   38142:	4823      	ldr	r0, [pc, #140]	; (381d0 <z_set_prio+0xfc>)
   38144:	f004 fc73 	bl	3ca2e <assert_post_action>
	return list->head == list;
   38148:	4a22      	ldr	r2, [pc, #136]	; (381d4 <z_set_prio+0x100>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3814a:	f102 0520 	add.w	r5, r2, #32
	return (node == list->tail) ? NULL : node->next;
   3814e:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38152:	42ab      	cmp	r3, r5
   38154:	d02a      	beq.n	381ac <z_set_prio+0xd8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   38156:	b34b      	cbz	r3, 381ac <z_set_prio+0xd8>
	int32_t b1 = thread_1->base.prio;
   38158:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   3815c:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   38160:	428f      	cmp	r7, r1
   38162:	d01e      	beq.n	381a2 <z_set_prio+0xce>
		return b2 - b1;
   38164:	1bc9      	subs	r1, r1, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   38166:	2900      	cmp	r1, #0
   38168:	dd1b      	ble.n	381a2 <z_set_prio+0xce>
	sys_dnode_t *const prev = successor->prev;
   3816a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   3816c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   38170:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   38172:	605c      	str	r4, [r3, #4]
			update_cache(1);
   38174:	2001      	movs	r0, #1
   38176:	f7ff fcaf 	bl	37ad8 <update_cache>
   3817a:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3817c:	480f      	ldr	r0, [pc, #60]	; (381bc <z_set_prio+0xe8>)
   3817e:	f7fe fa2d 	bl	365dc <z_spin_unlock_valid>
   38182:	b940      	cbnz	r0, 38196 <z_set_prio+0xc2>
   38184:	490e      	ldr	r1, [pc, #56]	; (381c0 <z_set_prio+0xec>)
   38186:	480f      	ldr	r0, [pc, #60]	; (381c4 <z_set_prio+0xf0>)
   38188:	22b9      	movs	r2, #185	; 0xb9
   3818a:	f004 fc57 	bl	3ca3c <assert_print>
   3818e:	21b9      	movs	r1, #185	; 0xb9
   38190:	480b      	ldr	r0, [pc, #44]	; (381c0 <z_set_prio+0xec>)
   38192:	f004 fc4c 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   38196:	f386 8811 	msr	BASEPRI, r6
   3819a:	f3bf 8f6f 	isb	sy
}
   3819e:	4620      	mov	r0, r4
   381a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   381a2:	4283      	cmp	r3, r0
   381a4:	d002      	beq.n	381ac <z_set_prio+0xd8>
   381a6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   381a8:	2b00      	cmp	r3, #0
   381aa:	d1d7      	bne.n	3815c <z_set_prio+0x88>
	node->prev = tail;
   381ac:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
   381b0:	6004      	str	r4, [r0, #0]
	list->tail = node;
   381b2:	6254      	str	r4, [r2, #36]	; 0x24
}
   381b4:	e7de      	b.n	38174 <z_set_prio+0xa0>
			thread->base.prio = prio;
   381b6:	73a5      	strb	r5, [r4, #14]
   381b8:	2400      	movs	r4, #0
   381ba:	e7df      	b.n	3817c <z_set_prio+0xa8>
   381bc:	2001a544 	.word	0x2001a544
   381c0:	0004402c 	.word	0x0004402c
   381c4:	00043ff2 	.word	0x00043ff2
   381c8:	2001a520 	.word	0x2001a520
   381cc:	20018e00 	.word	0x20018e00
   381d0:	0004bb42 	.word	0x0004bb42
   381d4:	2001a500 	.word	0x2001a500

000381d8 <z_impl_k_thread_suspend>:
{
   381d8:	b570      	push	{r4, r5, r6, lr}
   381da:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
   381dc:	3018      	adds	r0, #24
   381de:	f000 fc63 	bl	38aa8 <z_abort_timeout>
	__asm__ volatile(
   381e2:	f04f 0320 	mov.w	r3, #32
   381e6:	f3ef 8611 	mrs	r6, BASEPRI
   381ea:	f383 8812 	msr	BASEPRI_MAX, r3
   381ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   381f2:	4820      	ldr	r0, [pc, #128]	; (38274 <z_impl_k_thread_suspend+0x9c>)
   381f4:	f7fe f9e4 	bl	365c0 <z_spin_lock_valid>
   381f8:	b940      	cbnz	r0, 3820c <z_impl_k_thread_suspend+0x34>
   381fa:	491f      	ldr	r1, [pc, #124]	; (38278 <z_impl_k_thread_suspend+0xa0>)
   381fc:	481f      	ldr	r0, [pc, #124]	; (3827c <z_impl_k_thread_suspend+0xa4>)
   381fe:	228e      	movs	r2, #142	; 0x8e
   38200:	f004 fc1c 	bl	3ca3c <assert_print>
   38204:	218e      	movs	r1, #142	; 0x8e
   38206:	481c      	ldr	r0, [pc, #112]	; (38278 <z_impl_k_thread_suspend+0xa0>)
   38208:	f004 fc11 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   3820c:	4819      	ldr	r0, [pc, #100]	; (38274 <z_impl_k_thread_suspend+0x9c>)
   3820e:	f7fe f9f5 	bl	365fc <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   38212:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   38216:	7b63      	ldrb	r3, [r4, #13]
   38218:	2a00      	cmp	r2, #0
   3821a:	da06      	bge.n	3822a <z_impl_k_thread_suspend+0x52>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   3821c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   38220:	4621      	mov	r1, r4
   38222:	4817      	ldr	r0, [pc, #92]	; (38280 <z_impl_k_thread_suspend+0xa8>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   38224:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   38226:	f7ff fbe1 	bl	379ec <z_priq_dumb_remove>
		update_cache(thread == _current);
   3822a:	4d16      	ldr	r5, [pc, #88]	; (38284 <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   3822c:	7b63      	ldrb	r3, [r4, #13]
   3822e:	68a8      	ldr	r0, [r5, #8]
   38230:	f043 0310 	orr.w	r3, r3, #16
   38234:	7363      	strb	r3, [r4, #13]
   38236:	1b03      	subs	r3, r0, r4
   38238:	4258      	negs	r0, r3
   3823a:	4158      	adcs	r0, r3
   3823c:	f7ff fc4c 	bl	37ad8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38240:	480c      	ldr	r0, [pc, #48]	; (38274 <z_impl_k_thread_suspend+0x9c>)
   38242:	f7fe f9cb 	bl	365dc <z_spin_unlock_valid>
   38246:	b940      	cbnz	r0, 3825a <z_impl_k_thread_suspend+0x82>
   38248:	490b      	ldr	r1, [pc, #44]	; (38278 <z_impl_k_thread_suspend+0xa0>)
   3824a:	480c      	ldr	r0, [pc, #48]	; (3827c <z_impl_k_thread_suspend+0xa4>)
   3824c:	22b9      	movs	r2, #185	; 0xb9
   3824e:	f004 fbf5 	bl	3ca3c <assert_print>
   38252:	21b9      	movs	r1, #185	; 0xb9
   38254:	4808      	ldr	r0, [pc, #32]	; (38278 <z_impl_k_thread_suspend+0xa0>)
   38256:	f004 fbea 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   3825a:	f386 8811 	msr	BASEPRI, r6
   3825e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   38262:	68ab      	ldr	r3, [r5, #8]
   38264:	42a3      	cmp	r3, r4
   38266:	d103      	bne.n	38270 <z_impl_k_thread_suspend+0x98>
}
   38268:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   3826c:	f008 bf06 	b.w	4107c <z_reschedule_unlocked>
}
   38270:	bd70      	pop	{r4, r5, r6, pc}
   38272:	bf00      	nop
   38274:	2001a544 	.word	0x2001a544
   38278:	0004402c 	.word	0x0004402c
   3827c:	00043ff2 	.word	0x00043ff2
   38280:	2001a520 	.word	0x2001a520
   38284:	2001a500 	.word	0x2001a500

00038288 <k_sched_unlock>:
{
   38288:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   3828a:	f04f 0320 	mov.w	r3, #32
   3828e:	f3ef 8511 	mrs	r5, BASEPRI
   38292:	f383 8812 	msr	BASEPRI_MAX, r3
   38296:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3829a:	4824      	ldr	r0, [pc, #144]	; (3832c <k_sched_unlock+0xa4>)
   3829c:	f7fe f990 	bl	365c0 <z_spin_lock_valid>
   382a0:	b940      	cbnz	r0, 382b4 <k_sched_unlock+0x2c>
   382a2:	4923      	ldr	r1, [pc, #140]	; (38330 <k_sched_unlock+0xa8>)
   382a4:	4823      	ldr	r0, [pc, #140]	; (38334 <k_sched_unlock+0xac>)
   382a6:	228e      	movs	r2, #142	; 0x8e
   382a8:	f004 fbc8 	bl	3ca3c <assert_print>
   382ac:	218e      	movs	r1, #142	; 0x8e
   382ae:	4820      	ldr	r0, [pc, #128]	; (38330 <k_sched_unlock+0xa8>)
   382b0:	f004 fbbd 	bl	3ca2e <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
   382b4:	4c20      	ldr	r4, [pc, #128]	; (38338 <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
   382b6:	481d      	ldr	r0, [pc, #116]	; (3832c <k_sched_unlock+0xa4>)
   382b8:	f7fe f9a0 	bl	365fc <z_spin_lock_set_owner>
   382bc:	68a3      	ldr	r3, [r4, #8]
   382be:	7bdb      	ldrb	r3, [r3, #15]
   382c0:	b953      	cbnz	r3, 382d8 <k_sched_unlock+0x50>
   382c2:	491e      	ldr	r1, [pc, #120]	; (3833c <k_sched_unlock+0xb4>)
   382c4:	481b      	ldr	r0, [pc, #108]	; (38334 <k_sched_unlock+0xac>)
   382c6:	f240 32bb 	movw	r2, #955	; 0x3bb
   382ca:	f004 fbb7 	bl	3ca3c <assert_print>
   382ce:	f240 31bb 	movw	r1, #955	; 0x3bb
   382d2:	481a      	ldr	r0, [pc, #104]	; (3833c <k_sched_unlock+0xb4>)
   382d4:	f004 fbab 	bl	3ca2e <assert_post_action>
   382d8:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   382dc:	b153      	cbz	r3, 382f4 <k_sched_unlock+0x6c>
   382de:	4917      	ldr	r1, [pc, #92]	; (3833c <k_sched_unlock+0xb4>)
   382e0:	4814      	ldr	r0, [pc, #80]	; (38334 <k_sched_unlock+0xac>)
   382e2:	f44f 726f 	mov.w	r2, #956	; 0x3bc
   382e6:	f004 fba9 	bl	3ca3c <assert_print>
   382ea:	f44f 716f 	mov.w	r1, #956	; 0x3bc
   382ee:	4813      	ldr	r0, [pc, #76]	; (3833c <k_sched_unlock+0xb4>)
   382f0:	f004 fb9d 	bl	3ca2e <assert_post_action>
		++_current->base.sched_locked;
   382f4:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   382f6:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   382f8:	7bd3      	ldrb	r3, [r2, #15]
   382fa:	3301      	adds	r3, #1
   382fc:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   382fe:	f7ff fbeb 	bl	37ad8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38302:	480a      	ldr	r0, [pc, #40]	; (3832c <k_sched_unlock+0xa4>)
   38304:	f7fe f96a 	bl	365dc <z_spin_unlock_valid>
   38308:	b940      	cbnz	r0, 3831c <k_sched_unlock+0x94>
   3830a:	4909      	ldr	r1, [pc, #36]	; (38330 <k_sched_unlock+0xa8>)
   3830c:	4809      	ldr	r0, [pc, #36]	; (38334 <k_sched_unlock+0xac>)
   3830e:	22b9      	movs	r2, #185	; 0xb9
   38310:	f004 fb94 	bl	3ca3c <assert_print>
   38314:	21b9      	movs	r1, #185	; 0xb9
   38316:	4806      	ldr	r0, [pc, #24]	; (38330 <k_sched_unlock+0xa8>)
   38318:	f004 fb89 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   3831c:	f385 8811 	msr	BASEPRI, r5
   38320:	f3bf 8f6f 	isb	sy
}
   38324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   38328:	f008 bea8 	b.w	4107c <z_reschedule_unlocked>
   3832c:	2001a544 	.word	0x2001a544
   38330:	0004402c 	.word	0x0004402c
   38334:	00043ff2 	.word	0x00043ff2
   38338:	2001a500 	.word	0x2001a500
   3833c:	0004bb42 	.word	0x0004bb42

00038340 <z_unpend_first_thread>:
{
   38340:	b538      	push	{r3, r4, r5, lr}
   38342:	4604      	mov	r4, r0
	__asm__ volatile(
   38344:	f04f 0320 	mov.w	r3, #32
   38348:	f3ef 8511 	mrs	r5, BASEPRI
   3834c:	f383 8812 	msr	BASEPRI_MAX, r3
   38350:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38354:	4816      	ldr	r0, [pc, #88]	; (383b0 <z_unpend_first_thread+0x70>)
   38356:	f7fe f933 	bl	365c0 <z_spin_lock_valid>
   3835a:	b940      	cbnz	r0, 3836e <z_unpend_first_thread+0x2e>
   3835c:	4915      	ldr	r1, [pc, #84]	; (383b4 <z_unpend_first_thread+0x74>)
   3835e:	4816      	ldr	r0, [pc, #88]	; (383b8 <z_unpend_first_thread+0x78>)
   38360:	228e      	movs	r2, #142	; 0x8e
   38362:	f004 fb6b 	bl	3ca3c <assert_print>
   38366:	218e      	movs	r1, #142	; 0x8e
   38368:	4812      	ldr	r0, [pc, #72]	; (383b4 <z_unpend_first_thread+0x74>)
   3836a:	f004 fb60 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   3836e:	4810      	ldr	r0, [pc, #64]	; (383b0 <z_unpend_first_thread+0x70>)
   38370:	f7fe f944 	bl	365fc <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   38374:	4620      	mov	r0, r4
   38376:	f008 fe8b 	bl	41090 <z_priq_dumb_best>
		if (thread != NULL) {
   3837a:	4604      	mov	r4, r0
   3837c:	b128      	cbz	r0, 3838a <z_unpend_first_thread+0x4a>
			unpend_thread_no_timeout(thread);
   3837e:	f7ff fb53 	bl	37a28 <unpend_thread_no_timeout>
   38382:	f104 0018 	add.w	r0, r4, #24
   38386:	f000 fb8f 	bl	38aa8 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3838a:	4809      	ldr	r0, [pc, #36]	; (383b0 <z_unpend_first_thread+0x70>)
   3838c:	f7fe f926 	bl	365dc <z_spin_unlock_valid>
   38390:	b940      	cbnz	r0, 383a4 <z_unpend_first_thread+0x64>
   38392:	4908      	ldr	r1, [pc, #32]	; (383b4 <z_unpend_first_thread+0x74>)
   38394:	4808      	ldr	r0, [pc, #32]	; (383b8 <z_unpend_first_thread+0x78>)
   38396:	22b9      	movs	r2, #185	; 0xb9
   38398:	f004 fb50 	bl	3ca3c <assert_print>
   3839c:	21b9      	movs	r1, #185	; 0xb9
   3839e:	4805      	ldr	r0, [pc, #20]	; (383b4 <z_unpend_first_thread+0x74>)
   383a0:	f004 fb45 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   383a4:	f385 8811 	msr	BASEPRI, r5
   383a8:	f3bf 8f6f 	isb	sy
}
   383ac:	4620      	mov	r0, r4
   383ae:	bd38      	pop	{r3, r4, r5, pc}
   383b0:	2001a544 	.word	0x2001a544
   383b4:	0004402c 	.word	0x0004402c
   383b8:	00043ff2 	.word	0x00043ff2

000383bc <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   383bc:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   383be:	4b04      	ldr	r3, [pc, #16]	; (383d0 <z_sched_init+0x14>)
   383c0:	4608      	mov	r0, r1
   383c2:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   383c6:	e9c3 2208 	strd	r2, r2, [r3, #32]
   383ca:	f7ff b9fb 	b.w	377c4 <k_sched_time_slice_set>
   383ce:	bf00      	nop
   383d0:	2001a500 	.word	0x2001a500

000383d4 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   383d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   383d6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   383da:	b153      	cbz	r3, 383f2 <z_impl_k_yield+0x1e>
   383dc:	4938      	ldr	r1, [pc, #224]	; (384c0 <z_impl_k_yield+0xec>)
   383de:	4839      	ldr	r0, [pc, #228]	; (384c4 <z_impl_k_yield+0xf0>)
   383e0:	f240 5232 	movw	r2, #1330	; 0x532
   383e4:	f004 fb2a 	bl	3ca3c <assert_print>
   383e8:	f240 5132 	movw	r1, #1330	; 0x532
   383ec:	4834      	ldr	r0, [pc, #208]	; (384c0 <z_impl_k_yield+0xec>)
   383ee:	f004 fb1e 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   383f2:	f04f 0320 	mov.w	r3, #32
   383f6:	f3ef 8611 	mrs	r6, BASEPRI
   383fa:	f383 8812 	msr	BASEPRI_MAX, r3
   383fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38402:	4831      	ldr	r0, [pc, #196]	; (384c8 <z_impl_k_yield+0xf4>)
   38404:	f7fe f8dc 	bl	365c0 <z_spin_lock_valid>
   38408:	b940      	cbnz	r0, 3841c <z_impl_k_yield+0x48>
   3840a:	4930      	ldr	r1, [pc, #192]	; (384cc <z_impl_k_yield+0xf8>)
   3840c:	482d      	ldr	r0, [pc, #180]	; (384c4 <z_impl_k_yield+0xf0>)
   3840e:	228e      	movs	r2, #142	; 0x8e
   38410:	f004 fb14 	bl	3ca3c <assert_print>
   38414:	218e      	movs	r1, #142	; 0x8e
   38416:	482d      	ldr	r0, [pc, #180]	; (384cc <z_impl_k_yield+0xf8>)
   38418:	f004 fb09 	bl	3ca2e <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   3841c:	4d2c      	ldr	r5, [pc, #176]	; (384d0 <z_impl_k_yield+0xfc>)
	z_spin_lock_set_owner(l);
   3841e:	482a      	ldr	r0, [pc, #168]	; (384c8 <z_impl_k_yield+0xf4>)
   38420:	f7fe f8ec 	bl	365fc <z_spin_lock_set_owner>
   38424:	68a9      	ldr	r1, [r5, #8]
	_priq_run_remove(thread_runq(thread), thread);
   38426:	f105 0020 	add.w	r0, r5, #32
	thread->base.thread_state &= ~_THREAD_QUEUED;
   3842a:	7b4b      	ldrb	r3, [r1, #13]
   3842c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   38430:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   38432:	f7ff fadb 	bl	379ec <z_priq_dumb_remove>
	}
	queue_thread(_current);
   38436:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   38438:	7b63      	ldrb	r3, [r4, #13]
   3843a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   3843e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   38440:	4b24      	ldr	r3, [pc, #144]	; (384d4 <z_impl_k_yield+0x100>)
   38442:	429c      	cmp	r4, r3
   38444:	d108      	bne.n	38458 <z_impl_k_yield+0x84>
   38446:	491e      	ldr	r1, [pc, #120]	; (384c0 <z_impl_k_yield+0xec>)
   38448:	481e      	ldr	r0, [pc, #120]	; (384c4 <z_impl_k_yield+0xf0>)
   3844a:	22ba      	movs	r2, #186	; 0xba
   3844c:	f004 faf6 	bl	3ca3c <assert_print>
   38450:	21ba      	movs	r1, #186	; 0xba
   38452:	481b      	ldr	r0, [pc, #108]	; (384c0 <z_impl_k_yield+0xec>)
   38454:	f004 faeb 	bl	3ca2e <assert_post_action>
	return (node == list->tail) ? NULL : node->next;
   38458:	e9d5 3108 	ldrd	r3, r1, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3845c:	481e      	ldr	r0, [pc, #120]	; (384d8 <z_impl_k_yield+0x104>)
   3845e:	4283      	cmp	r3, r0
   38460:	d028      	beq.n	384b4 <z_impl_k_yield+0xe0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   38462:	b33b      	cbz	r3, 384b4 <z_impl_k_yield+0xe0>
	int32_t b1 = thread_1->base.prio;
   38464:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   38468:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   3846c:	4297      	cmp	r7, r2
   3846e:	d01c      	beq.n	384aa <z_impl_k_yield+0xd6>
		return b2 - b1;
   38470:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   38472:	2a00      	cmp	r2, #0
   38474:	dd19      	ble.n	384aa <z_impl_k_yield+0xd6>
	sys_dnode_t *const prev = successor->prev;
   38476:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   38478:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   3847c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   3847e:	605c      	str	r4, [r3, #4]
	update_cache(1);
   38480:	2001      	movs	r0, #1
   38482:	f7ff fb29 	bl	37ad8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38486:	4810      	ldr	r0, [pc, #64]	; (384c8 <z_impl_k_yield+0xf4>)
   38488:	f7fe f8a8 	bl	365dc <z_spin_unlock_valid>
   3848c:	b940      	cbnz	r0, 384a0 <z_impl_k_yield+0xcc>
   3848e:	490f      	ldr	r1, [pc, #60]	; (384cc <z_impl_k_yield+0xf8>)
   38490:	480c      	ldr	r0, [pc, #48]	; (384c4 <z_impl_k_yield+0xf0>)
   38492:	22d0      	movs	r2, #208	; 0xd0
   38494:	f004 fad2 	bl	3ca3c <assert_print>
   38498:	21d0      	movs	r1, #208	; 0xd0
   3849a:	480c      	ldr	r0, [pc, #48]	; (384cc <z_impl_k_yield+0xf8>)
   3849c:	f004 fac7 	bl	3ca2e <assert_post_action>
   384a0:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   384a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   384a6:	f7ea bbdd 	b.w	22c64 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   384aa:	428b      	cmp	r3, r1
   384ac:	d002      	beq.n	384b4 <z_impl_k_yield+0xe0>
   384ae:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   384b0:	2b00      	cmp	r3, #0
   384b2:	d1d9      	bne.n	38468 <z_impl_k_yield+0x94>
	node->prev = tail;
   384b4:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
   384b8:	600c      	str	r4, [r1, #0]
	list->tail = node;
   384ba:	626c      	str	r4, [r5, #36]	; 0x24
}
   384bc:	e7e0      	b.n	38480 <z_impl_k_yield+0xac>
   384be:	bf00      	nop
   384c0:	0004bb42 	.word	0x0004bb42
   384c4:	00043ff2 	.word	0x00043ff2
   384c8:	2001a544 	.word	0x2001a544
   384cc:	0004402c 	.word	0x0004402c
   384d0:	2001a500 	.word	0x2001a500
   384d4:	20018e00 	.word	0x20018e00
   384d8:	2001a520 	.word	0x2001a520

000384dc <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   384dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   384e0:	4605      	mov	r5, r0
   384e2:	460e      	mov	r6, r1
   384e4:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   384e8:	b153      	cbz	r3, 38500 <z_tick_sleep+0x24>
   384ea:	493a      	ldr	r1, [pc, #232]	; (385d4 <z_tick_sleep+0xf8>)
   384ec:	483a      	ldr	r0, [pc, #232]	; (385d8 <z_tick_sleep+0xfc>)
   384ee:	f240 524e 	movw	r2, #1358	; 0x54e
   384f2:	f004 faa3 	bl	3ca3c <assert_print>
   384f6:	f240 514e 	movw	r1, #1358	; 0x54e
   384fa:	4836      	ldr	r0, [pc, #216]	; (385d4 <z_tick_sleep+0xf8>)
   384fc:	f004 fa97 	bl	3ca2e <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   38500:	ea55 0306 	orrs.w	r3, r5, r6
   38504:	d103      	bne.n	3850e <z_tick_sleep+0x32>
	z_impl_k_yield();
   38506:	f7ff ff65 	bl	383d4 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   3850a:	2000      	movs	r0, #0
   3850c:	e05f      	b.n	385ce <z_tick_sleep+0xf2>
	if (Z_TICK_ABS(ticks) <= 0) {
   3850e:	f06f 0401 	mvn.w	r4, #1
   38512:	f04f 33ff 	mov.w	r3, #4294967295
   38516:	1b64      	subs	r4, r4, r5
   38518:	eb63 0306 	sbc.w	r3, r3, r6
   3851c:	2c01      	cmp	r4, #1
   3851e:	f173 0300 	sbcs.w	r3, r3, #0
   38522:	da02      	bge.n	3852a <z_tick_sleep+0x4e>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   38524:	f008 fdca 	bl	410bc <sys_clock_tick_get_32>
   38528:	1944      	adds	r4, r0, r5
   3852a:	f04f 0320 	mov.w	r3, #32
   3852e:	f3ef 8811 	mrs	r8, BASEPRI
   38532:	f383 8812 	msr	BASEPRI_MAX, r3
   38536:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3853a:	4828      	ldr	r0, [pc, #160]	; (385dc <z_tick_sleep+0x100>)
   3853c:	f7fe f840 	bl	365c0 <z_spin_lock_valid>
   38540:	b940      	cbnz	r0, 38554 <z_tick_sleep+0x78>
   38542:	4927      	ldr	r1, [pc, #156]	; (385e0 <z_tick_sleep+0x104>)
   38544:	4824      	ldr	r0, [pc, #144]	; (385d8 <z_tick_sleep+0xfc>)
   38546:	228e      	movs	r2, #142	; 0x8e
   38548:	f004 fa78 	bl	3ca3c <assert_print>
   3854c:	218e      	movs	r1, #142	; 0x8e
   3854e:	4824      	ldr	r0, [pc, #144]	; (385e0 <z_tick_sleep+0x104>)
   38550:	f004 fa6d 	bl	3ca2e <assert_post_action>
	pending_current = _current;
   38554:	4f23      	ldr	r7, [pc, #140]	; (385e4 <z_tick_sleep+0x108>)
	z_spin_lock_set_owner(l);
   38556:	4821      	ldr	r0, [pc, #132]	; (385dc <z_tick_sleep+0x100>)
   38558:	f7fe f850 	bl	365fc <z_spin_lock_set_owner>
   3855c:	68b8      	ldr	r0, [r7, #8]
   3855e:	4b22      	ldr	r3, [pc, #136]	; (385e8 <z_tick_sleep+0x10c>)
   38560:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   38562:	f7ff fced 	bl	37f40 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   38566:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   38568:	462a      	mov	r2, r5
   3856a:	4633      	mov	r3, r6
   3856c:	3018      	adds	r0, #24
   3856e:	491f      	ldr	r1, [pc, #124]	; (385ec <z_tick_sleep+0x110>)
   38570:	f000 f9ec 	bl	3894c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   38574:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38576:	4819      	ldr	r0, [pc, #100]	; (385dc <z_tick_sleep+0x100>)
   38578:	7b53      	ldrb	r3, [r2, #13]
   3857a:	f043 0310 	orr.w	r3, r3, #16
   3857e:	7353      	strb	r3, [r2, #13]
   38580:	f7fe f82c 	bl	365dc <z_spin_unlock_valid>
   38584:	b940      	cbnz	r0, 38598 <z_tick_sleep+0xbc>
   38586:	4916      	ldr	r1, [pc, #88]	; (385e0 <z_tick_sleep+0x104>)
   38588:	4813      	ldr	r0, [pc, #76]	; (385d8 <z_tick_sleep+0xfc>)
   3858a:	22d0      	movs	r2, #208	; 0xd0
   3858c:	f004 fa56 	bl	3ca3c <assert_print>
   38590:	21d0      	movs	r1, #208	; 0xd0
   38592:	4813      	ldr	r0, [pc, #76]	; (385e0 <z_tick_sleep+0x104>)
   38594:	f004 fa4b 	bl	3ca2e <assert_post_action>
   38598:	4640      	mov	r0, r8
   3859a:	f7ea fb63 	bl	22c64 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   3859e:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   385a0:	7b5b      	ldrb	r3, [r3, #13]
   385a2:	06db      	lsls	r3, r3, #27
   385a4:	d50a      	bpl.n	385bc <z_tick_sleep+0xe0>
   385a6:	490b      	ldr	r1, [pc, #44]	; (385d4 <z_tick_sleep+0xf8>)
   385a8:	480b      	ldr	r0, [pc, #44]	; (385d8 <z_tick_sleep+0xfc>)
   385aa:	f240 526f 	movw	r2, #1391	; 0x56f
   385ae:	f004 fa45 	bl	3ca3c <assert_print>
   385b2:	f240 516f 	movw	r1, #1391	; 0x56f
   385b6:	4807      	ldr	r0, [pc, #28]	; (385d4 <z_tick_sleep+0xf8>)
   385b8:	f004 fa39 	bl	3ca2e <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   385bc:	f008 fd7e 	bl	410bc <sys_clock_tick_get_32>
   385c0:	1a20      	subs	r0, r4, r0
   385c2:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   385c6:	2801      	cmp	r0, #1
   385c8:	f173 0300 	sbcs.w	r3, r3, #0
   385cc:	db9d      	blt.n	3850a <z_tick_sleep+0x2e>
}
   385ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   385d2:	bf00      	nop
   385d4:	0004bb42 	.word	0x0004bb42
   385d8:	00043ff2 	.word	0x00043ff2
   385dc:	2001a544 	.word	0x2001a544
   385e0:	0004402c 	.word	0x0004402c
   385e4:	2001a500 	.word	0x2001a500
   385e8:	2001a540 	.word	0x2001a540
   385ec:	00037ead 	.word	0x00037ead

000385f0 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   385f0:	b538      	push	{r3, r4, r5, lr}
   385f2:	4605      	mov	r5, r0
   385f4:	460c      	mov	r4, r1
   385f6:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   385fa:	b153      	cbz	r3, 38612 <z_impl_k_sleep+0x22>
   385fc:	4911      	ldr	r1, [pc, #68]	; (38644 <z_impl_k_sleep+0x54>)
   385fe:	4812      	ldr	r0, [pc, #72]	; (38648 <z_impl_k_sleep+0x58>)
   38600:	f240 527e 	movw	r2, #1406	; 0x57e
   38604:	f004 fa1a 	bl	3ca3c <assert_print>
   38608:	f240 517e 	movw	r1, #1406	; 0x57e
   3860c:	480d      	ldr	r0, [pc, #52]	; (38644 <z_impl_k_sleep+0x54>)
   3860e:	f004 fa0e 	bl	3ca2e <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   38612:	f1b4 3fff 	cmp.w	r4, #4294967295
   38616:	bf08      	it	eq
   38618:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   3861c:	d106      	bne.n	3862c <z_impl_k_sleep+0x3c>
		k_thread_suspend(_current);
   3861e:	4b0b      	ldr	r3, [pc, #44]	; (3864c <z_impl_k_sleep+0x5c>)
   38620:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   38622:	f7ff fdd9 	bl	381d8 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   38626:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   3862a:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   3862c:	4628      	mov	r0, r5
   3862e:	4621      	mov	r1, r4
   38630:	f7ff ff54 	bl	384dc <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   38634:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   38638:	fb80 0303 	smull	r0, r3, r0, r3
   3863c:	0bc0      	lsrs	r0, r0, #15
   3863e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   38642:	e7f2      	b.n	3862a <z_impl_k_sleep+0x3a>
   38644:	0004bb42 	.word	0x0004bb42
   38648:	00043ff2 	.word	0x00043ff2
   3864c:	2001a500 	.word	0x2001a500

00038650 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   38650:	4b01      	ldr	r3, [pc, #4]	; (38658 <z_impl_z_current_get+0x8>)
   38652:	6898      	ldr	r0, [r3, #8]
   38654:	4770      	bx	lr
   38656:	bf00      	nop
   38658:	2001a500 	.word	0x2001a500

0003865c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   3865c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   38660:	4604      	mov	r4, r0
   38662:	f04f 0320 	mov.w	r3, #32
   38666:	f3ef 8611 	mrs	r6, BASEPRI
   3866a:	f383 8812 	msr	BASEPRI_MAX, r3
   3866e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38672:	483e      	ldr	r0, [pc, #248]	; (3876c <z_thread_abort+0x110>)
   38674:	f7fd ffa4 	bl	365c0 <z_spin_lock_valid>
   38678:	b940      	cbnz	r0, 3868c <z_thread_abort+0x30>
   3867a:	493d      	ldr	r1, [pc, #244]	; (38770 <z_thread_abort+0x114>)
   3867c:	483d      	ldr	r0, [pc, #244]	; (38774 <z_thread_abort+0x118>)
   3867e:	228e      	movs	r2, #142	; 0x8e
   38680:	f004 f9dc 	bl	3ca3c <assert_print>
   38684:	218e      	movs	r1, #142	; 0x8e
   38686:	483a      	ldr	r0, [pc, #232]	; (38770 <z_thread_abort+0x114>)
   38688:	f004 f9d1 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   3868c:	4837      	ldr	r0, [pc, #220]	; (3876c <z_thread_abort+0x110>)
   3868e:	f7fd ffb5 	bl	365fc <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   38692:	7b63      	ldrb	r3, [r4, #13]
   38694:	071a      	lsls	r2, r3, #28
   38696:	d512      	bpl.n	386be <z_thread_abort+0x62>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38698:	4834      	ldr	r0, [pc, #208]	; (3876c <z_thread_abort+0x110>)
   3869a:	f7fd ff9f 	bl	365dc <z_spin_unlock_valid>
   3869e:	b940      	cbnz	r0, 386b2 <z_thread_abort+0x56>
   386a0:	4933      	ldr	r1, [pc, #204]	; (38770 <z_thread_abort+0x114>)
   386a2:	4834      	ldr	r0, [pc, #208]	; (38774 <z_thread_abort+0x118>)
   386a4:	22b9      	movs	r2, #185	; 0xb9
   386a6:	f004 f9c9 	bl	3ca3c <assert_print>
   386aa:	21b9      	movs	r1, #185	; 0xb9
   386ac:	4830      	ldr	r0, [pc, #192]	; (38770 <z_thread_abort+0x114>)
   386ae:	f004 f9be 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   386b2:	f386 8811 	msr	BASEPRI, r6
   386b6:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   386ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   386be:	f023 0220 	bic.w	r2, r3, #32
   386c2:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   386c6:	09d2      	lsrs	r2, r2, #7
   386c8:	d138      	bne.n	3873c <z_thread_abort+0xe0>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   386ca:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   386cc:	68a3      	ldr	r3, [r4, #8]
   386ce:	b113      	cbz	r3, 386d6 <z_thread_abort+0x7a>
			unpend_thread_no_timeout(thread);
   386d0:	4620      	mov	r0, r4
   386d2:	f7ff f9a9 	bl	37a28 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   386d6:	f104 0018 	add.w	r0, r4, #24
   386da:	f000 f9e5 	bl	38aa8 <z_abort_timeout>
   386de:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   386e2:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   386e6:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   386e8:	42bd      	cmp	r5, r7
   386ea:	d000      	beq.n	386ee <z_thread_abort+0x92>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   386ec:	bb85      	cbnz	r5, 38750 <z_thread_abort+0xf4>
		update_cache(1);
   386ee:	2001      	movs	r0, #1
   386f0:	f7ff f9f2 	bl	37ad8 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   386f4:	4b20      	ldr	r3, [pc, #128]	; (38778 <z_thread_abort+0x11c>)
   386f6:	689b      	ldr	r3, [r3, #8]
   386f8:	42a3      	cmp	r3, r4
   386fa:	d1cd      	bne.n	38698 <z_thread_abort+0x3c>
   386fc:	f3ef 8305 	mrs	r3, IPSR
   38700:	2b00      	cmp	r3, #0
   38702:	d1c9      	bne.n	38698 <z_thread_abort+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38704:	4819      	ldr	r0, [pc, #100]	; (3876c <z_thread_abort+0x110>)
   38706:	f7fd ff69 	bl	365dc <z_spin_unlock_valid>
   3870a:	b940      	cbnz	r0, 3871e <z_thread_abort+0xc2>
   3870c:	4918      	ldr	r1, [pc, #96]	; (38770 <z_thread_abort+0x114>)
   3870e:	4819      	ldr	r0, [pc, #100]	; (38774 <z_thread_abort+0x118>)
   38710:	22d0      	movs	r2, #208	; 0xd0
   38712:	f004 f993 	bl	3ca3c <assert_print>
   38716:	21d0      	movs	r1, #208	; 0xd0
   38718:	4815      	ldr	r0, [pc, #84]	; (38770 <z_thread_abort+0x114>)
   3871a:	f004 f988 	bl	3ca2e <assert_post_action>
   3871e:	4630      	mov	r0, r6
   38720:	f7ea faa0 	bl	22c64 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   38724:	f240 62ac 	movw	r2, #1708	; 0x6ac
   38728:	4914      	ldr	r1, [pc, #80]	; (3877c <z_thread_abort+0x120>)
   3872a:	4812      	ldr	r0, [pc, #72]	; (38774 <z_thread_abort+0x118>)
   3872c:	f004 f986 	bl	3ca3c <assert_print>
   38730:	f240 61ac 	movw	r1, #1708	; 0x6ac
   38734:	4811      	ldr	r0, [pc, #68]	; (3877c <z_thread_abort+0x120>)
   38736:	f004 f97a 	bl	3ca2e <assert_post_action>
   3873a:	e7ad      	b.n	38698 <z_thread_abort+0x3c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   3873c:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   38740:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   38744:	4621      	mov	r1, r4
   38746:	480e      	ldr	r0, [pc, #56]	; (38780 <z_thread_abort+0x124>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   38748:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   3874a:	f7ff f94f 	bl	379ec <z_priq_dumb_remove>
}
   3874e:	e7bd      	b.n	386cc <z_thread_abort+0x70>
		unpend_thread_no_timeout(thread);
   38750:	4628      	mov	r0, r5
   38752:	f7ff f969 	bl	37a28 <unpend_thread_no_timeout>
   38756:	f105 0018 	add.w	r0, r5, #24
   3875a:	f000 f9a5 	bl	38aa8 <z_abort_timeout>
		ready_thread(thread);
   3875e:	4628      	mov	r0, r5
   38760:	f8c5 8088 	str.w	r8, [r5, #136]	; 0x88
   38764:	f7ff fa9e 	bl	37ca4 <ready_thread>
   38768:	e7bd      	b.n	386e6 <z_thread_abort+0x8a>
   3876a:	bf00      	nop
   3876c:	2001a544 	.word	0x2001a544
   38770:	0004402c 	.word	0x0004402c
   38774:	00043ff2 	.word	0x00043ff2
   38778:	2001a500 	.word	0x2001a500
   3877c:	0004bb42 	.word	0x0004bb42
   38780:	2001a520 	.word	0x2001a520

00038784 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   38784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   38786:	4604      	mov	r4, r0
   38788:	460e      	mov	r6, r1
   3878a:	4615      	mov	r5, r2
	__asm__ volatile(
   3878c:	f04f 0320 	mov.w	r3, #32
   38790:	f3ef 8711 	mrs	r7, BASEPRI
   38794:	f383 8812 	msr	BASEPRI_MAX, r3
   38798:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3879c:	481a      	ldr	r0, [pc, #104]	; (38808 <z_sched_wake+0x84>)
   3879e:	f7fd ff0f 	bl	365c0 <z_spin_lock_valid>
   387a2:	b940      	cbnz	r0, 387b6 <z_sched_wake+0x32>
   387a4:	4919      	ldr	r1, [pc, #100]	; (3880c <z_sched_wake+0x88>)
   387a6:	481a      	ldr	r0, [pc, #104]	; (38810 <z_sched_wake+0x8c>)
   387a8:	228e      	movs	r2, #142	; 0x8e
   387aa:	f004 f947 	bl	3ca3c <assert_print>
   387ae:	218e      	movs	r1, #142	; 0x8e
   387b0:	4816      	ldr	r0, [pc, #88]	; (3880c <z_sched_wake+0x88>)
   387b2:	f004 f93c 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   387b6:	4814      	ldr	r0, [pc, #80]	; (38808 <z_sched_wake+0x84>)
   387b8:	f7fd ff20 	bl	365fc <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);
   387bc:	4620      	mov	r0, r4
   387be:	f008 fc67 	bl	41090 <z_priq_dumb_best>

		if (thread != NULL) {
   387c2:	4604      	mov	r4, r0
   387c4:	b160      	cbz	r0, 387e0 <z_sched_wake+0x5c>
   387c6:	f8c0 6088 	str.w	r6, [r0, #136]	; 0x88
	thread->base.swap_data = data;
   387ca:	6145      	str	r5, [r0, #20]
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   387cc:	f7ff f92c 	bl	37a28 <unpend_thread_no_timeout>
   387d0:	f104 0018 	add.w	r0, r4, #24
   387d4:	f000 f968 	bl	38aa8 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   387d8:	4620      	mov	r0, r4
   387da:	f7ff fa63 	bl	37ca4 <ready_thread>
			ret = true;
   387de:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   387e0:	4809      	ldr	r0, [pc, #36]	; (38808 <z_sched_wake+0x84>)
   387e2:	f7fd fefb 	bl	365dc <z_spin_unlock_valid>
   387e6:	b940      	cbnz	r0, 387fa <z_sched_wake+0x76>
   387e8:	4908      	ldr	r1, [pc, #32]	; (3880c <z_sched_wake+0x88>)
   387ea:	4809      	ldr	r0, [pc, #36]	; (38810 <z_sched_wake+0x8c>)
   387ec:	22b9      	movs	r2, #185	; 0xb9
   387ee:	f004 f925 	bl	3ca3c <assert_print>
   387f2:	21b9      	movs	r1, #185	; 0xb9
   387f4:	4805      	ldr	r0, [pc, #20]	; (3880c <z_sched_wake+0x88>)
   387f6:	f004 f91a 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   387fa:	f387 8811 	msr	BASEPRI, r7
   387fe:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   38802:	4620      	mov	r0, r4
   38804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   38806:	bf00      	nop
   38808:	2001a544 	.word	0x2001a544
   3880c:	0004402c 	.word	0x0004402c
   38810:	00043ff2 	.word	0x00043ff2

00038814 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   38814:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   38816:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   3881a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   3881c:	e9cd 6700 	strd	r6, r7, [sp]
   38820:	f7ff fc32 	bl	38088 <z_pend_curr>

	if (data != NULL) {
   38824:	b11c      	cbz	r4, 3882e <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   38826:	4b03      	ldr	r3, [pc, #12]	; (38834 <z_sched_wait+0x20>)
   38828:	689b      	ldr	r3, [r3, #8]
   3882a:	695b      	ldr	r3, [r3, #20]
   3882c:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   3882e:	b002      	add	sp, #8
   38830:	bdd0      	pop	{r4, r6, r7, pc}
   38832:	bf00      	nop
   38834:	2001a500 	.word	0x2001a500

00038838 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   38838:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   3883a:	4806      	ldr	r0, [pc, #24]	; (38854 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   3883c:	4a06      	ldr	r2, [pc, #24]	; (38858 <z_data_copy+0x20>)
   3883e:	4907      	ldr	r1, [pc, #28]	; (3885c <z_data_copy+0x24>)
   38840:	1a12      	subs	r2, r2, r0
   38842:	f008 fb54 	bl	40eee <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   38846:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   3884a:	4a05      	ldr	r2, [pc, #20]	; (38860 <z_data_copy+0x28>)
   3884c:	4905      	ldr	r1, [pc, #20]	; (38864 <z_data_copy+0x2c>)
   3884e:	4806      	ldr	r0, [pc, #24]	; (38868 <z_data_copy+0x30>)
   38850:	f008 bb4d 	b.w	40eee <z_early_memcpy>
   38854:	20014500 	.word	0x20014500
   38858:	2001514c 	.word	0x2001514c
   3885c:	0004bfcc 	.word	0x0004bfcc
   38860:	00000000 	.word	0x00000000
   38864:	0004bfb4 	.word	0x0004bfb4
   38868:	20014500 	.word	0x20014500

0003886c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   3886c:	4b03      	ldr	r3, [pc, #12]	; (3887c <elapsed+0x10>)
   3886e:	681b      	ldr	r3, [r3, #0]
   38870:	b90b      	cbnz	r3, 38876 <elapsed+0xa>
   38872:	f7ec be6d 	b.w	25550 <sys_clock_elapsed>
}
   38876:	2000      	movs	r0, #0
   38878:	4770      	bx	lr
   3887a:	bf00      	nop
   3887c:	2001a550 	.word	0x2001a550

00038880 <next_timeout>:
	return list->head == list;
   38880:	4b10      	ldr	r3, [pc, #64]	; (388c4 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   38882:	b510      	push	{r4, lr}
   38884:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38886:	429c      	cmp	r4, r3
   38888:	bf08      	it	eq
   3888a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   3888c:	f7ff ffee 	bl	3886c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   38890:	b1a4      	cbz	r4, 388bc <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   38892:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   38896:	1a1b      	subs	r3, r3, r0
   38898:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   3889c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   388a0:	f170 0200 	sbcs.w	r2, r0, #0
   388a4:	da0a      	bge.n	388bc <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   388a6:	2800      	cmp	r0, #0
   388a8:	bfac      	ite	ge
   388aa:	4618      	movge	r0, r3
   388ac:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   388ae:	4b06      	ldr	r3, [pc, #24]	; (388c8 <next_timeout+0x48>)
   388b0:	691b      	ldr	r3, [r3, #16]
   388b2:	b113      	cbz	r3, 388ba <next_timeout+0x3a>
   388b4:	4298      	cmp	r0, r3
   388b6:	bfa8      	it	ge
   388b8:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   388ba:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   388bc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   388c0:	e7f5      	b.n	388ae <next_timeout+0x2e>
   388c2:	bf00      	nop
   388c4:	20014a64 	.word	0x20014a64
   388c8:	2001a500 	.word	0x2001a500

000388cc <remove_timeout>:
{
   388cc:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   388ce:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   388d0:	b168      	cbz	r0, 388ee <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   388d2:	4a0a      	ldr	r2, [pc, #40]	; (388fc <remove_timeout+0x30>)
   388d4:	6852      	ldr	r2, [r2, #4]
   388d6:	4290      	cmp	r0, r2
   388d8:	d009      	beq.n	388ee <remove_timeout+0x22>
	if (next(t) != NULL) {
   388da:	b143      	cbz	r3, 388ee <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   388dc:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   388e0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   388e4:	1912      	adds	r2, r2, r4
   388e6:	eb41 0105 	adc.w	r1, r1, r5
   388ea:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
   388ee:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   388f0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   388f2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   388f4:	2300      	movs	r3, #0
	node->prev = NULL;
   388f6:	e9c0 3300 	strd	r3, r3, [r0]
}
   388fa:	bd30      	pop	{r4, r5, pc}
   388fc:	20014a64 	.word	0x20014a64

00038900 <timeout_rem>:
	return ret;
}

/* must be locked */
static k_ticks_t timeout_rem(const struct _timeout *timeout)
{
   38900:	b570      	push	{r4, r5, r6, lr}
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   38902:	6804      	ldr	r4, [r0, #0]
   38904:	b1e4      	cbz	r4, 38940 <timeout_rem+0x40>
	return list->head == list;
   38906:	4a10      	ldr	r2, [pc, #64]	; (38948 <timeout_rem+0x48>)
   38908:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3890a:	4293      	cmp	r3, r2
   3890c:	d015      	beq.n	3893a <timeout_rem+0x3a>
	return (node == list->tail) ? NULL : node->next;
   3890e:	2400      	movs	r4, #0
   38910:	4625      	mov	r5, r4
   38912:	6851      	ldr	r1, [r2, #4]
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   38914:	b933      	cbnz	r3, 38924 <timeout_rem+0x24>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   38916:	f7ff ffa9 	bl	3886c <elapsed>
   3891a:	4601      	mov	r1, r0
   3891c:	1a20      	subs	r0, r4, r0
   3891e:	eb65 71e1 	sbc.w	r1, r5, r1, asr #31
}
   38922:	bd70      	pop	{r4, r5, r6, pc}
		ticks += t->dticks;
   38924:	e9d3 2604 	ldrd	r2, r6, [r3, #16]
   38928:	18a4      	adds	r4, r4, r2
   3892a:	eb45 0506 	adc.w	r5, r5, r6
		if (timeout == t) {
   3892e:	4283      	cmp	r3, r0
   38930:	d0f1      	beq.n	38916 <timeout_rem+0x16>
   38932:	428b      	cmp	r3, r1
   38934:	d0ef      	beq.n	38916 <timeout_rem+0x16>
   38936:	681b      	ldr	r3, [r3, #0]
   38938:	e7ec      	b.n	38914 <timeout_rem+0x14>
   3893a:	2400      	movs	r4, #0
   3893c:	4625      	mov	r5, r4
   3893e:	e7ea      	b.n	38916 <timeout_rem+0x16>
		return 0;
   38940:	4620      	mov	r0, r4
   38942:	4621      	mov	r1, r4
   38944:	e7ed      	b.n	38922 <timeout_rem+0x22>
   38946:	bf00      	nop
   38948:	20014a64 	.word	0x20014a64

0003894c <z_add_timeout>:
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3894c:	f1b3 3fff 	cmp.w	r3, #4294967295
   38950:	bf08      	it	eq
   38952:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   38956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3895a:	4604      	mov	r4, r0
   3895c:	460e      	mov	r6, r1
   3895e:	4698      	mov	r8, r3
   38960:	4615      	mov	r5, r2
   38962:	461f      	mov	r7, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   38964:	f000 8090 	beq.w	38a88 <z_add_timeout+0x13c>
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   38968:	6803      	ldr	r3, [r0, #0]
   3896a:	b143      	cbz	r3, 3897e <z_add_timeout+0x32>
   3896c:	4947      	ldr	r1, [pc, #284]	; (38a8c <z_add_timeout+0x140>)
   3896e:	4848      	ldr	r0, [pc, #288]	; (38a90 <z_add_timeout+0x144>)
   38970:	2263      	movs	r2, #99	; 0x63
   38972:	f004 f863 	bl	3ca3c <assert_print>
   38976:	2163      	movs	r1, #99	; 0x63
   38978:	4844      	ldr	r0, [pc, #272]	; (38a8c <z_add_timeout+0x140>)
   3897a:	f004 f858 	bl	3ca2e <assert_post_action>
	to->fn = fn;
   3897e:	60a6      	str	r6, [r4, #8]
	__asm__ volatile(
   38980:	f04f 0320 	mov.w	r3, #32
   38984:	f3ef 8611 	mrs	r6, BASEPRI
   38988:	f383 8812 	msr	BASEPRI_MAX, r3
   3898c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38990:	4840      	ldr	r0, [pc, #256]	; (38a94 <z_add_timeout+0x148>)
   38992:	f7fd fe15 	bl	365c0 <z_spin_lock_valid>
   38996:	b940      	cbnz	r0, 389aa <z_add_timeout+0x5e>
   38998:	493f      	ldr	r1, [pc, #252]	; (38a98 <z_add_timeout+0x14c>)
   3899a:	483d      	ldr	r0, [pc, #244]	; (38a90 <z_add_timeout+0x144>)
   3899c:	228e      	movs	r2, #142	; 0x8e
   3899e:	f004 f84d 	bl	3ca3c <assert_print>
   389a2:	218e      	movs	r1, #142	; 0x8e
   389a4:	483c      	ldr	r0, [pc, #240]	; (38a98 <z_add_timeout+0x14c>)
   389a6:	f004 f842 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   389aa:	483a      	ldr	r0, [pc, #232]	; (38a94 <z_add_timeout+0x148>)
   389ac:	f7fd fe26 	bl	365fc <z_spin_lock_set_owner>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   389b0:	f06f 0201 	mvn.w	r2, #1
   389b4:	f04f 30ff 	mov.w	r0, #4294967295
   389b8:	1b53      	subs	r3, r2, r5
   389ba:	eb60 0307 	sbc.w	r3, r0, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   389be:	2b00      	cmp	r3, #0
   389c0:	db1b      	blt.n	389fa <z_add_timeout+0xae>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   389c2:	4b36      	ldr	r3, [pc, #216]	; (38a9c <z_add_timeout+0x150>)
   389c4:	e9d3 1300 	ldrd	r1, r3, [r3]
   389c8:	1a52      	subs	r2, r2, r1
   389ca:	eb60 0303 	sbc.w	r3, r0, r3
   389ce:	1b55      	subs	r5, r2, r5
			to->dticks = MAX(1, ticks);
   389d0:	eb63 0707 	sbc.w	r7, r3, r7
   389d4:	2d01      	cmp	r5, #1
   389d6:	f177 0300 	sbcs.w	r3, r7, #0
   389da:	bfbc      	itt	lt
   389dc:	2501      	movlt	r5, #1
   389de:	2700      	movlt	r7, #0
   389e0:	e9c4 5704 	strd	r5, r7, [r4, #16]
	return list->head == list;
   389e4:	4a2e      	ldr	r2, [pc, #184]	; (38aa0 <z_add_timeout+0x154>)
	sys_dnode_t *const tail = list->tail;
   389e6:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   389ea:	4293      	cmp	r3, r2
   389ec:	d118      	bne.n	38a20 <z_add_timeout+0xd4>
	node->prev = tail;
   389ee:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
   389f2:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   389f6:	6054      	str	r4, [r2, #4]
}
   389f8:	e026      	b.n	38a48 <z_add_timeout+0xfc>
			to->dticks = timeout.ticks + 1 + elapsed();
   389fa:	f7ff ff37 	bl	3886c <elapsed>
   389fe:	3501      	adds	r5, #1
   38a00:	f148 0800 	adc.w	r8, r8, #0
   38a04:	182d      	adds	r5, r5, r0
   38a06:	eb48 70e0 	adc.w	r0, r8, r0, asr #31
   38a0a:	e9c4 5004 	strd	r5, r0, [r4, #16]
   38a0e:	e7e9      	b.n	389e4 <z_add_timeout+0x98>
			to->dticks -= t->dticks;
   38a10:	1a09      	subs	r1, r1, r0
   38a12:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   38a16:	459c      	cmp	ip, r3
   38a18:	e9c4 1504 	strd	r1, r5, [r4, #16]
   38a1c:	d0e7      	beq.n	389ee <z_add_timeout+0xa2>
   38a1e:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   38a20:	2b00      	cmp	r3, #0
   38a22:	d0e4      	beq.n	389ee <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
   38a24:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
   38a28:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   38a2c:	4281      	cmp	r1, r0
   38a2e:	eb75 0e07 	sbcs.w	lr, r5, r7
   38a32:	daed      	bge.n	38a10 <z_add_timeout+0xc4>
				t->dticks -= to->dticks;
   38a34:	1a41      	subs	r1, r0, r1
   38a36:	eb67 0505 	sbc.w	r5, r7, r5
   38a3a:	e9c3 1504 	strd	r1, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   38a3e:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   38a40:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   38a44:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   38a46:	605c      	str	r4, [r3, #4]
	return list->head == list;
   38a48:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38a4a:	4293      	cmp	r3, r2
   38a4c:	d00b      	beq.n	38a66 <z_add_timeout+0x11a>
		if (to == first()) {
   38a4e:	429c      	cmp	r4, r3
   38a50:	d109      	bne.n	38a66 <z_add_timeout+0x11a>
			int32_t next_time = next_timeout();
   38a52:	f7ff ff15 	bl	38880 <next_timeout>
			if (next_time == 0 ||
   38a56:	b118      	cbz	r0, 38a60 <z_add_timeout+0x114>
			    _current_cpu->slice_ticks != next_time) {
   38a58:	4b12      	ldr	r3, [pc, #72]	; (38aa4 <z_add_timeout+0x158>)
			if (next_time == 0 ||
   38a5a:	691b      	ldr	r3, [r3, #16]
   38a5c:	4283      	cmp	r3, r0
   38a5e:	d002      	beq.n	38a66 <z_add_timeout+0x11a>
				sys_clock_set_timeout(next_time, false);
   38a60:	2100      	movs	r1, #0
   38a62:	f7ec fd45 	bl	254f0 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38a66:	480b      	ldr	r0, [pc, #44]	; (38a94 <z_add_timeout+0x148>)
   38a68:	f7fd fdb8 	bl	365dc <z_spin_unlock_valid>
   38a6c:	b940      	cbnz	r0, 38a80 <z_add_timeout+0x134>
   38a6e:	490a      	ldr	r1, [pc, #40]	; (38a98 <z_add_timeout+0x14c>)
   38a70:	4807      	ldr	r0, [pc, #28]	; (38a90 <z_add_timeout+0x144>)
   38a72:	22b9      	movs	r2, #185	; 0xb9
   38a74:	f003 ffe2 	bl	3ca3c <assert_print>
   38a78:	21b9      	movs	r1, #185	; 0xb9
   38a7a:	4807      	ldr	r0, [pc, #28]	; (38a98 <z_add_timeout+0x14c>)
   38a7c:	f003 ffd7 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   38a80:	f386 8811 	msr	BASEPRI, r6
   38a84:	f3bf 8f6f 	isb	sy
}
   38a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   38a8c:	0004bb64 	.word	0x0004bb64
   38a90:	00043ff2 	.word	0x00043ff2
   38a94:	2001a554 	.word	0x2001a554
   38a98:	0004402c 	.word	0x0004402c
   38a9c:	20018fa0 	.word	0x20018fa0
   38aa0:	20014a64 	.word	0x20014a64
   38aa4:	2001a500 	.word	0x2001a500

00038aa8 <z_abort_timeout>:
{
   38aa8:	b538      	push	{r3, r4, r5, lr}
   38aaa:	4604      	mov	r4, r0
	__asm__ volatile(
   38aac:	f04f 0320 	mov.w	r3, #32
   38ab0:	f3ef 8511 	mrs	r5, BASEPRI
   38ab4:	f383 8812 	msr	BASEPRI_MAX, r3
   38ab8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38abc:	4815      	ldr	r0, [pc, #84]	; (38b14 <z_abort_timeout+0x6c>)
   38abe:	f7fd fd7f 	bl	365c0 <z_spin_lock_valid>
   38ac2:	b940      	cbnz	r0, 38ad6 <z_abort_timeout+0x2e>
   38ac4:	4914      	ldr	r1, [pc, #80]	; (38b18 <z_abort_timeout+0x70>)
   38ac6:	4815      	ldr	r0, [pc, #84]	; (38b1c <z_abort_timeout+0x74>)
   38ac8:	228e      	movs	r2, #142	; 0x8e
   38aca:	f003 ffb7 	bl	3ca3c <assert_print>
   38ace:	218e      	movs	r1, #142	; 0x8e
   38ad0:	4811      	ldr	r0, [pc, #68]	; (38b18 <z_abort_timeout+0x70>)
   38ad2:	f003 ffac 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   38ad6:	480f      	ldr	r0, [pc, #60]	; (38b14 <z_abort_timeout+0x6c>)
   38ad8:	f7fd fd90 	bl	365fc <z_spin_lock_set_owner>
		if (sys_dnode_is_linked(&to->node)) {
   38adc:	6823      	ldr	r3, [r4, #0]
   38ade:	b1b3      	cbz	r3, 38b0e <z_abort_timeout+0x66>
			remove_timeout(to);
   38ae0:	4620      	mov	r0, r4
   38ae2:	f7ff fef3 	bl	388cc <remove_timeout>
			ret = 0;
   38ae6:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38ae8:	480a      	ldr	r0, [pc, #40]	; (38b14 <z_abort_timeout+0x6c>)
   38aea:	f7fd fd77 	bl	365dc <z_spin_unlock_valid>
   38aee:	b940      	cbnz	r0, 38b02 <z_abort_timeout+0x5a>
   38af0:	4909      	ldr	r1, [pc, #36]	; (38b18 <z_abort_timeout+0x70>)
   38af2:	480a      	ldr	r0, [pc, #40]	; (38b1c <z_abort_timeout+0x74>)
   38af4:	22b9      	movs	r2, #185	; 0xb9
   38af6:	f003 ffa1 	bl	3ca3c <assert_print>
   38afa:	21b9      	movs	r1, #185	; 0xb9
   38afc:	4806      	ldr	r0, [pc, #24]	; (38b18 <z_abort_timeout+0x70>)
   38afe:	f003 ff96 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   38b02:	f385 8811 	msr	BASEPRI, r5
   38b06:	f3bf 8f6f 	isb	sy
}
   38b0a:	4620      	mov	r0, r4
   38b0c:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   38b0e:	f06f 0415 	mvn.w	r4, #21
   38b12:	e7e9      	b.n	38ae8 <z_abort_timeout+0x40>
   38b14:	2001a554 	.word	0x2001a554
   38b18:	0004402c 	.word	0x0004402c
   38b1c:	00043ff2 	.word	0x00043ff2

00038b20 <z_timeout_remaining>:

k_ticks_t z_timeout_remaining(const struct _timeout *timeout)
{
   38b20:	b570      	push	{r4, r5, r6, lr}
   38b22:	4604      	mov	r4, r0
	__asm__ volatile(
   38b24:	f04f 0320 	mov.w	r3, #32
   38b28:	f3ef 8611 	mrs	r6, BASEPRI
   38b2c:	f383 8812 	msr	BASEPRI_MAX, r3
   38b30:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38b34:	4814      	ldr	r0, [pc, #80]	; (38b88 <z_timeout_remaining+0x68>)
   38b36:	f7fd fd43 	bl	365c0 <z_spin_lock_valid>
   38b3a:	b940      	cbnz	r0, 38b4e <z_timeout_remaining+0x2e>
   38b3c:	4913      	ldr	r1, [pc, #76]	; (38b8c <z_timeout_remaining+0x6c>)
   38b3e:	4814      	ldr	r0, [pc, #80]	; (38b90 <z_timeout_remaining+0x70>)
   38b40:	228e      	movs	r2, #142	; 0x8e
   38b42:	f003 ff7b 	bl	3ca3c <assert_print>
   38b46:	218e      	movs	r1, #142	; 0x8e
   38b48:	4810      	ldr	r0, [pc, #64]	; (38b8c <z_timeout_remaining+0x6c>)
   38b4a:	f003 ff70 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   38b4e:	480e      	ldr	r0, [pc, #56]	; (38b88 <z_timeout_remaining+0x68>)
   38b50:	f7fd fd54 	bl	365fc <z_spin_lock_set_owner>
	k_ticks_t ticks = 0;

	LOCKED(&timeout_lock) {
		ticks = timeout_rem(timeout);
   38b54:	4620      	mov	r0, r4
   38b56:	f7ff fed3 	bl	38900 <timeout_rem>
   38b5a:	4605      	mov	r5, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38b5c:	480a      	ldr	r0, [pc, #40]	; (38b88 <z_timeout_remaining+0x68>)
   38b5e:	460c      	mov	r4, r1
   38b60:	f7fd fd3c 	bl	365dc <z_spin_unlock_valid>
   38b64:	b940      	cbnz	r0, 38b78 <z_timeout_remaining+0x58>
   38b66:	4909      	ldr	r1, [pc, #36]	; (38b8c <z_timeout_remaining+0x6c>)
   38b68:	4809      	ldr	r0, [pc, #36]	; (38b90 <z_timeout_remaining+0x70>)
   38b6a:	22b9      	movs	r2, #185	; 0xb9
   38b6c:	f003 ff66 	bl	3ca3c <assert_print>
   38b70:	21b9      	movs	r1, #185	; 0xb9
   38b72:	4806      	ldr	r0, [pc, #24]	; (38b8c <z_timeout_remaining+0x6c>)
   38b74:	f003 ff5b 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   38b78:	f386 8811 	msr	BASEPRI, r6
   38b7c:	f3bf 8f6f 	isb	sy
	}

	return ticks;
}
   38b80:	4628      	mov	r0, r5
   38b82:	4621      	mov	r1, r4
   38b84:	bd70      	pop	{r4, r5, r6, pc}
   38b86:	bf00      	nop
   38b88:	2001a554 	.word	0x2001a554
   38b8c:	0004402c 	.word	0x0004402c
   38b90:	00043ff2 	.word	0x00043ff2

00038b94 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   38b94:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   38b96:	f04f 0320 	mov.w	r3, #32
   38b9a:	f3ef 8511 	mrs	r5, BASEPRI
   38b9e:	f383 8812 	msr	BASEPRI_MAX, r3
   38ba2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38ba6:	4813      	ldr	r0, [pc, #76]	; (38bf4 <z_get_next_timeout_expiry+0x60>)
   38ba8:	f7fd fd0a 	bl	365c0 <z_spin_lock_valid>
   38bac:	b940      	cbnz	r0, 38bc0 <z_get_next_timeout_expiry+0x2c>
   38bae:	4912      	ldr	r1, [pc, #72]	; (38bf8 <z_get_next_timeout_expiry+0x64>)
   38bb0:	4812      	ldr	r0, [pc, #72]	; (38bfc <z_get_next_timeout_expiry+0x68>)
   38bb2:	228e      	movs	r2, #142	; 0x8e
   38bb4:	f003 ff42 	bl	3ca3c <assert_print>
   38bb8:	218e      	movs	r1, #142	; 0x8e
   38bba:	480f      	ldr	r0, [pc, #60]	; (38bf8 <z_get_next_timeout_expiry+0x64>)
   38bbc:	f003 ff37 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   38bc0:	480c      	ldr	r0, [pc, #48]	; (38bf4 <z_get_next_timeout_expiry+0x60>)
   38bc2:	f7fd fd1b 	bl	365fc <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   38bc6:	f7ff fe5b 	bl	38880 <next_timeout>
   38bca:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38bcc:	4809      	ldr	r0, [pc, #36]	; (38bf4 <z_get_next_timeout_expiry+0x60>)
   38bce:	f7fd fd05 	bl	365dc <z_spin_unlock_valid>
   38bd2:	b940      	cbnz	r0, 38be6 <z_get_next_timeout_expiry+0x52>
   38bd4:	4908      	ldr	r1, [pc, #32]	; (38bf8 <z_get_next_timeout_expiry+0x64>)
   38bd6:	4809      	ldr	r0, [pc, #36]	; (38bfc <z_get_next_timeout_expiry+0x68>)
   38bd8:	22b9      	movs	r2, #185	; 0xb9
   38bda:	f003 ff2f 	bl	3ca3c <assert_print>
   38bde:	21b9      	movs	r1, #185	; 0xb9
   38be0:	4805      	ldr	r0, [pc, #20]	; (38bf8 <z_get_next_timeout_expiry+0x64>)
   38be2:	f003 ff24 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   38be6:	f385 8811 	msr	BASEPRI, r5
   38bea:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   38bee:	4620      	mov	r0, r4
   38bf0:	bd38      	pop	{r3, r4, r5, pc}
   38bf2:	bf00      	nop
   38bf4:	2001a554 	.word	0x2001a554
   38bf8:	0004402c 	.word	0x0004402c
   38bfc:	00043ff2 	.word	0x00043ff2

00038c00 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   38c00:	b570      	push	{r4, r5, r6, lr}
   38c02:	4604      	mov	r4, r0
   38c04:	460d      	mov	r5, r1
	__asm__ volatile(
   38c06:	f04f 0320 	mov.w	r3, #32
   38c0a:	f3ef 8611 	mrs	r6, BASEPRI
   38c0e:	f383 8812 	msr	BASEPRI_MAX, r3
   38c12:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38c16:	4816      	ldr	r0, [pc, #88]	; (38c70 <z_set_timeout_expiry+0x70>)
   38c18:	f7fd fcd2 	bl	365c0 <z_spin_lock_valid>
   38c1c:	b940      	cbnz	r0, 38c30 <z_set_timeout_expiry+0x30>
   38c1e:	4915      	ldr	r1, [pc, #84]	; (38c74 <z_set_timeout_expiry+0x74>)
   38c20:	4815      	ldr	r0, [pc, #84]	; (38c78 <z_set_timeout_expiry+0x78>)
   38c22:	228e      	movs	r2, #142	; 0x8e
   38c24:	f003 ff0a 	bl	3ca3c <assert_print>
   38c28:	218e      	movs	r1, #142	; 0x8e
   38c2a:	4812      	ldr	r0, [pc, #72]	; (38c74 <z_set_timeout_expiry+0x74>)
   38c2c:	f003 feff 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   38c30:	480f      	ldr	r0, [pc, #60]	; (38c70 <z_set_timeout_expiry+0x70>)
   38c32:	f7fd fce3 	bl	365fc <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   38c36:	f7ff fe23 	bl	38880 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   38c3a:	2801      	cmp	r0, #1
   38c3c:	dd05      	ble.n	38c4a <z_set_timeout_expiry+0x4a>
   38c3e:	42a0      	cmp	r0, r4
   38c40:	db03      	blt.n	38c4a <z_set_timeout_expiry+0x4a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   38c42:	4629      	mov	r1, r5
   38c44:	4620      	mov	r0, r4
   38c46:	f7ec fc53 	bl	254f0 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38c4a:	4809      	ldr	r0, [pc, #36]	; (38c70 <z_set_timeout_expiry+0x70>)
   38c4c:	f7fd fcc6 	bl	365dc <z_spin_unlock_valid>
   38c50:	b940      	cbnz	r0, 38c64 <z_set_timeout_expiry+0x64>
   38c52:	4908      	ldr	r1, [pc, #32]	; (38c74 <z_set_timeout_expiry+0x74>)
   38c54:	4808      	ldr	r0, [pc, #32]	; (38c78 <z_set_timeout_expiry+0x78>)
   38c56:	22b9      	movs	r2, #185	; 0xb9
   38c58:	f003 fef0 	bl	3ca3c <assert_print>
   38c5c:	21b9      	movs	r1, #185	; 0xb9
   38c5e:	4805      	ldr	r0, [pc, #20]	; (38c74 <z_set_timeout_expiry+0x74>)
   38c60:	f003 fee5 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   38c64:	f386 8811 	msr	BASEPRI, r6
   38c68:	f3bf 8f6f 	isb	sy
		}
	}
}
   38c6c:	bd70      	pop	{r4, r5, r6, pc}
   38c6e:	bf00      	nop
   38c70:	2001a554 	.word	0x2001a554
   38c74:	0004402c 	.word	0x0004402c
   38c78:	00043ff2 	.word	0x00043ff2

00038c7c <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   38c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   38c80:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   38c82:	f7fe ffa9 	bl	37bd8 <z_time_slice>
	__asm__ volatile(
   38c86:	f04f 0320 	mov.w	r3, #32
   38c8a:	f3ef 8511 	mrs	r5, BASEPRI
   38c8e:	f383 8812 	msr	BASEPRI_MAX, r3
   38c92:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38c96:	4842      	ldr	r0, [pc, #264]	; (38da0 <sys_clock_announce+0x124>)
   38c98:	f7fd fc92 	bl	365c0 <z_spin_lock_valid>
   38c9c:	b940      	cbnz	r0, 38cb0 <sys_clock_announce+0x34>
   38c9e:	4941      	ldr	r1, [pc, #260]	; (38da4 <sys_clock_announce+0x128>)
   38ca0:	4841      	ldr	r0, [pc, #260]	; (38da8 <sys_clock_announce+0x12c>)
   38ca2:	228e      	movs	r2, #142	; 0x8e
   38ca4:	f003 feca 	bl	3ca3c <assert_print>
   38ca8:	218e      	movs	r1, #142	; 0x8e
   38caa:	483e      	ldr	r0, [pc, #248]	; (38da4 <sys_clock_announce+0x128>)
   38cac:	f003 febf 	bl	3ca2e <assert_post_action>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   38cb0:	4f3e      	ldr	r7, [pc, #248]	; (38dac <sys_clock_announce+0x130>)
	z_spin_lock_set_owner(l);
   38cb2:	483b      	ldr	r0, [pc, #236]	; (38da0 <sys_clock_announce+0x124>)
	return list->head == list;
   38cb4:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 38db4 <sys_clock_announce+0x138>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   38cb8:	4e3d      	ldr	r6, [pc, #244]	; (38db0 <sys_clock_announce+0x134>)
   38cba:	f7fd fc9f 	bl	365fc <z_spin_lock_set_owner>
	announce_remaining = ticks;
   38cbe:	603c      	str	r4, [r7, #0]
   38cc0:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   38cc4:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38cc6:	4544      	cmp	r4, r8
   38cc8:	ea4f 70e2 	mov.w	r0, r2, asr #31
		curr_tick += dt;
   38ccc:	e9d6 1e00 	ldrd	r1, lr, [r6]
   38cd0:	d00b      	beq.n	38cea <sys_clock_announce+0x6e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   38cd2:	b154      	cbz	r4, 38cea <sys_clock_announce+0x6e>
   38cd4:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
   38cd8:	429a      	cmp	r2, r3
   38cda:	eb70 090c 	sbcs.w	r9, r0, ip
   38cde:	da23      	bge.n	38d28 <sys_clock_announce+0xac>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   38ce0:	1a9b      	subs	r3, r3, r2
   38ce2:	eb6c 0c00 	sbc.w	ip, ip, r0
   38ce6:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   38cea:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   38cec:	1852      	adds	r2, r2, r1
   38cee:	eb4e 0000 	adc.w	r0, lr, r0
   38cf2:	e9c6 2000 	strd	r2, r0, [r6]
	announce_remaining = 0;
   38cf6:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   38cf8:	f7ff fdc2 	bl	38880 <next_timeout>
   38cfc:	4621      	mov	r1, r4
   38cfe:	f7ec fbf7 	bl	254f0 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38d02:	4827      	ldr	r0, [pc, #156]	; (38da0 <sys_clock_announce+0x124>)
   38d04:	f7fd fc6a 	bl	365dc <z_spin_unlock_valid>
   38d08:	b940      	cbnz	r0, 38d1c <sys_clock_announce+0xa0>
   38d0a:	4926      	ldr	r1, [pc, #152]	; (38da4 <sys_clock_announce+0x128>)
   38d0c:	4826      	ldr	r0, [pc, #152]	; (38da8 <sys_clock_announce+0x12c>)
   38d0e:	22b9      	movs	r2, #185	; 0xb9
   38d10:	f003 fe94 	bl	3ca3c <assert_print>
   38d14:	21b9      	movs	r1, #185	; 0xb9
   38d16:	4823      	ldr	r0, [pc, #140]	; (38da4 <sys_clock_announce+0x128>)
   38d18:	f003 fe89 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   38d1c:	f385 8811 	msr	BASEPRI, r5
   38d20:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   38d24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   38d28:	1859      	adds	r1, r3, r1
   38d2a:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
   38d2e:	1ad3      	subs	r3, r2, r3
   38d30:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
   38d32:	2200      	movs	r2, #0
   38d34:	2300      	movs	r3, #0
		curr_tick += dt;
   38d36:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
   38d3a:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   38d3e:	4620      	mov	r0, r4
   38d40:	f7ff fdc4 	bl	388cc <remove_timeout>
   38d44:	4816      	ldr	r0, [pc, #88]	; (38da0 <sys_clock_announce+0x124>)
   38d46:	f7fd fc49 	bl	365dc <z_spin_unlock_valid>
   38d4a:	b940      	cbnz	r0, 38d5e <sys_clock_announce+0xe2>
   38d4c:	4915      	ldr	r1, [pc, #84]	; (38da4 <sys_clock_announce+0x128>)
   38d4e:	4816      	ldr	r0, [pc, #88]	; (38da8 <sys_clock_announce+0x12c>)
   38d50:	22b9      	movs	r2, #185	; 0xb9
   38d52:	f003 fe73 	bl	3ca3c <assert_print>
   38d56:	21b9      	movs	r1, #185	; 0xb9
   38d58:	4812      	ldr	r0, [pc, #72]	; (38da4 <sys_clock_announce+0x128>)
   38d5a:	f003 fe68 	bl	3ca2e <assert_post_action>
   38d5e:	f385 8811 	msr	BASEPRI, r5
   38d62:	f3bf 8f6f 	isb	sy
		t->fn(t);
   38d66:	4620      	mov	r0, r4
   38d68:	68a3      	ldr	r3, [r4, #8]
   38d6a:	4798      	blx	r3
	__asm__ volatile(
   38d6c:	f04f 0320 	mov.w	r3, #32
   38d70:	f3ef 8511 	mrs	r5, BASEPRI
   38d74:	f383 8812 	msr	BASEPRI_MAX, r3
   38d78:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38d7c:	4808      	ldr	r0, [pc, #32]	; (38da0 <sys_clock_announce+0x124>)
   38d7e:	f7fd fc1f 	bl	365c0 <z_spin_lock_valid>
   38d82:	b940      	cbnz	r0, 38d96 <sys_clock_announce+0x11a>
   38d84:	4907      	ldr	r1, [pc, #28]	; (38da4 <sys_clock_announce+0x128>)
   38d86:	4808      	ldr	r0, [pc, #32]	; (38da8 <sys_clock_announce+0x12c>)
   38d88:	228e      	movs	r2, #142	; 0x8e
   38d8a:	f003 fe57 	bl	3ca3c <assert_print>
   38d8e:	218e      	movs	r1, #142	; 0x8e
   38d90:	4804      	ldr	r0, [pc, #16]	; (38da4 <sys_clock_announce+0x128>)
   38d92:	f003 fe4c 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   38d96:	4802      	ldr	r0, [pc, #8]	; (38da0 <sys_clock_announce+0x124>)
   38d98:	f7fd fc30 	bl	365fc <z_spin_lock_set_owner>
	return k;
   38d9c:	e790      	b.n	38cc0 <sys_clock_announce+0x44>
   38d9e:	bf00      	nop
   38da0:	2001a554 	.word	0x2001a554
   38da4:	0004402c 	.word	0x0004402c
   38da8:	00043ff2 	.word	0x00043ff2
   38dac:	2001a550 	.word	0x2001a550
   38db0:	20018fa0 	.word	0x20018fa0
   38db4:	20014a64 	.word	0x20014a64

00038db8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   38db8:	b570      	push	{r4, r5, r6, lr}
   38dba:	f04f 0320 	mov.w	r3, #32
   38dbe:	f3ef 8611 	mrs	r6, BASEPRI
   38dc2:	f383 8812 	msr	BASEPRI_MAX, r3
   38dc6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38dca:	4816      	ldr	r0, [pc, #88]	; (38e24 <sys_clock_tick_get+0x6c>)
   38dcc:	f7fd fbf8 	bl	365c0 <z_spin_lock_valid>
   38dd0:	b940      	cbnz	r0, 38de4 <sys_clock_tick_get+0x2c>
   38dd2:	4915      	ldr	r1, [pc, #84]	; (38e28 <sys_clock_tick_get+0x70>)
   38dd4:	4815      	ldr	r0, [pc, #84]	; (38e2c <sys_clock_tick_get+0x74>)
   38dd6:	228e      	movs	r2, #142	; 0x8e
   38dd8:	f003 fe30 	bl	3ca3c <assert_print>
   38ddc:	218e      	movs	r1, #142	; 0x8e
   38dde:	4812      	ldr	r0, [pc, #72]	; (38e28 <sys_clock_tick_get+0x70>)
   38de0:	f003 fe25 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   38de4:	480f      	ldr	r0, [pc, #60]	; (38e24 <sys_clock_tick_get+0x6c>)
   38de6:	f7fd fc09 	bl	365fc <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   38dea:	f7ec fbb1 	bl	25550 <sys_clock_elapsed>
   38dee:	4b10      	ldr	r3, [pc, #64]	; (38e30 <sys_clock_tick_get+0x78>)
   38df0:	e9d3 4500 	ldrd	r4, r5, [r3]
   38df4:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38df6:	480b      	ldr	r0, [pc, #44]	; (38e24 <sys_clock_tick_get+0x6c>)
   38df8:	f145 0500 	adc.w	r5, r5, #0
   38dfc:	f7fd fbee 	bl	365dc <z_spin_unlock_valid>
   38e00:	b940      	cbnz	r0, 38e14 <sys_clock_tick_get+0x5c>
   38e02:	4909      	ldr	r1, [pc, #36]	; (38e28 <sys_clock_tick_get+0x70>)
   38e04:	4809      	ldr	r0, [pc, #36]	; (38e2c <sys_clock_tick_get+0x74>)
   38e06:	22b9      	movs	r2, #185	; 0xb9
   38e08:	f003 fe18 	bl	3ca3c <assert_print>
   38e0c:	21b9      	movs	r1, #185	; 0xb9
   38e0e:	4806      	ldr	r0, [pc, #24]	; (38e28 <sys_clock_tick_get+0x70>)
   38e10:	f003 fe0d 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   38e14:	f386 8811 	msr	BASEPRI, r6
   38e18:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   38e1c:	4620      	mov	r0, r4
   38e1e:	4629      	mov	r1, r5
   38e20:	bd70      	pop	{r4, r5, r6, pc}
   38e22:	bf00      	nop
   38e24:	2001a554 	.word	0x2001a554
   38e28:	0004402c 	.word	0x0004402c
   38e2c:	00043ff2 	.word	0x00043ff2
   38e30:	20018fa0 	.word	0x20018fa0

00038e34 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   38e34:	b570      	push	{r4, r5, r6, lr}
   38e36:	4604      	mov	r4, r0
	__asm__ volatile(
   38e38:	f04f 0320 	mov.w	r3, #32
   38e3c:	f3ef 8511 	mrs	r5, BASEPRI
   38e40:	f383 8812 	msr	BASEPRI_MAX, r3
   38e44:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38e48:	4841      	ldr	r0, [pc, #260]	; (38f50 <z_timer_expiration_handler+0x11c>)
   38e4a:	f7fd fbb9 	bl	365c0 <z_spin_lock_valid>
   38e4e:	b940      	cbnz	r0, 38e62 <z_timer_expiration_handler+0x2e>
   38e50:	4940      	ldr	r1, [pc, #256]	; (38f54 <z_timer_expiration_handler+0x120>)
   38e52:	4841      	ldr	r0, [pc, #260]	; (38f58 <z_timer_expiration_handler+0x124>)
   38e54:	228e      	movs	r2, #142	; 0x8e
   38e56:	f003 fdf1 	bl	3ca3c <assert_print>
   38e5a:	218e      	movs	r1, #142	; 0x8e
   38e5c:	483d      	ldr	r0, [pc, #244]	; (38f54 <z_timer_expiration_handler+0x120>)
   38e5e:	f003 fde6 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   38e62:	483b      	ldr	r0, [pc, #236]	; (38f50 <z_timer_expiration_handler+0x11c>)
   38e64:	f7fd fbca 	bl	365fc <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   38e68:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   38e6c:	3301      	adds	r3, #1
   38e6e:	f142 0200 	adc.w	r2, r2, #0
   38e72:	2b02      	cmp	r3, #2
   38e74:	f172 0300 	sbcs.w	r3, r2, #0
   38e78:	d305      	bcc.n	38e86 <z_timer_expiration_handler+0x52>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   38e7a:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   38e7e:	4620      	mov	r0, r4
   38e80:	4936      	ldr	r1, [pc, #216]	; (38f5c <z_timer_expiration_handler+0x128>)
   38e82:	f7ff fd63 	bl	3894c <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   38e86:	6b23      	ldr	r3, [r4, #48]	; 0x30
   38e88:	3301      	adds	r3, #1
   38e8a:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   38e8c:	6a23      	ldr	r3, [r4, #32]
   38e8e:	b35b      	cbz	r3, 38ee8 <z_timer_expiration_handler+0xb4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38e90:	482f      	ldr	r0, [pc, #188]	; (38f50 <z_timer_expiration_handler+0x11c>)
   38e92:	f7fd fba3 	bl	365dc <z_spin_unlock_valid>
   38e96:	b940      	cbnz	r0, 38eaa <z_timer_expiration_handler+0x76>
   38e98:	492e      	ldr	r1, [pc, #184]	; (38f54 <z_timer_expiration_handler+0x120>)
   38e9a:	482f      	ldr	r0, [pc, #188]	; (38f58 <z_timer_expiration_handler+0x124>)
   38e9c:	22b9      	movs	r2, #185	; 0xb9
   38e9e:	f003 fdcd 	bl	3ca3c <assert_print>
   38ea2:	21b9      	movs	r1, #185	; 0xb9
   38ea4:	482b      	ldr	r0, [pc, #172]	; (38f54 <z_timer_expiration_handler+0x120>)
   38ea6:	f003 fdc2 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   38eaa:	f385 8811 	msr	BASEPRI, r5
   38eae:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   38eb2:	4620      	mov	r0, r4
   38eb4:	6a23      	ldr	r3, [r4, #32]
   38eb6:	4798      	blx	r3
	__asm__ volatile(
   38eb8:	f04f 0320 	mov.w	r3, #32
   38ebc:	f3ef 8511 	mrs	r5, BASEPRI
   38ec0:	f383 8812 	msr	BASEPRI_MAX, r3
   38ec4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38ec8:	4821      	ldr	r0, [pc, #132]	; (38f50 <z_timer_expiration_handler+0x11c>)
   38eca:	f7fd fb79 	bl	365c0 <z_spin_lock_valid>
   38ece:	b940      	cbnz	r0, 38ee2 <z_timer_expiration_handler+0xae>
   38ed0:	4920      	ldr	r1, [pc, #128]	; (38f54 <z_timer_expiration_handler+0x120>)
   38ed2:	4821      	ldr	r0, [pc, #132]	; (38f58 <z_timer_expiration_handler+0x124>)
   38ed4:	228e      	movs	r2, #142	; 0x8e
   38ed6:	f003 fdb1 	bl	3ca3c <assert_print>
   38eda:	218e      	movs	r1, #142	; 0x8e
   38edc:	481d      	ldr	r0, [pc, #116]	; (38f54 <z_timer_expiration_handler+0x120>)
   38ede:	f003 fda6 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   38ee2:	481b      	ldr	r0, [pc, #108]	; (38f50 <z_timer_expiration_handler+0x11c>)
   38ee4:	f7fd fb8a 	bl	365fc <z_spin_lock_set_owner>
	return list->head == list;
   38ee8:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38eec:	42a6      	cmp	r6, r4
   38eee:	d000      	beq.n	38ef2 <z_timer_expiration_handler+0xbe>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   38ef0:	b98e      	cbnz	r6, 38f16 <z_timer_expiration_handler+0xe2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38ef2:	4817      	ldr	r0, [pc, #92]	; (38f50 <z_timer_expiration_handler+0x11c>)
   38ef4:	f7fd fb72 	bl	365dc <z_spin_unlock_valid>
   38ef8:	b940      	cbnz	r0, 38f0c <z_timer_expiration_handler+0xd8>
   38efa:	4916      	ldr	r1, [pc, #88]	; (38f54 <z_timer_expiration_handler+0x120>)
   38efc:	4816      	ldr	r0, [pc, #88]	; (38f58 <z_timer_expiration_handler+0x124>)
   38efe:	22b9      	movs	r2, #185	; 0xb9
   38f00:	f003 fd9c 	bl	3ca3c <assert_print>
   38f04:	21b9      	movs	r1, #185	; 0xb9
   38f06:	4813      	ldr	r0, [pc, #76]	; (38f54 <z_timer_expiration_handler+0x120>)
   38f08:	f003 fd91 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   38f0c:	f385 8811 	msr	BASEPRI, r5
   38f10:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   38f14:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   38f16:	4630      	mov	r0, r6
   38f18:	f7fe fca8 	bl	3786c <z_unpend_thread_no_timeout>
   38f1c:	2300      	movs	r3, #0
   38f1e:	480c      	ldr	r0, [pc, #48]	; (38f50 <z_timer_expiration_handler+0x11c>)
   38f20:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
   38f24:	f7fd fb5a 	bl	365dc <z_spin_unlock_valid>
   38f28:	b940      	cbnz	r0, 38f3c <z_timer_expiration_handler+0x108>
   38f2a:	490a      	ldr	r1, [pc, #40]	; (38f54 <z_timer_expiration_handler+0x120>)
   38f2c:	480a      	ldr	r0, [pc, #40]	; (38f58 <z_timer_expiration_handler+0x124>)
   38f2e:	22b9      	movs	r2, #185	; 0xb9
   38f30:	f003 fd84 	bl	3ca3c <assert_print>
   38f34:	21b9      	movs	r1, #185	; 0xb9
   38f36:	4807      	ldr	r0, [pc, #28]	; (38f54 <z_timer_expiration_handler+0x120>)
   38f38:	f003 fd79 	bl	3ca2e <assert_post_action>
   38f3c:	f385 8811 	msr	BASEPRI, r5
   38f40:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   38f44:	4630      	mov	r0, r6
}
   38f46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   38f4a:	f7fe bef5 	b.w	37d38 <z_ready_thread>
   38f4e:	bf00      	nop
   38f50:	2001a558 	.word	0x2001a558
   38f54:	0004402c 	.word	0x0004402c
   38f58:	00043ff2 	.word	0x00043ff2
   38f5c:	00038e35 	.word	0x00038e35

00038f60 <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   38f60:	f1b3 3fff 	cmp.w	r3, #4294967295
   38f64:	bf08      	it	eq
   38f66:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   38f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   38f6e:	4605      	mov	r5, r0
   38f70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   38f74:	4690      	mov	r8, r2
   38f76:	461f      	mov	r7, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   38f78:	d040      	beq.n	38ffc <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   38f7a:	f1b1 3fff 	cmp.w	r1, #4294967295
   38f7e:	bf08      	it	eq
   38f80:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   38f84:	4604      	mov	r4, r0
   38f86:	460e      	mov	r6, r1
   38f88:	d016      	beq.n	38fb8 <z_impl_k_timer_start+0x58>
   38f8a:	ea51 0c00 	orrs.w	ip, r1, r0
   38f8e:	d013      	beq.n	38fb8 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
   38f90:	f06f 0c01 	mvn.w	ip, #1
   38f94:	ebbc 0c00 	subs.w	ip, ip, r0
   38f98:	f04f 3cff 	mov.w	ip, #4294967295
   38f9c:	eb6c 0c01 	sbc.w	ip, ip, r1
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   38fa0:	f1bc 0f00 	cmp.w	ip, #0
   38fa4:	da08      	bge.n	38fb8 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
   38fa6:	2802      	cmp	r0, #2
   38fa8:	f171 0100 	sbcs.w	r1, r1, #0
   38fac:	bfbc      	itt	lt
   38fae:	2402      	movlt	r4, #2
   38fb0:	2600      	movlt	r6, #0
   38fb2:	3c01      	subs	r4, #1
   38fb4:	f146 36ff 	adc.w	r6, r6, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   38fb8:	f06f 0101 	mvn.w	r1, #1
   38fbc:	1a89      	subs	r1, r1, r2
   38fbe:	f04f 31ff 	mov.w	r1, #4294967295
   38fc2:	eb61 0103 	sbc.w	r1, r1, r3
   38fc6:	2900      	cmp	r1, #0
   38fc8:	da09      	bge.n	38fde <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
   38fca:	2a01      	cmp	r2, #1
   38fcc:	f173 0100 	sbcs.w	r1, r3, #0
   38fd0:	bfbc      	itt	lt
   38fd2:	2201      	movlt	r2, #1
   38fd4:	2300      	movlt	r3, #0
   38fd6:	f112 38ff 	adds.w	r8, r2, #4294967295
   38fda:	f143 37ff 	adc.w	r7, r3, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   38fde:	4628      	mov	r0, r5
   38fe0:	f7ff fd62 	bl	38aa8 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   38fe4:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   38fe6:	4642      	mov	r2, r8
	timer->status = 0U;
   38fe8:	632b      	str	r3, [r5, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   38fea:	4628      	mov	r0, r5
   38fec:	463b      	mov	r3, r7
	timer->period = period;
   38fee:	e9c5 460a 	strd	r4, r6, [r5, #40]	; 0x28
		     duration);
}
   38ff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   38ff6:	4902      	ldr	r1, [pc, #8]	; (39000 <z_impl_k_timer_start+0xa0>)
   38ff8:	f7ff bca8 	b.w	3894c <z_add_timeout>
}
   38ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   39000:	00038e35 	.word	0x00038e35

00039004 <z_impl_k_timer_status_sync>:
}
#include <syscalls/k_timer_status_get_mrsh.c>
#endif

uint32_t z_impl_k_timer_status_sync(struct k_timer *timer)
{
   39004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   39006:	4604      	mov	r4, r0
   39008:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   3900c:	b143      	cbz	r3, 39020 <z_impl_k_timer_status_sync+0x1c>
   3900e:	4930      	ldr	r1, [pc, #192]	; (390d0 <z_impl_k_timer_status_sync+0xcc>)
   39010:	4830      	ldr	r0, [pc, #192]	; (390d4 <z_impl_k_timer_status_sync+0xd0>)
   39012:	22c6      	movs	r2, #198	; 0xc6
   39014:	f003 fd12 	bl	3ca3c <assert_print>
   39018:	21c6      	movs	r1, #198	; 0xc6
   3901a:	482d      	ldr	r0, [pc, #180]	; (390d0 <z_impl_k_timer_status_sync+0xcc>)
   3901c:	f003 fd07 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   39020:	f04f 0320 	mov.w	r3, #32
   39024:	f3ef 8711 	mrs	r7, BASEPRI
   39028:	f383 8812 	msr	BASEPRI_MAX, r3
   3902c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39030:	4829      	ldr	r0, [pc, #164]	; (390d8 <z_impl_k_timer_status_sync+0xd4>)
	k.key = arch_irq_lock();
   39032:	463d      	mov	r5, r7
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39034:	f7fd fac4 	bl	365c0 <z_spin_lock_valid>
   39038:	b940      	cbnz	r0, 3904c <z_impl_k_timer_status_sync+0x48>
   3903a:	4928      	ldr	r1, [pc, #160]	; (390dc <z_impl_k_timer_status_sync+0xd8>)
   3903c:	4825      	ldr	r0, [pc, #148]	; (390d4 <z_impl_k_timer_status_sync+0xd0>)
   3903e:	228e      	movs	r2, #142	; 0x8e
   39040:	f003 fcfc 	bl	3ca3c <assert_print>
   39044:	218e      	movs	r1, #142	; 0x8e
   39046:	4825      	ldr	r0, [pc, #148]	; (390dc <z_impl_k_timer_status_sync+0xd8>)
   39048:	f003 fcf1 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   3904c:	4822      	ldr	r0, [pc, #136]	; (390d8 <z_impl_k_timer_status_sync+0xd4>)
   3904e:	f7fd fad5 	bl	365fc <z_spin_lock_set_owner>

		return result;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t result = timer->status;
   39052:	6b26      	ldr	r6, [r4, #48]	; 0x30

	if (result == 0U) {
   39054:	bb36      	cbnz	r6, 390a4 <z_impl_k_timer_status_sync+0xa0>
		if (!z_is_inactive_timeout(&timer->timeout)) {
   39056:	6823      	ldr	r3, [r4, #0]
   39058:	b323      	cbz	r3, 390a4 <z_impl_k_timer_status_sync+0xa0>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_timer, status_sync, timer, K_FOREVER);

			/* wait for timer to expire or stop */
			(void)z_pend_curr(&lock, key, &timer->wait_q, K_FOREVER);
   3905a:	f04f 33ff 	mov.w	r3, #4294967295
   3905e:	f04f 32ff 	mov.w	r2, #4294967295
   39062:	4639      	mov	r1, r7
   39064:	e9cd 2300 	strd	r2, r3, [sp]
   39068:	481b      	ldr	r0, [pc, #108]	; (390d8 <z_impl_k_timer_status_sync+0xd4>)
   3906a:	f104 0218 	add.w	r2, r4, #24
   3906e:	f7ff f80b 	bl	38088 <z_pend_curr>
   39072:	f04f 0320 	mov.w	r3, #32
   39076:	f3ef 8511 	mrs	r5, BASEPRI
   3907a:	f383 8812 	msr	BASEPRI_MAX, r3
   3907e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39082:	4815      	ldr	r0, [pc, #84]	; (390d8 <z_impl_k_timer_status_sync+0xd4>)
   39084:	f7fd fa9c 	bl	365c0 <z_spin_lock_valid>
   39088:	b940      	cbnz	r0, 3909c <z_impl_k_timer_status_sync+0x98>
   3908a:	4914      	ldr	r1, [pc, #80]	; (390dc <z_impl_k_timer_status_sync+0xd8>)
   3908c:	4811      	ldr	r0, [pc, #68]	; (390d4 <z_impl_k_timer_status_sync+0xd0>)
   3908e:	228e      	movs	r2, #142	; 0x8e
   39090:	f003 fcd4 	bl	3ca3c <assert_print>
   39094:	218e      	movs	r1, #142	; 0x8e
   39096:	4811      	ldr	r0, [pc, #68]	; (390dc <z_impl_k_timer_status_sync+0xd8>)
   39098:	f003 fcc9 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   3909c:	480e      	ldr	r0, [pc, #56]	; (390d8 <z_impl_k_timer_status_sync+0xd4>)
   3909e:	f7fd faad 	bl	365fc <z_spin_lock_set_owner>

			/* get updated timer status */
			key = k_spin_lock(&lock);
			result = timer->status;
   390a2:	6b26      	ldr	r6, [r4, #48]	; 0x30
		}
	} else {
		/* timer has already expired at least once */
	}

	timer->status = 0U;
   390a4:	2300      	movs	r3, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   390a6:	480c      	ldr	r0, [pc, #48]	; (390d8 <z_impl_k_timer_status_sync+0xd4>)
   390a8:	6323      	str	r3, [r4, #48]	; 0x30
   390aa:	f7fd fa97 	bl	365dc <z_spin_unlock_valid>
   390ae:	b940      	cbnz	r0, 390c2 <z_impl_k_timer_status_sync+0xbe>
   390b0:	490a      	ldr	r1, [pc, #40]	; (390dc <z_impl_k_timer_status_sync+0xd8>)
   390b2:	4808      	ldr	r0, [pc, #32]	; (390d4 <z_impl_k_timer_status_sync+0xd0>)
   390b4:	22b9      	movs	r2, #185	; 0xb9
   390b6:	f003 fcc1 	bl	3ca3c <assert_print>
   390ba:	21b9      	movs	r1, #185	; 0xb9
   390bc:	4807      	ldr	r0, [pc, #28]	; (390dc <z_impl_k_timer_status_sync+0xd8>)
   390be:	f003 fcb6 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   390c2:	f385 8811 	msr	BASEPRI, r5
   390c6:	f3bf 8f6f 	isb	sy
	 * @note	New tracing hook
	 */
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_timer, status_sync, timer, result);

	return result;
}
   390ca:	4630      	mov	r0, r6
   390cc:	b003      	add	sp, #12
   390ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   390d0:	0004bb88 	.word	0x0004bb88
   390d4:	00043ff2 	.word	0x00043ff2
   390d8:	2001a558 	.word	0x2001a558
   390dc:	0004402c 	.word	0x0004402c

000390e0 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   390e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   390e4:	2600      	movs	r6, #0
{
   390e6:	4614      	mov	r4, r2
   390e8:	4681      	mov	r9, r0
	int events_registered = 0;
   390ea:	46b0      	mov	r8, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   390ec:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 392bc <register_events+0x1dc>
   390f0:	4f6f      	ldr	r7, [pc, #444]	; (392b0 <register_events+0x1d0>)
   390f2:	4d70      	ldr	r5, [pc, #448]	; (392b4 <register_events+0x1d4>)
{
   390f4:	9100      	str	r1, [sp, #0]
   390f6:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   390f8:	9b00      	ldr	r3, [sp, #0]
   390fa:	429e      	cmp	r6, r3
   390fc:	db03      	blt.n	39106 <register_events+0x26>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   390fe:	4640      	mov	r0, r8
   39100:	b003      	add	sp, #12
   39102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   39106:	f04f 0220 	mov.w	r2, #32
   3910a:	f3ef 8b11 	mrs	fp, BASEPRI
   3910e:	f382 8812 	msr	BASEPRI_MAX, r2
   39112:	f3bf 8f6f 	isb	sy
   39116:	4650      	mov	r0, sl
   39118:	f7fd fa52 	bl	365c0 <z_spin_lock_valid>
   3911c:	b940      	cbnz	r0, 39130 <register_events+0x50>
   3911e:	4639      	mov	r1, r7
   39120:	4628      	mov	r0, r5
   39122:	228e      	movs	r2, #142	; 0x8e
   39124:	f003 fc8a 	bl	3ca3c <assert_print>
   39128:	218e      	movs	r1, #142	; 0x8e
   3912a:	4638      	mov	r0, r7
   3912c:	f003 fc7f 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   39130:	4650      	mov	r0, sl
   39132:	f7fd fa63 	bl	365fc <z_spin_lock_set_owner>
	switch (event->type) {
   39136:	f899 200d 	ldrb.w	r2, [r9, #13]
   3913a:	f002 021f 	and.w	r2, r2, #31
   3913e:	2a08      	cmp	r2, #8
   39140:	d853      	bhi.n	391ea <register_events+0x10a>
   39142:	e8df f002 	tbb	[pc, r2]
   39146:	4431      	.short	0x4431
   39148:	522d5205 	.word	0x522d5205
   3914c:	5252      	.short	0x5252
   3914e:	4b          	.byte	0x4b
   3914f:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   39150:	f8d9 2010 	ldr.w	r2, [r9, #16]
   39154:	6892      	ldr	r2, [r2, #8]
   39156:	b33a      	cbz	r2, 391a8 <register_events+0xc8>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   39158:	2202      	movs	r2, #2
	event->poller = NULL;
   3915a:	2000      	movs	r0, #0
	event->state |= state;
   3915c:	f8d9 100c 	ldr.w	r1, [r9, #12]
	event->poller = NULL;
   39160:	f8c9 0008 	str.w	r0, [r9, #8]
	event->state |= state;
   39164:	f3c1 3c45 	ubfx	ip, r1, #13, #6
   39168:	ea42 020c 	orr.w	r2, r2, ip
   3916c:	f362 3152 	bfi	r1, r2, #13, #6
   39170:	f8c9 100c 	str.w	r1, [r9, #12]
			poller->is_polling = false;
   39174:	7020      	strb	r0, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   39176:	4650      	mov	r0, sl
   39178:	f7fd fa30 	bl	365dc <z_spin_unlock_valid>
   3917c:	b940      	cbnz	r0, 39190 <register_events+0xb0>
   3917e:	4639      	mov	r1, r7
   39180:	4628      	mov	r0, r5
   39182:	22b9      	movs	r2, #185	; 0xb9
   39184:	f003 fc5a 	bl	3ca3c <assert_print>
   39188:	21b9      	movs	r1, #185	; 0xb9
   3918a:	4638      	mov	r0, r7
   3918c:	f003 fc4f 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   39190:	f38b 8811 	msr	BASEPRI, fp
   39194:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   39198:	3601      	adds	r6, #1
   3919a:	f109 0914 	add.w	r9, r9, #20
   3919e:	e7ab      	b.n	390f8 <register_events+0x18>
		if (!k_queue_is_empty(event->queue)) {
   391a0:	f8d9 2010 	ldr.w	r2, [r9, #16]
   391a4:	6812      	ldr	r2, [r2, #0]
   391a6:	bb52      	cbnz	r2, 391fe <register_events+0x11e>
		} else if (!just_check && poller->is_polling) {
   391a8:	9b01      	ldr	r3, [sp, #4]
   391aa:	2b00      	cmp	r3, #0
   391ac:	d1e3      	bne.n	39176 <register_events+0x96>
   391ae:	7822      	ldrb	r2, [r4, #0]
   391b0:	2a00      	cmp	r2, #0
   391b2:	d0e0      	beq.n	39176 <register_events+0x96>
	switch (event->type) {
   391b4:	f899 200d 	ldrb.w	r2, [r9, #13]
   391b8:	f002 021f 	and.w	r2, r2, #31
   391bc:	2a08      	cmp	r2, #8
   391be:	d86d      	bhi.n	3929c <register_events+0x1bc>
   391c0:	e8df f002 	tbb	[pc, r2]
   391c4:	6c1f4932 	.word	0x6c1f4932
   391c8:	6c6c6c37 	.word	0x6c6c6c37
   391cc:	5a          	.byte	0x5a
   391cd:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   391ce:	f8d9 2010 	ldr.w	r2, [r9, #16]
   391d2:	6892      	ldr	r2, [r2, #8]
   391d4:	2a00      	cmp	r2, #0
   391d6:	d0e7      	beq.n	391a8 <register_events+0xc8>
			*state = K_POLL_STATE_SIGNALED;
   391d8:	2201      	movs	r2, #1
   391da:	e7be      	b.n	3915a <register_events+0x7a>
		if (event->msgq->used_msgs > 0) {
   391dc:	f8d9 2010 	ldr.w	r2, [r9, #16]
   391e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
   391e2:	2a00      	cmp	r2, #0
   391e4:	d0e0      	beq.n	391a8 <register_events+0xc8>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   391e6:	2210      	movs	r2, #16
   391e8:	e7b7      	b.n	3915a <register_events+0x7a>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   391ea:	4628      	mov	r0, r5
   391ec:	225c      	movs	r2, #92	; 0x5c
   391ee:	4932      	ldr	r1, [pc, #200]	; (392b8 <register_events+0x1d8>)
   391f0:	f003 fc24 	bl	3ca3c <assert_print>
   391f4:	215c      	movs	r1, #92	; 0x5c
   391f6:	4830      	ldr	r0, [pc, #192]	; (392b8 <register_events+0x1d8>)
   391f8:	f003 fc19 	bl	3ca2e <assert_post_action>
		break;
   391fc:	e7d4      	b.n	391a8 <register_events+0xc8>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   391fe:	2204      	movs	r2, #4
   39200:	e7ab      	b.n	3915a <register_events+0x7a>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   39202:	f8d9 2010 	ldr.w	r2, [r9, #16]
   39206:	b942      	cbnz	r2, 3921a <register_events+0x13a>
   39208:	4628      	mov	r0, r5
   3920a:	492b      	ldr	r1, [pc, #172]	; (392b8 <register_events+0x1d8>)
   3920c:	2286      	movs	r2, #134	; 0x86
   3920e:	f003 fc15 	bl	3ca3c <assert_print>
   39212:	2186      	movs	r1, #134	; 0x86
   39214:	4828      	ldr	r0, [pc, #160]	; (392b8 <register_events+0x1d8>)
   39216:	f003 fc0a 	bl	3ca2e <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   3921a:	4622      	mov	r2, r4
   3921c:	4649      	mov	r1, r9
   3921e:	f8d9 0010 	ldr.w	r0, [r9, #16]
   39222:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   39224:	f007 ff82 	bl	4112c <add_event>
	event->poller = poller;
   39228:	f8c9 4008 	str.w	r4, [r9, #8]
			events_registered += 1;
   3922c:	f108 0801 	add.w	r8, r8, #1
   39230:	e7a1      	b.n	39176 <register_events+0x96>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   39232:	f8d9 2010 	ldr.w	r2, [r9, #16]
   39236:	b942      	cbnz	r2, 3924a <register_events+0x16a>
   39238:	4628      	mov	r0, r5
   3923a:	491f      	ldr	r1, [pc, #124]	; (392b8 <register_events+0x1d8>)
   3923c:	228a      	movs	r2, #138	; 0x8a
   3923e:	f003 fbfd 	bl	3ca3c <assert_print>
   39242:	218a      	movs	r1, #138	; 0x8a
   39244:	481c      	ldr	r0, [pc, #112]	; (392b8 <register_events+0x1d8>)
   39246:	f003 fbf2 	bl	3ca2e <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   3924a:	f8d9 0010 	ldr.w	r0, [r9, #16]
   3924e:	4622      	mov	r2, r4
   39250:	4649      	mov	r1, r9
   39252:	3014      	adds	r0, #20
   39254:	e7e6      	b.n	39224 <register_events+0x144>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   39256:	f8d9 2010 	ldr.w	r2, [r9, #16]
   3925a:	b942      	cbnz	r2, 3926e <register_events+0x18e>
   3925c:	4628      	mov	r0, r5
   3925e:	4916      	ldr	r1, [pc, #88]	; (392b8 <register_events+0x1d8>)
   39260:	228e      	movs	r2, #142	; 0x8e
   39262:	f003 fbeb 	bl	3ca3c <assert_print>
   39266:	218e      	movs	r1, #142	; 0x8e
   39268:	4813      	ldr	r0, [pc, #76]	; (392b8 <register_events+0x1d8>)
   3926a:	f003 fbe0 	bl	3ca2e <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   3926e:	4622      	mov	r2, r4
   39270:	4649      	mov	r1, r9
   39272:	f8d9 0010 	ldr.w	r0, [r9, #16]
   39276:	e7d5      	b.n	39224 <register_events+0x144>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   39278:	f8d9 2010 	ldr.w	r2, [r9, #16]
   3927c:	b942      	cbnz	r2, 39290 <register_events+0x1b0>
   3927e:	4628      	mov	r0, r5
   39280:	490d      	ldr	r1, [pc, #52]	; (392b8 <register_events+0x1d8>)
   39282:	2292      	movs	r2, #146	; 0x92
   39284:	f003 fbda 	bl	3ca3c <assert_print>
   39288:	2192      	movs	r1, #146	; 0x92
   3928a:	480b      	ldr	r0, [pc, #44]	; (392b8 <register_events+0x1d8>)
   3928c:	f003 fbcf 	bl	3ca2e <assert_post_action>
		add_event(&event->msgq->poll_events, event, poller);
   39290:	f8d9 0010 	ldr.w	r0, [r9, #16]
   39294:	4622      	mov	r2, r4
   39296:	4649      	mov	r1, r9
   39298:	3028      	adds	r0, #40	; 0x28
   3929a:	e7c3      	b.n	39224 <register_events+0x144>
		__ASSERT(false, "invalid event type\n");
   3929c:	4628      	mov	r0, r5
   3929e:	2299      	movs	r2, #153	; 0x99
   392a0:	4905      	ldr	r1, [pc, #20]	; (392b8 <register_events+0x1d8>)
   392a2:	f003 fbcb 	bl	3ca3c <assert_print>
   392a6:	2199      	movs	r1, #153	; 0x99
   392a8:	4803      	ldr	r0, [pc, #12]	; (392b8 <register_events+0x1d8>)
   392aa:	f003 fbc0 	bl	3ca2e <assert_post_action>
		break;
   392ae:	e7bb      	b.n	39228 <register_events+0x148>
   392b0:	0004402c 	.word	0x0004402c
   392b4:	00043ff2 	.word	0x00043ff2
   392b8:	0004bbaa 	.word	0x0004bbaa
   392bc:	2001a55c 	.word	0x2001a55c

000392c0 <clear_event_registrations>:
{
   392c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   392c4:	2414      	movs	r4, #20
   392c6:	4690      	mov	r8, r2
	while (num_events--) {
   392c8:	460f      	mov	r7, r1
   392ca:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   392ce:	4d43      	ldr	r5, [pc, #268]	; (393dc <clear_event_registrations+0x11c>)
   392d0:	4e43      	ldr	r6, [pc, #268]	; (393e0 <clear_event_registrations+0x120>)
   392d2:	f8df 9114 	ldr.w	r9, [pc, #276]	; 393e8 <clear_event_registrations+0x128>
	while (num_events--) {
   392d6:	b90f      	cbnz	r7, 392dc <clear_event_registrations+0x1c>
}
   392d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	event->poller = NULL;
   392dc:	2300      	movs	r3, #0
   392de:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   392e2:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   392e6:	f1a4 0a14 	sub.w	sl, r4, #20
   392ea:	f003 031f 	and.w	r3, r3, #31
   392ee:	2b08      	cmp	r3, #8
   392f0:	d83e      	bhi.n	39370 <clear_event_registrations+0xb0>
   392f2:	e8df f003 	tbb	[pc, r3]
   392f6:	2746      	.short	0x2746
   392f8:	3d1c3d05 	.word	0x3d1c3d05
   392fc:	3d3d      	.short	0x3d3d
   392fe:	32          	.byte	0x32
   392ff:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   39300:	f854 3c04 	ldr.w	r3, [r4, #-4]
   39304:	b943      	cbnz	r3, 39318 <clear_event_registrations+0x58>
   39306:	4629      	mov	r1, r5
   39308:	22a9      	movs	r2, #169	; 0xa9
   3930a:	4630      	mov	r0, r6
   3930c:	f003 fb96 	bl	3ca3c <assert_print>
   39310:	21a9      	movs	r1, #169	; 0xa9
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   39312:	4628      	mov	r0, r5
   39314:	f003 fb8b 	bl	3ca2e <assert_post_action>
	return node->next != NULL;
   39318:	f854 3c14 	ldr.w	r3, [r4, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   3931c:	b38b      	cbz	r3, 39382 <clear_event_registrations+0xc2>
	sys_dnode_t *const prev = node->prev;
   3931e:	f854 2c10 	ldr.w	r2, [r4, #-16]
	prev->next = next;
   39322:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   39324:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   39326:	2300      	movs	r3, #0
	node->prev = NULL;
   39328:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   3932c:	e029      	b.n	39382 <clear_event_registrations+0xc2>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   3932e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   39332:	2b00      	cmp	r3, #0
   39334:	d1f0      	bne.n	39318 <clear_event_registrations+0x58>
   39336:	4629      	mov	r1, r5
   39338:	22ad      	movs	r2, #173	; 0xad
   3933a:	4630      	mov	r0, r6
   3933c:	f003 fb7e 	bl	3ca3c <assert_print>
   39340:	21ad      	movs	r1, #173	; 0xad
   39342:	e7e6      	b.n	39312 <clear_event_registrations+0x52>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   39344:	f854 3c04 	ldr.w	r3, [r4, #-4]
   39348:	2b00      	cmp	r3, #0
   3934a:	d1e5      	bne.n	39318 <clear_event_registrations+0x58>
   3934c:	4629      	mov	r1, r5
   3934e:	22b1      	movs	r2, #177	; 0xb1
   39350:	4630      	mov	r0, r6
   39352:	f003 fb73 	bl	3ca3c <assert_print>
   39356:	21b1      	movs	r1, #177	; 0xb1
   39358:	e7db      	b.n	39312 <clear_event_registrations+0x52>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   3935a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3935e:	2b00      	cmp	r3, #0
   39360:	d1da      	bne.n	39318 <clear_event_registrations+0x58>
   39362:	4629      	mov	r1, r5
   39364:	22b5      	movs	r2, #181	; 0xb5
   39366:	4630      	mov	r0, r6
   39368:	f003 fb68 	bl	3ca3c <assert_print>
   3936c:	21b5      	movs	r1, #181	; 0xb5
   3936e:	e7d0      	b.n	39312 <clear_event_registrations+0x52>
		__ASSERT(false, "invalid event type\n");
   39370:	4629      	mov	r1, r5
   39372:	4630      	mov	r0, r6
   39374:	22bc      	movs	r2, #188	; 0xbc
   39376:	f003 fb61 	bl	3ca3c <assert_print>
   3937a:	21bc      	movs	r1, #188	; 0xbc
   3937c:	4628      	mov	r0, r5
   3937e:	f003 fb56 	bl	3ca2e <assert_post_action>
   39382:	4648      	mov	r0, r9
   39384:	f7fd f92a 	bl	365dc <z_spin_unlock_valid>
   39388:	b940      	cbnz	r0, 3939c <clear_event_registrations+0xdc>
   3938a:	4630      	mov	r0, r6
   3938c:	4915      	ldr	r1, [pc, #84]	; (393e4 <clear_event_registrations+0x124>)
   3938e:	22b9      	movs	r2, #185	; 0xb9
   39390:	f003 fb54 	bl	3ca3c <assert_print>
   39394:	21b9      	movs	r1, #185	; 0xb9
   39396:	4813      	ldr	r0, [pc, #76]	; (393e4 <clear_event_registrations+0x124>)
   39398:	f003 fb49 	bl	3ca2e <assert_post_action>
   3939c:	f388 8811 	msr	BASEPRI, r8
   393a0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   393a4:	f04f 0320 	mov.w	r3, #32
   393a8:	f3ef 8811 	mrs	r8, BASEPRI
   393ac:	f383 8812 	msr	BASEPRI_MAX, r3
   393b0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   393b4:	4648      	mov	r0, r9
   393b6:	f7fd f903 	bl	365c0 <z_spin_lock_valid>
   393ba:	b940      	cbnz	r0, 393ce <clear_event_registrations+0x10e>
   393bc:	4630      	mov	r0, r6
   393be:	4909      	ldr	r1, [pc, #36]	; (393e4 <clear_event_registrations+0x124>)
   393c0:	228e      	movs	r2, #142	; 0x8e
   393c2:	f003 fb3b 	bl	3ca3c <assert_print>
   393c6:	218e      	movs	r1, #142	; 0x8e
   393c8:	4806      	ldr	r0, [pc, #24]	; (393e4 <clear_event_registrations+0x124>)
   393ca:	f003 fb30 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   393ce:	4648      	mov	r0, r9
   393d0:	f7fd f914 	bl	365fc <z_spin_lock_set_owner>
	return k;
   393d4:	4654      	mov	r4, sl
   393d6:	3f01      	subs	r7, #1
   393d8:	e77d      	b.n	392d6 <clear_event_registrations+0x16>
   393da:	bf00      	nop
   393dc:	0004bbaa 	.word	0x0004bbaa
   393e0:	00043ff2 	.word	0x00043ff2
   393e4:	0004402c 	.word	0x0004402c
   393e8:	2001a55c 	.word	0x2001a55c

000393ec <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   393ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   393f0:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   393f2:	4b63      	ldr	r3, [pc, #396]	; (39580 <z_impl_k_poll+0x194>)
{
   393f4:	4604      	mov	r4, r0
	struct z_poller *poller = &_current->poller;
   393f6:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   393f8:	2301      	movs	r3, #1
{
   393fa:	4688      	mov	r8, r1
   393fc:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   393fe:	f107 0960 	add.w	r9, r7, #96	; 0x60
	poller->is_polling = true;
   39402:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   39406:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
   3940a:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   3940e:	b153      	cbz	r3, 39426 <z_impl_k_poll+0x3a>
   39410:	495c      	ldr	r1, [pc, #368]	; (39584 <z_impl_k_poll+0x198>)
   39412:	485d      	ldr	r0, [pc, #372]	; (39588 <z_impl_k_poll+0x19c>)
   39414:	f44f 728d 	mov.w	r2, #282	; 0x11a
   39418:	f003 fb10 	bl	3ca3c <assert_print>
   3941c:	f44f 718d 	mov.w	r1, #282	; 0x11a
   39420:	4858      	ldr	r0, [pc, #352]	; (39584 <z_impl_k_poll+0x198>)
   39422:	f003 fb04 	bl	3ca2e <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   39426:	b954      	cbnz	r4, 3943e <z_impl_k_poll+0x52>
   39428:	4956      	ldr	r1, [pc, #344]	; (39584 <z_impl_k_poll+0x198>)
   3942a:	4857      	ldr	r0, [pc, #348]	; (39588 <z_impl_k_poll+0x19c>)
   3942c:	f240 121b 	movw	r2, #283	; 0x11b
   39430:	f003 fb04 	bl	3ca3c <assert_print>
   39434:	f240 111b 	movw	r1, #283	; 0x11b
   39438:	4852      	ldr	r0, [pc, #328]	; (39584 <z_impl_k_poll+0x198>)
   3943a:	f003 faf8 	bl	3ca2e <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   3943e:	f1b8 0f00 	cmp.w	r8, #0
   39442:	da0a      	bge.n	3945a <z_impl_k_poll+0x6e>
   39444:	494f      	ldr	r1, [pc, #316]	; (39584 <z_impl_k_poll+0x198>)
   39446:	4850      	ldr	r0, [pc, #320]	; (39588 <z_impl_k_poll+0x19c>)
   39448:	f44f 728e 	mov.w	r2, #284	; 0x11c
   3944c:	f003 faf6 	bl	3ca3c <assert_print>
   39450:	f44f 718e 	mov.w	r1, #284	; 0x11c
   39454:	484b      	ldr	r0, [pc, #300]	; (39584 <z_impl_k_poll+0x198>)
   39456:	f003 faea 	bl	3ca2e <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   3945a:	ea56 0305 	orrs.w	r3, r6, r5
   3945e:	bf0c      	ite	eq
   39460:	2301      	moveq	r3, #1
   39462:	2300      	movne	r3, #0
   39464:	4641      	mov	r1, r8
   39466:	464a      	mov	r2, r9
   39468:	4620      	mov	r0, r4
   3946a:	f7ff fe39 	bl	390e0 <register_events>
   3946e:	4680      	mov	r8, r0
   39470:	f04f 0320 	mov.w	r3, #32
   39474:	f3ef 8911 	mrs	r9, BASEPRI
   39478:	f383 8812 	msr	BASEPRI_MAX, r3
   3947c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39480:	4842      	ldr	r0, [pc, #264]	; (3958c <z_impl_k_poll+0x1a0>)
   39482:	f7fd f89d 	bl	365c0 <z_spin_lock_valid>
   39486:	b940      	cbnz	r0, 3949a <z_impl_k_poll+0xae>
   39488:	4941      	ldr	r1, [pc, #260]	; (39590 <z_impl_k_poll+0x1a4>)
   3948a:	483f      	ldr	r0, [pc, #252]	; (39588 <z_impl_k_poll+0x19c>)
   3948c:	228e      	movs	r2, #142	; 0x8e
   3948e:	f003 fad5 	bl	3ca3c <assert_print>
   39492:	218e      	movs	r1, #142	; 0x8e
   39494:	483e      	ldr	r0, [pc, #248]	; (39590 <z_impl_k_poll+0x1a4>)
   39496:	f003 faca 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   3949a:	483c      	ldr	r0, [pc, #240]	; (3958c <z_impl_k_poll+0x1a0>)
   3949c:	f7fd f8ae 	bl	365fc <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   394a0:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
   394a4:	b9d3      	cbnz	r3, 394dc <z_impl_k_poll+0xf0>
		clear_event_registrations(events, events_registered, key);
   394a6:	4620      	mov	r0, r4
   394a8:	464a      	mov	r2, r9
   394aa:	4641      	mov	r1, r8
   394ac:	f7ff ff08 	bl	392c0 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   394b0:	4836      	ldr	r0, [pc, #216]	; (3958c <z_impl_k_poll+0x1a0>)
   394b2:	f7fd f893 	bl	365dc <z_spin_unlock_valid>
   394b6:	b940      	cbnz	r0, 394ca <z_impl_k_poll+0xde>
   394b8:	4935      	ldr	r1, [pc, #212]	; (39590 <z_impl_k_poll+0x1a4>)
   394ba:	4833      	ldr	r0, [pc, #204]	; (39588 <z_impl_k_poll+0x19c>)
   394bc:	22b9      	movs	r2, #185	; 0xb9
   394be:	f003 fabd 	bl	3ca3c <assert_print>
   394c2:	21b9      	movs	r1, #185	; 0xb9
   394c4:	4832      	ldr	r0, [pc, #200]	; (39590 <z_impl_k_poll+0x1a4>)
   394c6:	f003 fab2 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   394ca:	f389 8811 	msr	BASEPRI, r9
   394ce:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
   394d2:	2500      	movs	r5, #0
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   394d4:	4628      	mov	r0, r5
   394d6:	b003      	add	sp, #12
   394d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   394dc:	2300      	movs	r3, #0
   394de:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   394e2:	ea56 0305 	orrs.w	r3, r6, r5
   394e6:	d113      	bne.n	39510 <z_impl_k_poll+0x124>
   394e8:	4828      	ldr	r0, [pc, #160]	; (3958c <z_impl_k_poll+0x1a0>)
   394ea:	f7fd f877 	bl	365dc <z_spin_unlock_valid>
   394ee:	b940      	cbnz	r0, 39502 <z_impl_k_poll+0x116>
   394f0:	4927      	ldr	r1, [pc, #156]	; (39590 <z_impl_k_poll+0x1a4>)
   394f2:	4825      	ldr	r0, [pc, #148]	; (39588 <z_impl_k_poll+0x19c>)
   394f4:	22b9      	movs	r2, #185	; 0xb9
   394f6:	f003 faa1 	bl	3ca3c <assert_print>
   394fa:	21b9      	movs	r1, #185	; 0xb9
   394fc:	4824      	ldr	r0, [pc, #144]	; (39590 <z_impl_k_poll+0x1a4>)
   394fe:	f003 fa96 	bl	3ca2e <assert_post_action>
   39502:	f389 8811 	msr	BASEPRI, r9
   39506:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   3950a:	f06f 050a 	mvn.w	r5, #10
   3950e:	e7e1      	b.n	394d4 <z_impl_k_poll+0xe8>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   39510:	e9cd 6500 	strd	r6, r5, [sp]
   39514:	4649      	mov	r1, r9
   39516:	4a1f      	ldr	r2, [pc, #124]	; (39594 <z_impl_k_poll+0x1a8>)
   39518:	481c      	ldr	r0, [pc, #112]	; (3958c <z_impl_k_poll+0x1a0>)
   3951a:	f7fe fdb5 	bl	38088 <z_pend_curr>
   3951e:	4605      	mov	r5, r0
	__asm__ volatile(
   39520:	f04f 0320 	mov.w	r3, #32
   39524:	f3ef 8611 	mrs	r6, BASEPRI
   39528:	f383 8812 	msr	BASEPRI_MAX, r3
   3952c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39530:	4816      	ldr	r0, [pc, #88]	; (3958c <z_impl_k_poll+0x1a0>)
   39532:	f7fd f845 	bl	365c0 <z_spin_lock_valid>
   39536:	b940      	cbnz	r0, 3954a <z_impl_k_poll+0x15e>
   39538:	4915      	ldr	r1, [pc, #84]	; (39590 <z_impl_k_poll+0x1a4>)
   3953a:	4813      	ldr	r0, [pc, #76]	; (39588 <z_impl_k_poll+0x19c>)
   3953c:	228e      	movs	r2, #142	; 0x8e
   3953e:	f003 fa7d 	bl	3ca3c <assert_print>
   39542:	218e      	movs	r1, #142	; 0x8e
   39544:	4812      	ldr	r0, [pc, #72]	; (39590 <z_impl_k_poll+0x1a4>)
   39546:	f003 fa72 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   3954a:	4810      	ldr	r0, [pc, #64]	; (3958c <z_impl_k_poll+0x1a0>)
   3954c:	f7fd f856 	bl	365fc <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   39550:	4620      	mov	r0, r4
   39552:	4632      	mov	r2, r6
   39554:	4641      	mov	r1, r8
   39556:	f7ff feb3 	bl	392c0 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3955a:	480c      	ldr	r0, [pc, #48]	; (3958c <z_impl_k_poll+0x1a0>)
   3955c:	f7fd f83e 	bl	365dc <z_spin_unlock_valid>
   39560:	b940      	cbnz	r0, 39574 <z_impl_k_poll+0x188>
   39562:	490b      	ldr	r1, [pc, #44]	; (39590 <z_impl_k_poll+0x1a4>)
   39564:	4808      	ldr	r0, [pc, #32]	; (39588 <z_impl_k_poll+0x19c>)
   39566:	22b9      	movs	r2, #185	; 0xb9
   39568:	f003 fa68 	bl	3ca3c <assert_print>
   3956c:	21b9      	movs	r1, #185	; 0xb9
   3956e:	4808      	ldr	r0, [pc, #32]	; (39590 <z_impl_k_poll+0x1a4>)
   39570:	f003 fa5d 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   39574:	f386 8811 	msr	BASEPRI, r6
   39578:	f3bf 8f6f 	isb	sy
	return swap_rc;
   3957c:	e7aa      	b.n	394d4 <z_impl_k_poll+0xe8>
   3957e:	bf00      	nop
   39580:	2001a500 	.word	0x2001a500
   39584:	0004bbaa 	.word	0x0004bbaa
   39588:	00043ff2 	.word	0x00043ff2
   3958c:	2001a55c 	.word	0x2001a55c
   39590:	0004402c 	.word	0x0004402c
   39594:	20014a6c 	.word	0x20014a6c

00039598 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   39598:	b570      	push	{r4, r5, r6, lr}
   3959a:	4604      	mov	r4, r0
   3959c:	460d      	mov	r5, r1
	__asm__ volatile(
   3959e:	f04f 0320 	mov.w	r3, #32
   395a2:	f3ef 8611 	mrs	r6, BASEPRI
   395a6:	f383 8812 	msr	BASEPRI_MAX, r3
   395aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   395ae:	481c      	ldr	r0, [pc, #112]	; (39620 <z_impl_k_poll_signal_raise+0x88>)
   395b0:	f7fd f806 	bl	365c0 <z_spin_lock_valid>
   395b4:	b940      	cbnz	r0, 395c8 <z_impl_k_poll_signal_raise+0x30>
   395b6:	491b      	ldr	r1, [pc, #108]	; (39624 <z_impl_k_poll_signal_raise+0x8c>)
   395b8:	481b      	ldr	r0, [pc, #108]	; (39628 <z_impl_k_poll_signal_raise+0x90>)
   395ba:	228e      	movs	r2, #142	; 0x8e
   395bc:	f003 fa3e 	bl	3ca3c <assert_print>
   395c0:	218e      	movs	r1, #142	; 0x8e
   395c2:	4818      	ldr	r0, [pc, #96]	; (39624 <z_impl_k_poll_signal_raise+0x8c>)
   395c4:	f003 fa33 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   395c8:	4815      	ldr	r0, [pc, #84]	; (39620 <z_impl_k_poll_signal_raise+0x88>)
   395ca:	f7fd f817 	bl	365fc <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
	sig->signaled = 1U;
   395ce:	2101      	movs	r1, #1
	return list->head == list;
   395d0:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
   395d2:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   395d4:	4284      	cmp	r4, r0
	sig->signaled = 1U;
   395d6:	60a1      	str	r1, [r4, #8]
   395d8:	d112      	bne.n	39600 <z_impl_k_poll_signal_raise+0x68>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   395da:	4811      	ldr	r0, [pc, #68]	; (39620 <z_impl_k_poll_signal_raise+0x88>)
   395dc:	f7fc fffe 	bl	365dc <z_spin_unlock_valid>
   395e0:	b940      	cbnz	r0, 395f4 <z_impl_k_poll_signal_raise+0x5c>
   395e2:	4910      	ldr	r1, [pc, #64]	; (39624 <z_impl_k_poll_signal_raise+0x8c>)
   395e4:	4810      	ldr	r0, [pc, #64]	; (39628 <z_impl_k_poll_signal_raise+0x90>)
   395e6:	22b9      	movs	r2, #185	; 0xb9
   395e8:	f003 fa28 	bl	3ca3c <assert_print>
   395ec:	21b9      	movs	r1, #185	; 0xb9
   395ee:	480d      	ldr	r0, [pc, #52]	; (39624 <z_impl_k_poll_signal_raise+0x8c>)
   395f0:	f003 fa1d 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   395f4:	f386 8811 	msr	BASEPRI, r6
   395f8:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   395fc:	2400      	movs	r4, #0
   395fe:	e00d      	b.n	3961c <z_impl_k_poll_signal_raise+0x84>
	sys_dnode_t *const next = node->next;
   39600:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   39604:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   39606:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   39608:	2300      	movs	r3, #0
	node->prev = NULL;
   3960a:	e9c0 3300 	strd	r3, r3, [r0]
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   3960e:	f007 fdbc 	bl	4118a <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   39612:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   39614:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   39616:	4802      	ldr	r0, [pc, #8]	; (39620 <z_impl_k_poll_signal_raise+0x88>)
   39618:	f7fe f95e 	bl	378d8 <z_reschedule>
	return rc;
}
   3961c:	4620      	mov	r0, r4
   3961e:	bd70      	pop	{r4, r5, r6, pc}
   39620:	2001a55c 	.word	0x2001a55c
   39624:	0004402c 	.word	0x0004402c
   39628:	00043ff2 	.word	0x00043ff2

0003962c <k_event_post_internal>:
	return match != 0;
}

static void k_event_post_internal(struct k_event *event, uint32_t events,
				  bool accumulate)
{
   3962c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39630:	4605      	mov	r5, r0
   39632:	460e      	mov	r6, r1
   39634:	4614      	mov	r4, r2
	k_spinlock_key_t  key;
	struct k_thread  *thread;
	unsigned int      wait_condition;
	struct k_thread  *head = NULL;

	key = k_spin_lock(&event->lock);
   39636:	f100 070c 	add.w	r7, r0, #12
	__asm__ volatile(
   3963a:	f04f 0320 	mov.w	r3, #32
   3963e:	f3ef 8811 	mrs	r8, BASEPRI
   39642:	f383 8812 	msr	BASEPRI_MAX, r3
   39646:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3964a:	4638      	mov	r0, r7
   3964c:	f7fc ffb8 	bl	365c0 <z_spin_lock_valid>
   39650:	b940      	cbnz	r0, 39664 <k_event_post_internal+0x38>
   39652:	4920      	ldr	r1, [pc, #128]	; (396d4 <k_event_post_internal+0xa8>)
   39654:	4820      	ldr	r0, [pc, #128]	; (396d8 <k_event_post_internal+0xac>)
   39656:	228e      	movs	r2, #142	; 0x8e
   39658:	f003 f9f0 	bl	3ca3c <assert_print>
   3965c:	218e      	movs	r1, #142	; 0x8e
   3965e:	481d      	ldr	r0, [pc, #116]	; (396d4 <k_event_post_internal+0xa8>)
   39660:	f003 f9e5 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   39664:	4638      	mov	r0, r7
   39666:	f7fc ffc9 	bl	365fc <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_event, post, event, events,
					accumulate);

	if (accumulate) {
   3966a:	b10c      	cbz	r4, 39670 <k_event_post_internal+0x44>
		events |= event->events;
   3966c:	68ab      	ldr	r3, [r5, #8]
   3966e:	431e      	orrs	r6, r3
	return list->head == list;
   39670:	682b      	ldr	r3, [r5, #0]
	 * 1. Create a linked list of threads to unpend.
	 * 2. Unpend each of the threads in the linked list
	 * 3. Ready each of the threads in the linked list
	 */

	_WAIT_Q_FOR_EACH(&event->wait_q, thread) {
   39672:	2400      	movs	r4, #0
   39674:	429d      	cmp	r5, r3
   39676:	bf08      	it	eq
   39678:	2300      	moveq	r3, #0
	event->events = events;
   3967a:	60ae      	str	r6, [r5, #8]
	_WAIT_Q_FOR_EACH(&event->wait_q, thread) {
   3967c:	b1fb      	cbz	r3, 396be <k_event_post_internal+0x92>
		wait_condition = thread->event_options & K_EVENT_WAIT_MASK;
   3967e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c

		if (are_wait_conditions_met(thread->events, events,
   39680:	6e98      	ldr	r0, [r3, #104]	; 0x68
	if (wait_condition == K_EVENT_WAIT_ALL) {
   39682:	07c9      	lsls	r1, r1, #31
	uint32_t  match = current & desired;
   39684:	ea00 0206 	and.w	r2, r0, r6
	if (wait_condition == K_EVENT_WAIT_ALL) {
   39688:	d51f      	bpl.n	396ca <k_event_post_internal+0x9e>
		return match == desired;
   3968a:	1a81      	subs	r1, r0, r2
   3968c:	424a      	negs	r2, r1
   3968e:	414a      	adcs	r2, r1
		if (are_wait_conditions_met(thread->events, events,
   39690:	b10a      	cbz	r2, 39696 <k_event_post_internal+0x6a>
			/*
			 * The wait conditions have been satisfied. Add this
			 * thread to the list of threads to unpend.
			 */

			thread->next_event_link = head;
   39692:	665c      	str	r4, [r3, #100]	; 0x64
   39694:	461c      	mov	r4, r3
	return (node == list->tail) ? NULL : node->next;
   39696:	686a      	ldr	r2, [r5, #4]
   39698:	4293      	cmp	r3, r2
   3969a:	d002      	beq.n	396a2 <k_event_post_internal+0x76>
   3969c:	681b      	ldr	r3, [r3, #0]
	_WAIT_Q_FOR_EACH(&event->wait_q, thread) {
   3969e:	2b00      	cmp	r3, #0
   396a0:	d1ed      	bne.n	3967e <k_event_post_internal+0x52>
		}


	}

	if (head != NULL) {
   396a2:	b164      	cbz	r4, 396be <k_event_post_internal+0x92>
   396a4:	2500      	movs	r5, #0
		thread = head;
		do {
			z_unpend_thread(thread);
   396a6:	4620      	mov	r0, r4
   396a8:	f7fe f9dc 	bl	37a64 <z_unpend_thread>
			arch_thread_return_value_set(thread, 0);
			thread->events = events;
			z_ready_thread(thread);
   396ac:	4620      	mov	r0, r4
   396ae:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
			thread->events = events;
   396b2:	66a6      	str	r6, [r4, #104]	; 0x68
			z_ready_thread(thread);
   396b4:	f7fe fb40 	bl	37d38 <z_ready_thread>
			thread = thread->next_event_link;
   396b8:	6e64      	ldr	r4, [r4, #100]	; 0x64
		} while (thread != NULL);
   396ba:	2c00      	cmp	r4, #0
   396bc:	d1f3      	bne.n	396a6 <k_event_post_internal+0x7a>
	}

	z_reschedule(&event->lock, key);
   396be:	4641      	mov	r1, r8
   396c0:	4638      	mov	r0, r7

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_event, post, event, events,
				       accumulate);
}
   396c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_reschedule(&event->lock, key);
   396c6:	f7fe b907 	b.w	378d8 <z_reschedule>
	return match != 0;
   396ca:	3a00      	subs	r2, #0
   396cc:	bf18      	it	ne
   396ce:	2201      	movne	r2, #1
   396d0:	e7de      	b.n	39690 <k_event_post_internal+0x64>
   396d2:	bf00      	nop
   396d4:	0004402c 	.word	0x0004402c
   396d8:	00043ff2 	.word	0x00043ff2

000396dc <k_event_wait_internal>:
#include <syscalls/k_event_set_mrsh.c>
#endif

static uint32_t k_event_wait_internal(struct k_event *event, uint32_t events,
				      unsigned int options, k_timeout_t timeout)
{
   396dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   396e0:	b085      	sub	sp, #20
   396e2:	e9dd b30e 	ldrd	fp, r3, [sp, #56]	; 0x38
   396e6:	4605      	mov	r5, r0
   396e8:	460c      	mov	r4, r1
   396ea:	4690      	mov	r8, r2
   396ec:	9302      	str	r3, [sp, #8]
   396ee:	f3ef 8305 	mrs	r3, IPSR
	uint32_t  rv = 0;
	unsigned int  wait_condition;
	struct k_thread  *thread;

	__ASSERT(((arch_is_in_isr() == false) ||
   396f2:	b163      	cbz	r3, 3970e <k_event_wait_internal+0x32>
   396f4:	9b02      	ldr	r3, [sp, #8]
   396f6:	ea5b 0303 	orrs.w	r3, fp, r3
   396fa:	d008      	beq.n	3970e <k_event_wait_internal+0x32>
   396fc:	493a      	ldr	r1, [pc, #232]	; (397e8 <k_event_wait_internal+0x10c>)
   396fe:	483b      	ldr	r0, [pc, #236]	; (397ec <k_event_wait_internal+0x110>)
   39700:	22ba      	movs	r2, #186	; 0xba
   39702:	f003 f99b 	bl	3ca3c <assert_print>
   39706:	21ba      	movs	r1, #186	; 0xba
   39708:	4837      	ldr	r0, [pc, #220]	; (397e8 <k_event_wait_internal+0x10c>)
   3970a:	f003 f990 	bl	3ca2e <assert_post_action>
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_event, wait, event, events,
					options, timeout);

	if (events == 0) {
   3970e:	2c00      	cmp	r4, #0
   39710:	d03d      	beq.n	3978e <k_event_wait_internal+0xb2>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_event, wait, event, events, 0);
		return 0;
	}

	wait_condition = options & K_EVENT_WAIT_MASK;
   39712:	f008 0301 	and.w	r3, r8, #1
   39716:	9303      	str	r3, [sp, #12]
	return z_impl_z_current_get();
   39718:	f7fe ff9a 	bl	38650 <z_impl_z_current_get>
	thread = z_current_get();

	k_spinlock_key_t  key = k_spin_lock(&event->lock);
   3971c:	f105 0a0c 	add.w	sl, r5, #12
   39720:	4607      	mov	r7, r0
   39722:	f04f 0220 	mov.w	r2, #32
   39726:	f3ef 8911 	mrs	r9, BASEPRI
   3972a:	f382 8812 	msr	BASEPRI_MAX, r2
   3972e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39732:	4650      	mov	r0, sl
   39734:	f7fc ff44 	bl	365c0 <z_spin_lock_valid>
   39738:	b940      	cbnz	r0, 3974c <k_event_wait_internal+0x70>
   3973a:	492d      	ldr	r1, [pc, #180]	; (397f0 <k_event_wait_internal+0x114>)
   3973c:	482b      	ldr	r0, [pc, #172]	; (397ec <k_event_wait_internal+0x110>)
   3973e:	228e      	movs	r2, #142	; 0x8e
   39740:	f003 f97c 	bl	3ca3c <assert_print>
   39744:	218e      	movs	r1, #142	; 0x8e
   39746:	482a      	ldr	r0, [pc, #168]	; (397f0 <k_event_wait_internal+0x114>)
   39748:	f003 f971 	bl	3ca2e <assert_post_action>
	z_spin_lock_set_owner(l);
   3974c:	4650      	mov	r0, sl
   3974e:	f7fc ff55 	bl	365fc <z_spin_lock_set_owner>

	if (options & K_EVENT_WAIT_RESET) {
   39752:	f018 0f02 	tst.w	r8, #2
		event->events = 0;
   39756:	bf1c      	itt	ne
   39758:	2200      	movne	r2, #0
   3975a:	60aa      	strne	r2, [r5, #8]
	}

	/* Test if the wait conditions have already been met. */

	if (are_wait_conditions_met(events, event->events, wait_condition)) {
   3975c:	68ae      	ldr	r6, [r5, #8]
	if (wait_condition == K_EVENT_WAIT_ALL) {
   3975e:	9b03      	ldr	r3, [sp, #12]
	uint32_t  match = current & desired;
   39760:	ea06 0204 	and.w	r2, r6, r4
	if (wait_condition == K_EVENT_WAIT_ALL) {
   39764:	b1bb      	cbz	r3, 39796 <k_event_wait_internal+0xba>
	if (are_wait_conditions_met(events, event->events, wait_condition)) {
   39766:	4294      	cmp	r4, r2
   39768:	d117      	bne.n	3979a <k_event_wait_internal+0xbe>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3976a:	4650      	mov	r0, sl
   3976c:	f7fc ff36 	bl	365dc <z_spin_unlock_valid>
   39770:	b940      	cbnz	r0, 39784 <k_event_wait_internal+0xa8>
   39772:	491f      	ldr	r1, [pc, #124]	; (397f0 <k_event_wait_internal+0x114>)
   39774:	481d      	ldr	r0, [pc, #116]	; (397ec <k_event_wait_internal+0x110>)
   39776:	22b9      	movs	r2, #185	; 0xb9
   39778:	f003 f960 	bl	3ca3c <assert_print>
   3977c:	21b9      	movs	r1, #185	; 0xb9
   3977e:	481c      	ldr	r0, [pc, #112]	; (397f0 <k_event_wait_internal+0x114>)
   39780:	f003 f955 	bl	3ca2e <assert_post_action>
	__asm__ volatile(
   39784:	f389 8811 	msr	BASEPRI, r9
   39788:	f3bf 8f6f 	isb	sy

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_event, wait, event,
				       events, rv & events);

	return rv & events;
   3978c:	4034      	ands	r4, r6
}
   3978e:	4620      	mov	r0, r4
   39790:	b005      	add	sp, #20
   39792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (are_wait_conditions_met(events, event->events, wait_condition)) {
   39796:	2a00      	cmp	r2, #0
   39798:	d1e7      	bne.n	3976a <k_event_wait_internal+0x8e>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3979a:	9b02      	ldr	r3, [sp, #8]
   3979c:	ea5b 0303 	orrs.w	r3, fp, r3
   397a0:	d112      	bne.n	397c8 <k_event_wait_internal+0xec>
   397a2:	4650      	mov	r0, sl
   397a4:	f7fc ff1a 	bl	365dc <z_spin_unlock_valid>
   397a8:	b940      	cbnz	r0, 397bc <k_event_wait_internal+0xe0>
   397aa:	4911      	ldr	r1, [pc, #68]	; (397f0 <k_event_wait_internal+0x114>)
   397ac:	480f      	ldr	r0, [pc, #60]	; (397ec <k_event_wait_internal+0x110>)
   397ae:	22b9      	movs	r2, #185	; 0xb9
   397b0:	f003 f944 	bl	3ca3c <assert_print>
   397b4:	21b9      	movs	r1, #185	; 0xb9
   397b6:	480e      	ldr	r0, [pc, #56]	; (397f0 <k_event_wait_internal+0x114>)
   397b8:	f003 f939 	bl	3ca2e <assert_post_action>
   397bc:	f389 8811 	msr	BASEPRI, r9
   397c0:	f3bf 8f6f 	isb	sy
	uint32_t  rv = 0;
   397c4:	2600      	movs	r6, #0
   397c6:	e7e1      	b.n	3978c <k_event_wait_internal+0xb0>
	if (z_pend_curr(&event->lock, key, &event->wait_q, timeout) == 0) {
   397c8:	9b02      	ldr	r3, [sp, #8]
	thread->event_options = options;
   397ca:	e9c7 481a 	strd	r4, r8, [r7, #104]	; 0x68
	if (z_pend_curr(&event->lock, key, &event->wait_q, timeout) == 0) {
   397ce:	462a      	mov	r2, r5
   397d0:	4649      	mov	r1, r9
   397d2:	4650      	mov	r0, sl
   397d4:	f8cd b000 	str.w	fp, [sp]
   397d8:	9301      	str	r3, [sp, #4]
   397da:	f7fe fc55 	bl	38088 <z_pend_curr>
   397de:	2800      	cmp	r0, #0
   397e0:	d1f0      	bne.n	397c4 <k_event_wait_internal+0xe8>
		rv = thread->events;
   397e2:	6ebe      	ldr	r6, [r7, #104]	; 0x68
   397e4:	e7d2      	b.n	3978c <k_event_wait_internal+0xb0>
   397e6:	bf00      	nop
   397e8:	0004bbcb 	.word	0x0004bbcb
   397ec:	00043ff2 	.word	0x00043ff2
   397f0:	0004402c 	.word	0x0004402c

000397f4 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   397f4:	3204      	adds	r2, #4
#include <string.h>
#include <sys/math_extras.h>
#include <sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   397f6:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   397fa:	4606      	mov	r6, r0
   397fc:	460d      	mov	r5, r1
   397fe:	d20a      	bcs.n	39816 <z_heap_aligned_alloc+0x22>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   39800:	f04f 0800 	mov.w	r8, #0
   39804:	f04f 0900 	mov.w	r9, #0
   39808:	f041 0104 	orr.w	r1, r1, #4
   3980c:	e9cd 8900 	strd	r8, r9, [sp]
   39810:	f7fc fcc0 	bl	36194 <k_heap_aligned_alloc>
	if (mem == NULL) {
   39814:	b920      	cbnz	r0, 39820 <z_heap_aligned_alloc+0x2c>
		return NULL;
   39816:	2400      	movs	r4, #0
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   39818:	4620      	mov	r0, r4
   3981a:	b002      	add	sp, #8
   3981c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	*heap_ref = heap;
   39820:	4604      	mov	r4, r0
   39822:	f844 6b04 	str.w	r6, [r4], #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   39826:	2d00      	cmp	r5, #0
   39828:	d0f6      	beq.n	39818 <z_heap_aligned_alloc+0x24>
   3982a:	3d01      	subs	r5, #1
   3982c:	422c      	tst	r4, r5
   3982e:	d0f3      	beq.n	39818 <z_heap_aligned_alloc+0x24>
   39830:	2225      	movs	r2, #37	; 0x25
   39832:	4904      	ldr	r1, [pc, #16]	; (39844 <z_heap_aligned_alloc+0x50>)
   39834:	4804      	ldr	r0, [pc, #16]	; (39848 <z_heap_aligned_alloc+0x54>)
   39836:	f003 f901 	bl	3ca3c <assert_print>
   3983a:	2125      	movs	r1, #37	; 0x25
   3983c:	4801      	ldr	r0, [pc, #4]	; (39844 <z_heap_aligned_alloc+0x50>)
   3983e:	f003 f8f6 	bl	3ca2e <assert_post_action>
   39842:	e7e9      	b.n	39818 <z_heap_aligned_alloc+0x24>
   39844:	0004bbee 	.word	0x0004bbee
   39848:	00043ff2 	.word	0x00043ff2

0003984c <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   3984c:	2803      	cmp	r0, #3
{
   3984e:	b538      	push	{r3, r4, r5, lr}
   39850:	4604      	mov	r4, r0
   39852:	460d      	mov	r5, r1
	__ASSERT(align / sizeof(void *) >= 1
   39854:	d901      	bls.n	3985a <k_aligned_alloc+0xe>
   39856:	0783      	lsls	r3, r0, #30
   39858:	d008      	beq.n	3986c <k_aligned_alloc+0x20>
   3985a:	490e      	ldr	r1, [pc, #56]	; (39894 <k_aligned_alloc+0x48>)
   3985c:	480e      	ldr	r0, [pc, #56]	; (39898 <k_aligned_alloc+0x4c>)
   3985e:	2242      	movs	r2, #66	; 0x42
   39860:	f003 f8ec 	bl	3ca3c <assert_print>
   39864:	2142      	movs	r1, #66	; 0x42
   39866:	480b      	ldr	r0, [pc, #44]	; (39894 <k_aligned_alloc+0x48>)
   39868:	f003 f8e1 	bl	3ca2e <assert_post_action>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   3986c:	1e63      	subs	r3, r4, #1
   3986e:	4223      	tst	r3, r4
   39870:	d008      	beq.n	39884 <k_aligned_alloc+0x38>
   39872:	4908      	ldr	r1, [pc, #32]	; (39894 <k_aligned_alloc+0x48>)
   39874:	4808      	ldr	r0, [pc, #32]	; (39898 <k_aligned_alloc+0x4c>)
   39876:	2246      	movs	r2, #70	; 0x46
   39878:	f003 f8e0 	bl	3ca3c <assert_print>
   3987c:	2146      	movs	r1, #70	; 0x46
   3987e:	4805      	ldr	r0, [pc, #20]	; (39894 <k_aligned_alloc+0x48>)
   39880:	f003 f8d5 	bl	3ca2e <assert_post_action>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   39884:	462a      	mov	r2, r5
   39886:	4621      	mov	r1, r4

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   39888:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   3988c:	4803      	ldr	r0, [pc, #12]	; (3989c <k_aligned_alloc+0x50>)
   3988e:	f7ff bfb1 	b.w	397f4 <z_heap_aligned_alloc>
   39892:	bf00      	nop
   39894:	0004bbee 	.word	0x0004bbee
   39898:	00043ff2 	.word	0x00043ff2
   3989c:	20014e68 	.word	0x20014e68

000398a0 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   398a0:	4b01      	ldr	r3, [pc, #4]	; (398a8 <k_thread_system_pool_assign+0x8>)
   398a2:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
   398a6:	4770      	bx	lr
   398a8:	20014e68 	.word	0x20014e68

000398ac <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   398ac:	b513      	push	{r0, r1, r4, lr}
   398ae:	4604      	mov	r4, r0
   398b0:	9101      	str	r1, [sp, #4]
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   398b2:	f007 fb31 	bl	40f18 <k_is_in_isr>
   398b6:	9a01      	ldr	r2, [sp, #4]
   398b8:	b958      	cbnz	r0, 398d2 <z_thread_aligned_alloc+0x26>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   398ba:	4b08      	ldr	r3, [pc, #32]	; (398dc <z_thread_aligned_alloc+0x30>)
   398bc:	689b      	ldr	r3, [r3, #8]
   398be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
	}

	if (heap != NULL) {
   398c2:	b143      	cbz	r3, 398d6 <z_thread_aligned_alloc+0x2a>
		ret = z_heap_aligned_alloc(heap, align, size);
   398c4:	4621      	mov	r1, r4
   398c6:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   398c8:	b002      	add	sp, #8
   398ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   398ce:	f7ff bf91 	b.w	397f4 <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   398d2:	4b03      	ldr	r3, [pc, #12]	; (398e0 <z_thread_aligned_alloc+0x34>)
   398d4:	e7f6      	b.n	398c4 <z_thread_aligned_alloc+0x18>
}
   398d6:	b002      	add	sp, #8
   398d8:	bd10      	pop	{r4, pc}
   398da:	bf00      	nop
   398dc:	2001a500 	.word	0x2001a500
   398e0:	20014e68 	.word	0x20014e68

000398e4 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   398e4:	4a02      	ldr	r2, [pc, #8]	; (398f0 <boot_banner+0xc>)
   398e6:	4903      	ldr	r1, [pc, #12]	; (398f4 <boot_banner+0x10>)
   398e8:	4803      	ldr	r0, [pc, #12]	; (398f8 <boot_banner+0x14>)
   398ea:	f002 bec4 	b.w	3c676 <printk>
   398ee:	bf00      	nop
   398f0:	0004517c 	.word	0x0004517c
   398f4:	0004bc12 	.word	0x0004bc12
   398f8:	0004bc1f 	.word	0x0004bc1f

000398fc <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   398fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   398fe:	2400      	movs	r4, #0
   39900:	4b08      	ldr	r3, [pc, #32]	; (39924 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   39902:	f44f 6200 	mov.w	r2, #2048	; 0x800
	struct k_work_queue_config cfg = {
   39906:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   39908:	ab02      	add	r3, sp, #8
   3990a:	9300      	str	r3, [sp, #0]
   3990c:	4906      	ldr	r1, [pc, #24]	; (39928 <k_sys_work_q_init+0x2c>)
   3990e:	f04f 33ff 	mov.w	r3, #4294967295
   39912:	4806      	ldr	r0, [pc, #24]	; (3992c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   39914:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   39918:	f7fd fd92 	bl	37440 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   3991c:	4620      	mov	r0, r4
   3991e:	b004      	add	sp, #16
   39920:	bd10      	pop	{r4, pc}
   39922:	bf00      	nop
   39924:	0004bc46 	.word	0x0004bc46
   39928:	20028340 	.word	0x20028340
   3992c:	20018fa8 	.word	0x20018fa8

00039930 <psa_generate_random>:
    return status;
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   39930:	b530      	push	{r4, r5, lr}
   39932:	b095      	sub	sp, #84	; 0x54
   39934:	4605      	mov	r5, r0
   39936:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   39938:	2230      	movs	r2, #48	; 0x30
   3993a:	2100      	movs	r1, #0
   3993c:	a808      	add	r0, sp, #32
   3993e:	f007 fd51 	bl	413e4 <memset>
   39942:	233f      	movs	r3, #63	; 0x3f
   39944:	9307      	str	r3, [sp, #28]
        .sfn_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
   39946:	ab07      	add	r3, sp, #28
   39948:	9303      	str	r3, [sp, #12]
   3994a:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   3994c:	9406      	str	r4, [sp, #24]
   3994e:	e9cd 3504 	strd	r3, r5, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   39952:	b154      	cbz	r4, 3996a <psa_generate_random+0x3a>
        return PSA_SUCCESS;
    }

    status = API_DISPATCH(tfm_crypto_generate_random,
   39954:	2301      	movs	r3, #1
   39956:	aa05      	add	r2, sp, #20
   39958:	9200      	str	r2, [sp, #0]
   3995a:	2100      	movs	r1, #0
   3995c:	4804      	ldr	r0, [pc, #16]	; (39970 <psa_generate_random+0x40>)
   3995e:	9301      	str	r3, [sp, #4]
   39960:	aa03      	add	r2, sp, #12
   39962:	f000 f815 	bl	39990 <psa_call>
                          TFM_CRYPTO_GENERATE_RANDOM);

    return status;
}
   39966:	b015      	add	sp, #84	; 0x54
   39968:	bd30      	pop	{r4, r5, pc}
        return PSA_SUCCESS;
   3996a:	4620      	mov	r0, r4
   3996c:	e7fb      	b.n	39966 <psa_generate_random+0x36>
   3996e:	bf00      	nop
   39970:	40000100 	.word	0x40000100

00039974 <psa_connect>:
                                0);
}

psa_handle_t psa_connect(uint32_t sid, uint32_t version)
{
    return tfm_ns_interface_dispatch(
   39974:	2300      	movs	r3, #0
{
   39976:	b507      	push	{r0, r1, r2, lr}
   39978:	460a      	mov	r2, r1
    return tfm_ns_interface_dispatch(
   3997a:	9300      	str	r3, [sp, #0]
   3997c:	4601      	mov	r1, r0
   3997e:	4803      	ldr	r0, [pc, #12]	; (3998c <psa_connect+0x18>)
   39980:	f7f7 fe10 	bl	315a4 <tfm_ns_interface_dispatch>
                                (veneer_fn)tfm_psa_connect_veneer,
                                sid,
                                version,
                                0,
                                0);
}
   39984:	b003      	add	sp, #12
   39986:	f85d fb04 	ldr.w	pc, [sp], #4
   3998a:	bf00      	nop
   3998c:	00017c19 	.word	0x00017c19

00039990 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   39990:	b470      	push	{r4, r5, r6}
   39992:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
    if ((type > INT16_MAX) ||
   39996:	f501 4600 	add.w	r6, r1, #32768	; 0x8000
   3999a:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
   3999e:	d20d      	bcs.n	399bc <psa_call+0x2c>
        (type < INT16_MIN) ||
   399a0:	2bff      	cmp	r3, #255	; 0xff
   399a2:	d80b      	bhi.n	399bc <psa_call+0x2c>
        (in_len > UINT8_MAX) ||
   399a4:	2cff      	cmp	r4, #255	; 0xff
   399a6:	d809      	bhi.n	399bc <psa_call+0x2c>
        (out_len > UINT8_MAX)) {
        return PSA_ERROR_PROGRAMMER_ERROR;
    }

    return tfm_ns_interface_dispatch(
   399a8:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
   399ac:	4613      	mov	r3, r2
   399ae:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   399b2:	4601      	mov	r1, r0
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   399b4:	bc70      	pop	{r4, r5, r6}
    return tfm_ns_interface_dispatch(
   399b6:	4803      	ldr	r0, [pc, #12]	; (399c4 <psa_call+0x34>)
   399b8:	f7f7 bdf4 	b.w	315a4 <tfm_ns_interface_dispatch>
}
   399bc:	f06f 0080 	mvn.w	r0, #128	; 0x80
   399c0:	bc70      	pop	{r4, r5, r6}
   399c2:	4770      	bx	lr
   399c4:	00017c21 	.word	0x00017c21

000399c8 <psa_close>:

void psa_close(psa_handle_t handle)
{
    (void)tfm_ns_interface_dispatch(
   399c8:	2300      	movs	r3, #0
{
   399ca:	b507      	push	{r0, r1, r2, lr}
   399cc:	4601      	mov	r1, r0
    (void)tfm_ns_interface_dispatch(
   399ce:	461a      	mov	r2, r3
   399d0:	9300      	str	r3, [sp, #0]
   399d2:	4803      	ldr	r0, [pc, #12]	; (399e0 <psa_close+0x18>)
   399d4:	f7f7 fde6 	bl	315a4 <tfm_ns_interface_dispatch>
                         (veneer_fn)tfm_psa_close_veneer,
                         (uint32_t)handle,
                         0,
                         0,
                         0);
}
   399d8:	b003      	add	sp, #12
   399da:	f85d fb04 	ldr.w	pc, [sp], #4
   399de:	bf00      	nop
   399e0:	00017c11 	.word	0x00017c11

000399e4 <__assert_func>:
   399e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   399e6:	4614      	mov	r4, r2
   399e8:	461a      	mov	r2, r3
   399ea:	4b09      	ldr	r3, [pc, #36]	; (39a10 <__assert_func+0x2c>)
   399ec:	4605      	mov	r5, r0
   399ee:	681b      	ldr	r3, [r3, #0]
   399f0:	68d8      	ldr	r0, [r3, #12]
   399f2:	b14c      	cbz	r4, 39a08 <__assert_func+0x24>
   399f4:	4b07      	ldr	r3, [pc, #28]	; (39a14 <__assert_func+0x30>)
   399f6:	9100      	str	r1, [sp, #0]
   399f8:	4907      	ldr	r1, [pc, #28]	; (39a18 <__assert_func+0x34>)
   399fa:	e9cd 3401 	strd	r3, r4, [sp, #4]
   399fe:	462b      	mov	r3, r5
   39a00:	f000 f80e 	bl	39a20 <fiprintf>
   39a04:	f007 ff6e 	bl	418e4 <abort>
   39a08:	4b04      	ldr	r3, [pc, #16]	; (39a1c <__assert_func+0x38>)
   39a0a:	461c      	mov	r4, r3
   39a0c:	e7f3      	b.n	399f6 <__assert_func+0x12>
   39a0e:	bf00      	nop
   39a10:	20014a74 	.word	0x20014a74
   39a14:	0004bc4f 	.word	0x0004bc4f
   39a18:	0004bc5c 	.word	0x0004bc5c
   39a1c:	0004517c 	.word	0x0004517c

00039a20 <fiprintf>:
   39a20:	b40e      	push	{r1, r2, r3}
   39a22:	b503      	push	{r0, r1, lr}
   39a24:	ab03      	add	r3, sp, #12
   39a26:	4601      	mov	r1, r0
   39a28:	4805      	ldr	r0, [pc, #20]	; (39a40 <fiprintf+0x20>)
   39a2a:	f853 2b04 	ldr.w	r2, [r3], #4
   39a2e:	6800      	ldr	r0, [r0, #0]
   39a30:	9301      	str	r3, [sp, #4]
   39a32:	f000 f969 	bl	39d08 <_vfiprintf_r>
   39a36:	b002      	add	sp, #8
   39a38:	f85d eb04 	ldr.w	lr, [sp], #4
   39a3c:	b003      	add	sp, #12
   39a3e:	4770      	bx	lr
   39a40:	20014a74 	.word	0x20014a74

00039a44 <gmtime_r>:
   39a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39a48:	e9d0 6700 	ldrd	r6, r7, [r0]
   39a4c:	460c      	mov	r4, r1
   39a4e:	4a4f      	ldr	r2, [pc, #316]	; (39b8c <gmtime_r+0x148>)
   39a50:	2300      	movs	r3, #0
   39a52:	4630      	mov	r0, r6
   39a54:	4639      	mov	r1, r7
   39a56:	f04f 0805 	mov.w	r8, #5
   39a5a:	f7e3 f9f5 	bl	1ce48 <__aeabi_ldivmod>
   39a5e:	4639      	mov	r1, r7
   39a60:	4605      	mov	r5, r0
   39a62:	4a4a      	ldr	r2, [pc, #296]	; (39b8c <gmtime_r+0x148>)
   39a64:	4630      	mov	r0, r6
   39a66:	2300      	movs	r3, #0
   39a68:	f7e3 f9ee 	bl	1ce48 <__aeabi_ldivmod>
   39a6c:	2a00      	cmp	r2, #0
   39a6e:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
   39a72:	4d47      	ldr	r5, [pc, #284]	; (39b90 <gmtime_r+0x14c>)
   39a74:	bfb8      	it	lt
   39a76:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   39a7a:	f240 1c6d 	movw	ip, #365	; 0x16d
   39a7e:	bfae      	itee	ge
   39a80:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
   39a84:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
   39a88:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   39a8c:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   39a90:	2764      	movs	r7, #100	; 0x64
   39a92:	fbb2 f1f0 	udiv	r1, r2, r0
   39a96:	fb00 2211 	mls	r2, r0, r1, r2
   39a9a:	203c      	movs	r0, #60	; 0x3c
   39a9c:	60a1      	str	r1, [r4, #8]
   39a9e:	fbb2 f1f0 	udiv	r1, r2, r0
   39aa2:	fb00 2211 	mls	r2, r0, r1, r2
   39aa6:	483b      	ldr	r0, [pc, #236]	; (39b94 <gmtime_r+0x150>)
   39aa8:	6061      	str	r1, [r4, #4]
   39aaa:	2107      	movs	r1, #7
   39aac:	6022      	str	r2, [r4, #0]
   39aae:	1cda      	adds	r2, r3, #3
   39ab0:	fb92 f1f1 	sdiv	r1, r2, r1
   39ab4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   39ab8:	1a52      	subs	r2, r2, r1
   39aba:	bf48      	it	mi
   39abc:	3207      	addmi	r2, #7
   39abe:	2b00      	cmp	r3, #0
   39ac0:	61a2      	str	r2, [r4, #24]
   39ac2:	bfbb      	ittet	lt
   39ac4:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
   39ac8:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
   39acc:	fb93 f5f5 	sdivge	r5, r3, r5
   39ad0:	fb92 f5f5 	sdivlt	r5, r2, r5
   39ad4:	f648 62ac 	movw	r2, #36524	; 0x8eac
   39ad8:	fb00 3005 	mla	r0, r0, r5, r3
   39adc:	f240 53b4 	movw	r3, #1460	; 0x5b4
   39ae0:	fbb0 f2f2 	udiv	r2, r0, r2
   39ae4:	fbb0 f1f3 	udiv	r1, r0, r3
   39ae8:	4402      	add	r2, r0
   39aea:	1a52      	subs	r2, r2, r1
   39aec:	492a      	ldr	r1, [pc, #168]	; (39b98 <gmtime_r+0x154>)
   39aee:	fbb0 f1f1 	udiv	r1, r0, r1
   39af2:	1a52      	subs	r2, r2, r1
   39af4:	fbb2 f1fc 	udiv	r1, r2, ip
   39af8:	fbb2 f3f3 	udiv	r3, r2, r3
   39afc:	fbb1 f6f7 	udiv	r6, r1, r7
   39b00:	1af3      	subs	r3, r6, r3
   39b02:	2299      	movs	r2, #153	; 0x99
   39b04:	4403      	add	r3, r0
   39b06:	fb0c 3311 	mls	r3, ip, r1, r3
   39b0a:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
   39b0e:	f103 0c01 	add.w	ip, r3, #1
   39b12:	f10e 0e02 	add.w	lr, lr, #2
   39b16:	fbbe f0f2 	udiv	r0, lr, r2
   39b1a:	4342      	muls	r2, r0
   39b1c:	3202      	adds	r2, #2
   39b1e:	fbb2 f2f8 	udiv	r2, r2, r8
   39b22:	ebac 0c02 	sub.w	ip, ip, r2
   39b26:	f240 52f9 	movw	r2, #1529	; 0x5f9
   39b2a:	4596      	cmp	lr, r2
   39b2c:	bf94      	ite	ls
   39b2e:	2202      	movls	r2, #2
   39b30:	f06f 0209 	mvnhi.w	r2, #9
   39b34:	4410      	add	r0, r2
   39b36:	f44f 72c8 	mov.w	r2, #400	; 0x190
   39b3a:	fb02 1505 	mla	r5, r2, r5, r1
   39b3e:	2801      	cmp	r0, #1
   39b40:	bf98      	it	ls
   39b42:	3501      	addls	r5, #1
   39b44:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   39b48:	d30d      	bcc.n	39b66 <gmtime_r+0x122>
   39b4a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
   39b4e:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   39b52:	61e3      	str	r3, [r4, #28]
   39b54:	2300      	movs	r3, #0
   39b56:	f8c4 c00c 	str.w	ip, [r4, #12]
   39b5a:	e9c4 0504 	strd	r0, r5, [r4, #16]
   39b5e:	6223      	str	r3, [r4, #32]
   39b60:	4620      	mov	r0, r4
   39b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   39b66:	078a      	lsls	r2, r1, #30
   39b68:	d102      	bne.n	39b70 <gmtime_r+0x12c>
   39b6a:	fb07 1616 	mls	r6, r7, r6, r1
   39b6e:	b95e      	cbnz	r6, 39b88 <gmtime_r+0x144>
   39b70:	f44f 72c8 	mov.w	r2, #400	; 0x190
   39b74:	fbb1 f6f2 	udiv	r6, r1, r2
   39b78:	fb02 1216 	mls	r2, r2, r6, r1
   39b7c:	fab2 f282 	clz	r2, r2
   39b80:	0952      	lsrs	r2, r2, #5
   39b82:	333b      	adds	r3, #59	; 0x3b
   39b84:	4413      	add	r3, r2
   39b86:	e7e2      	b.n	39b4e <gmtime_r+0x10a>
   39b88:	2201      	movs	r2, #1
   39b8a:	e7fa      	b.n	39b82 <gmtime_r+0x13e>
   39b8c:	00015180 	.word	0x00015180
   39b90:	00023ab1 	.word	0x00023ab1
   39b94:	fffdc54f 	.word	0xfffdc54f
   39b98:	00023ab0 	.word	0x00023ab0

00039b9c <malloc>:
   39b9c:	4b02      	ldr	r3, [pc, #8]	; (39ba8 <malloc+0xc>)
   39b9e:	4601      	mov	r1, r0
   39ba0:	6818      	ldr	r0, [r3, #0]
   39ba2:	f000 b857 	b.w	39c54 <_malloc_r>
   39ba6:	bf00      	nop
   39ba8:	20014a74 	.word	0x20014a74

00039bac <free>:
   39bac:	4b02      	ldr	r3, [pc, #8]	; (39bb8 <free+0xc>)
   39bae:	4601      	mov	r1, r0
   39bb0:	6818      	ldr	r0, [r3, #0]
   39bb2:	f000 b803 	b.w	39bbc <_free_r>
   39bb6:	bf00      	nop
   39bb8:	20014a74 	.word	0x20014a74

00039bbc <_free_r>:
   39bbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   39bbe:	2900      	cmp	r1, #0
   39bc0:	d043      	beq.n	39c4a <_free_r+0x8e>
   39bc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
   39bc6:	1f0c      	subs	r4, r1, #4
   39bc8:	9001      	str	r0, [sp, #4]
   39bca:	2b00      	cmp	r3, #0
   39bcc:	bfb8      	it	lt
   39bce:	18e4      	addlt	r4, r4, r3
   39bd0:	f001 fcae 	bl	3b530 <__malloc_lock>
   39bd4:	4a1e      	ldr	r2, [pc, #120]	; (39c50 <_free_r+0x94>)
   39bd6:	9801      	ldr	r0, [sp, #4]
   39bd8:	6813      	ldr	r3, [r2, #0]
   39bda:	b933      	cbnz	r3, 39bea <_free_r+0x2e>
   39bdc:	6063      	str	r3, [r4, #4]
   39bde:	6014      	str	r4, [r2, #0]
   39be0:	b003      	add	sp, #12
   39be2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   39be6:	f001 bca9 	b.w	3b53c <__malloc_unlock>
   39bea:	42a3      	cmp	r3, r4
   39bec:	d908      	bls.n	39c00 <_free_r+0x44>
   39bee:	6825      	ldr	r5, [r4, #0]
   39bf0:	1961      	adds	r1, r4, r5
   39bf2:	428b      	cmp	r3, r1
   39bf4:	bf01      	itttt	eq
   39bf6:	6819      	ldreq	r1, [r3, #0]
   39bf8:	685b      	ldreq	r3, [r3, #4]
   39bfa:	1949      	addeq	r1, r1, r5
   39bfc:	6021      	streq	r1, [r4, #0]
   39bfe:	e7ed      	b.n	39bdc <_free_r+0x20>
   39c00:	461a      	mov	r2, r3
   39c02:	685b      	ldr	r3, [r3, #4]
   39c04:	b10b      	cbz	r3, 39c0a <_free_r+0x4e>
   39c06:	42a3      	cmp	r3, r4
   39c08:	d9fa      	bls.n	39c00 <_free_r+0x44>
   39c0a:	6811      	ldr	r1, [r2, #0]
   39c0c:	1855      	adds	r5, r2, r1
   39c0e:	42a5      	cmp	r5, r4
   39c10:	d10b      	bne.n	39c2a <_free_r+0x6e>
   39c12:	6824      	ldr	r4, [r4, #0]
   39c14:	4421      	add	r1, r4
   39c16:	1854      	adds	r4, r2, r1
   39c18:	6011      	str	r1, [r2, #0]
   39c1a:	42a3      	cmp	r3, r4
   39c1c:	d1e0      	bne.n	39be0 <_free_r+0x24>
   39c1e:	681c      	ldr	r4, [r3, #0]
   39c20:	685b      	ldr	r3, [r3, #4]
   39c22:	4421      	add	r1, r4
   39c24:	6053      	str	r3, [r2, #4]
   39c26:	6011      	str	r1, [r2, #0]
   39c28:	e7da      	b.n	39be0 <_free_r+0x24>
   39c2a:	d902      	bls.n	39c32 <_free_r+0x76>
   39c2c:	230c      	movs	r3, #12
   39c2e:	6003      	str	r3, [r0, #0]
   39c30:	e7d6      	b.n	39be0 <_free_r+0x24>
   39c32:	6825      	ldr	r5, [r4, #0]
   39c34:	1961      	adds	r1, r4, r5
   39c36:	428b      	cmp	r3, r1
   39c38:	bf02      	ittt	eq
   39c3a:	6819      	ldreq	r1, [r3, #0]
   39c3c:	685b      	ldreq	r3, [r3, #4]
   39c3e:	1949      	addeq	r1, r1, r5
   39c40:	6063      	str	r3, [r4, #4]
   39c42:	bf08      	it	eq
   39c44:	6021      	streq	r1, [r4, #0]
   39c46:	6054      	str	r4, [r2, #4]
   39c48:	e7ca      	b.n	39be0 <_free_r+0x24>
   39c4a:	b003      	add	sp, #12
   39c4c:	bd30      	pop	{r4, r5, pc}
   39c4e:	bf00      	nop
   39c50:	2001a560 	.word	0x2001a560

00039c54 <_malloc_r>:
   39c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39c56:	1ccd      	adds	r5, r1, #3
   39c58:	4606      	mov	r6, r0
   39c5a:	f025 0503 	bic.w	r5, r5, #3
   39c5e:	3508      	adds	r5, #8
   39c60:	2d0c      	cmp	r5, #12
   39c62:	bf38      	it	cc
   39c64:	250c      	movcc	r5, #12
   39c66:	2d00      	cmp	r5, #0
   39c68:	db01      	blt.n	39c6e <_malloc_r+0x1a>
   39c6a:	42a9      	cmp	r1, r5
   39c6c:	d903      	bls.n	39c76 <_malloc_r+0x22>
   39c6e:	230c      	movs	r3, #12
   39c70:	6033      	str	r3, [r6, #0]
   39c72:	2000      	movs	r0, #0
   39c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   39c76:	f001 fc5b 	bl	3b530 <__malloc_lock>
   39c7a:	4921      	ldr	r1, [pc, #132]	; (39d00 <_malloc_r+0xac>)
   39c7c:	680a      	ldr	r2, [r1, #0]
   39c7e:	4614      	mov	r4, r2
   39c80:	b99c      	cbnz	r4, 39caa <_malloc_r+0x56>
   39c82:	4f20      	ldr	r7, [pc, #128]	; (39d04 <_malloc_r+0xb0>)
   39c84:	683b      	ldr	r3, [r7, #0]
   39c86:	b923      	cbnz	r3, 39c92 <_malloc_r+0x3e>
   39c88:	4621      	mov	r1, r4
   39c8a:	4630      	mov	r0, r6
   39c8c:	f000 fcd2 	bl	3a634 <_sbrk_r>
   39c90:	6038      	str	r0, [r7, #0]
   39c92:	4629      	mov	r1, r5
   39c94:	4630      	mov	r0, r6
   39c96:	f000 fccd 	bl	3a634 <_sbrk_r>
   39c9a:	1c43      	adds	r3, r0, #1
   39c9c:	d123      	bne.n	39ce6 <_malloc_r+0x92>
   39c9e:	230c      	movs	r3, #12
   39ca0:	4630      	mov	r0, r6
   39ca2:	6033      	str	r3, [r6, #0]
   39ca4:	f001 fc4a 	bl	3b53c <__malloc_unlock>
   39ca8:	e7e3      	b.n	39c72 <_malloc_r+0x1e>
   39caa:	6823      	ldr	r3, [r4, #0]
   39cac:	1b5b      	subs	r3, r3, r5
   39cae:	d417      	bmi.n	39ce0 <_malloc_r+0x8c>
   39cb0:	2b0b      	cmp	r3, #11
   39cb2:	d903      	bls.n	39cbc <_malloc_r+0x68>
   39cb4:	6023      	str	r3, [r4, #0]
   39cb6:	441c      	add	r4, r3
   39cb8:	6025      	str	r5, [r4, #0]
   39cba:	e004      	b.n	39cc6 <_malloc_r+0x72>
   39cbc:	6863      	ldr	r3, [r4, #4]
   39cbe:	42a2      	cmp	r2, r4
   39cc0:	bf0c      	ite	eq
   39cc2:	600b      	streq	r3, [r1, #0]
   39cc4:	6053      	strne	r3, [r2, #4]
   39cc6:	4630      	mov	r0, r6
   39cc8:	f001 fc38 	bl	3b53c <__malloc_unlock>
   39ccc:	f104 000b 	add.w	r0, r4, #11
   39cd0:	1d23      	adds	r3, r4, #4
   39cd2:	f020 0007 	bic.w	r0, r0, #7
   39cd6:	1ac2      	subs	r2, r0, r3
   39cd8:	d0cc      	beq.n	39c74 <_malloc_r+0x20>
   39cda:	1a1b      	subs	r3, r3, r0
   39cdc:	50a3      	str	r3, [r4, r2]
   39cde:	e7c9      	b.n	39c74 <_malloc_r+0x20>
   39ce0:	4622      	mov	r2, r4
   39ce2:	6864      	ldr	r4, [r4, #4]
   39ce4:	e7cc      	b.n	39c80 <_malloc_r+0x2c>
   39ce6:	1cc4      	adds	r4, r0, #3
   39ce8:	f024 0403 	bic.w	r4, r4, #3
   39cec:	42a0      	cmp	r0, r4
   39cee:	d0e3      	beq.n	39cb8 <_malloc_r+0x64>
   39cf0:	1a21      	subs	r1, r4, r0
   39cf2:	4630      	mov	r0, r6
   39cf4:	f000 fc9e 	bl	3a634 <_sbrk_r>
   39cf8:	3001      	adds	r0, #1
   39cfa:	d1dd      	bne.n	39cb8 <_malloc_r+0x64>
   39cfc:	e7cf      	b.n	39c9e <_malloc_r+0x4a>
   39cfe:	bf00      	nop
   39d00:	2001a560 	.word	0x2001a560
   39d04:	2001a564 	.word	0x2001a564

00039d08 <_vfiprintf_r>:
   39d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39d0c:	460d      	mov	r5, r1
   39d0e:	b09d      	sub	sp, #116	; 0x74
   39d10:	4614      	mov	r4, r2
   39d12:	4698      	mov	r8, r3
   39d14:	4606      	mov	r6, r0
   39d16:	b118      	cbz	r0, 39d20 <_vfiprintf_r+0x18>
   39d18:	6983      	ldr	r3, [r0, #24]
   39d1a:	b90b      	cbnz	r3, 39d20 <_vfiprintf_r+0x18>
   39d1c:	f001 f8ee 	bl	3aefc <__sinit>
   39d20:	4b89      	ldr	r3, [pc, #548]	; (39f48 <_vfiprintf_r+0x240>)
   39d22:	429d      	cmp	r5, r3
   39d24:	d11b      	bne.n	39d5e <_vfiprintf_r+0x56>
   39d26:	6875      	ldr	r5, [r6, #4]
   39d28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   39d2a:	07d9      	lsls	r1, r3, #31
   39d2c:	d405      	bmi.n	39d3a <_vfiprintf_r+0x32>
   39d2e:	89ab      	ldrh	r3, [r5, #12]
   39d30:	059a      	lsls	r2, r3, #22
   39d32:	d402      	bmi.n	39d3a <_vfiprintf_r+0x32>
   39d34:	6da8      	ldr	r0, [r5, #88]	; 0x58
   39d36:	f7e9 fdfd 	bl	23934 <__retarget_lock_acquire_recursive>
   39d3a:	89ab      	ldrh	r3, [r5, #12]
   39d3c:	071b      	lsls	r3, r3, #28
   39d3e:	d501      	bpl.n	39d44 <_vfiprintf_r+0x3c>
   39d40:	692b      	ldr	r3, [r5, #16]
   39d42:	b9eb      	cbnz	r3, 39d80 <_vfiprintf_r+0x78>
   39d44:	4629      	mov	r1, r5
   39d46:	4630      	mov	r0, r6
   39d48:	f000 ff58 	bl	3abfc <__swsetup_r>
   39d4c:	b1c0      	cbz	r0, 39d80 <_vfiprintf_r+0x78>
   39d4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   39d50:	07dc      	lsls	r4, r3, #31
   39d52:	d50e      	bpl.n	39d72 <_vfiprintf_r+0x6a>
   39d54:	f04f 30ff 	mov.w	r0, #4294967295
   39d58:	b01d      	add	sp, #116	; 0x74
   39d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39d5e:	4b7b      	ldr	r3, [pc, #492]	; (39f4c <_vfiprintf_r+0x244>)
   39d60:	429d      	cmp	r5, r3
   39d62:	d101      	bne.n	39d68 <_vfiprintf_r+0x60>
   39d64:	68b5      	ldr	r5, [r6, #8]
   39d66:	e7df      	b.n	39d28 <_vfiprintf_r+0x20>
   39d68:	4b79      	ldr	r3, [pc, #484]	; (39f50 <_vfiprintf_r+0x248>)
   39d6a:	429d      	cmp	r5, r3
   39d6c:	bf08      	it	eq
   39d6e:	68f5      	ldreq	r5, [r6, #12]
   39d70:	e7da      	b.n	39d28 <_vfiprintf_r+0x20>
   39d72:	89ab      	ldrh	r3, [r5, #12]
   39d74:	0598      	lsls	r0, r3, #22
   39d76:	d4ed      	bmi.n	39d54 <_vfiprintf_r+0x4c>
   39d78:	6da8      	ldr	r0, [r5, #88]	; 0x58
   39d7a:	f7e9 fdf7 	bl	2396c <__retarget_lock_release_recursive>
   39d7e:	e7e9      	b.n	39d54 <_vfiprintf_r+0x4c>
   39d80:	2300      	movs	r3, #0
   39d82:	f8cd 800c 	str.w	r8, [sp, #12]
   39d86:	f04f 0901 	mov.w	r9, #1
   39d8a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 39f54 <_vfiprintf_r+0x24c>
   39d8e:	9309      	str	r3, [sp, #36]	; 0x24
   39d90:	2320      	movs	r3, #32
   39d92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   39d96:	2330      	movs	r3, #48	; 0x30
   39d98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   39d9c:	4623      	mov	r3, r4
   39d9e:	469a      	mov	sl, r3
   39da0:	f813 2b01 	ldrb.w	r2, [r3], #1
   39da4:	b10a      	cbz	r2, 39daa <_vfiprintf_r+0xa2>
   39da6:	2a25      	cmp	r2, #37	; 0x25
   39da8:	d1f9      	bne.n	39d9e <_vfiprintf_r+0x96>
   39daa:	ebba 0b04 	subs.w	fp, sl, r4
   39dae:	d00b      	beq.n	39dc8 <_vfiprintf_r+0xc0>
   39db0:	465b      	mov	r3, fp
   39db2:	4622      	mov	r2, r4
   39db4:	4629      	mov	r1, r5
   39db6:	4630      	mov	r0, r6
   39db8:	f007 fb42 	bl	41440 <__sfputs_r>
   39dbc:	3001      	adds	r0, #1
   39dbe:	f000 80aa 	beq.w	39f16 <_vfiprintf_r+0x20e>
   39dc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   39dc4:	445a      	add	r2, fp
   39dc6:	9209      	str	r2, [sp, #36]	; 0x24
   39dc8:	f89a 3000 	ldrb.w	r3, [sl]
   39dcc:	2b00      	cmp	r3, #0
   39dce:	f000 80a2 	beq.w	39f16 <_vfiprintf_r+0x20e>
   39dd2:	2300      	movs	r3, #0
   39dd4:	f04f 32ff 	mov.w	r2, #4294967295
   39dd8:	f10a 0a01 	add.w	sl, sl, #1
   39ddc:	9304      	str	r3, [sp, #16]
   39dde:	9307      	str	r3, [sp, #28]
   39de0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   39de4:	931a      	str	r3, [sp, #104]	; 0x68
   39de6:	e9cd 2305 	strd	r2, r3, [sp, #20]
   39dea:	4654      	mov	r4, sl
   39dec:	2205      	movs	r2, #5
   39dee:	4859      	ldr	r0, [pc, #356]	; (39f54 <_vfiprintf_r+0x24c>)
   39df0:	f814 1b01 	ldrb.w	r1, [r4], #1
   39df4:	f007 fab8 	bl	41368 <memchr>
   39df8:	9a04      	ldr	r2, [sp, #16]
   39dfa:	b9d8      	cbnz	r0, 39e34 <_vfiprintf_r+0x12c>
   39dfc:	06d1      	lsls	r1, r2, #27
   39dfe:	bf44      	itt	mi
   39e00:	2320      	movmi	r3, #32
   39e02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   39e06:	0713      	lsls	r3, r2, #28
   39e08:	bf44      	itt	mi
   39e0a:	232b      	movmi	r3, #43	; 0x2b
   39e0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   39e10:	f89a 3000 	ldrb.w	r3, [sl]
   39e14:	2b2a      	cmp	r3, #42	; 0x2a
   39e16:	d015      	beq.n	39e44 <_vfiprintf_r+0x13c>
   39e18:	9a07      	ldr	r2, [sp, #28]
   39e1a:	4654      	mov	r4, sl
   39e1c:	2000      	movs	r0, #0
   39e1e:	f04f 0c0a 	mov.w	ip, #10
   39e22:	4621      	mov	r1, r4
   39e24:	f811 3b01 	ldrb.w	r3, [r1], #1
   39e28:	3b30      	subs	r3, #48	; 0x30
   39e2a:	2b09      	cmp	r3, #9
   39e2c:	d94e      	bls.n	39ecc <_vfiprintf_r+0x1c4>
   39e2e:	b1b0      	cbz	r0, 39e5e <_vfiprintf_r+0x156>
   39e30:	9207      	str	r2, [sp, #28]
   39e32:	e014      	b.n	39e5e <_vfiprintf_r+0x156>
   39e34:	eba0 0308 	sub.w	r3, r0, r8
   39e38:	46a2      	mov	sl, r4
   39e3a:	fa09 f303 	lsl.w	r3, r9, r3
   39e3e:	4313      	orrs	r3, r2
   39e40:	9304      	str	r3, [sp, #16]
   39e42:	e7d2      	b.n	39dea <_vfiprintf_r+0xe2>
   39e44:	9b03      	ldr	r3, [sp, #12]
   39e46:	1d19      	adds	r1, r3, #4
   39e48:	681b      	ldr	r3, [r3, #0]
   39e4a:	2b00      	cmp	r3, #0
   39e4c:	9103      	str	r1, [sp, #12]
   39e4e:	bfbb      	ittet	lt
   39e50:	425b      	neglt	r3, r3
   39e52:	f042 0202 	orrlt.w	r2, r2, #2
   39e56:	9307      	strge	r3, [sp, #28]
   39e58:	9307      	strlt	r3, [sp, #28]
   39e5a:	bfb8      	it	lt
   39e5c:	9204      	strlt	r2, [sp, #16]
   39e5e:	7823      	ldrb	r3, [r4, #0]
   39e60:	2b2e      	cmp	r3, #46	; 0x2e
   39e62:	d10c      	bne.n	39e7e <_vfiprintf_r+0x176>
   39e64:	7863      	ldrb	r3, [r4, #1]
   39e66:	2b2a      	cmp	r3, #42	; 0x2a
   39e68:	d135      	bne.n	39ed6 <_vfiprintf_r+0x1ce>
   39e6a:	9b03      	ldr	r3, [sp, #12]
   39e6c:	3402      	adds	r4, #2
   39e6e:	1d1a      	adds	r2, r3, #4
   39e70:	681b      	ldr	r3, [r3, #0]
   39e72:	2b00      	cmp	r3, #0
   39e74:	9203      	str	r2, [sp, #12]
   39e76:	bfb8      	it	lt
   39e78:	f04f 33ff 	movlt.w	r3, #4294967295
   39e7c:	9305      	str	r3, [sp, #20]
   39e7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 39f64 <_vfiprintf_r+0x25c>
   39e82:	2203      	movs	r2, #3
   39e84:	7821      	ldrb	r1, [r4, #0]
   39e86:	4650      	mov	r0, sl
   39e88:	f007 fa6e 	bl	41368 <memchr>
   39e8c:	b140      	cbz	r0, 39ea0 <_vfiprintf_r+0x198>
   39e8e:	2340      	movs	r3, #64	; 0x40
   39e90:	eba0 000a 	sub.w	r0, r0, sl
   39e94:	3401      	adds	r4, #1
   39e96:	fa03 f000 	lsl.w	r0, r3, r0
   39e9a:	9b04      	ldr	r3, [sp, #16]
   39e9c:	4303      	orrs	r3, r0
   39e9e:	9304      	str	r3, [sp, #16]
   39ea0:	f814 1b01 	ldrb.w	r1, [r4], #1
   39ea4:	2206      	movs	r2, #6
   39ea6:	482c      	ldr	r0, [pc, #176]	; (39f58 <_vfiprintf_r+0x250>)
   39ea8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   39eac:	f007 fa5c 	bl	41368 <memchr>
   39eb0:	2800      	cmp	r0, #0
   39eb2:	d03f      	beq.n	39f34 <_vfiprintf_r+0x22c>
   39eb4:	4b29      	ldr	r3, [pc, #164]	; (39f5c <_vfiprintf_r+0x254>)
   39eb6:	bb1b      	cbnz	r3, 39f00 <_vfiprintf_r+0x1f8>
   39eb8:	9b03      	ldr	r3, [sp, #12]
   39eba:	3307      	adds	r3, #7
   39ebc:	f023 0307 	bic.w	r3, r3, #7
   39ec0:	3308      	adds	r3, #8
   39ec2:	9303      	str	r3, [sp, #12]
   39ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   39ec6:	443b      	add	r3, r7
   39ec8:	9309      	str	r3, [sp, #36]	; 0x24
   39eca:	e767      	b.n	39d9c <_vfiprintf_r+0x94>
   39ecc:	fb0c 3202 	mla	r2, ip, r2, r3
   39ed0:	460c      	mov	r4, r1
   39ed2:	2001      	movs	r0, #1
   39ed4:	e7a5      	b.n	39e22 <_vfiprintf_r+0x11a>
   39ed6:	2300      	movs	r3, #0
   39ed8:	3401      	adds	r4, #1
   39eda:	f04f 0c0a 	mov.w	ip, #10
   39ede:	4619      	mov	r1, r3
   39ee0:	9305      	str	r3, [sp, #20]
   39ee2:	4620      	mov	r0, r4
   39ee4:	f810 2b01 	ldrb.w	r2, [r0], #1
   39ee8:	3a30      	subs	r2, #48	; 0x30
   39eea:	2a09      	cmp	r2, #9
   39eec:	d903      	bls.n	39ef6 <_vfiprintf_r+0x1ee>
   39eee:	2b00      	cmp	r3, #0
   39ef0:	d0c5      	beq.n	39e7e <_vfiprintf_r+0x176>
   39ef2:	9105      	str	r1, [sp, #20]
   39ef4:	e7c3      	b.n	39e7e <_vfiprintf_r+0x176>
   39ef6:	fb0c 2101 	mla	r1, ip, r1, r2
   39efa:	4604      	mov	r4, r0
   39efc:	2301      	movs	r3, #1
   39efe:	e7f0      	b.n	39ee2 <_vfiprintf_r+0x1da>
   39f00:	ab03      	add	r3, sp, #12
   39f02:	462a      	mov	r2, r5
   39f04:	a904      	add	r1, sp, #16
   39f06:	4630      	mov	r0, r6
   39f08:	9300      	str	r3, [sp, #0]
   39f0a:	4b15      	ldr	r3, [pc, #84]	; (39f60 <_vfiprintf_r+0x258>)
   39f0c:	f000 f82c 	bl	39f68 <_printf_float>
   39f10:	4607      	mov	r7, r0
   39f12:	1c78      	adds	r0, r7, #1
   39f14:	d1d6      	bne.n	39ec4 <_vfiprintf_r+0x1bc>
   39f16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   39f18:	07d9      	lsls	r1, r3, #31
   39f1a:	d405      	bmi.n	39f28 <_vfiprintf_r+0x220>
   39f1c:	89ab      	ldrh	r3, [r5, #12]
   39f1e:	059a      	lsls	r2, r3, #22
   39f20:	d402      	bmi.n	39f28 <_vfiprintf_r+0x220>
   39f22:	6da8      	ldr	r0, [r5, #88]	; 0x58
   39f24:	f7e9 fd22 	bl	2396c <__retarget_lock_release_recursive>
   39f28:	89ab      	ldrh	r3, [r5, #12]
   39f2a:	065b      	lsls	r3, r3, #25
   39f2c:	f53f af12 	bmi.w	39d54 <_vfiprintf_r+0x4c>
   39f30:	9809      	ldr	r0, [sp, #36]	; 0x24
   39f32:	e711      	b.n	39d58 <_vfiprintf_r+0x50>
   39f34:	ab03      	add	r3, sp, #12
   39f36:	462a      	mov	r2, r5
   39f38:	a904      	add	r1, sp, #16
   39f3a:	4630      	mov	r0, r6
   39f3c:	9300      	str	r3, [sp, #0]
   39f3e:	4b08      	ldr	r3, [pc, #32]	; (39f60 <_vfiprintf_r+0x258>)
   39f40:	f000 fa4a 	bl	3a3d8 <_printf_i>
   39f44:	e7e4      	b.n	39f10 <_vfiprintf_r+0x208>
   39f46:	bf00      	nop
   39f48:	000433fc 	.word	0x000433fc
   39f4c:	0004341c 	.word	0x0004341c
   39f50:	000433dc 	.word	0x000433dc
   39f54:	0004bd8c 	.word	0x0004bd8c
   39f58:	0004bd96 	.word	0x0004bd96
   39f5c:	00039f69 	.word	0x00039f69
   39f60:	00041441 	.word	0x00041441
   39f64:	0004bd92 	.word	0x0004bd92

00039f68 <_printf_float>:
   39f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39f6c:	ed2d 8b02 	vpush	{d8}
   39f70:	b091      	sub	sp, #68	; 0x44
   39f72:	460c      	mov	r4, r1
   39f74:	4616      	mov	r6, r2
   39f76:	461f      	mov	r7, r3
   39f78:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
   39f7c:	4605      	mov	r5, r0
   39f7e:	f001 fa81 	bl	3b484 <_localeconv_r>
   39f82:	f8d0 a000 	ldr.w	sl, [r0]
   39f86:	4650      	mov	r0, sl
   39f88:	f7e3 f95b 	bl	1d242 <strlen>
   39f8c:	2300      	movs	r3, #0
   39f8e:	f894 b018 	ldrb.w	fp, [r4, #24]
   39f92:	ee08 0a10 	vmov	s16, r0
   39f96:	930e      	str	r3, [sp, #56]	; 0x38
   39f98:	6823      	ldr	r3, [r4, #0]
   39f9a:	9309      	str	r3, [sp, #36]	; 0x24
   39f9c:	f8d8 3000 	ldr.w	r3, [r8]
   39fa0:	3307      	adds	r3, #7
   39fa2:	f023 0307 	bic.w	r3, r3, #7
   39fa6:	f103 0208 	add.w	r2, r3, #8
   39faa:	f8c8 2000 	str.w	r2, [r8]
   39fae:	e9d3 2300 	ldrd	r2, r3, [r3]
   39fb2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   39fb6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
   39fba:	f04f 32ff 	mov.w	r2, #4294967295
   39fbe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   39fc2:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   39fc6:	930b      	str	r3, [sp, #44]	; 0x2c
   39fc8:	4b9f      	ldr	r3, [pc, #636]	; (3a248 <_printf_float+0x2e0>)
   39fca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   39fce:	f7e2 fe8d 	bl	1ccec <__aeabi_dcmpun>
   39fd2:	bb88      	cbnz	r0, 3a038 <_printf_float+0xd0>
   39fd4:	f04f 32ff 	mov.w	r2, #4294967295
   39fd8:	4b9b      	ldr	r3, [pc, #620]	; (3a248 <_printf_float+0x2e0>)
   39fda:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   39fde:	f7e2 fe67 	bl	1ccb0 <__aeabi_dcmple>
   39fe2:	bb48      	cbnz	r0, 3a038 <_printf_float+0xd0>
   39fe4:	2200      	movs	r2, #0
   39fe6:	2300      	movs	r3, #0
   39fe8:	4640      	mov	r0, r8
   39fea:	4649      	mov	r1, r9
   39fec:	f7e2 fe56 	bl	1cc9c <__aeabi_dcmplt>
   39ff0:	b110      	cbz	r0, 39ff8 <_printf_float+0x90>
   39ff2:	232d      	movs	r3, #45	; 0x2d
   39ff4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   39ff8:	4b94      	ldr	r3, [pc, #592]	; (3a24c <_printf_float+0x2e4>)
   39ffa:	4895      	ldr	r0, [pc, #596]	; (3a250 <_printf_float+0x2e8>)
   39ffc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
   3a000:	bf94      	ite	ls
   3a002:	4698      	movls	r8, r3
   3a004:	4680      	movhi	r8, r0
   3a006:	2303      	movs	r3, #3
   3a008:	f04f 0900 	mov.w	r9, #0
   3a00c:	6123      	str	r3, [r4, #16]
   3a00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3a010:	f023 0304 	bic.w	r3, r3, #4
   3a014:	6023      	str	r3, [r4, #0]
   3a016:	4633      	mov	r3, r6
   3a018:	aa0f      	add	r2, sp, #60	; 0x3c
   3a01a:	4621      	mov	r1, r4
   3a01c:	4628      	mov	r0, r5
   3a01e:	9700      	str	r7, [sp, #0]
   3a020:	f007 fac0 	bl	415a4 <_printf_common>
   3a024:	3001      	adds	r0, #1
   3a026:	f040 8092 	bne.w	3a14e <_printf_float+0x1e6>
   3a02a:	f04f 30ff 	mov.w	r0, #4294967295
   3a02e:	b011      	add	sp, #68	; 0x44
   3a030:	ecbd 8b02 	vpop	{d8}
   3a034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a038:	4642      	mov	r2, r8
   3a03a:	464b      	mov	r3, r9
   3a03c:	4640      	mov	r0, r8
   3a03e:	4649      	mov	r1, r9
   3a040:	f7e2 fe54 	bl	1ccec <__aeabi_dcmpun>
   3a044:	b140      	cbz	r0, 3a058 <_printf_float+0xf0>
   3a046:	464b      	mov	r3, r9
   3a048:	4882      	ldr	r0, [pc, #520]	; (3a254 <_printf_float+0x2ec>)
   3a04a:	2b00      	cmp	r3, #0
   3a04c:	bfbc      	itt	lt
   3a04e:	232d      	movlt	r3, #45	; 0x2d
   3a050:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   3a054:	4b80      	ldr	r3, [pc, #512]	; (3a258 <_printf_float+0x2f0>)
   3a056:	e7d1      	b.n	39ffc <_printf_float+0x94>
   3a058:	6863      	ldr	r3, [r4, #4]
   3a05a:	f00b 01df 	and.w	r1, fp, #223	; 0xdf
   3a05e:	1c5a      	adds	r2, r3, #1
   3a060:	d143      	bne.n	3a0ea <_printf_float+0x182>
   3a062:	2306      	movs	r3, #6
   3a064:	6063      	str	r3, [r4, #4]
   3a066:	2200      	movs	r2, #0
   3a068:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3a06a:	4628      	mov	r0, r5
   3a06c:	910a      	str	r1, [sp, #40]	; 0x28
   3a06e:	9206      	str	r2, [sp, #24]
   3a070:	aa0e      	add	r2, sp, #56	; 0x38
   3a072:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   3a076:	e9cd b204 	strd	fp, r2, [sp, #16]
   3a07a:	aa0d      	add	r2, sp, #52	; 0x34
   3a07c:	6023      	str	r3, [r4, #0]
   3a07e:	9203      	str	r2, [sp, #12]
   3a080:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   3a084:	e9cd 3201 	strd	r3, r2, [sp, #4]
   3a088:	6863      	ldr	r3, [r4, #4]
   3a08a:	4642      	mov	r2, r8
   3a08c:	9300      	str	r3, [sp, #0]
   3a08e:	464b      	mov	r3, r9
   3a090:	f007 f9e8 	bl	41464 <__cvt>
   3a094:	990a      	ldr	r1, [sp, #40]	; 0x28
   3a096:	4680      	mov	r8, r0
   3a098:	2947      	cmp	r1, #71	; 0x47
   3a09a:	990d      	ldr	r1, [sp, #52]	; 0x34
   3a09c:	d108      	bne.n	3a0b0 <_printf_float+0x148>
   3a09e:	1cc8      	adds	r0, r1, #3
   3a0a0:	db02      	blt.n	3a0a8 <_printf_float+0x140>
   3a0a2:	6863      	ldr	r3, [r4, #4]
   3a0a4:	4299      	cmp	r1, r3
   3a0a6:	dd40      	ble.n	3a12a <_printf_float+0x1c2>
   3a0a8:	f1ab 0b02 	sub.w	fp, fp, #2
   3a0ac:	fa5f fb8b 	uxtb.w	fp, fp
   3a0b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   3a0b4:	d81f      	bhi.n	3a0f6 <_printf_float+0x18e>
   3a0b6:	3901      	subs	r1, #1
   3a0b8:	465a      	mov	r2, fp
   3a0ba:	f104 0050 	add.w	r0, r4, #80	; 0x50
   3a0be:	910d      	str	r1, [sp, #52]	; 0x34
   3a0c0:	f007 fa32 	bl	41528 <__exponent>
   3a0c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   3a0c6:	4681      	mov	r9, r0
   3a0c8:	1813      	adds	r3, r2, r0
   3a0ca:	2a01      	cmp	r2, #1
   3a0cc:	6123      	str	r3, [r4, #16]
   3a0ce:	dc02      	bgt.n	3a0d6 <_printf_float+0x16e>
   3a0d0:	6822      	ldr	r2, [r4, #0]
   3a0d2:	07d2      	lsls	r2, r2, #31
   3a0d4:	d501      	bpl.n	3a0da <_printf_float+0x172>
   3a0d6:	3301      	adds	r3, #1
   3a0d8:	6123      	str	r3, [r4, #16]
   3a0da:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   3a0de:	2b00      	cmp	r3, #0
   3a0e0:	d099      	beq.n	3a016 <_printf_float+0xae>
   3a0e2:	232d      	movs	r3, #45	; 0x2d
   3a0e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3a0e8:	e795      	b.n	3a016 <_printf_float+0xae>
   3a0ea:	2947      	cmp	r1, #71	; 0x47
   3a0ec:	d1bb      	bne.n	3a066 <_printf_float+0xfe>
   3a0ee:	2b00      	cmp	r3, #0
   3a0f0:	d1b9      	bne.n	3a066 <_printf_float+0xfe>
   3a0f2:	2301      	movs	r3, #1
   3a0f4:	e7b6      	b.n	3a064 <_printf_float+0xfc>
   3a0f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
   3a0fa:	d118      	bne.n	3a12e <_printf_float+0x1c6>
   3a0fc:	2900      	cmp	r1, #0
   3a0fe:	6863      	ldr	r3, [r4, #4]
   3a100:	dd0b      	ble.n	3a11a <_printf_float+0x1b2>
   3a102:	6121      	str	r1, [r4, #16]
   3a104:	b913      	cbnz	r3, 3a10c <_printf_float+0x1a4>
   3a106:	6822      	ldr	r2, [r4, #0]
   3a108:	07d0      	lsls	r0, r2, #31
   3a10a:	d502      	bpl.n	3a112 <_printf_float+0x1aa>
   3a10c:	3301      	adds	r3, #1
   3a10e:	440b      	add	r3, r1
   3a110:	6123      	str	r3, [r4, #16]
   3a112:	f04f 0900 	mov.w	r9, #0
   3a116:	65a1      	str	r1, [r4, #88]	; 0x58
   3a118:	e7df      	b.n	3a0da <_printf_float+0x172>
   3a11a:	b913      	cbnz	r3, 3a122 <_printf_float+0x1ba>
   3a11c:	6822      	ldr	r2, [r4, #0]
   3a11e:	07d2      	lsls	r2, r2, #31
   3a120:	d501      	bpl.n	3a126 <_printf_float+0x1be>
   3a122:	3302      	adds	r3, #2
   3a124:	e7f4      	b.n	3a110 <_printf_float+0x1a8>
   3a126:	2301      	movs	r3, #1
   3a128:	e7f2      	b.n	3a110 <_printf_float+0x1a8>
   3a12a:	f04f 0b67 	mov.w	fp, #103	; 0x67
   3a12e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3a130:	4299      	cmp	r1, r3
   3a132:	db05      	blt.n	3a140 <_printf_float+0x1d8>
   3a134:	6823      	ldr	r3, [r4, #0]
   3a136:	6121      	str	r1, [r4, #16]
   3a138:	07d8      	lsls	r0, r3, #31
   3a13a:	d5ea      	bpl.n	3a112 <_printf_float+0x1aa>
   3a13c:	1c4b      	adds	r3, r1, #1
   3a13e:	e7e7      	b.n	3a110 <_printf_float+0x1a8>
   3a140:	2900      	cmp	r1, #0
   3a142:	bfd4      	ite	le
   3a144:	f1c1 0202 	rsble	r2, r1, #2
   3a148:	2201      	movgt	r2, #1
   3a14a:	4413      	add	r3, r2
   3a14c:	e7e0      	b.n	3a110 <_printf_float+0x1a8>
   3a14e:	6823      	ldr	r3, [r4, #0]
   3a150:	055a      	lsls	r2, r3, #21
   3a152:	d407      	bmi.n	3a164 <_printf_float+0x1fc>
   3a154:	6923      	ldr	r3, [r4, #16]
   3a156:	4642      	mov	r2, r8
   3a158:	4631      	mov	r1, r6
   3a15a:	4628      	mov	r0, r5
   3a15c:	47b8      	blx	r7
   3a15e:	3001      	adds	r0, #1
   3a160:	d12c      	bne.n	3a1bc <_printf_float+0x254>
   3a162:	e762      	b.n	3a02a <_printf_float+0xc2>
   3a164:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   3a168:	f240 80e0 	bls.w	3a32c <_printf_float+0x3c4>
   3a16c:	2200      	movs	r2, #0
   3a16e:	2300      	movs	r3, #0
   3a170:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   3a174:	f7e2 fd88 	bl	1cc88 <__aeabi_dcmpeq>
   3a178:	2800      	cmp	r0, #0
   3a17a:	d034      	beq.n	3a1e6 <_printf_float+0x27e>
   3a17c:	2301      	movs	r3, #1
   3a17e:	4a37      	ldr	r2, [pc, #220]	; (3a25c <_printf_float+0x2f4>)
   3a180:	4631      	mov	r1, r6
   3a182:	4628      	mov	r0, r5
   3a184:	47b8      	blx	r7
   3a186:	3001      	adds	r0, #1
   3a188:	f43f af4f 	beq.w	3a02a <_printf_float+0xc2>
   3a18c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   3a190:	429a      	cmp	r2, r3
   3a192:	db02      	blt.n	3a19a <_printf_float+0x232>
   3a194:	6823      	ldr	r3, [r4, #0]
   3a196:	07d8      	lsls	r0, r3, #31
   3a198:	d510      	bpl.n	3a1bc <_printf_float+0x254>
   3a19a:	ee18 3a10 	vmov	r3, s16
   3a19e:	4652      	mov	r2, sl
   3a1a0:	4631      	mov	r1, r6
   3a1a2:	4628      	mov	r0, r5
   3a1a4:	47b8      	blx	r7
   3a1a6:	3001      	adds	r0, #1
   3a1a8:	f43f af3f 	beq.w	3a02a <_printf_float+0xc2>
   3a1ac:	f04f 0800 	mov.w	r8, #0
   3a1b0:	f104 091a 	add.w	r9, r4, #26
   3a1b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3a1b6:	3b01      	subs	r3, #1
   3a1b8:	4543      	cmp	r3, r8
   3a1ba:	dc09      	bgt.n	3a1d0 <_printf_float+0x268>
   3a1bc:	6823      	ldr	r3, [r4, #0]
   3a1be:	079b      	lsls	r3, r3, #30
   3a1c0:	f100 8105 	bmi.w	3a3ce <_printf_float+0x466>
   3a1c4:	68e0      	ldr	r0, [r4, #12]
   3a1c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   3a1c8:	4298      	cmp	r0, r3
   3a1ca:	bfb8      	it	lt
   3a1cc:	4618      	movlt	r0, r3
   3a1ce:	e72e      	b.n	3a02e <_printf_float+0xc6>
   3a1d0:	2301      	movs	r3, #1
   3a1d2:	464a      	mov	r2, r9
   3a1d4:	4631      	mov	r1, r6
   3a1d6:	4628      	mov	r0, r5
   3a1d8:	47b8      	blx	r7
   3a1da:	3001      	adds	r0, #1
   3a1dc:	f43f af25 	beq.w	3a02a <_printf_float+0xc2>
   3a1e0:	f108 0801 	add.w	r8, r8, #1
   3a1e4:	e7e6      	b.n	3a1b4 <_printf_float+0x24c>
   3a1e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   3a1e8:	2b00      	cmp	r3, #0
   3a1ea:	dc39      	bgt.n	3a260 <_printf_float+0x2f8>
   3a1ec:	2301      	movs	r3, #1
   3a1ee:	4a1b      	ldr	r2, [pc, #108]	; (3a25c <_printf_float+0x2f4>)
   3a1f0:	4631      	mov	r1, r6
   3a1f2:	4628      	mov	r0, r5
   3a1f4:	47b8      	blx	r7
   3a1f6:	3001      	adds	r0, #1
   3a1f8:	f43f af17 	beq.w	3a02a <_printf_float+0xc2>
   3a1fc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   3a200:	4313      	orrs	r3, r2
   3a202:	d102      	bne.n	3a20a <_printf_float+0x2a2>
   3a204:	6823      	ldr	r3, [r4, #0]
   3a206:	07d9      	lsls	r1, r3, #31
   3a208:	d5d8      	bpl.n	3a1bc <_printf_float+0x254>
   3a20a:	ee18 3a10 	vmov	r3, s16
   3a20e:	4652      	mov	r2, sl
   3a210:	4631      	mov	r1, r6
   3a212:	4628      	mov	r0, r5
   3a214:	47b8      	blx	r7
   3a216:	3001      	adds	r0, #1
   3a218:	f43f af07 	beq.w	3a02a <_printf_float+0xc2>
   3a21c:	f04f 0900 	mov.w	r9, #0
   3a220:	f104 0a1a 	add.w	sl, r4, #26
   3a224:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   3a226:	425b      	negs	r3, r3
   3a228:	454b      	cmp	r3, r9
   3a22a:	dc01      	bgt.n	3a230 <_printf_float+0x2c8>
   3a22c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3a22e:	e792      	b.n	3a156 <_printf_float+0x1ee>
   3a230:	2301      	movs	r3, #1
   3a232:	4652      	mov	r2, sl
   3a234:	4631      	mov	r1, r6
   3a236:	4628      	mov	r0, r5
   3a238:	47b8      	blx	r7
   3a23a:	3001      	adds	r0, #1
   3a23c:	f43f aef5 	beq.w	3a02a <_printf_float+0xc2>
   3a240:	f109 0901 	add.w	r9, r9, #1
   3a244:	e7ee      	b.n	3a224 <_printf_float+0x2bc>
   3a246:	bf00      	nop
   3a248:	7fefffff 	.word	0x7fefffff
   3a24c:	0004bd9d 	.word	0x0004bd9d
   3a250:	0004bda1 	.word	0x0004bda1
   3a254:	0004bda9 	.word	0x0004bda9
   3a258:	0004bda5 	.word	0x0004bda5
   3a25c:	00045a45 	.word	0x00045a45
   3a260:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   3a262:	6da3      	ldr	r3, [r4, #88]	; 0x58
   3a264:	429a      	cmp	r2, r3
   3a266:	bfa8      	it	ge
   3a268:	461a      	movge	r2, r3
   3a26a:	2a00      	cmp	r2, #0
   3a26c:	4691      	mov	r9, r2
   3a26e:	dc37      	bgt.n	3a2e0 <_printf_float+0x378>
   3a270:	f04f 0b00 	mov.w	fp, #0
   3a274:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   3a278:	f104 021a 	add.w	r2, r4, #26
   3a27c:	6da3      	ldr	r3, [r4, #88]	; 0x58
   3a27e:	9309      	str	r3, [sp, #36]	; 0x24
   3a280:	eba3 0309 	sub.w	r3, r3, r9
   3a284:	455b      	cmp	r3, fp
   3a286:	dc33      	bgt.n	3a2f0 <_printf_float+0x388>
   3a288:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   3a28c:	429a      	cmp	r2, r3
   3a28e:	db3b      	blt.n	3a308 <_printf_float+0x3a0>
   3a290:	6823      	ldr	r3, [r4, #0]
   3a292:	07da      	lsls	r2, r3, #31
   3a294:	d438      	bmi.n	3a308 <_printf_float+0x3a0>
   3a296:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3a298:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3a29a:	990d      	ldr	r1, [sp, #52]	; 0x34
   3a29c:	1a9a      	subs	r2, r3, r2
   3a29e:	eba3 0901 	sub.w	r9, r3, r1
   3a2a2:	4591      	cmp	r9, r2
   3a2a4:	bfa8      	it	ge
   3a2a6:	4691      	movge	r9, r2
   3a2a8:	f1b9 0f00 	cmp.w	r9, #0
   3a2ac:	dc35      	bgt.n	3a31a <_printf_float+0x3b2>
   3a2ae:	f04f 0800 	mov.w	r8, #0
   3a2b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   3a2b6:	f104 0a1a 	add.w	sl, r4, #26
   3a2ba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   3a2be:	1a9b      	subs	r3, r3, r2
   3a2c0:	eba3 0309 	sub.w	r3, r3, r9
   3a2c4:	4543      	cmp	r3, r8
   3a2c6:	f77f af79 	ble.w	3a1bc <_printf_float+0x254>
   3a2ca:	2301      	movs	r3, #1
   3a2cc:	4652      	mov	r2, sl
   3a2ce:	4631      	mov	r1, r6
   3a2d0:	4628      	mov	r0, r5
   3a2d2:	47b8      	blx	r7
   3a2d4:	3001      	adds	r0, #1
   3a2d6:	f43f aea8 	beq.w	3a02a <_printf_float+0xc2>
   3a2da:	f108 0801 	add.w	r8, r8, #1
   3a2de:	e7ec      	b.n	3a2ba <_printf_float+0x352>
   3a2e0:	4613      	mov	r3, r2
   3a2e2:	4631      	mov	r1, r6
   3a2e4:	4642      	mov	r2, r8
   3a2e6:	4628      	mov	r0, r5
   3a2e8:	47b8      	blx	r7
   3a2ea:	3001      	adds	r0, #1
   3a2ec:	d1c0      	bne.n	3a270 <_printf_float+0x308>
   3a2ee:	e69c      	b.n	3a02a <_printf_float+0xc2>
   3a2f0:	2301      	movs	r3, #1
   3a2f2:	4631      	mov	r1, r6
   3a2f4:	4628      	mov	r0, r5
   3a2f6:	9209      	str	r2, [sp, #36]	; 0x24
   3a2f8:	47b8      	blx	r7
   3a2fa:	3001      	adds	r0, #1
   3a2fc:	f43f ae95 	beq.w	3a02a <_printf_float+0xc2>
   3a300:	f10b 0b01 	add.w	fp, fp, #1
   3a304:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3a306:	e7b9      	b.n	3a27c <_printf_float+0x314>
   3a308:	ee18 3a10 	vmov	r3, s16
   3a30c:	4652      	mov	r2, sl
   3a30e:	4631      	mov	r1, r6
   3a310:	4628      	mov	r0, r5
   3a312:	47b8      	blx	r7
   3a314:	3001      	adds	r0, #1
   3a316:	d1be      	bne.n	3a296 <_printf_float+0x32e>
   3a318:	e687      	b.n	3a02a <_printf_float+0xc2>
   3a31a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3a31c:	464b      	mov	r3, r9
   3a31e:	4631      	mov	r1, r6
   3a320:	4628      	mov	r0, r5
   3a322:	4442      	add	r2, r8
   3a324:	47b8      	blx	r7
   3a326:	3001      	adds	r0, #1
   3a328:	d1c1      	bne.n	3a2ae <_printf_float+0x346>
   3a32a:	e67e      	b.n	3a02a <_printf_float+0xc2>
   3a32c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   3a32e:	2a01      	cmp	r2, #1
   3a330:	dc01      	bgt.n	3a336 <_printf_float+0x3ce>
   3a332:	07db      	lsls	r3, r3, #31
   3a334:	d538      	bpl.n	3a3a8 <_printf_float+0x440>
   3a336:	2301      	movs	r3, #1
   3a338:	4642      	mov	r2, r8
   3a33a:	4631      	mov	r1, r6
   3a33c:	4628      	mov	r0, r5
   3a33e:	47b8      	blx	r7
   3a340:	3001      	adds	r0, #1
   3a342:	f43f ae72 	beq.w	3a02a <_printf_float+0xc2>
   3a346:	ee18 3a10 	vmov	r3, s16
   3a34a:	4652      	mov	r2, sl
   3a34c:	4631      	mov	r1, r6
   3a34e:	4628      	mov	r0, r5
   3a350:	47b8      	blx	r7
   3a352:	3001      	adds	r0, #1
   3a354:	f43f ae69 	beq.w	3a02a <_printf_float+0xc2>
   3a358:	2200      	movs	r2, #0
   3a35a:	2300      	movs	r3, #0
   3a35c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   3a360:	f7e2 fc92 	bl	1cc88 <__aeabi_dcmpeq>
   3a364:	b9d8      	cbnz	r0, 3a39e <_printf_float+0x436>
   3a366:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3a368:	f108 0201 	add.w	r2, r8, #1
   3a36c:	3b01      	subs	r3, #1
   3a36e:	4631      	mov	r1, r6
   3a370:	4628      	mov	r0, r5
   3a372:	47b8      	blx	r7
   3a374:	3001      	adds	r0, #1
   3a376:	d10e      	bne.n	3a396 <_printf_float+0x42e>
   3a378:	e657      	b.n	3a02a <_printf_float+0xc2>
   3a37a:	2301      	movs	r3, #1
   3a37c:	4652      	mov	r2, sl
   3a37e:	4631      	mov	r1, r6
   3a380:	4628      	mov	r0, r5
   3a382:	47b8      	blx	r7
   3a384:	3001      	adds	r0, #1
   3a386:	f43f ae50 	beq.w	3a02a <_printf_float+0xc2>
   3a38a:	f108 0801 	add.w	r8, r8, #1
   3a38e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3a390:	3b01      	subs	r3, #1
   3a392:	4543      	cmp	r3, r8
   3a394:	dcf1      	bgt.n	3a37a <_printf_float+0x412>
   3a396:	464b      	mov	r3, r9
   3a398:	f104 0250 	add.w	r2, r4, #80	; 0x50
   3a39c:	e6dc      	b.n	3a158 <_printf_float+0x1f0>
   3a39e:	f04f 0800 	mov.w	r8, #0
   3a3a2:	f104 0a1a 	add.w	sl, r4, #26
   3a3a6:	e7f2      	b.n	3a38e <_printf_float+0x426>
   3a3a8:	2301      	movs	r3, #1
   3a3aa:	4642      	mov	r2, r8
   3a3ac:	e7df      	b.n	3a36e <_printf_float+0x406>
   3a3ae:	2301      	movs	r3, #1
   3a3b0:	464a      	mov	r2, r9
   3a3b2:	4631      	mov	r1, r6
   3a3b4:	4628      	mov	r0, r5
   3a3b6:	47b8      	blx	r7
   3a3b8:	3001      	adds	r0, #1
   3a3ba:	f43f ae36 	beq.w	3a02a <_printf_float+0xc2>
   3a3be:	f108 0801 	add.w	r8, r8, #1
   3a3c2:	68e3      	ldr	r3, [r4, #12]
   3a3c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
   3a3c6:	1a5b      	subs	r3, r3, r1
   3a3c8:	4543      	cmp	r3, r8
   3a3ca:	dcf0      	bgt.n	3a3ae <_printf_float+0x446>
   3a3cc:	e6fa      	b.n	3a1c4 <_printf_float+0x25c>
   3a3ce:	f04f 0800 	mov.w	r8, #0
   3a3d2:	f104 0919 	add.w	r9, r4, #25
   3a3d6:	e7f4      	b.n	3a3c2 <_printf_float+0x45a>

0003a3d8 <_printf_i>:
   3a3d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   3a3dc:	7e0f      	ldrb	r7, [r1, #24]
   3a3de:	4691      	mov	r9, r2
   3a3e0:	4680      	mov	r8, r0
   3a3e2:	460c      	mov	r4, r1
   3a3e4:	2f78      	cmp	r7, #120	; 0x78
   3a3e6:	469a      	mov	sl, r3
   3a3e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   3a3ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
   3a3ee:	d807      	bhi.n	3a400 <_printf_i+0x28>
   3a3f0:	2f62      	cmp	r7, #98	; 0x62
   3a3f2:	d80a      	bhi.n	3a40a <_printf_i+0x32>
   3a3f4:	2f00      	cmp	r7, #0
   3a3f6:	f000 80d8 	beq.w	3a5aa <_printf_i+0x1d2>
   3a3fa:	2f58      	cmp	r7, #88	; 0x58
   3a3fc:	f000 80a3 	beq.w	3a546 <_printf_i+0x16e>
   3a400:	f104 0542 	add.w	r5, r4, #66	; 0x42
   3a404:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   3a408:	e03a      	b.n	3a480 <_printf_i+0xa8>
   3a40a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   3a40e:	2b15      	cmp	r3, #21
   3a410:	d8f6      	bhi.n	3a400 <_printf_i+0x28>
   3a412:	a101      	add	r1, pc, #4	; (adr r1, 3a418 <_printf_i+0x40>)
   3a414:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   3a418:	0003a471 	.word	0x0003a471
   3a41c:	0003a485 	.word	0x0003a485
   3a420:	0003a401 	.word	0x0003a401
   3a424:	0003a401 	.word	0x0003a401
   3a428:	0003a401 	.word	0x0003a401
   3a42c:	0003a401 	.word	0x0003a401
   3a430:	0003a485 	.word	0x0003a485
   3a434:	0003a401 	.word	0x0003a401
   3a438:	0003a401 	.word	0x0003a401
   3a43c:	0003a401 	.word	0x0003a401
   3a440:	0003a401 	.word	0x0003a401
   3a444:	0003a591 	.word	0x0003a591
   3a448:	0003a4b5 	.word	0x0003a4b5
   3a44c:	0003a573 	.word	0x0003a573
   3a450:	0003a401 	.word	0x0003a401
   3a454:	0003a401 	.word	0x0003a401
   3a458:	0003a5b3 	.word	0x0003a5b3
   3a45c:	0003a401 	.word	0x0003a401
   3a460:	0003a4b5 	.word	0x0003a4b5
   3a464:	0003a401 	.word	0x0003a401
   3a468:	0003a401 	.word	0x0003a401
   3a46c:	0003a57b 	.word	0x0003a57b
   3a470:	682b      	ldr	r3, [r5, #0]
   3a472:	1d1a      	adds	r2, r3, #4
   3a474:	681b      	ldr	r3, [r3, #0]
   3a476:	602a      	str	r2, [r5, #0]
   3a478:	f104 0542 	add.w	r5, r4, #66	; 0x42
   3a47c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   3a480:	2301      	movs	r3, #1
   3a482:	e0a3      	b.n	3a5cc <_printf_i+0x1f4>
   3a484:	6820      	ldr	r0, [r4, #0]
   3a486:	6829      	ldr	r1, [r5, #0]
   3a488:	0606      	lsls	r6, r0, #24
   3a48a:	f101 0304 	add.w	r3, r1, #4
   3a48e:	d50a      	bpl.n	3a4a6 <_printf_i+0xce>
   3a490:	680e      	ldr	r6, [r1, #0]
   3a492:	602b      	str	r3, [r5, #0]
   3a494:	2e00      	cmp	r6, #0
   3a496:	da03      	bge.n	3a4a0 <_printf_i+0xc8>
   3a498:	232d      	movs	r3, #45	; 0x2d
   3a49a:	4276      	negs	r6, r6
   3a49c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3a4a0:	485e      	ldr	r0, [pc, #376]	; (3a61c <_printf_i+0x244>)
   3a4a2:	230a      	movs	r3, #10
   3a4a4:	e019      	b.n	3a4da <_printf_i+0x102>
   3a4a6:	680e      	ldr	r6, [r1, #0]
   3a4a8:	f010 0f40 	tst.w	r0, #64	; 0x40
   3a4ac:	602b      	str	r3, [r5, #0]
   3a4ae:	bf18      	it	ne
   3a4b0:	b236      	sxthne	r6, r6
   3a4b2:	e7ef      	b.n	3a494 <_printf_i+0xbc>
   3a4b4:	682b      	ldr	r3, [r5, #0]
   3a4b6:	6820      	ldr	r0, [r4, #0]
   3a4b8:	1d19      	adds	r1, r3, #4
   3a4ba:	6029      	str	r1, [r5, #0]
   3a4bc:	0601      	lsls	r1, r0, #24
   3a4be:	d501      	bpl.n	3a4c4 <_printf_i+0xec>
   3a4c0:	681e      	ldr	r6, [r3, #0]
   3a4c2:	e002      	b.n	3a4ca <_printf_i+0xf2>
   3a4c4:	0646      	lsls	r6, r0, #25
   3a4c6:	d5fb      	bpl.n	3a4c0 <_printf_i+0xe8>
   3a4c8:	881e      	ldrh	r6, [r3, #0]
   3a4ca:	2f6f      	cmp	r7, #111	; 0x6f
   3a4cc:	4853      	ldr	r0, [pc, #332]	; (3a61c <_printf_i+0x244>)
   3a4ce:	bf0c      	ite	eq
   3a4d0:	2308      	moveq	r3, #8
   3a4d2:	230a      	movne	r3, #10
   3a4d4:	2100      	movs	r1, #0
   3a4d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   3a4da:	6865      	ldr	r5, [r4, #4]
   3a4dc:	2d00      	cmp	r5, #0
   3a4de:	60a5      	str	r5, [r4, #8]
   3a4e0:	bfa2      	ittt	ge
   3a4e2:	6821      	ldrge	r1, [r4, #0]
   3a4e4:	f021 0104 	bicge.w	r1, r1, #4
   3a4e8:	6021      	strge	r1, [r4, #0]
   3a4ea:	b90e      	cbnz	r6, 3a4f0 <_printf_i+0x118>
   3a4ec:	2d00      	cmp	r5, #0
   3a4ee:	d04d      	beq.n	3a58c <_printf_i+0x1b4>
   3a4f0:	4615      	mov	r5, r2
   3a4f2:	fbb6 f1f3 	udiv	r1, r6, r3
   3a4f6:	fb03 6711 	mls	r7, r3, r1, r6
   3a4fa:	5dc7      	ldrb	r7, [r0, r7]
   3a4fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
   3a500:	4637      	mov	r7, r6
   3a502:	460e      	mov	r6, r1
   3a504:	42bb      	cmp	r3, r7
   3a506:	d9f4      	bls.n	3a4f2 <_printf_i+0x11a>
   3a508:	2b08      	cmp	r3, #8
   3a50a:	d10b      	bne.n	3a524 <_printf_i+0x14c>
   3a50c:	6823      	ldr	r3, [r4, #0]
   3a50e:	07de      	lsls	r6, r3, #31
   3a510:	d508      	bpl.n	3a524 <_printf_i+0x14c>
   3a512:	6923      	ldr	r3, [r4, #16]
   3a514:	6861      	ldr	r1, [r4, #4]
   3a516:	4299      	cmp	r1, r3
   3a518:	bfde      	ittt	le
   3a51a:	2330      	movle	r3, #48	; 0x30
   3a51c:	f805 3c01 	strble.w	r3, [r5, #-1]
   3a520:	f105 35ff 	addle.w	r5, r5, #4294967295
   3a524:	1b52      	subs	r2, r2, r5
   3a526:	6122      	str	r2, [r4, #16]
   3a528:	464b      	mov	r3, r9
   3a52a:	aa03      	add	r2, sp, #12
   3a52c:	4621      	mov	r1, r4
   3a52e:	4640      	mov	r0, r8
   3a530:	f8cd a000 	str.w	sl, [sp]
   3a534:	f007 f836 	bl	415a4 <_printf_common>
   3a538:	3001      	adds	r0, #1
   3a53a:	d14c      	bne.n	3a5d6 <_printf_i+0x1fe>
   3a53c:	f04f 30ff 	mov.w	r0, #4294967295
   3a540:	b004      	add	sp, #16
   3a542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3a546:	4835      	ldr	r0, [pc, #212]	; (3a61c <_printf_i+0x244>)
   3a548:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
   3a54c:	6829      	ldr	r1, [r5, #0]
   3a54e:	6823      	ldr	r3, [r4, #0]
   3a550:	f851 6b04 	ldr.w	r6, [r1], #4
   3a554:	6029      	str	r1, [r5, #0]
   3a556:	061d      	lsls	r5, r3, #24
   3a558:	d514      	bpl.n	3a584 <_printf_i+0x1ac>
   3a55a:	07df      	lsls	r7, r3, #31
   3a55c:	bf44      	itt	mi
   3a55e:	f043 0320 	orrmi.w	r3, r3, #32
   3a562:	6023      	strmi	r3, [r4, #0]
   3a564:	b91e      	cbnz	r6, 3a56e <_printf_i+0x196>
   3a566:	6823      	ldr	r3, [r4, #0]
   3a568:	f023 0320 	bic.w	r3, r3, #32
   3a56c:	6023      	str	r3, [r4, #0]
   3a56e:	2310      	movs	r3, #16
   3a570:	e7b0      	b.n	3a4d4 <_printf_i+0xfc>
   3a572:	6823      	ldr	r3, [r4, #0]
   3a574:	f043 0320 	orr.w	r3, r3, #32
   3a578:	6023      	str	r3, [r4, #0]
   3a57a:	2378      	movs	r3, #120	; 0x78
   3a57c:	4828      	ldr	r0, [pc, #160]	; (3a620 <_printf_i+0x248>)
   3a57e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   3a582:	e7e3      	b.n	3a54c <_printf_i+0x174>
   3a584:	0659      	lsls	r1, r3, #25
   3a586:	bf48      	it	mi
   3a588:	b2b6      	uxthmi	r6, r6
   3a58a:	e7e6      	b.n	3a55a <_printf_i+0x182>
   3a58c:	4615      	mov	r5, r2
   3a58e:	e7bb      	b.n	3a508 <_printf_i+0x130>
   3a590:	682b      	ldr	r3, [r5, #0]
   3a592:	6826      	ldr	r6, [r4, #0]
   3a594:	1d18      	adds	r0, r3, #4
   3a596:	6961      	ldr	r1, [r4, #20]
   3a598:	6028      	str	r0, [r5, #0]
   3a59a:	0635      	lsls	r5, r6, #24
   3a59c:	681b      	ldr	r3, [r3, #0]
   3a59e:	d501      	bpl.n	3a5a4 <_printf_i+0x1cc>
   3a5a0:	6019      	str	r1, [r3, #0]
   3a5a2:	e002      	b.n	3a5aa <_printf_i+0x1d2>
   3a5a4:	0670      	lsls	r0, r6, #25
   3a5a6:	d5fb      	bpl.n	3a5a0 <_printf_i+0x1c8>
   3a5a8:	8019      	strh	r1, [r3, #0]
   3a5aa:	2300      	movs	r3, #0
   3a5ac:	4615      	mov	r5, r2
   3a5ae:	6123      	str	r3, [r4, #16]
   3a5b0:	e7ba      	b.n	3a528 <_printf_i+0x150>
   3a5b2:	682b      	ldr	r3, [r5, #0]
   3a5b4:	2100      	movs	r1, #0
   3a5b6:	1d1a      	adds	r2, r3, #4
   3a5b8:	602a      	str	r2, [r5, #0]
   3a5ba:	681d      	ldr	r5, [r3, #0]
   3a5bc:	6862      	ldr	r2, [r4, #4]
   3a5be:	4628      	mov	r0, r5
   3a5c0:	f006 fed2 	bl	41368 <memchr>
   3a5c4:	b108      	cbz	r0, 3a5ca <_printf_i+0x1f2>
   3a5c6:	1b40      	subs	r0, r0, r5
   3a5c8:	6060      	str	r0, [r4, #4]
   3a5ca:	6863      	ldr	r3, [r4, #4]
   3a5cc:	6123      	str	r3, [r4, #16]
   3a5ce:	2300      	movs	r3, #0
   3a5d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3a5d4:	e7a8      	b.n	3a528 <_printf_i+0x150>
   3a5d6:	6923      	ldr	r3, [r4, #16]
   3a5d8:	462a      	mov	r2, r5
   3a5da:	4649      	mov	r1, r9
   3a5dc:	4640      	mov	r0, r8
   3a5de:	47d0      	blx	sl
   3a5e0:	3001      	adds	r0, #1
   3a5e2:	d0ab      	beq.n	3a53c <_printf_i+0x164>
   3a5e4:	6823      	ldr	r3, [r4, #0]
   3a5e6:	079b      	lsls	r3, r3, #30
   3a5e8:	d413      	bmi.n	3a612 <_printf_i+0x23a>
   3a5ea:	68e0      	ldr	r0, [r4, #12]
   3a5ec:	9b03      	ldr	r3, [sp, #12]
   3a5ee:	4298      	cmp	r0, r3
   3a5f0:	bfb8      	it	lt
   3a5f2:	4618      	movlt	r0, r3
   3a5f4:	e7a4      	b.n	3a540 <_printf_i+0x168>
   3a5f6:	2301      	movs	r3, #1
   3a5f8:	4632      	mov	r2, r6
   3a5fa:	4649      	mov	r1, r9
   3a5fc:	4640      	mov	r0, r8
   3a5fe:	47d0      	blx	sl
   3a600:	3001      	adds	r0, #1
   3a602:	d09b      	beq.n	3a53c <_printf_i+0x164>
   3a604:	3501      	adds	r5, #1
   3a606:	68e3      	ldr	r3, [r4, #12]
   3a608:	9903      	ldr	r1, [sp, #12]
   3a60a:	1a5b      	subs	r3, r3, r1
   3a60c:	42ab      	cmp	r3, r5
   3a60e:	dcf2      	bgt.n	3a5f6 <_printf_i+0x21e>
   3a610:	e7eb      	b.n	3a5ea <_printf_i+0x212>
   3a612:	2500      	movs	r5, #0
   3a614:	f104 0619 	add.w	r6, r4, #25
   3a618:	e7f5      	b.n	3a606 <_printf_i+0x22e>
   3a61a:	bf00      	nop
   3a61c:	0004bdad 	.word	0x0004bdad
   3a620:	0004bdbe 	.word	0x0004bdbe

0003a624 <realloc>:
   3a624:	4b02      	ldr	r3, [pc, #8]	; (3a630 <realloc+0xc>)
   3a626:	460a      	mov	r2, r1
   3a628:	4601      	mov	r1, r0
   3a62a:	6818      	ldr	r0, [r3, #0]
   3a62c:	f007 bc7b 	b.w	41f26 <_realloc_r>
   3a630:	20014a74 	.word	0x20014a74

0003a634 <_sbrk_r>:
   3a634:	b538      	push	{r3, r4, r5, lr}
   3a636:	2300      	movs	r3, #0
   3a638:	4d05      	ldr	r5, [pc, #20]	; (3a650 <_sbrk_r+0x1c>)
   3a63a:	4604      	mov	r4, r0
   3a63c:	4608      	mov	r0, r1
   3a63e:	602b      	str	r3, [r5, #0]
   3a640:	f7e9 f93c 	bl	238bc <_sbrk>
   3a644:	1c43      	adds	r3, r0, #1
   3a646:	d102      	bne.n	3a64e <_sbrk_r+0x1a>
   3a648:	682b      	ldr	r3, [r5, #0]
   3a64a:	b103      	cbz	r3, 3a64e <_sbrk_r+0x1a>
   3a64c:	6023      	str	r3, [r4, #0]
   3a64e:	bd38      	pop	{r3, r4, r5, pc}
   3a650:	2001a568 	.word	0x2001a568

0003a654 <sniprintf>:
   3a654:	b40c      	push	{r2, r3}
   3a656:	4b18      	ldr	r3, [pc, #96]	; (3a6b8 <sniprintf+0x64>)
   3a658:	b530      	push	{r4, r5, lr}
   3a65a:	1e0c      	subs	r4, r1, #0
   3a65c:	b09d      	sub	sp, #116	; 0x74
   3a65e:	681d      	ldr	r5, [r3, #0]
   3a660:	da08      	bge.n	3a674 <sniprintf+0x20>
   3a662:	238b      	movs	r3, #139	; 0x8b
   3a664:	f04f 30ff 	mov.w	r0, #4294967295
   3a668:	602b      	str	r3, [r5, #0]
   3a66a:	b01d      	add	sp, #116	; 0x74
   3a66c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   3a670:	b002      	add	sp, #8
   3a672:	4770      	bx	lr
   3a674:	f44f 7302 	mov.w	r3, #520	; 0x208
   3a678:	9002      	str	r0, [sp, #8]
   3a67a:	9006      	str	r0, [sp, #24]
   3a67c:	a902      	add	r1, sp, #8
   3a67e:	f8ad 3014 	strh.w	r3, [sp, #20]
   3a682:	bf14      	ite	ne
   3a684:	f104 33ff 	addne.w	r3, r4, #4294967295
   3a688:	4623      	moveq	r3, r4
   3a68a:	9a20      	ldr	r2, [sp, #128]	; 0x80
   3a68c:	4628      	mov	r0, r5
   3a68e:	9304      	str	r3, [sp, #16]
   3a690:	9307      	str	r3, [sp, #28]
   3a692:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3a696:	f8ad 3016 	strh.w	r3, [sp, #22]
   3a69a:	ab21      	add	r3, sp, #132	; 0x84
   3a69c:	9301      	str	r3, [sp, #4]
   3a69e:	f001 fb2f 	bl	3bd00 <_svfiprintf_r>
   3a6a2:	1c43      	adds	r3, r0, #1
   3a6a4:	bfbc      	itt	lt
   3a6a6:	238b      	movlt	r3, #139	; 0x8b
   3a6a8:	602b      	strlt	r3, [r5, #0]
   3a6aa:	2c00      	cmp	r4, #0
   3a6ac:	d0dd      	beq.n	3a66a <sniprintf+0x16>
   3a6ae:	9b02      	ldr	r3, [sp, #8]
   3a6b0:	2200      	movs	r2, #0
   3a6b2:	701a      	strb	r2, [r3, #0]
   3a6b4:	e7d9      	b.n	3a66a <sniprintf+0x16>
   3a6b6:	bf00      	nop
   3a6b8:	20014a74 	.word	0x20014a74

0003a6bc <siscanf>:
   3a6bc:	b40e      	push	{r1, r2, r3}
   3a6be:	b510      	push	{r4, lr}
   3a6c0:	b09f      	sub	sp, #124	; 0x7c
   3a6c2:	f44f 7101 	mov.w	r1, #516	; 0x204
   3a6c6:	ac21      	add	r4, sp, #132	; 0x84
   3a6c8:	f8ad 101c 	strh.w	r1, [sp, #28]
   3a6cc:	9004      	str	r0, [sp, #16]
   3a6ce:	f854 2b04 	ldr.w	r2, [r4], #4
   3a6d2:	9008      	str	r0, [sp, #32]
   3a6d4:	9201      	str	r2, [sp, #4]
   3a6d6:	f7e2 fdb4 	bl	1d242 <strlen>
   3a6da:	4b0c      	ldr	r3, [pc, #48]	; (3a70c <siscanf+0x50>)
   3a6dc:	a904      	add	r1, sp, #16
   3a6de:	9005      	str	r0, [sp, #20]
   3a6e0:	930d      	str	r3, [sp, #52]	; 0x34
   3a6e2:	2300      	movs	r3, #0
   3a6e4:	9009      	str	r0, [sp, #36]	; 0x24
   3a6e6:	9311      	str	r3, [sp, #68]	; 0x44
   3a6e8:	9316      	str	r3, [sp, #88]	; 0x58
   3a6ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3a6ee:	4808      	ldr	r0, [pc, #32]	; (3a710 <siscanf+0x54>)
   3a6f0:	f8ad 301e 	strh.w	r3, [sp, #30]
   3a6f4:	4623      	mov	r3, r4
   3a6f6:	9a01      	ldr	r2, [sp, #4]
   3a6f8:	6800      	ldr	r0, [r0, #0]
   3a6fa:	9403      	str	r4, [sp, #12]
   3a6fc:	f001 fc00 	bl	3bf00 <__ssvfiscanf_r>
   3a700:	b01f      	add	sp, #124	; 0x7c
   3a702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3a706:	b003      	add	sp, #12
   3a708:	4770      	bx	lr
   3a70a:	bf00      	nop
   3a70c:	000416db 	.word	0x000416db
   3a710:	20014a74 	.word	0x20014a74

0003a714 <strtod>:
   3a714:	460a      	mov	r2, r1
   3a716:	4601      	mov	r1, r0
   3a718:	4802      	ldr	r0, [pc, #8]	; (3a724 <strtod+0x10>)
   3a71a:	4b03      	ldr	r3, [pc, #12]	; (3a728 <strtod+0x14>)
   3a71c:	6800      	ldr	r0, [r0, #0]
   3a71e:	f7e3 bf9f 	b.w	1e660 <_strtod_l>
   3a722:	bf00      	nop
   3a724:	20014a74 	.word	0x20014a74
   3a728:	20014ad8 	.word	0x20014ad8

0003a72c <_strtol_l.constprop.0>:
   3a72c:	2b01      	cmp	r3, #1
   3a72e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3a732:	d001      	beq.n	3a738 <_strtol_l.constprop.0+0xc>
   3a734:	2b24      	cmp	r3, #36	; 0x24
   3a736:	d906      	bls.n	3a746 <_strtol_l.constprop.0+0x1a>
   3a738:	f002 fff9 	bl	3d72e <__errno>
   3a73c:	2316      	movs	r3, #22
   3a73e:	6003      	str	r3, [r0, #0]
   3a740:	2000      	movs	r0, #0
   3a742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3a746:	460d      	mov	r5, r1
   3a748:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 3a82c <_strtol_l.constprop.0+0x100>
   3a74c:	462e      	mov	r6, r5
   3a74e:	f815 4b01 	ldrb.w	r4, [r5], #1
   3a752:	f814 700c 	ldrb.w	r7, [r4, ip]
   3a756:	f017 0708 	ands.w	r7, r7, #8
   3a75a:	d1f7      	bne.n	3a74c <_strtol_l.constprop.0+0x20>
   3a75c:	2c2d      	cmp	r4, #45	; 0x2d
   3a75e:	d132      	bne.n	3a7c6 <_strtol_l.constprop.0+0x9a>
   3a760:	782c      	ldrb	r4, [r5, #0]
   3a762:	2701      	movs	r7, #1
   3a764:	1cb5      	adds	r5, r6, #2
   3a766:	2b00      	cmp	r3, #0
   3a768:	d05b      	beq.n	3a822 <_strtol_l.constprop.0+0xf6>
   3a76a:	2b10      	cmp	r3, #16
   3a76c:	d109      	bne.n	3a782 <_strtol_l.constprop.0+0x56>
   3a76e:	2c30      	cmp	r4, #48	; 0x30
   3a770:	d107      	bne.n	3a782 <_strtol_l.constprop.0+0x56>
   3a772:	782c      	ldrb	r4, [r5, #0]
   3a774:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   3a778:	2c58      	cmp	r4, #88	; 0x58
   3a77a:	d14d      	bne.n	3a818 <_strtol_l.constprop.0+0xec>
   3a77c:	786c      	ldrb	r4, [r5, #1]
   3a77e:	2310      	movs	r3, #16
   3a780:	3502      	adds	r5, #2
   3a782:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   3a786:	f04f 0c00 	mov.w	ip, #0
   3a78a:	f108 38ff 	add.w	r8, r8, #4294967295
   3a78e:	4666      	mov	r6, ip
   3a790:	fbb8 f9f3 	udiv	r9, r8, r3
   3a794:	fb03 8a19 	mls	sl, r3, r9, r8
   3a798:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   3a79c:	f1be 0f09 	cmp.w	lr, #9
   3a7a0:	d816      	bhi.n	3a7d0 <_strtol_l.constprop.0+0xa4>
   3a7a2:	4674      	mov	r4, lr
   3a7a4:	42a3      	cmp	r3, r4
   3a7a6:	dd24      	ble.n	3a7f2 <_strtol_l.constprop.0+0xc6>
   3a7a8:	f1bc 0f00 	cmp.w	ip, #0
   3a7ac:	db1e      	blt.n	3a7ec <_strtol_l.constprop.0+0xc0>
   3a7ae:	45b1      	cmp	r9, r6
   3a7b0:	d31c      	bcc.n	3a7ec <_strtol_l.constprop.0+0xc0>
   3a7b2:	d101      	bne.n	3a7b8 <_strtol_l.constprop.0+0x8c>
   3a7b4:	45a2      	cmp	sl, r4
   3a7b6:	db19      	blt.n	3a7ec <_strtol_l.constprop.0+0xc0>
   3a7b8:	fb06 4603 	mla	r6, r6, r3, r4
   3a7bc:	f04f 0c01 	mov.w	ip, #1
   3a7c0:	f815 4b01 	ldrb.w	r4, [r5], #1
   3a7c4:	e7e8      	b.n	3a798 <_strtol_l.constprop.0+0x6c>
   3a7c6:	2c2b      	cmp	r4, #43	; 0x2b
   3a7c8:	bf04      	itt	eq
   3a7ca:	782c      	ldrbeq	r4, [r5, #0]
   3a7cc:	1cb5      	addeq	r5, r6, #2
   3a7ce:	e7ca      	b.n	3a766 <_strtol_l.constprop.0+0x3a>
   3a7d0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   3a7d4:	f1be 0f19 	cmp.w	lr, #25
   3a7d8:	d801      	bhi.n	3a7de <_strtol_l.constprop.0+0xb2>
   3a7da:	3c37      	subs	r4, #55	; 0x37
   3a7dc:	e7e2      	b.n	3a7a4 <_strtol_l.constprop.0+0x78>
   3a7de:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   3a7e2:	f1be 0f19 	cmp.w	lr, #25
   3a7e6:	d804      	bhi.n	3a7f2 <_strtol_l.constprop.0+0xc6>
   3a7e8:	3c57      	subs	r4, #87	; 0x57
   3a7ea:	e7db      	b.n	3a7a4 <_strtol_l.constprop.0+0x78>
   3a7ec:	f04f 3cff 	mov.w	ip, #4294967295
   3a7f0:	e7e6      	b.n	3a7c0 <_strtol_l.constprop.0+0x94>
   3a7f2:	f1bc 0f00 	cmp.w	ip, #0
   3a7f6:	da05      	bge.n	3a804 <_strtol_l.constprop.0+0xd8>
   3a7f8:	2322      	movs	r3, #34	; 0x22
   3a7fa:	4646      	mov	r6, r8
   3a7fc:	6003      	str	r3, [r0, #0]
   3a7fe:	b942      	cbnz	r2, 3a812 <_strtol_l.constprop.0+0xe6>
   3a800:	4630      	mov	r0, r6
   3a802:	e79e      	b.n	3a742 <_strtol_l.constprop.0+0x16>
   3a804:	b107      	cbz	r7, 3a808 <_strtol_l.constprop.0+0xdc>
   3a806:	4276      	negs	r6, r6
   3a808:	2a00      	cmp	r2, #0
   3a80a:	d0f9      	beq.n	3a800 <_strtol_l.constprop.0+0xd4>
   3a80c:	f1bc 0f00 	cmp.w	ip, #0
   3a810:	d000      	beq.n	3a814 <_strtol_l.constprop.0+0xe8>
   3a812:	1e69      	subs	r1, r5, #1
   3a814:	6011      	str	r1, [r2, #0]
   3a816:	e7f3      	b.n	3a800 <_strtol_l.constprop.0+0xd4>
   3a818:	2430      	movs	r4, #48	; 0x30
   3a81a:	2b00      	cmp	r3, #0
   3a81c:	d1b1      	bne.n	3a782 <_strtol_l.constprop.0+0x56>
   3a81e:	2308      	movs	r3, #8
   3a820:	e7af      	b.n	3a782 <_strtol_l.constprop.0+0x56>
   3a822:	2c30      	cmp	r4, #48	; 0x30
   3a824:	d0a5      	beq.n	3a772 <_strtol_l.constprop.0+0x46>
   3a826:	230a      	movs	r3, #10
   3a828:	e7ab      	b.n	3a782 <_strtol_l.constprop.0+0x56>
   3a82a:	bf00      	nop
   3a82c:	0004bc8c 	.word	0x0004bc8c

0003a830 <strtol>:
   3a830:	4613      	mov	r3, r2
   3a832:	460a      	mov	r2, r1
   3a834:	4601      	mov	r1, r0
   3a836:	4802      	ldr	r0, [pc, #8]	; (3a840 <strtol+0x10>)
   3a838:	6800      	ldr	r0, [r0, #0]
   3a83a:	f7ff bf77 	b.w	3a72c <_strtol_l.constprop.0>
   3a83e:	bf00      	nop
   3a840:	20014a74 	.word	0x20014a74

0003a844 <_strtoll_l.constprop.0>:
   3a844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a848:	b085      	sub	sp, #20
   3a84a:	4688      	mov	r8, r1
   3a84c:	461e      	mov	r6, r3
   3a84e:	460d      	mov	r5, r1
   3a850:	9201      	str	r2, [sp, #4]
   3a852:	4a46      	ldr	r2, [pc, #280]	; (3a96c <_strtoll_l.constprop.0+0x128>)
   3a854:	9003      	str	r0, [sp, #12]
   3a856:	462b      	mov	r3, r5
   3a858:	f815 4b01 	ldrb.w	r4, [r5], #1
   3a85c:	5ca7      	ldrb	r7, [r4, r2]
   3a85e:	f017 0708 	ands.w	r7, r7, #8
   3a862:	d1f8      	bne.n	3a856 <_strtoll_l.constprop.0+0x12>
   3a864:	2c2d      	cmp	r4, #45	; 0x2d
   3a866:	d148      	bne.n	3a8fa <_strtoll_l.constprop.0+0xb6>
   3a868:	782c      	ldrb	r4, [r5, #0]
   3a86a:	2701      	movs	r7, #1
   3a86c:	1c9d      	adds	r5, r3, #2
   3a86e:	2e00      	cmp	r6, #0
   3a870:	d078      	beq.n	3a964 <_strtoll_l.constprop.0+0x120>
   3a872:	2e10      	cmp	r6, #16
   3a874:	d109      	bne.n	3a88a <_strtoll_l.constprop.0+0x46>
   3a876:	2c30      	cmp	r4, #48	; 0x30
   3a878:	d107      	bne.n	3a88a <_strtoll_l.constprop.0+0x46>
   3a87a:	782b      	ldrb	r3, [r5, #0]
   3a87c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   3a880:	2b58      	cmp	r3, #88	; 0x58
   3a882:	d16a      	bne.n	3a95a <_strtoll_l.constprop.0+0x116>
   3a884:	786c      	ldrb	r4, [r5, #1]
   3a886:	2610      	movs	r6, #16
   3a888:	3502      	adds	r5, #2
   3a88a:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
   3a88e:	f107 3bff 	add.w	fp, r7, #4294967295
   3a892:	ea4f 79e6 	mov.w	r9, r6, asr #31
   3a896:	4632      	mov	r2, r6
   3a898:	f10a 3aff 	add.w	sl, sl, #4294967295
   3a89c:	4658      	mov	r0, fp
   3a89e:	464b      	mov	r3, r9
   3a8a0:	4651      	mov	r1, sl
   3a8a2:	f7e2 fb21 	bl	1cee8 <__aeabi_uldivmod>
   3a8a6:	2300      	movs	r3, #0
   3a8a8:	468c      	mov	ip, r1
   3a8aa:	9202      	str	r2, [sp, #8]
   3a8ac:	4619      	mov	r1, r3
   3a8ae:	4602      	mov	r2, r0
   3a8b0:	4618      	mov	r0, r3
   3a8b2:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   3a8b6:	f1be 0f09 	cmp.w	lr, #9
   3a8ba:	d823      	bhi.n	3a904 <_strtoll_l.constprop.0+0xc0>
   3a8bc:	4674      	mov	r4, lr
   3a8be:	42a6      	cmp	r6, r4
   3a8c0:	dd31      	ble.n	3a926 <_strtoll_l.constprop.0+0xe2>
   3a8c2:	f1b3 3fff 	cmp.w	r3, #4294967295
   3a8c6:	d015      	beq.n	3a8f4 <_strtoll_l.constprop.0+0xb0>
   3a8c8:	4282      	cmp	r2, r0
   3a8ca:	eb7c 0301 	sbcs.w	r3, ip, r1
   3a8ce:	d327      	bcc.n	3a920 <_strtoll_l.constprop.0+0xdc>
   3a8d0:	458c      	cmp	ip, r1
   3a8d2:	bf08      	it	eq
   3a8d4:	4282      	cmpeq	r2, r0
   3a8d6:	d102      	bne.n	3a8de <_strtoll_l.constprop.0+0x9a>
   3a8d8:	9b02      	ldr	r3, [sp, #8]
   3a8da:	42a3      	cmp	r3, r4
   3a8dc:	db20      	blt.n	3a920 <_strtoll_l.constprop.0+0xdc>
   3a8de:	4371      	muls	r1, r6
   3a8e0:	fb00 1109 	mla	r1, r0, r9, r1
   3a8e4:	fba6 0300 	umull	r0, r3, r6, r0
   3a8e8:	4419      	add	r1, r3
   3a8ea:	1820      	adds	r0, r4, r0
   3a8ec:	f04f 0301 	mov.w	r3, #1
   3a8f0:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
   3a8f4:	f815 4b01 	ldrb.w	r4, [r5], #1
   3a8f8:	e7db      	b.n	3a8b2 <_strtoll_l.constprop.0+0x6e>
   3a8fa:	2c2b      	cmp	r4, #43	; 0x2b
   3a8fc:	bf04      	itt	eq
   3a8fe:	782c      	ldrbeq	r4, [r5, #0]
   3a900:	1c9d      	addeq	r5, r3, #2
   3a902:	e7b4      	b.n	3a86e <_strtoll_l.constprop.0+0x2a>
   3a904:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   3a908:	f1be 0f19 	cmp.w	lr, #25
   3a90c:	d801      	bhi.n	3a912 <_strtoll_l.constprop.0+0xce>
   3a90e:	3c37      	subs	r4, #55	; 0x37
   3a910:	e7d5      	b.n	3a8be <_strtoll_l.constprop.0+0x7a>
   3a912:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   3a916:	f1be 0f19 	cmp.w	lr, #25
   3a91a:	d804      	bhi.n	3a926 <_strtoll_l.constprop.0+0xe2>
   3a91c:	3c57      	subs	r4, #87	; 0x57
   3a91e:	e7ce      	b.n	3a8be <_strtoll_l.constprop.0+0x7a>
   3a920:	f04f 33ff 	mov.w	r3, #4294967295
   3a924:	e7e6      	b.n	3a8f4 <_strtoll_l.constprop.0+0xb0>
   3a926:	1c5a      	adds	r2, r3, #1
   3a928:	d109      	bne.n	3a93e <_strtoll_l.constprop.0+0xfa>
   3a92a:	2322      	movs	r3, #34	; 0x22
   3a92c:	9a03      	ldr	r2, [sp, #12]
   3a92e:	4658      	mov	r0, fp
   3a930:	4651      	mov	r1, sl
   3a932:	6013      	str	r3, [r2, #0]
   3a934:	9b01      	ldr	r3, [sp, #4]
   3a936:	b953      	cbnz	r3, 3a94e <_strtoll_l.constprop.0+0x10a>
   3a938:	b005      	add	sp, #20
   3a93a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a93e:	b117      	cbz	r7, 3a946 <_strtoll_l.constprop.0+0x102>
   3a940:	4240      	negs	r0, r0
   3a942:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   3a946:	9a01      	ldr	r2, [sp, #4]
   3a948:	2a00      	cmp	r2, #0
   3a94a:	d0f5      	beq.n	3a938 <_strtoll_l.constprop.0+0xf4>
   3a94c:	b10b      	cbz	r3, 3a952 <_strtoll_l.constprop.0+0x10e>
   3a94e:	f105 38ff 	add.w	r8, r5, #4294967295
   3a952:	9b01      	ldr	r3, [sp, #4]
   3a954:	f8c3 8000 	str.w	r8, [r3]
   3a958:	e7ee      	b.n	3a938 <_strtoll_l.constprop.0+0xf4>
   3a95a:	2430      	movs	r4, #48	; 0x30
   3a95c:	2e00      	cmp	r6, #0
   3a95e:	d194      	bne.n	3a88a <_strtoll_l.constprop.0+0x46>
   3a960:	2608      	movs	r6, #8
   3a962:	e792      	b.n	3a88a <_strtoll_l.constprop.0+0x46>
   3a964:	2c30      	cmp	r4, #48	; 0x30
   3a966:	d088      	beq.n	3a87a <_strtoll_l.constprop.0+0x36>
   3a968:	260a      	movs	r6, #10
   3a96a:	e78e      	b.n	3a88a <_strtoll_l.constprop.0+0x46>
   3a96c:	0004bc8c 	.word	0x0004bc8c

0003a970 <strtoll>:
   3a970:	4613      	mov	r3, r2
   3a972:	460a      	mov	r2, r1
   3a974:	4601      	mov	r1, r0
   3a976:	4802      	ldr	r0, [pc, #8]	; (3a980 <strtoll+0x10>)
   3a978:	6800      	ldr	r0, [r0, #0]
   3a97a:	f7ff bf63 	b.w	3a844 <_strtoll_l.constprop.0>
   3a97e:	bf00      	nop
   3a980:	20014a74 	.word	0x20014a74

0003a984 <_strtoul_l.constprop.0>:
   3a984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3a988:	4686      	mov	lr, r0
   3a98a:	460d      	mov	r5, r1
   3a98c:	4f35      	ldr	r7, [pc, #212]	; (3aa64 <_strtoul_l.constprop.0+0xe0>)
   3a98e:	4628      	mov	r0, r5
   3a990:	f815 4b01 	ldrb.w	r4, [r5], #1
   3a994:	5de6      	ldrb	r6, [r4, r7]
   3a996:	f016 0608 	ands.w	r6, r6, #8
   3a99a:	d1f8      	bne.n	3a98e <_strtoul_l.constprop.0+0xa>
   3a99c:	2c2d      	cmp	r4, #45	; 0x2d
   3a99e:	d12f      	bne.n	3aa00 <_strtoul_l.constprop.0+0x7c>
   3a9a0:	782c      	ldrb	r4, [r5, #0]
   3a9a2:	2601      	movs	r6, #1
   3a9a4:	1c85      	adds	r5, r0, #2
   3a9a6:	2b00      	cmp	r3, #0
   3a9a8:	d057      	beq.n	3aa5a <_strtoul_l.constprop.0+0xd6>
   3a9aa:	2b10      	cmp	r3, #16
   3a9ac:	d109      	bne.n	3a9c2 <_strtoul_l.constprop.0+0x3e>
   3a9ae:	2c30      	cmp	r4, #48	; 0x30
   3a9b0:	d107      	bne.n	3a9c2 <_strtoul_l.constprop.0+0x3e>
   3a9b2:	7828      	ldrb	r0, [r5, #0]
   3a9b4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   3a9b8:	2858      	cmp	r0, #88	; 0x58
   3a9ba:	d149      	bne.n	3aa50 <_strtoul_l.constprop.0+0xcc>
   3a9bc:	786c      	ldrb	r4, [r5, #1]
   3a9be:	2310      	movs	r3, #16
   3a9c0:	3502      	adds	r5, #2
   3a9c2:	f04f 38ff 	mov.w	r8, #4294967295
   3a9c6:	2700      	movs	r7, #0
   3a9c8:	fbb8 f8f3 	udiv	r8, r8, r3
   3a9cc:	fb03 f908 	mul.w	r9, r3, r8
   3a9d0:	4638      	mov	r0, r7
   3a9d2:	ea6f 0909 	mvn.w	r9, r9
   3a9d6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   3a9da:	f1bc 0f09 	cmp.w	ip, #9
   3a9de:	d814      	bhi.n	3aa0a <_strtoul_l.constprop.0+0x86>
   3a9e0:	4664      	mov	r4, ip
   3a9e2:	42a3      	cmp	r3, r4
   3a9e4:	dd22      	ble.n	3aa2c <_strtoul_l.constprop.0+0xa8>
   3a9e6:	2f00      	cmp	r7, #0
   3a9e8:	db1d      	blt.n	3aa26 <_strtoul_l.constprop.0+0xa2>
   3a9ea:	4580      	cmp	r8, r0
   3a9ec:	d31b      	bcc.n	3aa26 <_strtoul_l.constprop.0+0xa2>
   3a9ee:	d101      	bne.n	3a9f4 <_strtoul_l.constprop.0+0x70>
   3a9f0:	45a1      	cmp	r9, r4
   3a9f2:	db18      	blt.n	3aa26 <_strtoul_l.constprop.0+0xa2>
   3a9f4:	fb00 4003 	mla	r0, r0, r3, r4
   3a9f8:	2701      	movs	r7, #1
   3a9fa:	f815 4b01 	ldrb.w	r4, [r5], #1
   3a9fe:	e7ea      	b.n	3a9d6 <_strtoul_l.constprop.0+0x52>
   3aa00:	2c2b      	cmp	r4, #43	; 0x2b
   3aa02:	bf04      	itt	eq
   3aa04:	782c      	ldrbeq	r4, [r5, #0]
   3aa06:	1c85      	addeq	r5, r0, #2
   3aa08:	e7cd      	b.n	3a9a6 <_strtoul_l.constprop.0+0x22>
   3aa0a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   3aa0e:	f1bc 0f19 	cmp.w	ip, #25
   3aa12:	d801      	bhi.n	3aa18 <_strtoul_l.constprop.0+0x94>
   3aa14:	3c37      	subs	r4, #55	; 0x37
   3aa16:	e7e4      	b.n	3a9e2 <_strtoul_l.constprop.0+0x5e>
   3aa18:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   3aa1c:	f1bc 0f19 	cmp.w	ip, #25
   3aa20:	d804      	bhi.n	3aa2c <_strtoul_l.constprop.0+0xa8>
   3aa22:	3c57      	subs	r4, #87	; 0x57
   3aa24:	e7dd      	b.n	3a9e2 <_strtoul_l.constprop.0+0x5e>
   3aa26:	f04f 37ff 	mov.w	r7, #4294967295
   3aa2a:	e7e6      	b.n	3a9fa <_strtoul_l.constprop.0+0x76>
   3aa2c:	2f00      	cmp	r7, #0
   3aa2e:	da07      	bge.n	3aa40 <_strtoul_l.constprop.0+0xbc>
   3aa30:	2322      	movs	r3, #34	; 0x22
   3aa32:	f04f 30ff 	mov.w	r0, #4294967295
   3aa36:	f8ce 3000 	str.w	r3, [lr]
   3aa3a:	b932      	cbnz	r2, 3aa4a <_strtoul_l.constprop.0+0xc6>
   3aa3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3aa40:	b106      	cbz	r6, 3aa44 <_strtoul_l.constprop.0+0xc0>
   3aa42:	4240      	negs	r0, r0
   3aa44:	2a00      	cmp	r2, #0
   3aa46:	d0f9      	beq.n	3aa3c <_strtoul_l.constprop.0+0xb8>
   3aa48:	b107      	cbz	r7, 3aa4c <_strtoul_l.constprop.0+0xc8>
   3aa4a:	1e69      	subs	r1, r5, #1
   3aa4c:	6011      	str	r1, [r2, #0]
   3aa4e:	e7f5      	b.n	3aa3c <_strtoul_l.constprop.0+0xb8>
   3aa50:	2430      	movs	r4, #48	; 0x30
   3aa52:	2b00      	cmp	r3, #0
   3aa54:	d1b5      	bne.n	3a9c2 <_strtoul_l.constprop.0+0x3e>
   3aa56:	2308      	movs	r3, #8
   3aa58:	e7b3      	b.n	3a9c2 <_strtoul_l.constprop.0+0x3e>
   3aa5a:	2c30      	cmp	r4, #48	; 0x30
   3aa5c:	d0a9      	beq.n	3a9b2 <_strtoul_l.constprop.0+0x2e>
   3aa5e:	230a      	movs	r3, #10
   3aa60:	e7af      	b.n	3a9c2 <_strtoul_l.constprop.0+0x3e>
   3aa62:	bf00      	nop
   3aa64:	0004bc8c 	.word	0x0004bc8c

0003aa68 <strtoul>:
   3aa68:	4613      	mov	r3, r2
   3aa6a:	460a      	mov	r2, r1
   3aa6c:	4601      	mov	r1, r0
   3aa6e:	4802      	ldr	r0, [pc, #8]	; (3aa78 <strtoul+0x10>)
   3aa70:	6800      	ldr	r0, [r0, #0]
   3aa72:	f7ff bf87 	b.w	3a984 <_strtoul_l.constprop.0>
   3aa76:	bf00      	nop
   3aa78:	20014a74 	.word	0x20014a74

0003aa7c <vsniprintf>:
   3aa7c:	b507      	push	{r0, r1, r2, lr}
   3aa7e:	9300      	str	r3, [sp, #0]
   3aa80:	4613      	mov	r3, r2
   3aa82:	460a      	mov	r2, r1
   3aa84:	4601      	mov	r1, r0
   3aa86:	4803      	ldr	r0, [pc, #12]	; (3aa94 <vsniprintf+0x18>)
   3aa88:	6800      	ldr	r0, [r0, #0]
   3aa8a:	f006 ff00 	bl	4188e <_vsniprintf_r>
   3aa8e:	b003      	add	sp, #12
   3aa90:	f85d fb04 	ldr.w	pc, [sp], #4
   3aa94:	20014a74 	.word	0x20014a74

0003aa98 <_vsiprintf_r>:
   3aa98:	b500      	push	{lr}
   3aa9a:	b09b      	sub	sp, #108	; 0x6c
   3aa9c:	9100      	str	r1, [sp, #0]
   3aa9e:	9104      	str	r1, [sp, #16]
   3aaa0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   3aaa4:	9105      	str	r1, [sp, #20]
   3aaa6:	9102      	str	r1, [sp, #8]
   3aaa8:	4905      	ldr	r1, [pc, #20]	; (3aac0 <_vsiprintf_r+0x28>)
   3aaaa:	9103      	str	r1, [sp, #12]
   3aaac:	4669      	mov	r1, sp
   3aaae:	f001 f927 	bl	3bd00 <_svfiprintf_r>
   3aab2:	9b00      	ldr	r3, [sp, #0]
   3aab4:	2200      	movs	r2, #0
   3aab6:	701a      	strb	r2, [r3, #0]
   3aab8:	b01b      	add	sp, #108	; 0x6c
   3aaba:	f85d fb04 	ldr.w	pc, [sp], #4
   3aabe:	bf00      	nop
   3aac0:	ffff0208 	.word	0xffff0208

0003aac4 <vsiprintf>:
   3aac4:	4613      	mov	r3, r2
   3aac6:	460a      	mov	r2, r1
   3aac8:	4601      	mov	r1, r0
   3aaca:	4802      	ldr	r0, [pc, #8]	; (3aad4 <vsiprintf+0x10>)
   3aacc:	6800      	ldr	r0, [r0, #0]
   3aace:	f7ff bfe3 	b.w	3aa98 <_vsiprintf_r>
   3aad2:	bf00      	nop
   3aad4:	20014a74 	.word	0x20014a74

0003aad8 <_vsiscanf_r>:
   3aad8:	b510      	push	{r4, lr}
   3aada:	4604      	mov	r4, r0
   3aadc:	b09c      	sub	sp, #112	; 0x70
   3aade:	f44f 7001 	mov.w	r0, #516	; 0x204
   3aae2:	9102      	str	r1, [sp, #8]
   3aae4:	f8ad 0014 	strh.w	r0, [sp, #20]
   3aae8:	4608      	mov	r0, r1
   3aaea:	9106      	str	r1, [sp, #24]
   3aaec:	e9cd 3200 	strd	r3, r2, [sp]
   3aaf0:	f7e2 fba7 	bl	1d242 <strlen>
   3aaf4:	4909      	ldr	r1, [pc, #36]	; (3ab1c <_vsiscanf_r+0x44>)
   3aaf6:	9003      	str	r0, [sp, #12]
   3aaf8:	910b      	str	r1, [sp, #44]	; 0x2c
   3aafa:	2100      	movs	r1, #0
   3aafc:	9007      	str	r0, [sp, #28]
   3aafe:	4620      	mov	r0, r4
   3ab00:	910f      	str	r1, [sp, #60]	; 0x3c
   3ab02:	9114      	str	r1, [sp, #80]	; 0x50
   3ab04:	f64f 71ff 	movw	r1, #65535	; 0xffff
   3ab08:	e9dd 3200 	ldrd	r3, r2, [sp]
   3ab0c:	f8ad 1016 	strh.w	r1, [sp, #22]
   3ab10:	a902      	add	r1, sp, #8
   3ab12:	f001 f9f5 	bl	3bf00 <__ssvfiscanf_r>
   3ab16:	b01c      	add	sp, #112	; 0x70
   3ab18:	bd10      	pop	{r4, pc}
   3ab1a:	bf00      	nop
   3ab1c:	000416db 	.word	0x000416db

0003ab20 <vsiscanf>:
   3ab20:	4613      	mov	r3, r2
   3ab22:	460a      	mov	r2, r1
   3ab24:	4601      	mov	r1, r0
   3ab26:	4802      	ldr	r0, [pc, #8]	; (3ab30 <vsiscanf+0x10>)
   3ab28:	6800      	ldr	r0, [r0, #0]
   3ab2a:	f7ff bfd5 	b.w	3aad8 <_vsiscanf_r>
   3ab2e:	bf00      	nop
   3ab30:	20014a74 	.word	0x20014a74

0003ab34 <__swbuf_r>:
   3ab34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3ab36:	460e      	mov	r6, r1
   3ab38:	4614      	mov	r4, r2
   3ab3a:	4605      	mov	r5, r0
   3ab3c:	b118      	cbz	r0, 3ab46 <__swbuf_r+0x12>
   3ab3e:	6983      	ldr	r3, [r0, #24]
   3ab40:	b90b      	cbnz	r3, 3ab46 <__swbuf_r+0x12>
   3ab42:	f000 f9db 	bl	3aefc <__sinit>
   3ab46:	4b21      	ldr	r3, [pc, #132]	; (3abcc <__swbuf_r+0x98>)
   3ab48:	429c      	cmp	r4, r3
   3ab4a:	d12b      	bne.n	3aba4 <__swbuf_r+0x70>
   3ab4c:	686c      	ldr	r4, [r5, #4]
   3ab4e:	69a3      	ldr	r3, [r4, #24]
   3ab50:	60a3      	str	r3, [r4, #8]
   3ab52:	89a3      	ldrh	r3, [r4, #12]
   3ab54:	071a      	lsls	r2, r3, #28
   3ab56:	d52f      	bpl.n	3abb8 <__swbuf_r+0x84>
   3ab58:	6923      	ldr	r3, [r4, #16]
   3ab5a:	b36b      	cbz	r3, 3abb8 <__swbuf_r+0x84>
   3ab5c:	6923      	ldr	r3, [r4, #16]
   3ab5e:	b2f6      	uxtb	r6, r6
   3ab60:	6820      	ldr	r0, [r4, #0]
   3ab62:	4637      	mov	r7, r6
   3ab64:	1ac0      	subs	r0, r0, r3
   3ab66:	6963      	ldr	r3, [r4, #20]
   3ab68:	4283      	cmp	r3, r0
   3ab6a:	dc04      	bgt.n	3ab76 <__swbuf_r+0x42>
   3ab6c:	4621      	mov	r1, r4
   3ab6e:	4628      	mov	r0, r5
   3ab70:	f000 f946 	bl	3ae00 <_fflush_r>
   3ab74:	bb30      	cbnz	r0, 3abc4 <__swbuf_r+0x90>
   3ab76:	68a3      	ldr	r3, [r4, #8]
   3ab78:	3001      	adds	r0, #1
   3ab7a:	3b01      	subs	r3, #1
   3ab7c:	60a3      	str	r3, [r4, #8]
   3ab7e:	6823      	ldr	r3, [r4, #0]
   3ab80:	1c5a      	adds	r2, r3, #1
   3ab82:	6022      	str	r2, [r4, #0]
   3ab84:	701e      	strb	r6, [r3, #0]
   3ab86:	6963      	ldr	r3, [r4, #20]
   3ab88:	4283      	cmp	r3, r0
   3ab8a:	d004      	beq.n	3ab96 <__swbuf_r+0x62>
   3ab8c:	89a3      	ldrh	r3, [r4, #12]
   3ab8e:	07db      	lsls	r3, r3, #31
   3ab90:	d506      	bpl.n	3aba0 <__swbuf_r+0x6c>
   3ab92:	2e0a      	cmp	r6, #10
   3ab94:	d104      	bne.n	3aba0 <__swbuf_r+0x6c>
   3ab96:	4621      	mov	r1, r4
   3ab98:	4628      	mov	r0, r5
   3ab9a:	f000 f931 	bl	3ae00 <_fflush_r>
   3ab9e:	b988      	cbnz	r0, 3abc4 <__swbuf_r+0x90>
   3aba0:	4638      	mov	r0, r7
   3aba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3aba4:	4b0a      	ldr	r3, [pc, #40]	; (3abd0 <__swbuf_r+0x9c>)
   3aba6:	429c      	cmp	r4, r3
   3aba8:	d101      	bne.n	3abae <__swbuf_r+0x7a>
   3abaa:	68ac      	ldr	r4, [r5, #8]
   3abac:	e7cf      	b.n	3ab4e <__swbuf_r+0x1a>
   3abae:	4b09      	ldr	r3, [pc, #36]	; (3abd4 <__swbuf_r+0xa0>)
   3abb0:	429c      	cmp	r4, r3
   3abb2:	bf08      	it	eq
   3abb4:	68ec      	ldreq	r4, [r5, #12]
   3abb6:	e7ca      	b.n	3ab4e <__swbuf_r+0x1a>
   3abb8:	4621      	mov	r1, r4
   3abba:	4628      	mov	r0, r5
   3abbc:	f000 f81e 	bl	3abfc <__swsetup_r>
   3abc0:	2800      	cmp	r0, #0
   3abc2:	d0cb      	beq.n	3ab5c <__swbuf_r+0x28>
   3abc4:	f04f 37ff 	mov.w	r7, #4294967295
   3abc8:	e7ea      	b.n	3aba0 <__swbuf_r+0x6c>
   3abca:	bf00      	nop
   3abcc:	000433fc 	.word	0x000433fc
   3abd0:	0004341c 	.word	0x0004341c
   3abd4:	000433dc 	.word	0x000433dc

0003abd8 <_write_r>:
   3abd8:	b538      	push	{r3, r4, r5, lr}
   3abda:	4604      	mov	r4, r0
   3abdc:	4d06      	ldr	r5, [pc, #24]	; (3abf8 <_write_r+0x20>)
   3abde:	4608      	mov	r0, r1
   3abe0:	4611      	mov	r1, r2
   3abe2:	2200      	movs	r2, #0
   3abe4:	602a      	str	r2, [r5, #0]
   3abe6:	461a      	mov	r2, r3
   3abe8:	f002 fd8a 	bl	3d700 <_write>
   3abec:	1c43      	adds	r3, r0, #1
   3abee:	d102      	bne.n	3abf6 <_write_r+0x1e>
   3abf0:	682b      	ldr	r3, [r5, #0]
   3abf2:	b103      	cbz	r3, 3abf6 <_write_r+0x1e>
   3abf4:	6023      	str	r3, [r4, #0]
   3abf6:	bd38      	pop	{r3, r4, r5, pc}
   3abf8:	2001a568 	.word	0x2001a568

0003abfc <__swsetup_r>:
   3abfc:	4b32      	ldr	r3, [pc, #200]	; (3acc8 <__swsetup_r+0xcc>)
   3abfe:	b570      	push	{r4, r5, r6, lr}
   3ac00:	681d      	ldr	r5, [r3, #0]
   3ac02:	4606      	mov	r6, r0
   3ac04:	460c      	mov	r4, r1
   3ac06:	b125      	cbz	r5, 3ac12 <__swsetup_r+0x16>
   3ac08:	69ab      	ldr	r3, [r5, #24]
   3ac0a:	b913      	cbnz	r3, 3ac12 <__swsetup_r+0x16>
   3ac0c:	4628      	mov	r0, r5
   3ac0e:	f000 f975 	bl	3aefc <__sinit>
   3ac12:	4b2e      	ldr	r3, [pc, #184]	; (3accc <__swsetup_r+0xd0>)
   3ac14:	429c      	cmp	r4, r3
   3ac16:	d10f      	bne.n	3ac38 <__swsetup_r+0x3c>
   3ac18:	686c      	ldr	r4, [r5, #4]
   3ac1a:	89a3      	ldrh	r3, [r4, #12]
   3ac1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   3ac20:	0719      	lsls	r1, r3, #28
   3ac22:	d42c      	bmi.n	3ac7e <__swsetup_r+0x82>
   3ac24:	06dd      	lsls	r5, r3, #27
   3ac26:	d411      	bmi.n	3ac4c <__swsetup_r+0x50>
   3ac28:	2309      	movs	r3, #9
   3ac2a:	6033      	str	r3, [r6, #0]
   3ac2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   3ac30:	f04f 30ff 	mov.w	r0, #4294967295
   3ac34:	81a3      	strh	r3, [r4, #12]
   3ac36:	e03e      	b.n	3acb6 <__swsetup_r+0xba>
   3ac38:	4b25      	ldr	r3, [pc, #148]	; (3acd0 <__swsetup_r+0xd4>)
   3ac3a:	429c      	cmp	r4, r3
   3ac3c:	d101      	bne.n	3ac42 <__swsetup_r+0x46>
   3ac3e:	68ac      	ldr	r4, [r5, #8]
   3ac40:	e7eb      	b.n	3ac1a <__swsetup_r+0x1e>
   3ac42:	4b24      	ldr	r3, [pc, #144]	; (3acd4 <__swsetup_r+0xd8>)
   3ac44:	429c      	cmp	r4, r3
   3ac46:	bf08      	it	eq
   3ac48:	68ec      	ldreq	r4, [r5, #12]
   3ac4a:	e7e6      	b.n	3ac1a <__swsetup_r+0x1e>
   3ac4c:	0758      	lsls	r0, r3, #29
   3ac4e:	d512      	bpl.n	3ac76 <__swsetup_r+0x7a>
   3ac50:	6b61      	ldr	r1, [r4, #52]	; 0x34
   3ac52:	b141      	cbz	r1, 3ac66 <__swsetup_r+0x6a>
   3ac54:	f104 0344 	add.w	r3, r4, #68	; 0x44
   3ac58:	4299      	cmp	r1, r3
   3ac5a:	d002      	beq.n	3ac62 <__swsetup_r+0x66>
   3ac5c:	4630      	mov	r0, r6
   3ac5e:	f7fe ffad 	bl	39bbc <_free_r>
   3ac62:	2300      	movs	r3, #0
   3ac64:	6363      	str	r3, [r4, #52]	; 0x34
   3ac66:	89a3      	ldrh	r3, [r4, #12]
   3ac68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   3ac6c:	81a3      	strh	r3, [r4, #12]
   3ac6e:	2300      	movs	r3, #0
   3ac70:	6063      	str	r3, [r4, #4]
   3ac72:	6923      	ldr	r3, [r4, #16]
   3ac74:	6023      	str	r3, [r4, #0]
   3ac76:	89a3      	ldrh	r3, [r4, #12]
   3ac78:	f043 0308 	orr.w	r3, r3, #8
   3ac7c:	81a3      	strh	r3, [r4, #12]
   3ac7e:	6923      	ldr	r3, [r4, #16]
   3ac80:	b94b      	cbnz	r3, 3ac96 <__swsetup_r+0x9a>
   3ac82:	89a3      	ldrh	r3, [r4, #12]
   3ac84:	f403 7320 	and.w	r3, r3, #640	; 0x280
   3ac88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   3ac8c:	d003      	beq.n	3ac96 <__swsetup_r+0x9a>
   3ac8e:	4621      	mov	r1, r4
   3ac90:	4630      	mov	r0, r6
   3ac92:	f000 fc0d 	bl	3b4b0 <__smakebuf_r>
   3ac96:	89a0      	ldrh	r0, [r4, #12]
   3ac98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   3ac9c:	f010 0301 	ands.w	r3, r0, #1
   3aca0:	d00a      	beq.n	3acb8 <__swsetup_r+0xbc>
   3aca2:	2300      	movs	r3, #0
   3aca4:	60a3      	str	r3, [r4, #8]
   3aca6:	6963      	ldr	r3, [r4, #20]
   3aca8:	425b      	negs	r3, r3
   3acaa:	61a3      	str	r3, [r4, #24]
   3acac:	6923      	ldr	r3, [r4, #16]
   3acae:	b943      	cbnz	r3, 3acc2 <__swsetup_r+0xc6>
   3acb0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   3acb4:	d1ba      	bne.n	3ac2c <__swsetup_r+0x30>
   3acb6:	bd70      	pop	{r4, r5, r6, pc}
   3acb8:	0781      	lsls	r1, r0, #30
   3acba:	bf58      	it	pl
   3acbc:	6963      	ldrpl	r3, [r4, #20]
   3acbe:	60a3      	str	r3, [r4, #8]
   3acc0:	e7f4      	b.n	3acac <__swsetup_r+0xb0>
   3acc2:	2000      	movs	r0, #0
   3acc4:	e7f7      	b.n	3acb6 <__swsetup_r+0xba>
   3acc6:	bf00      	nop
   3acc8:	20014a74 	.word	0x20014a74
   3accc:	000433fc 	.word	0x000433fc
   3acd0:	0004341c 	.word	0x0004341c
   3acd4:	000433dc 	.word	0x000433dc

0003acd8 <_close_r>:
   3acd8:	b538      	push	{r3, r4, r5, lr}
   3acda:	2300      	movs	r3, #0
   3acdc:	4d05      	ldr	r5, [pc, #20]	; (3acf4 <_close_r+0x1c>)
   3acde:	4604      	mov	r4, r0
   3ace0:	4608      	mov	r0, r1
   3ace2:	602b      	str	r3, [r5, #0]
   3ace4:	f002 fd10 	bl	3d708 <_close>
   3ace8:	1c43      	adds	r3, r0, #1
   3acea:	d102      	bne.n	3acf2 <_close_r+0x1a>
   3acec:	682b      	ldr	r3, [r5, #0]
   3acee:	b103      	cbz	r3, 3acf2 <_close_r+0x1a>
   3acf0:	6023      	str	r3, [r4, #0]
   3acf2:	bd38      	pop	{r3, r4, r5, pc}
   3acf4:	2001a568 	.word	0x2001a568

0003acf8 <__sflush_r>:
   3acf8:	898a      	ldrh	r2, [r1, #12]
   3acfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3acfe:	4605      	mov	r5, r0
   3ad00:	0710      	lsls	r0, r2, #28
   3ad02:	460c      	mov	r4, r1
   3ad04:	d458      	bmi.n	3adb8 <__sflush_r+0xc0>
   3ad06:	684b      	ldr	r3, [r1, #4]
   3ad08:	2b00      	cmp	r3, #0
   3ad0a:	dc05      	bgt.n	3ad18 <__sflush_r+0x20>
   3ad0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   3ad0e:	2b00      	cmp	r3, #0
   3ad10:	dc02      	bgt.n	3ad18 <__sflush_r+0x20>
   3ad12:	2000      	movs	r0, #0
   3ad14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3ad18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   3ad1a:	2e00      	cmp	r6, #0
   3ad1c:	d0f9      	beq.n	3ad12 <__sflush_r+0x1a>
   3ad1e:	2300      	movs	r3, #0
   3ad20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   3ad24:	682f      	ldr	r7, [r5, #0]
   3ad26:	602b      	str	r3, [r5, #0]
   3ad28:	d032      	beq.n	3ad90 <__sflush_r+0x98>
   3ad2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
   3ad2c:	89a3      	ldrh	r3, [r4, #12]
   3ad2e:	075a      	lsls	r2, r3, #29
   3ad30:	d505      	bpl.n	3ad3e <__sflush_r+0x46>
   3ad32:	6863      	ldr	r3, [r4, #4]
   3ad34:	1ac0      	subs	r0, r0, r3
   3ad36:	6b63      	ldr	r3, [r4, #52]	; 0x34
   3ad38:	b10b      	cbz	r3, 3ad3e <__sflush_r+0x46>
   3ad3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   3ad3c:	1ac0      	subs	r0, r0, r3
   3ad3e:	2300      	movs	r3, #0
   3ad40:	4602      	mov	r2, r0
   3ad42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   3ad44:	4628      	mov	r0, r5
   3ad46:	6a21      	ldr	r1, [r4, #32]
   3ad48:	47b0      	blx	r6
   3ad4a:	1c43      	adds	r3, r0, #1
   3ad4c:	89a3      	ldrh	r3, [r4, #12]
   3ad4e:	d106      	bne.n	3ad5e <__sflush_r+0x66>
   3ad50:	6829      	ldr	r1, [r5, #0]
   3ad52:	291d      	cmp	r1, #29
   3ad54:	d82c      	bhi.n	3adb0 <__sflush_r+0xb8>
   3ad56:	4a29      	ldr	r2, [pc, #164]	; (3adfc <__sflush_r+0x104>)
   3ad58:	40ca      	lsrs	r2, r1
   3ad5a:	07d6      	lsls	r6, r2, #31
   3ad5c:	d528      	bpl.n	3adb0 <__sflush_r+0xb8>
   3ad5e:	2200      	movs	r2, #0
   3ad60:	04d9      	lsls	r1, r3, #19
   3ad62:	6062      	str	r2, [r4, #4]
   3ad64:	6922      	ldr	r2, [r4, #16]
   3ad66:	6022      	str	r2, [r4, #0]
   3ad68:	d504      	bpl.n	3ad74 <__sflush_r+0x7c>
   3ad6a:	1c42      	adds	r2, r0, #1
   3ad6c:	d101      	bne.n	3ad72 <__sflush_r+0x7a>
   3ad6e:	682b      	ldr	r3, [r5, #0]
   3ad70:	b903      	cbnz	r3, 3ad74 <__sflush_r+0x7c>
   3ad72:	6560      	str	r0, [r4, #84]	; 0x54
   3ad74:	6b61      	ldr	r1, [r4, #52]	; 0x34
   3ad76:	602f      	str	r7, [r5, #0]
   3ad78:	2900      	cmp	r1, #0
   3ad7a:	d0ca      	beq.n	3ad12 <__sflush_r+0x1a>
   3ad7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
   3ad80:	4299      	cmp	r1, r3
   3ad82:	d002      	beq.n	3ad8a <__sflush_r+0x92>
   3ad84:	4628      	mov	r0, r5
   3ad86:	f7fe ff19 	bl	39bbc <_free_r>
   3ad8a:	2000      	movs	r0, #0
   3ad8c:	6360      	str	r0, [r4, #52]	; 0x34
   3ad8e:	e7c1      	b.n	3ad14 <__sflush_r+0x1c>
   3ad90:	6a21      	ldr	r1, [r4, #32]
   3ad92:	2301      	movs	r3, #1
   3ad94:	4628      	mov	r0, r5
   3ad96:	47b0      	blx	r6
   3ad98:	1c41      	adds	r1, r0, #1
   3ad9a:	d1c7      	bne.n	3ad2c <__sflush_r+0x34>
   3ad9c:	682b      	ldr	r3, [r5, #0]
   3ad9e:	2b00      	cmp	r3, #0
   3ada0:	d0c4      	beq.n	3ad2c <__sflush_r+0x34>
   3ada2:	2b1d      	cmp	r3, #29
   3ada4:	d001      	beq.n	3adaa <__sflush_r+0xb2>
   3ada6:	2b16      	cmp	r3, #22
   3ada8:	d101      	bne.n	3adae <__sflush_r+0xb6>
   3adaa:	602f      	str	r7, [r5, #0]
   3adac:	e7b1      	b.n	3ad12 <__sflush_r+0x1a>
   3adae:	89a3      	ldrh	r3, [r4, #12]
   3adb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3adb4:	81a3      	strh	r3, [r4, #12]
   3adb6:	e7ad      	b.n	3ad14 <__sflush_r+0x1c>
   3adb8:	690f      	ldr	r7, [r1, #16]
   3adba:	2f00      	cmp	r7, #0
   3adbc:	d0a9      	beq.n	3ad12 <__sflush_r+0x1a>
   3adbe:	0793      	lsls	r3, r2, #30
   3adc0:	680e      	ldr	r6, [r1, #0]
   3adc2:	600f      	str	r7, [r1, #0]
   3adc4:	bf0c      	ite	eq
   3adc6:	694b      	ldreq	r3, [r1, #20]
   3adc8:	2300      	movne	r3, #0
   3adca:	eba6 0807 	sub.w	r8, r6, r7
   3adce:	608b      	str	r3, [r1, #8]
   3add0:	f1b8 0f00 	cmp.w	r8, #0
   3add4:	dd9d      	ble.n	3ad12 <__sflush_r+0x1a>
   3add6:	4643      	mov	r3, r8
   3add8:	463a      	mov	r2, r7
   3adda:	6a21      	ldr	r1, [r4, #32]
   3addc:	4628      	mov	r0, r5
   3adde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   3ade0:	47b0      	blx	r6
   3ade2:	2800      	cmp	r0, #0
   3ade4:	dc06      	bgt.n	3adf4 <__sflush_r+0xfc>
   3ade6:	89a3      	ldrh	r3, [r4, #12]
   3ade8:	f04f 30ff 	mov.w	r0, #4294967295
   3adec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3adf0:	81a3      	strh	r3, [r4, #12]
   3adf2:	e78f      	b.n	3ad14 <__sflush_r+0x1c>
   3adf4:	4407      	add	r7, r0
   3adf6:	eba8 0800 	sub.w	r8, r8, r0
   3adfa:	e7e9      	b.n	3add0 <__sflush_r+0xd8>
   3adfc:	20400001 	.word	0x20400001

0003ae00 <_fflush_r>:
   3ae00:	b538      	push	{r3, r4, r5, lr}
   3ae02:	690b      	ldr	r3, [r1, #16]
   3ae04:	4605      	mov	r5, r0
   3ae06:	460c      	mov	r4, r1
   3ae08:	b913      	cbnz	r3, 3ae10 <_fflush_r+0x10>
   3ae0a:	2500      	movs	r5, #0
   3ae0c:	4628      	mov	r0, r5
   3ae0e:	bd38      	pop	{r3, r4, r5, pc}
   3ae10:	b118      	cbz	r0, 3ae1a <_fflush_r+0x1a>
   3ae12:	6983      	ldr	r3, [r0, #24]
   3ae14:	b90b      	cbnz	r3, 3ae1a <_fflush_r+0x1a>
   3ae16:	f000 f871 	bl	3aefc <__sinit>
   3ae1a:	4b14      	ldr	r3, [pc, #80]	; (3ae6c <_fflush_r+0x6c>)
   3ae1c:	429c      	cmp	r4, r3
   3ae1e:	d11b      	bne.n	3ae58 <_fflush_r+0x58>
   3ae20:	686c      	ldr	r4, [r5, #4]
   3ae22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3ae26:	2b00      	cmp	r3, #0
   3ae28:	d0ef      	beq.n	3ae0a <_fflush_r+0xa>
   3ae2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   3ae2c:	07d0      	lsls	r0, r2, #31
   3ae2e:	d404      	bmi.n	3ae3a <_fflush_r+0x3a>
   3ae30:	0599      	lsls	r1, r3, #22
   3ae32:	d402      	bmi.n	3ae3a <_fflush_r+0x3a>
   3ae34:	6da0      	ldr	r0, [r4, #88]	; 0x58
   3ae36:	f7e8 fd7d 	bl	23934 <__retarget_lock_acquire_recursive>
   3ae3a:	4628      	mov	r0, r5
   3ae3c:	4621      	mov	r1, r4
   3ae3e:	f7ff ff5b 	bl	3acf8 <__sflush_r>
   3ae42:	6e63      	ldr	r3, [r4, #100]	; 0x64
   3ae44:	4605      	mov	r5, r0
   3ae46:	07da      	lsls	r2, r3, #31
   3ae48:	d4e0      	bmi.n	3ae0c <_fflush_r+0xc>
   3ae4a:	89a3      	ldrh	r3, [r4, #12]
   3ae4c:	059b      	lsls	r3, r3, #22
   3ae4e:	d4dd      	bmi.n	3ae0c <_fflush_r+0xc>
   3ae50:	6da0      	ldr	r0, [r4, #88]	; 0x58
   3ae52:	f7e8 fd8b 	bl	2396c <__retarget_lock_release_recursive>
   3ae56:	e7d9      	b.n	3ae0c <_fflush_r+0xc>
   3ae58:	4b05      	ldr	r3, [pc, #20]	; (3ae70 <_fflush_r+0x70>)
   3ae5a:	429c      	cmp	r4, r3
   3ae5c:	d101      	bne.n	3ae62 <_fflush_r+0x62>
   3ae5e:	68ac      	ldr	r4, [r5, #8]
   3ae60:	e7df      	b.n	3ae22 <_fflush_r+0x22>
   3ae62:	4b04      	ldr	r3, [pc, #16]	; (3ae74 <_fflush_r+0x74>)
   3ae64:	429c      	cmp	r4, r3
   3ae66:	bf08      	it	eq
   3ae68:	68ec      	ldreq	r4, [r5, #12]
   3ae6a:	e7da      	b.n	3ae22 <_fflush_r+0x22>
   3ae6c:	000433fc 	.word	0x000433fc
   3ae70:	0004341c 	.word	0x0004341c
   3ae74:	000433dc 	.word	0x000433dc

0003ae78 <std>:
   3ae78:	2300      	movs	r3, #0
   3ae7a:	b510      	push	{r4, lr}
   3ae7c:	4604      	mov	r4, r0
   3ae7e:	6083      	str	r3, [r0, #8]
   3ae80:	8181      	strh	r1, [r0, #12]
   3ae82:	4619      	mov	r1, r3
   3ae84:	6643      	str	r3, [r0, #100]	; 0x64
   3ae86:	81c2      	strh	r2, [r0, #14]
   3ae88:	2208      	movs	r2, #8
   3ae8a:	6183      	str	r3, [r0, #24]
   3ae8c:	e9c0 3300 	strd	r3, r3, [r0]
   3ae90:	e9c0 3304 	strd	r3, r3, [r0, #16]
   3ae94:	305c      	adds	r0, #92	; 0x5c
   3ae96:	f006 faa5 	bl	413e4 <memset>
   3ae9a:	4b05      	ldr	r3, [pc, #20]	; (3aeb0 <std+0x38>)
   3ae9c:	6224      	str	r4, [r4, #32]
   3ae9e:	6263      	str	r3, [r4, #36]	; 0x24
   3aea0:	4b04      	ldr	r3, [pc, #16]	; (3aeb4 <std+0x3c>)
   3aea2:	62a3      	str	r3, [r4, #40]	; 0x28
   3aea4:	4b04      	ldr	r3, [pc, #16]	; (3aeb8 <std+0x40>)
   3aea6:	62e3      	str	r3, [r4, #44]	; 0x2c
   3aea8:	4b04      	ldr	r3, [pc, #16]	; (3aebc <std+0x44>)
   3aeaa:	6323      	str	r3, [r4, #48]	; 0x30
   3aeac:	bd10      	pop	{r4, pc}
   3aeae:	bf00      	nop
   3aeb0:	000416b9 	.word	0x000416b9
   3aeb4:	000416df 	.word	0x000416df
   3aeb8:	00041717 	.word	0x00041717
   3aebc:	0004173b 	.word	0x0004173b

0003aec0 <_cleanup_r>:
   3aec0:	4901      	ldr	r1, [pc, #4]	; (3aec8 <_cleanup_r+0x8>)
   3aec2:	f006 bdbb 	b.w	41a3c <_fwalk_reent>
   3aec6:	bf00      	nop
   3aec8:	0003ae01 	.word	0x0003ae01

0003aecc <__sfp_lock_acquire>:
   3aecc:	4801      	ldr	r0, [pc, #4]	; (3aed4 <__sfp_lock_acquire+0x8>)
   3aece:	f7e8 bd31 	b.w	23934 <__retarget_lock_acquire_recursive>
   3aed2:	bf00      	nop
   3aed4:	20014edc 	.word	0x20014edc

0003aed8 <__sfp_lock_release>:
   3aed8:	4801      	ldr	r0, [pc, #4]	; (3aee0 <__sfp_lock_release+0x8>)
   3aeda:	f7e8 bd47 	b.w	2396c <__retarget_lock_release_recursive>
   3aede:	bf00      	nop
   3aee0:	20014edc 	.word	0x20014edc

0003aee4 <__sinit_lock_acquire>:
   3aee4:	4801      	ldr	r0, [pc, #4]	; (3aeec <__sinit_lock_acquire+0x8>)
   3aee6:	f7e8 bd25 	b.w	23934 <__retarget_lock_acquire_recursive>
   3aeea:	bf00      	nop
   3aeec:	20014ef0 	.word	0x20014ef0

0003aef0 <__sinit_lock_release>:
   3aef0:	4801      	ldr	r0, [pc, #4]	; (3aef8 <__sinit_lock_release+0x8>)
   3aef2:	f7e8 bd3b 	b.w	2396c <__retarget_lock_release_recursive>
   3aef6:	bf00      	nop
   3aef8:	20014ef0 	.word	0x20014ef0

0003aefc <__sinit>:
   3aefc:	b510      	push	{r4, lr}
   3aefe:	4604      	mov	r4, r0
   3af00:	f7ff fff0 	bl	3aee4 <__sinit_lock_acquire>
   3af04:	69a3      	ldr	r3, [r4, #24]
   3af06:	b11b      	cbz	r3, 3af10 <__sinit+0x14>
   3af08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3af0c:	f7ff bff0 	b.w	3aef0 <__sinit_lock_release>
   3af10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   3af14:	6523      	str	r3, [r4, #80]	; 0x50
   3af16:	4620      	mov	r0, r4
   3af18:	4b12      	ldr	r3, [pc, #72]	; (3af64 <__sinit+0x68>)
   3af1a:	4a13      	ldr	r2, [pc, #76]	; (3af68 <__sinit+0x6c>)
   3af1c:	681b      	ldr	r3, [r3, #0]
   3af1e:	62a2      	str	r2, [r4, #40]	; 0x28
   3af20:	42a3      	cmp	r3, r4
   3af22:	bf04      	itt	eq
   3af24:	2301      	moveq	r3, #1
   3af26:	61a3      	streq	r3, [r4, #24]
   3af28:	f000 f820 	bl	3af6c <__sfp>
   3af2c:	6060      	str	r0, [r4, #4]
   3af2e:	4620      	mov	r0, r4
   3af30:	f000 f81c 	bl	3af6c <__sfp>
   3af34:	60a0      	str	r0, [r4, #8]
   3af36:	4620      	mov	r0, r4
   3af38:	f000 f818 	bl	3af6c <__sfp>
   3af3c:	2200      	movs	r2, #0
   3af3e:	2104      	movs	r1, #4
   3af40:	60e0      	str	r0, [r4, #12]
   3af42:	6860      	ldr	r0, [r4, #4]
   3af44:	f7ff ff98 	bl	3ae78 <std>
   3af48:	2201      	movs	r2, #1
   3af4a:	2109      	movs	r1, #9
   3af4c:	68a0      	ldr	r0, [r4, #8]
   3af4e:	f7ff ff93 	bl	3ae78 <std>
   3af52:	2202      	movs	r2, #2
   3af54:	2112      	movs	r1, #18
   3af56:	68e0      	ldr	r0, [r4, #12]
   3af58:	f7ff ff8e 	bl	3ae78 <std>
   3af5c:	2301      	movs	r3, #1
   3af5e:	61a3      	str	r3, [r4, #24]
   3af60:	e7d2      	b.n	3af08 <__sinit+0xc>
   3af62:	bf00      	nop
   3af64:	000433b0 	.word	0x000433b0
   3af68:	0003aec1 	.word	0x0003aec1

0003af6c <__sfp>:
   3af6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3af6e:	4607      	mov	r7, r0
   3af70:	f7ff ffac 	bl	3aecc <__sfp_lock_acquire>
   3af74:	4b1e      	ldr	r3, [pc, #120]	; (3aff0 <__sfp+0x84>)
   3af76:	681e      	ldr	r6, [r3, #0]
   3af78:	69b3      	ldr	r3, [r6, #24]
   3af7a:	b913      	cbnz	r3, 3af82 <__sfp+0x16>
   3af7c:	4630      	mov	r0, r6
   3af7e:	f7ff ffbd 	bl	3aefc <__sinit>
   3af82:	3648      	adds	r6, #72	; 0x48
   3af84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   3af88:	3b01      	subs	r3, #1
   3af8a:	d503      	bpl.n	3af94 <__sfp+0x28>
   3af8c:	6833      	ldr	r3, [r6, #0]
   3af8e:	b30b      	cbz	r3, 3afd4 <__sfp+0x68>
   3af90:	6836      	ldr	r6, [r6, #0]
   3af92:	e7f7      	b.n	3af84 <__sfp+0x18>
   3af94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   3af98:	b9d5      	cbnz	r5, 3afd0 <__sfp+0x64>
   3af9a:	4b16      	ldr	r3, [pc, #88]	; (3aff4 <__sfp+0x88>)
   3af9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   3afa0:	6665      	str	r5, [r4, #100]	; 0x64
   3afa2:	60e3      	str	r3, [r4, #12]
   3afa4:	f7e8 fc9e 	bl	238e4 <__retarget_lock_init_recursive>
   3afa8:	f7ff ff96 	bl	3aed8 <__sfp_lock_release>
   3afac:	2208      	movs	r2, #8
   3afae:	4629      	mov	r1, r5
   3afb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   3afb4:	6025      	str	r5, [r4, #0]
   3afb6:	61a5      	str	r5, [r4, #24]
   3afb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
   3afbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
   3afc0:	f006 fa10 	bl	413e4 <memset>
   3afc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   3afc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   3afcc:	4620      	mov	r0, r4
   3afce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3afd0:	3468      	adds	r4, #104	; 0x68
   3afd2:	e7d9      	b.n	3af88 <__sfp+0x1c>
   3afd4:	2104      	movs	r1, #4
   3afd6:	4638      	mov	r0, r7
   3afd8:	f006 fd1a 	bl	41a10 <__sfmoreglue>
   3afdc:	4604      	mov	r4, r0
   3afde:	6030      	str	r0, [r6, #0]
   3afe0:	2800      	cmp	r0, #0
   3afe2:	d1d5      	bne.n	3af90 <__sfp+0x24>
   3afe4:	f7ff ff78 	bl	3aed8 <__sfp_lock_release>
   3afe8:	230c      	movs	r3, #12
   3afea:	603b      	str	r3, [r7, #0]
   3afec:	e7ee      	b.n	3afcc <__sfp+0x60>
   3afee:	bf00      	nop
   3aff0:	000433b0 	.word	0x000433b0
   3aff4:	ffff0001 	.word	0xffff0001

0003aff8 <__gethex>:
   3aff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3affc:	ed2d 8b02 	vpush	{d8}
   3b000:	b089      	sub	sp, #36	; 0x24
   3b002:	ee08 0a10 	vmov	s16, r0
   3b006:	468b      	mov	fp, r1
   3b008:	4690      	mov	r8, r2
   3b00a:	9304      	str	r3, [sp, #16]
   3b00c:	4bb2      	ldr	r3, [pc, #712]	; (3b2d8 <__gethex+0x2e0>)
   3b00e:	681b      	ldr	r3, [r3, #0]
   3b010:	4618      	mov	r0, r3
   3b012:	9301      	str	r3, [sp, #4]
   3b014:	f7e2 f915 	bl	1d242 <strlen>
   3b018:	9b01      	ldr	r3, [sp, #4]
   3b01a:	f8db 2000 	ldr.w	r2, [fp]
   3b01e:	4682      	mov	sl, r0
   3b020:	4403      	add	r3, r0
   3b022:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   3b026:	9305      	str	r3, [sp, #20]
   3b028:	1c93      	adds	r3, r2, #2
   3b02a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   3b02e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   3b032:	32fe      	adds	r2, #254	; 0xfe
   3b034:	18d1      	adds	r1, r2, r3
   3b036:	461f      	mov	r7, r3
   3b038:	f813 0b01 	ldrb.w	r0, [r3], #1
   3b03c:	9100      	str	r1, [sp, #0]
   3b03e:	2830      	cmp	r0, #48	; 0x30
   3b040:	d0f8      	beq.n	3b034 <__gethex+0x3c>
   3b042:	f006 fd6b 	bl	41b1c <__hexdig_fun>
   3b046:	4604      	mov	r4, r0
   3b048:	2800      	cmp	r0, #0
   3b04a:	d139      	bne.n	3b0c0 <__gethex+0xc8>
   3b04c:	4652      	mov	r2, sl
   3b04e:	9901      	ldr	r1, [sp, #4]
   3b050:	4638      	mov	r0, r7
   3b052:	f006 fb9a 	bl	4178a <strncmp>
   3b056:	4605      	mov	r5, r0
   3b058:	2800      	cmp	r0, #0
   3b05a:	d167      	bne.n	3b12c <__gethex+0x134>
   3b05c:	f817 000a 	ldrb.w	r0, [r7, sl]
   3b060:	eb07 060a 	add.w	r6, r7, sl
   3b064:	f006 fd5a 	bl	41b1c <__hexdig_fun>
   3b068:	2800      	cmp	r0, #0
   3b06a:	d061      	beq.n	3b130 <__gethex+0x138>
   3b06c:	4633      	mov	r3, r6
   3b06e:	7818      	ldrb	r0, [r3, #0]
   3b070:	461f      	mov	r7, r3
   3b072:	3301      	adds	r3, #1
   3b074:	2830      	cmp	r0, #48	; 0x30
   3b076:	d0fa      	beq.n	3b06e <__gethex+0x76>
   3b078:	f006 fd50 	bl	41b1c <__hexdig_fun>
   3b07c:	fab0 f480 	clz	r4, r0
   3b080:	2301      	movs	r3, #1
   3b082:	4635      	mov	r5, r6
   3b084:	0964      	lsrs	r4, r4, #5
   3b086:	9300      	str	r3, [sp, #0]
   3b088:	463a      	mov	r2, r7
   3b08a:	4616      	mov	r6, r2
   3b08c:	3201      	adds	r2, #1
   3b08e:	7830      	ldrb	r0, [r6, #0]
   3b090:	f006 fd44 	bl	41b1c <__hexdig_fun>
   3b094:	2800      	cmp	r0, #0
   3b096:	d1f8      	bne.n	3b08a <__gethex+0x92>
   3b098:	4652      	mov	r2, sl
   3b09a:	9901      	ldr	r1, [sp, #4]
   3b09c:	4630      	mov	r0, r6
   3b09e:	f006 fb74 	bl	4178a <strncmp>
   3b0a2:	b980      	cbnz	r0, 3b0c6 <__gethex+0xce>
   3b0a4:	b94d      	cbnz	r5, 3b0ba <__gethex+0xc2>
   3b0a6:	eb06 050a 	add.w	r5, r6, sl
   3b0aa:	462a      	mov	r2, r5
   3b0ac:	4616      	mov	r6, r2
   3b0ae:	3201      	adds	r2, #1
   3b0b0:	7830      	ldrb	r0, [r6, #0]
   3b0b2:	f006 fd33 	bl	41b1c <__hexdig_fun>
   3b0b6:	2800      	cmp	r0, #0
   3b0b8:	d1f8      	bne.n	3b0ac <__gethex+0xb4>
   3b0ba:	1bad      	subs	r5, r5, r6
   3b0bc:	00ad      	lsls	r5, r5, #2
   3b0be:	e004      	b.n	3b0ca <__gethex+0xd2>
   3b0c0:	2400      	movs	r4, #0
   3b0c2:	4625      	mov	r5, r4
   3b0c4:	e7e0      	b.n	3b088 <__gethex+0x90>
   3b0c6:	2d00      	cmp	r5, #0
   3b0c8:	d1f7      	bne.n	3b0ba <__gethex+0xc2>
   3b0ca:	7833      	ldrb	r3, [r6, #0]
   3b0cc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   3b0d0:	2b50      	cmp	r3, #80	; 0x50
   3b0d2:	d13b      	bne.n	3b14c <__gethex+0x154>
   3b0d4:	7873      	ldrb	r3, [r6, #1]
   3b0d6:	2b2b      	cmp	r3, #43	; 0x2b
   3b0d8:	d02c      	beq.n	3b134 <__gethex+0x13c>
   3b0da:	2b2d      	cmp	r3, #45	; 0x2d
   3b0dc:	d02e      	beq.n	3b13c <__gethex+0x144>
   3b0de:	1c71      	adds	r1, r6, #1
   3b0e0:	f04f 0900 	mov.w	r9, #0
   3b0e4:	7808      	ldrb	r0, [r1, #0]
   3b0e6:	f006 fd19 	bl	41b1c <__hexdig_fun>
   3b0ea:	1e43      	subs	r3, r0, #1
   3b0ec:	b2db      	uxtb	r3, r3
   3b0ee:	2b18      	cmp	r3, #24
   3b0f0:	d82c      	bhi.n	3b14c <__gethex+0x154>
   3b0f2:	f1a0 0210 	sub.w	r2, r0, #16
   3b0f6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   3b0fa:	f006 fd0f 	bl	41b1c <__hexdig_fun>
   3b0fe:	1e43      	subs	r3, r0, #1
   3b100:	b2db      	uxtb	r3, r3
   3b102:	2b18      	cmp	r3, #24
   3b104:	d91d      	bls.n	3b142 <__gethex+0x14a>
   3b106:	f1b9 0f00 	cmp.w	r9, #0
   3b10a:	d000      	beq.n	3b10e <__gethex+0x116>
   3b10c:	4252      	negs	r2, r2
   3b10e:	4415      	add	r5, r2
   3b110:	f8cb 1000 	str.w	r1, [fp]
   3b114:	b1e4      	cbz	r4, 3b150 <__gethex+0x158>
   3b116:	9b00      	ldr	r3, [sp, #0]
   3b118:	2b00      	cmp	r3, #0
   3b11a:	bf14      	ite	ne
   3b11c:	2700      	movne	r7, #0
   3b11e:	2706      	moveq	r7, #6
   3b120:	4638      	mov	r0, r7
   3b122:	b009      	add	sp, #36	; 0x24
   3b124:	ecbd 8b02 	vpop	{d8}
   3b128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b12c:	463e      	mov	r6, r7
   3b12e:	4625      	mov	r5, r4
   3b130:	2401      	movs	r4, #1
   3b132:	e7ca      	b.n	3b0ca <__gethex+0xd2>
   3b134:	f04f 0900 	mov.w	r9, #0
   3b138:	1cb1      	adds	r1, r6, #2
   3b13a:	e7d3      	b.n	3b0e4 <__gethex+0xec>
   3b13c:	f04f 0901 	mov.w	r9, #1
   3b140:	e7fa      	b.n	3b138 <__gethex+0x140>
   3b142:	230a      	movs	r3, #10
   3b144:	fb03 0202 	mla	r2, r3, r2, r0
   3b148:	3a10      	subs	r2, #16
   3b14a:	e7d4      	b.n	3b0f6 <__gethex+0xfe>
   3b14c:	4631      	mov	r1, r6
   3b14e:	e7df      	b.n	3b110 <__gethex+0x118>
   3b150:	1bf3      	subs	r3, r6, r7
   3b152:	4621      	mov	r1, r4
   3b154:	3b01      	subs	r3, #1
   3b156:	2b07      	cmp	r3, #7
   3b158:	dc0b      	bgt.n	3b172 <__gethex+0x17a>
   3b15a:	ee18 0a10 	vmov	r0, s16
   3b15e:	f000 f9f3 	bl	3b548 <_Balloc>
   3b162:	4604      	mov	r4, r0
   3b164:	b940      	cbnz	r0, 3b178 <__gethex+0x180>
   3b166:	4b5d      	ldr	r3, [pc, #372]	; (3b2dc <__gethex+0x2e4>)
   3b168:	4602      	mov	r2, r0
   3b16a:	21de      	movs	r1, #222	; 0xde
   3b16c:	485c      	ldr	r0, [pc, #368]	; (3b2e0 <__gethex+0x2e8>)
   3b16e:	f7fe fc39 	bl	399e4 <__assert_func>
   3b172:	3101      	adds	r1, #1
   3b174:	105b      	asrs	r3, r3, #1
   3b176:	e7ee      	b.n	3b156 <__gethex+0x15e>
   3b178:	f100 0914 	add.w	r9, r0, #20
   3b17c:	f04f 0b00 	mov.w	fp, #0
   3b180:	f1ca 0301 	rsb	r3, sl, #1
   3b184:	f8cd 9008 	str.w	r9, [sp, #8]
   3b188:	f8cd b000 	str.w	fp, [sp]
   3b18c:	9306      	str	r3, [sp, #24]
   3b18e:	42b7      	cmp	r7, r6
   3b190:	d340      	bcc.n	3b214 <__gethex+0x21c>
   3b192:	9802      	ldr	r0, [sp, #8]
   3b194:	9b00      	ldr	r3, [sp, #0]
   3b196:	f840 3b04 	str.w	r3, [r0], #4
   3b19a:	eba0 0009 	sub.w	r0, r0, r9
   3b19e:	1080      	asrs	r0, r0, #2
   3b1a0:	0146      	lsls	r6, r0, #5
   3b1a2:	6120      	str	r0, [r4, #16]
   3b1a4:	4618      	mov	r0, r3
   3b1a6:	f006 fde1 	bl	41d6c <__hi0bits>
   3b1aa:	1a30      	subs	r0, r6, r0
   3b1ac:	f8d8 6000 	ldr.w	r6, [r8]
   3b1b0:	42b0      	cmp	r0, r6
   3b1b2:	dd63      	ble.n	3b27c <__gethex+0x284>
   3b1b4:	1b87      	subs	r7, r0, r6
   3b1b6:	4620      	mov	r0, r4
   3b1b8:	4639      	mov	r1, r7
   3b1ba:	f006 fe93 	bl	41ee4 <__any_on>
   3b1be:	4682      	mov	sl, r0
   3b1c0:	b1a8      	cbz	r0, 3b1ee <__gethex+0x1f6>
   3b1c2:	1e7b      	subs	r3, r7, #1
   3b1c4:	f04f 0a01 	mov.w	sl, #1
   3b1c8:	1159      	asrs	r1, r3, #5
   3b1ca:	f003 021f 	and.w	r2, r3, #31
   3b1ce:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   3b1d2:	fa0a f202 	lsl.w	r2, sl, r2
   3b1d6:	420a      	tst	r2, r1
   3b1d8:	d009      	beq.n	3b1ee <__gethex+0x1f6>
   3b1da:	4553      	cmp	r3, sl
   3b1dc:	dd05      	ble.n	3b1ea <__gethex+0x1f2>
   3b1de:	1eb9      	subs	r1, r7, #2
   3b1e0:	4620      	mov	r0, r4
   3b1e2:	f006 fe7f 	bl	41ee4 <__any_on>
   3b1e6:	2800      	cmp	r0, #0
   3b1e8:	d145      	bne.n	3b276 <__gethex+0x27e>
   3b1ea:	f04f 0a02 	mov.w	sl, #2
   3b1ee:	443d      	add	r5, r7
   3b1f0:	4639      	mov	r1, r7
   3b1f2:	4620      	mov	r0, r4
   3b1f4:	f006 fc41 	bl	41a7a <rshift>
   3b1f8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   3b1fc:	42ab      	cmp	r3, r5
   3b1fe:	da4c      	bge.n	3b29a <__gethex+0x2a2>
   3b200:	4621      	mov	r1, r4
   3b202:	ee18 0a10 	vmov	r0, s16
   3b206:	f000 f9df 	bl	3b5c8 <_Bfree>
   3b20a:	2300      	movs	r3, #0
   3b20c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   3b20e:	27a3      	movs	r7, #163	; 0xa3
   3b210:	6013      	str	r3, [r2, #0]
   3b212:	e785      	b.n	3b120 <__gethex+0x128>
   3b214:	1e73      	subs	r3, r6, #1
   3b216:	9a05      	ldr	r2, [sp, #20]
   3b218:	9303      	str	r3, [sp, #12]
   3b21a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   3b21e:	4293      	cmp	r3, r2
   3b220:	d019      	beq.n	3b256 <__gethex+0x25e>
   3b222:	f1bb 0f20 	cmp.w	fp, #32
   3b226:	d107      	bne.n	3b238 <__gethex+0x240>
   3b228:	9b02      	ldr	r3, [sp, #8]
   3b22a:	9a00      	ldr	r2, [sp, #0]
   3b22c:	f843 2b04 	str.w	r2, [r3], #4
   3b230:	9302      	str	r3, [sp, #8]
   3b232:	2300      	movs	r3, #0
   3b234:	469b      	mov	fp, r3
   3b236:	9300      	str	r3, [sp, #0]
   3b238:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   3b23c:	f006 fc6e 	bl	41b1c <__hexdig_fun>
   3b240:	f000 000f 	and.w	r0, r0, #15
   3b244:	9b00      	ldr	r3, [sp, #0]
   3b246:	fa00 f00b 	lsl.w	r0, r0, fp
   3b24a:	f10b 0b04 	add.w	fp, fp, #4
   3b24e:	4303      	orrs	r3, r0
   3b250:	9300      	str	r3, [sp, #0]
   3b252:	9b03      	ldr	r3, [sp, #12]
   3b254:	e00d      	b.n	3b272 <__gethex+0x27a>
   3b256:	9b03      	ldr	r3, [sp, #12]
   3b258:	9a06      	ldr	r2, [sp, #24]
   3b25a:	4413      	add	r3, r2
   3b25c:	42bb      	cmp	r3, r7
   3b25e:	d3e0      	bcc.n	3b222 <__gethex+0x22a>
   3b260:	4618      	mov	r0, r3
   3b262:	4652      	mov	r2, sl
   3b264:	9901      	ldr	r1, [sp, #4]
   3b266:	9307      	str	r3, [sp, #28]
   3b268:	f006 fa8f 	bl	4178a <strncmp>
   3b26c:	9b07      	ldr	r3, [sp, #28]
   3b26e:	2800      	cmp	r0, #0
   3b270:	d1d7      	bne.n	3b222 <__gethex+0x22a>
   3b272:	461e      	mov	r6, r3
   3b274:	e78b      	b.n	3b18e <__gethex+0x196>
   3b276:	f04f 0a03 	mov.w	sl, #3
   3b27a:	e7b8      	b.n	3b1ee <__gethex+0x1f6>
   3b27c:	da0a      	bge.n	3b294 <__gethex+0x29c>
   3b27e:	1a37      	subs	r7, r6, r0
   3b280:	4621      	mov	r1, r4
   3b282:	ee18 0a10 	vmov	r0, s16
   3b286:	463a      	mov	r2, r7
   3b288:	1bed      	subs	r5, r5, r7
   3b28a:	f000 fb69 	bl	3b960 <__lshift>
   3b28e:	4604      	mov	r4, r0
   3b290:	f100 0914 	add.w	r9, r0, #20
   3b294:	f04f 0a00 	mov.w	sl, #0
   3b298:	e7ae      	b.n	3b1f8 <__gethex+0x200>
   3b29a:	f8d8 0004 	ldr.w	r0, [r8, #4]
   3b29e:	42a8      	cmp	r0, r5
   3b2a0:	dd72      	ble.n	3b388 <__gethex+0x390>
   3b2a2:	1b45      	subs	r5, r0, r5
   3b2a4:	42ae      	cmp	r6, r5
   3b2a6:	dc35      	bgt.n	3b314 <__gethex+0x31c>
   3b2a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
   3b2ac:	2b02      	cmp	r3, #2
   3b2ae:	d029      	beq.n	3b304 <__gethex+0x30c>
   3b2b0:	2b03      	cmp	r3, #3
   3b2b2:	d02b      	beq.n	3b30c <__gethex+0x314>
   3b2b4:	2b01      	cmp	r3, #1
   3b2b6:	d11b      	bne.n	3b2f0 <__gethex+0x2f8>
   3b2b8:	42ae      	cmp	r6, r5
   3b2ba:	d119      	bne.n	3b2f0 <__gethex+0x2f8>
   3b2bc:	2e01      	cmp	r6, #1
   3b2be:	d111      	bne.n	3b2e4 <__gethex+0x2ec>
   3b2c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   3b2c4:	2762      	movs	r7, #98	; 0x62
   3b2c6:	9a04      	ldr	r2, [sp, #16]
   3b2c8:	6013      	str	r3, [r2, #0]
   3b2ca:	2301      	movs	r3, #1
   3b2cc:	6123      	str	r3, [r4, #16]
   3b2ce:	f8c9 3000 	str.w	r3, [r9]
   3b2d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   3b2d4:	601c      	str	r4, [r3, #0]
   3b2d6:	e723      	b.n	3b120 <__gethex+0x128>
   3b2d8:	0004343c 	.word	0x0004343c
   3b2dc:	0004be67 	.word	0x0004be67
   3b2e0:	0004be78 	.word	0x0004be78
   3b2e4:	1e71      	subs	r1, r6, #1
   3b2e6:	4620      	mov	r0, r4
   3b2e8:	f006 fdfc 	bl	41ee4 <__any_on>
   3b2ec:	2800      	cmp	r0, #0
   3b2ee:	d1e7      	bne.n	3b2c0 <__gethex+0x2c8>
   3b2f0:	4621      	mov	r1, r4
   3b2f2:	ee18 0a10 	vmov	r0, s16
   3b2f6:	f000 f967 	bl	3b5c8 <_Bfree>
   3b2fa:	2300      	movs	r3, #0
   3b2fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   3b2fe:	2750      	movs	r7, #80	; 0x50
   3b300:	6013      	str	r3, [r2, #0]
   3b302:	e70d      	b.n	3b120 <__gethex+0x128>
   3b304:	9b15      	ldr	r3, [sp, #84]	; 0x54
   3b306:	2b00      	cmp	r3, #0
   3b308:	d1f2      	bne.n	3b2f0 <__gethex+0x2f8>
   3b30a:	e7d9      	b.n	3b2c0 <__gethex+0x2c8>
   3b30c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   3b30e:	2b00      	cmp	r3, #0
   3b310:	d1d6      	bne.n	3b2c0 <__gethex+0x2c8>
   3b312:	e7ed      	b.n	3b2f0 <__gethex+0x2f8>
   3b314:	1e6f      	subs	r7, r5, #1
   3b316:	f1ba 0f00 	cmp.w	sl, #0
   3b31a:	d132      	bne.n	3b382 <__gethex+0x38a>
   3b31c:	b127      	cbz	r7, 3b328 <__gethex+0x330>
   3b31e:	4639      	mov	r1, r7
   3b320:	4620      	mov	r0, r4
   3b322:	f006 fddf 	bl	41ee4 <__any_on>
   3b326:	4682      	mov	sl, r0
   3b328:	117b      	asrs	r3, r7, #5
   3b32a:	2101      	movs	r1, #1
   3b32c:	f007 071f 	and.w	r7, r7, #31
   3b330:	4620      	mov	r0, r4
   3b332:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   3b336:	1b76      	subs	r6, r6, r5
   3b338:	fa01 f707 	lsl.w	r7, r1, r7
   3b33c:	4629      	mov	r1, r5
   3b33e:	421f      	tst	r7, r3
   3b340:	f04f 0702 	mov.w	r7, #2
   3b344:	bf18      	it	ne
   3b346:	f04a 0a02 	orrne.w	sl, sl, #2
   3b34a:	f006 fb96 	bl	41a7a <rshift>
   3b34e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   3b352:	f1ba 0f00 	cmp.w	sl, #0
   3b356:	d048      	beq.n	3b3ea <__gethex+0x3f2>
   3b358:	f8d8 300c 	ldr.w	r3, [r8, #12]
   3b35c:	2b02      	cmp	r3, #2
   3b35e:	d015      	beq.n	3b38c <__gethex+0x394>
   3b360:	2b03      	cmp	r3, #3
   3b362:	d017      	beq.n	3b394 <__gethex+0x39c>
   3b364:	2b01      	cmp	r3, #1
   3b366:	d109      	bne.n	3b37c <__gethex+0x384>
   3b368:	f01a 0f02 	tst.w	sl, #2
   3b36c:	d006      	beq.n	3b37c <__gethex+0x384>
   3b36e:	f8d9 0000 	ldr.w	r0, [r9]
   3b372:	ea4a 0a00 	orr.w	sl, sl, r0
   3b376:	f01a 0f01 	tst.w	sl, #1
   3b37a:	d10e      	bne.n	3b39a <__gethex+0x3a2>
   3b37c:	f047 0710 	orr.w	r7, r7, #16
   3b380:	e033      	b.n	3b3ea <__gethex+0x3f2>
   3b382:	f04f 0a01 	mov.w	sl, #1
   3b386:	e7cf      	b.n	3b328 <__gethex+0x330>
   3b388:	2701      	movs	r7, #1
   3b38a:	e7e2      	b.n	3b352 <__gethex+0x35a>
   3b38c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   3b38e:	f1c3 0301 	rsb	r3, r3, #1
   3b392:	9315      	str	r3, [sp, #84]	; 0x54
   3b394:	9b15      	ldr	r3, [sp, #84]	; 0x54
   3b396:	2b00      	cmp	r3, #0
   3b398:	d0f0      	beq.n	3b37c <__gethex+0x384>
   3b39a:	f8d4 b010 	ldr.w	fp, [r4, #16]
   3b39e:	f104 0314 	add.w	r3, r4, #20
   3b3a2:	f04f 0c00 	mov.w	ip, #0
   3b3a6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   3b3aa:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   3b3ae:	4618      	mov	r0, r3
   3b3b0:	f853 2b04 	ldr.w	r2, [r3], #4
   3b3b4:	f1b2 3fff 	cmp.w	r2, #4294967295
   3b3b8:	d01c      	beq.n	3b3f4 <__gethex+0x3fc>
   3b3ba:	3201      	adds	r2, #1
   3b3bc:	6002      	str	r2, [r0, #0]
   3b3be:	2f02      	cmp	r7, #2
   3b3c0:	f104 0314 	add.w	r3, r4, #20
   3b3c4:	d13f      	bne.n	3b446 <__gethex+0x44e>
   3b3c6:	f8d8 2000 	ldr.w	r2, [r8]
   3b3ca:	3a01      	subs	r2, #1
   3b3cc:	42b2      	cmp	r2, r6
   3b3ce:	d10a      	bne.n	3b3e6 <__gethex+0x3ee>
   3b3d0:	1171      	asrs	r1, r6, #5
   3b3d2:	2201      	movs	r2, #1
   3b3d4:	f006 061f 	and.w	r6, r6, #31
   3b3d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   3b3dc:	fa02 f606 	lsl.w	r6, r2, r6
   3b3e0:	421e      	tst	r6, r3
   3b3e2:	bf18      	it	ne
   3b3e4:	4617      	movne	r7, r2
   3b3e6:	f047 0720 	orr.w	r7, r7, #32
   3b3ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
   3b3ec:	601c      	str	r4, [r3, #0]
   3b3ee:	9b04      	ldr	r3, [sp, #16]
   3b3f0:	601d      	str	r5, [r3, #0]
   3b3f2:	e695      	b.n	3b120 <__gethex+0x128>
   3b3f4:	4299      	cmp	r1, r3
   3b3f6:	f843 cc04 	str.w	ip, [r3, #-4]
   3b3fa:	d8d8      	bhi.n	3b3ae <__gethex+0x3b6>
   3b3fc:	68a3      	ldr	r3, [r4, #8]
   3b3fe:	459b      	cmp	fp, r3
   3b400:	db19      	blt.n	3b436 <__gethex+0x43e>
   3b402:	6861      	ldr	r1, [r4, #4]
   3b404:	ee18 0a10 	vmov	r0, s16
   3b408:	3101      	adds	r1, #1
   3b40a:	f000 f89d 	bl	3b548 <_Balloc>
   3b40e:	4681      	mov	r9, r0
   3b410:	b918      	cbnz	r0, 3b41a <__gethex+0x422>
   3b412:	4b1b      	ldr	r3, [pc, #108]	; (3b480 <__gethex+0x488>)
   3b414:	4602      	mov	r2, r0
   3b416:	2184      	movs	r1, #132	; 0x84
   3b418:	e6a8      	b.n	3b16c <__gethex+0x174>
   3b41a:	6922      	ldr	r2, [r4, #16]
   3b41c:	f104 010c 	add.w	r1, r4, #12
   3b420:	300c      	adds	r0, #12
   3b422:	3202      	adds	r2, #2
   3b424:	0092      	lsls	r2, r2, #2
   3b426:	f005 ffbd 	bl	413a4 <memcpy>
   3b42a:	4621      	mov	r1, r4
   3b42c:	464c      	mov	r4, r9
   3b42e:	ee18 0a10 	vmov	r0, s16
   3b432:	f000 f8c9 	bl	3b5c8 <_Bfree>
   3b436:	6923      	ldr	r3, [r4, #16]
   3b438:	1c5a      	adds	r2, r3, #1
   3b43a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   3b43e:	6122      	str	r2, [r4, #16]
   3b440:	2201      	movs	r2, #1
   3b442:	615a      	str	r2, [r3, #20]
   3b444:	e7bb      	b.n	3b3be <__gethex+0x3c6>
   3b446:	6922      	ldr	r2, [r4, #16]
   3b448:	455a      	cmp	r2, fp
   3b44a:	dd0b      	ble.n	3b464 <__gethex+0x46c>
   3b44c:	2101      	movs	r1, #1
   3b44e:	4620      	mov	r0, r4
   3b450:	f006 fb13 	bl	41a7a <rshift>
   3b454:	3501      	adds	r5, #1
   3b456:	f8d8 3008 	ldr.w	r3, [r8, #8]
   3b45a:	42ab      	cmp	r3, r5
   3b45c:	f6ff aed0 	blt.w	3b200 <__gethex+0x208>
   3b460:	2701      	movs	r7, #1
   3b462:	e7c0      	b.n	3b3e6 <__gethex+0x3ee>
   3b464:	f016 061f 	ands.w	r6, r6, #31
   3b468:	d0fa      	beq.n	3b460 <__gethex+0x468>
   3b46a:	4453      	add	r3, sl
   3b46c:	f1c6 0620 	rsb	r6, r6, #32
   3b470:	f853 0c04 	ldr.w	r0, [r3, #-4]
   3b474:	f006 fc7a 	bl	41d6c <__hi0bits>
   3b478:	42b0      	cmp	r0, r6
   3b47a:	dbe7      	blt.n	3b44c <__gethex+0x454>
   3b47c:	e7f0      	b.n	3b460 <__gethex+0x468>
   3b47e:	bf00      	nop
   3b480:	0004be67 	.word	0x0004be67

0003b484 <_localeconv_r>:
   3b484:	4800      	ldr	r0, [pc, #0]	; (3b488 <_localeconv_r+0x4>)
   3b486:	4770      	bx	lr
   3b488:	20014bc8 	.word	0x20014bc8

0003b48c <_lseek_r>:
   3b48c:	b538      	push	{r3, r4, r5, lr}
   3b48e:	4604      	mov	r4, r0
   3b490:	4d06      	ldr	r5, [pc, #24]	; (3b4ac <_lseek_r+0x20>)
   3b492:	4608      	mov	r0, r1
   3b494:	4611      	mov	r1, r2
   3b496:	2200      	movs	r2, #0
   3b498:	602a      	str	r2, [r5, #0]
   3b49a:	461a      	mov	r2, r3
   3b49c:	f002 f937 	bl	3d70e <_lseek>
   3b4a0:	1c43      	adds	r3, r0, #1
   3b4a2:	d102      	bne.n	3b4aa <_lseek_r+0x1e>
   3b4a4:	682b      	ldr	r3, [r5, #0]
   3b4a6:	b103      	cbz	r3, 3b4aa <_lseek_r+0x1e>
   3b4a8:	6023      	str	r3, [r4, #0]
   3b4aa:	bd38      	pop	{r3, r4, r5, pc}
   3b4ac:	2001a568 	.word	0x2001a568

0003b4b0 <__smakebuf_r>:
   3b4b0:	898b      	ldrh	r3, [r1, #12]
   3b4b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3b4b4:	079d      	lsls	r5, r3, #30
   3b4b6:	4606      	mov	r6, r0
   3b4b8:	460c      	mov	r4, r1
   3b4ba:	d507      	bpl.n	3b4cc <__smakebuf_r+0x1c>
   3b4bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
   3b4c0:	6023      	str	r3, [r4, #0]
   3b4c2:	6123      	str	r3, [r4, #16]
   3b4c4:	2301      	movs	r3, #1
   3b4c6:	6163      	str	r3, [r4, #20]
   3b4c8:	b002      	add	sp, #8
   3b4ca:	bd70      	pop	{r4, r5, r6, pc}
   3b4cc:	ab01      	add	r3, sp, #4
   3b4ce:	466a      	mov	r2, sp
   3b4d0:	f006 fbfb 	bl	41cca <__swhatbuf_r>
   3b4d4:	9900      	ldr	r1, [sp, #0]
   3b4d6:	4605      	mov	r5, r0
   3b4d8:	4630      	mov	r0, r6
   3b4da:	f7fe fbbb 	bl	39c54 <_malloc_r>
   3b4de:	b948      	cbnz	r0, 3b4f4 <__smakebuf_r+0x44>
   3b4e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3b4e4:	059a      	lsls	r2, r3, #22
   3b4e6:	d4ef      	bmi.n	3b4c8 <__smakebuf_r+0x18>
   3b4e8:	f023 0303 	bic.w	r3, r3, #3
   3b4ec:	f043 0302 	orr.w	r3, r3, #2
   3b4f0:	81a3      	strh	r3, [r4, #12]
   3b4f2:	e7e3      	b.n	3b4bc <__smakebuf_r+0xc>
   3b4f4:	4b0d      	ldr	r3, [pc, #52]	; (3b52c <__smakebuf_r+0x7c>)
   3b4f6:	62b3      	str	r3, [r6, #40]	; 0x28
   3b4f8:	89a3      	ldrh	r3, [r4, #12]
   3b4fa:	6020      	str	r0, [r4, #0]
   3b4fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   3b500:	6120      	str	r0, [r4, #16]
   3b502:	81a3      	strh	r3, [r4, #12]
   3b504:	9b00      	ldr	r3, [sp, #0]
   3b506:	6163      	str	r3, [r4, #20]
   3b508:	9b01      	ldr	r3, [sp, #4]
   3b50a:	b15b      	cbz	r3, 3b524 <__smakebuf_r+0x74>
   3b50c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   3b510:	4630      	mov	r0, r6
   3b512:	f001 f807 	bl	3c524 <_isatty_r>
   3b516:	b128      	cbz	r0, 3b524 <__smakebuf_r+0x74>
   3b518:	89a3      	ldrh	r3, [r4, #12]
   3b51a:	f023 0303 	bic.w	r3, r3, #3
   3b51e:	f043 0301 	orr.w	r3, r3, #1
   3b522:	81a3      	strh	r3, [r4, #12]
   3b524:	89a0      	ldrh	r0, [r4, #12]
   3b526:	4305      	orrs	r5, r0
   3b528:	81a5      	strh	r5, [r4, #12]
   3b52a:	e7cd      	b.n	3b4c8 <__smakebuf_r+0x18>
   3b52c:	0003aec1 	.word	0x0003aec1

0003b530 <__malloc_lock>:
   3b530:	4801      	ldr	r0, [pc, #4]	; (3b538 <__malloc_lock+0x8>)
   3b532:	f7e8 b9ff 	b.w	23934 <__retarget_lock_acquire_recursive>
   3b536:	bf00      	nop
   3b538:	20014ec8 	.word	0x20014ec8

0003b53c <__malloc_unlock>:
   3b53c:	4801      	ldr	r0, [pc, #4]	; (3b544 <__malloc_unlock+0x8>)
   3b53e:	f7e8 ba15 	b.w	2396c <__retarget_lock_release_recursive>
   3b542:	bf00      	nop
   3b544:	20014ec8 	.word	0x20014ec8

0003b548 <_Balloc>:
   3b548:	b570      	push	{r4, r5, r6, lr}
   3b54a:	6a46      	ldr	r6, [r0, #36]	; 0x24
   3b54c:	4604      	mov	r4, r0
   3b54e:	460d      	mov	r5, r1
   3b550:	b976      	cbnz	r6, 3b570 <_Balloc+0x28>
   3b552:	2010      	movs	r0, #16
   3b554:	f7fe fb22 	bl	39b9c <malloc>
   3b558:	4602      	mov	r2, r0
   3b55a:	6260      	str	r0, [r4, #36]	; 0x24
   3b55c:	b920      	cbnz	r0, 3b568 <_Balloc+0x20>
   3b55e:	4b18      	ldr	r3, [pc, #96]	; (3b5c0 <_Balloc+0x78>)
   3b560:	2166      	movs	r1, #102	; 0x66
   3b562:	4818      	ldr	r0, [pc, #96]	; (3b5c4 <_Balloc+0x7c>)
   3b564:	f7fe fa3e 	bl	399e4 <__assert_func>
   3b568:	e9c0 6601 	strd	r6, r6, [r0, #4]
   3b56c:	6006      	str	r6, [r0, #0]
   3b56e:	60c6      	str	r6, [r0, #12]
   3b570:	6a66      	ldr	r6, [r4, #36]	; 0x24
   3b572:	68f3      	ldr	r3, [r6, #12]
   3b574:	b183      	cbz	r3, 3b598 <_Balloc+0x50>
   3b576:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3b578:	68db      	ldr	r3, [r3, #12]
   3b57a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   3b57e:	b9b8      	cbnz	r0, 3b5b0 <_Balloc+0x68>
   3b580:	2101      	movs	r1, #1
   3b582:	4620      	mov	r0, r4
   3b584:	fa01 f605 	lsl.w	r6, r1, r5
   3b588:	1d72      	adds	r2, r6, #5
   3b58a:	0092      	lsls	r2, r2, #2
   3b58c:	f005 ff32 	bl	413f4 <_calloc_r>
   3b590:	b160      	cbz	r0, 3b5ac <_Balloc+0x64>
   3b592:	e9c0 5601 	strd	r5, r6, [r0, #4]
   3b596:	e00e      	b.n	3b5b6 <_Balloc+0x6e>
   3b598:	2221      	movs	r2, #33	; 0x21
   3b59a:	2104      	movs	r1, #4
   3b59c:	4620      	mov	r0, r4
   3b59e:	f005 ff29 	bl	413f4 <_calloc_r>
   3b5a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3b5a4:	60f0      	str	r0, [r6, #12]
   3b5a6:	68db      	ldr	r3, [r3, #12]
   3b5a8:	2b00      	cmp	r3, #0
   3b5aa:	d1e4      	bne.n	3b576 <_Balloc+0x2e>
   3b5ac:	2000      	movs	r0, #0
   3b5ae:	bd70      	pop	{r4, r5, r6, pc}
   3b5b0:	6802      	ldr	r2, [r0, #0]
   3b5b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   3b5b6:	2300      	movs	r3, #0
   3b5b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
   3b5bc:	e7f7      	b.n	3b5ae <_Balloc+0x66>
   3b5be:	bf00      	nop
   3b5c0:	0004bddc 	.word	0x0004bddc
   3b5c4:	0004befe 	.word	0x0004befe

0003b5c8 <_Bfree>:
   3b5c8:	b570      	push	{r4, r5, r6, lr}
   3b5ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
   3b5cc:	4605      	mov	r5, r0
   3b5ce:	460c      	mov	r4, r1
   3b5d0:	b976      	cbnz	r6, 3b5f0 <_Bfree+0x28>
   3b5d2:	2010      	movs	r0, #16
   3b5d4:	f7fe fae2 	bl	39b9c <malloc>
   3b5d8:	4602      	mov	r2, r0
   3b5da:	6268      	str	r0, [r5, #36]	; 0x24
   3b5dc:	b920      	cbnz	r0, 3b5e8 <_Bfree+0x20>
   3b5de:	4b09      	ldr	r3, [pc, #36]	; (3b604 <_Bfree+0x3c>)
   3b5e0:	218a      	movs	r1, #138	; 0x8a
   3b5e2:	4809      	ldr	r0, [pc, #36]	; (3b608 <_Bfree+0x40>)
   3b5e4:	f7fe f9fe 	bl	399e4 <__assert_func>
   3b5e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
   3b5ec:	6006      	str	r6, [r0, #0]
   3b5ee:	60c6      	str	r6, [r0, #12]
   3b5f0:	b13c      	cbz	r4, 3b602 <_Bfree+0x3a>
   3b5f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   3b5f4:	6862      	ldr	r2, [r4, #4]
   3b5f6:	68db      	ldr	r3, [r3, #12]
   3b5f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   3b5fc:	6021      	str	r1, [r4, #0]
   3b5fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   3b602:	bd70      	pop	{r4, r5, r6, pc}
   3b604:	0004bddc 	.word	0x0004bddc
   3b608:	0004befe 	.word	0x0004befe

0003b60c <__multadd>:
   3b60c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3b610:	f101 0c14 	add.w	ip, r1, #20
   3b614:	4607      	mov	r7, r0
   3b616:	460c      	mov	r4, r1
   3b618:	461e      	mov	r6, r3
   3b61a:	690d      	ldr	r5, [r1, #16]
   3b61c:	2000      	movs	r0, #0
   3b61e:	f8dc 3000 	ldr.w	r3, [ip]
   3b622:	3001      	adds	r0, #1
   3b624:	b299      	uxth	r1, r3
   3b626:	4285      	cmp	r5, r0
   3b628:	fb02 6101 	mla	r1, r2, r1, r6
   3b62c:	ea4f 4613 	mov.w	r6, r3, lsr #16
   3b630:	ea4f 4311 	mov.w	r3, r1, lsr #16
   3b634:	b289      	uxth	r1, r1
   3b636:	fb02 3306 	mla	r3, r2, r6, r3
   3b63a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   3b63e:	ea4f 4613 	mov.w	r6, r3, lsr #16
   3b642:	f84c 1b04 	str.w	r1, [ip], #4
   3b646:	dcea      	bgt.n	3b61e <__multadd+0x12>
   3b648:	b30e      	cbz	r6, 3b68e <__multadd+0x82>
   3b64a:	68a3      	ldr	r3, [r4, #8]
   3b64c:	42ab      	cmp	r3, r5
   3b64e:	dc19      	bgt.n	3b684 <__multadd+0x78>
   3b650:	6861      	ldr	r1, [r4, #4]
   3b652:	4638      	mov	r0, r7
   3b654:	3101      	adds	r1, #1
   3b656:	f7ff ff77 	bl	3b548 <_Balloc>
   3b65a:	4680      	mov	r8, r0
   3b65c:	b928      	cbnz	r0, 3b66a <__multadd+0x5e>
   3b65e:	4602      	mov	r2, r0
   3b660:	4b0c      	ldr	r3, [pc, #48]	; (3b694 <__multadd+0x88>)
   3b662:	21b5      	movs	r1, #181	; 0xb5
   3b664:	480c      	ldr	r0, [pc, #48]	; (3b698 <__multadd+0x8c>)
   3b666:	f7fe f9bd 	bl	399e4 <__assert_func>
   3b66a:	6922      	ldr	r2, [r4, #16]
   3b66c:	f104 010c 	add.w	r1, r4, #12
   3b670:	300c      	adds	r0, #12
   3b672:	3202      	adds	r2, #2
   3b674:	0092      	lsls	r2, r2, #2
   3b676:	f005 fe95 	bl	413a4 <memcpy>
   3b67a:	4621      	mov	r1, r4
   3b67c:	4644      	mov	r4, r8
   3b67e:	4638      	mov	r0, r7
   3b680:	f7ff ffa2 	bl	3b5c8 <_Bfree>
   3b684:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   3b688:	3501      	adds	r5, #1
   3b68a:	615e      	str	r6, [r3, #20]
   3b68c:	6125      	str	r5, [r4, #16]
   3b68e:	4620      	mov	r0, r4
   3b690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3b694:	0004be67 	.word	0x0004be67
   3b698:	0004befe 	.word	0x0004befe

0003b69c <__s2b>:
   3b69c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3b6a0:	4615      	mov	r5, r2
   3b6a2:	461f      	mov	r7, r3
   3b6a4:	2209      	movs	r2, #9
   3b6a6:	3308      	adds	r3, #8
   3b6a8:	460c      	mov	r4, r1
   3b6aa:	4606      	mov	r6, r0
   3b6ac:	2100      	movs	r1, #0
   3b6ae:	fb93 f3f2 	sdiv	r3, r3, r2
   3b6b2:	2201      	movs	r2, #1
   3b6b4:	429a      	cmp	r2, r3
   3b6b6:	db09      	blt.n	3b6cc <__s2b+0x30>
   3b6b8:	4630      	mov	r0, r6
   3b6ba:	f7ff ff45 	bl	3b548 <_Balloc>
   3b6be:	b940      	cbnz	r0, 3b6d2 <__s2b+0x36>
   3b6c0:	4602      	mov	r2, r0
   3b6c2:	4b19      	ldr	r3, [pc, #100]	; (3b728 <__s2b+0x8c>)
   3b6c4:	21ce      	movs	r1, #206	; 0xce
   3b6c6:	4819      	ldr	r0, [pc, #100]	; (3b72c <__s2b+0x90>)
   3b6c8:	f7fe f98c 	bl	399e4 <__assert_func>
   3b6cc:	0052      	lsls	r2, r2, #1
   3b6ce:	3101      	adds	r1, #1
   3b6d0:	e7f0      	b.n	3b6b4 <__s2b+0x18>
   3b6d2:	9b08      	ldr	r3, [sp, #32]
   3b6d4:	2d09      	cmp	r5, #9
   3b6d6:	6143      	str	r3, [r0, #20]
   3b6d8:	f04f 0301 	mov.w	r3, #1
   3b6dc:	6103      	str	r3, [r0, #16]
   3b6de:	dd16      	ble.n	3b70e <__s2b+0x72>
   3b6e0:	f104 0909 	add.w	r9, r4, #9
   3b6e4:	442c      	add	r4, r5
   3b6e6:	46c8      	mov	r8, r9
   3b6e8:	f818 3b01 	ldrb.w	r3, [r8], #1
   3b6ec:	4601      	mov	r1, r0
   3b6ee:	220a      	movs	r2, #10
   3b6f0:	4630      	mov	r0, r6
   3b6f2:	3b30      	subs	r3, #48	; 0x30
   3b6f4:	f7ff ff8a 	bl	3b60c <__multadd>
   3b6f8:	45a0      	cmp	r8, r4
   3b6fa:	d1f5      	bne.n	3b6e8 <__s2b+0x4c>
   3b6fc:	f1a5 0408 	sub.w	r4, r5, #8
   3b700:	444c      	add	r4, r9
   3b702:	1b2d      	subs	r5, r5, r4
   3b704:	1963      	adds	r3, r4, r5
   3b706:	42bb      	cmp	r3, r7
   3b708:	db04      	blt.n	3b714 <__s2b+0x78>
   3b70a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3b70e:	340a      	adds	r4, #10
   3b710:	2509      	movs	r5, #9
   3b712:	e7f6      	b.n	3b702 <__s2b+0x66>
   3b714:	f814 3b01 	ldrb.w	r3, [r4], #1
   3b718:	4601      	mov	r1, r0
   3b71a:	220a      	movs	r2, #10
   3b71c:	4630      	mov	r0, r6
   3b71e:	3b30      	subs	r3, #48	; 0x30
   3b720:	f7ff ff74 	bl	3b60c <__multadd>
   3b724:	e7ee      	b.n	3b704 <__s2b+0x68>
   3b726:	bf00      	nop
   3b728:	0004be67 	.word	0x0004be67
   3b72c:	0004befe 	.word	0x0004befe

0003b730 <__i2b>:
   3b730:	b510      	push	{r4, lr}
   3b732:	460c      	mov	r4, r1
   3b734:	2101      	movs	r1, #1
   3b736:	f7ff ff07 	bl	3b548 <_Balloc>
   3b73a:	4602      	mov	r2, r0
   3b73c:	b928      	cbnz	r0, 3b74a <__i2b+0x1a>
   3b73e:	4b05      	ldr	r3, [pc, #20]	; (3b754 <__i2b+0x24>)
   3b740:	f44f 71a0 	mov.w	r1, #320	; 0x140
   3b744:	4804      	ldr	r0, [pc, #16]	; (3b758 <__i2b+0x28>)
   3b746:	f7fe f94d 	bl	399e4 <__assert_func>
   3b74a:	2301      	movs	r3, #1
   3b74c:	6144      	str	r4, [r0, #20]
   3b74e:	6103      	str	r3, [r0, #16]
   3b750:	bd10      	pop	{r4, pc}
   3b752:	bf00      	nop
   3b754:	0004be67 	.word	0x0004be67
   3b758:	0004befe 	.word	0x0004befe

0003b75c <__multiply>:
   3b75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b760:	4691      	mov	r9, r2
   3b762:	690a      	ldr	r2, [r1, #16]
   3b764:	460c      	mov	r4, r1
   3b766:	b085      	sub	sp, #20
   3b768:	f8d9 3010 	ldr.w	r3, [r9, #16]
   3b76c:	429a      	cmp	r2, r3
   3b76e:	bfbe      	ittt	lt
   3b770:	460b      	movlt	r3, r1
   3b772:	464c      	movlt	r4, r9
   3b774:	4699      	movlt	r9, r3
   3b776:	6927      	ldr	r7, [r4, #16]
   3b778:	68a3      	ldr	r3, [r4, #8]
   3b77a:	f8d9 a010 	ldr.w	sl, [r9, #16]
   3b77e:	6861      	ldr	r1, [r4, #4]
   3b780:	eb07 060a 	add.w	r6, r7, sl
   3b784:	42b3      	cmp	r3, r6
   3b786:	bfb8      	it	lt
   3b788:	3101      	addlt	r1, #1
   3b78a:	f7ff fedd 	bl	3b548 <_Balloc>
   3b78e:	b930      	cbnz	r0, 3b79e <__multiply+0x42>
   3b790:	4602      	mov	r2, r0
   3b792:	4b44      	ldr	r3, [pc, #272]	; (3b8a4 <__multiply+0x148>)
   3b794:	f240 115d 	movw	r1, #349	; 0x15d
   3b798:	4843      	ldr	r0, [pc, #268]	; (3b8a8 <__multiply+0x14c>)
   3b79a:	f7fe f923 	bl	399e4 <__assert_func>
   3b79e:	f100 0514 	add.w	r5, r0, #20
   3b7a2:	2200      	movs	r2, #0
   3b7a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   3b7a8:	462b      	mov	r3, r5
   3b7aa:	4543      	cmp	r3, r8
   3b7ac:	d321      	bcc.n	3b7f2 <__multiply+0x96>
   3b7ae:	f104 0314 	add.w	r3, r4, #20
   3b7b2:	f104 0115 	add.w	r1, r4, #21
   3b7b6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   3b7ba:	f109 0314 	add.w	r3, r9, #20
   3b7be:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   3b7c2:	9202      	str	r2, [sp, #8]
   3b7c4:	1b3a      	subs	r2, r7, r4
   3b7c6:	3a15      	subs	r2, #21
   3b7c8:	f022 0203 	bic.w	r2, r2, #3
   3b7cc:	3204      	adds	r2, #4
   3b7ce:	428f      	cmp	r7, r1
   3b7d0:	bf38      	it	cc
   3b7d2:	2204      	movcc	r2, #4
   3b7d4:	9201      	str	r2, [sp, #4]
   3b7d6:	9a02      	ldr	r2, [sp, #8]
   3b7d8:	9303      	str	r3, [sp, #12]
   3b7da:	429a      	cmp	r2, r3
   3b7dc:	d80c      	bhi.n	3b7f8 <__multiply+0x9c>
   3b7de:	2e00      	cmp	r6, #0
   3b7e0:	dd03      	ble.n	3b7ea <__multiply+0x8e>
   3b7e2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   3b7e6:	2b00      	cmp	r3, #0
   3b7e8:	d05a      	beq.n	3b8a0 <__multiply+0x144>
   3b7ea:	6106      	str	r6, [r0, #16]
   3b7ec:	b005      	add	sp, #20
   3b7ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b7f2:	f843 2b04 	str.w	r2, [r3], #4
   3b7f6:	e7d8      	b.n	3b7aa <__multiply+0x4e>
   3b7f8:	f8b3 a000 	ldrh.w	sl, [r3]
   3b7fc:	f1ba 0f00 	cmp.w	sl, #0
   3b800:	d024      	beq.n	3b84c <__multiply+0xf0>
   3b802:	f104 0e14 	add.w	lr, r4, #20
   3b806:	46a9      	mov	r9, r5
   3b808:	f04f 0c00 	mov.w	ip, #0
   3b80c:	f85e 2b04 	ldr.w	r2, [lr], #4
   3b810:	f8d9 1000 	ldr.w	r1, [r9]
   3b814:	fa1f fb82 	uxth.w	fp, r2
   3b818:	4577      	cmp	r7, lr
   3b81a:	b289      	uxth	r1, r1
   3b81c:	fb0a 110b 	mla	r1, sl, fp, r1
   3b820:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   3b824:	f8d9 2000 	ldr.w	r2, [r9]
   3b828:	4461      	add	r1, ip
   3b82a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   3b82e:	fb0a c20b 	mla	r2, sl, fp, ip
   3b832:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   3b836:	b289      	uxth	r1, r1
   3b838:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   3b83c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   3b840:	f849 1b04 	str.w	r1, [r9], #4
   3b844:	d8e2      	bhi.n	3b80c <__multiply+0xb0>
   3b846:	9a01      	ldr	r2, [sp, #4]
   3b848:	f845 c002 	str.w	ip, [r5, r2]
   3b84c:	9a03      	ldr	r2, [sp, #12]
   3b84e:	3304      	adds	r3, #4
   3b850:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   3b854:	f1b9 0f00 	cmp.w	r9, #0
   3b858:	d020      	beq.n	3b89c <__multiply+0x140>
   3b85a:	6829      	ldr	r1, [r5, #0]
   3b85c:	f104 0c14 	add.w	ip, r4, #20
   3b860:	46ae      	mov	lr, r5
   3b862:	f04f 0a00 	mov.w	sl, #0
   3b866:	f8bc b000 	ldrh.w	fp, [ip]
   3b86a:	b289      	uxth	r1, r1
   3b86c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   3b870:	fb09 220b 	mla	r2, r9, fp, r2
   3b874:	4492      	add	sl, r2
   3b876:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   3b87a:	f84e 1b04 	str.w	r1, [lr], #4
   3b87e:	f85c 2b04 	ldr.w	r2, [ip], #4
   3b882:	f8be 1000 	ldrh.w	r1, [lr]
   3b886:	0c12      	lsrs	r2, r2, #16
   3b888:	4567      	cmp	r7, ip
   3b88a:	fb09 1102 	mla	r1, r9, r2, r1
   3b88e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   3b892:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   3b896:	d8e6      	bhi.n	3b866 <__multiply+0x10a>
   3b898:	9a01      	ldr	r2, [sp, #4]
   3b89a:	50a9      	str	r1, [r5, r2]
   3b89c:	3504      	adds	r5, #4
   3b89e:	e79a      	b.n	3b7d6 <__multiply+0x7a>
   3b8a0:	3e01      	subs	r6, #1
   3b8a2:	e79c      	b.n	3b7de <__multiply+0x82>
   3b8a4:	0004be67 	.word	0x0004be67
   3b8a8:	0004befe 	.word	0x0004befe

0003b8ac <__pow5mult>:
   3b8ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3b8b0:	4615      	mov	r5, r2
   3b8b2:	f012 0203 	ands.w	r2, r2, #3
   3b8b6:	4606      	mov	r6, r0
   3b8b8:	460f      	mov	r7, r1
   3b8ba:	d007      	beq.n	3b8cc <__pow5mult+0x20>
   3b8bc:	3a01      	subs	r2, #1
   3b8be:	4c25      	ldr	r4, [pc, #148]	; (3b954 <__pow5mult+0xa8>)
   3b8c0:	2300      	movs	r3, #0
   3b8c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   3b8c6:	f7ff fea1 	bl	3b60c <__multadd>
   3b8ca:	4607      	mov	r7, r0
   3b8cc:	10ad      	asrs	r5, r5, #2
   3b8ce:	d03d      	beq.n	3b94c <__pow5mult+0xa0>
   3b8d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
   3b8d2:	b97c      	cbnz	r4, 3b8f4 <__pow5mult+0x48>
   3b8d4:	2010      	movs	r0, #16
   3b8d6:	f7fe f961 	bl	39b9c <malloc>
   3b8da:	4602      	mov	r2, r0
   3b8dc:	6270      	str	r0, [r6, #36]	; 0x24
   3b8de:	b928      	cbnz	r0, 3b8ec <__pow5mult+0x40>
   3b8e0:	4b1d      	ldr	r3, [pc, #116]	; (3b958 <__pow5mult+0xac>)
   3b8e2:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   3b8e6:	481d      	ldr	r0, [pc, #116]	; (3b95c <__pow5mult+0xb0>)
   3b8e8:	f7fe f87c 	bl	399e4 <__assert_func>
   3b8ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
   3b8f0:	6004      	str	r4, [r0, #0]
   3b8f2:	60c4      	str	r4, [r0, #12]
   3b8f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   3b8f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
   3b8fc:	b94c      	cbnz	r4, 3b912 <__pow5mult+0x66>
   3b8fe:	f240 2171 	movw	r1, #625	; 0x271
   3b902:	4630      	mov	r0, r6
   3b904:	f7ff ff14 	bl	3b730 <__i2b>
   3b908:	2300      	movs	r3, #0
   3b90a:	4604      	mov	r4, r0
   3b90c:	f8c8 0008 	str.w	r0, [r8, #8]
   3b910:	6003      	str	r3, [r0, #0]
   3b912:	f04f 0900 	mov.w	r9, #0
   3b916:	07eb      	lsls	r3, r5, #31
   3b918:	d50a      	bpl.n	3b930 <__pow5mult+0x84>
   3b91a:	4639      	mov	r1, r7
   3b91c:	4622      	mov	r2, r4
   3b91e:	4630      	mov	r0, r6
   3b920:	f7ff ff1c 	bl	3b75c <__multiply>
   3b924:	4680      	mov	r8, r0
   3b926:	4639      	mov	r1, r7
   3b928:	4630      	mov	r0, r6
   3b92a:	4647      	mov	r7, r8
   3b92c:	f7ff fe4c 	bl	3b5c8 <_Bfree>
   3b930:	106d      	asrs	r5, r5, #1
   3b932:	d00b      	beq.n	3b94c <__pow5mult+0xa0>
   3b934:	6820      	ldr	r0, [r4, #0]
   3b936:	b938      	cbnz	r0, 3b948 <__pow5mult+0x9c>
   3b938:	4622      	mov	r2, r4
   3b93a:	4621      	mov	r1, r4
   3b93c:	4630      	mov	r0, r6
   3b93e:	f7ff ff0d 	bl	3b75c <__multiply>
   3b942:	6020      	str	r0, [r4, #0]
   3b944:	f8c0 9000 	str.w	r9, [r0]
   3b948:	4604      	mov	r4, r0
   3b94a:	e7e4      	b.n	3b916 <__pow5mult+0x6a>
   3b94c:	4638      	mov	r0, r7
   3b94e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3b952:	bf00      	nop
   3b954:	00043448 	.word	0x00043448
   3b958:	0004bddc 	.word	0x0004bddc
   3b95c:	0004befe 	.word	0x0004befe

0003b960 <__lshift>:
   3b960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3b964:	460c      	mov	r4, r1
   3b966:	4607      	mov	r7, r0
   3b968:	4691      	mov	r9, r2
   3b96a:	ea4f 1a62 	mov.w	sl, r2, asr #5
   3b96e:	6923      	ldr	r3, [r4, #16]
   3b970:	6849      	ldr	r1, [r1, #4]
   3b972:	eb03 1862 	add.w	r8, r3, r2, asr #5
   3b976:	68a3      	ldr	r3, [r4, #8]
   3b978:	f108 0601 	add.w	r6, r8, #1
   3b97c:	42b3      	cmp	r3, r6
   3b97e:	db0b      	blt.n	3b998 <__lshift+0x38>
   3b980:	4638      	mov	r0, r7
   3b982:	f7ff fde1 	bl	3b548 <_Balloc>
   3b986:	4605      	mov	r5, r0
   3b988:	b948      	cbnz	r0, 3b99e <__lshift+0x3e>
   3b98a:	4602      	mov	r2, r0
   3b98c:	4b2a      	ldr	r3, [pc, #168]	; (3ba38 <__lshift+0xd8>)
   3b98e:	f240 11d9 	movw	r1, #473	; 0x1d9
   3b992:	482a      	ldr	r0, [pc, #168]	; (3ba3c <__lshift+0xdc>)
   3b994:	f7fe f826 	bl	399e4 <__assert_func>
   3b998:	3101      	adds	r1, #1
   3b99a:	005b      	lsls	r3, r3, #1
   3b99c:	e7ee      	b.n	3b97c <__lshift+0x1c>
   3b99e:	2300      	movs	r3, #0
   3b9a0:	f100 0114 	add.w	r1, r0, #20
   3b9a4:	f100 0210 	add.w	r2, r0, #16
   3b9a8:	4618      	mov	r0, r3
   3b9aa:	4553      	cmp	r3, sl
   3b9ac:	db37      	blt.n	3ba1e <__lshift+0xbe>
   3b9ae:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   3b9b2:	f104 0314 	add.w	r3, r4, #20
   3b9b6:	6920      	ldr	r0, [r4, #16]
   3b9b8:	f019 091f 	ands.w	r9, r9, #31
   3b9bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   3b9c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   3b9c4:	d02f      	beq.n	3ba26 <__lshift+0xc6>
   3b9c6:	f1c9 0e20 	rsb	lr, r9, #32
   3b9ca:	468a      	mov	sl, r1
   3b9cc:	f04f 0c00 	mov.w	ip, #0
   3b9d0:	681a      	ldr	r2, [r3, #0]
   3b9d2:	fa02 f209 	lsl.w	r2, r2, r9
   3b9d6:	ea42 020c 	orr.w	r2, r2, ip
   3b9da:	f84a 2b04 	str.w	r2, [sl], #4
   3b9de:	f853 2b04 	ldr.w	r2, [r3], #4
   3b9e2:	4298      	cmp	r0, r3
   3b9e4:	fa22 fc0e 	lsr.w	ip, r2, lr
   3b9e8:	d8f2      	bhi.n	3b9d0 <__lshift+0x70>
   3b9ea:	1b03      	subs	r3, r0, r4
   3b9ec:	f104 0215 	add.w	r2, r4, #21
   3b9f0:	3b15      	subs	r3, #21
   3b9f2:	f023 0303 	bic.w	r3, r3, #3
   3b9f6:	3304      	adds	r3, #4
   3b9f8:	4290      	cmp	r0, r2
   3b9fa:	bf38      	it	cc
   3b9fc:	2304      	movcc	r3, #4
   3b9fe:	f841 c003 	str.w	ip, [r1, r3]
   3ba02:	f1bc 0f00 	cmp.w	ip, #0
   3ba06:	d001      	beq.n	3ba0c <__lshift+0xac>
   3ba08:	f108 0602 	add.w	r6, r8, #2
   3ba0c:	3e01      	subs	r6, #1
   3ba0e:	4638      	mov	r0, r7
   3ba10:	4621      	mov	r1, r4
   3ba12:	612e      	str	r6, [r5, #16]
   3ba14:	f7ff fdd8 	bl	3b5c8 <_Bfree>
   3ba18:	4628      	mov	r0, r5
   3ba1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3ba1e:	3301      	adds	r3, #1
   3ba20:	f842 0f04 	str.w	r0, [r2, #4]!
   3ba24:	e7c1      	b.n	3b9aa <__lshift+0x4a>
   3ba26:	3904      	subs	r1, #4
   3ba28:	f853 2b04 	ldr.w	r2, [r3], #4
   3ba2c:	4298      	cmp	r0, r3
   3ba2e:	f841 2f04 	str.w	r2, [r1, #4]!
   3ba32:	d8f9      	bhi.n	3ba28 <__lshift+0xc8>
   3ba34:	e7ea      	b.n	3ba0c <__lshift+0xac>
   3ba36:	bf00      	nop
   3ba38:	0004be67 	.word	0x0004be67
   3ba3c:	0004befe 	.word	0x0004befe

0003ba40 <__mdiff>:
   3ba40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ba44:	460c      	mov	r4, r1
   3ba46:	4606      	mov	r6, r0
   3ba48:	4611      	mov	r1, r2
   3ba4a:	4692      	mov	sl, r2
   3ba4c:	4620      	mov	r0, r4
   3ba4e:	f006 f9dc 	bl	41e0a <__mcmp>
   3ba52:	1e05      	subs	r5, r0, #0
   3ba54:	d110      	bne.n	3ba78 <__mdiff+0x38>
   3ba56:	4629      	mov	r1, r5
   3ba58:	4630      	mov	r0, r6
   3ba5a:	f7ff fd75 	bl	3b548 <_Balloc>
   3ba5e:	b930      	cbnz	r0, 3ba6e <__mdiff+0x2e>
   3ba60:	4b3d      	ldr	r3, [pc, #244]	; (3bb58 <__mdiff+0x118>)
   3ba62:	4602      	mov	r2, r0
   3ba64:	f240 2132 	movw	r1, #562	; 0x232
   3ba68:	483c      	ldr	r0, [pc, #240]	; (3bb5c <__mdiff+0x11c>)
   3ba6a:	f7fd ffbb 	bl	399e4 <__assert_func>
   3ba6e:	2301      	movs	r3, #1
   3ba70:	e9c0 3504 	strd	r3, r5, [r0, #16]
   3ba74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ba78:	bfa4      	itt	ge
   3ba7a:	4653      	movge	r3, sl
   3ba7c:	46a2      	movge	sl, r4
   3ba7e:	4630      	mov	r0, r6
   3ba80:	bfa8      	it	ge
   3ba82:	2500      	movge	r5, #0
   3ba84:	f8da 1004 	ldr.w	r1, [sl, #4]
   3ba88:	bfac      	ite	ge
   3ba8a:	461c      	movge	r4, r3
   3ba8c:	2501      	movlt	r5, #1
   3ba8e:	f7ff fd5b 	bl	3b548 <_Balloc>
   3ba92:	b920      	cbnz	r0, 3ba9e <__mdiff+0x5e>
   3ba94:	4b30      	ldr	r3, [pc, #192]	; (3bb58 <__mdiff+0x118>)
   3ba96:	4602      	mov	r2, r0
   3ba98:	f44f 7110 	mov.w	r1, #576	; 0x240
   3ba9c:	e7e4      	b.n	3ba68 <__mdiff+0x28>
   3ba9e:	f8da 7010 	ldr.w	r7, [sl, #16]
   3baa2:	f104 0914 	add.w	r9, r4, #20
   3baa6:	6926      	ldr	r6, [r4, #16]
   3baa8:	f100 0814 	add.w	r8, r0, #20
   3baac:	60c5      	str	r5, [r0, #12]
   3baae:	f10a 0514 	add.w	r5, sl, #20
   3bab2:	f10a 0210 	add.w	r2, sl, #16
   3bab6:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   3baba:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
   3babe:	46c2      	mov	sl, r8
   3bac0:	f04f 0c00 	mov.w	ip, #0
   3bac4:	f852 bf04 	ldr.w	fp, [r2, #4]!
   3bac8:	f859 3b04 	ldr.w	r3, [r9], #4
   3bacc:	fa1f f18b 	uxth.w	r1, fp
   3bad0:	454e      	cmp	r6, r9
   3bad2:	448c      	add	ip, r1
   3bad4:	b299      	uxth	r1, r3
   3bad6:	ea4f 4313 	mov.w	r3, r3, lsr #16
   3bada:	ebac 0101 	sub.w	r1, ip, r1
   3bade:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   3bae2:	eb03 4321 	add.w	r3, r3, r1, asr #16
   3bae6:	b289      	uxth	r1, r1
   3bae8:	ea4f 4c23 	mov.w	ip, r3, asr #16
   3baec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   3baf0:	f84a 3b04 	str.w	r3, [sl], #4
   3baf4:	d8e6      	bhi.n	3bac4 <__mdiff+0x84>
   3baf6:	1b33      	subs	r3, r6, r4
   3baf8:	3415      	adds	r4, #21
   3bafa:	3b15      	subs	r3, #21
   3bafc:	f023 0303 	bic.w	r3, r3, #3
   3bb00:	3304      	adds	r3, #4
   3bb02:	42a6      	cmp	r6, r4
   3bb04:	bf38      	it	cc
   3bb06:	2304      	movcc	r3, #4
   3bb08:	441d      	add	r5, r3
   3bb0a:	4443      	add	r3, r8
   3bb0c:	462c      	mov	r4, r5
   3bb0e:	461e      	mov	r6, r3
   3bb10:	4574      	cmp	r4, lr
   3bb12:	d30e      	bcc.n	3bb32 <__mdiff+0xf2>
   3bb14:	f10e 0203 	add.w	r2, lr, #3
   3bb18:	1b52      	subs	r2, r2, r5
   3bb1a:	3d03      	subs	r5, #3
   3bb1c:	f022 0203 	bic.w	r2, r2, #3
   3bb20:	45ae      	cmp	lr, r5
   3bb22:	bf38      	it	cc
   3bb24:	2200      	movcc	r2, #0
   3bb26:	441a      	add	r2, r3
   3bb28:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   3bb2c:	b18b      	cbz	r3, 3bb52 <__mdiff+0x112>
   3bb2e:	6107      	str	r7, [r0, #16]
   3bb30:	e7a0      	b.n	3ba74 <__mdiff+0x34>
   3bb32:	f854 8b04 	ldr.w	r8, [r4], #4
   3bb36:	fa1f f288 	uxth.w	r2, r8
   3bb3a:	4462      	add	r2, ip
   3bb3c:	1411      	asrs	r1, r2, #16
   3bb3e:	b292      	uxth	r2, r2
   3bb40:	eb01 4118 	add.w	r1, r1, r8, lsr #16
   3bb44:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   3bb48:	ea4f 4c21 	mov.w	ip, r1, asr #16
   3bb4c:	f846 2b04 	str.w	r2, [r6], #4
   3bb50:	e7de      	b.n	3bb10 <__mdiff+0xd0>
   3bb52:	3f01      	subs	r7, #1
   3bb54:	e7e8      	b.n	3bb28 <__mdiff+0xe8>
   3bb56:	bf00      	nop
   3bb58:	0004be67 	.word	0x0004be67
   3bb5c:	0004befe 	.word	0x0004befe

0003bb60 <__ulp>:
   3bb60:	4b10      	ldr	r3, [pc, #64]	; (3bba4 <__ulp+0x44>)
   3bb62:	400b      	ands	r3, r1
   3bb64:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
   3bb68:	2b00      	cmp	r3, #0
   3bb6a:	dd02      	ble.n	3bb72 <__ulp+0x12>
   3bb6c:	2000      	movs	r0, #0
   3bb6e:	4619      	mov	r1, r3
   3bb70:	4770      	bx	lr
   3bb72:	425b      	negs	r3, r3
   3bb74:	2000      	movs	r0, #0
   3bb76:	2100      	movs	r1, #0
   3bb78:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
   3bb7c:	ea4f 5223 	mov.w	r2, r3, asr #20
   3bb80:	da04      	bge.n	3bb8c <__ulp+0x2c>
   3bb82:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   3bb86:	fa43 f102 	asr.w	r1, r3, r2
   3bb8a:	4770      	bx	lr
   3bb8c:	f1a2 0314 	sub.w	r3, r2, #20
   3bb90:	2b1e      	cmp	r3, #30
   3bb92:	bfd6      	itet	le
   3bb94:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
   3bb98:	2301      	movgt	r3, #1
   3bb9a:	fa22 f303 	lsrle.w	r3, r2, r3
   3bb9e:	4618      	mov	r0, r3
   3bba0:	4770      	bx	lr
   3bba2:	bf00      	nop
   3bba4:	7ff00000 	.word	0x7ff00000

0003bba8 <__b2d>:
   3bba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3bbac:	6906      	ldr	r6, [r0, #16]
   3bbae:	f100 0814 	add.w	r8, r0, #20
   3bbb2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
   3bbb6:	f856 2c04 	ldr.w	r2, [r6, #-4]
   3bbba:	1f37      	subs	r7, r6, #4
   3bbbc:	4610      	mov	r0, r2
   3bbbe:	f006 f8d5 	bl	41d6c <__hi0bits>
   3bbc2:	f1c0 0320 	rsb	r3, r0, #32
   3bbc6:	280a      	cmp	r0, #10
   3bbc8:	f8df c07c 	ldr.w	ip, [pc, #124]	; 3bc48 <__b2d+0xa0>
   3bbcc:	600b      	str	r3, [r1, #0]
   3bbce:	dc16      	bgt.n	3bbfe <__b2d+0x56>
   3bbd0:	f1c0 0e0b 	rsb	lr, r0, #11
   3bbd4:	45b8      	cmp	r8, r7
   3bbd6:	fa22 f30e 	lsr.w	r3, r2, lr
   3bbda:	bf34      	ite	cc
   3bbdc:	f856 1c08 	ldrcc.w	r1, [r6, #-8]
   3bbe0:	2100      	movcs	r1, #0
   3bbe2:	ea43 050c 	orr.w	r5, r3, ip
   3bbe6:	f100 0315 	add.w	r3, r0, #21
   3bbea:	fa21 f10e 	lsr.w	r1, r1, lr
   3bbee:	fa02 f303 	lsl.w	r3, r2, r3
   3bbf2:	ea43 0401 	orr.w	r4, r3, r1
   3bbf6:	4620      	mov	r0, r4
   3bbf8:	4629      	mov	r1, r5
   3bbfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3bbfe:	45b8      	cmp	r8, r7
   3bc00:	bf3a      	itte	cc
   3bc02:	f1a6 0708 	subcc.w	r7, r6, #8
   3bc06:	f856 1c08 	ldrcc.w	r1, [r6, #-8]
   3bc0a:	2100      	movcs	r1, #0
   3bc0c:	f1b0 030b 	subs.w	r3, r0, #11
   3bc10:	d016      	beq.n	3bc40 <__b2d+0x98>
   3bc12:	f1c3 0620 	rsb	r6, r3, #32
   3bc16:	fa02 f003 	lsl.w	r0, r2, r3
   3bc1a:	4547      	cmp	r7, r8
   3bc1c:	fa21 f206 	lsr.w	r2, r1, r6
   3bc20:	ea40 0002 	orr.w	r0, r0, r2
   3bc24:	bf8c      	ite	hi
   3bc26:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
   3bc2a:	2200      	movls	r2, #0
   3bc2c:	f040 557f 	orr.w	r5, r0, #1069547520	; 0x3fc00000
   3bc30:	fa01 f003 	lsl.w	r0, r1, r3
   3bc34:	40f2      	lsrs	r2, r6
   3bc36:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   3bc3a:	ea40 0402 	orr.w	r4, r0, r2
   3bc3e:	e7da      	b.n	3bbf6 <__b2d+0x4e>
   3bc40:	ea42 050c 	orr.w	r5, r2, ip
   3bc44:	460c      	mov	r4, r1
   3bc46:	e7d6      	b.n	3bbf6 <__b2d+0x4e>
   3bc48:	3ff00000 	.word	0x3ff00000

0003bc4c <__d2b>:
   3bc4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3bc50:	2101      	movs	r1, #1
   3bc52:	4690      	mov	r8, r2
   3bc54:	4699      	mov	r9, r3
   3bc56:	e9dd 760a 	ldrd	r7, r6, [sp, #40]	; 0x28
   3bc5a:	f7ff fc75 	bl	3b548 <_Balloc>
   3bc5e:	4604      	mov	r4, r0
   3bc60:	b930      	cbnz	r0, 3bc70 <__d2b+0x24>
   3bc62:	4602      	mov	r2, r0
   3bc64:	4b24      	ldr	r3, [pc, #144]	; (3bcf8 <__d2b+0xac>)
   3bc66:	f240 310a 	movw	r1, #778	; 0x30a
   3bc6a:	4824      	ldr	r0, [pc, #144]	; (3bcfc <__d2b+0xb0>)
   3bc6c:	f7fd feba 	bl	399e4 <__assert_func>
   3bc70:	f3c9 550a 	ubfx	r5, r9, #20, #11
   3bc74:	f3c9 0313 	ubfx	r3, r9, #0, #20
   3bc78:	bb2d      	cbnz	r5, 3bcc6 <__d2b+0x7a>
   3bc7a:	f1b8 0200 	subs.w	r2, r8, #0
   3bc7e:	9301      	str	r3, [sp, #4]
   3bc80:	d026      	beq.n	3bcd0 <__d2b+0x84>
   3bc82:	4668      	mov	r0, sp
   3bc84:	9200      	str	r2, [sp, #0]
   3bc86:	f006 f891 	bl	41dac <__lo0bits>
   3bc8a:	9900      	ldr	r1, [sp, #0]
   3bc8c:	b1f0      	cbz	r0, 3bccc <__d2b+0x80>
   3bc8e:	9a01      	ldr	r2, [sp, #4]
   3bc90:	f1c0 0320 	rsb	r3, r0, #32
   3bc94:	fa02 f303 	lsl.w	r3, r2, r3
   3bc98:	40c2      	lsrs	r2, r0
   3bc9a:	430b      	orrs	r3, r1
   3bc9c:	9201      	str	r2, [sp, #4]
   3bc9e:	6163      	str	r3, [r4, #20]
   3bca0:	9b01      	ldr	r3, [sp, #4]
   3bca2:	2b00      	cmp	r3, #0
   3bca4:	61a3      	str	r3, [r4, #24]
   3bca6:	bf14      	ite	ne
   3bca8:	2202      	movne	r2, #2
   3bcaa:	2201      	moveq	r2, #1
   3bcac:	6122      	str	r2, [r4, #16]
   3bcae:	b1c5      	cbz	r5, 3bce2 <__d2b+0x96>
   3bcb0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   3bcb4:	4405      	add	r5, r0
   3bcb6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   3bcba:	603d      	str	r5, [r7, #0]
   3bcbc:	6030      	str	r0, [r6, #0]
   3bcbe:	4620      	mov	r0, r4
   3bcc0:	b003      	add	sp, #12
   3bcc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3bcc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   3bcca:	e7d6      	b.n	3bc7a <__d2b+0x2e>
   3bccc:	6161      	str	r1, [r4, #20]
   3bcce:	e7e7      	b.n	3bca0 <__d2b+0x54>
   3bcd0:	a801      	add	r0, sp, #4
   3bcd2:	f006 f86b 	bl	41dac <__lo0bits>
   3bcd6:	9b01      	ldr	r3, [sp, #4]
   3bcd8:	2201      	movs	r2, #1
   3bcda:	3020      	adds	r0, #32
   3bcdc:	6163      	str	r3, [r4, #20]
   3bcde:	6122      	str	r2, [r4, #16]
   3bce0:	e7e5      	b.n	3bcae <__d2b+0x62>
   3bce2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   3bce6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   3bcea:	6038      	str	r0, [r7, #0]
   3bcec:	6918      	ldr	r0, [r3, #16]
   3bcee:	f006 f83d 	bl	41d6c <__hi0bits>
   3bcf2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   3bcf6:	e7e1      	b.n	3bcbc <__d2b+0x70>
   3bcf8:	0004be67 	.word	0x0004be67
   3bcfc:	0004befe 	.word	0x0004befe

0003bd00 <_svfiprintf_r>:
   3bd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bd04:	4698      	mov	r8, r3
   3bd06:	898b      	ldrh	r3, [r1, #12]
   3bd08:	b09d      	sub	sp, #116	; 0x74
   3bd0a:	4607      	mov	r7, r0
   3bd0c:	061b      	lsls	r3, r3, #24
   3bd0e:	460d      	mov	r5, r1
   3bd10:	4614      	mov	r4, r2
   3bd12:	d50e      	bpl.n	3bd32 <_svfiprintf_r+0x32>
   3bd14:	690b      	ldr	r3, [r1, #16]
   3bd16:	b963      	cbnz	r3, 3bd32 <_svfiprintf_r+0x32>
   3bd18:	2140      	movs	r1, #64	; 0x40
   3bd1a:	f7fd ff9b 	bl	39c54 <_malloc_r>
   3bd1e:	6028      	str	r0, [r5, #0]
   3bd20:	6128      	str	r0, [r5, #16]
   3bd22:	b920      	cbnz	r0, 3bd2e <_svfiprintf_r+0x2e>
   3bd24:	230c      	movs	r3, #12
   3bd26:	603b      	str	r3, [r7, #0]
   3bd28:	f04f 30ff 	mov.w	r0, #4294967295
   3bd2c:	e0d1      	b.n	3bed2 <_svfiprintf_r+0x1d2>
   3bd2e:	2340      	movs	r3, #64	; 0x40
   3bd30:	616b      	str	r3, [r5, #20]
   3bd32:	2300      	movs	r3, #0
   3bd34:	f8cd 800c 	str.w	r8, [sp, #12]
   3bd38:	f04f 0901 	mov.w	r9, #1
   3bd3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 3beec <_svfiprintf_r+0x1ec>
   3bd40:	9309      	str	r3, [sp, #36]	; 0x24
   3bd42:	2320      	movs	r3, #32
   3bd44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   3bd48:	2330      	movs	r3, #48	; 0x30
   3bd4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   3bd4e:	4623      	mov	r3, r4
   3bd50:	469a      	mov	sl, r3
   3bd52:	f813 2b01 	ldrb.w	r2, [r3], #1
   3bd56:	b10a      	cbz	r2, 3bd5c <_svfiprintf_r+0x5c>
   3bd58:	2a25      	cmp	r2, #37	; 0x25
   3bd5a:	d1f9      	bne.n	3bd50 <_svfiprintf_r+0x50>
   3bd5c:	ebba 0b04 	subs.w	fp, sl, r4
   3bd60:	d00b      	beq.n	3bd7a <_svfiprintf_r+0x7a>
   3bd62:	465b      	mov	r3, fp
   3bd64:	4622      	mov	r2, r4
   3bd66:	4629      	mov	r1, r5
   3bd68:	4638      	mov	r0, r7
   3bd6a:	f006 f902 	bl	41f72 <__ssputs_r>
   3bd6e:	3001      	adds	r0, #1
   3bd70:	f000 80aa 	beq.w	3bec8 <_svfiprintf_r+0x1c8>
   3bd74:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3bd76:	445a      	add	r2, fp
   3bd78:	9209      	str	r2, [sp, #36]	; 0x24
   3bd7a:	f89a 3000 	ldrb.w	r3, [sl]
   3bd7e:	2b00      	cmp	r3, #0
   3bd80:	f000 80a2 	beq.w	3bec8 <_svfiprintf_r+0x1c8>
   3bd84:	2300      	movs	r3, #0
   3bd86:	f04f 32ff 	mov.w	r2, #4294967295
   3bd8a:	f10a 0a01 	add.w	sl, sl, #1
   3bd8e:	9304      	str	r3, [sp, #16]
   3bd90:	9307      	str	r3, [sp, #28]
   3bd92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   3bd96:	931a      	str	r3, [sp, #104]	; 0x68
   3bd98:	e9cd 2305 	strd	r2, r3, [sp, #20]
   3bd9c:	4654      	mov	r4, sl
   3bd9e:	2205      	movs	r2, #5
   3bda0:	4852      	ldr	r0, [pc, #328]	; (3beec <_svfiprintf_r+0x1ec>)
   3bda2:	f814 1b01 	ldrb.w	r1, [r4], #1
   3bda6:	f005 fadf 	bl	41368 <memchr>
   3bdaa:	9a04      	ldr	r2, [sp, #16]
   3bdac:	b9d8      	cbnz	r0, 3bde6 <_svfiprintf_r+0xe6>
   3bdae:	06d0      	lsls	r0, r2, #27
   3bdb0:	bf44      	itt	mi
   3bdb2:	2320      	movmi	r3, #32
   3bdb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   3bdb8:	0711      	lsls	r1, r2, #28
   3bdba:	bf44      	itt	mi
   3bdbc:	232b      	movmi	r3, #43	; 0x2b
   3bdbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   3bdc2:	f89a 3000 	ldrb.w	r3, [sl]
   3bdc6:	2b2a      	cmp	r3, #42	; 0x2a
   3bdc8:	d015      	beq.n	3bdf6 <_svfiprintf_r+0xf6>
   3bdca:	9a07      	ldr	r2, [sp, #28]
   3bdcc:	4654      	mov	r4, sl
   3bdce:	2000      	movs	r0, #0
   3bdd0:	f04f 0c0a 	mov.w	ip, #10
   3bdd4:	4621      	mov	r1, r4
   3bdd6:	f811 3b01 	ldrb.w	r3, [r1], #1
   3bdda:	3b30      	subs	r3, #48	; 0x30
   3bddc:	2b09      	cmp	r3, #9
   3bdde:	d94e      	bls.n	3be7e <_svfiprintf_r+0x17e>
   3bde0:	b1b0      	cbz	r0, 3be10 <_svfiprintf_r+0x110>
   3bde2:	9207      	str	r2, [sp, #28]
   3bde4:	e014      	b.n	3be10 <_svfiprintf_r+0x110>
   3bde6:	eba0 0308 	sub.w	r3, r0, r8
   3bdea:	46a2      	mov	sl, r4
   3bdec:	fa09 f303 	lsl.w	r3, r9, r3
   3bdf0:	4313      	orrs	r3, r2
   3bdf2:	9304      	str	r3, [sp, #16]
   3bdf4:	e7d2      	b.n	3bd9c <_svfiprintf_r+0x9c>
   3bdf6:	9b03      	ldr	r3, [sp, #12]
   3bdf8:	1d19      	adds	r1, r3, #4
   3bdfa:	681b      	ldr	r3, [r3, #0]
   3bdfc:	2b00      	cmp	r3, #0
   3bdfe:	9103      	str	r1, [sp, #12]
   3be00:	bfbb      	ittet	lt
   3be02:	425b      	neglt	r3, r3
   3be04:	f042 0202 	orrlt.w	r2, r2, #2
   3be08:	9307      	strge	r3, [sp, #28]
   3be0a:	9307      	strlt	r3, [sp, #28]
   3be0c:	bfb8      	it	lt
   3be0e:	9204      	strlt	r2, [sp, #16]
   3be10:	7823      	ldrb	r3, [r4, #0]
   3be12:	2b2e      	cmp	r3, #46	; 0x2e
   3be14:	d10c      	bne.n	3be30 <_svfiprintf_r+0x130>
   3be16:	7863      	ldrb	r3, [r4, #1]
   3be18:	2b2a      	cmp	r3, #42	; 0x2a
   3be1a:	d135      	bne.n	3be88 <_svfiprintf_r+0x188>
   3be1c:	9b03      	ldr	r3, [sp, #12]
   3be1e:	3402      	adds	r4, #2
   3be20:	1d1a      	adds	r2, r3, #4
   3be22:	681b      	ldr	r3, [r3, #0]
   3be24:	2b00      	cmp	r3, #0
   3be26:	9203      	str	r2, [sp, #12]
   3be28:	bfb8      	it	lt
   3be2a:	f04f 33ff 	movlt.w	r3, #4294967295
   3be2e:	9305      	str	r3, [sp, #20]
   3be30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 3befc <_svfiprintf_r+0x1fc>
   3be34:	2203      	movs	r2, #3
   3be36:	7821      	ldrb	r1, [r4, #0]
   3be38:	4650      	mov	r0, sl
   3be3a:	f005 fa95 	bl	41368 <memchr>
   3be3e:	b140      	cbz	r0, 3be52 <_svfiprintf_r+0x152>
   3be40:	2340      	movs	r3, #64	; 0x40
   3be42:	eba0 000a 	sub.w	r0, r0, sl
   3be46:	3401      	adds	r4, #1
   3be48:	fa03 f000 	lsl.w	r0, r3, r0
   3be4c:	9b04      	ldr	r3, [sp, #16]
   3be4e:	4303      	orrs	r3, r0
   3be50:	9304      	str	r3, [sp, #16]
   3be52:	f814 1b01 	ldrb.w	r1, [r4], #1
   3be56:	2206      	movs	r2, #6
   3be58:	4825      	ldr	r0, [pc, #148]	; (3bef0 <_svfiprintf_r+0x1f0>)
   3be5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   3be5e:	f005 fa83 	bl	41368 <memchr>
   3be62:	2800      	cmp	r0, #0
   3be64:	d038      	beq.n	3bed8 <_svfiprintf_r+0x1d8>
   3be66:	4b23      	ldr	r3, [pc, #140]	; (3bef4 <_svfiprintf_r+0x1f4>)
   3be68:	bb1b      	cbnz	r3, 3beb2 <_svfiprintf_r+0x1b2>
   3be6a:	9b03      	ldr	r3, [sp, #12]
   3be6c:	3307      	adds	r3, #7
   3be6e:	f023 0307 	bic.w	r3, r3, #7
   3be72:	3308      	adds	r3, #8
   3be74:	9303      	str	r3, [sp, #12]
   3be76:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3be78:	4433      	add	r3, r6
   3be7a:	9309      	str	r3, [sp, #36]	; 0x24
   3be7c:	e767      	b.n	3bd4e <_svfiprintf_r+0x4e>
   3be7e:	fb0c 3202 	mla	r2, ip, r2, r3
   3be82:	460c      	mov	r4, r1
   3be84:	2001      	movs	r0, #1
   3be86:	e7a5      	b.n	3bdd4 <_svfiprintf_r+0xd4>
   3be88:	2300      	movs	r3, #0
   3be8a:	3401      	adds	r4, #1
   3be8c:	f04f 0c0a 	mov.w	ip, #10
   3be90:	4619      	mov	r1, r3
   3be92:	9305      	str	r3, [sp, #20]
   3be94:	4620      	mov	r0, r4
   3be96:	f810 2b01 	ldrb.w	r2, [r0], #1
   3be9a:	3a30      	subs	r2, #48	; 0x30
   3be9c:	2a09      	cmp	r2, #9
   3be9e:	d903      	bls.n	3bea8 <_svfiprintf_r+0x1a8>
   3bea0:	2b00      	cmp	r3, #0
   3bea2:	d0c5      	beq.n	3be30 <_svfiprintf_r+0x130>
   3bea4:	9105      	str	r1, [sp, #20]
   3bea6:	e7c3      	b.n	3be30 <_svfiprintf_r+0x130>
   3bea8:	fb0c 2101 	mla	r1, ip, r1, r2
   3beac:	4604      	mov	r4, r0
   3beae:	2301      	movs	r3, #1
   3beb0:	e7f0      	b.n	3be94 <_svfiprintf_r+0x194>
   3beb2:	ab03      	add	r3, sp, #12
   3beb4:	462a      	mov	r2, r5
   3beb6:	a904      	add	r1, sp, #16
   3beb8:	4638      	mov	r0, r7
   3beba:	9300      	str	r3, [sp, #0]
   3bebc:	4b0e      	ldr	r3, [pc, #56]	; (3bef8 <_svfiprintf_r+0x1f8>)
   3bebe:	f7fe f853 	bl	39f68 <_printf_float>
   3bec2:	1c42      	adds	r2, r0, #1
   3bec4:	4606      	mov	r6, r0
   3bec6:	d1d6      	bne.n	3be76 <_svfiprintf_r+0x176>
   3bec8:	89ab      	ldrh	r3, [r5, #12]
   3beca:	065b      	lsls	r3, r3, #25
   3becc:	f53f af2c 	bmi.w	3bd28 <_svfiprintf_r+0x28>
   3bed0:	9809      	ldr	r0, [sp, #36]	; 0x24
   3bed2:	b01d      	add	sp, #116	; 0x74
   3bed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bed8:	ab03      	add	r3, sp, #12
   3beda:	462a      	mov	r2, r5
   3bedc:	a904      	add	r1, sp, #16
   3bede:	4638      	mov	r0, r7
   3bee0:	9300      	str	r3, [sp, #0]
   3bee2:	4b05      	ldr	r3, [pc, #20]	; (3bef8 <_svfiprintf_r+0x1f8>)
   3bee4:	f7fe fa78 	bl	3a3d8 <_printf_i>
   3bee8:	e7eb      	b.n	3bec2 <_svfiprintf_r+0x1c2>
   3beea:	bf00      	nop
   3beec:	0004bd8c 	.word	0x0004bd8c
   3bef0:	0004bd96 	.word	0x0004bd96
   3bef4:	00039f69 	.word	0x00039f69
   3bef8:	00041f73 	.word	0x00041f73
   3befc:	0004bd92 	.word	0x0004bd92

0003bf00 <__ssvfiscanf_r>:
   3bf00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3bf04:	460c      	mov	r4, r1
   3bf06:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
   3bf0a:	2100      	movs	r1, #0
   3bf0c:	4606      	mov	r6, r0
   3bf0e:	f10d 0804 	add.w	r8, sp, #4
   3bf12:	4fa8      	ldr	r7, [pc, #672]	; (3c1b4 <__ssvfiscanf_r+0x2b4>)
   3bf14:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 3c1c0 <__ssvfiscanf_r+0x2c0>
   3bf18:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   3bf1c:	9300      	str	r3, [sp, #0]
   3bf1e:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   3bf22:	49a5      	ldr	r1, [pc, #660]	; (3c1b8 <__ssvfiscanf_r+0x2b8>)
   3bf24:	91a0      	str	r1, [sp, #640]	; 0x280
   3bf26:	49a5      	ldr	r1, [pc, #660]	; (3c1bc <__ssvfiscanf_r+0x2bc>)
   3bf28:	91a1      	str	r1, [sp, #644]	; 0x284
   3bf2a:	7813      	ldrb	r3, [r2, #0]
   3bf2c:	2b00      	cmp	r3, #0
   3bf2e:	f000 815e 	beq.w	3c1ee <__ssvfiscanf_r+0x2ee>
   3bf32:	5dd9      	ldrb	r1, [r3, r7]
   3bf34:	1c55      	adds	r5, r2, #1
   3bf36:	f011 0108 	ands.w	r1, r1, #8
   3bf3a:	d019      	beq.n	3bf70 <__ssvfiscanf_r+0x70>
   3bf3c:	6863      	ldr	r3, [r4, #4]
   3bf3e:	2b00      	cmp	r3, #0
   3bf40:	dd0f      	ble.n	3bf62 <__ssvfiscanf_r+0x62>
   3bf42:	6823      	ldr	r3, [r4, #0]
   3bf44:	781a      	ldrb	r2, [r3, #0]
   3bf46:	5cba      	ldrb	r2, [r7, r2]
   3bf48:	0712      	lsls	r2, r2, #28
   3bf4a:	d401      	bmi.n	3bf50 <__ssvfiscanf_r+0x50>
   3bf4c:	462a      	mov	r2, r5
   3bf4e:	e7ec      	b.n	3bf2a <__ssvfiscanf_r+0x2a>
   3bf50:	9a45      	ldr	r2, [sp, #276]	; 0x114
   3bf52:	3301      	adds	r3, #1
   3bf54:	3201      	adds	r2, #1
   3bf56:	6023      	str	r3, [r4, #0]
   3bf58:	9245      	str	r2, [sp, #276]	; 0x114
   3bf5a:	6862      	ldr	r2, [r4, #4]
   3bf5c:	3a01      	subs	r2, #1
   3bf5e:	6062      	str	r2, [r4, #4]
   3bf60:	e7ec      	b.n	3bf3c <__ssvfiscanf_r+0x3c>
   3bf62:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   3bf64:	4621      	mov	r1, r4
   3bf66:	4630      	mov	r0, r6
   3bf68:	4798      	blx	r3
   3bf6a:	2800      	cmp	r0, #0
   3bf6c:	d0e9      	beq.n	3bf42 <__ssvfiscanf_r+0x42>
   3bf6e:	e7ed      	b.n	3bf4c <__ssvfiscanf_r+0x4c>
   3bf70:	2b25      	cmp	r3, #37	; 0x25
   3bf72:	d012      	beq.n	3bf9a <__ssvfiscanf_r+0x9a>
   3bf74:	469a      	mov	sl, r3
   3bf76:	6863      	ldr	r3, [r4, #4]
   3bf78:	2b00      	cmp	r3, #0
   3bf7a:	f340 8094 	ble.w	3c0a6 <__ssvfiscanf_r+0x1a6>
   3bf7e:	6822      	ldr	r2, [r4, #0]
   3bf80:	7813      	ldrb	r3, [r2, #0]
   3bf82:	4553      	cmp	r3, sl
   3bf84:	f040 8133 	bne.w	3c1ee <__ssvfiscanf_r+0x2ee>
   3bf88:	6863      	ldr	r3, [r4, #4]
   3bf8a:	3201      	adds	r2, #1
   3bf8c:	3b01      	subs	r3, #1
   3bf8e:	6022      	str	r2, [r4, #0]
   3bf90:	6063      	str	r3, [r4, #4]
   3bf92:	9b45      	ldr	r3, [sp, #276]	; 0x114
   3bf94:	3301      	adds	r3, #1
   3bf96:	9345      	str	r3, [sp, #276]	; 0x114
   3bf98:	e7d8      	b.n	3bf4c <__ssvfiscanf_r+0x4c>
   3bf9a:	9141      	str	r1, [sp, #260]	; 0x104
   3bf9c:	9143      	str	r1, [sp, #268]	; 0x10c
   3bf9e:	7853      	ldrb	r3, [r2, #1]
   3bfa0:	2b2a      	cmp	r3, #42	; 0x2a
   3bfa2:	bf04      	itt	eq
   3bfa4:	2310      	moveq	r3, #16
   3bfa6:	1c95      	addeq	r5, r2, #2
   3bfa8:	f04f 020a 	mov.w	r2, #10
   3bfac:	bf08      	it	eq
   3bfae:	9341      	streq	r3, [sp, #260]	; 0x104
   3bfb0:	46aa      	mov	sl, r5
   3bfb2:	f81a 1b01 	ldrb.w	r1, [sl], #1
   3bfb6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   3bfba:	2b09      	cmp	r3, #9
   3bfbc:	d91d      	bls.n	3bffa <__ssvfiscanf_r+0xfa>
   3bfbe:	2203      	movs	r2, #3
   3bfc0:	487f      	ldr	r0, [pc, #508]	; (3c1c0 <__ssvfiscanf_r+0x2c0>)
   3bfc2:	f005 f9d1 	bl	41368 <memchr>
   3bfc6:	b140      	cbz	r0, 3bfda <__ssvfiscanf_r+0xda>
   3bfc8:	2301      	movs	r3, #1
   3bfca:	eba0 0009 	sub.w	r0, r0, r9
   3bfce:	4655      	mov	r5, sl
   3bfd0:	fa03 f000 	lsl.w	r0, r3, r0
   3bfd4:	9b41      	ldr	r3, [sp, #260]	; 0x104
   3bfd6:	4318      	orrs	r0, r3
   3bfd8:	9041      	str	r0, [sp, #260]	; 0x104
   3bfda:	f815 3b01 	ldrb.w	r3, [r5], #1
   3bfde:	2b78      	cmp	r3, #120	; 0x78
   3bfe0:	d806      	bhi.n	3bff0 <__ssvfiscanf_r+0xf0>
   3bfe2:	2b57      	cmp	r3, #87	; 0x57
   3bfe4:	d810      	bhi.n	3c008 <__ssvfiscanf_r+0x108>
   3bfe6:	2b25      	cmp	r3, #37	; 0x25
   3bfe8:	d0c4      	beq.n	3bf74 <__ssvfiscanf_r+0x74>
   3bfea:	d857      	bhi.n	3c09c <__ssvfiscanf_r+0x19c>
   3bfec:	2b00      	cmp	r3, #0
   3bfee:	d065      	beq.n	3c0bc <__ssvfiscanf_r+0x1bc>
   3bff0:	2303      	movs	r3, #3
   3bff2:	9347      	str	r3, [sp, #284]	; 0x11c
   3bff4:	230a      	movs	r3, #10
   3bff6:	9342      	str	r3, [sp, #264]	; 0x108
   3bff8:	e072      	b.n	3c0e0 <__ssvfiscanf_r+0x1e0>
   3bffa:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   3bffc:	4655      	mov	r5, sl
   3bffe:	fb02 1103 	mla	r1, r2, r3, r1
   3c002:	3930      	subs	r1, #48	; 0x30
   3c004:	9143      	str	r1, [sp, #268]	; 0x10c
   3c006:	e7d3      	b.n	3bfb0 <__ssvfiscanf_r+0xb0>
   3c008:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
   3c00c:	2a20      	cmp	r2, #32
   3c00e:	d8ef      	bhi.n	3bff0 <__ssvfiscanf_r+0xf0>
   3c010:	a101      	add	r1, pc, #4	; (adr r1, 3c018 <__ssvfiscanf_r+0x118>)
   3c012:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   3c016:	bf00      	nop
   3c018:	0003c0cb 	.word	0x0003c0cb
   3c01c:	0003bff1 	.word	0x0003bff1
   3c020:	0003bff1 	.word	0x0003bff1
   3c024:	0003c129 	.word	0x0003c129
   3c028:	0003bff1 	.word	0x0003bff1
   3c02c:	0003bff1 	.word	0x0003bff1
   3c030:	0003bff1 	.word	0x0003bff1
   3c034:	0003bff1 	.word	0x0003bff1
   3c038:	0003bff1 	.word	0x0003bff1
   3c03c:	0003bff1 	.word	0x0003bff1
   3c040:	0003bff1 	.word	0x0003bff1
   3c044:	0003c13f 	.word	0x0003c13f
   3c048:	0003c115 	.word	0x0003c115
   3c04c:	0003c0a3 	.word	0x0003c0a3
   3c050:	0003c0a3 	.word	0x0003c0a3
   3c054:	0003c0a3 	.word	0x0003c0a3
   3c058:	0003bff1 	.word	0x0003bff1
   3c05c:	0003c119 	.word	0x0003c119
   3c060:	0003bff1 	.word	0x0003bff1
   3c064:	0003bff1 	.word	0x0003bff1
   3c068:	0003bff1 	.word	0x0003bff1
   3c06c:	0003bff1 	.word	0x0003bff1
   3c070:	0003c14f 	.word	0x0003c14f
   3c074:	0003c121 	.word	0x0003c121
   3c078:	0003c0c3 	.word	0x0003c0c3
   3c07c:	0003bff1 	.word	0x0003bff1
   3c080:	0003bff1 	.word	0x0003bff1
   3c084:	0003c14b 	.word	0x0003c14b
   3c088:	0003bff1 	.word	0x0003bff1
   3c08c:	0003c115 	.word	0x0003c115
   3c090:	0003bff1 	.word	0x0003bff1
   3c094:	0003bff1 	.word	0x0003bff1
   3c098:	0003c0cb 	.word	0x0003c0cb
   3c09c:	3b45      	subs	r3, #69	; 0x45
   3c09e:	2b02      	cmp	r3, #2
   3c0a0:	d8a6      	bhi.n	3bff0 <__ssvfiscanf_r+0xf0>
   3c0a2:	2305      	movs	r3, #5
   3c0a4:	e01b      	b.n	3c0de <__ssvfiscanf_r+0x1de>
   3c0a6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   3c0a8:	4621      	mov	r1, r4
   3c0aa:	4630      	mov	r0, r6
   3c0ac:	4798      	blx	r3
   3c0ae:	2800      	cmp	r0, #0
   3c0b0:	f43f af65 	beq.w	3bf7e <__ssvfiscanf_r+0x7e>
   3c0b4:	9844      	ldr	r0, [sp, #272]	; 0x110
   3c0b6:	2800      	cmp	r0, #0
   3c0b8:	f040 808f 	bne.w	3c1da <__ssvfiscanf_r+0x2da>
   3c0bc:	f04f 30ff 	mov.w	r0, #4294967295
   3c0c0:	e091      	b.n	3c1e6 <__ssvfiscanf_r+0x2e6>
   3c0c2:	9a41      	ldr	r2, [sp, #260]	; 0x104
   3c0c4:	f042 0220 	orr.w	r2, r2, #32
   3c0c8:	9241      	str	r2, [sp, #260]	; 0x104
   3c0ca:	9a41      	ldr	r2, [sp, #260]	; 0x104
   3c0cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   3c0d0:	9241      	str	r2, [sp, #260]	; 0x104
   3c0d2:	2210      	movs	r2, #16
   3c0d4:	2b6f      	cmp	r3, #111	; 0x6f
   3c0d6:	9242      	str	r2, [sp, #264]	; 0x108
   3c0d8:	bf34      	ite	cc
   3c0da:	2303      	movcc	r3, #3
   3c0dc:	2304      	movcs	r3, #4
   3c0de:	9347      	str	r3, [sp, #284]	; 0x11c
   3c0e0:	6863      	ldr	r3, [r4, #4]
   3c0e2:	2b00      	cmp	r3, #0
   3c0e4:	dd43      	ble.n	3c16e <__ssvfiscanf_r+0x26e>
   3c0e6:	9b41      	ldr	r3, [sp, #260]	; 0x104
   3c0e8:	0659      	lsls	r1, r3, #25
   3c0ea:	d404      	bmi.n	3c0f6 <__ssvfiscanf_r+0x1f6>
   3c0ec:	6823      	ldr	r3, [r4, #0]
   3c0ee:	781a      	ldrb	r2, [r3, #0]
   3c0f0:	5cba      	ldrb	r2, [r7, r2]
   3c0f2:	0712      	lsls	r2, r2, #28
   3c0f4:	d442      	bmi.n	3c17c <__ssvfiscanf_r+0x27c>
   3c0f6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   3c0f8:	2b02      	cmp	r3, #2
   3c0fa:	dc51      	bgt.n	3c1a0 <__ssvfiscanf_r+0x2a0>
   3c0fc:	466b      	mov	r3, sp
   3c0fe:	4622      	mov	r2, r4
   3c100:	a941      	add	r1, sp, #260	; 0x104
   3c102:	4630      	mov	r0, r6
   3c104:	f000 f878 	bl	3c1f8 <_scanf_chars>
   3c108:	2801      	cmp	r0, #1
   3c10a:	d070      	beq.n	3c1ee <__ssvfiscanf_r+0x2ee>
   3c10c:	2802      	cmp	r0, #2
   3c10e:	f47f af1d 	bne.w	3bf4c <__ssvfiscanf_r+0x4c>
   3c112:	e7cf      	b.n	3c0b4 <__ssvfiscanf_r+0x1b4>
   3c114:	220a      	movs	r2, #10
   3c116:	e7dd      	b.n	3c0d4 <__ssvfiscanf_r+0x1d4>
   3c118:	2300      	movs	r3, #0
   3c11a:	9342      	str	r3, [sp, #264]	; 0x108
   3c11c:	2303      	movs	r3, #3
   3c11e:	e7de      	b.n	3c0de <__ssvfiscanf_r+0x1de>
   3c120:	2308      	movs	r3, #8
   3c122:	9342      	str	r3, [sp, #264]	; 0x108
   3c124:	2304      	movs	r3, #4
   3c126:	e7da      	b.n	3c0de <__ssvfiscanf_r+0x1de>
   3c128:	4629      	mov	r1, r5
   3c12a:	4640      	mov	r0, r8
   3c12c:	f005 ffd6 	bl	420dc <__sccl>
   3c130:	9b41      	ldr	r3, [sp, #260]	; 0x104
   3c132:	4605      	mov	r5, r0
   3c134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3c138:	9341      	str	r3, [sp, #260]	; 0x104
   3c13a:	2301      	movs	r3, #1
   3c13c:	e7cf      	b.n	3c0de <__ssvfiscanf_r+0x1de>
   3c13e:	9b41      	ldr	r3, [sp, #260]	; 0x104
   3c140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3c144:	9341      	str	r3, [sp, #260]	; 0x104
   3c146:	2300      	movs	r3, #0
   3c148:	e7c9      	b.n	3c0de <__ssvfiscanf_r+0x1de>
   3c14a:	2302      	movs	r3, #2
   3c14c:	e7c7      	b.n	3c0de <__ssvfiscanf_r+0x1de>
   3c14e:	9841      	ldr	r0, [sp, #260]	; 0x104
   3c150:	06c3      	lsls	r3, r0, #27
   3c152:	f53f aefb 	bmi.w	3bf4c <__ssvfiscanf_r+0x4c>
   3c156:	9b00      	ldr	r3, [sp, #0]
   3c158:	f010 0f01 	tst.w	r0, #1
   3c15c:	9a45      	ldr	r2, [sp, #276]	; 0x114
   3c15e:	f103 0104 	add.w	r1, r3, #4
   3c162:	9100      	str	r1, [sp, #0]
   3c164:	681b      	ldr	r3, [r3, #0]
   3c166:	bf14      	ite	ne
   3c168:	801a      	strhne	r2, [r3, #0]
   3c16a:	601a      	streq	r2, [r3, #0]
   3c16c:	e6ee      	b.n	3bf4c <__ssvfiscanf_r+0x4c>
   3c16e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   3c170:	4621      	mov	r1, r4
   3c172:	4630      	mov	r0, r6
   3c174:	4798      	blx	r3
   3c176:	2800      	cmp	r0, #0
   3c178:	d0b5      	beq.n	3c0e6 <__ssvfiscanf_r+0x1e6>
   3c17a:	e79b      	b.n	3c0b4 <__ssvfiscanf_r+0x1b4>
   3c17c:	9a45      	ldr	r2, [sp, #276]	; 0x114
   3c17e:	3201      	adds	r2, #1
   3c180:	9245      	str	r2, [sp, #276]	; 0x114
   3c182:	6862      	ldr	r2, [r4, #4]
   3c184:	3a01      	subs	r2, #1
   3c186:	2a00      	cmp	r2, #0
   3c188:	6062      	str	r2, [r4, #4]
   3c18a:	dd02      	ble.n	3c192 <__ssvfiscanf_r+0x292>
   3c18c:	3301      	adds	r3, #1
   3c18e:	6023      	str	r3, [r4, #0]
   3c190:	e7ac      	b.n	3c0ec <__ssvfiscanf_r+0x1ec>
   3c192:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   3c194:	4621      	mov	r1, r4
   3c196:	4630      	mov	r0, r6
   3c198:	4798      	blx	r3
   3c19a:	2800      	cmp	r0, #0
   3c19c:	d0a6      	beq.n	3c0ec <__ssvfiscanf_r+0x1ec>
   3c19e:	e789      	b.n	3c0b4 <__ssvfiscanf_r+0x1b4>
   3c1a0:	2b04      	cmp	r3, #4
   3c1a2:	dc0f      	bgt.n	3c1c4 <__ssvfiscanf_r+0x2c4>
   3c1a4:	466b      	mov	r3, sp
   3c1a6:	4622      	mov	r2, r4
   3c1a8:	a941      	add	r1, sp, #260	; 0x104
   3c1aa:	4630      	mov	r0, r6
   3c1ac:	f000 f87e 	bl	3c2ac <_scanf_i>
   3c1b0:	e7aa      	b.n	3c108 <__ssvfiscanf_r+0x208>
   3c1b2:	bf00      	nop
   3c1b4:	0004bc8c 	.word	0x0004bc8c
   3c1b8:	00042029 	.word	0x00042029
   3c1bc:	000420a3 	.word	0x000420a3
   3c1c0:	0004bd92 	.word	0x0004bd92
   3c1c4:	4b0b      	ldr	r3, [pc, #44]	; (3c1f4 <__ssvfiscanf_r+0x2f4>)
   3c1c6:	2b00      	cmp	r3, #0
   3c1c8:	f43f aec0 	beq.w	3bf4c <__ssvfiscanf_r+0x4c>
   3c1cc:	466b      	mov	r3, sp
   3c1ce:	4622      	mov	r2, r4
   3c1d0:	a941      	add	r1, sp, #260	; 0x104
   3c1d2:	4630      	mov	r0, r6
   3c1d4:	e000      	b.n	3c1d8 <__ssvfiscanf_r+0x2d8>
   3c1d6:	bf00      	nop
   3c1d8:	e796      	b.n	3c108 <__ssvfiscanf_r+0x208>
   3c1da:	89a3      	ldrh	r3, [r4, #12]
   3c1dc:	f013 0f40 	tst.w	r3, #64	; 0x40
   3c1e0:	bf18      	it	ne
   3c1e2:	f04f 30ff 	movne.w	r0, #4294967295
   3c1e6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
   3c1ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3c1ee:	9844      	ldr	r0, [sp, #272]	; 0x110
   3c1f0:	e7f9      	b.n	3c1e6 <__ssvfiscanf_r+0x2e6>
   3c1f2:	bf00      	nop
   3c1f4:	00000000 	.word	0x00000000

0003c1f8 <_scanf_chars>:
   3c1f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3c1fc:	4615      	mov	r5, r2
   3c1fe:	688a      	ldr	r2, [r1, #8]
   3c200:	4680      	mov	r8, r0
   3c202:	460c      	mov	r4, r1
   3c204:	b932      	cbnz	r2, 3c214 <_scanf_chars+0x1c>
   3c206:	698a      	ldr	r2, [r1, #24]
   3c208:	2a00      	cmp	r2, #0
   3c20a:	bf0c      	ite	eq
   3c20c:	2201      	moveq	r2, #1
   3c20e:	f04f 32ff 	movne.w	r2, #4294967295
   3c212:	608a      	str	r2, [r1, #8]
   3c214:	6822      	ldr	r2, [r4, #0]
   3c216:	2700      	movs	r7, #0
   3c218:	f8df 908c 	ldr.w	r9, [pc, #140]	; 3c2a8 <_scanf_chars+0xb0>
   3c21c:	06d1      	lsls	r1, r2, #27
   3c21e:	bf5f      	itttt	pl
   3c220:	681a      	ldrpl	r2, [r3, #0]
   3c222:	1d11      	addpl	r1, r2, #4
   3c224:	6019      	strpl	r1, [r3, #0]
   3c226:	6816      	ldrpl	r6, [r2, #0]
   3c228:	69a0      	ldr	r0, [r4, #24]
   3c22a:	b188      	cbz	r0, 3c250 <_scanf_chars+0x58>
   3c22c:	2801      	cmp	r0, #1
   3c22e:	d107      	bne.n	3c240 <_scanf_chars+0x48>
   3c230:	682a      	ldr	r2, [r5, #0]
   3c232:	7811      	ldrb	r1, [r2, #0]
   3c234:	6962      	ldr	r2, [r4, #20]
   3c236:	5c52      	ldrb	r2, [r2, r1]
   3c238:	b952      	cbnz	r2, 3c250 <_scanf_chars+0x58>
   3c23a:	2f00      	cmp	r7, #0
   3c23c:	d031      	beq.n	3c2a2 <_scanf_chars+0xaa>
   3c23e:	e022      	b.n	3c286 <_scanf_chars+0x8e>
   3c240:	2802      	cmp	r0, #2
   3c242:	d120      	bne.n	3c286 <_scanf_chars+0x8e>
   3c244:	682b      	ldr	r3, [r5, #0]
   3c246:	781b      	ldrb	r3, [r3, #0]
   3c248:	f813 3009 	ldrb.w	r3, [r3, r9]
   3c24c:	071b      	lsls	r3, r3, #28
   3c24e:	d41a      	bmi.n	3c286 <_scanf_chars+0x8e>
   3c250:	6823      	ldr	r3, [r4, #0]
   3c252:	3701      	adds	r7, #1
   3c254:	06da      	lsls	r2, r3, #27
   3c256:	bf5e      	ittt	pl
   3c258:	682b      	ldrpl	r3, [r5, #0]
   3c25a:	781b      	ldrbpl	r3, [r3, #0]
   3c25c:	f806 3b01 	strbpl.w	r3, [r6], #1
   3c260:	682a      	ldr	r2, [r5, #0]
   3c262:	686b      	ldr	r3, [r5, #4]
   3c264:	3201      	adds	r2, #1
   3c266:	3b01      	subs	r3, #1
   3c268:	602a      	str	r2, [r5, #0]
   3c26a:	68a2      	ldr	r2, [r4, #8]
   3c26c:	606b      	str	r3, [r5, #4]
   3c26e:	3a01      	subs	r2, #1
   3c270:	60a2      	str	r2, [r4, #8]
   3c272:	b142      	cbz	r2, 3c286 <_scanf_chars+0x8e>
   3c274:	2b00      	cmp	r3, #0
   3c276:	dcd7      	bgt.n	3c228 <_scanf_chars+0x30>
   3c278:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   3c27c:	4629      	mov	r1, r5
   3c27e:	4640      	mov	r0, r8
   3c280:	4798      	blx	r3
   3c282:	2800      	cmp	r0, #0
   3c284:	d0d0      	beq.n	3c228 <_scanf_chars+0x30>
   3c286:	6823      	ldr	r3, [r4, #0]
   3c288:	f013 0310 	ands.w	r3, r3, #16
   3c28c:	d105      	bne.n	3c29a <_scanf_chars+0xa2>
   3c28e:	68e2      	ldr	r2, [r4, #12]
   3c290:	3201      	adds	r2, #1
   3c292:	60e2      	str	r2, [r4, #12]
   3c294:	69a2      	ldr	r2, [r4, #24]
   3c296:	b102      	cbz	r2, 3c29a <_scanf_chars+0xa2>
   3c298:	7033      	strb	r3, [r6, #0]
   3c29a:	6923      	ldr	r3, [r4, #16]
   3c29c:	2000      	movs	r0, #0
   3c29e:	443b      	add	r3, r7
   3c2a0:	6123      	str	r3, [r4, #16]
   3c2a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3c2a6:	bf00      	nop
   3c2a8:	0004bc8c 	.word	0x0004bc8c

0003c2ac <_scanf_i>:
   3c2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c2b0:	4698      	mov	r8, r3
   3c2b2:	b087      	sub	sp, #28
   3c2b4:	4b75      	ldr	r3, [pc, #468]	; (3c48c <_scanf_i+0x1e0>)
   3c2b6:	460c      	mov	r4, r1
   3c2b8:	4682      	mov	sl, r0
   3c2ba:	4616      	mov	r6, r2
   3c2bc:	4627      	mov	r7, r4
   3c2be:	f04f 0b00 	mov.w	fp, #0
   3c2c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   3c2c6:	ab03      	add	r3, sp, #12
   3c2c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   3c2cc:	4b70      	ldr	r3, [pc, #448]	; (3c490 <_scanf_i+0x1e4>)
   3c2ce:	69a1      	ldr	r1, [r4, #24]
   3c2d0:	4a70      	ldr	r2, [pc, #448]	; (3c494 <_scanf_i+0x1e8>)
   3c2d2:	2903      	cmp	r1, #3
   3c2d4:	bf18      	it	ne
   3c2d6:	461a      	movne	r2, r3
   3c2d8:	68a3      	ldr	r3, [r4, #8]
   3c2da:	9201      	str	r2, [sp, #4]
   3c2dc:	1e5a      	subs	r2, r3, #1
   3c2de:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   3c2e2:	bf89      	itett	hi
   3c2e4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   3c2e8:	f04f 0900 	movls.w	r9, #0
   3c2ec:	eb03 0905 	addhi.w	r9, r3, r5
   3c2f0:	f240 135d 	movwhi	r3, #349	; 0x15d
   3c2f4:	bf88      	it	hi
   3c2f6:	60a3      	strhi	r3, [r4, #8]
   3c2f8:	f857 3b1c 	ldr.w	r3, [r7], #28
   3c2fc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   3c300:	463d      	mov	r5, r7
   3c302:	6023      	str	r3, [r4, #0]
   3c304:	6831      	ldr	r1, [r6, #0]
   3c306:	ab03      	add	r3, sp, #12
   3c308:	2202      	movs	r2, #2
   3c30a:	7809      	ldrb	r1, [r1, #0]
   3c30c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   3c310:	f005 f82a 	bl	41368 <memchr>
   3c314:	b328      	cbz	r0, 3c362 <_scanf_i+0xb6>
   3c316:	f1bb 0f01 	cmp.w	fp, #1
   3c31a:	d159      	bne.n	3c3d0 <_scanf_i+0x124>
   3c31c:	6862      	ldr	r2, [r4, #4]
   3c31e:	b92a      	cbnz	r2, 3c32c <_scanf_i+0x80>
   3c320:	6822      	ldr	r2, [r4, #0]
   3c322:	2308      	movs	r3, #8
   3c324:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   3c328:	6063      	str	r3, [r4, #4]
   3c32a:	6022      	str	r2, [r4, #0]
   3c32c:	6822      	ldr	r2, [r4, #0]
   3c32e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   3c332:	6022      	str	r2, [r4, #0]
   3c334:	68a2      	ldr	r2, [r4, #8]
   3c336:	1e51      	subs	r1, r2, #1
   3c338:	60a1      	str	r1, [r4, #8]
   3c33a:	b192      	cbz	r2, 3c362 <_scanf_i+0xb6>
   3c33c:	6832      	ldr	r2, [r6, #0]
   3c33e:	1c51      	adds	r1, r2, #1
   3c340:	6031      	str	r1, [r6, #0]
   3c342:	7812      	ldrb	r2, [r2, #0]
   3c344:	f805 2b01 	strb.w	r2, [r5], #1
   3c348:	6872      	ldr	r2, [r6, #4]
   3c34a:	3a01      	subs	r2, #1
   3c34c:	2a00      	cmp	r2, #0
   3c34e:	6072      	str	r2, [r6, #4]
   3c350:	dc07      	bgt.n	3c362 <_scanf_i+0xb6>
   3c352:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   3c356:	4631      	mov	r1, r6
   3c358:	4650      	mov	r0, sl
   3c35a:	4790      	blx	r2
   3c35c:	2800      	cmp	r0, #0
   3c35e:	f040 8085 	bne.w	3c46c <_scanf_i+0x1c0>
   3c362:	f10b 0b01 	add.w	fp, fp, #1
   3c366:	f1bb 0f03 	cmp.w	fp, #3
   3c36a:	d1cb      	bne.n	3c304 <_scanf_i+0x58>
   3c36c:	6863      	ldr	r3, [r4, #4]
   3c36e:	b90b      	cbnz	r3, 3c374 <_scanf_i+0xc8>
   3c370:	230a      	movs	r3, #10
   3c372:	6063      	str	r3, [r4, #4]
   3c374:	6863      	ldr	r3, [r4, #4]
   3c376:	f04f 0b00 	mov.w	fp, #0
   3c37a:	4947      	ldr	r1, [pc, #284]	; (3c498 <_scanf_i+0x1ec>)
   3c37c:	6960      	ldr	r0, [r4, #20]
   3c37e:	1ac9      	subs	r1, r1, r3
   3c380:	f005 feac 	bl	420dc <__sccl>
   3c384:	68a3      	ldr	r3, [r4, #8]
   3c386:	6822      	ldr	r2, [r4, #0]
   3c388:	2b00      	cmp	r3, #0
   3c38a:	d03d      	beq.n	3c408 <_scanf_i+0x15c>
   3c38c:	6831      	ldr	r1, [r6, #0]
   3c38e:	6960      	ldr	r0, [r4, #20]
   3c390:	f891 c000 	ldrb.w	ip, [r1]
   3c394:	f810 000c 	ldrb.w	r0, [r0, ip]
   3c398:	2800      	cmp	r0, #0
   3c39a:	d035      	beq.n	3c408 <_scanf_i+0x15c>
   3c39c:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   3c3a0:	d124      	bne.n	3c3ec <_scanf_i+0x140>
   3c3a2:	0510      	lsls	r0, r2, #20
   3c3a4:	d522      	bpl.n	3c3ec <_scanf_i+0x140>
   3c3a6:	f10b 0b01 	add.w	fp, fp, #1
   3c3aa:	f1b9 0f00 	cmp.w	r9, #0
   3c3ae:	d003      	beq.n	3c3b8 <_scanf_i+0x10c>
   3c3b0:	3301      	adds	r3, #1
   3c3b2:	f109 39ff 	add.w	r9, r9, #4294967295
   3c3b6:	60a3      	str	r3, [r4, #8]
   3c3b8:	6873      	ldr	r3, [r6, #4]
   3c3ba:	3b01      	subs	r3, #1
   3c3bc:	2b00      	cmp	r3, #0
   3c3be:	6073      	str	r3, [r6, #4]
   3c3c0:	dd1b      	ble.n	3c3fa <_scanf_i+0x14e>
   3c3c2:	6833      	ldr	r3, [r6, #0]
   3c3c4:	3301      	adds	r3, #1
   3c3c6:	6033      	str	r3, [r6, #0]
   3c3c8:	68a3      	ldr	r3, [r4, #8]
   3c3ca:	3b01      	subs	r3, #1
   3c3cc:	60a3      	str	r3, [r4, #8]
   3c3ce:	e7d9      	b.n	3c384 <_scanf_i+0xd8>
   3c3d0:	f1bb 0f02 	cmp.w	fp, #2
   3c3d4:	d1ae      	bne.n	3c334 <_scanf_i+0x88>
   3c3d6:	6822      	ldr	r2, [r4, #0]
   3c3d8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   3c3dc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   3c3e0:	d1bf      	bne.n	3c362 <_scanf_i+0xb6>
   3c3e2:	2310      	movs	r3, #16
   3c3e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   3c3e8:	6063      	str	r3, [r4, #4]
   3c3ea:	e7a2      	b.n	3c332 <_scanf_i+0x86>
   3c3ec:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   3c3f0:	6022      	str	r2, [r4, #0]
   3c3f2:	780b      	ldrb	r3, [r1, #0]
   3c3f4:	f805 3b01 	strb.w	r3, [r5], #1
   3c3f8:	e7de      	b.n	3c3b8 <_scanf_i+0x10c>
   3c3fa:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   3c3fe:	4631      	mov	r1, r6
   3c400:	4650      	mov	r0, sl
   3c402:	4798      	blx	r3
   3c404:	2800      	cmp	r0, #0
   3c406:	d0df      	beq.n	3c3c8 <_scanf_i+0x11c>
   3c408:	6823      	ldr	r3, [r4, #0]
   3c40a:	05db      	lsls	r3, r3, #23
   3c40c:	d50d      	bpl.n	3c42a <_scanf_i+0x17e>
   3c40e:	42bd      	cmp	r5, r7
   3c410:	d909      	bls.n	3c426 <_scanf_i+0x17a>
   3c412:	f105 39ff 	add.w	r9, r5, #4294967295
   3c416:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   3c41a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   3c41e:	4632      	mov	r2, r6
   3c420:	464d      	mov	r5, r9
   3c422:	4650      	mov	r0, sl
   3c424:	4798      	blx	r3
   3c426:	42bd      	cmp	r5, r7
   3c428:	d02d      	beq.n	3c486 <_scanf_i+0x1da>
   3c42a:	6822      	ldr	r2, [r4, #0]
   3c42c:	f012 0210 	ands.w	r2, r2, #16
   3c430:	d113      	bne.n	3c45a <_scanf_i+0x1ae>
   3c432:	4639      	mov	r1, r7
   3c434:	702a      	strb	r2, [r5, #0]
   3c436:	4650      	mov	r0, sl
   3c438:	6863      	ldr	r3, [r4, #4]
   3c43a:	9e01      	ldr	r6, [sp, #4]
   3c43c:	47b0      	blx	r6
   3c43e:	6821      	ldr	r1, [r4, #0]
   3c440:	f8d8 3000 	ldr.w	r3, [r8]
   3c444:	f011 0f20 	tst.w	r1, #32
   3c448:	d013      	beq.n	3c472 <_scanf_i+0x1c6>
   3c44a:	1d1a      	adds	r2, r3, #4
   3c44c:	f8c8 2000 	str.w	r2, [r8]
   3c450:	681b      	ldr	r3, [r3, #0]
   3c452:	6018      	str	r0, [r3, #0]
   3c454:	68e3      	ldr	r3, [r4, #12]
   3c456:	3301      	adds	r3, #1
   3c458:	60e3      	str	r3, [r4, #12]
   3c45a:	1bed      	subs	r5, r5, r7
   3c45c:	2000      	movs	r0, #0
   3c45e:	44ab      	add	fp, r5
   3c460:	6925      	ldr	r5, [r4, #16]
   3c462:	445d      	add	r5, fp
   3c464:	6125      	str	r5, [r4, #16]
   3c466:	b007      	add	sp, #28
   3c468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c46c:	f04f 0b00 	mov.w	fp, #0
   3c470:	e7ca      	b.n	3c408 <_scanf_i+0x15c>
   3c472:	1d1a      	adds	r2, r3, #4
   3c474:	f011 0f01 	tst.w	r1, #1
   3c478:	f8c8 2000 	str.w	r2, [r8]
   3c47c:	681b      	ldr	r3, [r3, #0]
   3c47e:	bf14      	ite	ne
   3c480:	8018      	strhne	r0, [r3, #0]
   3c482:	6018      	streq	r0, [r3, #0]
   3c484:	e7e6      	b.n	3c454 <_scanf_i+0x1a8>
   3c486:	2001      	movs	r0, #1
   3c488:	e7ed      	b.n	3c466 <_scanf_i+0x1ba>
   3c48a:	bf00      	nop
   3c48c:	00042804 	.word	0x00042804
   3c490:	0004188b 	.word	0x0004188b
   3c494:	00041887 	.word	0x00041887
   3c498:	0004bf8c 	.word	0x0004bf8c

0003c49c <_read_r>:
   3c49c:	b538      	push	{r3, r4, r5, lr}
   3c49e:	4604      	mov	r4, r0
   3c4a0:	4d06      	ldr	r5, [pc, #24]	; (3c4bc <_read_r+0x20>)
   3c4a2:	4608      	mov	r0, r1
   3c4a4:	4611      	mov	r1, r2
   3c4a6:	2200      	movs	r2, #0
   3c4a8:	602a      	str	r2, [r5, #0]
   3c4aa:	461a      	mov	r2, r3
   3c4ac:	f001 f924 	bl	3d6f8 <_read>
   3c4b0:	1c43      	adds	r3, r0, #1
   3c4b2:	d102      	bne.n	3c4ba <_read_r+0x1e>
   3c4b4:	682b      	ldr	r3, [r5, #0]
   3c4b6:	b103      	cbz	r3, 3c4ba <_read_r+0x1e>
   3c4b8:	6023      	str	r3, [r4, #0]
   3c4ba:	bd38      	pop	{r3, r4, r5, pc}
   3c4bc:	2001a568 	.word	0x2001a568

0003c4c0 <nan>:
   3c4c0:	2000      	movs	r0, #0
   3c4c2:	4901      	ldr	r1, [pc, #4]	; (3c4c8 <nan+0x8>)
   3c4c4:	4770      	bx	lr
   3c4c6:	bf00      	nop
   3c4c8:	7ff80000 	.word	0x7ff80000

0003c4cc <raise>:
   3c4cc:	4b02      	ldr	r3, [pc, #8]	; (3c4d8 <raise+0xc>)
   3c4ce:	4601      	mov	r1, r0
   3c4d0:	6818      	ldr	r0, [r3, #0]
   3c4d2:	f005 be3b 	b.w	4214c <_raise_r>
   3c4d6:	bf00      	nop
   3c4d8:	20014a74 	.word	0x20014a74

0003c4dc <_kill_r>:
   3c4dc:	b538      	push	{r3, r4, r5, lr}
   3c4de:	2300      	movs	r3, #0
   3c4e0:	4d06      	ldr	r5, [pc, #24]	; (3c4fc <_kill_r+0x20>)
   3c4e2:	4604      	mov	r4, r0
   3c4e4:	4608      	mov	r0, r1
   3c4e6:	4611      	mov	r1, r2
   3c4e8:	602b      	str	r3, [r5, #0]
   3c4ea:	f001 f917 	bl	3d71c <_kill>
   3c4ee:	1c43      	adds	r3, r0, #1
   3c4f0:	d102      	bne.n	3c4f8 <_kill_r+0x1c>
   3c4f2:	682b      	ldr	r3, [r5, #0]
   3c4f4:	b103      	cbz	r3, 3c4f8 <_kill_r+0x1c>
   3c4f6:	6023      	str	r3, [r4, #0]
   3c4f8:	bd38      	pop	{r3, r4, r5, pc}
   3c4fa:	bf00      	nop
   3c4fc:	2001a568 	.word	0x2001a568

0003c500 <_fstat_r>:
   3c500:	b538      	push	{r3, r4, r5, lr}
   3c502:	2300      	movs	r3, #0
   3c504:	4d06      	ldr	r5, [pc, #24]	; (3c520 <_fstat_r+0x20>)
   3c506:	4604      	mov	r4, r0
   3c508:	4608      	mov	r0, r1
   3c50a:	4611      	mov	r1, r2
   3c50c:	602b      	str	r3, [r5, #0]
   3c50e:	f001 f909 	bl	3d724 <_fstat>
   3c512:	1c43      	adds	r3, r0, #1
   3c514:	d102      	bne.n	3c51c <_fstat_r+0x1c>
   3c516:	682b      	ldr	r3, [r5, #0]
   3c518:	b103      	cbz	r3, 3c51c <_fstat_r+0x1c>
   3c51a:	6023      	str	r3, [r4, #0]
   3c51c:	bd38      	pop	{r3, r4, r5, pc}
   3c51e:	bf00      	nop
   3c520:	2001a568 	.word	0x2001a568

0003c524 <_isatty_r>:
   3c524:	b538      	push	{r3, r4, r5, lr}
   3c526:	2300      	movs	r3, #0
   3c528:	4d05      	ldr	r5, [pc, #20]	; (3c540 <_isatty_r+0x1c>)
   3c52a:	4604      	mov	r4, r0
   3c52c:	4608      	mov	r0, r1
   3c52e:	602b      	str	r3, [r5, #0]
   3c530:	f001 f8ef 	bl	3d712 <_isatty>
   3c534:	1c43      	adds	r3, r0, #1
   3c536:	d102      	bne.n	3c53e <_isatty_r+0x1a>
   3c538:	682b      	ldr	r3, [r5, #0]
   3c53a:	b103      	cbz	r3, 3c53e <_isatty_r+0x1a>
   3c53c:	6023      	str	r3, [r4, #0]
   3c53e:	bd38      	pop	{r3, r4, r5, pc}
   3c540:	2001a568 	.word	0x2001a568

0003c544 <app_thread_fn>:
{
   3c544:	b508      	push	{r3, lr}
	(void)await_connection(K_FOREVER);
   3c546:	f04f 30ff 	mov.w	r0, #4294967295
   3c54a:	f04f 31ff 	mov.w	r1, #4294967295
   3c54e:	f7e3 fe85 	bl	2025c <await_connection>
}
   3c552:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	main_application();
   3c556:	f7e3 bdbf 	b.w	200d8 <main_application>

0003c55a <msg_thread_fn>:
{
   3c55a:	b508      	push	{r3, lr}
		(void)consume_device_message();
   3c55c:	f7e3 ff60 	bl	20420 <consume_device_message>
	while (true) {
   3c560:	e7fc      	b.n	3c55c <msg_thread_fn+0x2>

0003c562 <conn_thread_fn>:
	manage_connection();
   3c562:	f7e3 bfcf 	b.w	20504 <manage_connection>

0003c566 <z_fdtable_call_ioctl.constprop.0>:
 * @param vtable vtable containing ioctl function pointer
 * @param obj Object to call ioctl on
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
   3c566:	b40c      	push	{r2, r3}
   3c568:	4603      	mov	r3, r0
   3c56a:	b507      	push	{r0, r1, r2, lr}
{
	va_list args;
	int res;

	va_start(args, request);
	res = vtable->ioctl(obj, request, args);
   3c56c:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   3c56e:	aa05      	add	r2, sp, #20
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
   3c570:	4608      	mov	r0, r1
	res = vtable->ioctl(obj, request, args);
   3c572:	f240 1105 	movw	r1, #261	; 0x105
	va_start(args, request);
   3c576:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   3c578:	4798      	blx	r3
	va_end(args);

	return res;
}
   3c57a:	b003      	add	sp, #12
   3c57c:	f85d eb04 	ldr.w	lr, [sp], #4
   3c580:	b002      	add	sp, #8
   3c582:	4770      	bx	lr

0003c584 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   3c584:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   3c588:	b2db      	uxtb	r3, r3
   3c58a:	2b09      	cmp	r3, #9
   3c58c:	d802      	bhi.n	3c594 <char2hex+0x10>
		*x = c - '0';
   3c58e:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   3c590:	2000      	movs	r0, #0
   3c592:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   3c594:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   3c598:	2b05      	cmp	r3, #5
   3c59a:	d802      	bhi.n	3c5a2 <char2hex+0x1e>
		*x = c - 'a' + 10;
   3c59c:	3857      	subs	r0, #87	; 0x57
   3c59e:	7008      	strb	r0, [r1, #0]
   3c5a0:	e7f6      	b.n	3c590 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   3c5a2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   3c5a6:	2b05      	cmp	r3, #5
   3c5a8:	d801      	bhi.n	3c5ae <char2hex+0x2a>
		*x = c - 'A' + 10;
   3c5aa:	3837      	subs	r0, #55	; 0x37
   3c5ac:	e7f7      	b.n	3c59e <char2hex+0x1a>
		return -EINVAL;
   3c5ae:	f06f 0015 	mvn.w	r0, #21
}
   3c5b2:	4770      	bx	lr

0003c5b4 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   3c5b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3c5b6:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   3c5b8:	f001 0001 	and.w	r0, r1, #1
   3c5bc:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   3c5c0:	429d      	cmp	r5, r3
   3c5c2:	ea4f 0651 	mov.w	r6, r1, lsr #1
   3c5c6:	d903      	bls.n	3c5d0 <hex2bin+0x1c>
		return 0;
   3c5c8:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   3c5ca:	4628      	mov	r0, r5
   3c5cc:	b003      	add	sp, #12
   3c5ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   3c5d0:	b158      	cbz	r0, 3c5ea <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   3c5d2:	7820      	ldrb	r0, [r4, #0]
   3c5d4:	f10d 0107 	add.w	r1, sp, #7
   3c5d8:	f7ff ffd4 	bl	3c584 <char2hex>
   3c5dc:	2800      	cmp	r0, #0
   3c5de:	dbf3      	blt.n	3c5c8 <hex2bin+0x14>
		buf[0] = dec;
   3c5e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		hex++;
   3c5e4:	3401      	adds	r4, #1
		buf[0] = dec;
   3c5e6:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   3c5ea:	3401      	adds	r4, #1
   3c5ec:	4416      	add	r6, r2
   3c5ee:	42b2      	cmp	r2, r6
   3c5f0:	d0eb      	beq.n	3c5ca <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   3c5f2:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   3c5f6:	f10d 0107 	add.w	r1, sp, #7
   3c5fa:	f7ff ffc3 	bl	3c584 <char2hex>
   3c5fe:	2800      	cmp	r0, #0
   3c600:	dbe2      	blt.n	3c5c8 <hex2bin+0x14>
		buf[i] = dec << 4;
   3c602:	f89d 3007 	ldrb.w	r3, [sp, #7]
   3c606:	011b      	lsls	r3, r3, #4
   3c608:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   3c60a:	f814 0b02 	ldrb.w	r0, [r4], #2
   3c60e:	f7ff ffb9 	bl	3c584 <char2hex>
   3c612:	2800      	cmp	r0, #0
   3c614:	dbd8      	blt.n	3c5c8 <hex2bin+0x14>
		buf[i] += dec;
   3c616:	7813      	ldrb	r3, [r2, #0]
   3c618:	f89d 1007 	ldrb.w	r1, [sp, #7]
   3c61c:	440b      	add	r3, r1
   3c61e:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   3c622:	e7e4      	b.n	3c5ee <hex2bin+0x3a>

0003c624 <sys_notify_validate>:
	if (notify == NULL) {
   3c624:	b140      	cbz	r0, 3c638 <sys_notify_validate+0x14>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   3c626:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   3c628:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
   3c62c:	2b02      	cmp	r3, #2
   3c62e:	d006      	beq.n	3c63e <sys_notify_validate+0x1a>
   3c630:	2b03      	cmp	r3, #3
   3c632:	d004      	beq.n	3c63e <sys_notify_validate+0x1a>
   3c634:	2b01      	cmp	r3, #1
   3c636:	d005      	beq.n	3c644 <sys_notify_validate+0x20>
		return -EINVAL;
   3c638:	f06f 0015 	mvn.w	r0, #21
}
   3c63c:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   3c63e:	6803      	ldr	r3, [r0, #0]
   3c640:	2b00      	cmp	r3, #0
   3c642:	d0f9      	beq.n	3c638 <sys_notify_validate+0x14>
		notify->result = 0;
   3c644:	2300      	movs	r3, #0
   3c646:	6083      	str	r3, [r0, #8]
   3c648:	4618      	mov	r0, r3
   3c64a:	4770      	bx	lr

0003c64c <arch_printk_char_out>:
}
   3c64c:	2000      	movs	r0, #0
   3c64e:	4770      	bx	lr

0003c650 <str_out>:
{
   3c650:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   3c652:	688a      	ldr	r2, [r1, #8]
   3c654:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   3c656:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   3c658:	b114      	cbz	r4, 3c660 <str_out+0x10>
   3c65a:	684b      	ldr	r3, [r1, #4]
   3c65c:	4293      	cmp	r3, r2
   3c65e:	dc01      	bgt.n	3c664 <str_out+0x14>
		ctx->count++;
   3c660:	608d      	str	r5, [r1, #8]
}
   3c662:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   3c664:	3b01      	subs	r3, #1
   3c666:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   3c668:	bf08      	it	eq
   3c66a:	2200      	moveq	r2, #0
   3c66c:	608d      	str	r5, [r1, #8]
   3c66e:	bf0c      	ite	eq
   3c670:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   3c672:	54a0      	strbne	r0, [r4, r2]
   3c674:	e7f5      	b.n	3c662 <str_out+0x12>

0003c676 <printk>:
{
   3c676:	b40f      	push	{r0, r1, r2, r3}
   3c678:	b507      	push	{r0, r1, r2, lr}
   3c67a:	a904      	add	r1, sp, #16
   3c67c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   3c680:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   3c682:	f7e4 fa93 	bl	20bac <vprintk>
}
   3c686:	b003      	add	sp, #12
   3c688:	f85d eb04 	ldr.w	lr, [sp], #4
   3c68c:	b004      	add	sp, #16
   3c68e:	4770      	bx	lr

0003c690 <snprintk>:
{
   3c690:	b40c      	push	{r2, r3}
   3c692:	b507      	push	{r0, r1, r2, lr}
   3c694:	ab04      	add	r3, sp, #16
   3c696:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   3c69a:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   3c69c:	f7e4 fa94 	bl	20bc8 <vsnprintk>
}
   3c6a0:	b003      	add	sp, #12
   3c6a2:	f85d eb04 	ldr.w	lr, [sp], #4
   3c6a6:	b002      	add	sp, #8
   3c6a8:	4770      	bx	lr

0003c6aa <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   3c6aa:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   3c6ac:	f013 0307 	ands.w	r3, r3, #7
   3c6b0:	d105      	bne.n	3c6be <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   3c6b2:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   3c6b4:	2b00      	cmp	r3, #0
   3c6b6:	bf0c      	ite	eq
   3c6b8:	2000      	moveq	r0, #0
   3c6ba:	2003      	movne	r0, #3
   3c6bc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   3c6be:	2b02      	cmp	r3, #2
   3c6c0:	d105      	bne.n	3c6ce <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   3c6c2:	8bc3      	ldrh	r3, [r0, #30]
		evt = EVT_STOP;
   3c6c4:	2b00      	cmp	r3, #0
   3c6c6:	bf14      	ite	ne
   3c6c8:	2000      	movne	r0, #0
   3c6ca:	2004      	moveq	r0, #4
   3c6cc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   3c6ce:	2b01      	cmp	r3, #1
   3c6d0:	d105      	bne.n	3c6de <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   3c6d2:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   3c6d4:	2b00      	cmp	r3, #0
   3c6d6:	bf0c      	ite	eq
   3c6d8:	2000      	moveq	r0, #0
   3c6da:	2005      	movne	r0, #5
   3c6dc:	4770      	bx	lr
	int evt = EVT_NOP;
   3c6de:	2000      	movs	r0, #0
}
   3c6e0:	4770      	bx	lr

0003c6e2 <notify_one>:
{
   3c6e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3c6e4:	460d      	mov	r5, r1
   3c6e6:	4606      	mov	r6, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   3c6e8:	4619      	mov	r1, r3
   3c6ea:	1d28      	adds	r0, r5, #4
{
   3c6ec:	9201      	str	r2, [sp, #4]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   3c6ee:	9300      	str	r3, [sp, #0]
   3c6f0:	f7e4 fa22 	bl	20b38 <sys_notify_finalize>
	if (cb) {
   3c6f4:	4604      	mov	r4, r0
   3c6f6:	b140      	cbz	r0, 3c70a <notify_one+0x28>
		cb(mgr, cli, state, res);
   3c6f8:	e9dd 3200 	ldrd	r3, r2, [sp]
   3c6fc:	4629      	mov	r1, r5
   3c6fe:	4630      	mov	r0, r6
   3c700:	46a4      	mov	ip, r4
}
   3c702:	b002      	add	sp, #8
   3c704:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb(mgr, cli, state, res);
   3c708:	4760      	bx	ip
}
   3c70a:	b002      	add	sp, #8
   3c70c:	bd70      	pop	{r4, r5, r6, pc}

0003c70e <validate_args>:
{
   3c70e:	b510      	push	{r4, lr}
   3c710:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   3c712:	b140      	cbz	r0, 3c726 <validate_args+0x18>
   3c714:	b139      	cbz	r1, 3c726 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   3c716:	1d08      	adds	r0, r1, #4
   3c718:	f7ff ff84 	bl	3c624 <sys_notify_validate>
	if ((rv == 0)
   3c71c:	b928      	cbnz	r0, 3c72a <validate_args+0x1c>
	    && ((cli->notify.flags
   3c71e:	68a3      	ldr	r3, [r4, #8]
   3c720:	f033 0303 	bics.w	r3, r3, #3
   3c724:	d001      	beq.n	3c72a <validate_args+0x1c>
		rv = -EINVAL;
   3c726:	f06f 0015 	mvn.w	r0, #21
}
   3c72a:	bd10      	pop	{r4, pc}

0003c72c <onoff_manager_init>:
{
   3c72c:	b538      	push	{r3, r4, r5, lr}
   3c72e:	460c      	mov	r4, r1
	if ((mgr == NULL)
   3c730:	4605      	mov	r5, r0
   3c732:	b158      	cbz	r0, 3c74c <onoff_manager_init+0x20>
	    || (transitions == NULL)
   3c734:	b151      	cbz	r1, 3c74c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   3c736:	680b      	ldr	r3, [r1, #0]
   3c738:	b143      	cbz	r3, 3c74c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   3c73a:	684b      	ldr	r3, [r1, #4]
   3c73c:	b133      	cbz	r3, 3c74c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   3c73e:	2220      	movs	r2, #32
   3c740:	2100      	movs	r1, #0
   3c742:	f004 fe4f 	bl	413e4 <memset>
	return 0;
   3c746:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   3c748:	612c      	str	r4, [r5, #16]
}
   3c74a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   3c74c:	f06f 0015 	mvn.w	r0, #21
   3c750:	e7fb      	b.n	3c74a <onoff_manager_init+0x1e>

0003c752 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   3c752:	4604      	mov	r4, r0
   3c754:	b508      	push	{r3, lr}
   3c756:	4608      	mov	r0, r1
   3c758:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   3c75a:	461a      	mov	r2, r3
   3c75c:	47a0      	blx	r4
   3c75e:	f7fb ff77 	bl	38650 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   3c762:	f7e6 fe3b 	bl	233dc <z_impl_k_thread_abort>

0003c766 <chunk_size>:
		return ((uint16_t *)cmem)[f];
   3c766:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   3c76a:	8848      	ldrh	r0, [r1, #2]
}
   3c76c:	0840      	lsrs	r0, r0, #1
   3c76e:	4770      	bx	lr

0003c770 <free_list_add>:
{
   3c770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3c772:	460c      	mov	r4, r1
   3c774:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   3c776:	f7ff fff6 	bl	3c766 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   3c77a:	fab0 f080 	clz	r0, r0
   3c77e:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   3c782:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   3c786:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   3c78a:	00e2      	lsls	r2, r4, #3
		((uint16_t *)cmem)[f] = val;
   3c78c:	1d17      	adds	r7, r2, #4
   3c78e:	b2a5      	uxth	r5, r4
   3c790:	3206      	adds	r2, #6
   3c792:	b956      	cbnz	r6, 3c7aa <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   3c794:	2101      	movs	r1, #1
   3c796:	fa01 f000 	lsl.w	r0, r1, r0
   3c79a:	68d9      	ldr	r1, [r3, #12]
   3c79c:	4301      	orrs	r1, r0
   3c79e:	60d9      	str	r1, [r3, #12]
		b->next = c;
   3c7a0:	f8cc 4010 	str.w	r4, [ip, #16]
   3c7a4:	53dd      	strh	r5, [r3, r7]
   3c7a6:	529d      	strh	r5, [r3, r2]
}
   3c7a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   3c7aa:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   3c7ac:	3104      	adds	r1, #4
   3c7ae:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   3c7b0:	53d8      	strh	r0, [r3, r7]
   3c7b2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   3c7b6:	529e      	strh	r6, [r3, r2]
   3c7b8:	80c5      	strh	r5, [r0, #6]
   3c7ba:	525d      	strh	r5, [r3, r1]
   3c7bc:	e7f4      	b.n	3c7a8 <free_list_add+0x38>

0003c7be <free_list_remove_bidx>:
{
   3c7be:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   3c7c0:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   3c7c4:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   3c7c6:	4299      	cmp	r1, r3
   3c7c8:	f102 0104 	add.w	r1, r2, #4
   3c7cc:	d10a      	bne.n	3c7e4 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   3c7ce:	2301      	movs	r3, #1
   3c7d0:	fa03 f202 	lsl.w	r2, r3, r2
   3c7d4:	68c3      	ldr	r3, [r0, #12]
   3c7d6:	ea23 0302 	bic.w	r3, r3, r2
   3c7da:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   3c7dc:	2300      	movs	r3, #0
   3c7de:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   3c7e2:	bd10      	pop	{r4, pc}
   3c7e4:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   3c7e6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   3c7ea:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   3c7ee:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   3c7f2:	80cb      	strh	r3, [r1, #6]
   3c7f4:	8082      	strh	r2, [r0, #4]
}
   3c7f6:	e7f4      	b.n	3c7e2 <free_list_remove_bidx+0x24>

0003c7f8 <free_list_remove>:
{
   3c7f8:	b510      	push	{r4, lr}
   3c7fa:	4603      	mov	r3, r0
   3c7fc:	460c      	mov	r4, r1
		int bidx = bucket_idx(h, chunk_size(h, c));
   3c7fe:	f7ff ffb2 	bl	3c766 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   3c802:	fab0 f080 	clz	r0, r0
		free_list_remove_bidx(h, c, bidx);
   3c806:	4621      	mov	r1, r4
}
   3c808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		free_list_remove_bidx(h, c, bidx);
   3c80c:	f1c0 021f 	rsb	r2, r0, #31
   3c810:	4618      	mov	r0, r3
   3c812:	f7ff bfd4 	b.w	3c7be <free_list_remove_bidx>

0003c816 <alloc_chunk>:
{
   3c816:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3c81a:	fab1 f581 	clz	r5, r1
   3c81e:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   3c822:	eb00 0789 	add.w	r7, r0, r9, lsl #2
   3c826:	693a      	ldr	r2, [r7, #16]
{
   3c828:	4603      	mov	r3, r0
   3c82a:	460e      	mov	r6, r1
	if (b->next) {
   3c82c:	b1ca      	cbz	r2, 3c862 <alloc_chunk+0x4c>
   3c82e:	f04f 0803 	mov.w	r8, #3
			chunkid_t c = b->next;
   3c832:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   3c834:	4618      	mov	r0, r3
   3c836:	4621      	mov	r1, r4
   3c838:	f7ff ff95 	bl	3c766 <chunk_size>
   3c83c:	42b0      	cmp	r0, r6
   3c83e:	d307      	bcc.n	3c850 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   3c840:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   3c842:	4621      	mov	r1, r4
   3c844:	4618      	mov	r0, r3
   3c846:	f7ff ffba 	bl	3c7be <free_list_remove_bidx>
}
   3c84a:	4620      	mov	r0, r4
   3c84c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   3c850:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   3c854:	88e1      	ldrh	r1, [r4, #6]
		} while (--i && b->next != first);
   3c856:	f1b8 0801 	subs.w	r8, r8, #1
			b->next = next_free_chunk(h, c);
   3c85a:	6139      	str	r1, [r7, #16]
		} while (--i && b->next != first);
   3c85c:	d001      	beq.n	3c862 <alloc_chunk+0x4c>
   3c85e:	428a      	cmp	r2, r1
   3c860:	d1e7      	bne.n	3c832 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   3c862:	f04f 34ff 	mov.w	r4, #4294967295
   3c866:	68d9      	ldr	r1, [r3, #12]
   3c868:	f1c5 0520 	rsb	r5, r5, #32
   3c86c:	40ac      	lsls	r4, r5
	if (bmask != 0U) {
   3c86e:	400c      	ands	r4, r1
   3c870:	d0eb      	beq.n	3c84a <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   3c872:	fa94 f2a4 	rbit	r2, r4
   3c876:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   3c87a:	1d11      	adds	r1, r2, #4
   3c87c:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
   3c880:	e7df      	b.n	3c842 <alloc_chunk+0x2c>

0003c882 <merge_chunks>:
{
   3c882:	b538      	push	{r3, r4, r5, lr}
   3c884:	4603      	mov	r3, r0
   3c886:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   3c888:	f7ff ff6d 	bl	3c766 <chunk_size>
   3c88c:	4611      	mov	r1, r2
   3c88e:	4604      	mov	r4, r0
   3c890:	4618      	mov	r0, r3
   3c892:	f7ff ff68 	bl	3c766 <chunk_size>
   3c896:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   3c898:	0061      	lsls	r1, r4, #1
		((uint16_t *)cmem)[f] = val;
   3c89a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   3c89e:	8069      	strh	r1, [r5, #2]
	return c + chunk_size(h, c);
   3c8a0:	4618      	mov	r0, r3
   3c8a2:	4611      	mov	r1, r2
   3c8a4:	f7ff ff5f 	bl	3c766 <chunk_size>
	void *cmem = &buf[c];
   3c8a8:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   3c8aa:	f823 4032 	strh.w	r4, [r3, r2, lsl #3]
}
   3c8ae:	bd38      	pop	{r3, r4, r5, pc}

0003c8b0 <split_chunks>:
{
   3c8b0:	b538      	push	{r3, r4, r5, lr}
   3c8b2:	460c      	mov	r4, r1
   3c8b4:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   3c8b6:	f7ff ff56 	bl	3c766 <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   3c8ba:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   3c8bc:	1b11      	subs	r1, r2, r4
	chunksz_t rsz = sz0 - lsz;
   3c8be:	4405      	add	r5, r0
   3c8c0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   3c8c4:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   3c8c6:	8060      	strh	r0, [r4, #2]
   3c8c8:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   3c8cc:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   3c8ce:	8044      	strh	r4, [r0, #2]
   3c8d0:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   3c8d4:	4618      	mov	r0, r3
   3c8d6:	4611      	mov	r1, r2
   3c8d8:	f7ff ff45 	bl	3c766 <chunk_size>
	void *cmem = &buf[c];
   3c8dc:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   3c8de:	f823 5032 	strh.w	r5, [r3, r2, lsl #3]
}
   3c8e2:	bd38      	pop	{r3, r4, r5, pc}

0003c8e4 <free_chunk>:
{
   3c8e4:	b538      	push	{r3, r4, r5, lr}
   3c8e6:	4605      	mov	r5, r0
   3c8e8:	460c      	mov	r4, r1
	return c + chunk_size(h, c);
   3c8ea:	f7ff ff3c 	bl	3c766 <chunk_size>
   3c8ee:	1821      	adds	r1, r4, r0
		return ((uint16_t *)cmem)[f];
   3c8f0:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   3c8f4:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   3c8f6:	07da      	lsls	r2, r3, #31
   3c8f8:	d40b      	bmi.n	3c912 <free_chunk+0x2e>
		free_list_remove(h, right_chunk(h, c));
   3c8fa:	4628      	mov	r0, r5
   3c8fc:	f7ff ff7c 	bl	3c7f8 <free_list_remove>
	return c + chunk_size(h, c);
   3c900:	4621      	mov	r1, r4
   3c902:	4628      	mov	r0, r5
   3c904:	f7ff ff2f 	bl	3c766 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   3c908:	4621      	mov	r1, r4
   3c90a:	1822      	adds	r2, r4, r0
   3c90c:	4628      	mov	r0, r5
   3c90e:	f7ff ffb8 	bl	3c882 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   3c912:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   3c916:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   3c918:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   3c91c:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   3c91e:	07db      	lsls	r3, r3, #31
   3c920:	d40c      	bmi.n	3c93c <free_chunk+0x58>
		free_list_remove(h, left_chunk(h, c));
   3c922:	4628      	mov	r0, r5
   3c924:	f7ff ff68 	bl	3c7f8 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   3c928:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   3c92c:	4622      	mov	r2, r4
   3c92e:	1a61      	subs	r1, r4, r1
   3c930:	4628      	mov	r0, r5
   3c932:	f7ff ffa6 	bl	3c882 <merge_chunks>
   3c936:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   3c93a:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   3c93c:	4621      	mov	r1, r4
   3c93e:	4628      	mov	r0, r5
}
   3c940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   3c944:	f7ff bf14 	b.w	3c770 <free_list_add>

0003c948 <sys_heap_alloc>:
{
   3c948:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   3c94a:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   3c94c:	b909      	cbnz	r1, 3c952 <sys_heap_alloc+0xa>
		return NULL;
   3c94e:	2000      	movs	r0, #0
}
   3c950:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   3c952:	68ab      	ldr	r3, [r5, #8]
   3c954:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   3c958:	d9f9      	bls.n	3c94e <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   3c95a:	310b      	adds	r1, #11
   3c95c:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   3c95e:	4621      	mov	r1, r4
   3c960:	4628      	mov	r0, r5
   3c962:	f7ff ff58 	bl	3c816 <alloc_chunk>
	if (c == 0U) {
   3c966:	4606      	mov	r6, r0
   3c968:	2800      	cmp	r0, #0
   3c96a:	d0f0      	beq.n	3c94e <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   3c96c:	4601      	mov	r1, r0
   3c96e:	4628      	mov	r0, r5
   3c970:	f7ff fef9 	bl	3c766 <chunk_size>
   3c974:	42a0      	cmp	r0, r4
   3c976:	d909      	bls.n	3c98c <sys_heap_alloc+0x44>
		split_chunks(h, c, c + chunk_sz);
   3c978:	4434      	add	r4, r6
   3c97a:	4631      	mov	r1, r6
   3c97c:	4628      	mov	r0, r5
   3c97e:	4622      	mov	r2, r4
   3c980:	f7ff ff96 	bl	3c8b0 <split_chunks>
		free_list_add(h, c + chunk_sz);
   3c984:	4621      	mov	r1, r4
   3c986:	4628      	mov	r0, r5
   3c988:	f7ff fef2 	bl	3c770 <free_list_add>
	void *cmem = &buf[c];
   3c98c:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   3c990:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   3c992:	8853      	ldrh	r3, [r2, #2]
   3c994:	3004      	adds	r0, #4
   3c996:	f043 0301 	orr.w	r3, r3, #1
   3c99a:	8053      	strh	r3, [r2, #2]
	return mem;
   3c99c:	e7d8      	b.n	3c950 <sys_heap_alloc+0x8>

0003c99e <_ldiv5>:
	uint32_t v_lo = *v;
   3c99e:	e9d0 2100 	ldrd	r2, r1, [r0]
{
   3c9a2:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
   3c9a4:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   3c9a8:	fba2 2403 	umull	r2, r4, r2, r3
   3c9ac:	18d5      	adds	r5, r2, r3
   3c9ae:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
   3c9b2:	fba1 1303 	umull	r1, r3, r1, r3
   3c9b6:	1852      	adds	r2, r2, r1
   3c9b8:	eb44 0403 	adc.w	r4, r4, r3
   3c9bc:	1952      	adds	r2, r2, r5
   3c9be:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
   3c9c2:	1889      	adds	r1, r1, r2
   3c9c4:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   3c9c8:	e9c0 1300 	strd	r1, r3, [r0]
}
   3c9cc:	bd30      	pop	{r4, r5, pc}

0003c9ce <_get_digit>:
	if (*digit_count > 0) {
   3c9ce:	680b      	ldr	r3, [r1, #0]
{
   3c9d0:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
   3c9d2:	2b00      	cmp	r3, #0
   3c9d4:	dd10      	ble.n	3c9f8 <_get_digit+0x2a>
		*fr *= 10U;
   3c9d6:	220a      	movs	r2, #10
		--*digit_count;
   3c9d8:	3b01      	subs	r3, #1
   3c9da:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
   3c9dc:	6803      	ldr	r3, [r0, #0]
   3c9de:	6844      	ldr	r4, [r0, #4]
   3c9e0:	fba3 1302 	umull	r1, r3, r3, r2
   3c9e4:	fb02 3304 	mla	r3, r2, r4, r3
		rval = ((*fr >> 60) & 0xF) + '0';
   3c9e8:	0f1a      	lsrs	r2, r3, #28
		*fr &= (BIT64(60) - 1U);
   3c9ea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
   3c9ee:	e9c0 1300 	strd	r1, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   3c9f2:	3230      	adds	r2, #48	; 0x30
}
   3c9f4:	4610      	mov	r0, r2
   3c9f6:	bd10      	pop	{r4, pc}
		rval = '0';
   3c9f8:	2230      	movs	r2, #48	; 0x30
   3c9fa:	e7fb      	b.n	3c9f4 <_get_digit+0x26>

0003c9fc <outs>:
{
   3c9fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3ca00:	4680      	mov	r8, r0
   3ca02:	4689      	mov	r9, r1
   3ca04:	4616      	mov	r6, r2
   3ca06:	461f      	mov	r7, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   3ca08:	4615      	mov	r5, r2
   3ca0a:	42bd      	cmp	r5, r7
   3ca0c:	eba5 0406 	sub.w	r4, r5, r6
   3ca10:	d305      	bcc.n	3ca1e <outs+0x22>
   3ca12:	b10f      	cbz	r7, 3ca18 <outs+0x1c>
	return (int)count;
   3ca14:	4620      	mov	r0, r4
   3ca16:	e008      	b.n	3ca2a <outs+0x2e>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   3ca18:	782b      	ldrb	r3, [r5, #0]
   3ca1a:	2b00      	cmp	r3, #0
   3ca1c:	d0fa      	beq.n	3ca14 <outs+0x18>
		int rc = out((int)*sp++, ctx);
   3ca1e:	4649      	mov	r1, r9
   3ca20:	f815 0b01 	ldrb.w	r0, [r5], #1
   3ca24:	47c0      	blx	r8
		if (rc < 0) {
   3ca26:	2800      	cmp	r0, #0
   3ca28:	daef      	bge.n	3ca0a <outs+0xe>
}
   3ca2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0003ca2e <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   3ca2e:	4040      	eors	r0, r0
   3ca30:	f380 8811 	msr	BASEPRI, r0
   3ca34:	f04f 0004 	mov.w	r0, #4
   3ca38:	df02      	svc	2
}
   3ca3a:	4770      	bx	lr

0003ca3c <assert_print>:

void assert_print(const char *fmt, ...)
{
   3ca3c:	b40f      	push	{r0, r1, r2, r3}
   3ca3e:	b507      	push	{r0, r1, r2, lr}
   3ca40:	a904      	add	r1, sp, #16
   3ca42:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   3ca46:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   3ca48:	f7e4 f8b0 	bl	20bac <vprintk>

	va_end(ap);
}
   3ca4c:	b003      	add	sp, #12
   3ca4e:	f85d eb04 	ldr.w	lr, [sp], #4
   3ca52:	b004      	add	sp, #16
   3ca54:	4770      	bx	lr

0003ca56 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_SIGNATURE_KEY_FILE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_EXTRA_IMGTOOL_ARGS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
   3ca56:	4770      	bx	lr

0003ca58 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   3ca58:	2806      	cmp	r0, #6
   3ca5a:	d108      	bne.n	3ca6e <pm_state_set+0x16>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   3ca5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   3ca60:	2201      	movs	r2, #1
   3ca62:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   3ca66:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   3ca6a:	bf20      	wfe
    while (true)
   3ca6c:	e7fd      	b.n	3ca6a <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   3ca6e:	4770      	bx	lr

0003ca70 <pm_state_exit_post_ops>:
   3ca70:	2300      	movs	r3, #0
   3ca72:	f383 8811 	msr	BASEPRI, r3
   3ca76:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   3ca7a:	4770      	bx	lr

0003ca7c <soc_secure_mem_read>:
	__ASSERT(result == 0, "GPIO service error (%d)", result);
}
#endif /* defined(GPIO_PIN_CNF_MCUSEL_Msk) */

int soc_secure_mem_read(void *dst, void *src, size_t len)
{
   3ca7c:	b507      	push	{r0, r1, r2, lr}
	enum tfm_platform_err_t status;
	uint32_t result;

	status = tfm_platform_mem_read(dst, (uintptr_t)src, len, &result);
   3ca7e:	ab01      	add	r3, sp, #4
   3ca80:	f004 fc1f 	bl	412c2 <tfm_platform_mem_read>

	switch (status) {
   3ca84:	2802      	cmp	r0, #2
   3ca86:	d00a      	beq.n	3ca9e <soc_secure_mem_read+0x22>
   3ca88:	2803      	cmp	r0, #3
   3ca8a:	d00b      	beq.n	3caa4 <soc_secure_mem_read+0x28>
   3ca8c:	b968      	cbnz	r0, 3caaa <soc_secure_mem_read+0x2e>
	case TFM_PLATFORM_ERR_INVALID_PARAM:
		return -EINVAL;
	case TFM_PLATFORM_ERR_NOT_SUPPORTED:
		return -ENOTSUP;
	case TFM_PLATFORM_ERR_SUCCESS:
		if (result == 0) {
   3ca8e:	9801      	ldr	r0, [sp, #4]
   3ca90:	3800      	subs	r0, #0
   3ca92:	bf18      	it	ne
   3ca94:	2001      	movne	r0, #1
   3ca96:	4240      	negs	r0, r0
		}
		/* Fallthrough */
	default:
		return -EPERM;
	}
}
   3ca98:	b003      	add	sp, #12
   3ca9a:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   3ca9e:	f06f 0015 	mvn.w	r0, #21
   3caa2:	e7f9      	b.n	3ca98 <soc_secure_mem_read+0x1c>
	switch (status) {
   3caa4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3caa8:	e7f6      	b.n	3ca98 <soc_secure_mem_read+0x1c>
		return -EPERM;
   3caaa:	f04f 30ff 	mov.w	r0, #4294967295
   3caae:	e7f3      	b.n	3ca98 <soc_secure_mem_read+0x1c>

0003cab0 <z_log_minimal_printk>:
{
   3cab0:	b40f      	push	{r0, r1, r2, r3}
   3cab2:	b507      	push	{r0, r1, r2, lr}
   3cab4:	a904      	add	r1, sp, #16
   3cab6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   3caba:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   3cabc:	f7e4 f876 	bl	20bac <vprintk>
}
   3cac0:	b003      	add	sp, #12
   3cac2:	f85d eb04 	ldr.w	lr, [sp], #4
   3cac6:	b004      	add	sp, #16
   3cac8:	4770      	bx	lr

0003caca <fcb_len_in_flash.isra.0>:
int fcb_put_len(const struct fcb *fcb, uint8_t *buf, uint16_t len);
int fcb_get_len(const struct fcb *fcb, uint8_t *buf, uint16_t *len);

static inline int fcb_len_in_flash(struct fcb *fcb, uint16_t len)
{
	if (fcb->f_align <= 1U) {
   3caca:	2801      	cmp	r0, #1
		return len;
	}
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   3cacc:	bf89      	itett	hi
   3cace:	f100 33ff 	addhi.w	r3, r0, #4294967295
		return len;
   3cad2:	4608      	movls	r0, r1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   3cad4:	18c9      	addhi	r1, r1, r3
   3cad6:	4240      	neghi	r0, r0
   3cad8:	bf88      	it	hi
   3cada:	4008      	andhi	r0, r1
}
   3cadc:	4770      	bx	lr

0003cade <fcb_append_to_scratch>:
{
   3cade:	b538      	push	{r3, r4, r5, lr}
   3cae0:	4604      	mov	r4, r0
		cur = fcb_getnext_sector(fcb, cur);
   3cae2:	6a41      	ldr	r1, [r0, #36]	; 0x24
   3cae4:	f000 fa44 	bl	3cf70 <fcb_getnext_sector>
		if (cur == fcb->f_oldest) {
   3cae8:	6a23      	ldr	r3, [r4, #32]
		cur = fcb_getnext_sector(fcb, cur);
   3caea:	4605      	mov	r5, r0
		if (cur == fcb->f_oldest) {
   3caec:	4298      	cmp	r0, r3
   3caee:	d00f      	beq.n	3cb10 <fcb_append_to_scratch+0x32>
	if (!sector) {
   3caf0:	b170      	cbz	r0, 3cb10 <fcb_append_to_scratch+0x32>
	rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   3caf2:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   3caf4:	4601      	mov	r1, r0
   3caf6:	3201      	adds	r2, #1
   3caf8:	4620      	mov	r0, r4
   3cafa:	b292      	uxth	r2, r2
   3cafc:	f000 f8c7 	bl	3cc8e <fcb_sector_hdr_init>
	if (rc) {
   3cb00:	b928      	cbnz	r0, 3cb0e <fcb_append_to_scratch+0x30>
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   3cb02:	2308      	movs	r3, #8
   3cb04:	62a3      	str	r3, [r4, #40]	; 0x28
	fcb->f_active_id++;
   3cb06:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
	fcb->f_active.fe_sector = sector;
   3cb08:	6265      	str	r5, [r4, #36]	; 0x24
	fcb->f_active_id++;
   3cb0a:	3301      	adds	r3, #1
   3cb0c:	86a3      	strh	r3, [r4, #52]	; 0x34
}
   3cb0e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOSPC;
   3cb10:	f06f 001b 	mvn.w	r0, #27
   3cb14:	e7fb      	b.n	3cb0e <fcb_append_to_scratch+0x30>

0003cb16 <fcb_append_finish>:

int
fcb_append_finish(struct fcb *fcb, struct fcb_entry *loc)
{
   3cb16:	b5f0      	push	{r4, r5, r6, r7, lr}
   3cb18:	b083      	sub	sp, #12
   3cb1a:	4604      	mov	r4, r0
   3cb1c:	460d      	mov	r5, r1
	int rc;
	uint8_t crc8[fcb->f_align];
   3cb1e:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
{
   3cb22:	af02      	add	r7, sp, #8
	uint8_t crc8[fcb->f_align];
   3cb24:	1dd3      	adds	r3, r2, #7
   3cb26:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
   3cb2a:	ebad 0d03 	sub.w	sp, sp, r3
   3cb2e:	ae02      	add	r6, sp, #8
__ssp_bos_icheck3(memset, void *, int)
   3cb30:	21ff      	movs	r1, #255	; 0xff
   3cb32:	4630      	mov	r0, r6
   3cb34:	f004 fc56 	bl	413e4 <memset>
	off_t off;

	(void)memset(crc8, 0xFF, sizeof(crc8));

	rc = fcb_elem_crc8(fcb, loc, &crc8[0]);
   3cb38:	4632      	mov	r2, r6
   3cb3a:	4629      	mov	r1, r5
   3cb3c:	4620      	mov	r0, r4
   3cb3e:	f000 f96d 	bl	3ce1c <fcb_elem_crc8>
	if (rc) {
   3cb42:	b988      	cbnz	r0, 3cb68 <fcb_append_finish+0x52>
		return rc;
	}
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   3cb44:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
   3cb48:	89a9      	ldrh	r1, [r5, #12]
   3cb4a:	4610      	mov	r0, r2
   3cb4c:	f7ff ffbd 	bl	3caca <fcb_len_in_flash.isra.0>
   3cb50:	68a9      	ldr	r1, [r5, #8]

	rc = fcb_flash_write(fcb, loc->fe_sector, off, crc8, fcb->f_align);
   3cb52:	9200      	str	r2, [sp, #0]
   3cb54:	4633      	mov	r3, r6
   3cb56:	1842      	adds	r2, r0, r1
   3cb58:	4620      	mov	r0, r4
   3cb5a:	6829      	ldr	r1, [r5, #0]
   3cb5c:	f000 f823 	bl	3cba6 <fcb_flash_write>
	if (rc) {
		return -EIO;
   3cb60:	2800      	cmp	r0, #0
   3cb62:	bf18      	it	ne
   3cb64:	f06f 0004 	mvnne.w	r0, #4
	}
	return 0;
}
   3cb68:	3704      	adds	r7, #4
   3cb6a:	46bd      	mov	sp, r7
   3cb6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003cb6e <fcb_get_align>:
uint8_t
fcb_get_align(const struct fcb *fcb)
{
	uint8_t align;

	if (fcb->fap == NULL) {
   3cb6e:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
   3cb70:	b508      	push	{r3, lr}
	if (fcb->fap == NULL) {
   3cb72:	b110      	cbz	r0, 3cb7a <fcb_get_align+0xc>
		return 0;
	}

	align = flash_area_align(fcb->fap);
   3cb74:	f000 fc5a 	bl	3d42c <flash_area_align>
   3cb78:	b2c0      	uxtb	r0, r0

	return align;
}
   3cb7a:	bd08      	pop	{r3, pc}

0003cb7c <fcb_flash_read>:

int fcb_flash_read(const struct fcb *fcb, const struct flash_sector *sector,
		   off_t off, void *dst, size_t len)
{
   3cb7c:	b570      	push	{r4, r5, r6, lr}
   3cb7e:	4614      	mov	r4, r2
   3cb80:	461a      	mov	r2, r3
   3cb82:	9b04      	ldr	r3, [sp, #16]
	int rc;

	if (off + len > sector->fs_size) {
   3cb84:	684d      	ldr	r5, [r1, #4]
   3cb86:	18e6      	adds	r6, r4, r3
   3cb88:	42ae      	cmp	r6, r5
   3cb8a:	d809      	bhi.n	3cba0 <fcb_flash_read+0x24>
		return -EINVAL;
	}

	if (fcb->fap == NULL) {
   3cb8c:	6b80      	ldr	r0, [r0, #56]	; 0x38
   3cb8e:	b120      	cbz	r0, 3cb9a <fcb_flash_read+0x1e>
		return -EIO;
	}

	rc = flash_area_read(fcb->fap, sector->fs_off + off, dst, len);
   3cb90:	6809      	ldr	r1, [r1, #0]
   3cb92:	4421      	add	r1, r4
   3cb94:	f000 fbfb 	bl	3d38e <flash_area_read>

	if (rc != 0) {
   3cb98:	b108      	cbz	r0, 3cb9e <fcb_flash_read+0x22>
		return -EIO;
   3cb9a:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   3cb9e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   3cba0:	f06f 0015 	mvn.w	r0, #21
   3cba4:	e7fb      	b.n	3cb9e <fcb_flash_read+0x22>

0003cba6 <fcb_flash_write>:

int fcb_flash_write(const struct fcb *fcb, const struct flash_sector *sector,
		    off_t off, const void *src, size_t len)
{
   3cba6:	b570      	push	{r4, r5, r6, lr}
   3cba8:	4614      	mov	r4, r2
   3cbaa:	461a      	mov	r2, r3
   3cbac:	9b04      	ldr	r3, [sp, #16]
	int rc;

	if (off + len > sector->fs_size) {
   3cbae:	684d      	ldr	r5, [r1, #4]
   3cbb0:	18e6      	adds	r6, r4, r3
   3cbb2:	42ae      	cmp	r6, r5
   3cbb4:	d809      	bhi.n	3cbca <fcb_flash_write+0x24>
		return -EINVAL;
	}

	if (fcb->fap == NULL) {
   3cbb6:	6b80      	ldr	r0, [r0, #56]	; 0x38
   3cbb8:	b120      	cbz	r0, 3cbc4 <fcb_flash_write+0x1e>
		return -EIO;
	}

	rc = flash_area_write(fcb->fap, sector->fs_off + off, src, len);
   3cbba:	6809      	ldr	r1, [r1, #0]
   3cbbc:	4421      	add	r1, r4
   3cbbe:	f000 fc02 	bl	3d3c6 <flash_area_write>

	if (rc != 0) {
   3cbc2:	b108      	cbz	r0, 3cbc8 <fcb_flash_write+0x22>
		return -EIO;
   3cbc4:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   3cbc8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   3cbca:	f06f 0015 	mvn.w	r0, #21
   3cbce:	e7fb      	b.n	3cbc8 <fcb_flash_write+0x22>

0003cbd0 <fcb_erase_sector>:
int
fcb_erase_sector(const struct fcb *fcb, const struct flash_sector *sector)
{
	int rc;

	if (fcb->fap == NULL) {
   3cbd0:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
   3cbd2:	b508      	push	{r3, lr}
	if (fcb->fap == NULL) {
   3cbd4:	b120      	cbz	r0, 3cbe0 <fcb_erase_sector+0x10>
		return -EIO;
	}

	rc = flash_area_erase(fcb->fap, sector->fs_off, sector->fs_size);
   3cbd6:	e9d1 1200 	ldrd	r1, r2, [r1]
   3cbda:	f000 fc10 	bl	3d3fe <flash_area_erase>

	if (rc != 0) {
   3cbde:	b108      	cbz	r0, 3cbe4 <fcb_erase_sector+0x14>
		return -EIO;
   3cbe0:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   3cbe4:	bd08      	pop	{r3, pc}

0003cbe6 <fcb_free_sector_cnt>:
	return rc;
}

int
fcb_free_sector_cnt(struct fcb *fcb)
{
   3cbe6:	b538      	push	{r3, r4, r5, lr}
   3cbe8:	4604      	mov	r4, r0
	int i;
	struct flash_sector *fa;

	fa = fcb->f_active.fe_sector;
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   3cbea:	2500      	movs	r5, #0
	fa = fcb->f_active.fe_sector;
   3cbec:	6a41      	ldr	r1, [r0, #36]	; 0x24
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   3cbee:	7963      	ldrb	r3, [r4, #5]
   3cbf0:	42ab      	cmp	r3, r5
   3cbf2:	dc01      	bgt.n	3cbf8 <fcb_free_sector_cnt+0x12>
		if (fa == fcb->f_oldest) {
			break;
		}
	}
	return i;
}
   3cbf4:	4628      	mov	r0, r5
   3cbf6:	bd38      	pop	{r3, r4, r5, pc}
		fa = fcb_getnext_sector(fcb, fa);
   3cbf8:	4620      	mov	r0, r4
   3cbfa:	f000 f9b9 	bl	3cf70 <fcb_getnext_sector>
		if (fa == fcb->f_oldest) {
   3cbfe:	6a23      	ldr	r3, [r4, #32]
		fa = fcb_getnext_sector(fcb, fa);
   3cc00:	4601      	mov	r1, r0
		if (fa == fcb->f_oldest) {
   3cc02:	4283      	cmp	r3, r0
   3cc04:	d0f6      	beq.n	3cbf4 <fcb_free_sector_cnt+0xe>
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   3cc06:	3501      	adds	r5, #1
   3cc08:	e7f1      	b.n	3cbee <fcb_free_sector_cnt+0x8>

0003cc0a <fcb_put_len>:
 * and if there is any data at all or both bytes are equal to erase value.
 */
int
fcb_put_len(const struct fcb *fcb, uint8_t *buf, uint16_t len)
{
	if (len < 0x80) {
   3cc0a:	2a7f      	cmp	r2, #127	; 0x7f
{
   3cc0c:	b510      	push	{r4, lr}
	if (len < 0x80) {
   3cc0e:	d806      	bhi.n	3cc1e <fcb_put_len+0x14>
		buf[0] = len ^ ~fcb->f_erase_value;
   3cc10:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
		return 1;
   3cc14:	2001      	movs	r0, #1
		buf[0] = len ^ ~fcb->f_erase_value;
   3cc16:	405a      	eors	r2, r3
   3cc18:	43d2      	mvns	r2, r2
   3cc1a:	700a      	strb	r2, [r1, #0]
		buf[1] = (len >> 7) ^ ~fcb->f_erase_value;
		return 2;
	} else {
		return -EINVAL;
	}
}
   3cc1c:	bd10      	pop	{r4, pc}
	} else if (len < FCB_MAX_LEN) {
   3cc1e:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   3cc22:	429a      	cmp	r2, r3
   3cc24:	d80e      	bhi.n	3cc44 <fcb_put_len+0x3a>
		buf[0] = (len | 0x80) ^ ~fcb->f_erase_value;
   3cc26:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   3cc2a:	f062 047f 	orn	r4, r2, #127	; 0x7f
   3cc2e:	4063      	eors	r3, r4
   3cc30:	43db      	mvns	r3, r3
   3cc32:	700b      	strb	r3, [r1, #0]
		buf[1] = (len >> 7) ^ ~fcb->f_erase_value;
   3cc34:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
		return 2;
   3cc38:	2002      	movs	r0, #2
		buf[1] = (len >> 7) ^ ~fcb->f_erase_value;
   3cc3a:	ea83 12d2 	eor.w	r2, r3, r2, lsr #7
   3cc3e:	43d2      	mvns	r2, r2
   3cc40:	704a      	strb	r2, [r1, #1]
		return 2;
   3cc42:	e7eb      	b.n	3cc1c <fcb_put_len+0x12>
		return -EINVAL;
   3cc44:	f06f 0015 	mvn.w	r0, #21
   3cc48:	e7e8      	b.n	3cc1c <fcb_put_len+0x12>

0003cc4a <fcb_get_len>:

int
fcb_get_len(const struct fcb *fcb, uint8_t *buf, uint16_t *len)
{
   3cc4a:	b530      	push	{r4, r5, lr}
	int rc;

	if ((buf[0] ^ ~fcb->f_erase_value) & 0x80) {
   3cc4c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   3cc50:	780d      	ldrb	r5, [r1, #0]
   3cc52:	ea83 0405 	eor.w	r4, r3, r5
   3cc56:	f014 0f80 	tst.w	r4, #128	; 0x80
   3cc5a:	4620      	mov	r0, r4
   3cc5c:	d10f      	bne.n	3cc7e <fcb_get_len+0x34>
		if ((buf[0] == fcb->f_erase_value) &&
   3cc5e:	42ab      	cmp	r3, r5
		    (buf[1] == fcb->f_erase_value)) {
   3cc60:	7849      	ldrb	r1, [r1, #1]
		if ((buf[0] == fcb->f_erase_value) &&
   3cc62:	d101      	bne.n	3cc68 <fcb_get_len+0x1e>
   3cc64:	428b      	cmp	r3, r1
   3cc66:	d00f      	beq.n	3cc88 <fcb_get_len+0x3e>
			return -ENOTSUP;
		}
		*len = ((buf[0] ^ ~fcb->f_erase_value) & 0x7f) |
   3cc68:	43c0      	mvns	r0, r0
			((uint8_t)(buf[1] ^ ~fcb->f_erase_value) << 7);
   3cc6a:	404b      	eors	r3, r1
   3cc6c:	01db      	lsls	r3, r3, #7
		*len = ((buf[0] ^ ~fcb->f_erase_value) & 0x7f) |
   3cc6e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
			((uint8_t)(buf[1] ^ ~fcb->f_erase_value) << 7);
   3cc72:	f483 43ff 	eor.w	r3, r3, #32640	; 0x7f80
		*len = ((buf[0] ^ ~fcb->f_erase_value) & 0x7f) |
   3cc76:	4303      	orrs	r3, r0
		rc = 2;
   3cc78:	2002      	movs	r0, #2
		*len = ((buf[0] ^ ~fcb->f_erase_value) & 0x7f) |
   3cc7a:	8013      	strh	r3, [r2, #0]
	} else {
		*len = (uint8_t)(buf[0] ^ ~fcb->f_erase_value);
		rc = 1;
	}
	return rc;
}
   3cc7c:	bd30      	pop	{r4, r5, pc}
		*len = (uint8_t)(buf[0] ^ ~fcb->f_erase_value);
   3cc7e:	43e3      	mvns	r3, r4
   3cc80:	b2db      	uxtb	r3, r3
		rc = 1;
   3cc82:	2001      	movs	r0, #1
		*len = (uint8_t)(buf[0] ^ ~fcb->f_erase_value);
   3cc84:	8013      	strh	r3, [r2, #0]
		rc = 1;
   3cc86:	e7f9      	b.n	3cc7c <fcb_get_len+0x32>
			return -ENOTSUP;
   3cc88:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3cc8c:	e7f6      	b.n	3cc7c <fcb_get_len+0x32>

0003cc8e <fcb_sector_hdr_init>:
/**
 * Initialize erased sector for use.
 */
int
fcb_sector_hdr_init(struct fcb *fcb, struct flash_sector *sector, uint16_t id)
{
   3cc8e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const uint8_t ev = fcb->f_erase_value;
   3cc90:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
	return (fcb->f_magic ^ ~MK32(ev));
   3cc94:	6806      	ldr	r6, [r0, #0]
   3cc96:	0423      	lsls	r3, r4, #16
   3cc98:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   3cc9c:	4323      	orrs	r3, r4
   3cc9e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   3cca2:	4073      	eors	r3, r6
   3cca4:	43db      	mvns	r3, r3
	struct fcb_disk_area fda;
	int rc;

	fda.fd_magic = fcb_flash_magic(fcb);
   3cca6:	9302      	str	r3, [sp, #8]
	fda.fd_ver = fcb->f_version;
   3cca8:	7903      	ldrb	r3, [r0, #4]
	fda._pad = fcb->f_erase_value;
	fda.fd_id = id;
   3ccaa:	f8ad 200e 	strh.w	r2, [sp, #14]
	fda.fd_ver = fcb->f_version;
   3ccae:	f88d 300c 	strb.w	r3, [sp, #12]

	rc = fcb_flash_write(fcb, sector, 0, &fda, sizeof(fda));
   3ccb2:	2308      	movs	r3, #8
   3ccb4:	2200      	movs	r2, #0
   3ccb6:	9300      	str	r3, [sp, #0]
   3ccb8:	446b      	add	r3, sp
	fda._pad = fcb->f_erase_value;
   3ccba:	f88d 400d 	strb.w	r4, [sp, #13]
	rc = fcb_flash_write(fcb, sector, 0, &fda, sizeof(fda));
   3ccbe:	f7ff ff72 	bl	3cba6 <fcb_flash_write>
	if (rc != 0) {
		return -EIO;
   3ccc2:	2800      	cmp	r0, #0
	}
	return 0;
}
   3ccc4:	bf18      	it	ne
   3ccc6:	f06f 0004 	mvnne.w	r0, #4
   3ccca:	b004      	add	sp, #16
   3cccc:	bd70      	pop	{r4, r5, r6, pc}

0003ccce <fcb_sector_hdr_read>:
 * Returns 0 if sector is unused;
 * Returns 1 if sector has data.
 */
int fcb_sector_hdr_read(struct fcb *fcb, struct flash_sector *sector,
			struct fcb_disk_area *fdap)
{
   3ccce:	b530      	push	{r4, r5, lr}
   3ccd0:	4605      	mov	r5, r0
	struct fcb_disk_area fda;
	int rc;

	if (!fdap) {
   3ccd2:	4614      	mov	r4, r2
{
   3ccd4:	b085      	sub	sp, #20
	if (!fdap) {
   3ccd6:	b902      	cbnz	r2, 3ccda <fcb_sector_hdr_read+0xc>
		fdap = &fda;
   3ccd8:	ac02      	add	r4, sp, #8
	}
	rc = fcb_flash_read(fcb, sector, 0, fdap, sizeof(*fdap));
   3ccda:	2308      	movs	r3, #8
   3ccdc:	2200      	movs	r2, #0
   3ccde:	9300      	str	r3, [sp, #0]
   3cce0:	4628      	mov	r0, r5
   3cce2:	4623      	mov	r3, r4
   3cce4:	f7ff ff4a 	bl	3cb7c <fcb_flash_read>
	if (rc) {
   3cce8:	b9a0      	cbnz	r0, 3cd14 <fcb_sector_hdr_read+0x46>
		return -EIO;
	}
	if (fdap->fd_magic == MK32(fcb->f_erase_value)) {
   3ccea:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
   3ccee:	6821      	ldr	r1, [r4, #0]
   3ccf0:	0413      	lsls	r3, r2, #16
   3ccf2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   3ccf6:	4313      	orrs	r3, r2
   3ccf8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   3ccfc:	4299      	cmp	r1, r3
   3ccfe:	d007      	beq.n	3cd10 <fcb_sector_hdr_read+0x42>
   3cd00:	682a      	ldr	r2, [r5, #0]
   3cd02:	4053      	eors	r3, r2
   3cd04:	43db      	mvns	r3, r3
		return 0;
	}
	if (fdap->fd_magic != fcb_flash_magic(fcb)) {
		return -ENOMSG;
   3cd06:	4299      	cmp	r1, r3
   3cd08:	bf0c      	ite	eq
   3cd0a:	2001      	moveq	r0, #1
   3cd0c:	f06f 0022 	mvnne.w	r0, #34	; 0x22
	}
	return 1;
}
   3cd10:	b005      	add	sp, #20
   3cd12:	bd30      	pop	{r4, r5, pc}
		return -EIO;
   3cd14:	f06f 0004 	mvn.w	r0, #4
   3cd18:	e7fa      	b.n	3cd10 <fcb_sector_hdr_read+0x42>

0003cd1a <fcb_init>:
{
   3cd1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   3cd1e:	688b      	ldr	r3, [r1, #8]
{
   3cd20:	460c      	mov	r4, r1
   3cd22:	b085      	sub	sp, #20
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   3cd24:	b92b      	cbnz	r3, 3cd32 <fcb_init+0x18>
		return -EINVAL;
   3cd26:	f06f 0515 	mvn.w	r5, #21
}
   3cd2a:	4628      	mov	r0, r5
   3cd2c:	b005      	add	sp, #20
   3cd2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   3cd32:	794b      	ldrb	r3, [r1, #5]
   3cd34:	798a      	ldrb	r2, [r1, #6]
   3cd36:	1a9b      	subs	r3, r3, r2
   3cd38:	2b00      	cmp	r3, #0
   3cd3a:	ddf4      	ble.n	3cd26 <fcb_init+0xc>
	rc = flash_area_open(f_area_id, &fcb->fap);
   3cd3c:	3138      	adds	r1, #56	; 0x38
   3cd3e:	b2c0      	uxtb	r0, r0
   3cd40:	f7e4 ff78 	bl	21c34 <flash_area_open>
	if (rc != 0) {
   3cd44:	4606      	mov	r6, r0
   3cd46:	2800      	cmp	r0, #0
   3cd48:	d1ed      	bne.n	3cd26 <fcb_init+0xc>
	dev = device_get_binding(fcb->fap->fa_dev_name);
   3cd4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   3cd4c:	68d8      	ldr	r0, [r3, #12]
   3cd4e:	f7f9 f8ad 	bl	35eac <z_impl_device_get_binding>
	return api->get_parameters(dev);
   3cd52:	6883      	ldr	r3, [r0, #8]
   3cd54:	68db      	ldr	r3, [r3, #12]
   3cd56:	4798      	blx	r3
	fcb->f_erase_value = fparam->erase_value;
   3cd58:	7903      	ldrb	r3, [r0, #4]
	align = fcb_get_align(fcb);
   3cd5a:	4620      	mov	r0, r4
	fcb->f_erase_value = fparam->erase_value;
   3cd5c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	align = fcb_get_align(fcb);
   3cd60:	f7ff ff05 	bl	3cb6e <fcb_get_align>
	if (align == 0U) {
   3cd64:	4681      	mov	r9, r0
   3cd66:	2800      	cmp	r0, #0
   3cd68:	d0dd      	beq.n	3cd26 <fcb_init+0xc>
	int oldest = -1, newest = -1;
   3cd6a:	f04f 3bff 	mov.w	fp, #4294967295
	struct flash_sector *oldest_sector = NULL, *newest_sector = NULL;
   3cd6e:	46b2      	mov	sl, r6
   3cd70:	4637      	mov	r7, r6
	int oldest = -1, newest = -1;
   3cd72:	46d8      	mov	r8, fp
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   3cd74:	7963      	ldrb	r3, [r4, #5]
   3cd76:	42b3      	cmp	r3, r6
   3cd78:	dc24      	bgt.n	3cdc4 <fcb_init+0xaa>
	if (oldest < 0) {
   3cd7a:	f1b8 3fff 	cmp.w	r8, #4294967295
   3cd7e:	d149      	bne.n	3ce14 <fcb_init+0xfa>
		oldest_sector = newest_sector = &fcb->f_sectors[0];
   3cd80:	68a7      	ldr	r7, [r4, #8]
		rc = fcb_sector_hdr_init(fcb, oldest_sector, 0);
   3cd82:	2200      	movs	r2, #0
   3cd84:	4639      	mov	r1, r7
   3cd86:	4620      	mov	r0, r4
   3cd88:	f7ff ff81 	bl	3cc8e <fcb_sector_hdr_init>
		if (rc) {
   3cd8c:	4605      	mov	r5, r0
   3cd8e:	2800      	cmp	r0, #0
   3cd90:	d1cb      	bne.n	3cd2a <fcb_init+0x10>
		oldest_sector = newest_sector = &fcb->f_sectors[0];
   3cd92:	46ba      	mov	sl, r7
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   3cd94:	2308      	movs	r3, #8
	fcb->f_active.fe_sector = newest_sector;
   3cd96:	e9c4 7a08 	strd	r7, sl, [r4, #32]
	fcb->f_align = align;
   3cd9a:	f884 9036 	strb.w	r9, [r4, #54]	; 0x36
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   3cd9e:	62a3      	str	r3, [r4, #40]	; 0x28
	fcb->f_active_id = newest;
   3cda0:	86a5      	strh	r5, [r4, #52]	; 0x34
		rc = fcb_getnext_in_sector(fcb, &fcb->f_active);
   3cda2:	f104 0624 	add.w	r6, r4, #36	; 0x24
   3cda6:	4631      	mov	r1, r6
   3cda8:	4620      	mov	r0, r4
   3cdaa:	f000 f8be 	bl	3cf2a <fcb_getnext_in_sector>
		if (rc == -ENOTSUP) {
   3cdae:	f110 0f86 	cmn.w	r0, #134	; 0x86
		rc = fcb_getnext_in_sector(fcb, &fcb->f_active);
   3cdb2:	4605      	mov	r5, r0
		if (rc == -ENOTSUP) {
   3cdb4:	d030      	beq.n	3ce18 <fcb_init+0xfe>
		if (rc != 0) {
   3cdb6:	2800      	cmp	r0, #0
   3cdb8:	d0f5      	beq.n	3cda6 <fcb_init+0x8c>
	return z_impl_k_mutex_init(mutex);
   3cdba:	f104 000c 	add.w	r0, r4, #12
   3cdbe:	f004 f8c7 	bl	40f50 <z_impl_k_mutex_init>
   3cdc2:	e7b2      	b.n	3cd2a <fcb_init+0x10>
		sector = &fcb->f_sectors[i];
   3cdc4:	68a1      	ldr	r1, [r4, #8]
		rc = fcb_sector_hdr_read(fcb, sector, &fda);
   3cdc6:	4620      	mov	r0, r4
		sector = &fcb->f_sectors[i];
   3cdc8:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
		rc = fcb_sector_hdr_read(fcb, sector, &fda);
   3cdcc:	aa02      	add	r2, sp, #8
   3cdce:	9101      	str	r1, [sp, #4]
   3cdd0:	f7ff ff7d 	bl	3ccce <fcb_sector_hdr_read>
		if (rc < 0) {
   3cdd4:	1e05      	subs	r5, r0, #0
   3cdd6:	dba8      	blt.n	3cd2a <fcb_init+0x10>
		if (rc == 0) {
   3cdd8:	d009      	beq.n	3cdee <fcb_init+0xd4>
		if (oldest < 0) {
   3cdda:	f1b8 3fff 	cmp.w	r8, #4294967295
			oldest = newest = fda.fd_id;
   3cdde:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		if (oldest < 0) {
   3cde2:	9901      	ldr	r1, [sp, #4]
   3cde4:	d105      	bne.n	3cdf2 <fcb_init+0xd8>
			oldest = newest = fda.fd_id;
   3cde6:	4698      	mov	r8, r3
			oldest_sector = newest_sector = sector;
   3cde8:	468a      	mov	sl, r1
   3cdea:	460f      	mov	r7, r1
			oldest = newest = fda.fd_id;
   3cdec:	469b      	mov	fp, r3
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   3cdee:	3601      	adds	r6, #1
   3cdf0:	e7c0      	b.n	3cd74 <fcb_init+0x5a>
		if (FCB_ID_GT(fda.fd_id, newest)) {
   3cdf2:	b21d      	sxth	r5, r3
   3cdf4:	fa0f f08b 	sxth.w	r0, fp
   3cdf8:	1a28      	subs	r0, r5, r0
   3cdfa:	2800      	cmp	r0, #0
   3cdfc:	dd02      	ble.n	3ce04 <fcb_init+0xea>
			newest = fda.fd_id;
   3cdfe:	469b      	mov	fp, r3
			newest_sector = sector;
   3ce00:	468a      	mov	sl, r1
   3ce02:	e7f4      	b.n	3cdee <fcb_init+0xd4>
		} else if (FCB_ID_GT(oldest, fda.fd_id)) {
   3ce04:	fa0f f288 	sxth.w	r2, r8
   3ce08:	1b52      	subs	r2, r2, r5
			oldest = fda.fd_id;
   3ce0a:	2a00      	cmp	r2, #0
   3ce0c:	bfc4      	itt	gt
   3ce0e:	4698      	movgt	r8, r3
   3ce10:	460f      	movgt	r7, r1
   3ce12:	e7ec      	b.n	3cdee <fcb_init+0xd4>
   3ce14:	465d      	mov	r5, fp
   3ce16:	e7bd      	b.n	3cd94 <fcb_init+0x7a>
			rc = 0;
   3ce18:	2500      	movs	r5, #0
   3ce1a:	e7ce      	b.n	3cdba <fcb_init+0xa0>

0003ce1c <fcb_elem_crc8>:
 * Given offset in flash sector, fill in rest of the fcb_entry, and crc8 over
 * the data.
 */
int
fcb_elem_crc8(struct fcb *fcb, struct fcb_entry *loc, uint8_t *c8p)
{
   3ce1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3ce20:	460c      	mov	r4, r1
   3ce22:	4617      	mov	r7, r2
	uint16_t len;
	uint32_t off;
	uint32_t end;
	int rc;

	if (loc->fe_elem_off + 2 > loc->fe_sector->fs_size) {
   3ce24:	e9d1 1200 	ldrd	r1, r2, [r1]
   3ce28:	684b      	ldr	r3, [r1, #4]
   3ce2a:	1c95      	adds	r5, r2, #2
   3ce2c:	429d      	cmp	r5, r3
{
   3ce2e:	4606      	mov	r6, r0
   3ce30:	b08c      	sub	sp, #48	; 0x30
	if (loc->fe_elem_off + 2 > loc->fe_sector->fs_size) {
   3ce32:	d84c      	bhi.n	3cece <fcb_elem_crc8+0xb2>
		return -ENOTSUP;
	}
	rc = fcb_flash_read(fcb, loc->fe_sector, loc->fe_elem_off, tmp_str, 2);
   3ce34:	2302      	movs	r3, #2
   3ce36:	9300      	str	r3, [sp, #0]
   3ce38:	ab04      	add	r3, sp, #16
   3ce3a:	f7ff fe9f 	bl	3cb7c <fcb_flash_read>
	if (rc) {
   3ce3e:	b120      	cbz	r0, 3ce4a <fcb_elem_crc8+0x2e>
		return -EIO;
   3ce40:	f06f 0004 	mvn.w	r0, #4
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
	}
	*c8p = crc8;

	return 0;
}
   3ce44:	b00c      	add	sp, #48	; 0x30
   3ce46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	cnt = fcb_get_len(fcb, tmp_str, &len);
   3ce4a:	4630      	mov	r0, r6
   3ce4c:	f10d 020e 	add.w	r2, sp, #14
   3ce50:	a904      	add	r1, sp, #16
   3ce52:	f7ff fefa 	bl	3cc4a <fcb_get_len>
	if (cnt < 0) {
   3ce56:	2800      	cmp	r0, #0
   3ce58:	dbf4      	blt.n	3ce44 <fcb_elem_crc8+0x28>
	loc->fe_data_off = loc->fe_elem_off + fcb_len_in_flash(fcb, cnt);
   3ce5a:	f896 2036 	ldrb.w	r2, [r6, #54]	; 0x36
	if (fcb->f_align <= 1U) {
   3ce5e:	b283      	uxth	r3, r0
   3ce60:	2a01      	cmp	r2, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   3ce62:	bf84      	itt	hi
   3ce64:	f102 35ff 	addhi.w	r5, r2, #4294967295
   3ce68:	195b      	addhi	r3, r3, r5
   3ce6a:	6861      	ldr	r1, [r4, #4]
   3ce6c:	bf84      	itt	hi
   3ce6e:	4252      	neghi	r2, r2
   3ce70:	4013      	andhi	r3, r2
   3ce72:	440b      	add	r3, r1
   3ce74:	60a3      	str	r3, [r4, #8]
	loc->fe_data_len = len;
   3ce76:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	crc8 = crc8_ccitt(crc8, tmp_str, cnt);
   3ce7a:	4602      	mov	r2, r0
	loc->fe_data_len = len;
   3ce7c:	81a3      	strh	r3, [r4, #12]
	crc8 = crc8_ccitt(crc8, tmp_str, cnt);
   3ce7e:	20ff      	movs	r0, #255	; 0xff
   3ce80:	a904      	add	r1, sp, #16
   3ce82:	f7e3 fd8b 	bl	2099c <crc8_ccitt>
   3ce86:	4605      	mov	r5, r0
	off = loc->fe_data_off;
   3ce88:	f8d4 8008 	ldr.w	r8, [r4, #8]
	end = loc->fe_data_off + len;
   3ce8c:	f8bd a00e 	ldrh.w	sl, [sp, #14]
   3ce90:	44c2      	add	sl, r8
	for (; off < end; off += blk_sz) {
   3ce92:	45d0      	cmp	r8, sl
   3ce94:	d302      	bcc.n	3ce9c <fcb_elem_crc8+0x80>
	return 0;
   3ce96:	2000      	movs	r0, #0
	*c8p = crc8;
   3ce98:	703d      	strb	r5, [r7, #0]
	return 0;
   3ce9a:	e7d3      	b.n	3ce44 <fcb_elem_crc8+0x28>
		blk_sz = end - off;
   3ce9c:	ebaa 0908 	sub.w	r9, sl, r8
   3cea0:	f1b9 0f20 	cmp.w	r9, #32
   3cea4:	bf28      	it	cs
   3cea6:	f04f 0920 	movcs.w	r9, #32
		rc = fcb_flash_read(fcb, loc->fe_sector, off, tmp_str, blk_sz);
   3ceaa:	4642      	mov	r2, r8
   3ceac:	4630      	mov	r0, r6
   3ceae:	6821      	ldr	r1, [r4, #0]
   3ceb0:	f8cd 9000 	str.w	r9, [sp]
   3ceb4:	ab04      	add	r3, sp, #16
   3ceb6:	f7ff fe61 	bl	3cb7c <fcb_flash_read>
		if (rc) {
   3ceba:	2800      	cmp	r0, #0
   3cebc:	d1c0      	bne.n	3ce40 <fcb_elem_crc8+0x24>
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
   3cebe:	4628      	mov	r0, r5
   3cec0:	464a      	mov	r2, r9
   3cec2:	a904      	add	r1, sp, #16
   3cec4:	f7e3 fd6a 	bl	2099c <crc8_ccitt>
	for (; off < end; off += blk_sz) {
   3cec8:	44c8      	add	r8, r9
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
   3ceca:	4605      	mov	r5, r0
	for (; off < end; off += blk_sz) {
   3cecc:	e7e1      	b.n	3ce92 <fcb_elem_crc8+0x76>
		return -ENOTSUP;
   3cece:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3ced2:	e7b7      	b.n	3ce44 <fcb_elem_crc8+0x28>

0003ced4 <fcb_elem_info>:

int fcb_elem_info(struct fcb *fcb, struct fcb_entry *loc)
{
   3ced4:	b530      	push	{r4, r5, lr}
   3ced6:	b085      	sub	sp, #20
	int rc;
	uint8_t crc8;
	uint8_t fl_crc8;
	off_t off;

	rc = fcb_elem_crc8(fcb, loc, &crc8);
   3ced8:	f10d 020e 	add.w	r2, sp, #14
{
   3cedc:	4605      	mov	r5, r0
   3cede:	460c      	mov	r4, r1
	rc = fcb_elem_crc8(fcb, loc, &crc8);
   3cee0:	f7ff ff9c 	bl	3ce1c <fcb_elem_crc8>
	if (rc) {
   3cee4:	b9e0      	cbnz	r0, 3cf20 <fcb_elem_info+0x4c>
		return rc;
	}
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   3cee6:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
   3ceea:	89a2      	ldrh	r2, [r4, #12]
	if (fcb->f_align <= 1U) {
   3ceec:	2b01      	cmp	r3, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   3ceee:	bf81      	itttt	hi
   3cef0:	f102 32ff 	addhi.w	r2, r2, #4294967295
   3cef4:	18d2      	addhi	r2, r2, r3
   3cef6:	425b      	neghi	r3, r3
   3cef8:	401a      	andhi	r2, r3

	rc = fcb_flash_read(fcb, loc->fe_sector, off, &fl_crc8, sizeof(fl_crc8));
   3cefa:	2301      	movs	r3, #1
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   3cefc:	68a1      	ldr	r1, [r4, #8]
	rc = fcb_flash_read(fcb, loc->fe_sector, off, &fl_crc8, sizeof(fl_crc8));
   3cefe:	9300      	str	r3, [sp, #0]
   3cf00:	440a      	add	r2, r1
   3cf02:	4628      	mov	r0, r5
   3cf04:	6821      	ldr	r1, [r4, #0]
   3cf06:	f10d 030f 	add.w	r3, sp, #15
   3cf0a:	f7ff fe37 	bl	3cb7c <fcb_flash_read>
	if (rc) {
   3cf0e:	b948      	cbnz	r0, 3cf24 <fcb_elem_info+0x50>
		return -EIO;
	}

	if (fl_crc8 != crc8) {
   3cf10:	f89d 200f 	ldrb.w	r2, [sp, #15]
   3cf14:	f89d 300e 	ldrb.w	r3, [sp, #14]
		return -EBADMSG;
   3cf18:	429a      	cmp	r2, r3
   3cf1a:	bf18      	it	ne
   3cf1c:	f06f 004c 	mvnne.w	r0, #76	; 0x4c
	}
	return 0;
}
   3cf20:	b005      	add	sp, #20
   3cf22:	bd30      	pop	{r4, r5, pc}
		return -EIO;
   3cf24:	f06f 0004 	mvn.w	r0, #4
   3cf28:	e7fa      	b.n	3cf20 <fcb_elem_info+0x4c>

0003cf2a <fcb_getnext_in_sector>:
#include <fs/fcb.h>
#include "fcb_priv.h"

int
fcb_getnext_in_sector(struct fcb *fcb, struct fcb_entry *loc)
{
   3cf2a:	b538      	push	{r3, r4, r5, lr}
   3cf2c:	4604      	mov	r4, r0
   3cf2e:	460d      	mov	r5, r1
	int rc;

	rc = fcb_elem_info(fcb, loc);
   3cf30:	f7ff ffd0 	bl	3ced4 <fcb_elem_info>
	if (rc == 0 || rc == -EBADMSG) {
   3cf34:	b110      	cbz	r0, 3cf3c <fcb_getnext_in_sector+0x12>
   3cf36:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   3cf3a:	d118      	bne.n	3cf6e <fcb_getnext_in_sector+0x44>
		do {
			loc->fe_elem_off = loc->fe_data_off +
   3cf3c:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
			  fcb_len_in_flash(fcb, loc->fe_data_len) +
   3cf40:	89ab      	ldrh	r3, [r5, #12]
	if (fcb->f_align <= 1U) {
   3cf42:	2901      	cmp	r1, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   3cf44:	bf88      	it	hi
   3cf46:	f103 33ff 	addhi.w	r3, r3, #4294967295
			loc->fe_elem_off = loc->fe_data_off +
   3cf4a:	68aa      	ldr	r2, [r5, #8]
   3cf4c:	bf82      	ittt	hi
   3cf4e:	185b      	addhi	r3, r3, r1
   3cf50:	4248      	neghi	r0, r1
   3cf52:	4003      	andhi	r3, r0
	if (fcb->f_align <= 1U) {
   3cf54:	2901      	cmp	r1, #1
   3cf56:	4413      	add	r3, r2
		return len;
   3cf58:	bf92      	itee	ls
   3cf5a:	2201      	movls	r2, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   3cf5c:	424a      	neghi	r2, r1
   3cf5e:	400a      	andhi	r2, r1
			  fcb_len_in_flash(fcb, loc->fe_data_len) +
   3cf60:	4413      	add	r3, r2
			  fcb_len_in_flash(fcb, FCB_CRC_SZ);
			rc = fcb_elem_info(fcb, loc);
   3cf62:	4629      	mov	r1, r5
   3cf64:	4620      	mov	r0, r4
			loc->fe_elem_off = loc->fe_data_off +
   3cf66:	606b      	str	r3, [r5, #4]
			rc = fcb_elem_info(fcb, loc);
   3cf68:	f7ff ffb4 	bl	3ced4 <fcb_elem_info>
			if (rc != -EBADMSG) {
   3cf6c:	e7e3      	b.n	3cf36 <fcb_getnext_in_sector+0xc>
				break;
			}
		} while (rc == -EBADMSG);
	}
	return rc;
}
   3cf6e:	bd38      	pop	{r3, r4, r5, pc}

0003cf70 <fcb_getnext_sector>:

struct flash_sector *
fcb_getnext_sector(struct fcb *fcb, struct flash_sector *sector)
{
	sector++;
	if (sector >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   3cf70:	6882      	ldr	r2, [r0, #8]
   3cf72:	7943      	ldrb	r3, [r0, #5]
	sector++;
   3cf74:	3108      	adds	r1, #8
	if (sector >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   3cf76:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		sector = &fcb->f_sectors[0];
	}
	return sector;
}
   3cf7a:	4299      	cmp	r1, r3
   3cf7c:	bf34      	ite	cc
   3cf7e:	4608      	movcc	r0, r1
   3cf80:	4610      	movcs	r0, r2
   3cf82:	4770      	bx	lr

0003cf84 <fcb_getnext_nolock>:
int
fcb_getnext_nolock(struct fcb *fcb, struct fcb_entry *loc)
{
	int rc;

	if (loc->fe_sector == NULL) {
   3cf84:	680b      	ldr	r3, [r1, #0]
{
   3cf86:	b570      	push	{r4, r5, r6, lr}
   3cf88:	4605      	mov	r5, r0
   3cf8a:	460c      	mov	r4, r1
	if (loc->fe_sector == NULL) {
   3cf8c:	b90b      	cbnz	r3, 3cf92 <fcb_getnext_nolock+0xe>
		/*
		 * Find the first one we have in flash.
		 */
		loc->fe_sector = fcb->f_oldest;
   3cf8e:	6a03      	ldr	r3, [r0, #32]
   3cf90:	600b      	str	r3, [r1, #0]
	}
	if (loc->fe_elem_off == 0U) {
   3cf92:	6863      	ldr	r3, [r4, #4]
   3cf94:	b95b      	cbnz	r3, 3cfae <fcb_getnext_nolock+0x2a>
		/*
		 * If offset is zero, we serve the first entry from the sector.
		 */
		loc->fe_elem_off = sizeof(struct fcb_disk_area);
   3cf96:	2308      	movs	r3, #8
		rc = fcb_elem_info(fcb, loc);
   3cf98:	4621      	mov	r1, r4
   3cf9a:	4628      	mov	r0, r5
		loc->fe_elem_off = sizeof(struct fcb_disk_area);
   3cf9c:	6063      	str	r3, [r4, #4]
		rc = fcb_elem_info(fcb, loc);
   3cf9e:	f7ff ff99 	bl	3ced4 <fcb_elem_info>
		switch (rc) {
   3cfa2:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   3cfa6:	d021      	beq.n	3cfec <fcb_getnext_nolock+0x68>
   3cfa8:	b950      	cbnz	r0, 3cfc0 <fcb_getnext_nolock+0x3c>
			goto next_sector;
		}
	} else {
		rc = fcb_getnext_in_sector(fcb, loc);
		if (rc == 0) {
			return 0;
   3cfaa:	2000      	movs	r0, #0
			}
		}
	}

	return 0;
}
   3cfac:	bd70      	pop	{r4, r5, r6, pc}
		rc = fcb_getnext_in_sector(fcb, loc);
   3cfae:	4621      	mov	r1, r4
   3cfb0:	4628      	mov	r0, r5
   3cfb2:	f7ff ffba 	bl	3cf2a <fcb_getnext_in_sector>
		if (rc == 0) {
   3cfb6:	2800      	cmp	r0, #0
   3cfb8:	d0f7      	beq.n	3cfaa <fcb_getnext_nolock+0x26>
		if (rc == -ENOTSUP) {
   3cfba:	f110 0f86 	cmn.w	r0, #134	; 0x86
   3cfbe:	d113      	bne.n	3cfe8 <fcb_getnext_nolock+0x64>
			loc->fe_elem_off = sizeof(struct fcb_disk_area);
   3cfc0:	2608      	movs	r6, #8
			if (loc->fe_sector == fcb->f_active.fe_sector) {
   3cfc2:	6821      	ldr	r1, [r4, #0]
   3cfc4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   3cfc6:	4299      	cmp	r1, r3
   3cfc8:	d019      	beq.n	3cffe <fcb_getnext_nolock+0x7a>
			loc->fe_sector = fcb_getnext_sector(fcb, loc->fe_sector);
   3cfca:	4628      	mov	r0, r5
   3cfcc:	f7ff ffd0 	bl	3cf70 <fcb_getnext_sector>
			rc = fcb_elem_info(fcb, loc);
   3cfd0:	4621      	mov	r1, r4
			loc->fe_elem_off = sizeof(struct fcb_disk_area);
   3cfd2:	e9c4 0600 	strd	r0, r6, [r4]
			rc = fcb_elem_info(fcb, loc);
   3cfd6:	4628      	mov	r0, r5
   3cfd8:	f7ff ff7c 	bl	3ced4 <fcb_elem_info>
			switch (rc) {
   3cfdc:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   3cfe0:	d004      	beq.n	3cfec <fcb_getnext_nolock+0x68>
   3cfe2:	2800      	cmp	r0, #0
   3cfe4:	d0e1      	beq.n	3cfaa <fcb_getnext_nolock+0x26>
   3cfe6:	e7ec      	b.n	3cfc2 <fcb_getnext_nolock+0x3e>
	while (rc == -EBADMSG) {
   3cfe8:	304d      	adds	r0, #77	; 0x4d
   3cfea:	d1de      	bne.n	3cfaa <fcb_getnext_nolock+0x26>
		rc = fcb_getnext_in_sector(fcb, loc);
   3cfec:	4621      	mov	r1, r4
   3cfee:	4628      	mov	r0, r5
   3cff0:	f7ff ff9b 	bl	3cf2a <fcb_getnext_in_sector>
		if (rc == 0) {
   3cff4:	2800      	cmp	r0, #0
   3cff6:	d0d8      	beq.n	3cfaa <fcb_getnext_nolock+0x26>
		if (rc != -EBADMSG) {
   3cff8:	304d      	adds	r0, #77	; 0x4d
   3cffa:	d0f7      	beq.n	3cfec <fcb_getnext_nolock+0x68>
next_sector:
   3cffc:	e7e0      	b.n	3cfc0 <fcb_getnext_nolock+0x3c>
				return -ENOTSUP;
   3cffe:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3d002:	e7d3      	b.n	3cfac <fcb_getnext_nolock+0x28>

0003d004 <fcb_getnext>:

int
fcb_getnext(struct fcb *fcb, struct fcb_entry *loc)
{
   3d004:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3d006:	4604      	mov	r4, r0
   3d008:	9101      	str	r1, [sp, #4]
	int rc;

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   3d00a:	f100 050c 	add.w	r5, r0, #12
	return z_impl_k_mutex_lock(mutex, timeout);
   3d00e:	f04f 32ff 	mov.w	r2, #4294967295
   3d012:	f04f 33ff 	mov.w	r3, #4294967295
   3d016:	4628      	mov	r0, r5
   3d018:	f7f9 fc4c 	bl	368b4 <z_impl_k_mutex_lock>
	if (rc) {
   3d01c:	b950      	cbnz	r0, 3d034 <fcb_getnext+0x30>
		return -EINVAL;
	}
	rc = fcb_getnext_nolock(fcb, loc);
   3d01e:	4620      	mov	r0, r4
   3d020:	9901      	ldr	r1, [sp, #4]
   3d022:	f7ff ffaf 	bl	3cf84 <fcb_getnext_nolock>
   3d026:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   3d028:	4628      	mov	r0, r5
   3d02a:	f7f9 fd15 	bl	36a58 <z_impl_k_mutex_unlock>
	k_mutex_unlock(&fcb->f_mtx);

	return rc;
}
   3d02e:	4620      	mov	r0, r4
   3d030:	b003      	add	sp, #12
   3d032:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   3d034:	f06f 0415 	mvn.w	r4, #21
   3d038:	e7f9      	b.n	3d02e <fcb_getnext+0x2a>

0003d03a <fcb_rotate>:
#include <fs/fcb.h>
#include "fcb_priv.h"

int
fcb_rotate(struct fcb *fcb)
{
   3d03a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3d03c:	4604      	mov	r4, r0
	struct flash_sector *sector;
	int rc = 0;

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   3d03e:	f100 070c 	add.w	r7, r0, #12
	return z_impl_k_mutex_lock(mutex, timeout);
   3d042:	f04f 32ff 	mov.w	r2, #4294967295
   3d046:	f04f 33ff 	mov.w	r3, #4294967295
   3d04a:	4638      	mov	r0, r7
   3d04c:	f7f9 fc32 	bl	368b4 <z_impl_k_mutex_lock>
	if (rc) {
   3d050:	bb48      	cbnz	r0, 3d0a6 <fcb_rotate+0x6c>
		return -EINVAL;
	}

	rc = fcb_erase_sector(fcb, fcb->f_oldest);
   3d052:	4620      	mov	r0, r4
   3d054:	6a21      	ldr	r1, [r4, #32]
   3d056:	f7ff fdbb 	bl	3cbd0 <fcb_erase_sector>
	if (rc) {
   3d05a:	bb08      	cbnz	r0, 3d0a0 <fcb_rotate+0x66>
		rc = -EIO;
		goto out;
	}
	if (fcb->f_oldest == fcb->f_active.fe_sector) {
   3d05c:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
   3d060:	4299      	cmp	r1, r3
   3d062:	d112      	bne.n	3d08a <fcb_rotate+0x50>
		/*
		 * Need to create a new active area, as we're wiping
		 * the current.
		 */
		sector = fcb_getnext_sector(fcb, fcb->f_oldest);
   3d064:	4620      	mov	r0, r4
   3d066:	f7ff ff83 	bl	3cf70 <fcb_getnext_sector>
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   3d06a:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   3d06c:	4601      	mov	r1, r0
   3d06e:	3201      	adds	r2, #1
		sector = fcb_getnext_sector(fcb, fcb->f_oldest);
   3d070:	4606      	mov	r6, r0
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   3d072:	b292      	uxth	r2, r2
   3d074:	4620      	mov	r0, r4
   3d076:	f7ff fe0a 	bl	3cc8e <fcb_sector_hdr_init>
		if (rc) {
   3d07a:	4605      	mov	r5, r0
   3d07c:	b958      	cbnz	r0, 3d096 <fcb_rotate+0x5c>
			goto out;
		}
		fcb->f_active.fe_sector = sector;
		fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   3d07e:	2308      	movs	r3, #8
   3d080:	62a3      	str	r3, [r4, #40]	; 0x28
		fcb->f_active_id++;
   3d082:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
		fcb->f_active.fe_sector = sector;
   3d084:	6266      	str	r6, [r4, #36]	; 0x24
		fcb->f_active_id++;
   3d086:	3301      	adds	r3, #1
   3d088:	86a3      	strh	r3, [r4, #52]	; 0x34
	}
	fcb->f_oldest = fcb_getnext_sector(fcb, fcb->f_oldest);
   3d08a:	4620      	mov	r0, r4
   3d08c:	6a21      	ldr	r1, [r4, #32]
   3d08e:	f7ff ff6f 	bl	3cf70 <fcb_getnext_sector>
   3d092:	2500      	movs	r5, #0
   3d094:	6220      	str	r0, [r4, #32]
	return z_impl_k_mutex_unlock(mutex);
   3d096:	4638      	mov	r0, r7
   3d098:	f7f9 fcde 	bl	36a58 <z_impl_k_mutex_unlock>
out:
	k_mutex_unlock(&fcb->f_mtx);
	return rc;
}
   3d09c:	4628      	mov	r0, r5
   3d09e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rc = -EIO;
   3d0a0:	f06f 0504 	mvn.w	r5, #4
   3d0a4:	e7f7      	b.n	3d096 <fcb_rotate+0x5c>
		return -EINVAL;
   3d0a6:	f06f 0515 	mvn.w	r5, #21
   3d0aa:	e7f7      	b.n	3d09c <fcb_rotate+0x62>

0003d0ac <sntp_init>:
{
   3d0ac:	b570      	push	{r4, r5, r6, lr}
   3d0ae:	460d      	mov	r5, r1
   3d0b0:	4616      	mov	r6, r2
	if (!ctx || !addr) {
   3d0b2:	4604      	mov	r4, r0
   3d0b4:	b330      	cbz	r0, 3d104 <sntp_init+0x58>
   3d0b6:	b329      	cbz	r1, 3d104 <sntp_init+0x58>
   3d0b8:	2214      	movs	r2, #20
   3d0ba:	2100      	movs	r1, #0
   3d0bc:	f004 f992 	bl	413e4 <memset>
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   3d0c0:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   3d0c2:	2211      	movs	r2, #17
   3d0c4:	2102      	movs	r1, #2
   3d0c6:	f7e4 fbe3 	bl	21890 <z_impl_zsock_socket>
	if (ctx->sock.fd < 0) {
   3d0ca:	2800      	cmp	r0, #0
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   3d0cc:	60e0      	str	r0, [r4, #12]
	if (ctx->sock.fd < 0) {
   3d0ce:	da04      	bge.n	3d0da <sntp_init+0x2e>
		return -errno;
   3d0d0:	f000 fb2d 	bl	3d72e <__errno>
   3d0d4:	6800      	ldr	r0, [r0, #0]
   3d0d6:	4240      	negs	r0, r0
}
   3d0d8:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_zsock_connect(sock, addr, addrlen);
   3d0da:	4632      	mov	r2, r6
   3d0dc:	4629      	mov	r1, r5
   3d0de:	f000 f854 	bl	3d18a <z_impl_zsock_connect>
	if (ret < 0) {
   3d0e2:	2800      	cmp	r0, #0
   3d0e4:	68e0      	ldr	r0, [r4, #12]
   3d0e6:	da02      	bge.n	3d0ee <sntp_init+0x42>
	return z_impl_zsock_close(sock);
   3d0e8:	f000 f82b 	bl	3d142 <z_impl_zsock_close>
   3d0ec:	e7f0      	b.n	3d0d0 <sntp_init+0x24>
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   3d0ee:	2101      	movs	r1, #1
	ctx->sock.fds[ctx->sock.nfds].fd = ctx->sock.fd;
   3d0f0:	68a3      	ldr	r3, [r4, #8]
   3d0f2:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   3d0f6:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
	ctx->sock.nfds++;
   3d0fa:	440b      	add	r3, r1
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   3d0fc:	8091      	strh	r1, [r2, #4]
	return 0;
   3d0fe:	2000      	movs	r0, #0
	ctx->sock.nfds++;
   3d100:	60a3      	str	r3, [r4, #8]
	return 0;
   3d102:	e7e9      	b.n	3d0d8 <sntp_init+0x2c>
		return -EFAULT;
   3d104:	f06f 000d 	mvn.w	r0, #13
   3d108:	e7e6      	b.n	3d0d8 <sntp_init+0x2c>

0003d10a <sntp_close>:

void sntp_close(struct sntp_ctx *ctx)
{
	if (ctx) {
   3d10a:	b110      	cbz	r0, 3d112 <sntp_close+0x8>
		(void)close(ctx->sock.fd);
   3d10c:	68c0      	ldr	r0, [r0, #12]
   3d10e:	f000 b818 	b.w	3d142 <z_impl_zsock_close>
	}
}
   3d112:	4770      	bx	lr

0003d114 <zsock_getaddrinfo>:
int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   3d114:	f7e4 bd34 	b.w	21b80 <socket_offload_getaddrinfo>

0003d118 <zsock_freeaddrinfo>:
}

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   3d118:	f7e4 bd66 	b.w	21be8 <socket_offload_freeaddrinfo>

0003d11c <z_fdtable_call_ioctl>:
{
   3d11c:	b40c      	push	{r2, r3}
   3d11e:	4603      	mov	r3, r0
   3d120:	b507      	push	{r0, r1, r2, lr}
   3d122:	aa04      	add	r2, sp, #16
   3d124:	4608      	mov	r0, r1
   3d126:	f852 1b04 	ldr.w	r1, [r2], #4
	res = vtable->ioctl(obj, request, args);
   3d12a:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   3d12c:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   3d12e:	4798      	blx	r3
}
   3d130:	b003      	add	sp, #12
   3d132:	f85d eb04 	ldr.w	lr, [sp], #4
   3d136:	b002      	add	sp, #8
   3d138:	4770      	bx	lr

0003d13a <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   3d13a:	f7f9 bbbb 	b.w	368b4 <z_impl_k_mutex_lock>

0003d13e <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   3d13e:	f7f9 bc8b 	b.w	36a58 <z_impl_k_mutex_unlock>

0003d142 <z_impl_zsock_close>:
{
   3d142:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ctx = z_get_fd_obj_and_vtable(sock,
   3d144:	4669      	mov	r1, sp
   3d146:	aa01      	add	r2, sp, #4
{
   3d148:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   3d14a:	f7e3 fc6d 	bl	20a28 <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   3d14e:	4604      	mov	r4, r0
   3d150:	b940      	cbnz	r0, 3d164 <z_impl_zsock_close+0x22>
		errno = EBADF;
   3d152:	f000 faec 	bl	3d72e <__errno>
   3d156:	2309      	movs	r3, #9
		return -1;
   3d158:	f04f 34ff 	mov.w	r4, #4294967295
		errno = EBADF;
   3d15c:	6003      	str	r3, [r0, #0]
}
   3d15e:	4620      	mov	r0, r4
   3d160:	b003      	add	sp, #12
   3d162:	bd30      	pop	{r4, r5, pc}
	(void)k_mutex_lock(lock, K_FOREVER);
   3d164:	f04f 32ff 	mov.w	r2, #4294967295
   3d168:	9801      	ldr	r0, [sp, #4]
   3d16a:	f04f 33ff 	mov.w	r3, #4294967295
   3d16e:	f7ff ffe4 	bl	3d13a <k_mutex_lock.constprop.0.isra.0>
	ret = vtable->fd_vtable.close(ctx);
   3d172:	9b00      	ldr	r3, [sp, #0]
   3d174:	4620      	mov	r0, r4
   3d176:	689b      	ldr	r3, [r3, #8]
   3d178:	4798      	blx	r3
   3d17a:	4604      	mov	r4, r0
	k_mutex_unlock(lock);
   3d17c:	9801      	ldr	r0, [sp, #4]
   3d17e:	f7ff ffde 	bl	3d13e <k_mutex_unlock.isra.0>
	z_free_fd(sock);
   3d182:	4628      	mov	r0, r5
   3d184:	f7e3 fcba 	bl	20afc <z_free_fd>
	return ret;
   3d188:	e7e9      	b.n	3d15e <z_impl_zsock_close+0x1c>

0003d18a <z_impl_zsock_connect>:
{
   3d18a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3d18c:	460d      	mov	r5, r1
   3d18e:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   3d190:	4669      	mov	r1, sp
   3d192:	aa01      	add	r2, sp, #4
   3d194:	f7e3 fc48 	bl	20a28 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   3d198:	4604      	mov	r4, r0
   3d19a:	b110      	cbz	r0, 3d1a2 <z_impl_zsock_connect+0x18>
   3d19c:	9b00      	ldr	r3, [sp, #0]
   3d19e:	699b      	ldr	r3, [r3, #24]
   3d1a0:	b943      	cbnz	r3, 3d1b4 <z_impl_zsock_connect+0x2a>
   3d1a2:	f000 fac4 	bl	3d72e <__errno>
   3d1a6:	2309      	movs	r3, #9
   3d1a8:	f04f 34ff 	mov.w	r4, #4294967295
   3d1ac:	6003      	str	r3, [r0, #0]
}
   3d1ae:	4620      	mov	r0, r4
   3d1b0:	b002      	add	sp, #8
   3d1b2:	bd70      	pop	{r4, r5, r6, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   3d1b4:	9801      	ldr	r0, [sp, #4]
   3d1b6:	f04f 32ff 	mov.w	r2, #4294967295
   3d1ba:	f04f 33ff 	mov.w	r3, #4294967295
   3d1be:	f7ff ffbc 	bl	3d13a <k_mutex_lock.constprop.0.isra.0>
   3d1c2:	9b00      	ldr	r3, [sp, #0]
   3d1c4:	4632      	mov	r2, r6
   3d1c6:	4629      	mov	r1, r5
   3d1c8:	4620      	mov	r0, r4
   3d1ca:	699b      	ldr	r3, [r3, #24]
   3d1cc:	4798      	blx	r3
   3d1ce:	4604      	mov	r4, r0
   3d1d0:	9801      	ldr	r0, [sp, #4]
   3d1d2:	f7ff ffb4 	bl	3d13e <k_mutex_unlock.isra.0>
   3d1d6:	e7ea      	b.n	3d1ae <z_impl_zsock_connect+0x24>

0003d1d8 <z_impl_zsock_sendto>:
{
   3d1d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   3d1dc:	460d      	mov	r5, r1
   3d1de:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   3d1e0:	a902      	add	r1, sp, #8
   3d1e2:	aa03      	add	r2, sp, #12
{
   3d1e4:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   3d1e6:	f7e3 fc1f 	bl	20a28 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   3d1ea:	4604      	mov	r4, r0
   3d1ec:	b110      	cbz	r0, 3d1f4 <z_impl_zsock_sendto+0x1c>
   3d1ee:	9b02      	ldr	r3, [sp, #8]
   3d1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   3d1f2:	b94b      	cbnz	r3, 3d208 <z_impl_zsock_sendto+0x30>
   3d1f4:	f000 fa9b 	bl	3d72e <__errno>
   3d1f8:	2309      	movs	r3, #9
   3d1fa:	f04f 34ff 	mov.w	r4, #4294967295
   3d1fe:	6003      	str	r3, [r0, #0]
}
   3d200:	4620      	mov	r0, r4
   3d202:	b004      	add	sp, #16
   3d204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   3d208:	9803      	ldr	r0, [sp, #12]
   3d20a:	f04f 32ff 	mov.w	r2, #4294967295
   3d20e:	f04f 33ff 	mov.w	r3, #4294967295
   3d212:	f7ff ff92 	bl	3d13a <k_mutex_lock.constprop.0.isra.0>
   3d216:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3d218:	4632      	mov	r2, r6
   3d21a:	9301      	str	r3, [sp, #4]
   3d21c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3d21e:	4629      	mov	r1, r5
   3d220:	9300      	str	r3, [sp, #0]
   3d222:	9b02      	ldr	r3, [sp, #8]
   3d224:	4620      	mov	r0, r4
   3d226:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
   3d22a:	463b      	mov	r3, r7
   3d22c:	47c0      	blx	r8
   3d22e:	4604      	mov	r4, r0
   3d230:	9803      	ldr	r0, [sp, #12]
   3d232:	f7ff ff84 	bl	3d13e <k_mutex_unlock.isra.0>
   3d236:	e7e3      	b.n	3d200 <z_impl_zsock_sendto+0x28>

0003d238 <z_impl_zsock_sendmsg>:
{
   3d238:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3d23a:	460d      	mov	r5, r1
   3d23c:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   3d23e:	4669      	mov	r1, sp
   3d240:	aa01      	add	r2, sp, #4
   3d242:	f7e3 fbf1 	bl	20a28 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendmsg, sock, msg, flags);
   3d246:	4604      	mov	r4, r0
   3d248:	b110      	cbz	r0, 3d250 <z_impl_zsock_sendmsg+0x18>
   3d24a:	9b00      	ldr	r3, [sp, #0]
   3d24c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   3d24e:	b943      	cbnz	r3, 3d262 <z_impl_zsock_sendmsg+0x2a>
   3d250:	f000 fa6d 	bl	3d72e <__errno>
   3d254:	2309      	movs	r3, #9
   3d256:	f04f 34ff 	mov.w	r4, #4294967295
   3d25a:	6003      	str	r3, [r0, #0]
}
   3d25c:	4620      	mov	r0, r4
   3d25e:	b002      	add	sp, #8
   3d260:	bd70      	pop	{r4, r5, r6, pc}
	VTABLE_CALL(sendmsg, sock, msg, flags);
   3d262:	9801      	ldr	r0, [sp, #4]
   3d264:	f04f 32ff 	mov.w	r2, #4294967295
   3d268:	f04f 33ff 	mov.w	r3, #4294967295
   3d26c:	f7ff ff65 	bl	3d13a <k_mutex_lock.constprop.0.isra.0>
   3d270:	9b00      	ldr	r3, [sp, #0]
   3d272:	4632      	mov	r2, r6
   3d274:	4629      	mov	r1, r5
   3d276:	4620      	mov	r0, r4
   3d278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   3d27a:	4798      	blx	r3
   3d27c:	4604      	mov	r4, r0
   3d27e:	9801      	ldr	r0, [sp, #4]
   3d280:	f7ff ff5d 	bl	3d13e <k_mutex_unlock.isra.0>
   3d284:	e7ea      	b.n	3d25c <z_impl_zsock_sendmsg+0x24>

0003d286 <z_impl_zsock_recvfrom>:
{
   3d286:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   3d28a:	460d      	mov	r5, r1
   3d28c:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   3d28e:	a902      	add	r1, sp, #8
   3d290:	aa03      	add	r2, sp, #12
{
   3d292:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   3d294:	f7e3 fbc8 	bl	20a28 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   3d298:	4604      	mov	r4, r0
   3d29a:	b110      	cbz	r0, 3d2a2 <z_impl_zsock_recvfrom+0x1c>
   3d29c:	9b02      	ldr	r3, [sp, #8]
   3d29e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   3d2a0:	b94b      	cbnz	r3, 3d2b6 <z_impl_zsock_recvfrom+0x30>
   3d2a2:	f000 fa44 	bl	3d72e <__errno>
   3d2a6:	2309      	movs	r3, #9
   3d2a8:	f04f 34ff 	mov.w	r4, #4294967295
   3d2ac:	6003      	str	r3, [r0, #0]
}
   3d2ae:	4620      	mov	r0, r4
   3d2b0:	b004      	add	sp, #16
   3d2b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   3d2b6:	9803      	ldr	r0, [sp, #12]
   3d2b8:	f04f 32ff 	mov.w	r2, #4294967295
   3d2bc:	f04f 33ff 	mov.w	r3, #4294967295
   3d2c0:	f7ff ff3b 	bl	3d13a <k_mutex_lock.constprop.0.isra.0>
   3d2c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3d2c6:	4632      	mov	r2, r6
   3d2c8:	9301      	str	r3, [sp, #4]
   3d2ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3d2cc:	4629      	mov	r1, r5
   3d2ce:	9300      	str	r3, [sp, #0]
   3d2d0:	9b02      	ldr	r3, [sp, #8]
   3d2d2:	4620      	mov	r0, r4
   3d2d4:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
   3d2d8:	463b      	mov	r3, r7
   3d2da:	47c0      	blx	r8
   3d2dc:	4604      	mov	r4, r0
   3d2de:	9803      	ldr	r0, [sp, #12]
   3d2e0:	f7ff ff2d 	bl	3d13e <k_mutex_unlock.isra.0>
   3d2e4:	e7e3      	b.n	3d2ae <z_impl_zsock_recvfrom+0x28>

0003d2e6 <z_impl_zsock_poll>:

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int poll_timeout)
{
   3d2e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_timeout_t timeout;

	if (poll_timeout < 0) {
   3d2ea:	1e14      	subs	r4, r2, #0
{
   3d2ec:	4605      	mov	r5, r0
   3d2ee:	460e      	mov	r6, r1
	if (poll_timeout < 0) {
   3d2f0:	db13      	blt.n	3d31a <z_impl_zsock_poll+0x34>
   3d2f2:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   3d2f6:	f240 30e7 	movw	r0, #999	; 0x3e7
   3d2fa:	2100      	movs	r1, #0
   3d2fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3d300:	2300      	movs	r3, #0
   3d302:	fbc4 0107 	smlal	r0, r1, r4, r7
   3d306:	f7df fdef 	bl	1cee8 <__aeabi_uldivmod>
   3d30a:	4602      	mov	r2, r0
   3d30c:	460b      	mov	r3, r1
		timeout = K_FOREVER;
	} else {
		timeout = K_MSEC(poll_timeout);
	}

	return zsock_poll_internal(fds, nfds, timeout);
   3d30e:	4631      	mov	r1, r6
   3d310:	4628      	mov	r0, r5
}
   3d312:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return zsock_poll_internal(fds, nfds, timeout);
   3d316:	f7e4 bb01 	b.w	2191c <zsock_poll_internal>
		timeout = K_FOREVER;
   3d31a:	f04f 32ff 	mov.w	r2, #4294967295
   3d31e:	4613      	mov	r3, r2
   3d320:	e7f5      	b.n	3d30e <z_impl_zsock_poll+0x28>

0003d322 <z_impl_zsock_inet_pton>:
}
#include <syscalls/zsock_poll_mrsh.c>
#endif

int z_impl_zsock_inet_pton(sa_family_t family, const char *src, void *dst)
{
   3d322:	b508      	push	{r3, lr}
	return z_impl_net_addr_pton(family, src, dst);
   3d324:	f000 fa6c 	bl	3d800 <z_impl_net_addr_pton>
	if (net_addr_pton(family, src, dst) == 0) {
		return 1;
	} else {
		return 0;
	}
}
   3d328:	fab0 f080 	clz	r0, r0
   3d32c:	0940      	lsrs	r0, r0, #5
   3d32e:	bd08      	pop	{r3, pc}

0003d330 <z_impl_zsock_setsockopt>:
	return -1;
}

int z_impl_zsock_setsockopt(int sock, int level, int optname,
			    const void *optval, socklen_t optlen)
{
   3d330:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   3d334:	460d      	mov	r5, r1
   3d336:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   3d338:	a902      	add	r1, sp, #8
   3d33a:	aa03      	add	r2, sp, #12
{
   3d33c:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   3d33e:	f7e3 fb73 	bl	20a28 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   3d342:	4604      	mov	r4, r0
   3d344:	b110      	cbz	r0, 3d34c <z_impl_zsock_setsockopt+0x1c>
   3d346:	9b02      	ldr	r3, [sp, #8]
   3d348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   3d34a:	b94b      	cbnz	r3, 3d360 <z_impl_zsock_setsockopt+0x30>
   3d34c:	f000 f9ef 	bl	3d72e <__errno>
   3d350:	2309      	movs	r3, #9
   3d352:	f04f 34ff 	mov.w	r4, #4294967295
   3d356:	6003      	str	r3, [r0, #0]
}
   3d358:	4620      	mov	r0, r4
   3d35a:	b004      	add	sp, #16
   3d35c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   3d360:	9803      	ldr	r0, [sp, #12]
   3d362:	f04f 32ff 	mov.w	r2, #4294967295
   3d366:	f04f 33ff 	mov.w	r3, #4294967295
   3d36a:	f7ff fee6 	bl	3d13a <k_mutex_lock.constprop.0.isra.0>
   3d36e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3d370:	4632      	mov	r2, r6
   3d372:	9300      	str	r3, [sp, #0]
   3d374:	9b02      	ldr	r3, [sp, #8]
   3d376:	4629      	mov	r1, r5
   3d378:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
   3d37c:	4620      	mov	r0, r4
   3d37e:	463b      	mov	r3, r7
   3d380:	47c0      	blx	r8
   3d382:	4604      	mov	r4, r0
   3d384:	9803      	ldr	r0, [sp, #12]
   3d386:	f7ff feda 	bl	3d13e <k_mutex_unlock.isra.0>
   3d38a:	e7e5      	b.n	3d358 <z_impl_zsock_setsockopt+0x28>

0003d38c <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   3d38c:	4770      	bx	lr

0003d38e <flash_area_read>:

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   3d38e:	b573      	push	{r0, r1, r4, r5, r6, lr}


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
   3d390:	1e0c      	subs	r4, r1, #0
   3d392:	4605      	mov	r5, r0
   3d394:	461e      	mov	r6, r3
   3d396:	9201      	str	r2, [sp, #4]
   3d398:	db11      	blt.n	3d3be <flash_area_read+0x30>
   3d39a:	6881      	ldr	r1, [r0, #8]
   3d39c:	18e3      	adds	r3, r4, r3
   3d39e:	428b      	cmp	r3, r1
   3d3a0:	d80d      	bhi.n	3d3be <flash_area_read+0x30>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
   3d3a2:	68c0      	ldr	r0, [r0, #12]
   3d3a4:	f7f8 fd82 	bl	35eac <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
   3d3a8:	6869      	ldr	r1, [r5, #4]
   3d3aa:	4421      	add	r1, r4
	return api->read(dev, offset, data, len);
   3d3ac:	6883      	ldr	r3, [r0, #8]
   3d3ae:	9a01      	ldr	r2, [sp, #4]
   3d3b0:	681c      	ldr	r4, [r3, #0]
   3d3b2:	4633      	mov	r3, r6
   3d3b4:	46a4      	mov	ip, r4
}
   3d3b6:	b002      	add	sp, #8
   3d3b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3d3bc:	4760      	bx	ip
   3d3be:	f06f 0015 	mvn.w	r0, #21
   3d3c2:	b002      	add	sp, #8
   3d3c4:	bd70      	pop	{r4, r5, r6, pc}

0003d3c6 <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   3d3c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3d3c8:	1e0c      	subs	r4, r1, #0
   3d3ca:	4605      	mov	r5, r0
   3d3cc:	461e      	mov	r6, r3
   3d3ce:	9201      	str	r2, [sp, #4]
   3d3d0:	db11      	blt.n	3d3f6 <flash_area_write+0x30>
   3d3d2:	6881      	ldr	r1, [r0, #8]
   3d3d4:	18e3      	adds	r3, r4, r3
   3d3d6:	428b      	cmp	r3, r1
   3d3d8:	d80d      	bhi.n	3d3f6 <flash_area_write+0x30>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   3d3da:	68c0      	ldr	r0, [r0, #12]
   3d3dc:	f7f8 fd66 	bl	35eac <z_impl_device_get_binding>

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
   3d3e0:	6869      	ldr	r1, [r5, #4]
   3d3e2:	4421      	add	r1, r4
	rc = api->write(dev, offset, data, len);
   3d3e4:	6883      	ldr	r3, [r0, #8]
   3d3e6:	9a01      	ldr	r2, [sp, #4]
   3d3e8:	685c      	ldr	r4, [r3, #4]
   3d3ea:	4633      	mov	r3, r6
   3d3ec:	46a4      	mov	ip, r4

	return rc;
}
   3d3ee:	b002      	add	sp, #8
   3d3f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3d3f4:	4760      	bx	ip
   3d3f6:	f06f 0015 	mvn.w	r0, #21
   3d3fa:	b002      	add	sp, #8
   3d3fc:	bd70      	pop	{r4, r5, r6, pc}

0003d3fe <flash_area_erase>:

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
   3d3fe:	b570      	push	{r4, r5, r6, lr}
   3d400:	1e0c      	subs	r4, r1, #0
   3d402:	4605      	mov	r5, r0
   3d404:	4616      	mov	r6, r2
   3d406:	db0e      	blt.n	3d426 <flash_area_erase+0x28>
   3d408:	18a3      	adds	r3, r4, r2
   3d40a:	6882      	ldr	r2, [r0, #8]
   3d40c:	4293      	cmp	r3, r2
   3d40e:	d80a      	bhi.n	3d426 <flash_area_erase+0x28>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   3d410:	68c0      	ldr	r0, [r0, #12]
   3d412:	f7f8 fd4b 	bl	35eac <z_impl_device_get_binding>

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
   3d416:	6869      	ldr	r1, [r5, #4]
   3d418:	4421      	add	r1, r4
	rc = api->erase(dev, offset, size);
   3d41a:	6883      	ldr	r3, [r0, #8]
   3d41c:	4632      	mov	r2, r6

	return rc;
}
   3d41e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3d422:	689b      	ldr	r3, [r3, #8]
   3d424:	4718      	bx	r3
   3d426:	f06f 0015 	mvn.w	r0, #21
   3d42a:	bd70      	pop	{r4, r5, r6, pc}

0003d42c <flash_area_align>:

uint32_t flash_area_align(const struct flash_area *fa)
{
   3d42c:	b508      	push	{r3, lr}
	const struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
   3d42e:	68c0      	ldr	r0, [r0, #12]
   3d430:	f7f8 fd3c 	bl	35eac <z_impl_device_get_binding>
	return api->get_parameters(dev)->write_block_size;
   3d434:	6883      	ldr	r3, [r0, #8]
   3d436:	68db      	ldr	r3, [r3, #12]
   3d438:	4798      	blx	r3

	return flash_get_write_block_size(dev);
}
   3d43a:	6800      	ldr	r0, [r0, #0]
   3d43c:	bd08      	pop	{r3, pc}

0003d43e <flash_area_erased_val>:
{
	return device_get_binding(fa->fa_dev_name);
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
   3d43e:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(device_get_binding(fa->fa_dev_name));
   3d440:	68c0      	ldr	r0, [r0, #12]
   3d442:	f7f8 fd33 	bl	35eac <z_impl_device_get_binding>
	return api->get_parameters(dev);
   3d446:	6883      	ldr	r3, [r0, #8]
   3d448:	68db      	ldr	r3, [r3, #12]
   3d44a:	4798      	blx	r3

	return param->erase_value;
}
   3d44c:	7900      	ldrb	r0, [r0, #4]
   3d44e:	bd08      	pop	{r3, pc}

0003d450 <get_sectors_cb>:
{
   3d450:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   3d452:	6802      	ldr	r2, [r0, #0]
   3d454:	684c      	ldr	r4, [r1, #4]
   3d456:	42a2      	cmp	r2, r4
   3d458:	d316      	bcc.n	3d488 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   3d45a:	688b      	ldr	r3, [r1, #8]
   3d45c:	4423      	add	r3, r4
   3d45e:	429a      	cmp	r2, r3
   3d460:	d206      	bcs.n	3d470 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   3d462:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   3d466:	42ab      	cmp	r3, r5
   3d468:	d304      	bcc.n	3d474 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   3d46a:	f06f 030b 	mvn.w	r3, #11
   3d46e:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   3d470:	2000      	movs	r0, #0
   3d472:	e00a      	b.n	3d48a <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   3d474:	68cd      	ldr	r5, [r1, #12]
   3d476:	1b12      	subs	r2, r2, r4
   3d478:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   3d47c:	6842      	ldr	r2, [r0, #4]
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   3d47e:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
	data->ret_idx++;
   3d482:	3301      	adds	r3, #1
	ret[data->ret_idx].fs_size = info->size;
   3d484:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   3d486:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   3d488:	2001      	movs	r0, #1
}
   3d48a:	bd70      	pop	{r4, r5, r6, pc}

0003d48c <flash_get_write_block_size>:

extern size_t z_impl_flash_get_write_block_size(const struct device * dev);

__pinned_func
static inline size_t flash_get_write_block_size(const struct device * dev)
{
   3d48c:	b508      	push	{r3, lr}
	return api->get_parameters(dev)->write_block_size;
   3d48e:	6883      	ldr	r3, [r0, #8]
   3d490:	68db      	ldr	r3, [r3, #12]
   3d492:	4798      	blx	r3
		return (size_t) arch_syscall_invoke1(parm0.x, K_SYSCALL_FLASH_GET_WRITE_BLOCK_SIZE);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_write_block_size(dev);
}
   3d494:	6800      	ldr	r0, [r0, #0]
   3d496:	bd08      	pop	{r3, pc}

0003d498 <stream_flash_buffered_write>:
{
   3d498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3d49c:	4689      	mov	r9, r1
   3d49e:	4616      	mov	r6, r2
   3d4a0:	4698      	mov	r8, r3
	if (!ctx) {
   3d4a2:	4604      	mov	r4, r0
   3d4a4:	b398      	cbz	r0, 3d50e <stream_flash_buffered_write+0x76>
	if (ctx->bytes_written + ctx->buf_bytes + len > ctx->available) {
   3d4a6:	6882      	ldr	r2, [r0, #8]
   3d4a8:	6903      	ldr	r3, [r0, #16]
   3d4aa:	4413      	add	r3, r2
   3d4ac:	6982      	ldr	r2, [r0, #24]
   3d4ae:	4433      	add	r3, r6
   3d4b0:	4293      	cmp	r3, r2
   3d4b2:	d830      	bhi.n	3d516 <stream_flash_buffered_write+0x7e>
	int processed = 0;
   3d4b4:	2500      	movs	r5, #0
	       (buf_empty_bytes = ctx->buf_len - ctx->buf_bytes)) {
   3d4b6:	e9d4 7001 	ldrd	r7, r0, [r4, #4]
	while ((len - processed) >=
   3d4ba:	eba6 0a05 	sub.w	sl, r6, r5
	       (buf_empty_bytes = ctx->buf_len - ctx->buf_bytes)) {
   3d4be:	1a3f      	subs	r7, r7, r0
	while ((len - processed) >=
   3d4c0:	45ba      	cmp	sl, r7
   3d4c2:	d215      	bcs.n	3d4f0 <stream_flash_buffered_write+0x58>
	if (processed < len) {
   3d4c4:	42b5      	cmp	r5, r6
   3d4c6:	d209      	bcs.n	3d4dc <stream_flash_buffered_write+0x44>
		memcpy(ctx->buf + ctx->buf_bytes,
   3d4c8:	6823      	ldr	r3, [r4, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3d4ca:	4652      	mov	r2, sl
   3d4cc:	4418      	add	r0, r3
   3d4ce:	eb09 0105 	add.w	r1, r9, r5
   3d4d2:	f003 ff67 	bl	413a4 <memcpy>
		ctx->buf_bytes += len - processed;
   3d4d6:	68a3      	ldr	r3, [r4, #8]
   3d4d8:	4453      	add	r3, sl
   3d4da:	60a3      	str	r3, [r4, #8]
	if (flush && ctx->buf_bytes > 0) {
   3d4dc:	f1b8 0f00 	cmp.w	r8, #0
   3d4e0:	d01c      	beq.n	3d51c <stream_flash_buffered_write+0x84>
   3d4e2:	68a0      	ldr	r0, [r4, #8]
   3d4e4:	b1a8      	cbz	r0, 3d512 <stream_flash_buffered_write+0x7a>
		rc = flash_sync(ctx);
   3d4e6:	4620      	mov	r0, r4
}
   3d4e8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		rc = flash_sync(ctx);
   3d4ec:	f7e4 bc30 	b.w	21d50 <flash_sync>
		memcpy(ctx->buf + ctx->buf_bytes, data + processed,
   3d4f0:	6823      	ldr	r3, [r4, #0]
   3d4f2:	463a      	mov	r2, r7
   3d4f4:	4418      	add	r0, r3
   3d4f6:	eb09 0105 	add.w	r1, r9, r5
   3d4fa:	f003 ff53 	bl	413a4 <memcpy>
		ctx->buf_bytes = ctx->buf_len;
   3d4fe:	6863      	ldr	r3, [r4, #4]
		rc = flash_sync(ctx);
   3d500:	4620      	mov	r0, r4
		ctx->buf_bytes = ctx->buf_len;
   3d502:	60a3      	str	r3, [r4, #8]
		rc = flash_sync(ctx);
   3d504:	f7e4 fc24 	bl	21d50 <flash_sync>
		if (rc != 0) {
   3d508:	b918      	cbnz	r0, 3d512 <stream_flash_buffered_write+0x7a>
		processed += buf_empty_bytes;
   3d50a:	443d      	add	r5, r7
   3d50c:	e7d3      	b.n	3d4b6 <stream_flash_buffered_write+0x1e>
		return -EFAULT;
   3d50e:	f06f 000d 	mvn.w	r0, #13
}
   3d512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
   3d516:	f06f 000b 	mvn.w	r0, #11
   3d51a:	e7fa      	b.n	3d512 <stream_flash_buffered_write+0x7a>
   3d51c:	4640      	mov	r0, r8
   3d51e:	e7f8      	b.n	3d512 <stream_flash_buffered_write+0x7a>

0003d520 <stream_flash_bytes_written>:
}
   3d520:	6900      	ldr	r0, [r0, #16]
   3d522:	4770      	bx	lr

0003d524 <settings_name_steq>:
{
   3d524:	b530      	push	{r4, r5, lr}
	if (next) {
   3d526:	b10a      	cbz	r2, 3d52c <settings_name_steq+0x8>
		*next = NULL;
   3d528:	2300      	movs	r3, #0
   3d52a:	6013      	str	r3, [r2, #0]
	if ((!name) || (!key)) {
   3d52c:	b190      	cbz	r0, 3d554 <settings_name_steq+0x30>
   3d52e:	b151      	cbz	r1, 3d546 <settings_name_steq+0x22>
   3d530:	3901      	subs	r1, #1
	while ((*key != '\0') && (*key == *name) &&
   3d532:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   3d536:	4604      	mov	r4, r0
   3d538:	f810 3b01 	ldrb.w	r3, [r0], #1
   3d53c:	b15d      	cbz	r5, 3d556 <settings_name_steq+0x32>
   3d53e:	429d      	cmp	r5, r3
   3d540:	d101      	bne.n	3d546 <settings_name_steq+0x22>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   3d542:	2d3d      	cmp	r5, #61	; 0x3d
   3d544:	d1f5      	bne.n	3d532 <settings_name_steq+0xe>
	return 0;
   3d546:	2000      	movs	r0, #0
   3d548:	e004      	b.n	3d554 <settings_name_steq+0x30>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   3d54a:	2b3d      	cmp	r3, #61	; 0x3d
   3d54c:	d008      	beq.n	3d560 <settings_name_steq+0x3c>
   3d54e:	fab3 f083 	clz	r0, r3
   3d552:	0940      	lsrs	r0, r0, #5
}
   3d554:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   3d556:	2b2f      	cmp	r3, #47	; 0x2f
   3d558:	d1f7      	bne.n	3d54a <settings_name_steq+0x26>
		if (next) {
   3d55a:	b10a      	cbz	r2, 3d560 <settings_name_steq+0x3c>
			*next = name + 1;
   3d55c:	3401      	adds	r4, #1
   3d55e:	6014      	str	r4, [r2, #0]
		return 1;
   3d560:	2001      	movs	r0, #1
   3d562:	e7f7      	b.n	3d554 <settings_name_steq+0x30>

0003d564 <settings_line_len_calc>:
{
   3d564:	b510      	push	{r4, lr}
   3d566:	460c      	mov	r4, r1
	len += strlen(name) + 1;
   3d568:	f7df fe6b 	bl	1d242 <strlen>
   3d56c:	3401      	adds	r4, #1
}
   3d56e:	4420      	add	r0, r4
   3d570:	bd10      	pop	{r4, pc}

0003d572 <settings_line_raw_read>:
{
   3d572:	b513      	push	{r0, r1, r4, lr}
	return settings_line_raw_read_until(seek, out, len_req, len_read,
   3d574:	9c04      	ldr	r4, [sp, #16]
   3d576:	9401      	str	r4, [sp, #4]
   3d578:	2400      	movs	r4, #0
   3d57a:	9400      	str	r4, [sp, #0]
   3d57c:	f7e4 fe0a 	bl	22194 <settings_line_raw_read_until>
}
   3d580:	b002      	add	sp, #8
   3d582:	bd10      	pop	{r4, pc}

0003d584 <settings_line_read_cb>:
{
   3d584:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   3d586:	6803      	ldr	r3, [r0, #0]
   3d588:	9300      	str	r3, [sp, #0]
   3d58a:	6840      	ldr	r0, [r0, #4]
   3d58c:	ab03      	add	r3, sp, #12
   3d58e:	f7ff fff0 	bl	3d572 <settings_line_raw_read>
	if (rc == 0) {
   3d592:	b918      	cbnz	r0, 3d59c <settings_line_read_cb+0x18>
		return len_read;
   3d594:	9803      	ldr	r0, [sp, #12]
}
   3d596:	b005      	add	sp, #20
   3d598:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
   3d59c:	f04f 30ff 	mov.w	r0, #4294967295
   3d5a0:	e7f9      	b.n	3d596 <settings_line_read_cb+0x12>

0003d5a2 <settings_line_name_read>:
{
   3d5a2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char const until_char = '=';
   3d5a4:	243d      	movs	r4, #61	; 0x3d
	return settings_line_raw_read_until(0, out, len_req, len_read,
   3d5a6:	9301      	str	r3, [sp, #4]
   3d5a8:	f10d 030f 	add.w	r3, sp, #15
   3d5ac:	9300      	str	r3, [sp, #0]
   3d5ae:	4613      	mov	r3, r2
   3d5b0:	460a      	mov	r2, r1
   3d5b2:	4601      	mov	r1, r0
   3d5b4:	2000      	movs	r0, #0
	char const until_char = '=';
   3d5b6:	f88d 400f 	strb.w	r4, [sp, #15]
	return settings_line_raw_read_until(0, out, len_req, len_read,
   3d5ba:	f7e4 fdeb 	bl	22194 <settings_line_raw_read_until>
}
   3d5be:	b004      	add	sp, #16
   3d5c0:	bd10      	pop	{r4, pc}

0003d5c2 <settings_line_dup_check_cb>:
{
   3d5c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3d5c6:	460f      	mov	r7, r1
   3d5c8:	b088      	sub	sp, #32
	if (strcmp(name, cdca->name)) {
   3d5ca:	6819      	ldr	r1, [r3, #0]
{
   3d5cc:	4690      	mov	r8, r2
   3d5ce:	461c      	mov	r4, r3
	if (strcmp(name, cdca->name)) {
   3d5d0:	f7df fe2d 	bl	1d22e <strcmp>
   3d5d4:	4606      	mov	r6, r0
   3d5d6:	b940      	cbnz	r0, 3d5ea <settings_line_dup_check_cb+0x28>
	len_read = settings_line_val_get_len(off, val_read_cb_ctx);
   3d5d8:	4639      	mov	r1, r7
   3d5da:	4640      	mov	r0, r8
   3d5dc:	f7e4 fe9c 	bl	22318 <settings_line_val_get_len>
	if (len_read != cdca->val_len) {
   3d5e0:	68a3      	ldr	r3, [r4, #8]
	len_read = settings_line_val_get_len(off, val_read_cb_ctx);
   3d5e2:	4605      	mov	r5, r0
	if (len_read != cdca->val_len) {
   3d5e4:	4283      	cmp	r3, r0
   3d5e6:	d004      	beq.n	3d5f2 <settings_line_dup_check_cb+0x30>
		cdca->is_dup = 0;
   3d5e8:	60e6      	str	r6, [r4, #12]
}
   3d5ea:	2000      	movs	r0, #0
   3d5ec:	b008      	add	sp, #32
   3d5ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (len_read == 0) {
   3d5f2:	b913      	cbnz	r3, 3d5fa <settings_line_dup_check_cb+0x38>
			cdca->is_dup = 1;
   3d5f4:	2301      	movs	r3, #1
			cdca->is_dup = 0;
   3d5f6:	60e3      	str	r3, [r4, #12]
   3d5f8:	e7f7      	b.n	3d5ea <settings_line_dup_check_cb+0x28>
		if (!settings_line_cmp(cdca->val, cdca->val_len,
   3d5fa:	f8d4 a004 	ldr.w	sl, [r4, #4]
		len_read = exp_len = MIN(sizeof(buf), rem);
   3d5fe:	2d10      	cmp	r5, #16
   3d600:	46a9      	mov	r9, r5
   3d602:	bf28      	it	cs
   3d604:	f04f 0910 	movcs.w	r9, #16
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   3d608:	9700      	str	r7, [sp, #0]
   3d60a:	464a      	mov	r2, r9
   3d60c:	ab03      	add	r3, sp, #12
   3d60e:	a904      	add	r1, sp, #16
   3d610:	eb08 0006 	add.w	r0, r8, r6
		len_read = exp_len = MIN(sizeof(buf), rem);
   3d614:	f8cd 900c 	str.w	r9, [sp, #12]
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   3d618:	f7ff ffab 	bl	3d572 <settings_line_raw_read>
		if (rc) {
   3d61c:	b970      	cbnz	r0, 3d63c <settings_line_dup_check_cb+0x7a>
		if (len_read != exp_len) {
   3d61e:	9b03      	ldr	r3, [sp, #12]
   3d620:	4599      	cmp	r9, r3
   3d622:	d10b      	bne.n	3d63c <settings_line_dup_check_cb+0x7a>
		rc = memcmp(val, buf, len_read);
   3d624:	464a      	mov	r2, r9
   3d626:	4650      	mov	r0, sl
   3d628:	a904      	add	r1, sp, #16
   3d62a:	f003 feab 	bl	41384 <memcmp>
		if (rc) {
   3d62e:	b928      	cbnz	r0, 3d63c <settings_line_dup_check_cb+0x7a>
		val += len_read;
   3d630:	9b03      	ldr	r3, [sp, #12]
	for (rem = val_len; rem > 0; rem -= len_read) {
   3d632:	1aed      	subs	r5, r5, r3
		val += len_read;
   3d634:	449a      	add	sl, r3
		off += len_read;
   3d636:	441e      	add	r6, r3
	for (rem = val_len; rem > 0; rem -= len_read) {
   3d638:	d1e1      	bne.n	3d5fe <settings_line_dup_check_cb+0x3c>
   3d63a:	e7db      	b.n	3d5f4 <settings_line_dup_check_cb+0x32>
			cdca->is_dup = 0;
   3d63c:	2300      	movs	r3, #0
   3d63e:	e7da      	b.n	3d5f6 <settings_line_dup_check_cb+0x34>

0003d640 <get_len_cb>:
}
   3d640:	8980      	ldrh	r0, [r0, #12]
   3d642:	4770      	bx	lr

0003d644 <write_handler>:
{
   3d644:	b430      	push	{r4, r5}
				FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off,
   3d646:	6804      	ldr	r4, [r0, #0]
   3d648:	6885      	ldr	r5, [r0, #8]
   3d64a:	6824      	ldr	r4, [r4, #0]
   3d64c:	4429      	add	r1, r5
	return flash_area_write(entry_ctx->fap,
   3d64e:	4421      	add	r1, r4
   3d650:	6900      	ldr	r0, [r0, #16]
}
   3d652:	bc30      	pop	{r4, r5}
	return flash_area_write(entry_ctx->fap,
   3d654:	f7ff beb7 	b.w	3d3c6 <flash_area_write>

0003d658 <read_handler>:
{
   3d658:	b430      	push	{r4, r5}
	if (off >= entry_ctx->loc.fe_data_len) {
   3d65a:	8984      	ldrh	r4, [r0, #12]
   3d65c:	428c      	cmp	r4, r1
   3d65e:	dd0f      	ble.n	3d680 <read_handler+0x28>
	if ((off + *len) > entry_ctx->loc.fe_data_len) {
   3d660:	681d      	ldr	r5, [r3, #0]
   3d662:	440d      	add	r5, r1
   3d664:	42a5      	cmp	r5, r4
		*len = entry_ctx->loc.fe_data_len - off;
   3d666:	bf84      	itt	hi
   3d668:	1a64      	subhi	r4, r4, r1
   3d66a:	601c      	strhi	r4, [r3, #0]
			       FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off, buf,
   3d66c:	6804      	ldr	r4, [r0, #0]
   3d66e:	6885      	ldr	r5, [r0, #8]
   3d670:	6824      	ldr	r4, [r4, #0]
   3d672:	4429      	add	r1, r5
	return flash_area_read(entry_ctx->fap,
   3d674:	4421      	add	r1, r4
   3d676:	681b      	ldr	r3, [r3, #0]
   3d678:	6900      	ldr	r0, [r0, #16]
}
   3d67a:	bc30      	pop	{r4, r5}
	return flash_area_read(entry_ctx->fap,
   3d67c:	f7ff be87 	b.w	3d38e <flash_area_read>
		*len = 0;
   3d680:	2000      	movs	r0, #0
}
   3d682:	bc30      	pop	{r4, r5}
		*len = 0;
   3d684:	6018      	str	r0, [r3, #0]
}
   3d686:	4770      	bx	lr

0003d688 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   3d688:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   3d68a:	6800      	ldr	r0, [r0, #0]
   3d68c:	f7e5 b9ec 	b.w	22a68 <z_arm_fatal_error>

0003d690 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   3d690:	2100      	movs	r1, #0
   3d692:	2001      	movs	r0, #1
   3d694:	f7e5 b9e8 	b.w	22a68 <z_arm_fatal_error>

0003d698 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   3d698:	b508      	push	{r3, lr}
	handler();
   3d69a:	f7e5 fab1 	bl	22c00 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   3d69e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   3d6a2:	f7e5 bbb9 	b.w	22e18 <z_arm_exc_exit>

0003d6a6 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   3d6a6:	6f43      	ldr	r3, [r0, #116]	; 0x74
   3d6a8:	f383 880b 	msr	PSPLIM, r3
}
   3d6ac:	4770      	bx	lr

0003d6ae <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
{
#if defined(CONFIG_FPU_SHARING)
	if (buffer->ctx_saved) {
   3d6ae:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
   3d6b2:	b18b      	cbz	r3, 3d6d8 <z_arm_restore_fp_context+0x2a>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   3d6b4:	f3ef 8314 	mrs	r3, CONTROL
		/* Set FPCA first so it is set even if an interrupt happens
		 * during restoration.
		 */
		__set_CONTROL(__get_CONTROL() | CONTROL_FPCA_Msk);
   3d6b8:	f043 0304 	orr.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   3d6bc:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   3d6c0:	f3bf 8f6f 	isb	sy
  __builtin_arm_set_fpscr(fpscr);
   3d6c4:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   3d6c8:	eee1 3a10 	vmsr	fpscr, r3

		/* Restore FP state. */
		__set_FPSCR(buffer->fpscr);

		__asm__ volatile(
   3d6cc:	f100 0340 	add.w	r3, r0, #64	; 0x40
   3d6d0:	ec90 0a10 	vldmia	r0, {s0-s15}
   3d6d4:	ec93 8a10 	vldmia	r3, {s16-s31}
			"vldmia %1, {s16-s31}\n"
			:: "r" (buffer->caller_saved), "r" (buffer->callee_saved) :
		);
	}
#endif
}
   3d6d8:	4770      	bx	lr

0003d6da <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   3d6da:	e840 f000 	tt	r0, r0
   3d6de:	b2c3      	uxtb	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   3d6e0:	f410 3f80 	tst.w	r0, #65536	; 0x10000
	}

	return -EINVAL;
}
   3d6e4:	bf14      	ite	ne
   3d6e6:	4618      	movne	r0, r3
   3d6e8:	f06f 0015 	mvneq.w	r0, #21
   3d6ec:	4770      	bx	lr

0003d6ee <_stdout_hook_default>:
}
   3d6ee:	f04f 30ff 	mov.w	r0, #4294967295
   3d6f2:	4770      	bx	lr

0003d6f4 <_stdin_hook_default>:
}
   3d6f4:	2000      	movs	r0, #0
   3d6f6:	4770      	bx	lr

0003d6f8 <_read>:
{
   3d6f8:	4608      	mov	r0, r1
   3d6fa:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
   3d6fc:	f7e6 b8aa 	b.w	23854 <z_impl_zephyr_read_stdin>

0003d700 <_write>:
{
   3d700:	4608      	mov	r0, r1
   3d702:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
   3d704:	f7e6 b8ba 	b.w	2387c <z_impl_zephyr_write_stdout>

0003d708 <_close>:
   3d708:	f04f 30ff 	mov.w	r0, #4294967295
   3d70c:	4770      	bx	lr

0003d70e <_lseek>:
}
   3d70e:	2000      	movs	r0, #0
   3d710:	4770      	bx	lr

0003d712 <_isatty>:
}
   3d712:	2802      	cmp	r0, #2
   3d714:	bfcc      	ite	gt
   3d716:	2000      	movgt	r0, #0
   3d718:	2001      	movle	r0, #1
   3d71a:	4770      	bx	lr

0003d71c <_kill>:
}
   3d71c:	2000      	movs	r0, #0
   3d71e:	4770      	bx	lr

0003d720 <_getpid>:
}
   3d720:	2000      	movs	r0, #0
   3d722:	4770      	bx	lr

0003d724 <_fstat>:
	st->st_mode = S_IFCHR;
   3d724:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   3d728:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   3d72a:	604b      	str	r3, [r1, #4]
}
   3d72c:	4770      	bx	lr

0003d72e <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   3d72e:	f7f8 bbe7 	b.w	35f00 <z_impl_z_errno>

0003d732 <boot_request_upgrade_multi>:
#endif /* FLASH_AREA_IMAGE_SECONDARY */
	return 0;
}

int boot_request_upgrade_multi(int image_index, int permanent)
{
   3d732:	b508      	push	{r3, lr}
	int rc;

	rc = boot_set_pending_multi(image_index, permanent);
   3d734:	f7f3 feee 	bl	31514 <boot_set_pending_multi>
	if (rc) {
		return -EFAULT;
   3d738:	2800      	cmp	r0, #0
	}
	return 0;
}
   3d73a:	bf18      	it	ne
   3d73c:	f06f 000d 	mvnne.w	r0, #13
   3d740:	bd08      	pop	{r3, pc}

0003d742 <boot_is_img_confirmed>:

bool boot_is_img_confirmed(void)
{
   3d742:	b507      	push	{r0, r1, r2, lr}
	const struct flash_area *fa;
	int rc;
	uint8_t flag_val;

	rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY, &fa);
   3d744:	2003      	movs	r0, #3
   3d746:	a901      	add	r1, sp, #4
   3d748:	f7e4 fa74 	bl	21c34 <flash_area_open>
	if (rc) {
   3d74c:	b118      	cbz	r0, 3d756 <boot_is_img_confirmed+0x14>
		return false;
   3d74e:	2000      	movs	r0, #0
	if (rc) {
		return false;
	}

	return flag_val == BOOT_FLAG_SET;
}
   3d750:	b003      	add	sp, #12
   3d752:	f85d fb04 	ldr.w	pc, [sp], #4
	rc = boot_read_image_ok(fa, &flag_val);
   3d756:	9801      	ldr	r0, [sp, #4]
   3d758:	f10d 0103 	add.w	r1, sp, #3
   3d75c:	f002 f8cf 	bl	3f8fe <boot_read_image_ok>
	if (rc) {
   3d760:	2800      	cmp	r0, #0
   3d762:	d1f4      	bne.n	3d74e <boot_is_img_confirmed+0xc>
	return flag_val == BOOT_FLAG_SET;
   3d764:	f89d 0003 	ldrb.w	r0, [sp, #3]
   3d768:	1e43      	subs	r3, r0, #1
   3d76a:	4258      	negs	r0, r3
   3d76c:	4158      	adcs	r0, r3
   3d76e:	e7ef      	b.n	3d750 <boot_is_img_confirmed+0xe>

0003d770 <boot_write_img_confirmed>:

int boot_write_img_confirmed(void)
{
   3d770:	b508      	push	{r3, lr}
	int rc;

	rc = boot_set_confirmed();
   3d772:	f002 f8f0 	bl	3f956 <boot_set_confirmed>
	if (rc) {
		return -EIO;
   3d776:	2800      	cmp	r0, #0
	}

	return 0;
}
   3d778:	bf18      	it	ne
   3d77a:	f06f 0004 	mvnne.w	r0, #4
   3d77e:	bd08      	pop	{r3, pc}

0003d780 <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
   3d780:	b508      	push	{r3, lr}
	net_if_init();
   3d782:	f7e6 fa09 	bl	23b98 <net_if_init>
	net_if_post_init();
   3d786:	f7e6 fa39 	bl	23bfc <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   3d78a:	2000      	movs	r0, #0
   3d78c:	bd08      	pop	{r3, pc}

0003d78e <net_if_l2>:
	if (!iface || !iface->if_dev) {
   3d78e:	b110      	cbz	r0, 3d796 <net_if_l2+0x8>
   3d790:	6800      	ldr	r0, [r0, #0]
   3d792:	b100      	cbz	r0, 3d796 <net_if_l2+0x8>
	return iface->if_dev->l2;
   3d794:	6840      	ldr	r0, [r0, #4]
}
   3d796:	4770      	bx	lr

0003d798 <net_if_flag_is_set>:
	if (iface == NULL) {
   3d798:	b138      	cbz	r0, 3d7aa <net_if_flag_is_set+0x12>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3d79a:	6803      	ldr	r3, [r0, #0]
   3d79c:	330c      	adds	r3, #12
   3d79e:	e8d3 3faf 	lda	r3, [r3]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   3d7a2:	fa43 f001 	asr.w	r0, r3, r1
   3d7a6:	f000 0001 	and.w	r0, r0, #1
}
   3d7aa:	4770      	bx	lr

0003d7ac <l2_flags_get.isra.0>:
static enum net_l2_flags l2_flags_get(struct net_if *iface)
   3d7ac:	b510      	push	{r4, lr}
   3d7ae:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   3d7b0:	f7ff ffed 	bl	3d78e <net_if_l2>
   3d7b4:	b128      	cbz	r0, 3d7c2 <l2_flags_get.isra.0+0x16>
   3d7b6:	68c2      	ldr	r2, [r0, #12]
   3d7b8:	b11a      	cbz	r2, 3d7c2 <l2_flags_get.isra.0+0x16>
}
   3d7ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   3d7be:	4618      	mov	r0, r3
   3d7c0:	4710      	bx	r2
}
   3d7c2:	bd10      	pop	{r4, pc}

0003d7c4 <net_byte_to_hex>:
{
   3d7c4:	b530      	push	{r4, r5, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   3d7c6:	090c      	lsrs	r4, r1, #4
		if (i == 0 && !pad && !val) {
   3d7c8:	b1b3      	cbz	r3, 3d7f8 <net_byte_to_hex+0x34>
		if (val < 10) {
   3d7ca:	2c09      	cmp	r4, #9
			*ptr++ = (char) (val - 10 + base);
   3d7cc:	bf86      	itte	hi
   3d7ce:	f1a2 050a 	subhi.w	r5, r2, #10
   3d7d2:	1964      	addhi	r4, r4, r5
			*ptr++ = (char) (val + '0');
   3d7d4:	3430      	addls	r4, #48	; 0x30
			*ptr++ = (char) (val - 10 + base);
   3d7d6:	1c43      	adds	r3, r0, #1
			*ptr++ = (char) (val + '0');
   3d7d8:	7004      	strb	r4, [r0, #0]
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   3d7da:	f001 010f 	and.w	r1, r1, #15
		if (val < 10) {
   3d7de:	2909      	cmp	r1, #9
			*ptr++ = (char) (val - 10 + base);
   3d7e0:	bf84      	itt	hi
   3d7e2:	3a0a      	subhi	r2, #10
   3d7e4:	1889      	addhi	r1, r1, r2
	*ptr = '\0';
   3d7e6:	f04f 0200 	mov.w	r2, #0
			*ptr++ = (char) (val - 10 + base);
   3d7ea:	bf8c      	ite	hi
   3d7ec:	b2c9      	uxtbhi	r1, r1
			*ptr++ = (char) (val + '0');
   3d7ee:	3130      	addls	r1, #48	; 0x30
   3d7f0:	7019      	strb	r1, [r3, #0]
	*ptr = '\0';
   3d7f2:	705a      	strb	r2, [r3, #1]
			*ptr++ = (char) (val - 10 + base);
   3d7f4:	1c58      	adds	r0, r3, #1
}
   3d7f6:	bd30      	pop	{r4, r5, pc}
		if (i == 0 && !pad && !val) {
   3d7f8:	2c00      	cmp	r4, #0
   3d7fa:	d1e6      	bne.n	3d7ca <net_byte_to_hex+0x6>
   3d7fc:	4603      	mov	r3, r0
   3d7fe:	e7ec      	b.n	3d7da <net_byte_to_hex+0x16>

0003d800 <z_impl_net_addr_pton>:
#endif /* CONFIG_USERSPACE */

int z_impl_net_addr_pton(sa_family_t family, const char *src,
			 void *dst)
{
	if (family == AF_INET) {
   3d800:	2801      	cmp	r0, #1
{
   3d802:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3d806:	460c      	mov	r4, r1
   3d808:	4616      	mov	r6, r2
	if (family == AF_INET) {
   3d80a:	d126      	bne.n	3d85a <z_impl_net_addr_pton+0x5a>
		struct in_addr *addr = (struct in_addr *)dst;
		size_t i, len;

		len = strlen(src);
   3d80c:	4608      	mov	r0, r1
   3d80e:	f7df fd18 	bl	1d242 <strlen>
		for (i = 0; i < len; i++) {
   3d812:	4623      	mov	r3, r4
   3d814:	4420      	add	r0, r4
   3d816:	4298      	cmp	r0, r3
   3d818:	d112      	bne.n	3d840 <z_impl_net_addr_pton+0x40>
__ssp_bos_icheck3(memset, void *, int)
   3d81a:	4635      	mov	r5, r6
   3d81c:	2300      	movs	r3, #0
   3d81e:	3603      	adds	r6, #3
   3d820:	f845 3901 	str.w	r3, [r5], #-1
		(void)memset(addr, 0, sizeof(struct in_addr));

		for (i = 0; i < sizeof(struct in_addr); i++) {
			char *endptr;

			addr->s4_addr[i] = strtol(src, &endptr, 10);
   3d824:	4620      	mov	r0, r4
   3d826:	220a      	movs	r2, #10
   3d828:	a901      	add	r1, sp, #4
   3d82a:	f7fd f801 	bl	3a830 <strtol>

			src = ++endptr;
   3d82e:	9c01      	ldr	r4, [sp, #4]
			addr->s4_addr[i] = strtol(src, &endptr, 10);
   3d830:	f805 0f01 	strb.w	r0, [r5, #1]!
		for (i = 0; i < sizeof(struct in_addr); i++) {
   3d834:	42ae      	cmp	r6, r5
			src = ++endptr;
   3d836:	f104 0401 	add.w	r4, r4, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
   3d83a:	d1f3      	bne.n	3d824 <z_impl_net_addr_pton+0x24>
		}
	} else {
		return -EINVAL;
	}

	return 0;
   3d83c:	2000      	movs	r0, #0
   3d83e:	e009      	b.n	3d854 <z_impl_net_addr_pton+0x54>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   3d840:	f813 2b01 	ldrb.w	r2, [r3], #1
   3d844:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   3d848:	2909      	cmp	r1, #9
   3d84a:	d9e4      	bls.n	3d816 <z_impl_net_addr_pton+0x16>
   3d84c:	2a2e      	cmp	r2, #46	; 0x2e
   3d84e:	d0e2      	beq.n	3d816 <z_impl_net_addr_pton+0x16>
				return -EINVAL;
   3d850:	f06f 0015 	mvn.w	r0, #21
}
   3d854:	b003      	add	sp, #12
   3d856:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (family == AF_INET6) {
   3d85a:	2802      	cmp	r0, #2
   3d85c:	d1f8      	bne.n	3d850 <z_impl_net_addr_pton+0x50>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   3d85e:	212e      	movs	r1, #46	; 0x2e
   3d860:	4620      	mov	r0, r4
   3d862:	f003 ff7d 	bl	41760 <strchr>
		if (*src == ':') {
   3d866:	7823      	ldrb	r3, [r4, #0]
		int expected_groups = strchr(src, '.') ? 6 : 8;
   3d868:	2800      	cmp	r0, #0
   3d86a:	bf14      	ite	ne
   3d86c:	2706      	movne	r7, #6
   3d86e:	2708      	moveq	r7, #8
		if (*src == ':') {
   3d870:	2b3a      	cmp	r3, #58	; 0x3a
			src++;
   3d872:	bf08      	it	eq
   3d874:	3401      	addeq	r4, #1
		len = strlen(src);
   3d876:	4620      	mov	r0, r4
   3d878:	f7df fce3 	bl	1d242 <strlen>
		for (i = 0; i < len; i++) {
   3d87c:	2300      	movs	r3, #0
   3d87e:	4283      	cmp	r3, r0
   3d880:	db1f      	blt.n	3d8c2 <z_impl_net_addr_pton+0xc2>
		for (i = 0; i < expected_groups; i++) {
   3d882:	2500      	movs	r5, #0
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   3d884:	46a8      	mov	r8, r5
			if (!src || *src == '\0') {
   3d886:	7823      	ldrb	r3, [r4, #0]
   3d888:	2b00      	cmp	r3, #0
   3d88a:	d0e1      	beq.n	3d850 <z_impl_net_addr_pton+0x50>
			if (*src != ':') {
   3d88c:	2b3a      	cmp	r3, #58	; 0x3a
   3d88e:	d02f      	beq.n	3d8f0 <z_impl_net_addr_pton+0xf0>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   3d890:	2210      	movs	r2, #16
   3d892:	2100      	movs	r1, #0
   3d894:	4620      	mov	r0, r4
   3d896:	f7fc ffcb 	bl	3a830 <strtol>
   3d89a:	2210      	movs	r2, #16
   3d89c:	4681      	mov	r9, r0
   3d89e:	2100      	movs	r1, #0
   3d8a0:	4620      	mov	r0, r4
   3d8a2:	f7fc ffc5 	bl	3a830 <strtol>
   3d8a6:	f3c9 2907 	ubfx	r9, r9, #8, #8
   3d8aa:	ea49 2900 	orr.w	r9, r9, r0, lsl #8
   3d8ae:	f826 9015 	strh.w	r9, [r6, r5, lsl #1]
				src = strchr(src, ':');
   3d8b2:	213a      	movs	r1, #58	; 0x3a
   3d8b4:	4620      	mov	r0, r4
   3d8b6:	f003 ff53 	bl	41760 <strchr>
				if (src) {
   3d8ba:	4604      	mov	r4, r0
   3d8bc:	b178      	cbz	r0, 3d8de <z_impl_net_addr_pton+0xde>
			src++;
   3d8be:	3401      	adds	r4, #1
   3d8c0:	e010      	b.n	3d8e4 <z_impl_net_addr_pton+0xe4>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   3d8c2:	5ce2      	ldrb	r2, [r4, r3]
   3d8c4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   3d8c8:	290a      	cmp	r1, #10
   3d8ca:	d906      	bls.n	3d8da <z_impl_net_addr_pton+0xda>
   3d8cc:	f022 0120 	bic.w	r1, r2, #32
   3d8d0:	3941      	subs	r1, #65	; 0x41
   3d8d2:	2905      	cmp	r1, #5
   3d8d4:	d901      	bls.n	3d8da <z_impl_net_addr_pton+0xda>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   3d8d6:	2a2e      	cmp	r2, #46	; 0x2e
   3d8d8:	d1ba      	bne.n	3d850 <z_impl_net_addr_pton+0x50>
		for (i = 0; i < len; i++) {
   3d8da:	3301      	adds	r3, #1
   3d8dc:	e7cf      	b.n	3d87e <z_impl_net_addr_pton+0x7e>
					if (i < expected_groups - 1) {
   3d8de:	1e7b      	subs	r3, r7, #1
   3d8e0:	42ab      	cmp	r3, r5
   3d8e2:	dcb5      	bgt.n	3d850 <z_impl_net_addr_pton+0x50>
		for (i = 0; i < expected_groups; i++) {
   3d8e4:	3501      	adds	r5, #1
   3d8e6:	42af      	cmp	r7, r5
   3d8e8:	dd16      	ble.n	3d918 <z_impl_net_addr_pton+0x118>
			if (!src || *src == '\0') {
   3d8ea:	2c00      	cmp	r4, #0
   3d8ec:	d1cb      	bne.n	3d886 <z_impl_net_addr_pton+0x86>
   3d8ee:	e7af      	b.n	3d850 <z_impl_net_addr_pton+0x50>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
   3d8f0:	eb06 0345 	add.w	r3, r6, r5, lsl #1
   3d8f4:	f806 8015 	strb.w	r8, [r6, r5, lsl #1]
   3d8f8:	f883 8001 	strb.w	r8, [r3, #1]
			for (; i < expected_groups; i++) {
   3d8fc:	3501      	adds	r5, #1
   3d8fe:	42af      	cmp	r7, r5
   3d900:	dcf6      	bgt.n	3d8f0 <z_impl_net_addr_pton+0xf0>
			tmp = strrchr(src, ':');
   3d902:	213a      	movs	r1, #58	; 0x3a
   3d904:	4620      	mov	r0, r4
   3d906:	f003 ff73 	bl	417f0 <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   3d90a:	4284      	cmp	r4, r0
   3d90c:	d11f      	bne.n	3d94e <z_impl_net_addr_pton+0x14e>
   3d90e:	2f06      	cmp	r7, #6
   3d910:	d001      	beq.n	3d916 <z_impl_net_addr_pton+0x116>
   3d912:	7863      	ldrb	r3, [r4, #1]
   3d914:	b9fb      	cbnz	r3, 3d956 <z_impl_net_addr_pton+0x156>
				src++;
   3d916:	3401      	adds	r4, #1
		if (expected_groups == 6) {
   3d918:	2f06      	cmp	r7, #6
   3d91a:	d18f      	bne.n	3d83c <z_impl_net_addr_pton+0x3c>
			for (i = 0; i < 4; i++) {
   3d91c:	2500      	movs	r5, #0
   3d91e:	360c      	adds	r6, #12
				if (!src || !*src) {
   3d920:	2c00      	cmp	r4, #0
   3d922:	d095      	beq.n	3d850 <z_impl_net_addr_pton+0x50>
   3d924:	7823      	ldrb	r3, [r4, #0]
   3d926:	2b00      	cmp	r3, #0
   3d928:	d092      	beq.n	3d850 <z_impl_net_addr_pton+0x50>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   3d92a:	220a      	movs	r2, #10
   3d92c:	2100      	movs	r1, #0
   3d92e:	4620      	mov	r0, r4
   3d930:	f7fc ff7e 	bl	3a830 <strtol>
				src = strchr(src, '.');
   3d934:	212e      	movs	r1, #46	; 0x2e
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   3d936:	f806 0b01 	strb.w	r0, [r6], #1
				src = strchr(src, '.');
   3d93a:	4620      	mov	r0, r4
   3d93c:	f003 ff10 	bl	41760 <strchr>
				if (src) {
   3d940:	4604      	mov	r4, r0
   3d942:	b1b0      	cbz	r0, 3d972 <z_impl_net_addr_pton+0x172>
					src++;
   3d944:	3401      	adds	r4, #1
			for (i = 0; i < 4; i++) {
   3d946:	3501      	adds	r5, #1
   3d948:	2d04      	cmp	r5, #4
   3d94a:	d1e9      	bne.n	3d920 <z_impl_net_addr_pton+0x120>
   3d94c:	e776      	b.n	3d83c <z_impl_net_addr_pton+0x3c>
			if (expected_groups == 6) {
   3d94e:	2f06      	cmp	r7, #6
				tmp--;
   3d950:	bf08      	it	eq
   3d952:	f100 30ff 	addeq.w	r0, r0, #4294967295
			i = expected_groups - 1;
   3d956:	1e7d      	subs	r5, r7, #1
   3d958:	3001      	adds	r0, #1
				if (*tmp == ':') {
   3d95a:	f810 3d01 	ldrb.w	r3, [r0, #-1]!
   3d95e:	2b3a      	cmp	r3, #58	; 0x3a
					i--;
   3d960:	bf08      	it	eq
   3d962:	f105 35ff 	addeq.w	r5, r5, #4294967295
				if (i < 0) {
   3d966:	2d00      	cmp	r5, #0
   3d968:	f6ff af72 	blt.w	3d850 <z_impl_net_addr_pton+0x50>
			} while (tmp-- != src);
   3d96c:	4284      	cmp	r4, r0
   3d96e:	d1f4      	bne.n	3d95a <z_impl_net_addr_pton+0x15a>
   3d970:	e7a5      	b.n	3d8be <z_impl_net_addr_pton+0xbe>
					if (i < 3) {
   3d972:	2d03      	cmp	r5, #3
   3d974:	f47f af6c 	bne.w	3d850 <z_impl_net_addr_pton+0x50>
   3d978:	e7e5      	b.n	3d946 <z_impl_net_addr_pton+0x146>

0003d97a <unpack_uint16>:
 */
static int unpack_uint16(struct buf_ctx *buf, uint16_t *val)
{
	NET_DBG(">> cur:%p, end:%p", buf->cur, buf->end);

	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   3d97a:	e9d0 2300 	ldrd	r2, r3, [r0]
   3d97e:	1a9b      	subs	r3, r3, r2
   3d980:	2b01      	cmp	r3, #1
{
   3d982:	b510      	push	{r4, lr}
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   3d984:	d90c      	bls.n	3d9a0 <unpack_uint16+0x26>
		return -EINVAL;
	}

	*val = *(buf->cur++) << 8; /* MSB */
   3d986:	4614      	mov	r4, r2
   3d988:	1c53      	adds	r3, r2, #1
   3d98a:	6003      	str	r3, [r0, #0]
   3d98c:	f814 3b02 	ldrb.w	r3, [r4], #2
   3d990:	021b      	lsls	r3, r3, #8
   3d992:	800b      	strh	r3, [r1, #0]
	*val |= *(buf->cur++); /* LSB */
   3d994:	6004      	str	r4, [r0, #0]

	NET_DBG("<< val:%04x", *val);

	return 0;
   3d996:	2000      	movs	r0, #0
	*val |= *(buf->cur++); /* LSB */
   3d998:	7852      	ldrb	r2, [r2, #1]
   3d99a:	4313      	orrs	r3, r2
   3d99c:	800b      	strh	r3, [r1, #0]
}
   3d99e:	bd10      	pop	{r4, pc}
		return -EINVAL;
   3d9a0:	f06f 0015 	mvn.w	r0, #21
   3d9a4:	e7fb      	b.n	3d99e <unpack_uint16+0x24>

0003d9a6 <fixed_header_decode>:
	return 0;
}

int fixed_header_decode(struct buf_ctx *buf, uint8_t *type_and_flags,
			uint32_t *length)
{
   3d9a6:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3d9a8:	e9d0 3400 	ldrd	r3, r4, [r0]
   3d9ac:	429c      	cmp	r4, r3
   3d9ae:	d01f      	beq.n	3d9f0 <fixed_header_decode+0x4a>
	*val = *(buf->cur++);
   3d9b0:	1c5c      	adds	r4, r3, #1
   3d9b2:	6004      	str	r4, [r0, #0]
   3d9b4:	781b      	ldrb	r3, [r3, #0]
   3d9b6:	700b      	strb	r3, [r1, #0]
	*length = 0U;
   3d9b8:	2100      	movs	r1, #0
		if (buf->cur >= buf->end) {
   3d9ba:	6847      	ldr	r7, [r0, #4]
	*length = 0U;
   3d9bc:	6011      	str	r1, [r2, #0]
		if (buf->cur >= buf->end) {
   3d9be:	6804      	ldr	r4, [r0, #0]
   3d9c0:	42bc      	cmp	r4, r7
   3d9c2:	d218      	bcs.n	3d9f6 <fixed_header_decode+0x50>
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   3d9c4:	4625      	mov	r5, r4
   3d9c6:	f815 3b01 	ldrb.w	r3, [r5], #1
   3d9ca:	6816      	ldr	r6, [r2, #0]
   3d9cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
								<< shift;
   3d9d0:	408b      	lsls	r3, r1
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   3d9d2:	4433      	add	r3, r6
   3d9d4:	6013      	str	r3, [r2, #0]
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   3d9d6:	6005      	str	r5, [r0, #0]
   3d9d8:	f994 4000 	ldrsb.w	r4, [r4]
   3d9dc:	2c00      	cmp	r4, #0
   3d9de:	db04      	blt.n	3d9ea <fixed_header_decode+0x44>
	if (*length > MQTT_MAX_PAYLOAD_SIZE) {
   3d9e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   3d9e4:	d204      	bcs.n	3d9f0 <fixed_header_decode+0x4a>
	return 0;
   3d9e6:	2000      	movs	r0, #0
   3d9e8:	e004      	b.n	3d9f4 <fixed_header_decode+0x4e>
		if (bytes >= MQTT_MAX_LENGTH_BYTES) {
   3d9ea:	3107      	adds	r1, #7
   3d9ec:	291c      	cmp	r1, #28
   3d9ee:	d1e6      	bne.n	3d9be <fixed_header_decode+0x18>
		return -EINVAL;
   3d9f0:	f06f 0015 	mvn.w	r0, #21
	if (err_code != 0) {
		return err_code;
	}

	return packet_length_decode(buf, length);
}
   3d9f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -EAGAIN;
   3d9f6:	f06f 000a 	mvn.w	r0, #10
   3d9fa:	e7fb      	b.n	3d9f4 <fixed_header_decode+0x4e>

0003d9fc <connect_ack_decode>:

int connect_ack_decode(const struct mqtt_client *client, struct buf_ctx *buf,
		       struct mqtt_connack_param *param)
{
   3d9fc:	b530      	push	{r4, r5, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3d9fe:	e9d1 3500 	ldrd	r3, r5, [r1]
   3da02:	429d      	cmp	r5, r3
   3da04:	d102      	bne.n	3da0c <connect_ack_decode+0x10>
		return -EINVAL;
   3da06:	f06f 0015 	mvn.w	r0, #21
	}

	param->return_code = (enum mqtt_conn_return_code)ret_code;

	return 0;
}
   3da0a:	bd30      	pop	{r4, r5, pc}
	*val = *(buf->cur++);
   3da0c:	1c5c      	adds	r4, r3, #1
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3da0e:	42a5      	cmp	r5, r4
	*val = *(buf->cur++);
   3da10:	600c      	str	r4, [r1, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3da12:	d0f8      	beq.n	3da06 <connect_ack_decode+0xa>
	*val = *(buf->cur++);
   3da14:	461d      	mov	r5, r3
   3da16:	f815 4b02 	ldrb.w	r4, [r5], #2
   3da1a:	600d      	str	r5, [r1, #0]
   3da1c:	7859      	ldrb	r1, [r3, #1]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   3da1e:	f890 3082 	ldrb.w	r3, [r0, #130]	; 0x82
	return 0;
   3da22:	2000      	movs	r0, #0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   3da24:	2b04      	cmp	r3, #4
			flags & MQTT_CONNACK_FLAG_SESSION_PRESENT;
   3da26:	bf04      	itt	eq
   3da28:	f004 0301 	andeq.w	r3, r4, #1
		param->session_present_flag =
   3da2c:	7013      	strbeq	r3, [r2, #0]
	param->return_code = (enum mqtt_conn_return_code)ret_code;
   3da2e:	7051      	strb	r1, [r2, #1]
	return 0;
   3da30:	e7eb      	b.n	3da0a <connect_ack_decode+0xe>

0003da32 <publish_decode>:

int publish_decode(uint8_t flags, uint32_t var_length, struct buf_ctx *buf,
		   struct mqtt_publish_param *param)
{
   3da32:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3da36:	461c      	mov	r4, r3
   3da38:	4617      	mov	r7, r2
	int err_code;
	uint32_t var_header_length;

	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   3da3a:	7da2      	ldrb	r2, [r4, #22]
   3da3c:	0043      	lsls	r3, r0, #1
   3da3e:	f022 0203 	bic.w	r2, r2, #3
   3da42:	f003 0302 	and.w	r3, r3, #2
   3da46:	4313      	orrs	r3, r2
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   3da48:	f3c0 0041 	ubfx	r0, r0, #1, #2
   3da4c:	7220      	strb	r0, [r4, #8]
{
   3da4e:	4688      	mov	r8, r1
	err_code = unpack_uint16(buf, &utf8_strlen);
   3da50:	4638      	mov	r0, r7
	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   3da52:	75a3      	strb	r3, [r4, #22]
	err_code = unpack_uint16(buf, &utf8_strlen);
   3da54:	f10d 0106 	add.w	r1, sp, #6
   3da58:	f7ff ff8f 	bl	3d97a <unpack_uint16>
	if (err_code != 0) {
   3da5c:	4606      	mov	r6, r0
   3da5e:	b9c0      	cbnz	r0, 3da92 <publish_decode+0x60>
	if ((buf->end - buf->cur) < utf8_strlen) {
   3da60:	683b      	ldr	r3, [r7, #0]
   3da62:	687a      	ldr	r2, [r7, #4]
   3da64:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   3da68:	1ad2      	subs	r2, r2, r3
   3da6a:	42aa      	cmp	r2, r5
   3da6c:	da02      	bge.n	3da74 <publish_decode+0x42>

	if (var_length < var_header_length) {
		NET_ERR("Corrupted PUBLISH message, header length (%u) larger "
			 "than total length (%u)", var_header_length,
			 var_length);
		return -EINVAL;
   3da6e:	f06f 0615 	mvn.w	r6, #21
   3da72:	e00e      	b.n	3da92 <publish_decode+0x60>
	str->size = utf8_strlen;
   3da74:	6065      	str	r5, [r4, #4]
	if (utf8_strlen) {
   3da76:	b185      	cbz	r5, 3da9a <publish_decode+0x68>
		str->utf8 = buf->cur;
   3da78:	6023      	str	r3, [r4, #0]
		buf->cur += utf8_strlen;
   3da7a:	442b      	add	r3, r5
   3da7c:	603b      	str	r3, [r7, #0]
	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   3da7e:	7a23      	ldrb	r3, [r4, #8]
   3da80:	b96b      	cbnz	r3, 3da9e <publish_decode+0x6c>
	var_header_length = param->message.topic.topic.size + sizeof(uint16_t);
   3da82:	3502      	adds	r5, #2
	if (var_length < var_header_length) {
   3da84:	45a8      	cmp	r8, r5
   3da86:	d3f2      	bcc.n	3da6e <publish_decode+0x3c>
	}

	param->message.payload.data = NULL;
   3da88:	2300      	movs	r3, #0
	param->message.payload.len = var_length - var_header_length;
   3da8a:	eba8 0505 	sub.w	r5, r8, r5
	param->message.payload.data = NULL;
   3da8e:	60e3      	str	r3, [r4, #12]
	param->message.payload.len = var_length - var_header_length;
   3da90:	6125      	str	r5, [r4, #16]

	return 0;
}
   3da92:	4630      	mov	r0, r6
   3da94:	b002      	add	sp, #8
   3da96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		str->utf8 = NULL;
   3da9a:	6025      	str	r5, [r4, #0]
	if (err_code != 0) {
   3da9c:	e7ef      	b.n	3da7e <publish_decode+0x4c>
		err_code = unpack_uint16(buf, &param->message_id);
   3da9e:	4638      	mov	r0, r7
   3daa0:	f104 0114 	add.w	r1, r4, #20
   3daa4:	f7ff ff69 	bl	3d97a <unpack_uint16>
		if (err_code != 0) {
   3daa8:	b908      	cbnz	r0, 3daae <publish_decode+0x7c>
		var_header_length += sizeof(uint16_t);
   3daaa:	3504      	adds	r5, #4
   3daac:	e7ea      	b.n	3da84 <publish_decode+0x52>
   3daae:	4606      	mov	r6, r0
   3dab0:	e7ef      	b.n	3da92 <publish_decode+0x60>

0003dab2 <publish_ack_decode>:

int publish_ack_decode(struct buf_ctx *buf, struct mqtt_puback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3dab2:	f7ff bf62 	b.w	3d97a <unpack_uint16>

0003dab6 <publish_receive_decode>:
}

int publish_receive_decode(struct buf_ctx *buf, struct mqtt_pubrec_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3dab6:	f7ff bf60 	b.w	3d97a <unpack_uint16>

0003daba <publish_release_decode>:
}

int publish_release_decode(struct buf_ctx *buf, struct mqtt_pubrel_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3daba:	f7ff bf5e 	b.w	3d97a <unpack_uint16>

0003dabe <publish_complete_decode>:
}

int publish_complete_decode(struct buf_ctx *buf,
			    struct mqtt_pubcomp_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3dabe:	f7ff bf5c 	b.w	3d97a <unpack_uint16>

0003dac2 <subscribe_ack_decode>:
}

int subscribe_ack_decode(struct buf_ctx *buf, struct mqtt_suback_param *param)
{
   3dac2:	b538      	push	{r3, r4, r5, lr}
   3dac4:	4605      	mov	r5, r0
   3dac6:	460c      	mov	r4, r1
	int err_code;

	err_code = unpack_uint16(buf, &param->message_id);
   3dac8:	f7ff ff57 	bl	3d97a <unpack_uint16>
	if (err_code != 0) {
   3dacc:	b930      	cbnz	r0, 3dadc <subscribe_ack_decode+0x1a>
		return err_code;
	}

	return unpack_data(buf->end - buf->cur, buf, &param->return_codes);
   3dace:	e9d5 2300 	ldrd	r2, r3, [r5]
   3dad2:	1a99      	subs	r1, r3, r2
	str->len = length;
   3dad4:	60a1      	str	r1, [r4, #8]
	if (length > 0) {
   3dad6:	b111      	cbz	r1, 3dade <subscribe_ack_decode+0x1c>
		str->data = buf->cur;
   3dad8:	6062      	str	r2, [r4, #4]
		buf->cur += length;
   3dada:	602b      	str	r3, [r5, #0]
}
   3dadc:	bd38      	pop	{r3, r4, r5, pc}
		str->data = NULL;
   3dade:	6060      	str	r0, [r4, #4]
   3dae0:	e7fc      	b.n	3dadc <subscribe_ack_decode+0x1a>

0003dae2 <unsubscribe_ack_decode>:

int unsubscribe_ack_decode(struct buf_ctx *buf,
			   struct mqtt_unsuback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3dae2:	f7ff bf4a 	b.w	3d97a <unpack_uint16>

0003dae6 <pack_uint16>:
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   3dae6:	e9d1 3200 	ldrd	r3, r2, [r1]
   3daea:	1ad2      	subs	r2, r2, r3
   3daec:	2a01      	cmp	r2, #1
   3daee:	d909      	bls.n	3db04 <pack_uint16+0x1e>
	*(buf->cur++) = (val >> 8) & 0xFF;
   3daf0:	1c5a      	adds	r2, r3, #1
   3daf2:	600a      	str	r2, [r1, #0]
   3daf4:	0a02      	lsrs	r2, r0, #8
   3daf6:	701a      	strb	r2, [r3, #0]
	*(buf->cur++) = val & 0xFF;
   3daf8:	680b      	ldr	r3, [r1, #0]
   3dafa:	1c5a      	adds	r2, r3, #1
   3dafc:	600a      	str	r2, [r1, #0]
   3dafe:	7018      	strb	r0, [r3, #0]
	return 0;
   3db00:	2000      	movs	r0, #0
   3db02:	4770      	bx	lr
		return -ENOMEM;
   3db04:	f06f 000b 	mvn.w	r0, #11
}
   3db08:	4770      	bx	lr

0003db0a <pack_utf8_str>:
{
   3db0a:	b538      	push	{r3, r4, r5, lr}
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   3db0c:	e9d1 2300 	ldrd	r2, r3, [r1]
{
   3db10:	4605      	mov	r5, r0
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   3db12:	6840      	ldr	r0, [r0, #4]
   3db14:	1a9b      	subs	r3, r3, r2
   3db16:	1c82      	adds	r2, r0, #2
   3db18:	4293      	cmp	r3, r2
{
   3db1a:	460c      	mov	r4, r1
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   3db1c:	d30d      	bcc.n	3db3a <pack_utf8_str+0x30>
	(void)pack_uint16(str->size, buf);
   3db1e:	b280      	uxth	r0, r0
   3db20:	f7ff ffe1 	bl	3dae6 <pack_uint16>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3db24:	e9d5 1200 	ldrd	r1, r2, [r5]
   3db28:	6820      	ldr	r0, [r4, #0]
   3db2a:	f003 fc3b 	bl	413a4 <memcpy>
	return 0;
   3db2e:	2000      	movs	r0, #0
	buf->cur += str->size;
   3db30:	6823      	ldr	r3, [r4, #0]
   3db32:	686a      	ldr	r2, [r5, #4]
   3db34:	4413      	add	r3, r2
   3db36:	6023      	str	r3, [r4, #0]
}
   3db38:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   3db3a:	f06f 000b 	mvn.w	r0, #11
   3db3e:	e7fb      	b.n	3db38 <pack_utf8_str+0x2e>

0003db40 <mqtt_encode_fixed_header>:
	uint32_t length = buf->cur - start;
   3db40:	6813      	ldr	r3, [r2, #0]
{
   3db42:	b570      	push	{r4, r5, r6, lr}
	uint32_t length = buf->cur - start;
   3db44:	1a5c      	subs	r4, r3, r1
	if (length > MQTT_MAX_PAYLOAD_SIZE) {
   3db46:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   3db4a:	d227      	bcs.n	3db9c <mqtt_encode_fixed_header+0x5c>
   3db4c:	4625      	mov	r5, r4
   3db4e:	2600      	movs	r6, #0
	} while (length > 0);
   3db50:	09ed      	lsrs	r5, r5, #7
   3db52:	b2f3      	uxtb	r3, r6
   3db54:	f106 0601 	add.w	r6, r6, #1
   3db58:	d1fa      	bne.n	3db50 <mqtt_encode_fixed_header+0x10>
	fixed_header_length += sizeof(uint8_t);
   3db5a:	3302      	adds	r3, #2
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3db5c:	6856      	ldr	r6, [r2, #4]
	buf->cur = start - fixed_header_length;
   3db5e:	b2db      	uxtb	r3, r3
   3db60:	425d      	negs	r5, r3
   3db62:	1acb      	subs	r3, r1, r3
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3db64:	42b3      	cmp	r3, r6
	buf->cur = start - fixed_header_length;
   3db66:	6013      	str	r3, [r2, #0]
	*(buf->cur++) = val;
   3db68:	bf1e      	ittt	ne
   3db6a:	3301      	addne	r3, #1
   3db6c:	6013      	strne	r3, [r2, #0]
   3db6e:	5548      	strbne	r0, [r1, r5]
	return 0;
   3db70:	4620      	mov	r0, r4
			*(buf->cur) = length & MQTT_LENGTH_VALUE_MASK;
   3db72:	6813      	ldr	r3, [r2, #0]
   3db74:	f000 017f 	and.w	r1, r0, #127	; 0x7f
   3db78:	7019      	strb	r1, [r3, #0]
			if (length > 0) {
   3db7a:	09c0      	lsrs	r0, r0, #7
				*(buf->cur) |= MQTT_LENGTH_CONTINUATION_BIT;
   3db7c:	bf1f      	itttt	ne
   3db7e:	6811      	ldrne	r1, [r2, #0]
   3db80:	780b      	ldrbne	r3, [r1, #0]
   3db82:	f063 037f 	ornne	r3, r3, #127	; 0x7f
   3db86:	700b      	strbne	r3, [r1, #0]
			buf->cur++;
   3db88:	6813      	ldr	r3, [r2, #0]
   3db8a:	3301      	adds	r3, #1
   3db8c:	6013      	str	r3, [r2, #0]
	} while (length > 0);
   3db8e:	2800      	cmp	r0, #0
   3db90:	d1ef      	bne.n	3db72 <mqtt_encode_fixed_header+0x32>
	buf->cur = buf->cur - fixed_header_length;
   3db92:	441d      	add	r5, r3
	buf->end = buf->cur + length + fixed_header_length;
   3db94:	4423      	add	r3, r4
	buf->cur = buf->cur - fixed_header_length;
   3db96:	6015      	str	r5, [r2, #0]
	buf->end = buf->cur + length + fixed_header_length;
   3db98:	6053      	str	r3, [r2, #4]
}
   3db9a:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   3db9c:	f06f 0079 	mvn.w	r0, #121	; 0x79
   3dba0:	e7fb      	b.n	3db9a <mqtt_encode_fixed_header+0x5a>

0003dba2 <mqtt_message_id_only_enc>:
{
   3dba2:	b570      	push	{r4, r5, r6, lr}
   3dba4:	4606      	mov	r6, r0
   3dba6:	4614      	mov	r4, r2
	if (message_id == 0U) {
   3dba8:	4608      	mov	r0, r1
   3dbaa:	b169      	cbz	r1, 3dbc8 <mqtt_message_id_only_enc+0x26>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3dbac:	6815      	ldr	r5, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   3dbae:	4611      	mov	r1, r2
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3dbb0:	3505      	adds	r5, #5
   3dbb2:	6015      	str	r5, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   3dbb4:	f7ff ff97 	bl	3dae6 <pack_uint16>
	if (err_code != 0) {
   3dbb8:	b940      	cbnz	r0, 3dbcc <mqtt_message_id_only_enc+0x2a>
	return mqtt_encode_fixed_header(message_type, start, buf);
   3dbba:	4622      	mov	r2, r4
   3dbbc:	4629      	mov	r1, r5
   3dbbe:	4630      	mov	r0, r6
}
   3dbc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   3dbc4:	f7ff bfbc 	b.w	3db40 <mqtt_encode_fixed_header>
		return -EINVAL;
   3dbc8:	f06f 0015 	mvn.w	r0, #21
}
   3dbcc:	bd70      	pop	{r4, r5, r6, pc}

0003dbce <publish_encode>:
{
   3dbce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   3dbd2:	7d87      	ldrb	r7, [r0, #22]
   3dbd4:	7a04      	ldrb	r4, [r0, #8]
   3dbd6:	f007 0801 	and.w	r8, r7, #1
{
   3dbda:	4605      	mov	r5, r0
   3dbdc:	4689      	mov	r9, r1
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   3dbde:	f3c7 0740 	ubfx	r7, r7, #1, #1
	if ((param->message.topic.qos) && (param->message_id == 0U)) {
   3dbe2:	b10c      	cbz	r4, 3dbe8 <publish_encode+0x1a>
   3dbe4:	8a83      	ldrh	r3, [r0, #20]
   3dbe6:	b383      	cbz	r3, 3dc4a <publish_encode+0x7c>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3dbe8:	f8d9 6000 	ldr.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   3dbec:	4649      	mov	r1, r9
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3dbee:	3605      	adds	r6, #5
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   3dbf0:	4628      	mov	r0, r5
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3dbf2:	f8c9 6000 	str.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   3dbf6:	f7ff ff88 	bl	3db0a <pack_utf8_str>
	if (err_code != 0) {
   3dbfa:	b9b0      	cbnz	r0, 3dc2a <publish_encode+0x5c>
	if (param->message.topic.qos) {
   3dbfc:	7a2b      	ldrb	r3, [r5, #8]
   3dbfe:	b9b3      	cbnz	r3, 3dc2e <publish_encode+0x60>
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   3dc00:	0060      	lsls	r0, r4, #1
   3dc02:	f000 0006 	and.w	r0, r0, #6
	buf->cur += param->message.payload.len;
   3dc06:	692a      	ldr	r2, [r5, #16]
   3dc08:	f8d9 3000 	ldr.w	r3, [r9]
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   3dc0c:	4338      	orrs	r0, r7
   3dc0e:	ea40 00c8 	orr.w	r0, r0, r8, lsl #3
	buf->cur += param->message.payload.len;
   3dc12:	4413      	add	r3, r2
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   3dc14:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   3dc18:	464a      	mov	r2, r9
   3dc1a:	4631      	mov	r1, r6
	buf->cur += param->message.payload.len;
   3dc1c:	f8c9 3000 	str.w	r3, [r9]
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   3dc20:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   3dc24:	f7ff ff8c 	bl	3db40 <mqtt_encode_fixed_header>
	if (err_code != 0) {
   3dc28:	b140      	cbz	r0, 3dc3c <publish_encode+0x6e>
}
   3dc2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_uint16(param->message_id, buf);
   3dc2e:	4649      	mov	r1, r9
   3dc30:	8aa8      	ldrh	r0, [r5, #20]
   3dc32:	f7ff ff58 	bl	3dae6 <pack_uint16>
		if (err_code != 0) {
   3dc36:	2800      	cmp	r0, #0
   3dc38:	d0e2      	beq.n	3dc00 <publish_encode+0x32>
   3dc3a:	e7f6      	b.n	3dc2a <publish_encode+0x5c>
	buf->end -= param->message.payload.len;
   3dc3c:	f8d9 3004 	ldr.w	r3, [r9, #4]
   3dc40:	692a      	ldr	r2, [r5, #16]
   3dc42:	1a9b      	subs	r3, r3, r2
   3dc44:	f8c9 3004 	str.w	r3, [r9, #4]
	return 0;
   3dc48:	e7ef      	b.n	3dc2a <publish_encode+0x5c>
		return -EINVAL;
   3dc4a:	f06f 0015 	mvn.w	r0, #21
   3dc4e:	e7ec      	b.n	3dc2a <publish_encode+0x5c>

0003dc50 <publish_ack_encode>:
{
   3dc50:	460a      	mov	r2, r1
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
   3dc52:	8801      	ldrh	r1, [r0, #0]
   3dc54:	2040      	movs	r0, #64	; 0x40
   3dc56:	f7ff bfa4 	b.w	3dba2 <mqtt_message_id_only_enc>

0003dc5a <subscribe_encode>:
{
   3dc5a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3dc5e:	4606      	mov	r6, r0
	if (param->message_id == 0U) {
   3dc60:	88c0      	ldrh	r0, [r0, #6]
{
   3dc62:	460d      	mov	r5, r1
	if (param->message_id == 0U) {
   3dc64:	b330      	cbz	r0, 3dcb4 <subscribe_encode+0x5a>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3dc66:	680f      	ldr	r7, [r1, #0]
   3dc68:	3705      	adds	r7, #5
   3dc6a:	600f      	str	r7, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   3dc6c:	f7ff ff3b 	bl	3dae6 <pack_uint16>
	if (err_code != 0) {
   3dc70:	4604      	mov	r4, r0
   3dc72:	bb08      	cbnz	r0, 3dcb8 <subscribe_encode+0x5e>
   3dc74:	f04f 080c 	mov.w	r8, #12
	for (i = 0; i < param->list_count; i++) {
   3dc78:	88b3      	ldrh	r3, [r6, #4]
   3dc7a:	42a3      	cmp	r3, r4
   3dc7c:	dc06      	bgt.n	3dc8c <subscribe_encode+0x32>
	return mqtt_encode_fixed_header(message_type, start, buf);
   3dc7e:	462a      	mov	r2, r5
   3dc80:	4639      	mov	r1, r7
}
   3dc82:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   3dc86:	2082      	movs	r0, #130	; 0x82
   3dc88:	f7ff bf5a 	b.w	3db40 <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3dc8c:	fb08 f904 	mul.w	r9, r8, r4
   3dc90:	6830      	ldr	r0, [r6, #0]
   3dc92:	4629      	mov	r1, r5
   3dc94:	4448      	add	r0, r9
   3dc96:	f7ff ff38 	bl	3db0a <pack_utf8_str>
		if (err_code != 0) {
   3dc9a:	b980      	cbnz	r0, 3dcbe <subscribe_encode+0x64>
		err_code = pack_uint8(param->list[i].qos, buf);
   3dc9c:	6833      	ldr	r3, [r6, #0]
   3dc9e:	444b      	add	r3, r9
   3dca0:	7a1a      	ldrb	r2, [r3, #8]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3dca2:	e9d5 3100 	ldrd	r3, r1, [r5]
   3dca6:	4299      	cmp	r1, r3
   3dca8:	d00b      	beq.n	3dcc2 <subscribe_encode+0x68>
	*(buf->cur++) = val;
   3dcaa:	1c59      	adds	r1, r3, #1
   3dcac:	6029      	str	r1, [r5, #0]
	for (i = 0; i < param->list_count; i++) {
   3dcae:	3401      	adds	r4, #1
	*(buf->cur++) = val;
   3dcb0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < param->list_count; i++) {
   3dcb2:	e7e1      	b.n	3dc78 <subscribe_encode+0x1e>
		return -EINVAL;
   3dcb4:	f06f 0415 	mvn.w	r4, #21
}
   3dcb8:	4620      	mov	r0, r4
   3dcba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3dcbe:	4604      	mov	r4, r0
   3dcc0:	e7fa      	b.n	3dcb8 <subscribe_encode+0x5e>
		return -ENOMEM;
   3dcc2:	f06f 040b 	mvn.w	r4, #11
   3dcc6:	e7f7      	b.n	3dcb8 <subscribe_encode+0x5e>

0003dcc8 <unsubscribe_encode>:
{
   3dcc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3dccc:	680f      	ldr	r7, [r1, #0]
{
   3dcce:	4606      	mov	r6, r0
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3dcd0:	3705      	adds	r7, #5
	err_code = pack_uint16(param->message_id, buf);
   3dcd2:	88c0      	ldrh	r0, [r0, #6]
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3dcd4:	600f      	str	r7, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   3dcd6:	f7ff ff06 	bl	3dae6 <pack_uint16>
{
   3dcda:	460d      	mov	r5, r1
	if (err_code != 0) {
   3dcdc:	4604      	mov	r4, r0
   3dcde:	b9a8      	cbnz	r0, 3dd0c <unsubscribe_encode+0x44>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3dce0:	f04f 080c 	mov.w	r8, #12
	for (i = 0; i < param->list_count; i++) {
   3dce4:	88b3      	ldrh	r3, [r6, #4]
   3dce6:	42a3      	cmp	r3, r4
   3dce8:	dc06      	bgt.n	3dcf8 <unsubscribe_encode+0x30>
	return mqtt_encode_fixed_header(message_type, start, buf);
   3dcea:	462a      	mov	r2, r5
   3dcec:	4639      	mov	r1, r7
}
   3dcee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   3dcf2:	20a2      	movs	r0, #162	; 0xa2
   3dcf4:	f7ff bf24 	b.w	3db40 <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3dcf8:	6830      	ldr	r0, [r6, #0]
   3dcfa:	4629      	mov	r1, r5
   3dcfc:	fb08 0004 	mla	r0, r8, r4, r0
   3dd00:	f7ff ff03 	bl	3db0a <pack_utf8_str>
		if (err_code != 0) {
   3dd04:	b908      	cbnz	r0, 3dd0a <unsubscribe_encode+0x42>
	for (i = 0; i < param->list_count; i++) {
   3dd06:	3401      	adds	r4, #1
   3dd08:	e7ec      	b.n	3dce4 <unsubscribe_encode+0x1c>
   3dd0a:	4604      	mov	r4, r0
}
   3dd0c:	4620      	mov	r0, r4
   3dd0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003dd12 <mqtt_read_message_chunk>:
	return err_code;
}

static int mqtt_read_message_chunk(struct mqtt_client *client,
				   struct buf_ctx *buf, uint32_t length)
{
   3dd12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3dd14:	460d      	mov	r5, r1
	uint32_t remaining;
	int len;

	/* In case all data requested has already been buffered, return. */
	if (length <= (buf->end - buf->cur)) {
   3dd16:	e9d1 3100 	ldrd	r3, r1, [r1]
   3dd1a:	1acb      	subs	r3, r1, r3
   3dd1c:	4293      	cmp	r3, r2
{
   3dd1e:	4606      	mov	r6, r0
	if (length <= (buf->end - buf->cur)) {
   3dd20:	d301      	bcc.n	3dd26 <mqtt_read_message_chunk+0x14>
		return 0;
   3dd22:	2000      	movs	r0, #0
		NET_ERR("[CID %p]: Message partially received.", client);
		return -EAGAIN;
	}

	return 0;
}
   3dd24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	remaining = length - (buf->end - buf->cur);
   3dd26:	1ad4      	subs	r4, r2, r3
	if ((buf->end + remaining > client->rx_buf + client->rx_buf_size) ||
   3dd28:	190f      	adds	r7, r1, r4
   3dd2a:	e9d0 231c 	ldrd	r2, r3, [r0, #112]	; 0x70
   3dd2e:	4413      	add	r3, r2
   3dd30:	429f      	cmp	r7, r3
   3dd32:	d813      	bhi.n	3dd5c <mqtt_read_message_chunk+0x4a>
   3dd34:	4297      	cmp	r7, r2
   3dd36:	d311      	bcc.n	3dd5c <mqtt_read_message_chunk+0x4a>
	len = mqtt_transport_read(client, buf->end, remaining, false);
   3dd38:	2300      	movs	r3, #0
   3dd3a:	4622      	mov	r2, r4
   3dd3c:	f7e6 f92a 	bl	23f94 <mqtt_transport_read>
	if (len < 0) {
   3dd40:	2800      	cmp	r0, #0
   3dd42:	dbef      	blt.n	3dd24 <mqtt_read_message_chunk+0x12>
	if (len == 0) {
   3dd44:	d00d      	beq.n	3dd62 <mqtt_read_message_chunk+0x50>
	client->internal.rx_buf_datalen += len;
   3dd46:	69f3      	ldr	r3, [r6, #28]
	if (len < remaining) {
   3dd48:	42a0      	cmp	r0, r4
	client->internal.rx_buf_datalen += len;
   3dd4a:	4403      	add	r3, r0
   3dd4c:	61f3      	str	r3, [r6, #28]
	buf->end += len;
   3dd4e:	686b      	ldr	r3, [r5, #4]
   3dd50:	4403      	add	r3, r0
   3dd52:	606b      	str	r3, [r5, #4]
	if (len < remaining) {
   3dd54:	d2e5      	bcs.n	3dd22 <mqtt_read_message_chunk+0x10>
		return -EAGAIN;
   3dd56:	f06f 000a 	mvn.w	r0, #10
   3dd5a:	e7e3      	b.n	3dd24 <mqtt_read_message_chunk+0x12>
		return -ENOMEM;
   3dd5c:	f06f 000b 	mvn.w	r0, #11
   3dd60:	e7e0      	b.n	3dd24 <mqtt_read_message_chunk+0x12>
		return -ENOTCONN;
   3dd62:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   3dd66:	e7dd      	b.n	3dd24 <mqtt_read_message_chunk+0x12>

0003dd68 <mqtt_handle_rx>:

	return err_code;
}

int mqtt_handle_rx(struct mqtt_client *client)
{
   3dd68:	b570      	push	{r4, r5, r6, lr}
	int err_code;
	uint8_t type_and_flags;
	uint32_t var_length;
	struct buf_ctx buf;

	buf.cur = client->rx_buf;
   3dd6a:	6f03      	ldr	r3, [r0, #112]	; 0x70
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   3dd6c:	69c2      	ldr	r2, [r0, #28]
{
   3dd6e:	b08c      	sub	sp, #48	; 0x30
	buf.cur = client->rx_buf;
   3dd70:	9302      	str	r3, [sp, #8]
{
   3dd72:	4605      	mov	r5, r0
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   3dd74:	4413      	add	r3, r2
	uint8_t chunk_size = MQTT_FIXED_HEADER_MIN_SIZE;
   3dd76:	2202      	movs	r2, #2
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   3dd78:	9303      	str	r3, [sp, #12]
		err_code = mqtt_read_message_chunk(client, buf, chunk_size);
   3dd7a:	4628      	mov	r0, r5
   3dd7c:	a902      	add	r1, sp, #8
   3dd7e:	f7ff ffc8 	bl	3dd12 <mqtt_read_message_chunk>
		if (err_code < 0) {
   3dd82:	1e04      	subs	r4, r0, #0
   3dd84:	db2d      	blt.n	3dde2 <mqtt_handle_rx+0x7a>
		buf->cur = client->rx_buf;
   3dd86:	6f2b      	ldr	r3, [r5, #112]	; 0x70
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   3dd88:	aa01      	add	r2, sp, #4
   3dd8a:	f10d 0103 	add.w	r1, sp, #3
   3dd8e:	a802      	add	r0, sp, #8
		buf->cur = client->rx_buf;
   3dd90:	9302      	str	r3, [sp, #8]
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   3dd92:	f7ff fe08 	bl	3d9a6 <fixed_header_decode>
	} while (err_code == -EAGAIN);
   3dd96:	f110 0f0b 	cmn.w	r0, #11
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   3dd9a:	4604      	mov	r4, r0
		chunk_size = 1U;
   3dd9c:	f04f 0201 	mov.w	r2, #1
	} while (err_code == -EAGAIN);
   3dda0:	d0eb      	beq.n	3dd7a <mqtt_handle_rx+0x12>

	err_code = mqtt_read_and_parse_fixed_header(client, &type_and_flags,
						    &var_length, &buf);
	if (err_code < 0) {
   3dda2:	2800      	cmp	r0, #0
   3dda4:	db21      	blt.n	3ddea <mqtt_handle_rx+0x82>
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	if ((type_and_flags & 0xF0) == MQTT_PKT_TYPE_PUBLISH) {
   3dda6:	f89d 6003 	ldrb.w	r6, [sp, #3]
   3ddaa:	f006 03f0 	and.w	r3, r6, #240	; 0xf0
   3ddae:	2b30      	cmp	r3, #48	; 0x30
   3ddb0:	d11e      	bne.n	3ddf0 <mqtt_handle_rx+0x88>
	err_code = mqtt_read_message_chunk(client, buf, sizeof(uint16_t));
   3ddb2:	2202      	movs	r2, #2
   3ddb4:	4628      	mov	r0, r5
   3ddb6:	a902      	add	r1, sp, #8
   3ddb8:	f7ff ffab 	bl	3dd12 <mqtt_read_message_chunk>
	if (err_code < 0) {
   3ddbc:	1e04      	subs	r4, r0, #0
   3ddbe:	db10      	blt.n	3dde2 <mqtt_handle_rx+0x7a>
	variable_header_length = *buf->cur << 8; /* MSB */
   3ddc0:	9b02      	ldr	r3, [sp, #8]
	if (qos > MQTT_QOS_0_AT_MOST_ONCE) {
   3ddc2:	f016 0f06 	tst.w	r6, #6
   3ddc6:	881a      	ldrh	r2, [r3, #0]
	err_code = mqtt_read_message_chunk(client, buf,
   3ddc8:	4628      	mov	r0, r5
   3ddca:	ba52      	rev16	r2, r2
   3ddcc:	b292      	uxth	r2, r2
	variable_header_length += sizeof(uint16_t);
   3ddce:	bf0c      	ite	eq
   3ddd0:	3202      	addeq	r2, #2
		variable_header_length += sizeof(uint16_t);
   3ddd2:	3204      	addne	r2, #4
	err_code = mqtt_read_message_chunk(client, buf,
   3ddd4:	a902      	add	r1, sp, #8
   3ddd6:	f7ff ff9c 	bl	3dd12 <mqtt_read_message_chunk>
	if (err_code < 0) {
   3ddda:	ea00 74e0 	and.w	r4, r0, r0, asr #31
							&buf);
	} else {
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
	}

	if (err_code < 0) {
   3ddde:	2c00      	cmp	r4, #0
   3dde0:	da0d      	bge.n	3ddfe <mqtt_handle_rx+0x96>
		return (err_code == -EAGAIN) ? 0 : err_code;
   3dde2:	f114 0f0b 	cmn.w	r4, #11
   3dde6:	d100      	bne.n	3ddea <mqtt_handle_rx+0x82>
   3dde8:	2400      	movs	r4, #0
	}

	client->internal.rx_buf_datalen = 0U;

	return 0;
}
   3ddea:	4620      	mov	r0, r4
   3ddec:	b00c      	add	sp, #48	; 0x30
   3ddee:	bd70      	pop	{r4, r5, r6, pc}
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   3ddf0:	4628      	mov	r0, r5
   3ddf2:	9a01      	ldr	r2, [sp, #4]
   3ddf4:	a902      	add	r1, sp, #8
   3ddf6:	f7ff ff8c 	bl	3dd12 <mqtt_read_message_chunk>
   3ddfa:	4604      	mov	r4, r0
   3ddfc:	e7ef      	b.n	3ddde <mqtt_handle_rx+0x76>
	evt.result = 0;
   3ddfe:	2200      	movs	r2, #0
	err_code = mqtt_handle_packet(client, type_and_flags, var_length, &buf);
   3de00:	f89d 0003 	ldrb.w	r0, [sp, #3]
   3de04:	9901      	ldr	r1, [sp, #4]
	evt.result = 0;
   3de06:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	switch (type_and_flags & 0xF0) {
   3de0a:	2b60      	cmp	r3, #96	; 0x60
	evt.result = 0;
   3de0c:	920b      	str	r2, [sp, #44]	; 0x2c
	switch (type_and_flags & 0xF0) {
   3de0e:	d066      	beq.n	3dede <mqtt_handle_rx+0x176>
   3de10:	d813      	bhi.n	3de3a <mqtt_handle_rx+0xd2>
   3de12:	2b40      	cmp	r3, #64	; 0x40
   3de14:	d059      	beq.n	3deca <mqtt_handle_rx+0x162>
   3de16:	d806      	bhi.n	3de26 <mqtt_handle_rx+0xbe>
   3de18:	2b20      	cmp	r3, #32
   3de1a:	d02f      	beq.n	3de7c <mqtt_handle_rx+0x114>
   3de1c:	2b30      	cmp	r3, #48	; 0x30
   3de1e:	d048      	beq.n	3deb2 <mqtt_handle_rx+0x14a>
	client->internal.rx_buf_datalen = 0U;
   3de20:	2400      	movs	r4, #0
   3de22:	61ec      	str	r4, [r5, #28]
	return 0;
   3de24:	e7e1      	b.n	3ddea <mqtt_handle_rx+0x82>
	switch (type_and_flags & 0xF0) {
   3de26:	2b50      	cmp	r3, #80	; 0x50
   3de28:	d1fa      	bne.n	3de20 <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_PUBREC;
   3de2a:	2304      	movs	r3, #4
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   3de2c:	a905      	add	r1, sp, #20
   3de2e:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREC;
   3de30:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   3de34:	f7ff fe3f 	bl	3dab6 <publish_receive_decode>
   3de38:	e04e      	b.n	3ded8 <mqtt_handle_rx+0x170>
	switch (type_and_flags & 0xF0) {
   3de3a:	2bb0      	cmp	r3, #176	; 0xb0
   3de3c:	d05f      	beq.n	3defe <mqtt_handle_rx+0x196>
   3de3e:	d80b      	bhi.n	3de58 <mqtt_handle_rx+0xf0>
   3de40:	2b70      	cmp	r3, #112	; 0x70
   3de42:	d054      	beq.n	3deee <mqtt_handle_rx+0x186>
   3de44:	2b90      	cmp	r3, #144	; 0x90
   3de46:	d1eb      	bne.n	3de20 <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_SUBACK;
   3de48:	2307      	movs	r3, #7
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   3de4a:	a905      	add	r1, sp, #20
   3de4c:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_SUBACK;
   3de4e:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   3de52:	f7ff fe36 	bl	3dac2 <subscribe_ack_decode>
   3de56:	e03f      	b.n	3ded8 <mqtt_handle_rx+0x170>
	switch (type_and_flags & 0xF0) {
   3de58:	2bd0      	cmp	r3, #208	; 0xd0
   3de5a:	d1e1      	bne.n	3de20 <mqtt_handle_rx+0xb8>
		if (client->unacked_ping <= 0) {
   3de5c:	f995 3083 	ldrsb.w	r3, [r5, #131]	; 0x83
	int err_code = 0;
   3de60:	2400      	movs	r4, #0
		if (client->unacked_ping <= 0) {
   3de62:	2b00      	cmp	r3, #0
			client->unacked_ping--;
   3de64:	bfc8      	it	gt
   3de66:	f103 32ff 	addgt.w	r2, r3, #4294967295
		evt.type = MQTT_EVT_PINGRESP;
   3de6a:	f04f 0309 	mov.w	r3, #9
			client->unacked_ping--;
   3de6e:	bfc8      	it	gt
   3de70:	b252      	sxtbgt	r2, r2
   3de72:	f885 2083 	strb.w	r2, [r5, #131]	; 0x83
		evt.type = MQTT_EVT_PINGRESP;
   3de76:	f88d 3010 	strb.w	r3, [sp, #16]
	if (notify_event == true) {
   3de7a:	e010      	b.n	3de9e <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_CONNACK;
   3de7c:	f88d 2010 	strb.w	r2, [sp, #16]
		err_code = connect_ack_decode(client, buf, &evt.param.connack);
   3de80:	4628      	mov	r0, r5
   3de82:	aa05      	add	r2, sp, #20
   3de84:	a902      	add	r1, sp, #8
   3de86:	f7ff fdb9 	bl	3d9fc <connect_ack_decode>
		if (err_code == 0) {
   3de8a:	4604      	mov	r4, r0
   3de8c:	bb28      	cbnz	r0, 3deda <mqtt_handle_rx+0x172>
			if (evt.param.connack.return_code ==
   3de8e:	f89d 2015 	ldrb.w	r2, [sp, #21]
   3de92:	b95a      	cbnz	r2, 3deac <mqtt_handle_rx+0x144>
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   3de94:	69ab      	ldr	r3, [r5, #24]
   3de96:	f043 0304 	orr.w	r3, r3, #4
   3de9a:	61ab      	str	r3, [r5, #24]
			evt.result = evt.param.connack.return_code;
   3de9c:	920b      	str	r2, [sp, #44]	; 0x2c
		event_notify(client, &evt);
   3de9e:	4628      	mov	r0, r5
   3dea0:	a904      	add	r1, sp, #16
   3dea2:	f000 f8f1 	bl	3e088 <event_notify>
	if (err_code < 0) {
   3dea6:	2c00      	cmp	r4, #0
   3dea8:	daba      	bge.n	3de20 <mqtt_handle_rx+0xb8>
   3deaa:	e79e      	b.n	3ddea <mqtt_handle_rx+0x82>
				err_code = -ECONNREFUSED;
   3deac:	f06f 046e 	mvn.w	r4, #110	; 0x6e
   3deb0:	e7f4      	b.n	3de9c <mqtt_handle_rx+0x134>
		evt.type = MQTT_EVT_PUBLISH;
   3deb2:	2302      	movs	r3, #2
		err_code = publish_decode(type_and_flags, var_length, buf,
   3deb4:	aa02      	add	r2, sp, #8
		evt.type = MQTT_EVT_PUBLISH;
   3deb6:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_decode(type_and_flags, var_length, buf,
   3deba:	ab05      	add	r3, sp, #20
   3debc:	f7ff fdb9 	bl	3da32 <publish_decode>
		client->internal.remaining_payload =
   3dec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
		err_code = publish_decode(type_and_flags, var_length, buf,
   3dec2:	4604      	mov	r4, r0
		evt.result = err_code;
   3dec4:	900b      	str	r0, [sp, #44]	; 0x2c
		client->internal.remaining_payload =
   3dec6:	622b      	str	r3, [r5, #32]
	if (notify_event == true) {
   3dec8:	e7e9      	b.n	3de9e <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_PUBACK;
   3deca:	2303      	movs	r3, #3
		err_code = publish_ack_decode(buf, &evt.param.puback);
   3decc:	a905      	add	r1, sp, #20
   3dece:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBACK;
   3ded0:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_ack_decode(buf, &evt.param.puback);
   3ded4:	f7ff fded 	bl	3dab2 <publish_ack_decode>
   3ded8:	4604      	mov	r4, r0
		evt.result = err_code;
   3deda:	940b      	str	r4, [sp, #44]	; 0x2c
	if (notify_event == true) {
   3dedc:	e7df      	b.n	3de9e <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_PUBREL;
   3dede:	2305      	movs	r3, #5
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   3dee0:	a905      	add	r1, sp, #20
   3dee2:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREL;
   3dee4:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   3dee8:	f7ff fde7 	bl	3daba <publish_release_decode>
   3deec:	e7f4      	b.n	3ded8 <mqtt_handle_rx+0x170>
		evt.type = MQTT_EVT_PUBCOMP;
   3deee:	2306      	movs	r3, #6
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   3def0:	a905      	add	r1, sp, #20
   3def2:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBCOMP;
   3def4:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   3def8:	f7ff fde1 	bl	3dabe <publish_complete_decode>
   3defc:	e7ec      	b.n	3ded8 <mqtt_handle_rx+0x170>
		evt.type = MQTT_EVT_UNSUBACK;
   3defe:	2308      	movs	r3, #8
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   3df00:	a905      	add	r1, sp, #20
   3df02:	eb0d 0003 	add.w	r0, sp, r3
		evt.type = MQTT_EVT_UNSUBACK;
   3df06:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   3df0a:	f7ff fdea 	bl	3dae2 <unsubscribe_ack_decode>
   3df0e:	e7e3      	b.n	3ded8 <mqtt_handle_rx+0x170>

0003df10 <mqtt_client_tcp_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tcp_connect(struct mqtt_client *client)
{
   3df10:	b538      	push	{r3, r4, r5, lr}
	const struct sockaddr *broker = client->broker;
   3df12:	6d85      	ldr	r5, [r0, #88]	; 0x58
{
   3df14:	4604      	mov	r4, r0
	int ret;

	client->transport.tcp.sock = zsock_socket(broker->sa_family, SOCK_STREAM,
   3df16:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   3df18:	2206      	movs	r2, #6
   3df1a:	2101      	movs	r1, #1
   3df1c:	f7e3 fcb8 	bl	21890 <z_impl_zsock_socket>
						  IPPROTO_TCP);
	if (client->transport.tcp.sock < 0) {
   3df20:	2800      	cmp	r0, #0
	client->transport.tcp.sock = zsock_socket(broker->sa_family, SOCK_STREAM,
   3df22:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tcp.sock < 0) {
   3df24:	da04      	bge.n	3df30 <mqtt_client_tcp_connect+0x20>
	NET_DBG("Connect completed");
	return 0;

error:
	(void)zsock_close(client->transport.tcp.sock);
	return -errno;
   3df26:	f7ff fc02 	bl	3d72e <__errno>
   3df2a:	6800      	ldr	r0, [r0, #0]
   3df2c:	4240      	negs	r0, r0
}
   3df2e:	bd38      	pop	{r3, r4, r5, pc}
	if (broker->sa_family == AF_INET) {
   3df30:	882b      	ldrh	r3, [r5, #0]
	ret = zsock_connect(client->transport.tcp.sock, client->broker,
   3df32:	6da1      	ldr	r1, [r4, #88]	; 0x58
		peer_addr_size = sizeof(struct sockaddr_in);
   3df34:	2b01      	cmp	r3, #1
   3df36:	bf14      	ite	ne
   3df38:	2218      	movne	r2, #24
   3df3a:	2208      	moveq	r2, #8
	return z_impl_zsock_connect(sock, addr, addrlen);
   3df3c:	f7ff f925 	bl	3d18a <z_impl_zsock_connect>
	if (ret < 0) {
   3df40:	2800      	cmp	r0, #0
   3df42:	da03      	bge.n	3df4c <mqtt_client_tcp_connect+0x3c>
	(void)zsock_close(client->transport.tcp.sock);
   3df44:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   3df46:	f7ff f8fc 	bl	3d142 <z_impl_zsock_close>
   3df4a:	e7ec      	b.n	3df26 <mqtt_client_tcp_connect+0x16>
	return 0;
   3df4c:	2000      	movs	r0, #0
   3df4e:	e7ee      	b.n	3df2e <mqtt_client_tcp_connect+0x1e>

0003df50 <mqtt_client_tcp_write>:

int mqtt_client_tcp_write(struct mqtt_client *client, const uint8_t *data,
			  uint32_t datalen)
{
   3df50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t offset = 0U;
   3df54:	2400      	movs	r4, #0
{
   3df56:	4606      	mov	r6, r0
   3df58:	460f      	mov	r7, r1
   3df5a:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   3df5c:	46a0      	mov	r8, r4
	int ret;

	while (offset < datalen) {
   3df5e:	42ac      	cmp	r4, r5
   3df60:	d301      	bcc.n	3df66 <mqtt_client_tcp_write+0x16>
		}

		offset += ret;
	}

	return 0;
   3df62:	2000      	movs	r0, #0
   3df64:	e00d      	b.n	3df82 <mqtt_client_tcp_write+0x32>
		ret = zsock_send(client->transport.tcp.sock, data + offset,
   3df66:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   3df68:	2300      	movs	r3, #0
   3df6a:	e9cd 8800 	strd	r8, r8, [sp]
   3df6e:	1b2a      	subs	r2, r5, r4
   3df70:	1939      	adds	r1, r7, r4
   3df72:	f7ff f931 	bl	3d1d8 <z_impl_zsock_sendto>
		if (ret < 0) {
   3df76:	1e03      	subs	r3, r0, #0
   3df78:	da06      	bge.n	3df88 <mqtt_client_tcp_write+0x38>
			return -errno;
   3df7a:	f7ff fbd8 	bl	3d72e <__errno>
   3df7e:	6800      	ldr	r0, [r0, #0]
   3df80:	4240      	negs	r0, r0
}
   3df82:	b002      	add	sp, #8
   3df84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   3df88:	441c      	add	r4, r3
   3df8a:	e7e8      	b.n	3df5e <mqtt_client_tcp_write+0xe>

0003df8c <mqtt_client_tcp_write_msg>:

int mqtt_client_tcp_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)

{
   3df8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int ret, i;
	size_t offset = 0;
	size_t total_len = 0;
   3df90:	2500      	movs	r5, #0
{
   3df92:	4607      	mov	r7, r0

	for (i = 0; i < message->msg_iovlen; i++) {
   3df94:	462b      	mov	r3, r5
{
   3df96:	460c      	mov	r4, r1
   3df98:	68c9      	ldr	r1, [r1, #12]
	for (i = 0; i < message->msg_iovlen; i++) {
   3df9a:	428b      	cmp	r3, r1
   3df9c:	d110      	bne.n	3dfc0 <mqtt_client_tcp_write_msg+0x34>
	size_t offset = 0;
   3df9e:	2600      	movs	r6, #0
	return z_impl_zsock_sendmsg(sock, msg, flags);
   3dfa0:	46b0      	mov	r8, r6
		total_len += message->msg_iov[i].iov_len;
	}

	while (offset < total_len) {
   3dfa2:	42ae      	cmp	r6, r5
   3dfa4:	d216      	bcs.n	3dfd4 <mqtt_client_tcp_write_msg+0x48>
		ret = zsock_sendmsg(client->transport.tcp.sock, message, 0);
   3dfa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   3dfa8:	2200      	movs	r2, #0
   3dfaa:	4621      	mov	r1, r4
   3dfac:	f7ff f944 	bl	3d238 <z_impl_zsock_sendmsg>
		if (ret < 0) {
   3dfb0:	1e03      	subs	r3, r0, #0
   3dfb2:	da0c      	bge.n	3dfce <mqtt_client_tcp_write_msg+0x42>
			return -errno;
   3dfb4:	f7ff fbbb 	bl	3d72e <__errno>
   3dfb8:	6800      	ldr	r0, [r0, #0]
   3dfba:	4240      	negs	r0, r0
			message->msg_iov[i].iov_len = 0;
		}
	}

	return 0;
}
   3dfbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total_len += message->msg_iov[i].iov_len;
   3dfc0:	68a2      	ldr	r2, [r4, #8]
   3dfc2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   3dfc6:	6852      	ldr	r2, [r2, #4]
	for (i = 0; i < message->msg_iovlen; i++) {
   3dfc8:	3301      	adds	r3, #1
		total_len += message->msg_iov[i].iov_len;
   3dfca:	4415      	add	r5, r2
	for (i = 0; i < message->msg_iovlen; i++) {
   3dfcc:	e7e5      	b.n	3df9a <mqtt_client_tcp_write_msg+0xe>
		offset += ret;
   3dfce:	441e      	add	r6, r3
		if (offset >= total_len) {
   3dfd0:	42b5      	cmp	r5, r6
   3dfd2:	d801      	bhi.n	3dfd8 <mqtt_client_tcp_write_msg+0x4c>
	return 0;
   3dfd4:	2000      	movs	r0, #0
   3dfd6:	e7f1      	b.n	3dfbc <mqtt_client_tcp_write_msg+0x30>
		for (i = 0; i < message->msg_iovlen; i++) {
   3dfd8:	2000      	movs	r0, #0
   3dfda:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   3dfde:	4560      	cmp	r0, ip
   3dfe0:	d0df      	beq.n	3dfa2 <mqtt_client_tcp_write_msg+0x16>
			if (ret < message->msg_iov[i].iov_len) {
   3dfe2:	68a2      	ldr	r2, [r4, #8]
   3dfe4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   3dfe8:	6851      	ldr	r1, [r2, #4]
   3dfea:	4299      	cmp	r1, r3
   3dfec:	d905      	bls.n	3dffa <mqtt_client_tcp_write_msg+0x6e>
					(uint8_t *)message->msg_iov[i].iov_base + ret;
   3dfee:	6810      	ldr	r0, [r2, #0]
				message->msg_iov[i].iov_len -= ret;
   3dff0:	1ac9      	subs	r1, r1, r3
					(uint8_t *)message->msg_iov[i].iov_base + ret;
   3dff2:	4418      	add	r0, r3
				message->msg_iov[i].iov_len -= ret;
   3dff4:	6051      	str	r1, [r2, #4]
				message->msg_iov[i].iov_base =
   3dff6:	6010      	str	r0, [r2, #0]
				break;
   3dff8:	e7d3      	b.n	3dfa2 <mqtt_client_tcp_write_msg+0x16>
			ret -= message->msg_iov[i].iov_len;
   3dffa:	1a5b      	subs	r3, r3, r1
			message->msg_iov[i].iov_len = 0;
   3dffc:	f8c2 8004 	str.w	r8, [r2, #4]
		for (i = 0; i < message->msg_iovlen; i++) {
   3e000:	3001      	adds	r0, #1
   3e002:	e7ec      	b.n	3dfde <mqtt_client_tcp_write_msg+0x52>

0003e004 <mqtt_client_tcp_read>:

int mqtt_client_tcp_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			 bool shall_block)
{
   3e004:	b513      	push	{r0, r1, r4, lr}
   3e006:	2400      	movs	r4, #0
	int flags = 0;
	int ret;

	if (!shall_block) {
		flags |= ZSOCK_MSG_DONTWAIT;
   3e008:	42a3      	cmp	r3, r4
   3e00a:	bf14      	ite	ne
   3e00c:	4623      	movne	r3, r4
   3e00e:	2340      	moveq	r3, #64	; 0x40
	}

	ret = zsock_recv(client->transport.tcp.sock, data, buflen, flags);
   3e010:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   3e012:	e9cd 4400 	strd	r4, r4, [sp]
   3e016:	f7ff f936 	bl	3d286 <z_impl_zsock_recvfrom>
	if (ret < 0) {
   3e01a:	2800      	cmp	r0, #0
   3e01c:	da03      	bge.n	3e026 <mqtt_client_tcp_read+0x22>
		return -errno;
   3e01e:	f7ff fb86 	bl	3d72e <__errno>
   3e022:	6800      	ldr	r0, [r0, #0]
   3e024:	4240      	negs	r0, r0
	}

	return ret;
}
   3e026:	b002      	add	sp, #8
   3e028:	bd10      	pop	{r4, pc}

0003e02a <mqtt_client_tcp_disconnect>:

int mqtt_client_tcp_disconnect(struct mqtt_client *client)
{
   3e02a:	b508      	push	{r3, lr}
	int ret;

	NET_INFO("Closing socket %d", client->transport.tcp.sock);

	ret = zsock_close(client->transport.tcp.sock);
   3e02c:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   3e02e:	f7ff f888 	bl	3d142 <z_impl_zsock_close>
	if (ret < 0) {
   3e032:	2800      	cmp	r0, #0
   3e034:	da04      	bge.n	3e040 <mqtt_client_tcp_disconnect+0x16>
		return -errno;
   3e036:	f7ff fb7a 	bl	3d72e <__errno>
   3e03a:	6800      	ldr	r0, [r0, #0]
   3e03c:	4240      	negs	r0, r0
	}

	return 0;
}
   3e03e:	bd08      	pop	{r3, pc}
	return 0;
   3e040:	2000      	movs	r0, #0
   3e042:	e7fc      	b.n	3e03e <mqtt_client_tcp_disconnect+0x14>

0003e044 <k_uptime_get_32>:
{
   3e044:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
   3e046:	f003 f83d 	bl	410c4 <z_impl_k_uptime_ticks>
   3e04a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3e04e:	fba0 3002 	umull	r3, r0, r0, r2
   3e052:	fb02 0101 	mla	r1, r2, r1, r0
   3e056:	0bd8      	lsrs	r0, r3, #15
}
   3e058:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   3e05c:	bd08      	pop	{r3, pc}

0003e05e <tx_buf_init>:
	client->internal.remaining_payload = 0U;
}

/** @brief Initialize tx buffer. */
static void tx_buf_init(struct mqtt_client *client, struct buf_ctx *buf)
{
   3e05e:	b538      	push	{r3, r4, r5, lr}
   3e060:	4604      	mov	r4, r0
   3e062:	460d      	mov	r5, r1
__ssp_bos_icheck3(memset, void *, int)
   3e064:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
   3e066:	2100      	movs	r1, #0
   3e068:	6f80      	ldr	r0, [r0, #120]	; 0x78
   3e06a:	f003 f9bb 	bl	413e4 <memset>
	memset(client->tx_buf, 0, client->tx_buf_size);
	buf->cur = client->tx_buf;
   3e06e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
	buf->end = client->tx_buf + client->tx_buf_size;
   3e070:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
	buf->cur = client->tx_buf;
   3e072:	602b      	str	r3, [r5, #0]
	buf->end = client->tx_buf + client->tx_buf_size;
   3e074:	4413      	add	r3, r2
   3e076:	606b      	str	r3, [r5, #4]
}
   3e078:	bd38      	pop	{r3, r4, r5, pc}

0003e07a <verify_tx_state.isra.0>:
}

static int verify_tx_state(const struct mqtt_client *client)
{
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
		return -ENOTCONN;
   3e07a:	f010 0f04 	tst.w	r0, #4
	}

	return 0;
}
   3e07e:	bf0c      	ite	eq
   3e080:	f06f 007f 	mvneq.w	r0, #127	; 0x7f
   3e084:	2000      	movne	r0, #0
   3e086:	4770      	bx	lr

0003e088 <event_notify>:
{
   3e088:	b513      	push	{r0, r1, r4, lr}
	if (client->evt_cb != NULL) {
   3e08a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
{
   3e08c:	4604      	mov	r4, r0
   3e08e:	9101      	str	r1, [sp, #4]
	if (client->evt_cb != NULL) {
   3e090:	b15b      	cbz	r3, 3e0aa <event_notify+0x22>
		mqtt_mutex_unlock(client);
   3e092:	f7e5 ff97 	bl	23fc4 <mqtt_mutex_unlock>
		client->evt_cb(client, evt);
   3e096:	4620      	mov	r0, r4
   3e098:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   3e09a:	9901      	ldr	r1, [sp, #4]
   3e09c:	4798      	blx	r3
		mqtt_mutex_lock(client);
   3e09e:	4620      	mov	r0, r4
}
   3e0a0:	b002      	add	sp, #8
   3e0a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mqtt_mutex_lock(client);
   3e0a6:	f7e5 bfa1 	b.w	23fec <mqtt_mutex_lock>
}
   3e0aa:	b002      	add	sp, #8
   3e0ac:	bd10      	pop	{r4, pc}

0003e0ae <client_disconnect.constprop.0>:
static void client_disconnect(struct mqtt_client *client, int result,
   3e0ae:	b530      	push	{r4, r5, lr}
   3e0b0:	b089      	sub	sp, #36	; 0x24
   3e0b2:	4604      	mov	r4, r0
   3e0b4:	460d      	mov	r5, r1
	err_code = mqtt_transport_disconnect(client);
   3e0b6:	f7e5 ff7b 	bl	23fb0 <mqtt_transport_disconnect>
	MQTT_STATE_INIT(client);
   3e0ba:	2100      	movs	r1, #0
		struct mqtt_evt evt = {
   3e0bc:	221c      	movs	r2, #28
	client->internal.last_activity = 0U;
   3e0be:	e9c4 1105 	strd	r1, r1, [r4, #20]
	client->internal.remaining_payload = 0U;
   3e0c2:	e9c4 1107 	strd	r1, r1, [r4, #28]
		struct mqtt_evt evt = {
   3e0c6:	4668      	mov	r0, sp
   3e0c8:	f003 f98c 	bl	413e4 <memset>
   3e0cc:	2301      	movs	r3, #1
		event_notify(client, &evt);
   3e0ce:	4669      	mov	r1, sp
   3e0d0:	4620      	mov	r0, r4
		struct mqtt_evt evt = {
   3e0d2:	f88d 3000 	strb.w	r3, [sp]
   3e0d6:	9507      	str	r5, [sp, #28]
		event_notify(client, &evt);
   3e0d8:	f7ff ffd6 	bl	3e088 <event_notify>
}
   3e0dc:	b009      	add	sp, #36	; 0x24
   3e0de:	bd30      	pop	{r4, r5, pc}

0003e0e0 <read_publish_payload>:
	return err_code;
}

static int read_publish_payload(struct mqtt_client *client, void *buffer,
				size_t length, bool shall_block)
{
   3e0e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3e0e2:	4617      	mov	r7, r2
   3e0e4:	461e      	mov	r6, r3
	int ret;

	NULL_PARAM_CHECK(client);
   3e0e6:	4605      	mov	r5, r0
{
   3e0e8:	9101      	str	r1, [sp, #4]
	NULL_PARAM_CHECK(client);
   3e0ea:	b320      	cbz	r0, 3e136 <read_publish_payload+0x56>

	mqtt_mutex_lock(client);
   3e0ec:	f7e5 ff7e 	bl	23fec <mqtt_mutex_lock>

	if (client->internal.remaining_payload == 0U) {
   3e0f0:	6a2c      	ldr	r4, [r5, #32]
   3e0f2:	b1b4      	cbz	r4, 3e122 <read_publish_payload+0x42>

	if (client->internal.remaining_payload < length) {
		length = client->internal.remaining_payload;
	}

	ret = mqtt_transport_read(client, buffer, length, shall_block);
   3e0f4:	42bc      	cmp	r4, r7
   3e0f6:	4622      	mov	r2, r4
   3e0f8:	4633      	mov	r3, r6
   3e0fa:	bf28      	it	cs
   3e0fc:	463a      	movcs	r2, r7
   3e0fe:	4628      	mov	r0, r5
   3e100:	9901      	ldr	r1, [sp, #4]
   3e102:	f7e5 ff47 	bl	23f94 <mqtt_transport_read>
   3e106:	4604      	mov	r4, r0
	if (!shall_block && ret == -EAGAIN) {
   3e108:	b916      	cbnz	r6, 3e110 <read_publish_payload+0x30>
   3e10a:	f110 0f0b 	cmn.w	r0, #11
   3e10e:	d008      	beq.n	3e122 <read_publish_payload+0x42>
		goto exit;
	}

	if (ret <= 0) {
   3e110:	2c00      	cmp	r4, #0
   3e112:	dc0c      	bgt.n	3e12e <read_publish_payload+0x4e>
		if (ret == 0) {
			ret = -ENOTCONN;
   3e114:	bf08      	it	eq
   3e116:	f06f 047f 	mvneq.w	r4, #127	; 0x7f
		}

		client_disconnect(client, ret, true);
   3e11a:	4628      	mov	r0, r5
   3e11c:	4621      	mov	r1, r4
   3e11e:	f7ff ffc6 	bl	3e0ae <client_disconnect.constprop.0>
	}

	client->internal.remaining_payload -= ret;

exit:
	mqtt_mutex_unlock(client);
   3e122:	4628      	mov	r0, r5
   3e124:	f7e5 ff4e 	bl	23fc4 <mqtt_mutex_unlock>

	return ret;
}
   3e128:	4620      	mov	r0, r4
   3e12a:	b003      	add	sp, #12
   3e12c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	client->internal.remaining_payload -= ret;
   3e12e:	6a2b      	ldr	r3, [r5, #32]
   3e130:	1b1b      	subs	r3, r3, r4
   3e132:	622b      	str	r3, [r5, #32]
   3e134:	e7f5      	b.n	3e122 <read_publish_payload+0x42>
	NULL_PARAM_CHECK(client);
   3e136:	f06f 0415 	mvn.w	r4, #21
   3e13a:	e7f5      	b.n	3e128 <read_publish_payload+0x48>

0003e13c <client_write>:
{
   3e13c:	b538      	push	{r3, r4, r5, lr}
   3e13e:	4605      	mov	r5, r0
	err_code = mqtt_transport_write(client, data, datalen);
   3e140:	f7e5 ff0e 	bl	23f60 <mqtt_transport_write>
	if (err_code < 0) {
   3e144:	1e04      	subs	r4, r0, #0
   3e146:	da05      	bge.n	3e154 <client_write+0x18>
		client_disconnect(client, err_code, true);
   3e148:	4621      	mov	r1, r4
   3e14a:	4628      	mov	r0, r5
   3e14c:	f7ff ffaf 	bl	3e0ae <client_disconnect.constprop.0>
}
   3e150:	4620      	mov	r0, r4
   3e152:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @retval Current wall clock or sys tick value in milliseconds.
 */
static inline uint32_t mqtt_sys_tick_in_ms_get(void)
{
	return k_uptime_get_32();
   3e154:	f7ff ff76 	bl	3e044 <k_uptime_get_32>
	return 0;
   3e158:	2400      	movs	r4, #0
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();
   3e15a:	6168      	str	r0, [r5, #20]
	return 0;
   3e15c:	e7f8      	b.n	3e150 <client_write+0x14>

0003e15e <mqtt_client_init>:
{
   3e15e:	b510      	push	{r4, lr}
	NULL_PARAM_CHECK_VOID(client);
   3e160:	4604      	mov	r4, r0
   3e162:	b190      	cbz	r0, 3e18a <mqtt_client_init+0x2c>
   3e164:	2288      	movs	r2, #136	; 0x88
   3e166:	2100      	movs	r1, #0
   3e168:	f003 f93c 	bl	413e4 <memset>
	return z_impl_k_mutex_init(mutex);
   3e16c:	4620      	mov	r0, r4
   3e16e:	f002 feef 	bl	40f50 <z_impl_k_mutex_init>
	client->protocol_version = MQTT_VERSION_3_1_1;
   3e172:	2304      	movs	r3, #4
   3e174:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
	client->clean_session = MQTT_CLEAN_SESSION;
   3e178:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
   3e17c:	f36f 0341 	bfc	r3, #1, #1
   3e180:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
	client->keepalive = MQTT_KEEPALIVE;
   3e184:	2378      	movs	r3, #120	; 0x78
   3e186:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
}
   3e18a:	bd10      	pop	{r4, pc}

0003e18c <mqtt_connect>:
{
   3e18c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   3e18e:	4605      	mov	r5, r0
   3e190:	2800      	cmp	r0, #0
   3e192:	d03a      	beq.n	3e20a <mqtt_connect+0x7e>
	NULL_PARAM_CHECK(client->client_id.utf8);
   3e194:	6d03      	ldr	r3, [r0, #80]	; 0x50
   3e196:	b3c3      	cbz	r3, 3e20a <mqtt_connect+0x7e>
	mqtt_mutex_lock(client);
   3e198:	f7e5 ff28 	bl	23fec <mqtt_mutex_lock>
	if ((client->tx_buf == NULL) || (client->rx_buf == NULL)) {
   3e19c:	6fab      	ldr	r3, [r5, #120]	; 0x78
   3e19e:	b38b      	cbz	r3, 3e204 <mqtt_connect+0x78>
   3e1a0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   3e1a2:	b37b      	cbz	r3, 3e204 <mqtt_connect+0x78>
	err_code = mqtt_transport_connect(client);
   3e1a4:	4628      	mov	r0, r5
   3e1a6:	f7e5 fed1 	bl	23f4c <mqtt_transport_connect>
	if (err_code < 0) {
   3e1aa:	1e04      	subs	r4, r0, #0
   3e1ac:	db24      	blt.n	3e1f8 <mqtt_connect+0x6c>
	tx_buf_init(client, &packet);
   3e1ae:	4669      	mov	r1, sp
   3e1b0:	4628      	mov	r0, r5
   3e1b2:	f7ff ff54 	bl	3e05e <tx_buf_init>
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   3e1b6:	69ab      	ldr	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   3e1b8:	4669      	mov	r1, sp
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   3e1ba:	f043 0302 	orr.w	r3, r3, #2
	err_code = connect_request_encode(client, &packet);
   3e1be:	4628      	mov	r0, r5
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   3e1c0:	61ab      	str	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   3e1c2:	f7e5 fe1f 	bl	23e04 <connect_request_encode>
	if (err_code < 0) {
   3e1c6:	1e04      	subs	r4, r0, #0
   3e1c8:	db13      	blt.n	3e1f2 <mqtt_connect+0x66>
	err_code = mqtt_transport_write(client, packet.cur,
   3e1ca:	e9dd 1200 	ldrd	r1, r2, [sp]
   3e1ce:	4628      	mov	r0, r5
   3e1d0:	1a52      	subs	r2, r2, r1
   3e1d2:	f7e5 fec5 	bl	23f60 <mqtt_transport_write>
	if (err_code < 0) {
   3e1d6:	1e04      	subs	r4, r0, #0
   3e1d8:	db0b      	blt.n	3e1f2 <mqtt_connect+0x66>
   3e1da:	f7ff ff33 	bl	3e044 <k_uptime_get_32>
	client->unacked_ping = 0;
   3e1de:	2400      	movs	r4, #0
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();
   3e1e0:	6168      	str	r0, [r5, #20]
	client->unacked_ping = 0;
   3e1e2:	f885 4083 	strb.w	r4, [r5, #131]	; 0x83
	mqtt_mutex_unlock(client);
   3e1e6:	4628      	mov	r0, r5
   3e1e8:	f7e5 feec 	bl	23fc4 <mqtt_mutex_unlock>
}
   3e1ec:	4620      	mov	r0, r4
   3e1ee:	b003      	add	sp, #12
   3e1f0:	bd30      	pop	{r4, r5, pc}
	err_code = mqtt_transport_disconnect(client);
   3e1f2:	4628      	mov	r0, r5
   3e1f4:	f7e5 fedc 	bl	23fb0 <mqtt_transport_disconnect>
	MQTT_STATE_INIT(client);
   3e1f8:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   3e1fa:	e9c5 3305 	strd	r3, r3, [r5, #20]
	client->internal.remaining_payload = 0U;
   3e1fe:	e9c5 3307 	strd	r3, r3, [r5, #28]
}
   3e202:	e7f0      	b.n	3e1e6 <mqtt_connect+0x5a>
		err_code = -ENOMEM;
   3e204:	f06f 040b 	mvn.w	r4, #11
   3e208:	e7f6      	b.n	3e1f8 <mqtt_connect+0x6c>
	NULL_PARAM_CHECK(client);
   3e20a:	f06f 0415 	mvn.w	r4, #21
   3e20e:	e7ed      	b.n	3e1ec <mqtt_connect+0x60>

0003e210 <mqtt_publish>:
{
   3e210:	b570      	push	{r4, r5, r6, lr}
   3e212:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   3e214:	4605      	mov	r5, r0
{
   3e216:	b08e      	sub	sp, #56	; 0x38
	NULL_PARAM_CHECK(client);
   3e218:	2800      	cmp	r0, #0
   3e21a:	d03a      	beq.n	3e292 <mqtt_publish+0x82>
	NULL_PARAM_CHECK(param);
   3e21c:	2900      	cmp	r1, #0
   3e21e:	d038      	beq.n	3e292 <mqtt_publish+0x82>
	mqtt_mutex_lock(client);
   3e220:	f7e5 fee4 	bl	23fec <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3e224:	4628      	mov	r0, r5
   3e226:	a901      	add	r1, sp, #4
   3e228:	f7ff ff19 	bl	3e05e <tx_buf_init>
	err_code = verify_tx_state(client);
   3e22c:	69a8      	ldr	r0, [r5, #24]
   3e22e:	f7ff ff24 	bl	3e07a <verify_tx_state.isra.0>
	if (err_code < 0) {
   3e232:	1e04      	subs	r4, r0, #0
   3e234:	db22      	blt.n	3e27c <mqtt_publish+0x6c>
	err_code = publish_encode(param, &packet);
   3e236:	4630      	mov	r0, r6
   3e238:	a901      	add	r1, sp, #4
   3e23a:	f7ff fcc8 	bl	3dbce <publish_encode>
	if (err_code < 0) {
   3e23e:	1e04      	subs	r4, r0, #0
   3e240:	db1c      	blt.n	3e27c <mqtt_publish+0x6c>
	io_vector[0].iov_base = packet.cur;
   3e242:	9a01      	ldr	r2, [sp, #4]
	io_vector[0].iov_len = packet.end - packet.cur;
   3e244:	9b02      	ldr	r3, [sp, #8]
	io_vector[0].iov_base = packet.cur;
   3e246:	9203      	str	r2, [sp, #12]
	io_vector[0].iov_len = packet.end - packet.cur;
   3e248:	1a9b      	subs	r3, r3, r2
	memset(&msg, 0, sizeof(msg));
   3e24a:	221c      	movs	r2, #28
	io_vector[0].iov_len = packet.end - packet.cur;
   3e24c:	9304      	str	r3, [sp, #16]
	io_vector[1].iov_base = param->message.payload.data;
   3e24e:	68f3      	ldr	r3, [r6, #12]
	memset(&msg, 0, sizeof(msg));
   3e250:	2100      	movs	r1, #0
	io_vector[1].iov_base = param->message.payload.data;
   3e252:	9305      	str	r3, [sp, #20]
	io_vector[1].iov_len = param->message.payload.len;
   3e254:	6933      	ldr	r3, [r6, #16]
	memset(&msg, 0, sizeof(msg));
   3e256:	eb0d 0002 	add.w	r0, sp, r2
	io_vector[1].iov_len = param->message.payload.len;
   3e25a:	9306      	str	r3, [sp, #24]
	memset(&msg, 0, sizeof(msg));
   3e25c:	f003 f8c2 	bl	413e4 <memset>
	msg.msg_iov = io_vector;
   3e260:	ab03      	add	r3, sp, #12
   3e262:	9309      	str	r3, [sp, #36]	; 0x24
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   3e264:	2302      	movs	r3, #2
	err_code = mqtt_transport_write_msg(client, message);
   3e266:	4628      	mov	r0, r5
   3e268:	a907      	add	r1, sp, #28
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   3e26a:	930a      	str	r3, [sp, #40]	; 0x28
	err_code = mqtt_transport_write_msg(client, message);
   3e26c:	f7e5 fe84 	bl	23f78 <mqtt_transport_write_msg>
	if (err_code < 0) {
   3e270:	1e04      	subs	r4, r0, #0
   3e272:	da09      	bge.n	3e288 <mqtt_publish+0x78>
		client_disconnect(client, err_code, true);
   3e274:	4621      	mov	r1, r4
   3e276:	4628      	mov	r0, r5
   3e278:	f7ff ff19 	bl	3e0ae <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   3e27c:	4628      	mov	r0, r5
   3e27e:	f7e5 fea1 	bl	23fc4 <mqtt_mutex_unlock>
}
   3e282:	4620      	mov	r0, r4
   3e284:	b00e      	add	sp, #56	; 0x38
   3e286:	bd70      	pop	{r4, r5, r6, pc}
   3e288:	f7ff fedc 	bl	3e044 <k_uptime_get_32>
	return 0;
   3e28c:	2400      	movs	r4, #0
	client->internal.last_activity = mqtt_sys_tick_in_ms_get();
   3e28e:	6168      	str	r0, [r5, #20]
	return 0;
   3e290:	e7f4      	b.n	3e27c <mqtt_publish+0x6c>
	NULL_PARAM_CHECK(client);
   3e292:	f06f 0415 	mvn.w	r4, #21
   3e296:	e7f4      	b.n	3e282 <mqtt_publish+0x72>

0003e298 <mqtt_publish_qos1_ack>:
{
   3e298:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3e29a:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   3e29c:	4605      	mov	r5, r0
   3e29e:	b1f0      	cbz	r0, 3e2de <mqtt_publish_qos1_ack+0x46>
	NULL_PARAM_CHECK(param);
   3e2a0:	b1e9      	cbz	r1, 3e2de <mqtt_publish_qos1_ack+0x46>
	mqtt_mutex_lock(client);
   3e2a2:	f7e5 fea3 	bl	23fec <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3e2a6:	4628      	mov	r0, r5
   3e2a8:	4669      	mov	r1, sp
   3e2aa:	f7ff fed8 	bl	3e05e <tx_buf_init>
	err_code = verify_tx_state(client);
   3e2ae:	69a8      	ldr	r0, [r5, #24]
   3e2b0:	f7ff fee3 	bl	3e07a <verify_tx_state.isra.0>
	if (err_code < 0) {
   3e2b4:	1e04      	subs	r4, r0, #0
   3e2b6:	db0c      	blt.n	3e2d2 <mqtt_publish_qos1_ack+0x3a>
	err_code = publish_ack_encode(param, &packet);
   3e2b8:	4669      	mov	r1, sp
   3e2ba:	4630      	mov	r0, r6
   3e2bc:	f7ff fcc8 	bl	3dc50 <publish_ack_encode>
	if (err_code < 0) {
   3e2c0:	1e04      	subs	r4, r0, #0
   3e2c2:	db06      	blt.n	3e2d2 <mqtt_publish_qos1_ack+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3e2c4:	e9dd 1200 	ldrd	r1, r2, [sp]
   3e2c8:	4628      	mov	r0, r5
   3e2ca:	1a52      	subs	r2, r2, r1
   3e2cc:	f7ff ff36 	bl	3e13c <client_write>
   3e2d0:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   3e2d2:	4628      	mov	r0, r5
   3e2d4:	f7e5 fe76 	bl	23fc4 <mqtt_mutex_unlock>
}
   3e2d8:	4620      	mov	r0, r4
   3e2da:	b002      	add	sp, #8
   3e2dc:	bd70      	pop	{r4, r5, r6, pc}
	NULL_PARAM_CHECK(client);
   3e2de:	f06f 0415 	mvn.w	r4, #21
   3e2e2:	e7f9      	b.n	3e2d8 <mqtt_publish_qos1_ack+0x40>

0003e2e4 <mqtt_disconnect>:
{
   3e2e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   3e2e6:	4605      	mov	r5, r0
   3e2e8:	b308      	cbz	r0, 3e32e <mqtt_disconnect+0x4a>
	mqtt_mutex_lock(client);
   3e2ea:	f7e5 fe7f 	bl	23fec <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3e2ee:	4628      	mov	r0, r5
   3e2f0:	4669      	mov	r1, sp
   3e2f2:	f7ff feb4 	bl	3e05e <tx_buf_init>
	err_code = verify_tx_state(client);
   3e2f6:	69a8      	ldr	r0, [r5, #24]
   3e2f8:	f7ff febf 	bl	3e07a <verify_tx_state.isra.0>
	if (err_code < 0) {
   3e2fc:	1e04      	subs	r4, r0, #0
   3e2fe:	db10      	blt.n	3e322 <mqtt_disconnect+0x3e>
	err_code = disconnect_encode(&packet);
   3e300:	4668      	mov	r0, sp
   3e302:	f7e5 fdff 	bl	23f04 <disconnect_encode>
	if (err_code < 0) {
   3e306:	1e04      	subs	r4, r0, #0
   3e308:	db0b      	blt.n	3e322 <mqtt_disconnect+0x3e>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3e30a:	e9dd 1200 	ldrd	r1, r2, [sp]
   3e30e:	4628      	mov	r0, r5
   3e310:	1a52      	subs	r2, r2, r1
   3e312:	f7ff ff13 	bl	3e13c <client_write>
	if (err_code < 0) {
   3e316:	1e04      	subs	r4, r0, #0
   3e318:	db03      	blt.n	3e322 <mqtt_disconnect+0x3e>
	client_disconnect(client, 0, true);
   3e31a:	2100      	movs	r1, #0
   3e31c:	4628      	mov	r0, r5
   3e31e:	f7ff fec6 	bl	3e0ae <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   3e322:	4628      	mov	r0, r5
   3e324:	f7e5 fe4e 	bl	23fc4 <mqtt_mutex_unlock>
}
   3e328:	4620      	mov	r0, r4
   3e32a:	b003      	add	sp, #12
   3e32c:	bd30      	pop	{r4, r5, pc}
	NULL_PARAM_CHECK(client);
   3e32e:	f06f 0415 	mvn.w	r4, #21
   3e332:	e7f9      	b.n	3e328 <mqtt_disconnect+0x44>

0003e334 <mqtt_subscribe>:
{
   3e334:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3e336:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   3e338:	4605      	mov	r5, r0
   3e33a:	b1f0      	cbz	r0, 3e37a <mqtt_subscribe+0x46>
	NULL_PARAM_CHECK(param);
   3e33c:	b1e9      	cbz	r1, 3e37a <mqtt_subscribe+0x46>
	mqtt_mutex_lock(client);
   3e33e:	f7e5 fe55 	bl	23fec <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3e342:	4628      	mov	r0, r5
   3e344:	4669      	mov	r1, sp
   3e346:	f7ff fe8a 	bl	3e05e <tx_buf_init>
	err_code = verify_tx_state(client);
   3e34a:	69a8      	ldr	r0, [r5, #24]
   3e34c:	f7ff fe95 	bl	3e07a <verify_tx_state.isra.0>
	if (err_code < 0) {
   3e350:	1e04      	subs	r4, r0, #0
   3e352:	db0c      	blt.n	3e36e <mqtt_subscribe+0x3a>
	err_code = subscribe_encode(param, &packet);
   3e354:	4669      	mov	r1, sp
   3e356:	4630      	mov	r0, r6
   3e358:	f7ff fc7f 	bl	3dc5a <subscribe_encode>
	if (err_code < 0) {
   3e35c:	1e04      	subs	r4, r0, #0
   3e35e:	db06      	blt.n	3e36e <mqtt_subscribe+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3e360:	e9dd 1200 	ldrd	r1, r2, [sp]
   3e364:	4628      	mov	r0, r5
   3e366:	1a52      	subs	r2, r2, r1
   3e368:	f7ff fee8 	bl	3e13c <client_write>
   3e36c:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   3e36e:	4628      	mov	r0, r5
   3e370:	f7e5 fe28 	bl	23fc4 <mqtt_mutex_unlock>
}
   3e374:	4620      	mov	r0, r4
   3e376:	b002      	add	sp, #8
   3e378:	bd70      	pop	{r4, r5, r6, pc}
	NULL_PARAM_CHECK(client);
   3e37a:	f06f 0415 	mvn.w	r4, #21
   3e37e:	e7f9      	b.n	3e374 <mqtt_subscribe+0x40>

0003e380 <mqtt_unsubscribe>:
{
   3e380:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3e382:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   3e384:	4605      	mov	r5, r0
   3e386:	b1f0      	cbz	r0, 3e3c6 <mqtt_unsubscribe+0x46>
	NULL_PARAM_CHECK(param);
   3e388:	b1e9      	cbz	r1, 3e3c6 <mqtt_unsubscribe+0x46>
	mqtt_mutex_lock(client);
   3e38a:	f7e5 fe2f 	bl	23fec <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3e38e:	4628      	mov	r0, r5
   3e390:	4669      	mov	r1, sp
   3e392:	f7ff fe64 	bl	3e05e <tx_buf_init>
	err_code = verify_tx_state(client);
   3e396:	69a8      	ldr	r0, [r5, #24]
   3e398:	f7ff fe6f 	bl	3e07a <verify_tx_state.isra.0>
	if (err_code < 0) {
   3e39c:	1e04      	subs	r4, r0, #0
   3e39e:	db0c      	blt.n	3e3ba <mqtt_unsubscribe+0x3a>
	err_code = unsubscribe_encode(param, &packet);
   3e3a0:	4669      	mov	r1, sp
   3e3a2:	4630      	mov	r0, r6
   3e3a4:	f7ff fc90 	bl	3dcc8 <unsubscribe_encode>
	if (err_code < 0) {
   3e3a8:	1e04      	subs	r4, r0, #0
   3e3aa:	db06      	blt.n	3e3ba <mqtt_unsubscribe+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3e3ac:	e9dd 1200 	ldrd	r1, r2, [sp]
   3e3b0:	4628      	mov	r0, r5
   3e3b2:	1a52      	subs	r2, r2, r1
   3e3b4:	f7ff fec2 	bl	3e13c <client_write>
   3e3b8:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   3e3ba:	4628      	mov	r0, r5
   3e3bc:	f7e5 fe02 	bl	23fc4 <mqtt_mutex_unlock>
}
   3e3c0:	4620      	mov	r0, r4
   3e3c2:	b002      	add	sp, #8
   3e3c4:	bd70      	pop	{r4, r5, r6, pc}
	NULL_PARAM_CHECK(client);
   3e3c6:	f06f 0415 	mvn.w	r4, #21
   3e3ca:	e7f9      	b.n	3e3c0 <mqtt_unsubscribe+0x40>

0003e3cc <mqtt_ping>:
{
   3e3cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   3e3ce:	4605      	mov	r5, r0
   3e3d0:	b318      	cbz	r0, 3e41a <mqtt_ping+0x4e>
	mqtt_mutex_lock(client);
   3e3d2:	f7e5 fe0b 	bl	23fec <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3e3d6:	4628      	mov	r0, r5
   3e3d8:	4669      	mov	r1, sp
   3e3da:	f7ff fe40 	bl	3e05e <tx_buf_init>
	err_code = verify_tx_state(client);
   3e3de:	69a8      	ldr	r0, [r5, #24]
   3e3e0:	f7ff fe4b 	bl	3e07a <verify_tx_state.isra.0>
	if (err_code < 0) {
   3e3e4:	1e04      	subs	r4, r0, #0
   3e3e6:	db12      	blt.n	3e40e <mqtt_ping+0x42>
	err_code = ping_request_encode(&packet);
   3e3e8:	4668      	mov	r0, sp
   3e3ea:	f7e5 fd9d 	bl	23f28 <ping_request_encode>
	if (err_code < 0) {
   3e3ee:	1e04      	subs	r4, r0, #0
   3e3f0:	db0d      	blt.n	3e40e <mqtt_ping+0x42>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3e3f2:	e9dd 1200 	ldrd	r1, r2, [sp]
   3e3f6:	4628      	mov	r0, r5
   3e3f8:	1a52      	subs	r2, r2, r1
   3e3fa:	f7ff fe9f 	bl	3e13c <client_write>
   3e3fe:	4604      	mov	r4, r0
	if (client->unacked_ping >= INT8_MAX) {
   3e400:	f995 3083 	ldrsb.w	r3, [r5, #131]	; 0x83
   3e404:	2b7f      	cmp	r3, #127	; 0x7f
		client->unacked_ping++;
   3e406:	bf1c      	itt	ne
   3e408:	3301      	addne	r3, #1
   3e40a:	f885 3083 	strbne.w	r3, [r5, #131]	; 0x83
	mqtt_mutex_unlock(client);
   3e40e:	4628      	mov	r0, r5
   3e410:	f7e5 fdd8 	bl	23fc4 <mqtt_mutex_unlock>
}
   3e414:	4620      	mov	r0, r4
   3e416:	b003      	add	sp, #12
   3e418:	bd30      	pop	{r4, r5, pc}
	NULL_PARAM_CHECK(client);
   3e41a:	f06f 0415 	mvn.w	r4, #21
   3e41e:	e7f9      	b.n	3e414 <mqtt_ping+0x48>

0003e420 <mqtt_live>:
{
   3e420:	b570      	push	{r4, r5, r6, lr}
	NULL_PARAM_CHECK(client);
   3e422:	4606      	mov	r6, r0
   3e424:	b300      	cbz	r0, 3e468 <mqtt_live+0x48>
	mqtt_mutex_lock(client);
   3e426:	f7e5 fde1 	bl	23fec <mqtt_mutex_lock>
	elapsed_time = mqtt_elapsed_time_in_ms_get(
   3e42a:	6974      	ldr	r4, [r6, #20]
 *
 * @retval Time elapsed since last_activity time.
 */
static inline uint32_t mqtt_elapsed_time_in_ms_get(uint32_t last_activity)
{
	int32_t diff = k_uptime_get_32() - last_activity;
   3e42c:	f7ff fe0a 	bl	3e044 <k_uptime_get_32>
   3e430:	1b00      	subs	r0, r0, r4
	if ((client->keepalive > 0) &&
   3e432:	f8b6 4080 	ldrh.w	r4, [r6, #128]	; 0x80

	if (diff < 0) {
		return 0;
   3e436:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   3e43a:	b19c      	cbz	r4, 3e464 <mqtt_live+0x44>
	    (elapsed_time >= (client->keepalive * 1000))) {
   3e43c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   3e440:	435c      	muls	r4, r3
	if ((client->keepalive > 0) &&
   3e442:	4284      	cmp	r4, r0
   3e444:	d80d      	bhi.n	3e462 <mqtt_live+0x42>
		err_code = mqtt_ping(client);
   3e446:	4630      	mov	r0, r6
   3e448:	f7ff ffc0 	bl	3e3cc <mqtt_ping>
		ping_sent = true;
   3e44c:	2401      	movs	r4, #1
		err_code = mqtt_ping(client);
   3e44e:	4605      	mov	r5, r0
	mqtt_mutex_unlock(client);
   3e450:	4630      	mov	r0, r6
   3e452:	f7e5 fdb7 	bl	23fc4 <mqtt_mutex_unlock>
		return -EAGAIN;
   3e456:	2c00      	cmp	r4, #0
   3e458:	bf08      	it	eq
   3e45a:	f06f 050a 	mvneq.w	r5, #10
}
   3e45e:	4628      	mov	r0, r5
   3e460:	bd70      	pop	{r4, r5, r6, pc}
	bool ping_sent = false;
   3e462:	2400      	movs	r4, #0
	int err_code = 0;
   3e464:	4625      	mov	r5, r4
   3e466:	e7f3      	b.n	3e450 <mqtt_live+0x30>
	NULL_PARAM_CHECK(client);
   3e468:	f06f 0515 	mvn.w	r5, #21
   3e46c:	e7f7      	b.n	3e45e <mqtt_live+0x3e>

0003e46e <mqtt_keepalive_time_left>:
{
   3e46e:	b538      	push	{r3, r4, r5, lr}
   3e470:	4604      	mov	r4, r0
	uint32_t elapsed_time = mqtt_elapsed_time_in_ms_get(
   3e472:	6945      	ldr	r5, [r0, #20]
	int32_t diff = k_uptime_get_32() - last_activity;
   3e474:	f7ff fde6 	bl	3e044 <k_uptime_get_32>
	uint32_t keepalive_ms = 1000U * client->keepalive;
   3e478:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   3e47c:	f8b4 1080 	ldrh.w	r1, [r4, #128]	; 0x80
   3e480:	1b42      	subs	r2, r0, r5
   3e482:	434b      	muls	r3, r1
		return 0;
   3e484:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	if (client->keepalive == 0) {
   3e488:	b119      	cbz	r1, 3e492 <mqtt_keepalive_time_left+0x24>
	if (keepalive_ms <= elapsed_time) {
   3e48a:	4293      	cmp	r3, r2
   3e48c:	d904      	bls.n	3e498 <mqtt_keepalive_time_left+0x2a>
	return keepalive_ms - elapsed_time;
   3e48e:	1a98      	subs	r0, r3, r2
}
   3e490:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   3e492:	f04f 30ff 	mov.w	r0, #4294967295
   3e496:	e7fb      	b.n	3e490 <mqtt_keepalive_time_left+0x22>
		return 0;
   3e498:	2000      	movs	r0, #0
   3e49a:	e7f9      	b.n	3e490 <mqtt_keepalive_time_left+0x22>

0003e49c <mqtt_input>:
{
   3e49c:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   3e49e:	4605      	mov	r5, r0
   3e4a0:	b1d0      	cbz	r0, 3e4d8 <mqtt_input+0x3c>
	mqtt_mutex_lock(client);
   3e4a2:	f7e5 fda3 	bl	23fec <mqtt_mutex_lock>
	if (MQTT_HAS_STATE(client, MQTT_STATE_TCP_CONNECTED)) {
   3e4a6:	69ab      	ldr	r3, [r5, #24]
   3e4a8:	079b      	lsls	r3, r3, #30
   3e4aa:	d50f      	bpl.n	3e4cc <mqtt_input+0x30>
	if (client->internal.remaining_payload > 0) {
   3e4ac:	6a2b      	ldr	r3, [r5, #32]
   3e4ae:	b983      	cbnz	r3, 3e4d2 <mqtt_input+0x36>
	err_code = mqtt_handle_rx(client);
   3e4b0:	4628      	mov	r0, r5
   3e4b2:	f7ff fc59 	bl	3dd68 <mqtt_handle_rx>
	if (err_code < 0) {
   3e4b6:	1e04      	subs	r4, r0, #0
   3e4b8:	da03      	bge.n	3e4c2 <mqtt_input+0x26>
		client_disconnect(client, err_code, true);
   3e4ba:	4621      	mov	r1, r4
   3e4bc:	4628      	mov	r0, r5
   3e4be:	f7ff fdf6 	bl	3e0ae <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   3e4c2:	4628      	mov	r0, r5
   3e4c4:	f7e5 fd7e 	bl	23fc4 <mqtt_mutex_unlock>
}
   3e4c8:	4620      	mov	r0, r4
   3e4ca:	bd38      	pop	{r3, r4, r5, pc}
		err_code = -ENOTCONN;
   3e4cc:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   3e4d0:	e7f7      	b.n	3e4c2 <mqtt_input+0x26>
		return -EBUSY;
   3e4d2:	f06f 040f 	mvn.w	r4, #15
   3e4d6:	e7f4      	b.n	3e4c2 <mqtt_input+0x26>
	NULL_PARAM_CHECK(client);
   3e4d8:	f06f 0415 	mvn.w	r4, #21
   3e4dc:	e7f4      	b.n	3e4c8 <mqtt_input+0x2c>

0003e4de <mqtt_read_publish_payload_blocking>:
}

int mqtt_read_publish_payload_blocking(struct mqtt_client *client, void *buffer,
				       size_t length)
{
	return read_publish_payload(client, buffer, length, true);
   3e4de:	2301      	movs	r3, #1
   3e4e0:	f7ff bdfe 	b.w	3e0e0 <read_publish_payload>

0003e4e4 <mqtt_readall_publish_payload>:
}

int mqtt_readall_publish_payload(struct mqtt_client *client, uint8_t *buffer,
				 size_t length)
{
   3e4e4:	b570      	push	{r4, r5, r6, lr}
   3e4e6:	4606      	mov	r6, r0
   3e4e8:	460c      	mov	r4, r1
	uint8_t *end = buffer + length;
   3e4ea:	188d      	adds	r5, r1, r2

	while (buffer < end) {
   3e4ec:	42ac      	cmp	r4, r5
   3e4ee:	d301      	bcc.n	3e4f4 <mqtt_readall_publish_payload+0x10>
		}

		buffer += ret;
	}

	return 0;
   3e4f0:	2000      	movs	r0, #0
}
   3e4f2:	bd70      	pop	{r4, r5, r6, pc}
		int ret = mqtt_read_publish_payload_blocking(client, buffer,
   3e4f4:	4621      	mov	r1, r4
   3e4f6:	4630      	mov	r0, r6
   3e4f8:	1b2a      	subs	r2, r5, r4
   3e4fa:	f7ff fff0 	bl	3e4de <mqtt_read_publish_payload_blocking>
		if (ret < 0) {
   3e4fe:	2800      	cmp	r0, #0
   3e500:	dbf7      	blt.n	3e4f2 <mqtt_readall_publish_payload+0xe>
		} else if (ret == 0) {
   3e502:	d001      	beq.n	3e508 <mqtt_readall_publish_payload+0x24>
		buffer += ret;
   3e504:	4404      	add	r4, r0
   3e506:	e7f1      	b.n	3e4ec <mqtt_readall_publish_payload+0x8>
			return -EIO;
   3e508:	f06f 0004 	mvn.w	r0, #4
   3e50c:	e7f1      	b.n	3e4f2 <mqtt_readall_publish_payload+0xe>

0003e50e <mqtt_client_tls_write>:

int mqtt_client_tls_write(struct mqtt_client *client, const uint8_t *data,
			  uint32_t datalen)
{
   3e50e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t offset = 0U;
   3e512:	2400      	movs	r4, #0
{
   3e514:	4606      	mov	r6, r0
   3e516:	460f      	mov	r7, r1
   3e518:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   3e51a:	46a0      	mov	r8, r4
	int ret;

	while (offset < datalen) {
   3e51c:	42ac      	cmp	r4, r5
   3e51e:	d301      	bcc.n	3e524 <mqtt_client_tls_write+0x16>
		}

		offset += ret;
	}

	return 0;
   3e520:	2000      	movs	r0, #0
   3e522:	e00d      	b.n	3e540 <mqtt_client_tls_write+0x32>
		ret = zsock_send(client->transport.tls.sock, data + offset,
   3e524:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   3e526:	2300      	movs	r3, #0
   3e528:	e9cd 8800 	strd	r8, r8, [sp]
   3e52c:	1b2a      	subs	r2, r5, r4
   3e52e:	1939      	adds	r1, r7, r4
   3e530:	f7fe fe52 	bl	3d1d8 <z_impl_zsock_sendto>
		if (ret < 0) {
   3e534:	1e03      	subs	r3, r0, #0
   3e536:	da06      	bge.n	3e546 <mqtt_client_tls_write+0x38>
			return -errno;
   3e538:	f7ff f8f9 	bl	3d72e <__errno>
   3e53c:	6800      	ldr	r0, [r0, #0]
   3e53e:	4240      	negs	r0, r0
}
   3e540:	b002      	add	sp, #8
   3e542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   3e546:	441c      	add	r4, r3
   3e548:	e7e8      	b.n	3e51c <mqtt_client_tls_write+0xe>

0003e54a <mqtt_client_tls_write_msg>:

int mqtt_client_tls_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)
{
   3e54a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int ret, i;
	size_t offset = 0;
	size_t total_len = 0;
   3e54e:	2500      	movs	r5, #0
{
   3e550:	4607      	mov	r7, r0

	for (i = 0; i < message->msg_iovlen; i++) {
   3e552:	462b      	mov	r3, r5
{
   3e554:	460c      	mov	r4, r1
   3e556:	68c9      	ldr	r1, [r1, #12]
	for (i = 0; i < message->msg_iovlen; i++) {
   3e558:	428b      	cmp	r3, r1
   3e55a:	d110      	bne.n	3e57e <mqtt_client_tls_write_msg+0x34>
	size_t offset = 0;
   3e55c:	2600      	movs	r6, #0
	return z_impl_zsock_sendmsg(sock, msg, flags);
   3e55e:	46b0      	mov	r8, r6
		total_len += message->msg_iov[i].iov_len;
	}

	while (offset < total_len) {
   3e560:	42ae      	cmp	r6, r5
   3e562:	d216      	bcs.n	3e592 <mqtt_client_tls_write_msg+0x48>
		ret = zsock_sendmsg(client->transport.tls.sock, message, 0);
   3e564:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   3e566:	2200      	movs	r2, #0
   3e568:	4621      	mov	r1, r4
   3e56a:	f7fe fe65 	bl	3d238 <z_impl_zsock_sendmsg>
		if (ret < 0) {
   3e56e:	1e03      	subs	r3, r0, #0
   3e570:	da0c      	bge.n	3e58c <mqtt_client_tls_write_msg+0x42>
			return -errno;
   3e572:	f7ff f8dc 	bl	3d72e <__errno>
   3e576:	6800      	ldr	r0, [r0, #0]
   3e578:	4240      	negs	r0, r0
			message->msg_iov[i].iov_len = 0;
		}
	}

	return 0;
}
   3e57a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total_len += message->msg_iov[i].iov_len;
   3e57e:	68a2      	ldr	r2, [r4, #8]
   3e580:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   3e584:	6852      	ldr	r2, [r2, #4]
	for (i = 0; i < message->msg_iovlen; i++) {
   3e586:	3301      	adds	r3, #1
		total_len += message->msg_iov[i].iov_len;
   3e588:	4415      	add	r5, r2
	for (i = 0; i < message->msg_iovlen; i++) {
   3e58a:	e7e5      	b.n	3e558 <mqtt_client_tls_write_msg+0xe>
		offset += ret;
   3e58c:	441e      	add	r6, r3
		if (offset >= total_len) {
   3e58e:	42b5      	cmp	r5, r6
   3e590:	d801      	bhi.n	3e596 <mqtt_client_tls_write_msg+0x4c>
	return 0;
   3e592:	2000      	movs	r0, #0
   3e594:	e7f1      	b.n	3e57a <mqtt_client_tls_write_msg+0x30>
		for (i = 0; i < message->msg_iovlen; i++) {
   3e596:	2000      	movs	r0, #0
   3e598:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   3e59c:	4560      	cmp	r0, ip
   3e59e:	d0df      	beq.n	3e560 <mqtt_client_tls_write_msg+0x16>
			if (ret < message->msg_iov[i].iov_len) {
   3e5a0:	68a2      	ldr	r2, [r4, #8]
   3e5a2:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   3e5a6:	6851      	ldr	r1, [r2, #4]
   3e5a8:	4299      	cmp	r1, r3
   3e5aa:	d905      	bls.n	3e5b8 <mqtt_client_tls_write_msg+0x6e>
					(uint8_t *)message->msg_iov[i].iov_base + ret;
   3e5ac:	6810      	ldr	r0, [r2, #0]
				message->msg_iov[i].iov_len -= ret;
   3e5ae:	1ac9      	subs	r1, r1, r3
					(uint8_t *)message->msg_iov[i].iov_base + ret;
   3e5b0:	4418      	add	r0, r3
				message->msg_iov[i].iov_len -= ret;
   3e5b2:	6051      	str	r1, [r2, #4]
				message->msg_iov[i].iov_base =
   3e5b4:	6010      	str	r0, [r2, #0]
				break;
   3e5b6:	e7d3      	b.n	3e560 <mqtt_client_tls_write_msg+0x16>
			ret -= message->msg_iov[i].iov_len;
   3e5b8:	1a5b      	subs	r3, r3, r1
			message->msg_iov[i].iov_len = 0;
   3e5ba:	f8c2 8004 	str.w	r8, [r2, #4]
		for (i = 0; i < message->msg_iovlen; i++) {
   3e5be:	3001      	adds	r0, #1
   3e5c0:	e7ec      	b.n	3e59c <mqtt_client_tls_write_msg+0x52>

0003e5c2 <mqtt_client_tls_read>:

int mqtt_client_tls_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			 bool shall_block)
{
   3e5c2:	b513      	push	{r0, r1, r4, lr}
   3e5c4:	2400      	movs	r4, #0
	int flags = 0;
	int ret;

	if (!shall_block) {
		flags |= ZSOCK_MSG_DONTWAIT;
   3e5c6:	42a3      	cmp	r3, r4
   3e5c8:	bf14      	ite	ne
   3e5ca:	4623      	movne	r3, r4
   3e5cc:	2340      	moveq	r3, #64	; 0x40
	}

	ret = zsock_recv(client->transport.tls.sock, data, buflen, flags);
   3e5ce:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   3e5d0:	e9cd 4400 	strd	r4, r4, [sp]
   3e5d4:	f7fe fe57 	bl	3d286 <z_impl_zsock_recvfrom>
	if (ret < 0) {
   3e5d8:	2800      	cmp	r0, #0
   3e5da:	da03      	bge.n	3e5e4 <mqtt_client_tls_read+0x22>
		return -errno;
   3e5dc:	f7ff f8a7 	bl	3d72e <__errno>
   3e5e0:	6800      	ldr	r0, [r0, #0]
   3e5e2:	4240      	negs	r0, r0
	}

	return ret;
}
   3e5e4:	b002      	add	sp, #8
   3e5e6:	bd10      	pop	{r4, pc}

0003e5e8 <mqtt_client_tls_disconnect>:

int mqtt_client_tls_disconnect(struct mqtt_client *client)
{
   3e5e8:	b508      	push	{r3, lr}
	int ret;

	NET_INFO("Closing socket %d", client->transport.tls.sock);
	ret = zsock_close(client->transport.tls.sock);
   3e5ea:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   3e5ec:	f7fe fda9 	bl	3d142 <z_impl_zsock_close>
	if (ret < 0) {
   3e5f0:	2800      	cmp	r0, #0
   3e5f2:	da04      	bge.n	3e5fe <mqtt_client_tls_disconnect+0x16>
		return -errno;
   3e5f4:	f7ff f89b 	bl	3d72e <__errno>
   3e5f8:	6800      	ldr	r0, [r0, #0]
   3e5fa:	4240      	negs	r0, r0
	}

	return 0;
}
   3e5fc:	bd08      	pop	{r3, pc}
	return 0;
   3e5fe:	2000      	movs	r0, #0
   3e600:	e7fc      	b.n	3e5fc <mqtt_client_tls_disconnect+0x14>

0003e602 <set_on_state>:
	__asm__ volatile(
   3e602:	f04f 0320 	mov.w	r3, #32
   3e606:	f3ef 8211 	mrs	r2, BASEPRI
   3e60a:	f383 8812 	msr	BASEPRI_MAX, r3
   3e60e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   3e612:	6803      	ldr	r3, [r0, #0]
   3e614:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   3e618:	f043 0302 	orr.w	r3, r3, #2
   3e61c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   3e61e:	f382 8811 	msr	BASEPRI, r2
   3e622:	f3bf 8f6f 	isb	sy
}
   3e626:	4770      	bx	lr

0003e628 <async_start>:
{
   3e628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3e62a:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   3e62c:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   3e62e:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   3e630:	f04f 0520 	mov.w	r5, #32
   3e634:	f3ef 8c11 	mrs	ip, BASEPRI
   3e638:	f385 8812 	msr	BASEPRI_MAX, r5
   3e63c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   3e640:	260c      	movs	r6, #12
   3e642:	fb06 4601 	mla	r6, r6, r1, r4
   3e646:	6cb5      	ldr	r5, [r6, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   3e648:	f005 0e07 	and.w	lr, r5, #7
   3e64c:	f1be 0f01 	cmp.w	lr, #1
   3e650:	d110      	bne.n	3e674 <async_start+0x4c>
	int err = 0;
   3e652:	2500      	movs	r5, #0
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   3e654:	64b7      	str	r7, [r6, #72]	; 0x48
	__asm__ volatile(
   3e656:	f38c 8811 	msr	BASEPRI, ip
   3e65a:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   3e65e:	b93d      	cbnz	r5, 3e670 <async_start+0x48>
	subdata->cb = cb;
   3e660:	260c      	movs	r6, #12
   3e662:	4371      	muls	r1, r6
   3e664:	440c      	add	r4, r1
	subdata->user_data = user_data;
   3e666:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   3e66a:	6843      	ldr	r3, [r0, #4]
   3e66c:	585b      	ldr	r3, [r3, r1]
   3e66e:	4798      	blx	r3
}
   3e670:	4628      	mov	r0, r5
   3e672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   3e674:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
		err = -EALREADY;
   3e678:	42af      	cmp	r7, r5
   3e67a:	bf14      	ite	ne
   3e67c:	f04f 35ff 	movne.w	r5, #4294967295
   3e680:	f06f 0577 	mvneq.w	r5, #119	; 0x77
   3e684:	e7e7      	b.n	3e656 <async_start+0x2e>

0003e686 <api_start>:
{
   3e686:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   3e688:	2480      	movs	r4, #128	; 0x80
   3e68a:	9400      	str	r4, [sp, #0]
   3e68c:	f7ff ffcc 	bl	3e628 <async_start>
}
   3e690:	b002      	add	sp, #8
   3e692:	bd10      	pop	{r4, pc}

0003e694 <onoff_started_callback>:
	return &data->mgr[type];
   3e694:	6900      	ldr	r0, [r0, #16]
   3e696:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   3e698:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   3e69c:	2100      	movs	r1, #0
   3e69e:	4710      	bx	r2

0003e6a0 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   3e6a0:	2000      	movs	r0, #0
   3e6a2:	f7f3 be3d 	b.w	32320 <nrfx_clock_start>

0003e6a6 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   3e6a6:	2000      	movs	r0, #0
   3e6a8:	f7f3 be9c 	b.w	323e4 <nrfx_clock_stop>

0003e6ac <api_stop>:
	return stop(dev, subsys, CTX_API);
   3e6ac:	2280      	movs	r2, #128	; 0x80
   3e6ae:	f7e5 bd75 	b.w	2419c <stop>

0003e6b2 <blocking_start_callback>:
{
   3e6b2:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   3e6b4:	f7f8 bb50 	b.w	36d58 <z_impl_k_sem_give>

0003e6b8 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3e6b8:	6843      	ldr	r3, [r0, #4]
}
   3e6ba:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3e6bc:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   3e6be:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   3e6c0:	600b      	str	r3, [r1, #0]
}
   3e6c2:	4770      	bx	lr

0003e6c4 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3e6c4:	6843      	ldr	r3, [r0, #4]
   3e6c6:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   3e6c8:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   3e6ca:	4042      	eors	r2, r0
   3e6cc:	400a      	ands	r2, r1
   3e6ce:	4042      	eors	r2, r0
    p_reg->OUT = value;
   3e6d0:	605a      	str	r2, [r3, #4]
}
   3e6d2:	2000      	movs	r0, #0
   3e6d4:	4770      	bx	lr

0003e6d6 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3e6d6:	6843      	ldr	r3, [r0, #4]
}
   3e6d8:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3e6da:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   3e6dc:	6099      	str	r1, [r3, #8]
}
   3e6de:	4770      	bx	lr

0003e6e0 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3e6e0:	6843      	ldr	r3, [r0, #4]
}
   3e6e2:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3e6e4:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   3e6e6:	60d9      	str	r1, [r3, #12]
}
   3e6e8:	4770      	bx	lr

0003e6ea <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3e6ea:	6843      	ldr	r3, [r0, #4]
}
   3e6ec:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3e6ee:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   3e6f0:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   3e6f2:	4059      	eors	r1, r3
    p_reg->OUT = value;
   3e6f4:	6051      	str	r1, [r2, #4]
}
   3e6f6:	4770      	bx	lr

0003e6f8 <twim_2_init>:
#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
#endif

#ifdef CONFIG_I2C_2_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(2);
   3e6f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3e6fa:	4604      	mov	r4, r0
   3e6fc:	2200      	movs	r2, #0
   3e6fe:	2101      	movs	r1, #1
   3e700:	200a      	movs	r0, #10
   3e702:	f7e4 fa49 	bl	22b98 <z_arm_irq_priority_set>
   3e706:	6863      	ldr	r3, [r4, #4]
	ret = pinctrl_lookup_state(config, id, &state);
   3e708:	2100      	movs	r1, #0
   3e70a:	68dd      	ldr	r5, [r3, #12]
   3e70c:	aa01      	add	r2, sp, #4
   3e70e:	4628      	mov	r0, r5
   3e710:	f000 fa05 	bl	3eb1e <pinctrl_lookup_state>
	if (ret < 0) {
   3e714:	2800      	cmp	r0, #0
   3e716:	db0d      	blt.n	3e734 <twim_2_init+0x3c>
	return pinctrl_apply_state_direct(config, state);
   3e718:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   3e71a:	682a      	ldr	r2, [r5, #0]
   3e71c:	7919      	ldrb	r1, [r3, #4]
   3e71e:	6818      	ldr	r0, [r3, #0]
   3e720:	f000 fa53 	bl	3ebca <pinctrl_configure_pins>
   3e724:	2800      	cmp	r0, #0
   3e726:	db05      	blt.n	3e734 <twim_2_init+0x3c>
   3e728:	4620      	mov	r0, r4
   3e72a:	b003      	add	sp, #12
   3e72c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   3e730:	f7e6 b8f6 	b.w	24920 <init_twim>
   3e734:	b003      	add	sp, #12
   3e736:	bd30      	pop	{r4, r5, pc}

0003e738 <is_regular_addr_valid>:
{
   3e738:	b538      	push	{r3, r4, r5, lr}
   3e73a:	4605      	mov	r5, r0
   3e73c:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   3e73e:	f001 fb89 	bl	3fe54 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   3e742:	2d00      	cmp	r5, #0
   3e744:	db07      	blt.n	3e756 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   3e746:	42a8      	cmp	r0, r5
   3e748:	d905      	bls.n	3e756 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   3e74a:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   3e74c:	4284      	cmp	r4, r0
   3e74e:	bf8c      	ite	hi
   3e750:	2000      	movhi	r0, #0
   3e752:	2001      	movls	r0, #1
}
   3e754:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   3e756:	2000      	movs	r0, #0
   3e758:	e7fc      	b.n	3e754 <is_regular_addr_valid+0x1c>

0003e75a <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   3e75a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3e75e:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   3e760:	f04f 0800 	mov.w	r8, #0
	const struct flash_driver_api *api = dev->api;
   3e764:	6883      	ldr	r3, [r0, #8]
{
   3e766:	460d      	mov	r5, r1
   3e768:	4616      	mov	r6, r2
	info->index = 0U;

	api->page_layout(dev, &layout, &layout_size);
   3e76a:	4669      	mov	r1, sp
   3e76c:	691b      	ldr	r3, [r3, #16]
	info->start_offset = 0;
   3e76e:	f8c4 8000 	str.w	r8, [r4]
	info->index = 0U;
   3e772:	f8c4 8008 	str.w	r8, [r4, #8]
	api->page_layout(dev, &layout, &layout_size);
   3e776:	aa01      	add	r2, sp, #4
   3e778:	4798      	blx	r3

	while (layout_size--) {
   3e77a:	e9dd 7c00 	ldrd	r7, ip, [sp]
   3e77e:	4640      	mov	r0, r8
		info->size = layout->pages_size;
   3e780:	f107 0e04 	add.w	lr, r7, #4
	while (layout_size--) {
   3e784:	4560      	cmp	r0, ip
   3e786:	d104      	bne.n	3e792 <flash_get_page_info+0x38>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   3e788:	f06f 0015 	mvn.w	r0, #21
}
   3e78c:	b003      	add	sp, #12
   3e78e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		info->size = layout->pages_size;
   3e792:	f85e 9030 	ldr.w	r9, [lr, r0, lsl #3]
			index_jmp = index - info->index;
   3e796:	68a1      	ldr	r1, [r4, #8]
			index_jmp = (offs - info->start_offset) / info->size;
   3e798:	6822      	ldr	r2, [r4, #0]
		info->size = layout->pages_size;
   3e79a:	f8c4 9004 	str.w	r9, [r4, #4]
		if (offs == 0) {
   3e79e:	b97d      	cbnz	r5, 3e7c0 <flash_get_page_info+0x66>
			index_jmp = index - info->index;
   3e7a0:	1a73      	subs	r3, r6, r1
		index_jmp = MIN(index_jmp, layout->pages_count);
   3e7a2:	f857 8030 	ldr.w	r8, [r7, r0, lsl #3]
		if (index_jmp < layout->pages_count) {
   3e7a6:	3001      	adds	r0, #1
		index_jmp = MIN(index_jmp, layout->pages_count);
   3e7a8:	4543      	cmp	r3, r8
   3e7aa:	bf28      	it	cs
   3e7ac:	4643      	movcs	r3, r8
		info->start_offset += (index_jmp * info->size);
   3e7ae:	fb03 2209 	mla	r2, r3, r9, r2
		info->index += index_jmp;
   3e7b2:	4419      	add	r1, r3
		if (index_jmp < layout->pages_count) {
   3e7b4:	4598      	cmp	r8, r3
		info->start_offset += (index_jmp * info->size);
   3e7b6:	6022      	str	r2, [r4, #0]
		info->index += index_jmp;
   3e7b8:	60a1      	str	r1, [r4, #8]
		if (index_jmp < layout->pages_count) {
   3e7ba:	d9e3      	bls.n	3e784 <flash_get_page_info+0x2a>
			return 0;
   3e7bc:	2000      	movs	r0, #0
   3e7be:	e7e5      	b.n	3e78c <flash_get_page_info+0x32>
			index_jmp = (offs - info->start_offset) / info->size;
   3e7c0:	1aab      	subs	r3, r5, r2
   3e7c2:	fbb3 f3f9 	udiv	r3, r3, r9
   3e7c6:	e7ec      	b.n	3e7a2 <flash_get_page_info+0x48>

0003e7c8 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   3e7c8:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   3e7ca:	2200      	movs	r2, #0
   3e7cc:	f7ff bfc5 	b.w	3e75a <flash_get_page_info>

0003e7d0 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   3e7d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
   3e7d4:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
   3e7d6:	6883      	ldr	r3, [r0, #8]
{
   3e7d8:	b086      	sub	sp, #24
   3e7da:	4688      	mov	r8, r1
   3e7dc:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   3e7de:	691b      	ldr	r3, [r3, #16]
   3e7e0:	aa02      	add	r2, sp, #8
   3e7e2:	a901      	add	r1, sp, #4
   3e7e4:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
   3e7e6:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   3e7e8:	4625      	mov	r5, r4
   3e7ea:	9b02      	ldr	r3, [sp, #8]
   3e7ec:	42ab      	cmp	r3, r5
   3e7ee:	d802      	bhi.n	3e7f6 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   3e7f0:	b006      	add	sp, #24
   3e7f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
   3e7f6:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
   3e7f8:	9f01      	ldr	r7, [sp, #4]
   3e7fa:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
   3e7fe:	687b      	ldr	r3, [r7, #4]
   3e800:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   3e802:	683a      	ldr	r2, [r7, #0]
   3e804:	eb0a 0306 	add.w	r3, sl, r6
   3e808:	42b2      	cmp	r2, r6
   3e80a:	d802      	bhi.n	3e812 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   3e80c:	469a      	mov	sl, r3
   3e80e:	3501      	adds	r5, #1
   3e810:	e7eb      	b.n	3e7ea <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   3e812:	4649      	mov	r1, r9
   3e814:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   3e816:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   3e818:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   3e81a:	47c0      	blx	r8
   3e81c:	2800      	cmp	r0, #0
   3e81e:	d0e7      	beq.n	3e7f0 <flash_page_foreach+0x20>
			off += page_info.size;
   3e820:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   3e822:	3601      	adds	r6, #1
			off += page_info.size;
   3e824:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   3e826:	e7ec      	b.n	3e802 <flash_page_foreach+0x32>

0003e828 <uarte_nrfx_config_get>:
{
   3e828:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   3e82a:	6902      	ldr	r2, [r0, #16]
   3e82c:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   3e830:	e883 0003 	stmia.w	r3, {r0, r1}
}
   3e834:	2000      	movs	r0, #0
   3e836:	4770      	bx	lr

0003e838 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   3e838:	6843      	ldr	r3, [r0, #4]
   3e83a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   3e83c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   3e840:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   3e844:	4770      	bx	lr

0003e846 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   3e846:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   3e848:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   3e84a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3e84c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   3e850:	b148      	cbz	r0, 3e866 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3e852:	2000      	movs	r0, #0
	*c = data->rx_data;
   3e854:	7d52      	ldrb	r2, [r2, #21]
   3e856:	700a      	strb	r2, [r1, #0]
   3e858:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   3e85c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3e860:	2201      	movs	r2, #1
   3e862:	601a      	str	r2, [r3, #0]
	return 0;
   3e864:	4770      	bx	lr
		return -1;
   3e866:	f04f 30ff 	mov.w	r0, #4294967295
}
   3e86a:	4770      	bx	lr

0003e86c <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   3e86c:	2a00      	cmp	r2, #0
   3e86e:	dd0f      	ble.n	3e890 <uarte_nrfx_fifo_read+0x24>
	return config->uarte_regs;
   3e870:	6843      	ldr	r3, [r0, #4]
   3e872:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3e874:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   3e878:	b153      	cbz	r3, 3e890 <uarte_nrfx_fifo_read+0x24>
	const struct uarte_nrfx_data *data = dev->data;
   3e87a:	6903      	ldr	r3, [r0, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3e87c:	2000      	movs	r0, #0
   3e87e:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
   3e882:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3e886:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   3e888:	7d5b      	ldrb	r3, [r3, #21]
   3e88a:	700b      	strb	r3, [r1, #0]
   3e88c:	6010      	str	r0, [r2, #0]
}
   3e88e:	4770      	bx	lr
	int num_rx = 0;
   3e890:	2000      	movs	r0, #0
   3e892:	4770      	bx	lr

0003e894 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   3e894:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   3e896:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   3e898:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   3e89a:	f04f 0020 	mov.w	r0, #32
   3e89e:	f3ef 8311 	mrs	r3, BASEPRI
   3e8a2:	f380 8812 	msr	BASEPRI_MAX, r0
   3e8a6:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   3e8aa:	2000      	movs	r0, #0
   3e8ac:	68c9      	ldr	r1, [r1, #12]
   3e8ae:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   3e8b0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   3e8b4:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   3e8b8:	f383 8811 	msr	BASEPRI, r3
   3e8bc:	f3bf 8f6f 	isb	sy
}
   3e8c0:	4770      	bx	lr

0003e8c2 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   3e8c2:	2201      	movs	r2, #1
   3e8c4:	6903      	ldr	r3, [r0, #16]
   3e8c6:	68db      	ldr	r3, [r3, #12]
   3e8c8:	739a      	strb	r2, [r3, #14]
}
   3e8ca:	4770      	bx	lr

0003e8cc <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   3e8cc:	6903      	ldr	r3, [r0, #16]
   3e8ce:	68db      	ldr	r3, [r3, #12]
   3e8d0:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   3e8d2:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   3e8d6:	b962      	cbnz	r2, 3e8f2 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   3e8d8:	6842      	ldr	r2, [r0, #4]
   3e8da:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3e8dc:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   3e8e0:	b140      	cbz	r0, 3e8f4 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   3e8e2:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   3e8e6:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   3e8ea:	d003      	beq.n	3e8f4 <uarte_nrfx_irq_tx_ready_complete+0x28>
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   3e8ec:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
   3e8ee:	6119      	str	r1, [r3, #16]
   3e8f0:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   3e8f2:	2000      	movs	r0, #0
}
   3e8f4:	4770      	bx	lr

0003e8f6 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   3e8f6:	6843      	ldr	r3, [r0, #4]
   3e8f8:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3e8fa:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   3e8fe:	3800      	subs	r0, #0
   3e900:	bf18      	it	ne
   3e902:	2001      	movne	r0, #1
   3e904:	4770      	bx	lr

0003e906 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   3e906:	2210      	movs	r2, #16
	return config->uarte_regs;
   3e908:	6843      	ldr	r3, [r0, #4]
   3e90a:	681b      	ldr	r3, [r3, #0]
   3e90c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   3e910:	4770      	bx	lr

0003e912 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   3e912:	2210      	movs	r2, #16
	return config->uarte_regs;
   3e914:	6843      	ldr	r3, [r0, #4]
   3e916:	681b      	ldr	r3, [r3, #0]
   3e918:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   3e91c:	4770      	bx	lr

0003e91e <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   3e91e:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   3e922:	6843      	ldr	r3, [r0, #4]
   3e924:	681b      	ldr	r3, [r3, #0]
   3e926:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   3e92a:	4770      	bx	lr

0003e92c <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   3e92c:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   3e930:	6843      	ldr	r3, [r0, #4]
   3e932:	681b      	ldr	r3, [r3, #0]
   3e934:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   3e938:	4770      	bx	lr

0003e93a <uarte_nrfx_irq_update>:
}
   3e93a:	2001      	movs	r0, #1
   3e93c:	4770      	bx	lr

0003e93e <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   3e93e:	6903      	ldr	r3, [r0, #16]
   3e940:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   3e942:	e9c3 1200 	strd	r1, r2, [r3]
}
   3e946:	4770      	bx	lr

0003e948 <uarte_nrfx_irq_is_pending>:
{
   3e948:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   3e94a:	6843      	ldr	r3, [r0, #4]
{
   3e94c:	4604      	mov	r4, r0
	return config->uarte_regs;
   3e94e:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   3e950:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   3e954:	025b      	lsls	r3, r3, #9
   3e956:	d405      	bmi.n	3e964 <uarte_nrfx_irq_is_pending+0x1c>
   3e958:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   3e95c:	f010 0010 	ands.w	r0, r0, #16
   3e960:	d106      	bne.n	3e970 <uarte_nrfx_irq_is_pending+0x28>
}
   3e962:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   3e964:	f7ff ffb2 	bl	3e8cc <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   3e968:	2800      	cmp	r0, #0
   3e96a:	d0f5      	beq.n	3e958 <uarte_nrfx_irq_is_pending+0x10>
		||
   3e96c:	2001      	movs	r0, #1
   3e96e:	e7f8      	b.n	3e962 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   3e970:	4620      	mov	r0, r4
   3e972:	f7ff ffc0 	bl	3e8f6 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   3e976:	3800      	subs	r0, #0
   3e978:	bf18      	it	ne
   3e97a:	2001      	movne	r0, #1
   3e97c:	e7f1      	b.n	3e962 <uarte_nrfx_irq_is_pending+0x1a>

0003e97e <tx_start.isra.0>:
	return config->uarte_regs;
   3e97e:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   3e980:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   3e984:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3e988:	2200      	movs	r2, #0
   3e98a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   3e98e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   3e992:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   3e996:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   3e99a:	6842      	ldr	r2, [r0, #4]
   3e99c:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   3e99e:	bf41      	itttt	mi
   3e9a0:	2208      	movmi	r2, #8
   3e9a2:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   3e9a6:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   3e9aa:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3e9ae:	2201      	movs	r2, #1
   3e9b0:	609a      	str	r2, [r3, #8]
}
   3e9b2:	4770      	bx	lr

0003e9b4 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   3e9b4:	6802      	ldr	r2, [r0, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3e9b6:	f8d2 3158 	ldr.w	r3, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   3e9ba:	b943      	cbnz	r3, 3e9ce <is_tx_ready.isra.0+0x1a>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   3e9bc:	6841      	ldr	r1, [r0, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   3e9be:	0789      	lsls	r1, r1, #30
   3e9c0:	d407      	bmi.n	3e9d2 <is_tx_ready.isra.0+0x1e>
   3e9c2:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   3e9c6:	3800      	subs	r0, #0
   3e9c8:	bf18      	it	ne
   3e9ca:	2001      	movne	r0, #1
   3e9cc:	4770      	bx	lr
   3e9ce:	2001      	movs	r0, #1
   3e9d0:	4770      	bx	lr
   3e9d2:	4618      	mov	r0, r3
}
   3e9d4:	4770      	bx	lr

0003e9d6 <uarte_nrfx_fifo_fill>:
{
   3e9d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   3e9d8:	6906      	ldr	r6, [r0, #16]
{
   3e9da:	4605      	mov	r5, r0
	len = MIN(len, data->int_driven->tx_buff_size);
   3e9dc:	68f3      	ldr	r3, [r6, #12]
   3e9de:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   3e9e0:	3310      	adds	r3, #16
   3e9e2:	4294      	cmp	r4, r2
   3e9e4:	bfa8      	it	ge
   3e9e6:	4614      	movge	r4, r2
   3e9e8:	2201      	movs	r2, #1
   3e9ea:	e8d3 0fef 	ldaex	r0, [r3]
   3e9ee:	2800      	cmp	r0, #0
   3e9f0:	d103      	bne.n	3e9fa <uarte_nrfx_fifo_fill+0x24>
   3e9f2:	e8c3 2fe7 	stlex	r7, r2, [r3]
   3e9f6:	2f00      	cmp	r7, #0
   3e9f8:	d1f7      	bne.n	3e9ea <uarte_nrfx_fifo_fill+0x14>
   3e9fa:	bf0c      	ite	eq
   3e9fc:	4613      	moveq	r3, r2
   3e9fe:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   3ea00:	d01d      	beq.n	3ea3e <uarte_nrfx_fifo_fill+0x68>
		return 0;
   3ea02:	461c      	mov	r4, r3
}
   3ea04:	4620      	mov	r0, r4
   3ea06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   3ea08:	68f2      	ldr	r2, [r6, #12]
   3ea0a:	5cc8      	ldrb	r0, [r1, r3]
   3ea0c:	6892      	ldr	r2, [r2, #8]
   3ea0e:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
   3ea10:	3301      	adds	r3, #1
   3ea12:	42a3      	cmp	r3, r4
   3ea14:	dbf8      	blt.n	3ea08 <uarte_nrfx_fifo_fill+0x32>
	__asm__ volatile(
   3ea16:	f04f 0320 	mov.w	r3, #32
   3ea1a:	f3ef 8711 	mrs	r7, BASEPRI
   3ea1e:	f383 8812 	msr	BASEPRI_MAX, r3
   3ea22:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   3ea26:	6868      	ldr	r0, [r5, #4]
   3ea28:	f7ff ffc4 	bl	3e9b4 <is_tx_ready.isra.0>
   3ea2c:	68f3      	ldr	r3, [r6, #12]
   3ea2e:	b940      	cbnz	r0, 3ea42 <uarte_nrfx_fifo_fill+0x6c>
		len = 0;
   3ea30:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
   3ea32:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
   3ea34:	f387 8811 	msr	BASEPRI, r7
   3ea38:	f3bf 8f6f 	isb	sy
	return len;
   3ea3c:	e7e2      	b.n	3ea04 <uarte_nrfx_fifo_fill+0x2e>
	for (int i = 0; i < len; i++) {
   3ea3e:	2300      	movs	r3, #0
   3ea40:	e7e7      	b.n	3ea12 <uarte_nrfx_fifo_fill+0x3c>
		tx_start(dev, data->int_driven->tx_buffer, len);
   3ea42:	4622      	mov	r2, r4
   3ea44:	6899      	ldr	r1, [r3, #8]
   3ea46:	6868      	ldr	r0, [r5, #4]
   3ea48:	f7ff ff99 	bl	3e97e <tx_start.isra.0>
   3ea4c:	e7f2      	b.n	3ea34 <uarte_nrfx_fifo_fill+0x5e>

0003ea4e <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   3ea4e:	6842      	ldr	r2, [r0, #4]
{
   3ea50:	b410      	push	{r4}
	return config->uarte_regs;
   3ea52:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   3ea54:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   3ea58:	05c9      	lsls	r1, r1, #23
   3ea5a:	d518      	bpl.n	3ea8e <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3ea5c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   3ea60:	b1a9      	cbz	r1, 3ea8e <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   3ea62:	f04f 0420 	mov.w	r4, #32
   3ea66:	f3ef 8111 	mrs	r1, BASEPRI
   3ea6a:	f384 8812 	msr	BASEPRI_MAX, r4
   3ea6e:	f3bf 8f6f 	isb	sy
   3ea72:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   3ea76:	b134      	cbz	r4, 3ea86 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3ea78:	2400      	movs	r4, #0
   3ea7a:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
   3ea7e:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3ea82:	2401      	movs	r4, #1
   3ea84:	60dc      	str	r4, [r3, #12]
	__asm__ volatile(
   3ea86:	f381 8811 	msr	BASEPRI, r1
   3ea8a:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   3ea8e:	6852      	ldr	r2, [r2, #4]
   3ea90:	06d2      	lsls	r2, r2, #27
   3ea92:	d51a      	bpl.n	3eaca <uarte_nrfx_isr_int+0x7c>
	__asm__ volatile(
   3ea94:	f04f 0220 	mov.w	r2, #32
   3ea98:	f3ef 8111 	mrs	r1, BASEPRI
   3ea9c:	f382 8812 	msr	BASEPRI_MAX, r2
   3eaa0:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3eaa4:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   3eaa8:	b112      	cbz	r2, 3eab0 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   3eaaa:	2200      	movs	r2, #0
   3eaac:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   3eab0:	6902      	ldr	r2, [r0, #16]
   3eab2:	68d2      	ldr	r2, [r2, #12]
   3eab4:	b10a      	cbz	r2, 3eaba <uarte_nrfx_isr_int+0x6c>
   3eab6:	6912      	ldr	r2, [r2, #16]
   3eab8:	b91a      	cbnz	r2, 3eac2 <uarte_nrfx_isr_int+0x74>
    p_reg->INTENCLR = mask;
   3eaba:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   3eabe:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
   3eac2:	f381 8811 	msr	BASEPRI, r1
   3eac6:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   3eaca:	6902      	ldr	r2, [r0, #16]
   3eacc:	68d2      	ldr	r2, [r2, #12]
   3eace:	b15a      	cbz	r2, 3eae8 <uarte_nrfx_isr_int+0x9a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3ead0:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   3ead4:	b159      	cbz	r1, 3eaee <uarte_nrfx_isr_int+0xa0>
		data->int_driven->fifo_fill_lock = 0;
   3ead6:	2100      	movs	r1, #0
		if (data->int_driven->disable_tx_irq) {
   3ead8:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   3eada:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   3eadc:	b13c      	cbz	r4, 3eaee <uarte_nrfx_isr_int+0xa0>
    p_reg->INTENCLR = mask;
   3eade:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   3eae2:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   3eae6:	7391      	strb	r1, [r2, #14]
}
   3eae8:	f85d 4b04 	ldr.w	r4, [sp], #4
   3eaec:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3eaee:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   3eaf2:	b121      	cbz	r1, 3eafe <uarte_nrfx_isr_int+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3eaf4:	2100      	movs	r1, #0
   3eaf6:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   3eafa:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   3eafe:	6813      	ldr	r3, [r2, #0]
   3eb00:	2b00      	cmp	r3, #0
   3eb02:	d0f1      	beq.n	3eae8 <uarte_nrfx_isr_int+0x9a>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   3eb04:	6851      	ldr	r1, [r2, #4]
}
   3eb06:	f85d 4b04 	ldr.w	r4, [sp], #4
		data->int_driven->cb(dev, data->int_driven->cb_data);
   3eb0a:	4718      	bx	r3

0003eb0c <entropy_cc3xx_rng_init>:

static int entropy_cc3xx_rng_init(const struct device *dev)
{
   3eb0c:	b508      	push	{r3, lr}
	(void)dev;

#if defined(CONFIG_BUILD_WITH_TFM)
	psa_status_t status;

	status = psa_crypto_init();
   3eb0e:	f002 fc1e 	bl	4134e <psa_crypto_init>
	if (status != PSA_SUCCESS) {
		return -EINVAL;
   3eb12:	2800      	cmp	r0, #0
		return -EINVAL;
	}
#endif

	return 0;
}
   3eb14:	bf18      	it	ne
   3eb16:	f06f 0015 	mvnne.w	r0, #21
   3eb1a:	bd08      	pop	{r3, pc}

0003eb1c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   3eb1c:	4770      	bx	lr

0003eb1e <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   3eb1e:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   3eb20:	6843      	ldr	r3, [r0, #4]
   3eb22:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   3eb24:	7a03      	ldrb	r3, [r0, #8]
   3eb26:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   3eb2a:	3b01      	subs	r3, #1
   3eb2c:	00db      	lsls	r3, r3, #3
   3eb2e:	6845      	ldr	r5, [r0, #4]
   3eb30:	6814      	ldr	r4, [r2, #0]
   3eb32:	441d      	add	r5, r3
   3eb34:	42ac      	cmp	r4, r5
   3eb36:	d902      	bls.n	3eb3e <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
   3eb38:	f06f 0001 	mvn.w	r0, #1
}
   3eb3c:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   3eb3e:	7965      	ldrb	r5, [r4, #5]
   3eb40:	428d      	cmp	r5, r1
   3eb42:	d002      	beq.n	3eb4a <pinctrl_lookup_state+0x2c>
		(*state)++;
   3eb44:	3408      	adds	r4, #8
   3eb46:	6014      	str	r4, [r2, #0]
   3eb48:	e7f1      	b.n	3eb2e <pinctrl_lookup_state+0x10>
			return 0;
   3eb4a:	2000      	movs	r0, #0
   3eb4c:	e7f6      	b.n	3eb3c <pinctrl_lookup_state+0x1e>

0003eb4e <nrf_gpio_pin_clear>:
{
   3eb4e:	b507      	push	{r0, r1, r2, lr}
   3eb50:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3eb52:	a801      	add	r0, sp, #4
   3eb54:	f7e6 fd06 	bl	25564 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   3eb58:	2301      	movs	r3, #1
   3eb5a:	9a01      	ldr	r2, [sp, #4]
   3eb5c:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   3eb5e:	60c3      	str	r3, [r0, #12]
}
   3eb60:	b003      	add	sp, #12
   3eb62:	f85d fb04 	ldr.w	pc, [sp], #4

0003eb66 <nrf_gpio_pin_set>:
{
   3eb66:	b507      	push	{r0, r1, r2, lr}
   3eb68:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3eb6a:	a801      	add	r0, sp, #4
   3eb6c:	f7e6 fcfa 	bl	25564 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   3eb70:	2301      	movs	r3, #1
   3eb72:	9a01      	ldr	r2, [sp, #4]
   3eb74:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   3eb76:	6083      	str	r3, [r0, #8]
}
   3eb78:	b003      	add	sp, #12
   3eb7a:	f85d fb04 	ldr.w	pc, [sp], #4

0003eb7e <nrf_gpio_pin_write>:
    if (value == 0)
   3eb7e:	b909      	cbnz	r1, 3eb84 <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
   3eb80:	f7ff bfe5 	b.w	3eb4e <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
   3eb84:	f7ff bfef 	b.w	3eb66 <nrf_gpio_pin_set>

0003eb88 <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
   3eb88:	b573      	push	{r0, r1, r4, r5, r6, lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
   3eb8a:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
{
   3eb8e:	4604      	mov	r4, r0
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   3eb90:	2b00      	cmp	r3, #0
   3eb92:	bf0c      	ite	eq
   3eb94:	460e      	moveq	r6, r1
   3eb96:	2600      	movne	r6, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
   3eb98:	f000 033f 	and.w	r3, r0, #63	; 0x3f
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   3eb9c:	bf0c      	ite	eq
   3eb9e:	4615      	moveq	r5, r2
   3eba0:	2501      	movne	r5, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3eba2:	a801      	add	r0, sp, #4
   3eba4:	9301      	str	r3, [sp, #4]
   3eba6:	f7e6 fcdd 	bl	25564 <nrf_gpio_pin_port_decode>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   3ebaa:	f3c4 1181 	ubfx	r1, r4, #6, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   3ebae:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
    reg->PIN_CNF[pin_number] = cnf;
   3ebb2:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   3ebb4:	ea44 0481 	orr.w	r4, r4, r1, lsl #2
   3ebb8:	ea44 0106 	orr.w	r1, r4, r6
   3ebbc:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   3ebc0:	3380      	adds	r3, #128	; 0x80
   3ebc2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
   3ebc6:	b002      	add	sp, #8
   3ebc8:	bd70      	pop	{r4, r5, r6, pc}

0003ebca <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   3ebca:	b570      	push	{r4, r5, r6, lr}
   3ebcc:	4615      	mov	r5, r2
   3ebce:	4604      	mov	r4, r0
   3ebd0:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   3ebd4:	42a6      	cmp	r6, r4
   3ebd6:	d101      	bne.n	3ebdc <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
   3ebd8:	2000      	movs	r0, #0
}
   3ebda:	bd70      	pop	{r4, r5, r6, pc}
		switch (NRF_GET_FUN(pins[i])) {
   3ebdc:	6823      	ldr	r3, [r4, #0]
   3ebde:	0c1a      	lsrs	r2, r3, #16
   3ebe0:	2a19      	cmp	r2, #25
   3ebe2:	d869      	bhi.n	3ecb8 <pinctrl_configure_pins+0xee>
   3ebe4:	e8df f002 	tbb	[pc, r2]
   3ebe8:	3e1f180d 	.word	0x3e1f180d
   3ebec:	683e3424 	.word	0x683e3424
   3ebf0:	43686868 	.word	0x43686868
   3ebf4:	68686848 	.word	0x68686848
   3ebf8:	68686868 	.word	0x68686868
   3ebfc:	594d6868 	.word	0x594d6868
   3ec00:	635e      	.short	0x635e
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
   3ec02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3ec06:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
   3ec0a:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_set(pin_number);
   3ec0c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   3ec10:	f7ff ffa9 	bl	3eb66 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   3ec14:	2201      	movs	r2, #1
   3ec16:	e004      	b.n	3ec22 <pinctrl_configure_pins+0x58>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
   3ec18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3ec1c:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   3ec20:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   3ec22:	4611      	mov	r1, r2
   3ec24:	e00f      	b.n	3ec46 <pinctrl_configure_pins+0x7c>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
   3ec26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3ec2a:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
   3ec2e:	e7ec      	b.n	3ec0a <pinctrl_configure_pins+0x40>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
   3ec30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3ec34:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   3ec38:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_clear(pin_number);
   3ec3a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   3ec3e:	f7ff ff86 	bl	3eb4e <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   3ec42:	2200      	movs	r2, #0
   3ec44:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   3ec46:	6820      	ldr	r0, [r4, #0]
   3ec48:	f7ff ff9e 	bl	3eb88 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   3ec4c:	3404      	adds	r4, #4
   3ec4e:	e7c1      	b.n	3ebd4 <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
   3ec50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3ec54:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   3ec58:	6820      	ldr	r0, [r4, #0]
   3ec5a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   3ec5e:	f7ff ff76 	bl	3eb4e <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   3ec62:	e7d7      	b.n	3ec14 <pinctrl_configure_pins+0x4a>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
   3ec64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3ec68:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   3ec6c:	e7d8      	b.n	3ec20 <pinctrl_configure_pins+0x56>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
   3ec6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3ec72:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   3ec76:	e7d3      	b.n	3ec20 <pinctrl_configure_pins+0x56>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
   3ec78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3ec7c:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
   3ec80:	e7ce      	b.n	3ec20 <pinctrl_configure_pins+0x56>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
   3ec82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3ec86:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   3ec8a:	6820      	ldr	r0, [r4, #0]
   3ec8c:	f3c0 3140 	ubfx	r1, r0, #13, #1
   3ec90:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   3ec94:	f7ff ff73 	bl	3eb7e <nrf_gpio_pin_write>
   3ec98:	e7bc      	b.n	3ec14 <pinctrl_configure_pins+0x4a>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
   3ec9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3ec9e:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   3eca2:	e7f2      	b.n	3ec8a <pinctrl_configure_pins+0xc0>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
   3eca4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3eca8:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   3ecac:	e7ed      	b.n	3ec8a <pinctrl_configure_pins+0xc0>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
   3ecae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   3ecb2:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
   3ecb6:	e7e8      	b.n	3ec8a <pinctrl_configure_pins+0xc0>
		switch (NRF_GET_FUN(pins[i])) {
   3ecb8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3ecbc:	e78d      	b.n	3ebda <pinctrl_configure_pins+0x10>

0003ecbe <nrf_modem_os_busywait>:
	z_impl_k_busy_wait(usec_to_wait);
   3ecbe:	f002 ba03 	b.w	410c8 <z_impl_k_busy_wait>

0003ecc2 <nrf_modem_os_is_in_isr>:
	return k_is_in_isr();
   3ecc2:	f002 b929 	b.w	40f18 <k_is_in_isr>

0003ecc6 <nrf_modem_os_sem_count_get>:
}
   3ecc6:	6880      	ldr	r0, [r0, #8]
   3ecc8:	4770      	bx	lr

0003ecca <rpc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   3ecca:	4668      	mov	r0, sp
   3eccc:	f020 0107 	bic.w	r1, r0, #7
   3ecd0:	468d      	mov	sp, r1
   3ecd2:	b501      	push	{r0, lr}
	nrf_modem_application_irq_handler();
   3ecd4:	f7f5 f8f0 	bl	33eb8 <nrf_modem_application_irq_handler>
	nrf_modem_os_event_notify();
   3ecd8:	f7e6 fe98 	bl	25a0c <nrf_modem_os_event_notify>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   3ecdc:	f7e3 ff82 	bl	22be4 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   3ece0:	f7e4 f89a 	bl	22e18 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   3ece4:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   3ece8:	4685      	mov	sp, r0
   3ecea:	4770      	bx	lr

0003ecec <read_task_create>:
{
   3ecec:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(APPLICATION_IRQ, APPLICATION_IRQ_PRIORITY,
   3ecee:	201c      	movs	r0, #28
   3ecf0:	2200      	movs	r2, #0
   3ecf2:	2106      	movs	r1, #6
   3ecf4:	f7e3 ff50 	bl	22b98 <z_arm_irq_priority_set>
}
   3ecf8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(APPLICATION_IRQ);
   3ecfc:	201c      	movs	r0, #28
   3ecfe:	f7e3 bf19 	b.w	22b34 <arch_irq_enable>

0003ed02 <nrf_modem_os_trace_put>:
	}
#endif /* CONFIG_NRF_MODEM_LIB_TRACE_THREAD_PROCESSING */

#endif /* CONFIG_NRF_MODEM_LIB_TRACE_ENABLED */
	return 0;
}
   3ed02:	2000      	movs	r0, #0
   3ed04:	4770      	bx	lr

0003ed06 <z_to_nrf_flags>:
{
   3ed06:	4603      	mov	r3, r0
		nrf_flags |= NRF_MSG_DONTWAIT;
   3ed08:	f000 0040 	and.w	r0, r0, #64	; 0x40
	if (z_flags & MSG_PEEK) {
   3ed0c:	079a      	lsls	r2, r3, #30
		nrf_flags |= NRF_MSG_PEEK;
   3ed0e:	bf48      	it	mi
   3ed10:	f040 0002 	orrmi.w	r0, r0, #2
	if (z_flags & MSG_WAITALL) {
   3ed14:	05db      	lsls	r3, r3, #23
		nrf_flags |= NRF_MSG_WAITALL;
   3ed16:	bf48      	it	mi
   3ed18:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
}
   3ed1c:	4770      	bx	lr

0003ed1e <nrf_to_z_protocol>:
	switch (proto) {
   3ed1e:	2811      	cmp	r0, #17
   3ed20:	d005      	beq.n	3ed2e <nrf_to_z_protocol+0x10>
   3ed22:	dc05      	bgt.n	3ed30 <nrf_to_z_protocol+0x12>
   3ed24:	b118      	cbz	r0, 3ed2e <nrf_to_z_protocol+0x10>
		return -EPROTONOSUPPORT;
   3ed26:	2806      	cmp	r0, #6
   3ed28:	bf18      	it	ne
   3ed2a:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
}
   3ed2e:	4770      	bx	lr
	switch (proto) {
   3ed30:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   3ed34:	d0fb      	beq.n	3ed2e <nrf_to_z_protocol+0x10>
   3ed36:	f240 1311 	movw	r3, #273	; 0x111
		return -EPROTONOSUPPORT;
   3ed3a:	4298      	cmp	r0, r3
   3ed3c:	e7f4      	b.n	3ed28 <nrf_to_z_protocol+0xa>

0003ed3e <nrf91_socket_offload_getsockopt>:
{
   3ed3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3ed42:	461c      	mov	r4, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   3ed44:	2300      	movs	r3, #0
{
   3ed46:	b086      	sub	sp, #24
   3ed48:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_timeo = {0, 0};
   3ed4c:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   3ed50:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   3ed54:	2901      	cmp	r1, #1
{
   3ed56:	460e      	mov	r6, r1
   3ed58:	4615      	mov	r5, r2
	int sd = OBJ_TO_SD(obj);
   3ed5a:	6807      	ldr	r7, [r0, #0]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   3ed5c:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   3ed5e:	d002      	beq.n	3ed66 <nrf91_socket_offload_getsockopt+0x28>
   3ed60:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   3ed64:	d13a      	bne.n	3eddc <nrf91_socket_offload_getsockopt+0x9e>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   3ed66:	4629      	mov	r1, r5
   3ed68:	4630      	mov	r0, r6
   3ed6a:	aa02      	add	r2, sp, #8
   3ed6c:	f7e6 fea6 	bl	25abc <z_to_nrf_optname>
   3ed70:	2800      	cmp	r0, #0
   3ed72:	db33      	blt.n	3eddc <nrf91_socket_offload_getsockopt+0x9e>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   3ed74:	2e01      	cmp	r6, #1
   3ed76:	d123      	bne.n	3edc0 <nrf91_socket_offload_getsockopt+0x82>
   3ed78:	f1a5 0314 	sub.w	r3, r5, #20
   3ed7c:	2b01      	cmp	r3, #1
   3ed7e:	d81f      	bhi.n	3edc0 <nrf91_socket_offload_getsockopt+0x82>
		nrf_optlen = sizeof(struct nrf_timeval);
   3ed80:	2308      	movs	r3, #8
   3ed82:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_timeo;
   3ed84:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   3ed86:	aa03      	add	r2, sp, #12
   3ed88:	4638      	mov	r0, r7
   3ed8a:	9200      	str	r2, [sp, #0]
   3ed8c:	4631      	mov	r1, r6
   3ed8e:	9a02      	ldr	r2, [sp, #8]
   3ed90:	f001 fe15 	bl	409be <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   3ed94:	4607      	mov	r7, r0
   3ed96:	b978      	cbnz	r0, 3edb8 <nrf91_socket_offload_getsockopt+0x7a>
   3ed98:	b174      	cbz	r4, 3edb8 <nrf91_socket_offload_getsockopt+0x7a>
		*optlen = nrf_optlen;
   3ed9a:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   3ed9c:	2e01      	cmp	r6, #1
		*optlen = nrf_optlen;
   3ed9e:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   3eda2:	d109      	bne.n	3edb8 <nrf91_socket_offload_getsockopt+0x7a>
			if (optname == SO_ERROR) {
   3eda4:	2d04      	cmp	r5, #4
   3eda6:	d10d      	bne.n	3edc4 <nrf91_socket_offload_getsockopt+0x86>
				if (*(int *)optval != 0) {
   3eda8:	6820      	ldr	r0, [r4, #0]
   3edaa:	b128      	cbz	r0, 3edb8 <nrf91_socket_offload_getsockopt+0x7a>
					nrf_modem_os_errno_set(*(int *)optval);
   3edac:	f7e6 fd68 	bl	25880 <nrf_modem_os_errno_set>
					*(int *)optval = errno;
   3edb0:	f7fe fcbd 	bl	3d72e <__errno>
   3edb4:	6803      	ldr	r3, [r0, #0]
   3edb6:	6023      	str	r3, [r4, #0]
}
   3edb8:	4638      	mov	r0, r7
   3edba:	b006      	add	sp, #24
   3edbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3edc0:	4623      	mov	r3, r4
   3edc2:	e7e0      	b.n	3ed86 <nrf91_socket_offload_getsockopt+0x48>
			} else if ((optname == SO_RCVTIMEO) ||
   3edc4:	3d14      	subs	r5, #20
   3edc6:	2d01      	cmp	r5, #1
   3edc8:	d8f6      	bhi.n	3edb8 <nrf91_socket_offload_getsockopt+0x7a>
					nrf_timeo.tv_sec;
   3edca:	9b04      	ldr	r3, [sp, #16]
   3edcc:	e9c4 3000 	strd	r3, r0, [r4]
				((struct timeval *)optval)->tv_usec =
   3edd0:	9b05      	ldr	r3, [sp, #20]
   3edd2:	60a3      	str	r3, [r4, #8]
				*optlen = sizeof(struct timeval);
   3edd4:	2310      	movs	r3, #16
   3edd6:	f8c8 3000 	str.w	r3, [r8]
   3edda:	e7ed      	b.n	3edb8 <nrf91_socket_offload_getsockopt+0x7a>
	errno = ENOPROTOOPT;
   3eddc:	f7fe fca7 	bl	3d72e <__errno>
   3ede0:	236d      	movs	r3, #109	; 0x6d
	return retval;
   3ede2:	f04f 37ff 	mov.w	r7, #4294967295
	errno = ENOPROTOOPT;
   3ede6:	6003      	str	r3, [r0, #0]
	return retval;
   3ede8:	e7e6      	b.n	3edb8 <nrf91_socket_offload_getsockopt+0x7a>

0003edea <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   3edea:	6800      	ldr	r0, [r0, #0]
   3edec:	f001 bc2a 	b.w	40644 <nrf_listen>

0003edf0 <nrf91_socket_offload_freeaddrinfo>:
{
   3edf0:	b538      	push	{r3, r4, r5, lr}
   3edf2:	4604      	mov	r4, r0
	while (next != NULL) {
   3edf4:	b904      	cbnz	r4, 3edf8 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   3edf6:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   3edf8:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   3edfa:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   3edfc:	f002 fa41 	bl	41282 <k_free>
		k_free(this);
   3ee00:	4620      	mov	r0, r4
   3ee02:	f002 fa3e 	bl	41282 <k_free>
		next = next->ai_next;
   3ee06:	462c      	mov	r4, r5
   3ee08:	e7f4      	b.n	3edf4 <nrf91_socket_offload_freeaddrinfo+0x4>

0003ee0a <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   3ee0a:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   3ee0c:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   3ee0e:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   3ee10:	4603      	mov	r3, r0
{
   3ee12:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   3ee14:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3ee18:	f101 0420 	add.w	r4, r1, #32
   3ee1c:	f101 0210 	add.w	r2, r1, #16
   3ee20:	f852 5b04 	ldr.w	r5, [r2], #4
   3ee24:	42a2      	cmp	r2, r4
   3ee26:	f843 5b04 	str.w	r5, [r3], #4
   3ee2a:	d1f9      	bne.n	3ee20 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   3ee2c:	6a0b      	ldr	r3, [r1, #32]
   3ee2e:	7503      	strb	r3, [r0, #20]
}
   3ee30:	bd30      	pop	{r4, r5, pc}

0003ee32 <z_to_nrf_ipv6>:
{
   3ee32:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   3ee34:	2124      	movs	r1, #36	; 0x24
   3ee36:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   3ee38:	8841      	ldrh	r1, [r0, #2]
{
   3ee3a:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   3ee3c:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   3ee3e:	2102      	movs	r1, #2
{
   3ee40:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_family = NRF_AF_INET6;
   3ee42:	6059      	str	r1, [r3, #4]
   3ee44:	1d04      	adds	r4, r0, #4
   3ee46:	f103 0610 	add.w	r6, r3, #16
   3ee4a:	f100 0714 	add.w	r7, r0, #20
   3ee4e:	4635      	mov	r5, r6
   3ee50:	6820      	ldr	r0, [r4, #0]
   3ee52:	6861      	ldr	r1, [r4, #4]
   3ee54:	3408      	adds	r4, #8
   3ee56:	c503      	stmia	r5!, {r0, r1}
   3ee58:	42bc      	cmp	r4, r7
   3ee5a:	462e      	mov	r6, r5
   3ee5c:	d1f7      	bne.n	3ee4e <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   3ee5e:	7d12      	ldrb	r2, [r2, #20]
   3ee60:	621a      	str	r2, [r3, #32]
}
   3ee62:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003ee64 <nrf91_socket_offload_sendto>:
{
   3ee64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3ee68:	b08e      	sub	sp, #56	; 0x38
   3ee6a:	9c14      	ldr	r4, [sp, #80]	; 0x50
   3ee6c:	460f      	mov	r7, r1
   3ee6e:	461d      	mov	r5, r3
	int sd = OBJ_TO_SD(obj);
   3ee70:	6806      	ldr	r6, [r0, #0]
	if (to == NULL) {
   3ee72:	b964      	cbnz	r4, 3ee8e <nrf91_socket_offload_sendto+0x2a>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   3ee74:	4618      	mov	r0, r3
   3ee76:	9203      	str	r2, [sp, #12]
   3ee78:	f7ff ff45 	bl	3ed06 <z_to_nrf_flags>
   3ee7c:	4603      	mov	r3, r0
   3ee7e:	4630      	mov	r0, r6
   3ee80:	9a03      	ldr	r2, [sp, #12]
   3ee82:	9415      	str	r4, [sp, #84]	; 0x54
}
   3ee84:	b00e      	add	sp, #56	; 0x38
   3ee86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   3ee8a:	f7f5 bd41 	b.w	34910 <nrf_sendto>
	} else if (to->sa_family == AF_INET) {
   3ee8e:	8823      	ldrh	r3, [r4, #0]
   3ee90:	9203      	str	r2, [sp, #12]
   3ee92:	2b01      	cmp	r3, #1
   3ee94:	d116      	bne.n	3eec4 <nrf91_socket_offload_sendto+0x60>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3ee96:	2710      	movs	r7, #16
	nrf_out->sin_port = ptr->sin_port;
   3ee98:	8860      	ldrh	r0, [r4, #2]
	nrf_out->sin_family = NRF_AF_INET;
   3ee9a:	9306      	str	r3, [sp, #24]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3ee9c:	6863      	ldr	r3, [r4, #4]
	nrf_out->sin_port = ptr->sin_port;
   3ee9e:	f8ad 001c 	strh.w	r0, [sp, #28]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags),
   3eea2:	4628      	mov	r0, r5
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3eea4:	9308      	str	r3, [sp, #32]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3eea6:	f88d 7014 	strb.w	r7, [sp, #20]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags),
   3eeaa:	f7ff ff2c 	bl	3ed06 <z_to_nrf_flags>
   3eeae:	9a03      	ldr	r2, [sp, #12]
   3eeb0:	4603      	mov	r3, r0
   3eeb2:	a805      	add	r0, sp, #20
   3eeb4:	9701      	str	r7, [sp, #4]
   3eeb6:	9000      	str	r0, [sp, #0]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags),
   3eeb8:	4630      	mov	r0, r6
   3eeba:	f7f5 fd29 	bl	34910 <nrf_sendto>
}
   3eebe:	b00e      	add	sp, #56	; 0x38
   3eec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (to->sa_family == AF_INET6) {
   3eec4:	2b02      	cmp	r3, #2
   3eec6:	d10f      	bne.n	3eee8 <nrf91_socket_offload_sendto+0x84>
		z_to_nrf_ipv6(to, &ipv6);
   3eec8:	f10d 0814 	add.w	r8, sp, #20
   3eecc:	4641      	mov	r1, r8
   3eece:	4620      	mov	r0, r4
   3eed0:	f7ff ffaf 	bl	3ee32 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags),
   3eed4:	4628      	mov	r0, r5
   3eed6:	f7ff ff16 	bl	3ed06 <z_to_nrf_flags>
   3eeda:	2124      	movs	r1, #36	; 0x24
   3eedc:	4603      	mov	r3, r0
   3eede:	e9cd 8100 	strd	r8, r1, [sp]
   3eee2:	9a03      	ldr	r2, [sp, #12]
   3eee4:	4639      	mov	r1, r7
   3eee6:	e7e7      	b.n	3eeb8 <nrf91_socket_offload_sendto+0x54>
	errno = ENOTSUP;
   3eee8:	f7fe fc21 	bl	3d72e <__errno>
   3eeec:	2386      	movs	r3, #134	; 0x86
   3eeee:	6003      	str	r3, [r0, #0]
	return retval;
   3eef0:	f04f 30ff 	mov.w	r0, #4294967295
   3eef4:	e7e3      	b.n	3eebe <nrf91_socket_offload_sendto+0x5a>

0003eef6 <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   3eef6:	2300      	movs	r3, #0
{
   3eef8:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   3eefa:	e9cd 3300 	strd	r3, r3, [sp]
   3eefe:	f7ff ffb1 	bl	3ee64 <nrf91_socket_offload_sendto>
}
   3ef02:	b003      	add	sp, #12
   3ef04:	f85d fb04 	ldr.w	pc, [sp], #4

0003ef08 <nrf91_socket_offload_connect>:
{
   3ef08:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   3ef0a:	6804      	ldr	r4, [r0, #0]
	if (addr->sa_family == AF_INET) {
   3ef0c:	8808      	ldrh	r0, [r1, #0]
{
   3ef0e:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   3ef10:	2801      	cmp	r0, #1
{
   3ef12:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   3ef14:	d10e      	bne.n	3ef34 <nrf91_socket_offload_connect+0x2c>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3ef16:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   3ef18:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3ef1a:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3ef1c:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_port = ptr->sin_port;
   3ef20:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   3ef24:	9002      	str	r0, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3ef26:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (struct nrf_sockaddr *)&ipv6,
   3ef28:	4620      	mov	r0, r4
   3ef2a:	a901      	add	r1, sp, #4
   3ef2c:	f7f5 fc4e 	bl	347cc <nrf_connect>
}
   3ef30:	b00a      	add	sp, #40	; 0x28
   3ef32:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   3ef34:	2802      	cmp	r0, #2
   3ef36:	d105      	bne.n	3ef44 <nrf91_socket_offload_connect+0x3c>
		z_to_nrf_ipv6(addr, &ipv6);
   3ef38:	4618      	mov	r0, r3
   3ef3a:	a901      	add	r1, sp, #4
   3ef3c:	f7ff ff79 	bl	3ee32 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (struct nrf_sockaddr *)&ipv6,
   3ef40:	2224      	movs	r2, #36	; 0x24
   3ef42:	e7f1      	b.n	3ef28 <nrf91_socket_offload_connect+0x20>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   3ef44:	4620      	mov	r0, r4
   3ef46:	f7f5 fc41 	bl	347cc <nrf_connect>
		if (retval < 0) {
   3ef4a:	2800      	cmp	r0, #0
   3ef4c:	daf0      	bge.n	3ef30 <nrf91_socket_offload_connect+0x28>
	errno = ENOTSUP;
   3ef4e:	f7fe fbee 	bl	3d72e <__errno>
   3ef52:	2386      	movs	r3, #134	; 0x86
   3ef54:	6003      	str	r3, [r0, #0]
	return retval;
   3ef56:	f04f 30ff 	mov.w	r0, #4294967295
   3ef5a:	e7e9      	b.n	3ef30 <nrf91_socket_offload_connect+0x28>

0003ef5c <nrf91_socket_offload_bind>:
{
   3ef5c:	b510      	push	{r4, lr}
   3ef5e:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   3ef60:	8809      	ldrh	r1, [r1, #0]
	int sd = OBJ_TO_SD(obj);
   3ef62:	6804      	ldr	r4, [r0, #0]
	if (addr->sa_family == AF_INET) {
   3ef64:	2901      	cmp	r1, #1
{
   3ef66:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   3ef68:	d10e      	bne.n	3ef88 <nrf91_socket_offload_bind+0x2c>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3ef6a:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   3ef6c:	8858      	ldrh	r0, [r3, #2]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3ef6e:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3ef70:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_port = ptr->sin_port;
   3ef74:	f8ad 000c 	strh.w	r0, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   3ef78:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3ef7a:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   3ef7c:	4620      	mov	r0, r4
   3ef7e:	a901      	add	r1, sp, #4
   3ef80:	f001 fb16 	bl	405b0 <nrf_bind>
}
   3ef84:	b00a      	add	sp, #40	; 0x28
   3ef86:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   3ef88:	2902      	cmp	r1, #2
   3ef8a:	d105      	bne.n	3ef98 <nrf91_socket_offload_bind+0x3c>
		z_to_nrf_ipv6(addr, &ipv6);
   3ef8c:	4618      	mov	r0, r3
   3ef8e:	a901      	add	r1, sp, #4
   3ef90:	f7ff ff4f 	bl	3ee32 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   3ef94:	2224      	movs	r2, #36	; 0x24
   3ef96:	e7f1      	b.n	3ef7c <nrf91_socket_offload_bind+0x20>
	errno = ENOTSUP;
   3ef98:	f7fe fbc9 	bl	3d72e <__errno>
   3ef9c:	2386      	movs	r3, #134	; 0x86
   3ef9e:	6003      	str	r3, [r0, #0]
	return retval;
   3efa0:	f04f 30ff 	mov.w	r0, #4294967295
   3efa4:	e7ee      	b.n	3ef84 <nrf91_socket_offload_bind+0x28>

0003efa6 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   3efa6:	f7f7 bc85 	b.w	368b4 <z_impl_k_mutex_lock>

0003efaa <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   3efaa:	f7f7 bd55 	b.w	36a58 <z_impl_k_mutex_unlock>

0003efae <nrf91_socket_offload_recvfrom>:
{
   3efae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3efb2:	4606      	mov	r6, r0
	if (ctx->lock) {
   3efb4:	6840      	ldr	r0, [r0, #4]
{
   3efb6:	b08f      	sub	sp, #60	; 0x3c
   3efb8:	460c      	mov	r4, r1
   3efba:	e9dd 5918 	ldrd	r5, r9, [sp, #96]	; 0x60
   3efbe:	4617      	mov	r7, r2
   3efc0:	4698      	mov	r8, r3
	if (ctx->lock) {
   3efc2:	b108      	cbz	r0, 3efc8 <nrf91_socket_offload_recvfrom+0x1a>
		k_mutex_unlock(ctx->lock);
   3efc4:	f7ff fff1 	bl	3efaa <k_mutex_unlock.isra.0>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   3efc8:	4640      	mov	r0, r8
   3efca:	f7ff fe9c 	bl	3ed06 <z_to_nrf_flags>
   3efce:	f8d6 a000 	ldr.w	sl, [r6]
   3efd2:	4603      	mov	r3, r0
	if (from == NULL) {
   3efd4:	b99d      	cbnz	r5, 3effe <nrf91_socket_offload_recvfrom+0x50>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   3efd6:	4621      	mov	r1, r4
   3efd8:	463a      	mov	r2, r7
   3efda:	4650      	mov	r0, sl
   3efdc:	e9cd 5500 	strd	r5, r5, [sp]
   3efe0:	f001 fbfe 	bl	407e0 <nrf_recvfrom>
   3efe4:	4604      	mov	r4, r0
	if (ctx->lock) {
   3efe6:	6870      	ldr	r0, [r6, #4]
   3efe8:	b128      	cbz	r0, 3eff6 <nrf91_socket_offload_recvfrom+0x48>
		k_mutex_lock(ctx->lock, K_FOREVER);
   3efea:	f04f 32ff 	mov.w	r2, #4294967295
   3efee:	f04f 33ff 	mov.w	r3, #4294967295
   3eff2:	f7ff ffd8 	bl	3efa6 <k_mutex_lock.constprop.0.isra.0>
}
   3eff6:	4620      	mov	r0, r4
   3eff8:	b00f      	add	sp, #60	; 0x3c
   3effa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		struct nrf_sockaddr_in6 cliaddr_storage = { 0 };
   3effe:	f04f 0b24 	mov.w	fp, #36	; 0x24
   3f002:	f10d 0814 	add.w	r8, sp, #20
   3f006:	465a      	mov	r2, fp
   3f008:	2100      	movs	r1, #0
   3f00a:	9003      	str	r0, [sp, #12]
   3f00c:	4640      	mov	r0, r8
   3f00e:	f002 f9e9 	bl	413e4 <memset>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   3f012:	aa04      	add	r2, sp, #16
   3f014:	4621      	mov	r1, r4
   3f016:	e9cd 8200 	strd	r8, r2, [sp]
   3f01a:	4650      	mov	r0, sl
   3f01c:	463a      	mov	r2, r7
   3f01e:	9b03      	ldr	r3, [sp, #12]
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   3f020:	f8cd b010 	str.w	fp, [sp, #16]
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   3f024:	f001 fbdc 	bl	407e0 <nrf_recvfrom>
		if (retval < 0) {
   3f028:	1e04      	subs	r4, r0, #0
   3f02a:	dbdc      	blt.n	3efe6 <nrf91_socket_offload_recvfrom+0x38>
		if (cliaddr->sa_family == NRF_AF_INET) {
   3f02c:	9b06      	ldr	r3, [sp, #24]
   3f02e:	2b01      	cmp	r3, #1
   3f030:	d109      	bne.n	3f046 <nrf91_socket_offload_recvfrom+0x98>
	ptr->sin_family = AF_INET;
   3f032:	802b      	strh	r3, [r5, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   3f034:	9b08      	ldr	r3, [sp, #32]
	ptr->sin_port = nrf_in->sin_port;
   3f036:	f8bd 201c 	ldrh.w	r2, [sp, #28]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   3f03a:	606b      	str	r3, [r5, #4]
			*fromlen = sizeof(struct sockaddr_in);
   3f03c:	2308      	movs	r3, #8
	ptr->sin_port = nrf_in->sin_port;
   3f03e:	806a      	strh	r2, [r5, #2]
			*fromlen = sizeof(struct sockaddr_in6);
   3f040:	f8c9 3000 	str.w	r3, [r9]
   3f044:	e7cf      	b.n	3efe6 <nrf91_socket_offload_recvfrom+0x38>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   3f046:	2b02      	cmp	r3, #2
   3f048:	d1cd      	bne.n	3efe6 <nrf91_socket_offload_recvfrom+0x38>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   3f04a:	4641      	mov	r1, r8
   3f04c:	4628      	mov	r0, r5
   3f04e:	f7ff fedc 	bl	3ee0a <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   3f052:	2318      	movs	r3, #24
   3f054:	e7f4      	b.n	3f040 <nrf91_socket_offload_recvfrom+0x92>

0003f056 <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   3f056:	2300      	movs	r3, #0
{
   3f058:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   3f05a:	e9cd 3300 	strd	r3, r3, [sp]
   3f05e:	f7ff ffa6 	bl	3efae <nrf91_socket_offload_recvfrom>
}
   3f062:	b003      	add	sp, #12
   3f064:	f85d fb04 	ldr.w	pc, [sp], #4

0003f068 <nrf91_socket_offload_close>:
{
   3f068:	b538      	push	{r3, r4, r5, lr}
   3f06a:	4605      	mov	r5, r0
	retval = nrf_close(ctx->nrf_fd);
   3f06c:	6800      	ldr	r0, [r0, #0]
   3f06e:	f001 fa6e 	bl	4054e <nrf_close>
	if (retval == 0) {
   3f072:	4604      	mov	r4, r0
   3f074:	b910      	cbnz	r0, 3f07c <nrf91_socket_offload_close+0x14>
		release_ctx(ctx);
   3f076:	4628      	mov	r0, r5
   3f078:	f7e7 f83c 	bl	260f4 <release_ctx>
}
   3f07c:	4620      	mov	r0, r4
   3f07e:	bd38      	pop	{r3, r4, r5, pc}

0003f080 <nrf91_socket_offload_setsockopt>:
{
   3f080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   3f084:	2901      	cmp	r1, #1
{
   3f086:	b086      	sub	sp, #24
   3f088:	460c      	mov	r4, r1
   3f08a:	4615      	mov	r5, r2
   3f08c:	461e      	mov	r6, r3
   3f08e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int sd = OBJ_TO_SD(obj);
   3f090:	f8d0 8000 	ldr.w	r8, [r0]
	switch (z_in_level) {
   3f094:	d002      	beq.n	3f09c <nrf91_socket_offload_setsockopt+0x1c>
   3f096:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   3f09a:	d122      	bne.n	3f0e2 <nrf91_socket_offload_setsockopt+0x62>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   3f09c:	4629      	mov	r1, r5
   3f09e:	4620      	mov	r0, r4
   3f0a0:	aa03      	add	r2, sp, #12
   3f0a2:	f7e6 fd0b 	bl	25abc <z_to_nrf_optname>
   3f0a6:	2800      	cmp	r0, #0
   3f0a8:	db1b      	blt.n	3f0e2 <nrf91_socket_offload_setsockopt+0x62>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   3f0aa:	2c01      	cmp	r4, #1
   3f0ac:	d112      	bne.n	3f0d4 <nrf91_socket_offload_setsockopt+0x54>
   3f0ae:	3d14      	subs	r5, #20
   3f0b0:	2d01      	cmp	r5, #1
   3f0b2:	d805      	bhi.n	3f0c0 <nrf91_socket_offload_setsockopt+0x40>
		nrf_optlen = sizeof(struct nrf_timeval);
   3f0b4:	2708      	movs	r7, #8
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   3f0b6:	6833      	ldr	r3, [r6, #0]
   3f0b8:	9304      	str	r3, [sp, #16]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   3f0ba:	68b3      	ldr	r3, [r6, #8]
		nrf_optval = &nrf_timeo;
   3f0bc:	ae04      	add	r6, sp, #16
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   3f0be:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   3f0c0:	4633      	mov	r3, r6
   3f0c2:	4621      	mov	r1, r4
   3f0c4:	4640      	mov	r0, r8
   3f0c6:	9a03      	ldr	r2, [sp, #12]
   3f0c8:	9700      	str	r7, [sp, #0]
   3f0ca:	f7f5 fd25 	bl	34b18 <nrf_setsockopt>
}
   3f0ce:	b006      	add	sp, #24
   3f0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   3f0d4:	f5b4 7f8d 	cmp.w	r4, #282	; 0x11a
   3f0d8:	d1f2      	bne.n	3f0c0 <nrf91_socket_offload_setsockopt+0x40>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   3f0da:	2d0a      	cmp	r5, #10
   3f0dc:	bf08      	it	eq
   3f0de:	2704      	moveq	r7, #4
   3f0e0:	e7ee      	b.n	3f0c0 <nrf91_socket_offload_setsockopt+0x40>
	errno = ENOPROTOOPT;
   3f0e2:	f7fe fb24 	bl	3d72e <__errno>
   3f0e6:	236d      	movs	r3, #109	; 0x6d
   3f0e8:	6003      	str	r3, [r0, #0]
	return retval;
   3f0ea:	f04f 30ff 	mov.w	r0, #4294967295
   3f0ee:	e7ee      	b.n	3f0ce <nrf91_socket_offload_setsockopt+0x4e>

0003f0f0 <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable != NULL) {
   3f0f0:	6883      	ldr	r3, [r0, #8]
   3f0f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   3f0f4:	b103      	cbz	r3, 3f0f8 <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   3f0f6:	4718      	bx	r3
}
   3f0f8:	4770      	bx	lr

0003f0fa <response_handler>:
	write_uart_string(response);
   3f0fa:	f7e7 b99b 	b.w	26434 <write_uart_string>

0003f0fe <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   3f0fe:	280d      	cmp	r0, #13
   3f100:	d004      	beq.n	3f10c <is_lfcr+0xe>
   3f102:	f1a0 030a 	sub.w	r3, r0, #10
   3f106:	4258      	negs	r0, r3
   3f108:	4158      	adcs	r0, r3
   3f10a:	4770      	bx	lr
		return true;
   3f10c:	2001      	movs	r0, #1
}
   3f10e:	4770      	bx	lr

0003f110 <skip_command_prefix>:
{
   3f110:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   3f112:	6801      	ldr	r1, [r0, #0]
{
   3f114:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   3f116:	1c8b      	adds	r3, r1, #2
   3f118:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   3f11a:	788c      	ldrb	r4, [r1, #2]
   3f11c:	4620      	mov	r0, r4
   3f11e:	f7ff ffee 	bl	3f0fe <is_lfcr>
   3f122:	b910      	cbnz	r0, 3f12a <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   3f124:	b10c      	cbz	r4, 3f12a <skip_command_prefix+0x1a>
	(*cmd)++;
   3f126:	3103      	adds	r1, #3
   3f128:	6011      	str	r1, [r2, #0]
}
   3f12a:	bd10      	pop	{r4, pc}

0003f12c <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   3f12c:	6813      	ldr	r3, [r2, #0]
   3f12e:	f7e7 bced 	b.w	26b0c <at_parser_max_params_from_str>

0003f132 <at_params_list_init>:
{
   3f132:	b538      	push	{r3, r4, r5, lr}
   3f134:	460d      	mov	r5, r1
	if (list == NULL) {
   3f136:	4604      	mov	r4, r0
   3f138:	b140      	cbz	r0, 3f14c <at_params_list_init+0x1a>
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   3f13a:	2110      	movs	r1, #16
   3f13c:	4628      	mov	r0, r5
   3f13e:	f002 f8ab 	bl	41298 <k_calloc>
   3f142:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   3f144:	b128      	cbz	r0, 3f152 <at_params_list_init+0x20>
	return 0;
   3f146:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   3f148:	6025      	str	r5, [r4, #0]
}
   3f14a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   3f14c:	f06f 0015 	mvn.w	r0, #21
   3f150:	e7fb      	b.n	3f14a <at_params_list_init+0x18>
		return -ENOMEM;
   3f152:	f06f 000b 	mvn.w	r0, #11
   3f156:	e7f8      	b.n	3f14a <at_params_list_init+0x18>

0003f158 <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   3f158:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   3f15a:	4604      	mov	r4, r0
   3f15c:	b148      	cbz	r0, 3f172 <at_params_list_free+0x1a>
   3f15e:	6843      	ldr	r3, [r0, #4]
   3f160:	b13b      	cbz	r3, 3f172 <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   3f162:	2500      	movs	r5, #0
	at_params_list_clear(list);
   3f164:	f7e7 fdd0 	bl	26d08 <at_params_list_clear>
	k_free(list->params);
   3f168:	6860      	ldr	r0, [r4, #4]
	list->param_count = 0;
   3f16a:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   3f16c:	f002 f889 	bl	41282 <k_free>
	list->params = NULL;
   3f170:	6065      	str	r5, [r4, #4]
}
   3f172:	bd38      	pop	{r3, r4, r5, pc}

0003f174 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   3f174:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   3f176:	b910      	cbnz	r0, 3f17e <at_params_empty_put+0xa>
		return -EINVAL;
   3f178:	f06f 0015 	mvn.w	r0, #21

	param->type = AT_PARAM_TYPE_EMPTY;
	param->value.int_val = 0;

	return 0;
}
   3f17c:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL) {
   3f17e:	6843      	ldr	r3, [r0, #4]
   3f180:	2b00      	cmp	r3, #0
   3f182:	d0f9      	beq.n	3f178 <at_params_empty_put+0x4>
	struct at_param *param = at_params_get(list, index);
   3f184:	f7e7 fd6e 	bl	26c64 <at_params_get>
	if (param == NULL) {
   3f188:	4604      	mov	r4, r0
   3f18a:	2800      	cmp	r0, #0
   3f18c:	d0f4      	beq.n	3f178 <at_params_empty_put+0x4>
	at_param_clear(param);
   3f18e:	f7e7 fd9f 	bl	26cd0 <at_param_clear>
	param->type = AT_PARAM_TYPE_EMPTY;
   3f192:	2304      	movs	r3, #4
	param->value.int_val = 0;
   3f194:	2200      	movs	r2, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   3f196:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   3f198:	2300      	movs	r3, #0
	return 0;
   3f19a:	2000      	movs	r0, #0
	param->value.int_val = 0;
   3f19c:	e9c4 2302 	strd	r2, r3, [r4, #8]
	return 0;
   3f1a0:	e7ec      	b.n	3f17c <at_params_empty_put+0x8>

0003f1a2 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index, int64_t value)
{
   3f1a2:	b570      	push	{r4, r5, r6, lr}
   3f1a4:	4616      	mov	r6, r2
   3f1a6:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL) {
   3f1a8:	b910      	cbnz	r0, 3f1b0 <at_params_int_put+0xe>
		return -EINVAL;
   3f1aa:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_INT;
	param->value.int_val = value;
	return 0;
}
   3f1ae:	bd70      	pop	{r4, r5, r6, pc}
	if (list == NULL || list->params == NULL) {
   3f1b0:	6843      	ldr	r3, [r0, #4]
   3f1b2:	2b00      	cmp	r3, #0
   3f1b4:	d0f9      	beq.n	3f1aa <at_params_int_put+0x8>
	struct at_param *param = at_params_get(list, index);
   3f1b6:	f7e7 fd55 	bl	26c64 <at_params_get>
	if (param == NULL) {
   3f1ba:	4604      	mov	r4, r0
   3f1bc:	2800      	cmp	r0, #0
   3f1be:	d0f4      	beq.n	3f1aa <at_params_int_put+0x8>
	at_param_clear(param);
   3f1c0:	f7e7 fd86 	bl	26cd0 <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_INT;
   3f1c4:	2301      	movs	r3, #1
	return 0;
   3f1c6:	2000      	movs	r0, #0
	param->value.int_val = value;
   3f1c8:	e9c4 6502 	strd	r6, r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_INT;
   3f1cc:	7023      	strb	r3, [r4, #0]
	return 0;
   3f1ce:	e7ee      	b.n	3f1ae <at_params_int_put+0xc>

0003f1d0 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   3f1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3f1d2:	4617      	mov	r7, r2
   3f1d4:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   3f1d6:	b910      	cbnz	r0, 3f1de <at_params_string_put+0xe>
		return -EINVAL;
   3f1d8:	f06f 0015 	mvn.w	r0, #21
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
	param->value.str_val = param_value;

	return 0;
}
   3f1dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || str == NULL) {
   3f1de:	6843      	ldr	r3, [r0, #4]
   3f1e0:	2b00      	cmp	r3, #0
   3f1e2:	d0f9      	beq.n	3f1d8 <at_params_string_put+0x8>
   3f1e4:	2a00      	cmp	r2, #0
   3f1e6:	d0f7      	beq.n	3f1d8 <at_params_string_put+0x8>
	struct at_param *param = at_params_get(list, index);
   3f1e8:	f7e7 fd3c 	bl	26c64 <at_params_get>
	if (param == NULL) {
   3f1ec:	4604      	mov	r4, r0
   3f1ee:	2800      	cmp	r0, #0
   3f1f0:	d0f2      	beq.n	3f1d8 <at_params_string_put+0x8>
	char *param_value = (char *)k_malloc(str_len + 1);
   3f1f2:	1c68      	adds	r0, r5, #1
   3f1f4:	f002 f84c 	bl	41290 <k_malloc>
	if (param_value == NULL) {
   3f1f8:	4606      	mov	r6, r0
   3f1fa:	b160      	cbz	r0, 3f216 <at_params_string_put+0x46>
   3f1fc:	462a      	mov	r2, r5
   3f1fe:	4639      	mov	r1, r7
   3f200:	f002 f8d0 	bl	413a4 <memcpy>
	at_param_clear(param);
   3f204:	4620      	mov	r0, r4
   3f206:	f7e7 fd63 	bl	26cd0 <at_param_clear>
	param->type = AT_PARAM_TYPE_STRING;
   3f20a:	2302      	movs	r3, #2
	return 0;
   3f20c:	2000      	movs	r0, #0
	param->size = str_len;
   3f20e:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   3f210:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   3f212:	60a6      	str	r6, [r4, #8]
	return 0;
   3f214:	e7e2      	b.n	3f1dc <at_params_string_put+0xc>
		return -ENOMEM;
   3f216:	f06f 000b 	mvn.w	r0, #11
   3f21a:	e7df      	b.n	3f1dc <at_params_string_put+0xc>

0003f21c <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
   3f21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3f21e:	4617      	mov	r7, r2
   3f220:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   3f222:	b910      	cbnz	r0, 3f22a <at_params_array_put+0xe>
		return -EINVAL;
   3f224:	f06f 0015 	mvn.w	r0, #21
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
	param->value.array_val = param_value;

	return 0;
}
   3f228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || array == NULL) {
   3f22a:	6843      	ldr	r3, [r0, #4]
   3f22c:	2b00      	cmp	r3, #0
   3f22e:	d0f9      	beq.n	3f224 <at_params_array_put+0x8>
   3f230:	2a00      	cmp	r2, #0
   3f232:	d0f7      	beq.n	3f224 <at_params_array_put+0x8>
	struct at_param *param = at_params_get(list, index);
   3f234:	f7e7 fd16 	bl	26c64 <at_params_get>
	if (param == NULL) {
   3f238:	4604      	mov	r4, r0
   3f23a:	2800      	cmp	r0, #0
   3f23c:	d0f2      	beq.n	3f224 <at_params_array_put+0x8>
	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
   3f23e:	4628      	mov	r0, r5
   3f240:	f002 f826 	bl	41290 <k_malloc>
	if (param_value == NULL) {
   3f244:	4606      	mov	r6, r0
   3f246:	b160      	cbz	r0, 3f262 <at_params_array_put+0x46>
   3f248:	462a      	mov	r2, r5
   3f24a:	4639      	mov	r1, r7
   3f24c:	f002 f8aa 	bl	413a4 <memcpy>
	at_param_clear(param);
   3f250:	4620      	mov	r0, r4
   3f252:	f7e7 fd3d 	bl	26cd0 <at_param_clear>
	param->type = AT_PARAM_TYPE_ARRAY;
   3f256:	2303      	movs	r3, #3
	return 0;
   3f258:	2000      	movs	r0, #0
	param->size = array_len;
   3f25a:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   3f25c:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   3f25e:	60a6      	str	r6, [r4, #8]
	return 0;
   3f260:	e7e2      	b.n	3f228 <at_params_array_put+0xc>
		return -ENOMEM;
   3f262:	f06f 000b 	mvn.w	r0, #11
   3f266:	e7df      	b.n	3f228 <at_params_array_put+0xc>

0003f268 <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			int16_t *value)
{
   3f268:	b510      	push	{r4, lr}
   3f26a:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   3f26c:	b910      	cbnz	r0, 3f274 <at_params_short_get+0xc>
		return -EINVAL;
   3f26e:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (int16_t)param->value.int_val;
	return 0;
}
   3f272:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   3f274:	6843      	ldr	r3, [r0, #4]
   3f276:	2b00      	cmp	r3, #0
   3f278:	d0f9      	beq.n	3f26e <at_params_short_get+0x6>
   3f27a:	2a00      	cmp	r2, #0
   3f27c:	d0f7      	beq.n	3f26e <at_params_short_get+0x6>
	struct at_param *param = at_params_get(list, index);
   3f27e:	f7e7 fcf1 	bl	26c64 <at_params_get>
	if (param == NULL) {
   3f282:	2800      	cmp	r0, #0
   3f284:	d0f3      	beq.n	3f26e <at_params_short_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   3f286:	7803      	ldrb	r3, [r0, #0]
   3f288:	2b01      	cmp	r3, #1
   3f28a:	d1f0      	bne.n	3f26e <at_params_short_get+0x6>
	if ((param->value.int_val > INT16_MAX) || (param->value.int_val < INT16_MIN)) {
   3f28c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
   3f290:	f513 4100 	adds.w	r1, r3, #32768	; 0x8000
   3f294:	f142 0200 	adc.w	r2, r2, #0
   3f298:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   3f29c:	f172 0200 	sbcs.w	r2, r2, #0
   3f2a0:	d2e5      	bcs.n	3f26e <at_params_short_get+0x6>
	return 0;
   3f2a2:	2000      	movs	r0, #0
	*value = (int16_t)param->value.int_val;
   3f2a4:	8023      	strh	r3, [r4, #0]
	return 0;
   3f2a6:	e7e4      	b.n	3f272 <at_params_short_get+0xa>

0003f2a8 <at_params_unsigned_short_get>:

int at_params_unsigned_short_get(const struct at_param_list *list, size_t index,
			uint16_t *value)
{
   3f2a8:	b510      	push	{r4, lr}
   3f2aa:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   3f2ac:	b910      	cbnz	r0, 3f2b4 <at_params_unsigned_short_get+0xc>
		return -EINVAL;
   3f2ae:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (uint16_t)param->value.int_val;
	return 0;
}
   3f2b2:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   3f2b4:	6843      	ldr	r3, [r0, #4]
   3f2b6:	2b00      	cmp	r3, #0
   3f2b8:	d0f9      	beq.n	3f2ae <at_params_unsigned_short_get+0x6>
   3f2ba:	2a00      	cmp	r2, #0
   3f2bc:	d0f7      	beq.n	3f2ae <at_params_unsigned_short_get+0x6>
	struct at_param *param = at_params_get(list, index);
   3f2be:	f7e7 fcd1 	bl	26c64 <at_params_get>
	if (param == NULL) {
   3f2c2:	2800      	cmp	r0, #0
   3f2c4:	d0f3      	beq.n	3f2ae <at_params_unsigned_short_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   3f2c6:	7803      	ldrb	r3, [r0, #0]
   3f2c8:	2b01      	cmp	r3, #1
   3f2ca:	d1f0      	bne.n	3f2ae <at_params_unsigned_short_get+0x6>
	if ((param->value.int_val > UINT16_MAX) || (param->value.int_val < 0)) {
   3f2cc:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
   3f2d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   3f2d4:	f172 0200 	sbcs.w	r2, r2, #0
   3f2d8:	d2e9      	bcs.n	3f2ae <at_params_unsigned_short_get+0x6>
	return 0;
   3f2da:	2000      	movs	r0, #0
	*value = (uint16_t)param->value.int_val;
   3f2dc:	8023      	strh	r3, [r4, #0]
	return 0;
   3f2de:	e7e8      	b.n	3f2b2 <at_params_unsigned_short_get+0xa>

0003f2e0 <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      int32_t *value)
{
   3f2e0:	b510      	push	{r4, lr}
   3f2e2:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   3f2e4:	b910      	cbnz	r0, 3f2ec <at_params_int_get+0xc>
		return -EINVAL;
   3f2e6:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (int32_t)param->value.int_val;
	return 0;
}
   3f2ea:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   3f2ec:	6843      	ldr	r3, [r0, #4]
   3f2ee:	2b00      	cmp	r3, #0
   3f2f0:	d0f9      	beq.n	3f2e6 <at_params_int_get+0x6>
   3f2f2:	2a00      	cmp	r2, #0
   3f2f4:	d0f7      	beq.n	3f2e6 <at_params_int_get+0x6>
	struct at_param *param = at_params_get(list, index);
   3f2f6:	f7e7 fcb5 	bl	26c64 <at_params_get>
	if (param == NULL) {
   3f2fa:	2800      	cmp	r0, #0
   3f2fc:	d0f3      	beq.n	3f2e6 <at_params_int_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   3f2fe:	7803      	ldrb	r3, [r0, #0]
   3f300:	2b01      	cmp	r3, #1
   3f302:	d1f0      	bne.n	3f2e6 <at_params_int_get+0x6>
	if ((param->value.int_val > INT32_MAX) || (param->value.int_val < INT32_MIN)) {
   3f304:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
   3f308:	f113 4100 	adds.w	r1, r3, #2147483648	; 0x80000000
   3f30c:	f142 0200 	adc.w	r2, r2, #0
   3f310:	2a00      	cmp	r2, #0
   3f312:	d1e8      	bne.n	3f2e6 <at_params_int_get+0x6>
	return 0;
   3f314:	2000      	movs	r0, #0
	*value = (int32_t)param->value.int_val;
   3f316:	6023      	str	r3, [r4, #0]
	return 0;
   3f318:	e7e7      	b.n	3f2ea <at_params_int_get+0xa>

0003f31a <at_params_int64_get>:
	*value = (uint32_t)param->value.int_val;
	return 0;
}

int at_params_int64_get(const struct at_param_list *list, size_t index, int64_t *value)
{
   3f31a:	b510      	push	{r4, lr}
   3f31c:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   3f31e:	b910      	cbnz	r0, 3f326 <at_params_int64_get+0xc>
		return -EINVAL;
   3f320:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = param->value.int_val;
	return 0;
}
   3f324:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   3f326:	6843      	ldr	r3, [r0, #4]
   3f328:	2b00      	cmp	r3, #0
   3f32a:	d0f9      	beq.n	3f320 <at_params_int64_get+0x6>
   3f32c:	2a00      	cmp	r2, #0
   3f32e:	d0f7      	beq.n	3f320 <at_params_int64_get+0x6>
	struct at_param *param = at_params_get(list, index);
   3f330:	f7e7 fc98 	bl	26c64 <at_params_get>
	if (param == NULL) {
   3f334:	2800      	cmp	r0, #0
   3f336:	d0f3      	beq.n	3f320 <at_params_int64_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   3f338:	7803      	ldrb	r3, [r0, #0]
   3f33a:	2b01      	cmp	r3, #1
   3f33c:	d1f0      	bne.n	3f320 <at_params_int64_get+0x6>
	*value = param->value.int_val;
   3f33e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
	return 0;
   3f342:	2000      	movs	r0, #0
	*value = param->value.int_val;
   3f344:	e9c4 2300 	strd	r2, r3, [r4]
	return 0;
   3f348:	e7ec      	b.n	3f324 <at_params_int64_get+0xa>

0003f34a <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   3f34a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3f34c:	4617      	mov	r7, r2
   3f34e:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   3f350:	b910      	cbnz	r0, 3f358 <at_params_string_get+0xe>
	    value == NULL || len == NULL) {
		return -EINVAL;
   3f352:	f06f 0015 	mvn.w	r0, #21

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
}
   3f356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || value == NULL ||
   3f358:	6843      	ldr	r3, [r0, #4]
   3f35a:	2b00      	cmp	r3, #0
   3f35c:	d0f9      	beq.n	3f352 <at_params_string_get+0x8>
   3f35e:	2a00      	cmp	r2, #0
   3f360:	d0f7      	beq.n	3f352 <at_params_string_get+0x8>
	    value == NULL || len == NULL) {
   3f362:	2c00      	cmp	r4, #0
   3f364:	d0f5      	beq.n	3f352 <at_params_string_get+0x8>
	struct at_param *param = at_params_get(list, index);
   3f366:	f7e7 fc7d 	bl	26c64 <at_params_get>
	if (param == NULL) {
   3f36a:	4606      	mov	r6, r0
   3f36c:	2800      	cmp	r0, #0
   3f36e:	d0f0      	beq.n	3f352 <at_params_string_get+0x8>
	if (param->type != AT_PARAM_TYPE_STRING) {
   3f370:	7803      	ldrb	r3, [r0, #0]
   3f372:	2b02      	cmp	r3, #2
   3f374:	d1ed      	bne.n	3f352 <at_params_string_get+0x8>
	size_t param_len = at_param_size(param);
   3f376:	f7e7 fc8f 	bl	26c98 <at_param_size>
	if (*len < param_len) {
   3f37a:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   3f37c:	4605      	mov	r5, r0
	if (*len < param_len) {
   3f37e:	4283      	cmp	r3, r0
   3f380:	d307      	bcc.n	3f392 <at_params_string_get+0x48>
   3f382:	4602      	mov	r2, r0
   3f384:	68b1      	ldr	r1, [r6, #8]
   3f386:	4638      	mov	r0, r7
   3f388:	f002 f80c 	bl	413a4 <memcpy>
	return 0;
   3f38c:	2000      	movs	r0, #0
	*len = param_len;
   3f38e:	6025      	str	r5, [r4, #0]
	return 0;
   3f390:	e7e1      	b.n	3f356 <at_params_string_get+0xc>
		return -ENOMEM;
   3f392:	f06f 000b 	mvn.w	r0, #11
   3f396:	e7de      	b.n	3f356 <at_params_string_get+0xc>

0003f398 <at_params_valid_count_get>:

	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
   3f398:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   3f39a:	4605      	mov	r5, r0
   3f39c:	b180      	cbz	r0, 3f3c0 <at_params_valid_count_get+0x28>
   3f39e:	6843      	ldr	r3, [r0, #4]
   3f3a0:	b173      	cbz	r3, 3f3c0 <at_params_valid_count_get+0x28>
		return -EINVAL;
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);
   3f3a2:	2100      	movs	r1, #0
   3f3a4:	f7e7 fc5e 	bl	26c64 <at_params_get>
	size_t valid_i = 0;
   3f3a8:	2400      	movs	r4, #0

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   3f3aa:	b108      	cbz	r0, 3f3b0 <at_params_valid_count_get+0x18>
   3f3ac:	7803      	ldrb	r3, [r0, #0]
   3f3ae:	b90b      	cbnz	r3, 3f3b4 <at_params_valid_count_get+0x1c>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
   3f3b0:	4620      	mov	r0, r4
   3f3b2:	bd38      	pop	{r3, r4, r5, pc}
		valid_i += 1;
   3f3b4:	3401      	adds	r4, #1
		param = at_params_get(list, valid_i);
   3f3b6:	4621      	mov	r1, r4
   3f3b8:	4628      	mov	r0, r5
   3f3ba:	f7e7 fc53 	bl	26c64 <at_params_get>
   3f3be:	e7f4      	b.n	3f3aa <at_params_valid_count_get+0x12>
		return -EINVAL;
   3f3c0:	f06f 0415 	mvn.w	r4, #21
   3f3c4:	e7f4      	b.n	3f3b0 <at_params_valid_count_get+0x18>

0003f3c6 <lte_lc_init_and_connect_async>:
{
   3f3c6:	b510      	push	{r4, lr}
   3f3c8:	4604      	mov	r4, r0
	err = init_and_config();
   3f3ca:	f7e8 f883 	bl	274d4 <init_and_config>
	if (err) {
   3f3ce:	b920      	cbnz	r0, 3f3da <lte_lc_init_and_connect_async+0x14>
	return lte_lc_connect_async(handler);
   3f3d0:	4620      	mov	r0, r4
}
   3f3d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return lte_lc_connect_async(handler);
   3f3d6:	f7e8 b9d7 	b.w	27788 <lte_lc_connect_async>
}
   3f3da:	f06f 000d 	mvn.w	r0, #13
   3f3de:	bd10      	pop	{r4, pc}

0003f3e0 <string_to_int>:
{
   3f3e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3f3e2:	460c      	mov	r4, r1
   3f3e4:	4605      	mov	r5, r0
   3f3e6:	4616      	mov	r6, r2
	errno = 0;
   3f3e8:	f7fe f9a1 	bl	3d72e <__errno>
   3f3ec:	2300      	movs	r3, #0
	temp = strtol(str_buf, &end_ptr, base);
   3f3ee:	4622      	mov	r2, r4
	errno = 0;
   3f3f0:	6003      	str	r3, [r0, #0]
	temp = strtol(str_buf, &end_ptr, base);
   3f3f2:	a901      	add	r1, sp, #4
   3f3f4:	4628      	mov	r0, r5
   3f3f6:	f7fb fa1b 	bl	3a830 <strtol>
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   3f3fa:	9b01      	ldr	r3, [sp, #4]
	temp = strtol(str_buf, &end_ptr, base);
   3f3fc:	4604      	mov	r4, r0
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   3f3fe:	42ab      	cmp	r3, r5
   3f400:	d103      	bne.n	3f40a <string_to_int+0x2a>
		return -ENODATA;
   3f402:	f06f 003c 	mvn.w	r0, #60	; 0x3c
}
   3f406:	b002      	add	sp, #8
   3f408:	bd70      	pop	{r4, r5, r6, pc}
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   3f40a:	781b      	ldrb	r3, [r3, #0]
   3f40c:	2b00      	cmp	r3, #0
   3f40e:	d1f8      	bne.n	3f402 <string_to_int+0x22>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   3f410:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   3f414:	3b01      	subs	r3, #1
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   3f416:	3303      	adds	r3, #3
   3f418:	d802      	bhi.n	3f420 <string_to_int+0x40>
	return 0;
   3f41a:	2000      	movs	r0, #0
	*output = temp;
   3f41c:	6034      	str	r4, [r6, #0]
	return 0;
   3f41e:	e7f2      	b.n	3f406 <string_to_int+0x26>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   3f420:	f7fe f985 	bl	3d72e <__errno>
   3f424:	6803      	ldr	r3, [r0, #0]
   3f426:	2b22      	cmp	r3, #34	; 0x22
   3f428:	d1f7      	bne.n	3f41a <string_to_int+0x3a>
   3f42a:	e7ea      	b.n	3f402 <string_to_int+0x22>

0003f42c <string_param_to_int.constprop.0>:
static int string_param_to_int(struct at_param_list *resp_list,
   3f42c:	b530      	push	{r4, r5, lr}
	size_t len = sizeof(str_buf);
   3f42e:	2510      	movs	r5, #16
static int string_param_to_int(struct at_param_list *resp_list,
   3f430:	b087      	sub	sp, #28
   3f432:	4614      	mov	r4, r2
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   3f434:	ab01      	add	r3, sp, #4
   3f436:	aa02      	add	r2, sp, #8
	size_t len = sizeof(str_buf);
   3f438:	9501      	str	r5, [sp, #4]
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   3f43a:	f7ff ff86 	bl	3f34a <at_params_string_get>
	if (err) {
   3f43e:	b968      	cbnz	r0, 3f45c <string_param_to_int.constprop.0+0x30>
	str_buf[len] = '\0';
   3f440:	9b01      	ldr	r3, [sp, #4]
   3f442:	aa06      	add	r2, sp, #24
   3f444:	4413      	add	r3, r2
   3f446:	f803 0c10 	strb.w	r0, [r3, #-16]
	if (string_to_int(str_buf, base, output)) {
   3f44a:	4622      	mov	r2, r4
   3f44c:	4629      	mov	r1, r5
   3f44e:	a802      	add	r0, sp, #8
   3f450:	f7ff ffc6 	bl	3f3e0 <string_to_int>
		return -ENODATA;
   3f454:	2800      	cmp	r0, #0
   3f456:	bf18      	it	ne
   3f458:	f06f 003c 	mvnne.w	r0, #60	; 0x3c
}
   3f45c:	b007      	add	sp, #28
   3f45e:	bd30      	pop	{r4, r5, pc}

0003f460 <on_modem_init>:
	if (err) {
		LOG_ERR("Failed to unlock PLMN, err %d", err);
		return;
	}
#endif
}
   3f460:	4770      	bx	lr

0003f462 <on_modem_shutdown>:

static void on_modem_shutdown(void *ctx)
{
	(void)lte_lc_deinit();
   3f462:	f7e8 b9a7 	b.w	277b4 <lte_lc_deinit>

0003f466 <json_add_str>:
{
   3f466:	b513      	push	{r0, r1, r4, lr}
	if (parent == NULL || str == NULL || item == NULL) {
   3f468:	4604      	mov	r4, r0
{
   3f46a:	9101      	str	r1, [sp, #4]
	if (parent == NULL || str == NULL || item == NULL) {
   3f46c:	b160      	cbz	r0, 3f488 <json_add_str+0x22>
   3f46e:	b15a      	cbz	r2, 3f488 <json_add_str+0x22>
	json_str = cJSON_CreateString(item);
   3f470:	4610      	mov	r0, r2
   3f472:	f7f2 fe01 	bl	32078 <cJSON_CreateString>
	if (json_str == NULL) {
   3f476:	4602      	mov	r2, r0
   3f478:	b148      	cbz	r0, 3f48e <json_add_str+0x28>
	cJSON_AddItemToObject(parent, str, item);
   3f47a:	4620      	mov	r0, r4
   3f47c:	9901      	ldr	r1, [sp, #4]
   3f47e:	f000 fb55 	bl	3fb2c <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   3f482:	2000      	movs	r0, #0
}
   3f484:	b002      	add	sp, #8
   3f486:	bd10      	pop	{r4, pc}
		return -EINVAL;
   3f488:	f06f 0015 	mvn.w	r0, #21
   3f48c:	e7fa      	b.n	3f484 <json_add_str+0x1e>
		return -ENOMEM;
   3f48e:	f06f 000b 	mvn.w	r0, #11
   3f492:	e7f7      	b.n	3f484 <json_add_str+0x1e>

0003f494 <json_add_data>:
{
   3f494:	b570      	push	{r4, r5, r6, lr}
   3f496:	4604      	mov	r4, r0
	if (param == NULL || json_obj == NULL) {
   3f498:	460e      	mov	r6, r1
{
   3f49a:	b09c      	sub	sp, #112	; 0x70
	if (param == NULL || json_obj == NULL) {
   3f49c:	b921      	cbnz	r1, 3f4a8 <json_add_data+0x14>
		return -EINVAL;
   3f49e:	f06f 0415 	mvn.w	r4, #21
}
   3f4a2:	4620      	mov	r0, r4
   3f4a4:	b01c      	add	sp, #112	; 0x70
   3f4a6:	bd70      	pop	{r4, r5, r6, pc}
	memset(data_name, 0, MODEM_INFO_MAX_RESPONSE_SIZE);
   3f4a8:	2264      	movs	r2, #100	; 0x64
   3f4aa:	2100      	movs	r1, #0
   3f4ac:	a803      	add	r0, sp, #12
   3f4ae:	f001 ff99 	bl	413e4 <memset>
	ret = modem_info_name_get(param->type,
   3f4b2:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
   3f4b6:	a903      	add	r1, sp, #12
   3f4b8:	f7e8 fe82 	bl	281c0 <modem_info_name_get>
	if (ret < 0) {
   3f4bc:	1e05      	subs	r5, r0, #0
   3f4be:	dbee      	blt.n	3f49e <json_add_data+0xa>
	data_type = modem_info_type_get(param->type);
   3f4c0:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
   3f4c4:	f7e8 fe72 	bl	281ac <modem_info_type_get>
	if (data_type == AT_PARAM_TYPE_STRING &&
   3f4c8:	2802      	cmp	r0, #2
   3f4ca:	d114      	bne.n	3f4f6 <json_add_data+0x62>
   3f4cc:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
   3f4d0:	2b03      	cmp	r3, #3
   3f4d2:	d010      	beq.n	3f4f6 <json_add_data+0x62>
		total_len += strlen(param->value_string);
   3f4d4:	1ca2      	adds	r2, r4, #2
   3f4d6:	4610      	mov	r0, r2
   3f4d8:	9201      	str	r2, [sp, #4]
   3f4da:	f7dd feb2 	bl	1d242 <strlen>
		ret += json_add_str(json_obj, data_name, param->value_string);
   3f4de:	9a01      	ldr	r2, [sp, #4]
		total_len += strlen(param->value_string);
   3f4e0:	4604      	mov	r4, r0
		ret += json_add_str(json_obj, data_name, param->value_string);
   3f4e2:	a903      	add	r1, sp, #12
   3f4e4:	4630      	mov	r0, r6
   3f4e6:	f7ff ffbe 	bl	3f466 <json_add_str>
   3f4ea:	4428      	add	r0, r5
	if (ret < 0) {
   3f4ec:	ea34 0420 	bics.w	r4, r4, r0, asr #32
   3f4f0:	bf28      	it	cs
   3f4f2:	4604      	movcs	r4, r0
   3f4f4:	e7d5      	b.n	3f4a2 <json_add_data+0xe>
		ret += json_add_num(json_obj, data_name, param->value);
   3f4f6:	8820      	ldrh	r0, [r4, #0]
   3f4f8:	f7dd f8e4 	bl	1c6c4 <__aeabi_ui2d>
	json_num = cJSON_CreateNumber(num);
   3f4fc:	f7de fffc 	bl	1e4f8 <cJSON_CreateNumber>
	if (json_num == NULL) {
   3f500:	4602      	mov	r2, r0
   3f502:	b138      	cbz	r0, 3f514 <json_add_data+0x80>
	cJSON_AddItemToObject(parent, str, item);
   3f504:	4630      	mov	r0, r6
   3f506:	a903      	add	r1, sp, #12
   3f508:	f000 fb10 	bl	3fb2c <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_num);
   3f50c:	2000      	movs	r0, #0
		total_len += sizeof(uint16_t);
   3f50e:	2402      	movs	r4, #2
		ret += json_add_num(json_obj, data_name, param->value);
   3f510:	4428      	add	r0, r5
   3f512:	e7eb      	b.n	3f4ec <json_add_data+0x58>
		return -ENOMEM;
   3f514:	f06f 000b 	mvn.w	r0, #11
   3f518:	e7f9      	b.n	3f50e <json_add_data+0x7a>

0003f51a <sim_data_add>:
{
   3f51a:	b570      	push	{r4, r5, r6, lr}
   3f51c:	4606      	mov	r6, r0
	if (sim == NULL || json_obj == NULL) {
   3f51e:	460d      	mov	r5, r1
   3f520:	b179      	cbz	r1, 3f542 <sim_data_add+0x28>
	total_len = json_add_data(&sim->uicc, json_obj);
   3f522:	f7ff ffb7 	bl	3f494 <json_add_data>
	total_len += json_add_data(&sim->iccid, json_obj);
   3f526:	4629      	mov	r1, r5
	total_len = json_add_data(&sim->uicc, json_obj);
   3f528:	4604      	mov	r4, r0
	total_len += json_add_data(&sim->iccid, json_obj);
   3f52a:	f106 0070 	add.w	r0, r6, #112	; 0x70
   3f52e:	f7ff ffb1 	bl	3f494 <json_add_data>
	total_len += json_add_data(&sim->imsi, json_obj);
   3f532:	4629      	mov	r1, r5
	total_len += json_add_data(&sim->iccid, json_obj);
   3f534:	4404      	add	r4, r0
	total_len += json_add_data(&sim->imsi, json_obj);
   3f536:	f106 00e0 	add.w	r0, r6, #224	; 0xe0
   3f53a:	f7ff ffab 	bl	3f494 <json_add_data>
   3f53e:	4420      	add	r0, r4
}
   3f540:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   3f542:	f06f 0015 	mvn.w	r0, #21
   3f546:	e7fb      	b.n	3f540 <sim_data_add+0x26>

0003f548 <date_time_init>:

	return 0;
}

static int date_time_init(const struct device *unused)
{
   3f548:	b508      	push	{r3, lr}
	date_time_core_init();
   3f54a:	f7e9 fb5f 	bl	28c0c <date_time_core_init>

	return 0;
}
   3f54e:	2000      	movs	r0, #0
   3f550:	bd08      	pop	{r3, pc}

0003f552 <date_time_is_valid>:
	return date_time_core_is_valid();
   3f552:	f7e9 bb91 	b.w	28c78 <date_time_core_is_valid>

0003f556 <date_time_register_handler>:
	date_time_core_register_handler(evt_handler);
   3f556:	f7e9 bb89 	b.w	28c6c <date_time_core_register_handler>

0003f55a <location_service_get_certificate>:
	if (service == MULTICELL_SERVICE_NRF_CLOUD) {
   3f55a:	2801      	cmp	r0, #1
   3f55c:	d101      	bne.n	3f562 <location_service_get_certificate+0x8>
		return location_service_get_certificate_nrf_cloud();
   3f55e:	f7e9 be85 	b.w	2926c <location_service_get_certificate_nrf_cloud>
}
   3f562:	2000      	movs	r0, #0
   3f564:	4770      	bx	lr

0003f566 <location_core_config_log>:
}
   3f566:	4770      	bx	lr

0003f568 <method_gnss_agps_required>:
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_GPS_UTC_REQUEST) {
   3f568:	6882      	ldr	r2, [r0, #8]
   3f56a:	f002 0301 	and.w	r3, r2, #1
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_KLOBUCHAR_REQUEST) {
   3f56e:	0791      	lsls	r1, r2, #30
		type_count++;
   3f570:	bf48      	it	mi
   3f572:	3301      	addmi	r3, #1
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_NEQUICK_REQUEST) {
   3f574:	0751      	lsls	r1, r2, #29
		type_count++;
   3f576:	bf48      	it	mi
   3f578:	3301      	addmi	r3, #1
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST) {
   3f57a:	0711      	lsls	r1, r2, #28
		type_count++;
   3f57c:	bf48      	it	mi
   3f57e:	3301      	addmi	r3, #1
	if (request->data_flags & NRF_MODEM_GNSS_AGPS_POSITION_REQUEST) {
   3f580:	06d1      	lsls	r1, r2, #27
		type_count++;
   3f582:	bf48      	it	mi
   3f584:	3301      	addmi	r3, #1
	if (request->data_flags &  NRF_MODEM_GNSS_AGPS_INTEGRITY_REQUEST) {
   3f586:	f002 0220 	and.w	r2, r2, #32
   3f58a:	4313      	orrs	r3, r2
}
   3f58c:	bf14      	ite	ne
   3f58e:	2001      	movne	r0, #1
   3f590:	2000      	moveq	r0, #0
   3f592:	4770      	bx	lr

0003f594 <json_add_num_cs>:
{
   3f594:	b508      	push	{r3, lr}
	if (!parent || !str) {
   3f596:	b138      	cbz	r0, 3f5a8 <json_add_num_cs+0x14>
	return cJSON_AddNumberToObjectCS(parent, str, item) ? 0 : -ENOMEM;
   3f598:	f000 fb10 	bl	3fbbc <cJSON_AddNumberToObjectCS>
   3f59c:	2800      	cmp	r0, #0
   3f59e:	bf14      	ite	ne
   3f5a0:	2000      	movne	r0, #0
   3f5a2:	f06f 000b 	mvneq.w	r0, #11
}
   3f5a6:	bd08      	pop	{r3, pc}
		return -EINVAL;
   3f5a8:	f06f 0015 	mvn.w	r0, #21
   3f5ac:	e7fb      	b.n	3f5a6 <json_add_num_cs+0x12>

0003f5ae <json_add_obj_cs>:
{
   3f5ae:	b510      	push	{r4, lr}
	if (!parent || !str || !item) {
   3f5b0:	b148      	cbz	r0, 3f5c6 <json_add_obj_cs+0x18>
   3f5b2:	b141      	cbz	r1, 3f5c6 <json_add_obj_cs+0x18>
   3f5b4:	b13a      	cbz	r2, 3f5c6 <json_add_obj_cs+0x18>
	return cJSON_AddItemToObjectCS(parent, str, item) ? 0 : -ENOMEM;
   3f5b6:	f000 fabc 	bl	3fb32 <cJSON_AddItemToObjectCS>
   3f5ba:	2800      	cmp	r0, #0
   3f5bc:	bf14      	ite	ne
   3f5be:	2000      	movne	r0, #0
   3f5c0:	f06f 000b 	mvneq.w	r0, #11
}
   3f5c4:	bd10      	pop	{r4, pc}
		return -EINVAL;
   3f5c6:	f06f 0015 	mvn.w	r0, #21
   3f5ca:	e7fb      	b.n	3f5c4 <json_add_obj_cs+0x16>

0003f5cc <json_add_str_cs>:
{
   3f5cc:	b508      	push	{r3, lr}
	if (!parent || !str || !item) {
   3f5ce:	b140      	cbz	r0, 3f5e2 <json_add_str_cs+0x16>
   3f5d0:	b13a      	cbz	r2, 3f5e2 <json_add_str_cs+0x16>
	return cJSON_AddStringToObjectCS(parent, str, item) ? 0 : -ENOMEM;
   3f5d2:	f000 fb1f 	bl	3fc14 <cJSON_AddStringToObjectCS>
   3f5d6:	2800      	cmp	r0, #0
   3f5d8:	bf14      	ite	ne
   3f5da:	2000      	movne	r0, #0
   3f5dc:	f06f 000b 	mvneq.w	r0, #11
}
   3f5e0:	bd08      	pop	{r3, pc}
		return -EINVAL;
   3f5e2:	f06f 0015 	mvn.w	r0, #21
   3f5e6:	e7fb      	b.n	3f5e0 <json_add_str_cs+0x14>

0003f5e8 <json_object_decode>:
	return obj ? cJSON_GetObjectItem(obj, str) : NULL;
   3f5e8:	b108      	cbz	r0, 3f5ee <json_object_decode+0x6>
   3f5ea:	f000 ba93 	b.w	3fb14 <cJSON_GetObjectItem>
}
   3f5ee:	4770      	bx	lr

0003f5f0 <json_add_null_cs>:
{
   3f5f0:	b508      	push	{r3, lr}
	if (!parent || !str) {
   3f5f2:	b138      	cbz	r0, 3f604 <json_add_null_cs+0x14>
	return cJSON_AddNullToObjectCS(parent, str) ? 0 : -ENOMEM;
   3f5f4:	f000 facd 	bl	3fb92 <cJSON_AddNullToObjectCS>
   3f5f8:	2800      	cmp	r0, #0
   3f5fa:	bf14      	ite	ne
   3f5fc:	2000      	movne	r0, #0
   3f5fe:	f06f 000b 	mvneq.w	r0, #11
}
   3f602:	bd08      	pop	{r3, pc}
		return -EINVAL;
   3f604:	f06f 0015 	mvn.w	r0, #21
   3f608:	e7fb      	b.n	3f602 <json_add_null_cs+0x12>

0003f60a <json_strdup>:
{
   3f60a:	b538      	push	{r3, r4, r5, lr}
	char *src = cJSON_GetStringValue(string_obj);
   3f60c:	f000 fb96 	bl	3fd3c <cJSON_GetStringValue>
	if (!src) {
   3f610:	4605      	mov	r5, r0
   3f612:	b160      	cbz	r0, 3f62e <json_strdup+0x24>
	dest = nrf_cloud_calloc(strlen(src) + 1, 1);
   3f614:	f7dd fe15 	bl	1d242 <strlen>
   3f618:	2101      	movs	r1, #1
   3f61a:	4408      	add	r0, r1
   3f61c:	f001 fe3c 	bl	41298 <k_calloc>
	if (dest) {
   3f620:	4604      	mov	r4, r0
   3f622:	b110      	cbz	r0, 3f62a <json_strdup+0x20>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   3f624:	4629      	mov	r1, r5
   3f626:	f002 f8a8 	bl	4177a <strcpy>
}
   3f62a:	4620      	mov	r0, r4
   3f62c:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   3f62e:	4604      	mov	r4, r0
   3f630:	e7fb      	b.n	3f62a <json_strdup+0x20>

0003f632 <json_decode_and_alloc>:
{
   3f632:	b538      	push	{r3, r4, r5, lr}
   3f634:	4605      	mov	r5, r0
	if (!data || !cJSON_IsString(obj)) {
   3f636:	460c      	mov	r4, r1
   3f638:	b911      	cbnz	r1, 3f640 <json_decode_and_alloc+0xe>
		return -EINVAL;
   3f63a:	f06f 0015 	mvn.w	r0, #21
}
   3f63e:	bd38      	pop	{r3, r4, r5, pc}
	if (!data || !cJSON_IsString(obj)) {
   3f640:	f000 fb75 	bl	3fd2e <cJSON_IsString>
   3f644:	2800      	cmp	r0, #0
   3f646:	d0f8      	beq.n	3f63a <json_decode_and_alloc+0x8>
	data->ptr = json_strdup(obj);
   3f648:	4628      	mov	r0, r5
   3f64a:	f7ff ffde 	bl	3f60a <json_strdup>
   3f64e:	6060      	str	r0, [r4, #4]
	if (data->ptr == NULL) {
   3f650:	b120      	cbz	r0, 3f65c <json_decode_and_alloc+0x2a>
	data->len = strlen(data->ptr);
   3f652:	f7dd fdf6 	bl	1d242 <strlen>
   3f656:	6020      	str	r0, [r4, #0]
	return 0;
   3f658:	2000      	movs	r0, #0
   3f65a:	e7f0      	b.n	3f63e <json_decode_and_alloc+0xc>
		return -ENOMEM;
   3f65c:	f06f 000b 	mvn.w	r0, #11
   3f660:	e7ed      	b.n	3f63e <json_decode_and_alloc+0xc>

0003f662 <nrf_cloud_device_status_free>:
{
   3f662:	b510      	push	{r4, lr}
	if (status && status->ptr) {
   3f664:	4604      	mov	r4, r0
   3f666:	b130      	cbz	r0, 3f676 <nrf_cloud_device_status_free+0x14>
   3f668:	6840      	ldr	r0, [r0, #4]
   3f66a:	b120      	cbz	r0, 3f676 <nrf_cloud_device_status_free+0x14>
		cJSON_free((void *)status->ptr);
   3f66c:	f7f2 fd42 	bl	320f4 <cJSON_free>
		status->ptr = NULL;
   3f670:	2300      	movs	r3, #0
		status->len = 0;
   3f672:	e9c4 3300 	strd	r3, r3, [r4]
}
   3f676:	bd10      	pop	{r4, pc}

0003f678 <nrf_cloud_configured_client_id_length_get>:
}
   3f678:	2013      	movs	r0, #19
   3f67a:	4770      	bx	lr

0003f67c <atomic_set.isra.0>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   3f67c:	e8d0 3fef 	ldaex	r3, [r0]
   3f680:	e8c0 1fe2 	stlex	r2, r1, [r0]
   3f684:	2a00      	cmp	r2, #0
   3f686:	d1f9      	bne.n	3f67c <atomic_set.isra.0>
}
   3f688:	4770      	bx	lr

0003f68a <cc_disconnection_handler>:
}
   3f68a:	2000      	movs	r0, #0
   3f68c:	4770      	bx	lr

0003f68e <disconnection_handler>:
{
   3f68e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct nrf_cloud_evt evt = {
   3f690:	2218      	movs	r2, #24
   3f692:	2100      	movs	r1, #0
   3f694:	4668      	mov	r0, sp
   3f696:	f001 fea5 	bl	413e4 <memset>
   3f69a:	2309      	movs	r3, #9
   3f69c:	f88d 3000 	strb.w	r3, [sp]
   3f6a0:	2301      	movs	r3, #1
   3f6a2:	9301      	str	r3, [sp, #4]
	if (nfsm_get_disconnect_requested()) {
   3f6a4:	f7eb ff8c 	bl	2b5c0 <nfsm_get_disconnect_requested>
   3f6a8:	b108      	cbz	r0, 3f6ae <disconnection_handler+0x20>
		evt.status = NRF_CLOUD_DISCONNECT_USER_REQUEST;
   3f6aa:	2300      	movs	r3, #0
   3f6ac:	9301      	str	r3, [sp, #4]
	nfsm_set_current_state_and_notify(STATE_INITIALIZED, &evt);
   3f6ae:	4669      	mov	r1, sp
   3f6b0:	2001      	movs	r0, #1
   3f6b2:	f7eb ff49 	bl	2b548 <nfsm_set_current_state_and_notify>
}
   3f6b6:	2000      	movs	r0, #0
   3f6b8:	b007      	add	sp, #28
   3f6ba:	f85d fb04 	ldr.w	pc, [sp], #4

0003f6be <dc_connection_handler>:
{
   3f6be:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (nct_evt->status == 0) {
   3f6c0:	6801      	ldr	r1, [r0, #0]
   3f6c2:	b951      	cbnz	r1, 3f6da <dc_connection_handler+0x1c>
		struct nrf_cloud_evt evt = {
   3f6c4:	2218      	movs	r2, #24
   3f6c6:	4668      	mov	r0, sp
   3f6c8:	f001 fe8c 	bl	413e4 <memset>
   3f6cc:	2305      	movs	r3, #5
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTED, &evt);
   3f6ce:	4669      	mov	r1, sp
   3f6d0:	2009      	movs	r0, #9
		struct nrf_cloud_evt evt = {
   3f6d2:	f88d 3000 	strb.w	r3, [sp]
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTED, &evt);
   3f6d6:	f7eb ff37 	bl	2b548 <nfsm_set_current_state_and_notify>
}
   3f6da:	2000      	movs	r0, #0
   3f6dc:	b007      	add	sp, #28
   3f6de:	f85d fb04 	ldr.w	pc, [sp], #4

0003f6e2 <cc_tx_ack_in_state_requested_handler>:
{
   3f6e2:	b508      	push	{r3, lr}
	if (nct_evt->param.message_id == NCT_MSG_ID_STATE_REQUEST) {
   3f6e4:	8883      	ldrh	r3, [r0, #4]
   3f6e6:	2bc8      	cmp	r3, #200	; 0xc8
   3f6e8:	d103      	bne.n	3f6f2 <cc_tx_ack_in_state_requested_handler+0x10>
		nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED,
   3f6ea:	2100      	movs	r1, #0
   3f6ec:	2005      	movs	r0, #5
   3f6ee:	f7eb ff2b 	bl	2b548 <nfsm_set_current_state_and_notify>
}
   3f6f2:	2000      	movs	r0, #0
   3f6f4:	bd08      	pop	{r3, pc}

0003f6f6 <dc_disconnection_handler>:
   3f6f6:	2000      	movs	r0, #0
   3f6f8:	4770      	bx	lr

0003f6fa <dc_tx_ack_handler>:
   3f6fa:	2000      	movs	r0, #0
   3f6fc:	4770      	bx	lr

0003f6fe <nct_dc_send>:
	return dc_send(dc_data, MQTT_QOS_1_AT_LEAST_ONCE);
   3f6fe:	2101      	movs	r1, #1
   3f700:	f7ec bcc6 	b.w	2c090 <dc_send>

0003f704 <nct_dc_stream>:
	return dc_send(dc_data, MQTT_QOS_0_AT_MOST_ONCE);
   3f704:	2100      	movs	r1, #0
   3f706:	f7ec bcc3 	b.w	2c090 <dc_send>

0003f70a <npgps_get_time>:
	return npgps_get_shifted_time(gps_sec, gps_day, gps_time_of_day, 0);
   3f70a:	2300      	movs	r3, #0
   3f70c:	f7ef ba16 	b.w	2eb3c <npgps_get_shifted_time>

0003f710 <nrf_cloud_cell_pos_request>:
{
   3f710:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3f712:	4604      	mov	r4, r0
   3f714:	460d      	mov	r5, r1
   3f716:	4616      	mov	r6, r2
	if (nfsm_get_current_state() != STATE_DC_CONNECTED) {
   3f718:	f7eb ff10 	bl	2b53c <nfsm_get_current_state>
   3f71c:	2809      	cmp	r0, #9
   3f71e:	d116      	bne.n	3f74e <nrf_cloud_cell_pos_request+0x3e>
	cJSON *cell_pos_req_obj = NULL;
   3f720:	2300      	movs	r3, #0
	err = nrf_cloud_cell_pos_request_json_get(cells_inf, request_loc, &cell_pos_req_obj);
   3f722:	4620      	mov	r0, r4
   3f724:	4629      	mov	r1, r5
   3f726:	aa01      	add	r2, sp, #4
	cJSON *cell_pos_req_obj = NULL;
   3f728:	9301      	str	r3, [sp, #4]
	err = nrf_cloud_cell_pos_request_json_get(cells_inf, request_loc, &cell_pos_req_obj);
   3f72a:	f7ef fc07 	bl	2ef3c <nrf_cloud_cell_pos_request_json_get>
	if (!err) {
   3f72e:	4604      	mov	r4, r0
   3f730:	b938      	cbnz	r0, 3f742 <nrf_cloud_cell_pos_request+0x32>
		if (request_loc) {
   3f732:	b115      	cbz	r5, 3f73a <nrf_cloud_cell_pos_request+0x2a>
			nfsm_set_cell_pos_response_cb(cb);
   3f734:	4630      	mov	r0, r6
   3f736:	f7ec fadf 	bl	2bcf8 <nfsm_set_cell_pos_response_cb>
		err = json_send_to_cloud(cell_pos_req_obj);
   3f73a:	9801      	ldr	r0, [sp, #4]
   3f73c:	f7eb f8fe 	bl	2a93c <json_send_to_cloud>
   3f740:	4604      	mov	r4, r0
	cJSON_Delete(cell_pos_req_obj);
   3f742:	9801      	ldr	r0, [sp, #4]
   3f744:	f7f2 fbfa 	bl	31f3c <cJSON_Delete>
}
   3f748:	4620      	mov	r0, r4
   3f74a:	b002      	add	sp, #8
   3f74c:	bd70      	pop	{r4, r5, r6, pc}
		return -EACCES;
   3f74e:	f06f 040c 	mvn.w	r4, #12
   3f752:	e7f9      	b.n	3f748 <nrf_cloud_cell_pos_request+0x38>

0003f754 <reset_topic>:
{
   3f754:	b510      	push	{r4, lr}
   3f756:	4604      	mov	r4, r0
	if (topic->utf8) {
   3f758:	6800      	ldr	r0, [r0, #0]
   3f75a:	b118      	cbz	r0, 3f764 <reset_topic+0x10>
		nrf_cloud_free((void *)topic->utf8);
   3f75c:	f001 fd91 	bl	41282 <k_free>
		topic->utf8 = NULL;
   3f760:	2300      	movs	r3, #0
   3f762:	6023      	str	r3, [r4, #0]
	topic->size = 0;
   3f764:	2300      	movs	r3, #0
   3f766:	6063      	str	r3, [r4, #4]
}
   3f768:	bd10      	pop	{r4, pc}

0003f76a <get_number_from_array>:
{
   3f76a:	b538      	push	{r3, r4, r5, lr}
   3f76c:	4614      	mov	r4, r2
	cJSON *item = cJSON_GetArrayItem(array, index);
   3f76e:	f000 f9cb 	bl	3fb08 <cJSON_GetArrayItem>
   3f772:	4605      	mov	r5, r0
	if (!cJSON_IsNumber(item)) {
   3f774:	f000 fad4 	bl	3fd20 <cJSON_IsNumber>
   3f778:	b118      	cbz	r0, 3f782 <get_number_from_array+0x18>
	return 0;
   3f77a:	2000      	movs	r0, #0
	*number_out = item->valueint;
   3f77c:	696b      	ldr	r3, [r5, #20]
   3f77e:	6023      	str	r3, [r4, #0]
}
   3f780:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   3f782:	f06f 0015 	mvn.w	r0, #21
   3f786:	e7fb      	b.n	3f780 <get_number_from_array+0x16>

0003f788 <error_evt_send>:
{
   3f788:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct download_client_evt evt = {
   3f78a:	2300      	movs	r3, #0
   3f78c:	9301      	str	r3, [sp, #4]
   3f78e:	9303      	str	r3, [sp, #12]
   3f790:	2301      	movs	r3, #1
		.error = -error
   3f792:	4249      	negs	r1, r1
	return dl->callback(&evt);
   3f794:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
	const struct download_client_evt evt = {
   3f798:	f88d 3004 	strb.w	r3, [sp, #4]
   3f79c:	9102      	str	r1, [sp, #8]
	return dl->callback(&evt);
   3f79e:	f8d0 3a50 	ldr.w	r3, [r0, #2640]	; 0xa50
   3f7a2:	a801      	add	r0, sp, #4
   3f7a4:	4798      	blx	r3
}
   3f7a6:	b005      	add	sp, #20
   3f7a8:	f85d fb04 	ldr.w	pc, [sp], #4

0003f7ac <request_send>:
	switch (dl->proto) {
   3f7ac:	f8d0 393c 	ldr.w	r3, [r0, #2364]	; 0x93c
   3f7b0:	2b06      	cmp	r3, #6
   3f7b2:	d002      	beq.n	3f7ba <request_send+0xe>
   3f7b4:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   3f7b8:	d101      	bne.n	3f7be <request_send+0x12>
		return http_get_request_send(dl);
   3f7ba:	f7f0 bf65 	b.w	30688 <http_get_request_send>
}
   3f7be:	2000      	movs	r0, #0
   3f7c0:	4770      	bx	lr

0003f7c2 <download_client_file_size_get>:
	k_thread_resume(client->tid);
}

int download_client_file_size_get(struct download_client *client, size_t *size)
{
	if (!client || !size) {
   3f7c2:	b128      	cbz	r0, 3f7d0 <download_client_file_size_get+0xe>
   3f7c4:	b121      	cbz	r1, 3f7d0 <download_client_file_size_get+0xe>
		return -EINVAL;
	}

	*size = client->file_size;
   3f7c6:	f8d0 391c 	ldr.w	r3, [r0, #2332]	; 0x91c

	return 0;
   3f7ca:	2000      	movs	r0, #0
	*size = client->file_size;
   3f7cc:	600b      	str	r3, [r1, #0]
	return 0;
   3f7ce:	4770      	bx	lr
		return -EINVAL;
   3f7d0:	f06f 0015 	mvn.w	r0, #21
}
   3f7d4:	4770      	bx	lr

0003f7d6 <swallow>:
{
   3f7d6:	b570      	push	{r4, r5, r6, lr}
   3f7d8:	4605      	mov	r5, r0
	p = strstr(*str, swallow);
   3f7da:	6800      	ldr	r0, [r0, #0]
{
   3f7dc:	460e      	mov	r6, r1
	p = strstr(*str, swallow);
   3f7de:	f002 f81b 	bl	41818 <strstr>
	if (!p) {
   3f7e2:	4604      	mov	r4, r0
   3f7e4:	b130      	cbz	r0, 3f7f4 <swallow+0x1e>
	*str = p + strlen(swallow);
   3f7e6:	4630      	mov	r0, r6
   3f7e8:	f7dd fd2b 	bl	1d242 <strlen>
   3f7ec:	4404      	add	r4, r0
	return 0;
   3f7ee:	2000      	movs	r0, #0
	*str = p + strlen(swallow);
   3f7f0:	602c      	str	r4, [r5, #0]
}
   3f7f2:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   3f7f4:	2001      	movs	r0, #1
   3f7f6:	e7fc      	b.n	3f7f2 <swallow+0x1c>

0003f7f8 <fota_download_s0_active_get>:
}
   3f7f8:	f06f 0001 	mvn.w	r0, #1
   3f7fc:	4770      	bx	lr

0003f7fe <dfu_target_mcuboot_schedule_update>:

int dfu_target_mcuboot_schedule_update(int img_num)
{
	int err = 0;

	if (img_num == -1) {
   3f7fe:	3001      	adds	r0, #1
   3f800:	2801      	cmp	r0, #1
   3f802:	d801      	bhi.n	3f808 <dfu_target_mcuboot_schedule_update+0xa>
		for (int i = 0; i < TARGET_IMAGE_COUNT && !err; i++) {
			err = dfu_target_mcuboot_schedule_one_img(i);
   3f804:	f7f1 bcc4 	b.w	31190 <dfu_target_mcuboot_schedule_one_img.constprop.0>
	} else {
		err = -ENOENT;
	}

	return err;
}
   3f808:	f06f 0001 	mvn.w	r0, #1
   3f80c:	4770      	bx	lr

0003f80e <bootutil_buffer_is_erased.part.0>:
bool bootutil_buffer_is_erased(const struct flash_area *area,
   3f80e:	b538      	push	{r3, r4, r5, lr}
   3f810:	460c      	mov	r4, r1
   3f812:	4615      	mov	r5, r2
    erased_val = flash_area_erased_val(area);
   3f814:	f7fd fe13 	bl	3d43e <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
   3f818:	4621      	mov	r1, r4
   3f81a:	4425      	add	r5, r4
   3f81c:	42a9      	cmp	r1, r5
   3f81e:	d101      	bne.n	3f824 <bootutil_buffer_is_erased.part.0+0x16>
    return true;
   3f820:	2001      	movs	r0, #1
}
   3f822:	bd38      	pop	{r3, r4, r5, pc}
        if (u8b[i] != erased_val) {
   3f824:	f811 3b01 	ldrb.w	r3, [r1], #1
   3f828:	4298      	cmp	r0, r3
   3f82a:	d0f7      	beq.n	3f81c <bootutil_buffer_is_erased.part.0+0xe>
            return false;
   3f82c:	2000      	movs	r0, #0
   3f82e:	e7f8      	b.n	3f822 <bootutil_buffer_is_erased.part.0+0x14>

0003f830 <boot_swap_info_off>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
   3f830:	6880      	ldr	r0, [r0, #8]
   3f832:	3818      	subs	r0, #24
   3f834:	f020 0007 	bic.w	r0, r0, #7
}
   3f838:	3810      	subs	r0, #16
   3f83a:	4770      	bx	lr

0003f83c <bootutil_buffer_is_erased>:
    if (buffer == NULL || len == 0) {
   3f83c:	b111      	cbz	r1, 3f844 <bootutil_buffer_is_erased+0x8>
   3f83e:	b10a      	cbz	r2, 3f844 <bootutil_buffer_is_erased+0x8>
   3f840:	f7ff bfe5 	b.w	3f80e <bootutil_buffer_is_erased.part.0>
}
   3f844:	2000      	movs	r0, #0
   3f846:	4770      	bx	lr

0003f848 <boot_read_flag>:
{
   3f848:	b538      	push	{r3, r4, r5, lr}
   3f84a:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
   3f84c:	2301      	movs	r3, #1
{
   3f84e:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
   3f850:	4622      	mov	r2, r4
{
   3f852:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
   3f854:	f7fd fd9b 	bl	3d38e <flash_area_read>
    if (rc < 0) {
   3f858:	2800      	cmp	r0, #0
   3f85a:	db10      	blt.n	3f87e <boot_read_flag+0x36>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
   3f85c:	2201      	movs	r2, #1
   3f85e:	4621      	mov	r1, r4
   3f860:	4628      	mov	r0, r5
   3f862:	f7ff ffeb 	bl	3f83c <bootutil_buffer_is_erased>
   3f866:	b118      	cbz	r0, 3f870 <boot_read_flag+0x28>
        *flag = BOOT_FLAG_UNSET;
   3f868:	2303      	movs	r3, #3
    return 0;
   3f86a:	2000      	movs	r0, #0
        *flag = BOOT_FLAG_UNSET;
   3f86c:	7023      	strb	r3, [r4, #0]
}
   3f86e:	bd38      	pop	{r3, r4, r5, pc}
    if (flag != BOOT_FLAG_SET) {
   3f870:	7823      	ldrb	r3, [r4, #0]
        return BOOT_FLAG_BAD;
   3f872:	2b01      	cmp	r3, #1
   3f874:	bf0c      	ite	eq
   3f876:	2301      	moveq	r3, #1
   3f878:	2302      	movne	r3, #2
        *flag = boot_flag_decode(*flag);
   3f87a:	7023      	strb	r3, [r4, #0]
   3f87c:	e7f7      	b.n	3f86e <boot_read_flag+0x26>
        return BOOT_EFLASH;
   3f87e:	2001      	movs	r0, #1
   3f880:	e7f5      	b.n	3f86e <boot_read_flag+0x26>

0003f882 <boot_write_trailer>:
{
   3f882:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3f886:	461d      	mov	r5, r3
   3f888:	4606      	mov	r6, r0
   3f88a:	460f      	mov	r7, r1
   3f88c:	4690      	mov	r8, r2
    align = flash_area_align(fap);
   3f88e:	f7fd fdcd 	bl	3d42c <flash_area_align>
    align = ALIGN_UP(inlen, align);
   3f892:	1e6c      	subs	r4, r5, #1
   3f894:	4404      	add	r4, r0
   3f896:	4243      	negs	r3, r0
   3f898:	401c      	ands	r4, r3
    if (align > BOOT_MAX_ALIGN) {
   3f89a:	2c08      	cmp	r4, #8
   3f89c:	d81b      	bhi.n	3f8d6 <boot_write_trailer+0x54>
    erased_val = flash_area_erased_val(fap);
   3f89e:	4630      	mov	r0, r6
   3f8a0:	f7fd fdcd 	bl	3d43e <flash_area_erased_val>
   3f8a4:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
   3f8a6:	2308      	movs	r3, #8
   3f8a8:	462a      	mov	r2, r5
   3f8aa:	4641      	mov	r1, r8
   3f8ac:	4668      	mov	r0, sp
   3f8ae:	f001 fd86 	bl	413be <__memcpy_chk>
__ssp_bos_icheck3(memset, void *, int)
   3f8b2:	4649      	mov	r1, r9
   3f8b4:	1b62      	subs	r2, r4, r5
   3f8b6:	eb0d 0005 	add.w	r0, sp, r5
   3f8ba:	f001 fd93 	bl	413e4 <memset>
    rc = flash_area_write(fap, off, buf, align);
   3f8be:	4623      	mov	r3, r4
   3f8c0:	466a      	mov	r2, sp
   3f8c2:	4639      	mov	r1, r7
   3f8c4:	4630      	mov	r0, r6
   3f8c6:	f7fd fd7e 	bl	3d3c6 <flash_area_write>
    if (rc != 0) {
   3f8ca:	3800      	subs	r0, #0
   3f8cc:	bf18      	it	ne
   3f8ce:	2001      	movne	r0, #1
}
   3f8d0:	b003      	add	sp, #12
   3f8d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
   3f8d6:	f04f 30ff 	mov.w	r0, #4294967295
   3f8da:	e7f9      	b.n	3f8d0 <boot_write_trailer+0x4e>

0003f8dc <boot_write_trailer_flag>:
{
   3f8dc:	b507      	push	{r0, r1, r2, lr}
    return boot_write_trailer(fap, off, buf, 1);
   3f8de:	2301      	movs	r3, #1
    const uint8_t buf[1] = { flag_val };
   3f8e0:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
   3f8e4:	aa01      	add	r2, sp, #4
   3f8e6:	f7ff ffcc 	bl	3f882 <boot_write_trailer>
}
   3f8ea:	b003      	add	sp, #12
   3f8ec:	f85d fb04 	ldr.w	pc, [sp], #4

0003f8f0 <boot_write_image_ok>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
   3f8f0:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
   3f8f2:	2201      	movs	r2, #1
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
   3f8f4:	3918      	subs	r1, #24
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
   3f8f6:	f021 0107 	bic.w	r1, r1, #7
   3f8fa:	f7ff bfef 	b.w	3f8dc <boot_write_trailer_flag>

0003f8fe <boot_read_image_ok>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
   3f8fe:	6882      	ldr	r2, [r0, #8]
   3f900:	3a18      	subs	r2, #24
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
   3f902:	f022 0207 	bic.w	r2, r2, #7
   3f906:	f7ff bf9f 	b.w	3f848 <boot_read_flag>

0003f90a <boot_set_confirmed_multi>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed_multi(int image_index)
{
   3f90a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const struct flash_area *fap = NULL;
   3f90c:	2300      	movs	r3, #0
    struct boot_swap_state state_primary_slot;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap);
   3f90e:	2003      	movs	r0, #3
   3f910:	a901      	add	r1, sp, #4
    const struct flash_area *fap = NULL;
   3f912:	9301      	str	r3, [sp, #4]
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap);
   3f914:	f7e2 f98e 	bl	21c34 <flash_area_open>
    if (rc != 0) {
   3f918:	b9d8      	cbnz	r0, 3f952 <boot_set_confirmed_multi+0x48>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state_primary_slot);
   3f91a:	9801      	ldr	r0, [sp, #4]
   3f91c:	a902      	add	r1, sp, #8
   3f91e:	f7f1 fd7f 	bl	31420 <boot_read_swap_state>
    if (rc != 0) {
   3f922:	4604      	mov	r4, r0
   3f924:	b968      	cbnz	r0, 3f942 <boot_set_confirmed_multi+0x38>
        goto done;
    }

    switch (state_primary_slot.magic) {
   3f926:	f89d 3008 	ldrb.w	r3, [sp, #8]
   3f92a:	2b02      	cmp	r3, #2
   3f92c:	d00f      	beq.n	3f94e <boot_set_confirmed_multi+0x44>
   3f92e:	2b03      	cmp	r3, #3
   3f930:	d007      	beq.n	3f942 <boot_set_confirmed_multi+0x38>
    /* Intentionally do not check copy_done flag
     * so can confirm a padded image which was programed using a programing
     * interface.
     */

    if (state_primary_slot.image_ok != BOOT_FLAG_UNSET) {
   3f932:	f89d 300b 	ldrb.w	r3, [sp, #11]
   3f936:	2b03      	cmp	r3, #3
   3f938:	d103      	bne.n	3f942 <boot_set_confirmed_multi+0x38>
        /* Already confirmed. */
        goto done;
    }

    rc = boot_write_image_ok(fap);
   3f93a:	9801      	ldr	r0, [sp, #4]
   3f93c:	f7ff ffd8 	bl	3f8f0 <boot_write_image_ok>
   3f940:	4604      	mov	r4, r0

done:
    flash_area_close(fap);
   3f942:	9801      	ldr	r0, [sp, #4]
   3f944:	f7fd fd22 	bl	3d38c <flash_area_close>
    return rc;
}
   3f948:	4620      	mov	r0, r4
   3f94a:	b004      	add	sp, #16
   3f94c:	bd10      	pop	{r4, pc}
    switch (state_primary_slot.magic) {
   3f94e:	2404      	movs	r4, #4
   3f950:	e7f7      	b.n	3f942 <boot_set_confirmed_multi+0x38>
        return BOOT_EFLASH;
   3f952:	2401      	movs	r4, #1
   3f954:	e7f8      	b.n	3f948 <boot_set_confirmed_multi+0x3e>

0003f956 <boot_set_confirmed>:
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed(void)
{
    return boot_set_confirmed_multi(0);
   3f956:	2000      	movs	r0, #0
   3f958:	f7ff bfd7 	b.w	3f90a <boot_set_confirmed_multi>

0003f95c <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   3f95c:	2000      	movs	r0, #0
   3f95e:	4770      	bx	lr

0003f960 <parse_hex4>:
    for (i = 0; i < 4; i++)
   3f960:	2200      	movs	r2, #0
{
   3f962:	b510      	push	{r4, lr}
   3f964:	4604      	mov	r4, r0
    unsigned int h = 0;
   3f966:	4610      	mov	r0, r2
        if ((input[i] >= '0') && (input[i] <= '9'))
   3f968:	5ca1      	ldrb	r1, [r4, r2]
   3f96a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   3f96e:	2b09      	cmp	r3, #9
   3f970:	d80b      	bhi.n	3f98a <parse_hex4+0x2a>
            h += (unsigned int) input[i] - '0';
   3f972:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
        if (i < 3)
   3f976:	2a03      	cmp	r2, #3
            h += (unsigned int) 10 + input[i] - 'a';
   3f978:	eb01 0003 	add.w	r0, r1, r3
    for (i = 0; i < 4; i++)
   3f97c:	f102 0201 	add.w	r2, r2, #1
            h = h << 4;
   3f980:	bf18      	it	ne
   3f982:	0100      	lslne	r0, r0, #4
    for (i = 0; i < 4; i++)
   3f984:	2a04      	cmp	r2, #4
   3f986:	d1ef      	bne.n	3f968 <parse_hex4+0x8>
}
   3f988:	bd10      	pop	{r4, pc}
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
   3f98a:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   3f98e:	2b05      	cmp	r3, #5
   3f990:	d802      	bhi.n	3f998 <parse_hex4+0x38>
            h += (unsigned int) 10 + input[i] - 'A';
   3f992:	f1a0 0337 	sub.w	r3, r0, #55	; 0x37
   3f996:	e7ee      	b.n	3f976 <parse_hex4+0x16>
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
   3f998:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   3f99c:	2b05      	cmp	r3, #5
   3f99e:	d802      	bhi.n	3f9a6 <parse_hex4+0x46>
            h += (unsigned int) 10 + input[i] - 'a';
   3f9a0:	f1a0 0357 	sub.w	r3, r0, #87	; 0x57
   3f9a4:	e7e7      	b.n	3f976 <parse_hex4+0x16>
            return 0;
   3f9a6:	2000      	movs	r0, #0
   3f9a8:	e7ee      	b.n	3f988 <parse_hex4+0x28>

0003f9aa <buffer_skip_whitespace>:
{
   3f9aa:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->content == NULL))
   3f9ac:	b128      	cbz	r0, 3f9ba <buffer_skip_whitespace+0x10>
   3f9ae:	6801      	ldr	r1, [r0, #0]
   3f9b0:	b189      	cbz	r1, 3f9d6 <buffer_skip_whitespace+0x2c>
    if (cannot_access_at_index(buffer, 0))
   3f9b2:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
   3f9b6:	429a      	cmp	r2, r3
   3f9b8:	d302      	bcc.n	3f9c0 <buffer_skip_whitespace+0x16>
}
   3f9ba:	bd10      	pop	{r4, pc}
       buffer->offset++;
   3f9bc:	3201      	adds	r2, #1
   3f9be:	6082      	str	r2, [r0, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
   3f9c0:	6882      	ldr	r2, [r0, #8]
   3f9c2:	4293      	cmp	r3, r2
   3f9c4:	d903      	bls.n	3f9ce <buffer_skip_whitespace+0x24>
   3f9c6:	5c8c      	ldrb	r4, [r1, r2]
   3f9c8:	2c20      	cmp	r4, #32
   3f9ca:	d9f7      	bls.n	3f9bc <buffer_skip_whitespace+0x12>
   3f9cc:	e7f5      	b.n	3f9ba <buffer_skip_whitespace+0x10>
    if (buffer->offset == buffer->length)
   3f9ce:	d1f4      	bne.n	3f9ba <buffer_skip_whitespace+0x10>
        buffer->offset--;
   3f9d0:	3b01      	subs	r3, #1
   3f9d2:	6083      	str	r3, [r0, #8]
   3f9d4:	e7f1      	b.n	3f9ba <buffer_skip_whitespace+0x10>
        return NULL;
   3f9d6:	4608      	mov	r0, r1
   3f9d8:	e7ef      	b.n	3f9ba <buffer_skip_whitespace+0x10>

0003f9da <get_array_item>:
    if (array == NULL)
   3f9da:	b110      	cbz	r0, 3f9e2 <get_array_item+0x8>
    current_child = array->child;
   3f9dc:	6880      	ldr	r0, [r0, #8]
    while ((current_child != NULL) && (index > 0))
   3f9de:	b100      	cbz	r0, 3f9e2 <get_array_item+0x8>
   3f9e0:	b901      	cbnz	r1, 3f9e4 <get_array_item+0xa>
}
   3f9e2:	4770      	bx	lr
        current_child = current_child->next;
   3f9e4:	6800      	ldr	r0, [r0, #0]
        index--;
   3f9e6:	3901      	subs	r1, #1
        current_child = current_child->next;
   3f9e8:	e7f9      	b.n	3f9de <get_array_item+0x4>

0003f9ea <update_offset>:
{
   3f9ea:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->buffer == NULL))
   3f9ec:	4604      	mov	r4, r0
   3f9ee:	b140      	cbz	r0, 3fa02 <update_offset+0x18>
   3f9f0:	6803      	ldr	r3, [r0, #0]
   3f9f2:	b133      	cbz	r3, 3fa02 <update_offset+0x18>
    buffer_pointer = buffer->buffer + buffer->offset;
   3f9f4:	6880      	ldr	r0, [r0, #8]
    buffer->offset += strlen((const char*)buffer_pointer);
   3f9f6:	4418      	add	r0, r3
   3f9f8:	f7dd fc23 	bl	1d242 <strlen>
   3f9fc:	68a3      	ldr	r3, [r4, #8]
   3f9fe:	4418      	add	r0, r3
   3fa00:	60a0      	str	r0, [r4, #8]
}
   3fa02:	bd10      	pop	{r4, pc}

0003fa04 <add_item_to_array>:
    if ((item == NULL) || (array == NULL) || (array == item))
   3fa04:	b181      	cbz	r1, 3fa28 <add_item_to_array+0x24>
   3fa06:	b138      	cbz	r0, 3fa18 <add_item_to_array+0x14>
   3fa08:	4281      	cmp	r1, r0
   3fa0a:	d00d      	beq.n	3fa28 <add_item_to_array+0x24>
    child = array->child;
   3fa0c:	6883      	ldr	r3, [r0, #8]
    if (child == NULL)
   3fa0e:	b923      	cbnz	r3, 3fa1a <add_item_to_array+0x16>
        array->child = item;
   3fa10:	6081      	str	r1, [r0, #8]
        item->next = NULL;
   3fa12:	e9c1 3100 	strd	r3, r1, [r1]
   3fa16:	2001      	movs	r0, #1
}
   3fa18:	4770      	bx	lr
        if (child->prev)
   3fa1a:	685a      	ldr	r2, [r3, #4]
   3fa1c:	2a00      	cmp	r2, #0
   3fa1e:	d0fa      	beq.n	3fa16 <add_item_to_array+0x12>
    prev->next = item;
   3fa20:	6011      	str	r1, [r2, #0]
    item->prev = prev;
   3fa22:	604a      	str	r2, [r1, #4]
            array->child->prev = item;
   3fa24:	6059      	str	r1, [r3, #4]
   3fa26:	e7f6      	b.n	3fa16 <add_item_to_array+0x12>
        return false;
   3fa28:	2000      	movs	r0, #0
   3fa2a:	4770      	bx	lr

0003fa2c <ensure>:
{
   3fa2c:	b570      	push	{r4, r5, r6, lr}
    if ((p == NULL) || (p->buffer == NULL))
   3fa2e:	4604      	mov	r4, r0
   3fa30:	b1b8      	cbz	r0, 3fa62 <ensure+0x36>
   3fa32:	6805      	ldr	r5, [r0, #0]
   3fa34:	b165      	cbz	r5, 3fa50 <ensure+0x24>
    if ((p->length > 0) && (p->offset >= p->length))
   3fa36:	6842      	ldr	r2, [r0, #4]
   3fa38:	b112      	cbz	r2, 3fa40 <ensure+0x14>
   3fa3a:	6883      	ldr	r3, [r0, #8]
   3fa3c:	429a      	cmp	r2, r3
   3fa3e:	d910      	bls.n	3fa62 <ensure+0x36>
    if (needed > INT_MAX)
   3fa40:	2900      	cmp	r1, #0
   3fa42:	db0e      	blt.n	3fa62 <ensure+0x36>
    needed += p->offset + 1;
   3fa44:	68a0      	ldr	r0, [r4, #8]
   3fa46:	4401      	add	r1, r0
   3fa48:	1c4b      	adds	r3, r1, #1
    if (needed <= p->length)
   3fa4a:	429a      	cmp	r2, r3
   3fa4c:	d302      	bcc.n	3fa54 <ensure+0x28>
        return p->buffer + p->offset;
   3fa4e:	4405      	add	r5, r0
}
   3fa50:	4628      	mov	r0, r5
   3fa52:	bd70      	pop	{r4, r5, r6, pc}
    if (p->noalloc) {
   3fa54:	6922      	ldr	r2, [r4, #16]
   3fa56:	b922      	cbnz	r2, 3fa62 <ensure+0x36>
    if (needed > (INT_MAX / 2))
   3fa58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   3fa5c:	d303      	bcc.n	3fa66 <ensure+0x3a>
        if (needed <= INT_MAX)
   3fa5e:	2b00      	cmp	r3, #0
   3fa60:	da0f      	bge.n	3fa82 <ensure+0x56>
        return NULL;
   3fa62:	2500      	movs	r5, #0
   3fa64:	e7f4      	b.n	3fa50 <ensure+0x24>
        newsize = needed + 1;
   3fa66:	1c8e      	adds	r6, r1, #2
    if (p->hooks.reallocate != NULL)
   3fa68:	6a23      	ldr	r3, [r4, #32]
   3fa6a:	b16b      	cbz	r3, 3fa88 <ensure+0x5c>
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
   3fa6c:	4628      	mov	r0, r5
   3fa6e:	4631      	mov	r1, r6
   3fa70:	4798      	blx	r3
        if (newbuffer == NULL)
   3fa72:	4605      	mov	r5, r0
   3fa74:	b9b0      	cbnz	r0, 3faa4 <ensure+0x78>
            p->hooks.deallocate(p->buffer);
   3fa76:	69e3      	ldr	r3, [r4, #28]
   3fa78:	6820      	ldr	r0, [r4, #0]
   3fa7a:	4798      	blx	r3
            p->buffer = NULL;
   3fa7c:	e9c4 5500 	strd	r5, r5, [r4]
            return NULL;
   3fa80:	e7e6      	b.n	3fa50 <ensure+0x24>
            newsize = INT_MAX;
   3fa82:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   3fa86:	e7ef      	b.n	3fa68 <ensure+0x3c>
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
   3fa88:	4630      	mov	r0, r6
   3fa8a:	69a3      	ldr	r3, [r4, #24]
   3fa8c:	4798      	blx	r3
        if (!newbuffer)
   3fa8e:	4605      	mov	r5, r0
   3fa90:	2800      	cmp	r0, #0
   3fa92:	d0f0      	beq.n	3fa76 <ensure+0x4a>
            memcpy(newbuffer, p->buffer, p->offset + 1);
   3fa94:	68a2      	ldr	r2, [r4, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3fa96:	6821      	ldr	r1, [r4, #0]
   3fa98:	3201      	adds	r2, #1
   3fa9a:	f001 fc83 	bl	413a4 <memcpy>
        p->hooks.deallocate(p->buffer);
   3fa9e:	69e3      	ldr	r3, [r4, #28]
   3faa0:	6820      	ldr	r0, [r4, #0]
   3faa2:	4798      	blx	r3
    return newbuffer + p->offset;
   3faa4:	68a3      	ldr	r3, [r4, #8]
    p->buffer = newbuffer;
   3faa6:	e9c4 5600 	strd	r5, r6, [r4]
    return newbuffer + p->offset;
   3faaa:	441d      	add	r5, r3
   3faac:	e7d0      	b.n	3fa50 <ensure+0x24>

0003faae <cJSON_New_Item.isra.0>:
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
   3faae:	4603      	mov	r3, r0
   3fab0:	b510      	push	{r4, lr}
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
   3fab2:	2028      	movs	r0, #40	; 0x28
   3fab4:	4798      	blx	r3
    if (node)
   3fab6:	4604      	mov	r4, r0
   3fab8:	b118      	cbz	r0, 3fac2 <cJSON_New_Item.isra.0+0x14>
__ssp_bos_icheck3(memset, void *, int)
   3faba:	2228      	movs	r2, #40	; 0x28
   3fabc:	2100      	movs	r1, #0
   3fabe:	f001 fc91 	bl	413e4 <memset>
}
   3fac2:	4620      	mov	r0, r4
   3fac4:	bd10      	pop	{r4, pc}

0003fac6 <cJSON_ParseWithOpts>:
{
   3fac6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3fac8:	460d      	mov	r5, r1
    if (NULL == value)
   3faca:	4604      	mov	r4, r0
{
   3facc:	9201      	str	r2, [sp, #4]
    if (NULL == value)
   3face:	b150      	cbz	r0, 3fae6 <cJSON_ParseWithOpts+0x20>
    buffer_length = strlen(value) + sizeof("");
   3fad0:	f7dd fbb7 	bl	1d242 <strlen>
    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
   3fad4:	462a      	mov	r2, r5
   3fad6:	1c41      	adds	r1, r0, #1
   3fad8:	4620      	mov	r0, r4
   3fada:	9b01      	ldr	r3, [sp, #4]
}
   3fadc:	b003      	add	sp, #12
   3fade:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
   3fae2:	f7f2 ba4f 	b.w	31f84 <cJSON_ParseWithLengthOpts>
}
   3fae6:	b003      	add	sp, #12
   3fae8:	bd30      	pop	{r4, r5, pc}

0003faea <cJSON_Parse>:
    return cJSON_ParseWithOpts(value, 0, 0);
   3faea:	2200      	movs	r2, #0
   3faec:	4611      	mov	r1, r2
   3faee:	f7ff bfea 	b.w	3fac6 <cJSON_ParseWithOpts>

0003faf2 <cJSON_PrintUnformatted>:
    return (char*)print(item, false, &global_hooks);
   3faf2:	2100      	movs	r1, #0
   3faf4:	f7f2 b9b2 	b.w	31e5c <print.constprop.0>

0003faf8 <cJSON_GetArraySize>:
    if (array == NULL)
   3faf8:	b110      	cbz	r0, 3fb00 <cJSON_GetArraySize+0x8>
    child = array->child;
   3fafa:	6883      	ldr	r3, [r0, #8]
    size_t size = 0;
   3fafc:	2000      	movs	r0, #0
    while(child != NULL)
   3fafe:	b903      	cbnz	r3, 3fb02 <cJSON_GetArraySize+0xa>
}
   3fb00:	4770      	bx	lr
        child = child->next;
   3fb02:	681b      	ldr	r3, [r3, #0]
        size++;
   3fb04:	3001      	adds	r0, #1
        child = child->next;
   3fb06:	e7fa      	b.n	3fafe <cJSON_GetArraySize+0x6>

0003fb08 <cJSON_GetArrayItem>:
    if (index < 0)
   3fb08:	2900      	cmp	r1, #0
   3fb0a:	db01      	blt.n	3fb10 <cJSON_GetArrayItem+0x8>
    return get_array_item(array, (size_t)index);
   3fb0c:	f7ff bf65 	b.w	3f9da <get_array_item>
}
   3fb10:	2000      	movs	r0, #0
   3fb12:	4770      	bx	lr

0003fb14 <cJSON_GetObjectItem>:
    return get_object_item(object, string, false);
   3fb14:	2200      	movs	r2, #0
   3fb16:	f7f1 bea5 	b.w	31864 <get_object_item>

0003fb1a <cJSON_HasObjectItem>:
{
   3fb1a:	b508      	push	{r3, lr}
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
   3fb1c:	f7ff fffa 	bl	3fb14 <cJSON_GetObjectItem>
}
   3fb20:	3800      	subs	r0, #0
   3fb22:	bf18      	it	ne
   3fb24:	2001      	movne	r0, #1
   3fb26:	bd08      	pop	{r3, pc}

0003fb28 <cJSON_AddItemToArray>:
    return add_item_to_array(array, item);
   3fb28:	f7ff bf6c 	b.w	3fa04 <add_item_to_array>

0003fb2c <cJSON_AddItemToObject>:
    return add_item_to_object(object, string, item, &global_hooks, false);
   3fb2c:	2300      	movs	r3, #0
   3fb2e:	f7f1 bf97 	b.w	31a60 <add_item_to_object.constprop.0>

0003fb32 <cJSON_AddItemToObjectCS>:
    return add_item_to_object(object, string, item, &global_hooks, true);
   3fb32:	2301      	movs	r3, #1
   3fb34:	f7f1 bf94 	b.w	31a60 <add_item_to_object.constprop.0>

0003fb38 <cJSON_DetachItemViaPointer>:
{
   3fb38:	b510      	push	{r4, lr}
    if ((parent == NULL) || (item == NULL))
   3fb3a:	b190      	cbz	r0, 3fb62 <cJSON_DetachItemViaPointer+0x2a>
   3fb3c:	b179      	cbz	r1, 3fb5e <cJSON_DetachItemViaPointer+0x26>
    if (item != parent->child)
   3fb3e:	6883      	ldr	r3, [r0, #8]
   3fb40:	428b      	cmp	r3, r1
        item->prev->next = item->next;
   3fb42:	bf1c      	itt	ne
   3fb44:	e9d1 4200 	ldrdne	r4, r2, [r1]
   3fb48:	6014      	strne	r4, [r2, #0]
    if (item->next != NULL)
   3fb4a:	680a      	ldr	r2, [r1, #0]
   3fb4c:	b15a      	cbz	r2, 3fb66 <cJSON_DetachItemViaPointer+0x2e>
        item->next->prev = item->prev;
   3fb4e:	684c      	ldr	r4, [r1, #4]
    if (item == parent->child)
   3fb50:	428b      	cmp	r3, r1
        item->next->prev = item->prev;
   3fb52:	6054      	str	r4, [r2, #4]
    if (item == parent->child)
   3fb54:	d100      	bne.n	3fb58 <cJSON_DetachItemViaPointer+0x20>
        parent->child = item->next;
   3fb56:	6082      	str	r2, [r0, #8]
    item->prev = NULL;
   3fb58:	2300      	movs	r3, #0
    item->next = NULL;
   3fb5a:	e9c1 3300 	strd	r3, r3, [r1]
}
   3fb5e:	4608      	mov	r0, r1
   3fb60:	bd10      	pop	{r4, pc}
        return NULL;
   3fb62:	4601      	mov	r1, r0
   3fb64:	e7fb      	b.n	3fb5e <cJSON_DetachItemViaPointer+0x26>
    if (item == parent->child)
   3fb66:	428b      	cmp	r3, r1
   3fb68:	d0f5      	beq.n	3fb56 <cJSON_DetachItemViaPointer+0x1e>
        parent->child->prev = item->prev;
   3fb6a:	684a      	ldr	r2, [r1, #4]
   3fb6c:	605a      	str	r2, [r3, #4]
   3fb6e:	e7f3      	b.n	3fb58 <cJSON_DetachItemViaPointer+0x20>

0003fb70 <cJSON_DetachItemFromObject>:
{
   3fb70:	b510      	push	{r4, lr}
   3fb72:	4604      	mov	r4, r0
    cJSON *to_detach = cJSON_GetObjectItem(object, string);
   3fb74:	f7ff ffce 	bl	3fb14 <cJSON_GetObjectItem>
   3fb78:	4601      	mov	r1, r0
    return cJSON_DetachItemViaPointer(object, to_detach);
   3fb7a:	4620      	mov	r0, r4
}
   3fb7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return cJSON_DetachItemViaPointer(object, to_detach);
   3fb80:	f7ff bfda 	b.w	3fb38 <cJSON_DetachItemViaPointer>

0003fb84 <cJSON_DeleteItemFromObject>:
{
   3fb84:	b508      	push	{r3, lr}
    cJSON_Delete(cJSON_DetachItemFromObject(object, string));
   3fb86:	f7ff fff3 	bl	3fb70 <cJSON_DetachItemFromObject>
}
   3fb8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    cJSON_Delete(cJSON_DetachItemFromObject(object, string));
   3fb8e:	f7f2 b9d5 	b.w	31f3c <cJSON_Delete>

0003fb92 <cJSON_AddNullToObjectCS>:
{
   3fb92:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3fb94:	4605      	mov	r5, r0
   3fb96:	9101      	str	r1, [sp, #4]
    cJSON *null = cJSON_CreateNull();
   3fb98:	f7f2 fa62 	bl	32060 <cJSON_CreateNull>
    if (add_item_to_object(object, name, null, &global_hooks, true))
   3fb9c:	2301      	movs	r3, #1
   3fb9e:	4602      	mov	r2, r0
    cJSON *null = cJSON_CreateNull();
   3fba0:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, null, &global_hooks, true))
   3fba2:	9901      	ldr	r1, [sp, #4]
   3fba4:	4628      	mov	r0, r5
   3fba6:	f7f1 ff5b 	bl	31a60 <add_item_to_object.constprop.0>
   3fbaa:	4605      	mov	r5, r0
   3fbac:	b918      	cbnz	r0, 3fbb6 <cJSON_AddNullToObjectCS+0x24>
    cJSON_Delete(null);
   3fbae:	4620      	mov	r0, r4
   3fbb0:	f7f2 f9c4 	bl	31f3c <cJSON_Delete>
    return NULL;
   3fbb4:	462c      	mov	r4, r5
}
   3fbb6:	4620      	mov	r0, r4
   3fbb8:	b003      	add	sp, #12
   3fbba:	bd30      	pop	{r4, r5, pc}

0003fbbc <cJSON_AddNumberToObjectCS>:
{
   3fbbc:	b570      	push	{r4, r5, r6, lr}
   3fbbe:	4605      	mov	r5, r0
   3fbc0:	460e      	mov	r6, r1
    cJSON *number_item = cJSON_CreateNumber(number);
   3fbc2:	4610      	mov	r0, r2
   3fbc4:	4619      	mov	r1, r3
   3fbc6:	f7de fc97 	bl	1e4f8 <cJSON_CreateNumber>
    if (add_item_to_object(object, name, number_item, &global_hooks, true))
   3fbca:	2301      	movs	r3, #1
   3fbcc:	4602      	mov	r2, r0
    cJSON *number_item = cJSON_CreateNumber(number);
   3fbce:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, number_item, &global_hooks, true))
   3fbd0:	4631      	mov	r1, r6
   3fbd2:	4628      	mov	r0, r5
   3fbd4:	f7f1 ff44 	bl	31a60 <add_item_to_object.constprop.0>
   3fbd8:	4605      	mov	r5, r0
   3fbda:	b918      	cbnz	r0, 3fbe4 <cJSON_AddNumberToObjectCS+0x28>
    cJSON_Delete(number_item);
   3fbdc:	4620      	mov	r0, r4
   3fbde:	f7f2 f9ad 	bl	31f3c <cJSON_Delete>
    return NULL;
   3fbe2:	462c      	mov	r4, r5
}
   3fbe4:	4620      	mov	r0, r4
   3fbe6:	bd70      	pop	{r4, r5, r6, pc}

0003fbe8 <cJSON_AddNumberToObject>:
{
   3fbe8:	b570      	push	{r4, r5, r6, lr}
   3fbea:	4605      	mov	r5, r0
   3fbec:	460e      	mov	r6, r1
    cJSON *number_item = cJSON_CreateNumber(number);
   3fbee:	4610      	mov	r0, r2
   3fbf0:	4619      	mov	r1, r3
   3fbf2:	f7de fc81 	bl	1e4f8 <cJSON_CreateNumber>
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
   3fbf6:	2300      	movs	r3, #0
   3fbf8:	4602      	mov	r2, r0
    cJSON *number_item = cJSON_CreateNumber(number);
   3fbfa:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
   3fbfc:	4631      	mov	r1, r6
   3fbfe:	4628      	mov	r0, r5
   3fc00:	f7f1 ff2e 	bl	31a60 <add_item_to_object.constprop.0>
   3fc04:	4605      	mov	r5, r0
   3fc06:	b918      	cbnz	r0, 3fc10 <cJSON_AddNumberToObject+0x28>
    cJSON_Delete(number_item);
   3fc08:	4620      	mov	r0, r4
   3fc0a:	f7f2 f997 	bl	31f3c <cJSON_Delete>
    return NULL;
   3fc0e:	462c      	mov	r4, r5
}
   3fc10:	4620      	mov	r0, r4
   3fc12:	bd70      	pop	{r4, r5, r6, pc}

0003fc14 <cJSON_AddStringToObjectCS>:
{
   3fc14:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3fc16:	4605      	mov	r5, r0
    cJSON *string_item = cJSON_CreateString(string);
   3fc18:	4610      	mov	r0, r2
{
   3fc1a:	9101      	str	r1, [sp, #4]
    cJSON *string_item = cJSON_CreateString(string);
   3fc1c:	f7f2 fa2c 	bl	32078 <cJSON_CreateString>
    if (add_item_to_object(object, name, string_item, &global_hooks, true))
   3fc20:	2301      	movs	r3, #1
   3fc22:	4602      	mov	r2, r0
    cJSON *string_item = cJSON_CreateString(string);
   3fc24:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, string_item, &global_hooks, true))
   3fc26:	9901      	ldr	r1, [sp, #4]
   3fc28:	4628      	mov	r0, r5
   3fc2a:	f7f1 ff19 	bl	31a60 <add_item_to_object.constprop.0>
   3fc2e:	4605      	mov	r5, r0
   3fc30:	b918      	cbnz	r0, 3fc3a <cJSON_AddStringToObjectCS+0x26>
    cJSON_Delete(string_item);
   3fc32:	4620      	mov	r0, r4
   3fc34:	f7f2 f982 	bl	31f3c <cJSON_Delete>
    return NULL;
   3fc38:	462c      	mov	r4, r5
}
   3fc3a:	4620      	mov	r0, r4
   3fc3c:	b003      	add	sp, #12
   3fc3e:	bd30      	pop	{r4, r5, pc}

0003fc40 <cJSON_AddStringToObject>:
{
   3fc40:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3fc42:	4605      	mov	r5, r0
    cJSON *string_item = cJSON_CreateString(string);
   3fc44:	4610      	mov	r0, r2
{
   3fc46:	9101      	str	r1, [sp, #4]
    cJSON *string_item = cJSON_CreateString(string);
   3fc48:	f7f2 fa16 	bl	32078 <cJSON_CreateString>
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
   3fc4c:	2300      	movs	r3, #0
   3fc4e:	4602      	mov	r2, r0
    cJSON *string_item = cJSON_CreateString(string);
   3fc50:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
   3fc52:	9901      	ldr	r1, [sp, #4]
   3fc54:	4628      	mov	r0, r5
   3fc56:	f7f1 ff03 	bl	31a60 <add_item_to_object.constprop.0>
   3fc5a:	4605      	mov	r5, r0
   3fc5c:	b918      	cbnz	r0, 3fc66 <cJSON_AddStringToObject+0x26>
    cJSON_Delete(string_item);
   3fc5e:	4620      	mov	r0, r4
   3fc60:	f7f2 f96c 	bl	31f3c <cJSON_Delete>
    return NULL;
   3fc64:	462c      	mov	r4, r5
}
   3fc66:	4620      	mov	r0, r4
   3fc68:	b003      	add	sp, #12
   3fc6a:	bd30      	pop	{r4, r5, pc}

0003fc6c <cJSON_AddArrayToObjectCS>:
{
   3fc6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3fc6e:	4605      	mov	r5, r0
   3fc70:	9101      	str	r1, [sp, #4]
    cJSON *array = cJSON_CreateArray();
   3fc72:	f7f2 fa19 	bl	320a8 <cJSON_CreateArray>
    if (add_item_to_object(object, name, array, &global_hooks, true))
   3fc76:	2301      	movs	r3, #1
   3fc78:	4602      	mov	r2, r0
    cJSON *array = cJSON_CreateArray();
   3fc7a:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, array, &global_hooks, true))
   3fc7c:	9901      	ldr	r1, [sp, #4]
   3fc7e:	4628      	mov	r0, r5
   3fc80:	f7f1 feee 	bl	31a60 <add_item_to_object.constprop.0>
   3fc84:	4605      	mov	r5, r0
   3fc86:	b918      	cbnz	r0, 3fc90 <cJSON_AddArrayToObjectCS+0x24>
    cJSON_Delete(array);
   3fc88:	4620      	mov	r0, r4
   3fc8a:	f7f2 f957 	bl	31f3c <cJSON_Delete>
    return NULL;
   3fc8e:	462c      	mov	r4, r5
}
   3fc90:	4620      	mov	r0, r4
   3fc92:	b003      	add	sp, #12
   3fc94:	bd30      	pop	{r4, r5, pc}

0003fc96 <cJSON_AddArrayToObject>:
{
   3fc96:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3fc98:	4605      	mov	r5, r0
   3fc9a:	9101      	str	r1, [sp, #4]
    cJSON *array = cJSON_CreateArray();
   3fc9c:	f7f2 fa04 	bl	320a8 <cJSON_CreateArray>
    if (add_item_to_object(object, name, array, &global_hooks, false))
   3fca0:	2300      	movs	r3, #0
   3fca2:	4602      	mov	r2, r0
    cJSON *array = cJSON_CreateArray();
   3fca4:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, array, &global_hooks, false))
   3fca6:	9901      	ldr	r1, [sp, #4]
   3fca8:	4628      	mov	r0, r5
   3fcaa:	f7f1 fed9 	bl	31a60 <add_item_to_object.constprop.0>
   3fcae:	4605      	mov	r5, r0
   3fcb0:	b918      	cbnz	r0, 3fcba <cJSON_AddArrayToObject+0x24>
    cJSON_Delete(array);
   3fcb2:	4620      	mov	r0, r4
   3fcb4:	f7f2 f942 	bl	31f3c <cJSON_Delete>
    return NULL;
   3fcb8:	462c      	mov	r4, r5
}
   3fcba:	4620      	mov	r0, r4
   3fcbc:	b003      	add	sp, #12
   3fcbe:	bd30      	pop	{r4, r5, pc}

0003fcc0 <cJSON_AddObjectToObjectCS>:
{
   3fcc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3fcc2:	4605      	mov	r5, r0
   3fcc4:	9101      	str	r1, [sp, #4]
    cJSON *object_item = cJSON_CreateObject();
   3fcc6:	f7f2 f9fb 	bl	320c0 <cJSON_CreateObject>
    if (add_item_to_object(object, name, object_item, &global_hooks, true))
   3fcca:	2301      	movs	r3, #1
   3fccc:	4602      	mov	r2, r0
    cJSON *object_item = cJSON_CreateObject();
   3fcce:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, object_item, &global_hooks, true))
   3fcd0:	9901      	ldr	r1, [sp, #4]
   3fcd2:	4628      	mov	r0, r5
   3fcd4:	f7f1 fec4 	bl	31a60 <add_item_to_object.constprop.0>
   3fcd8:	4605      	mov	r5, r0
   3fcda:	b918      	cbnz	r0, 3fce4 <cJSON_AddObjectToObjectCS+0x24>
    cJSON_Delete(object_item);
   3fcdc:	4620      	mov	r0, r4
   3fcde:	f7f2 f92d 	bl	31f3c <cJSON_Delete>
    return NULL;
   3fce2:	462c      	mov	r4, r5
}
   3fce4:	4620      	mov	r0, r4
   3fce6:	b003      	add	sp, #12
   3fce8:	bd30      	pop	{r4, r5, pc}

0003fcea <cJSON_AddObjectToObject>:
{
   3fcea:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3fcec:	4605      	mov	r5, r0
   3fcee:	9101      	str	r1, [sp, #4]
    cJSON *object_item = cJSON_CreateObject();
   3fcf0:	f7f2 f9e6 	bl	320c0 <cJSON_CreateObject>
    if (add_item_to_object(object, name, object_item, &global_hooks, false))
   3fcf4:	2300      	movs	r3, #0
   3fcf6:	4602      	mov	r2, r0
    cJSON *object_item = cJSON_CreateObject();
   3fcf8:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, object_item, &global_hooks, false))
   3fcfa:	9901      	ldr	r1, [sp, #4]
   3fcfc:	4628      	mov	r0, r5
   3fcfe:	f7f1 feaf 	bl	31a60 <add_item_to_object.constprop.0>
   3fd02:	4605      	mov	r5, r0
   3fd04:	b918      	cbnz	r0, 3fd0e <cJSON_AddObjectToObject+0x24>
    cJSON_Delete(object_item);
   3fd06:	4620      	mov	r0, r4
   3fd08:	f7f2 f918 	bl	31f3c <cJSON_Delete>
    return NULL;
   3fd0c:	462c      	mov	r4, r5
}
   3fd0e:	4620      	mov	r0, r4
   3fd10:	b003      	add	sp, #12
   3fd12:	bd30      	pop	{r4, r5, pc}

0003fd14 <cJSON_IsNull>:
    if (item == NULL)
   3fd14:	b118      	cbz	r0, 3fd1e <cJSON_IsNull+0xa>
    return (item->type & 0xFF) == cJSON_NULL;
   3fd16:	7b00      	ldrb	r0, [r0, #12]
   3fd18:	1f03      	subs	r3, r0, #4
   3fd1a:	4258      	negs	r0, r3
   3fd1c:	4158      	adcs	r0, r3
}
   3fd1e:	4770      	bx	lr

0003fd20 <cJSON_IsNumber>:
    if (item == NULL)
   3fd20:	b120      	cbz	r0, 3fd2c <cJSON_IsNumber+0xc>
    return (item->type & 0xFF) == cJSON_Number;
   3fd22:	7b00      	ldrb	r0, [r0, #12]
   3fd24:	f1a0 0308 	sub.w	r3, r0, #8
   3fd28:	4258      	negs	r0, r3
   3fd2a:	4158      	adcs	r0, r3
}
   3fd2c:	4770      	bx	lr

0003fd2e <cJSON_IsString>:
    if (item == NULL)
   3fd2e:	b120      	cbz	r0, 3fd3a <cJSON_IsString+0xc>
    return (item->type & 0xFF) == cJSON_String;
   3fd30:	7b00      	ldrb	r0, [r0, #12]
   3fd32:	f1a0 0310 	sub.w	r3, r0, #16
   3fd36:	4258      	negs	r0, r3
   3fd38:	4158      	adcs	r0, r3
}
   3fd3a:	4770      	bx	lr

0003fd3c <cJSON_GetStringValue>:
{
   3fd3c:	b508      	push	{r3, lr}
   3fd3e:	4602      	mov	r2, r0
    if (!cJSON_IsString(item)) 
   3fd40:	f7ff fff5 	bl	3fd2e <cJSON_IsString>
   3fd44:	b100      	cbz	r0, 3fd48 <cJSON_GetStringValue+0xc>
    return item->valuestring;
   3fd46:	6910      	ldr	r0, [r2, #16]
}
   3fd48:	bd08      	pop	{r3, pc}

0003fd4a <cJSON_IsArray>:
    if (item == NULL)
   3fd4a:	b120      	cbz	r0, 3fd56 <cJSON_IsArray+0xc>
    return (item->type & 0xFF) == cJSON_Array;
   3fd4c:	7b00      	ldrb	r0, [r0, #12]
   3fd4e:	f1a0 0320 	sub.w	r3, r0, #32
   3fd52:	4258      	negs	r0, r3
   3fd54:	4158      	adcs	r0, r3
}
   3fd56:	4770      	bx	lr

0003fd58 <malloc_fn_hook>:
static void *malloc_fn_hook(size_t sz) { return k_malloc(sz); }
   3fd58:	f001 ba9a 	b.w	41290 <k_malloc>

0003fd5c <free_fn_hook>:
   3fd5c:	f001 ba91 	b.w	41282 <k_free>

0003fd60 <cJSON_FreeString>:
static void free_fn_hook(void *p_ptr) { k_free(p_ptr); }
   3fd60:	f001 ba8f 	b.w	41282 <k_free>

0003fd64 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   3fd64:	4700      	bx	r0

0003fd66 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   3fd66:	f001 b9af 	b.w	410c8 <z_impl_k_busy_wait>

0003fd6a <nrf_gpio_pin_present_check>:
    switch (port)
   3fd6a:	0943      	lsrs	r3, r0, #5
   3fd6c:	bf0c      	ite	eq
   3fd6e:	f04f 33ff 	moveq.w	r3, #4294967295
   3fd72:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   3fd74:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   3fd78:	fa23 f000 	lsr.w	r0, r3, r0
}
   3fd7c:	f000 0001 	and.w	r0, r0, #1
   3fd80:	4770      	bx	lr

0003fd82 <pin_is_task_output>:
{
   3fd82:	b508      	push	{r3, lr}
   3fd84:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   3fd86:	f7f2 fb99 	bl	324bc <pin_is_output>
   3fd8a:	b110      	cbz	r0, 3fd92 <pin_is_task_output+0x10>
   3fd8c:	4610      	mov	r0, r2
   3fd8e:	f7f2 fb7f 	bl	32490 <pin_in_use_by_te>
}
   3fd92:	f000 0001 	and.w	r0, r0, #1
   3fd96:	bd08      	pop	{r3, pc}

0003fd98 <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   3fd98:	0080      	lsls	r0, r0, #2
}
   3fd9a:	f500 7080 	add.w	r0, r0, #256	; 0x100
   3fd9e:	4770      	bx	lr

0003fda0 <nrf_gpio_reconfigure>:
{
   3fda0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3fda4:	4690      	mov	r8, r2
   3fda6:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   3fdaa:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3fdac:	a801      	add	r0, sp, #4
{
   3fdae:	460e      	mov	r6, r1
   3fdb0:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3fdb2:	f7f2 fc07 	bl	325c4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   3fdb6:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   3fdb8:	f1b8 0f00 	cmp.w	r8, #0
   3fdbc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   3fdc0:	bf14      	ite	ne
   3fdc2:	2302      	movne	r3, #2
   3fdc4:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   3fdc6:	2e00      	cmp	r6, #0
   3fdc8:	bf18      	it	ne
   3fdca:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   3fdce:	2d00      	cmp	r5, #0
   3fdd0:	bf14      	ite	ne
   3fdd2:	210c      	movne	r1, #12
   3fdd4:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   3fdd6:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   3fdd8:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   3fddc:	bf14      	ite	ne
   3fdde:	f44f 61e0 	movne.w	r1, #1792	; 0x700
   3fde2:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   3fde4:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   3fde6:	ea43 0301 	orr.w	r3, r3, r1
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   3fdea:	bf14      	ite	ne
   3fdec:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   3fdf0:	2100      	moveq	r1, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
   3fdf2:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   3fdf6:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   3fdf8:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   3fdfc:	b106      	cbz	r6, 3fe00 <nrf_gpio_reconfigure+0x60>
   3fdfe:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   3fe00:	f1b8 0f00 	cmp.w	r8, #0
   3fe04:	d003      	beq.n	3fe0e <nrf_gpio_reconfigure+0x6e>
   3fe06:	f898 8000 	ldrb.w	r8, [r8]
   3fe0a:	ea4f 0848 	mov.w	r8, r8, lsl #1
   3fe0e:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   3fe10:	b10d      	cbz	r5, 3fe16 <nrf_gpio_reconfigure+0x76>
   3fe12:	782d      	ldrb	r5, [r5, #0]
   3fe14:	00ad      	lsls	r5, r5, #2
   3fe16:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   3fe1a:	b10c      	cbz	r4, 3fe20 <nrf_gpio_reconfigure+0x80>
   3fe1c:	7822      	ldrb	r2, [r4, #0]
   3fe1e:	0214      	lsls	r4, r2, #8
   3fe20:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   3fe22:	b10f      	cbz	r7, 3fe28 <nrf_gpio_reconfigure+0x88>
   3fe24:	783f      	ldrb	r7, [r7, #0]
   3fe26:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   3fe28:	432c      	orrs	r4, r5
   3fe2a:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   3fe2c:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
   3fe30:	b002      	add	sp, #8
   3fe32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003fe36 <nrf_gpio_cfg_sense_set>:
{
   3fe36:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   3fe38:	f10d 030f 	add.w	r3, sp, #15
   3fe3c:	9301      	str	r3, [sp, #4]
   3fe3e:	2300      	movs	r3, #0
{
   3fe40:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   3fe44:	461a      	mov	r2, r3
   3fe46:	4619      	mov	r1, r3
   3fe48:	9300      	str	r3, [sp, #0]
   3fe4a:	f7ff ffa9 	bl	3fda0 <nrf_gpio_reconfigure>
}
   3fe4e:	b005      	add	sp, #20
   3fe50:	f85d fb04 	ldr.w	pc, [sp], #4

0003fe54 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   3fe54:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   3fe58:	4770      	bx	lr

0003fe5a <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   3fe5a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   3fe5e:	4770      	bx	lr

0003fe60 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   3fe60:	f44f 7080 	mov.w	r0, #256	; 0x100
   3fe64:	4770      	bx	lr

0003fe66 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   3fe66:	7b0b      	ldrb	r3, [r1, #12]
   3fe68:	2b03      	cmp	r3, #3
   3fe6a:	d82a      	bhi.n	3fec2 <xfer_completeness_check+0x5c>
   3fe6c:	e8df f003 	tbb	[pc, r3]
   3fe70:	021a2622 	.word	0x021a2622
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   3fe74:	688b      	ldr	r3, [r1, #8]
   3fe76:	035a      	lsls	r2, r3, #13
   3fe78:	d504      	bpl.n	3fe84 <xfer_completeness_check+0x1e>
    return p_reg->TXD.AMOUNT;
   3fe7a:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
   3fe7e:	690a      	ldr	r2, [r1, #16]
   3fe80:	429a      	cmp	r2, r3
   3fe82:	d107      	bne.n	3fe94 <xfer_completeness_check+0x2e>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   3fe84:	688b      	ldr	r3, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   3fe86:	035b      	lsls	r3, r3, #13
   3fe88:	d41b      	bmi.n	3fec2 <xfer_completeness_check+0x5c>
   3fe8a:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   3fe8e:	694a      	ldr	r2, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   3fe90:	429a      	cmp	r2, r3
   3fe92:	d016      	beq.n	3fec2 <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   3fe94:	2300      	movs	r3, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   3fe96:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   3fe98:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   3fe9c:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
}
   3fea0:	4618      	mov	r0, r3
   3fea2:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   3fea4:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   3fea8:	690a      	ldr	r2, [r1, #16]
   3feaa:	429a      	cmp	r2, r3
   3feac:	d1f2      	bne.n	3fe94 <xfer_completeness_check+0x2e>
    return p_reg->RXD.AMOUNT;
   3feae:	f8d0 353c 	ldr.w	r3, [r0, #1340]	; 0x53c
   3feb2:	e7ec      	b.n	3fe8e <xfer_completeness_check+0x28>
    return p_reg->TXD.AMOUNT;
   3feb4:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   3feb8:	690a      	ldr	r2, [r1, #16]
   3feba:	e7e9      	b.n	3fe90 <xfer_completeness_check+0x2a>
    return p_reg->RXD.AMOUNT;
   3febc:	f8d0 353c 	ldr.w	r3, [r0, #1340]	; 0x53c
   3fec0:	e7fa      	b.n	3feb8 <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   3fec2:	2001      	movs	r0, #1
}
   3fec4:	4770      	bx	lr

0003fec6 <nrf_gpio_pin_set>:
{
   3fec6:	b507      	push	{r0, r1, r2, lr}
   3fec8:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3feca:	a801      	add	r0, sp, #4
   3fecc:	f7f3 fc2c 	bl	33728 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   3fed0:	2301      	movs	r3, #1
   3fed2:	9a01      	ldr	r2, [sp, #4]
   3fed4:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   3fed6:	6083      	str	r3, [r0, #8]
}
   3fed8:	b003      	add	sp, #12
   3feda:	f85d fb04 	ldr.w	pc, [sp], #4

0003fede <rpc_handle_ctrl_message>:
   3fede:	2902      	cmp	r1, #2
   3fee0:	b510      	push	{r4, lr}
   3fee2:	4604      	mov	r4, r0
   3fee4:	d005      	beq.n	3fef2 <rpc_handle_ctrl_message+0x14>
   3fee6:	2904      	cmp	r1, #4
   3fee8:	d001      	beq.n	3feee <rpc_handle_ctrl_message+0x10>
   3feea:	2901      	cmp	r1, #1
   3feec:	d107      	bne.n	3fefe <rpc_handle_ctrl_message+0x20>
   3feee:	2000      	movs	r0, #0
   3fef0:	bd10      	pop	{r4, pc}
   3fef2:	6880      	ldr	r0, [r0, #8]
   3fef4:	2800      	cmp	r0, #0
   3fef6:	d0fa      	beq.n	3feee <rpc_handle_ctrl_message+0x10>
   3fef8:	f000 f833 	bl	3ff62 <rpc_transport_local_data_free>
   3fefc:	e7f7      	b.n	3feee <rpc_handle_ctrl_message+0x10>
   3fefe:	6880      	ldr	r0, [r0, #8]
   3ff00:	b108      	cbz	r0, 3ff06 <rpc_handle_ctrl_message+0x28>
   3ff02:	f000 f82e 	bl	3ff62 <rpc_transport_local_data_free>
   3ff06:	4620      	mov	r0, r4
   3ff08:	f000 f827 	bl	3ff5a <rpc_transport_msg_free>
   3ff0c:	e7ef      	b.n	3feee <rpc_handle_ctrl_message+0x10>

0003ff0e <rpc_message_send>:
   3ff0e:	6843      	ldr	r3, [r0, #4]
   3ff10:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   3ff14:	f043 0302 	orr.w	r3, r3, #2
   3ff18:	6043      	str	r3, [r0, #4]
   3ff1a:	f000 b826 	b.w	3ff6a <rpc_transport_data_msg_send>

0003ff1e <rpc_message_alloc>:
   3ff1e:	b570      	push	{r4, r5, r6, lr}
   3ff20:	4606      	mov	r6, r0
   3ff22:	b130      	cbz	r0, 3ff32 <rpc_message_alloc+0x14>
   3ff24:	f000 f81b 	bl	3ff5e <rpc_transport_data_alloc>
   3ff28:	4605      	mov	r5, r0
   3ff2a:	b918      	cbnz	r0, 3ff34 <rpc_message_alloc+0x16>
   3ff2c:	2400      	movs	r4, #0
   3ff2e:	4620      	mov	r0, r4
   3ff30:	bd70      	pop	{r4, r5, r6, pc}
   3ff32:	4605      	mov	r5, r0
   3ff34:	f000 f80f 	bl	3ff56 <rpc_transport_data_msg_alloc>
   3ff38:	4604      	mov	r4, r0
   3ff3a:	b110      	cbz	r0, 3ff42 <rpc_message_alloc+0x24>
   3ff3c:	60c6      	str	r6, [r0, #12]
   3ff3e:	6085      	str	r5, [r0, #8]
   3ff40:	e7f5      	b.n	3ff2e <rpc_message_alloc+0x10>
   3ff42:	2d00      	cmp	r5, #0
   3ff44:	d0f2      	beq.n	3ff2c <rpc_message_alloc+0xe>
   3ff46:	4628      	mov	r0, r5
   3ff48:	f000 f80b 	bl	3ff62 <rpc_transport_local_data_free>
   3ff4c:	e7ef      	b.n	3ff2e <rpc_message_alloc+0x10>

0003ff4e <rpc_message_free>:
   3ff4e:	f000 b804 	b.w	3ff5a <rpc_transport_msg_free>

0003ff52 <rpc_message_data_free>:
   3ff52:	f000 b808 	b.w	3ff66 <rpc_transport_peer_data_free>

0003ff56 <rpc_transport_data_msg_alloc>:
   3ff56:	f7f3 bf71 	b.w	33e3c <rpc_transport_ipc_data_msg_alloc>

0003ff5a <rpc_transport_msg_free>:
   3ff5a:	f7f3 bfc1 	b.w	33ee0 <rpc_transport_ipc_msg_free>

0003ff5e <rpc_transport_data_alloc>:
   3ff5e:	f7f3 bfa1 	b.w	33ea4 <rpc_transport_ipc_data_alloc>

0003ff62 <rpc_transport_local_data_free>:
   3ff62:	f000 b808 	b.w	3ff76 <rpc_transport_ipc_local_data_free>

0003ff66 <rpc_transport_peer_data_free>:
   3ff66:	f7f3 bfe1 	b.w	33f2c <rpc_transport_ipc_peer_data_free>

0003ff6a <rpc_transport_data_msg_send>:
   3ff6a:	f7f3 bf2b 	b.w	33dc4 <rpc_transport_ipc_data_msg_send>

0003ff6e <rpc_transport_rx_data_suspend>:
   3ff6e:	f000 b809 	b.w	3ff84 <rpc_transport_ipc_rx_data_suspend>

0003ff72 <rpc_transport_rx_data_resume>:
   3ff72:	f000 b80a 	b.w	3ff8a <rpc_transport_ipc_rx_data_resume>

0003ff76 <rpc_transport_ipc_local_data_free>:
   3ff76:	b508      	push	{r3, lr}
   3ff78:	f7e5 fd82 	bl	25a80 <nrf_modem_os_shm_tx_free>
   3ff7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3ff80:	f7e5 bd24 	b.w	259cc <nrf_modem_os_application_irq_set>

0003ff84 <rpc_transport_ipc_rx_data_suspend>:
   3ff84:	2004      	movs	r0, #4
   3ff86:	f7f2 bf05 	b.w	32d94 <nrfx_ipc_receive_event_disable>

0003ff8a <rpc_transport_ipc_rx_data_resume>:
   3ff8a:	2004      	movs	r0, #4
   3ff8c:	f7f2 bee4 	b.w	32d58 <nrfx_ipc_receive_event_enable>

0003ff90 <rpc_client_request_alloc>:
   3ff90:	b508      	push	{r3, lr}
   3ff92:	f7ff ffc4 	bl	3ff1e <rpc_message_alloc>
   3ff96:	b100      	cbz	r0, 3ff9a <rpc_client_request_alloc+0xa>
   3ff98:	3008      	adds	r0, #8
   3ff9a:	bd08      	pop	{r3, pc}

0003ff9c <rpc_client_request_send>:
   3ff9c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   3ffa0:	4610      	mov	r0, r2
   3ffa2:	f840 1d08 	str.w	r1, [r0, #-8]!
   3ffa6:	f7ff bfb2 	b.w	3ff0e <rpc_message_send>

0003ffaa <rpc_client_message_free>:
   3ffaa:	3808      	subs	r0, #8
   3ffac:	f7ff bfcf 	b.w	3ff4e <rpc_message_free>

0003ffb0 <rpc_client_data_free>:
   3ffb0:	f7ff bfcf 	b.w	3ff52 <rpc_message_data_free>

0003ffb4 <rpc_gnss_serialize_utc>:
   3ffb4:	b1c0      	cbz	r0, 3ffe8 <rpc_gnss_serialize_utc+0x34>
   3ffb6:	b1b9      	cbz	r1, 3ffe8 <rpc_gnss_serialize_utc+0x34>
   3ffb8:	2301      	movs	r3, #1
   3ffba:	700b      	strb	r3, [r1, #0]
   3ffbc:	2300      	movs	r3, #0
   3ffbe:	704b      	strb	r3, [r1, #1]
   3ffc0:	6843      	ldr	r3, [r0, #4]
   3ffc2:	f8c1 3006 	str.w	r3, [r1, #6]
   3ffc6:	6803      	ldr	r3, [r0, #0]
   3ffc8:	f8c1 3002 	str.w	r3, [r1, #2]
   3ffcc:	7a83      	ldrb	r3, [r0, #10]
   3ffce:	730b      	strb	r3, [r1, #12]
   3ffd0:	7b43      	ldrb	r3, [r0, #13]
   3ffd2:	73cb      	strb	r3, [r1, #15]
   3ffd4:	7b03      	ldrb	r3, [r0, #12]
   3ffd6:	738b      	strb	r3, [r1, #14]
   3ffd8:	7a03      	ldrb	r3, [r0, #8]
   3ffda:	728b      	strb	r3, [r1, #10]
   3ffdc:	7ac3      	ldrb	r3, [r0, #11]
   3ffde:	734b      	strb	r3, [r1, #13]
   3ffe0:	7a43      	ldrb	r3, [r0, #9]
   3ffe2:	2010      	movs	r0, #16
   3ffe4:	72cb      	strb	r3, [r1, #11]
   3ffe6:	4770      	bx	lr
   3ffe8:	f04f 30ff 	mov.w	r0, #4294967295
   3ffec:	4770      	bx	lr

0003ffee <rpc_gnss_serialize_ephe>:
   3ffee:	2800      	cmp	r0, #0
   3fff0:	d044      	beq.n	4007c <CONFIG_PM_SRAM_SIZE+0x7c>
   3fff2:	2900      	cmp	r1, #0
   3fff4:	d042      	beq.n	4007c <CONFIG_PM_SRAM_SIZE+0x7c>
   3fff6:	2302      	movs	r3, #2
   3fff8:	700b      	strb	r3, [r1, #0]
   3fffa:	2300      	movs	r3, #0
   3fffc:	704b      	strb	r3, [r1, #1]
   3fffe:	68c3      	ldr	r3, [r0, #12]
   40000:	f8c1 300b 	str.w	r3, [r1, #11]
   40004:	8903      	ldrh	r3, [r0, #8]
   40006:	f8a1 3009 	strh.w	r3, [r1, #9]
   4000a:	7983      	ldrb	r3, [r0, #6]
   4000c:	720b      	strb	r3, [r1, #8]
   4000e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   40012:	878b      	strh	r3, [r1, #60]	; 0x3c
   40014:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   40016:	86cb      	strh	r3, [r1, #54]	; 0x36
   40018:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
   4001c:	874b      	strh	r3, [r1, #58]	; 0x3a
   4001e:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
   40020:	868b      	strh	r3, [r1, #52]	; 0x34
   40022:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
   40026:	87cb      	strh	r3, [r1, #62]	; 0x3e
   40028:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   4002c:	870b      	strh	r3, [r1, #56]	; 0x38
   4002e:	8b83      	ldrh	r3, [r0, #28]
   40030:	830b      	strh	r3, [r1, #24]
   40032:	6a83      	ldr	r3, [r0, #40]	; 0x28
   40034:	f8c1 3022 	str.w	r3, [r1, #34]	; 0x22
   40038:	7c83      	ldrb	r3, [r0, #18]
   4003a:	744b      	strb	r3, [r1, #17]
   4003c:	7843      	ldrb	r3, [r0, #1]
   4003e:	70cb      	strb	r3, [r1, #3]
   40040:	6b43      	ldr	r3, [r0, #52]	; 0x34
   40042:	62cb      	str	r3, [r1, #44]	; 0x2c
   40044:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   40046:	84cb      	strh	r3, [r1, #38]	; 0x26
   40048:	8843      	ldrh	r3, [r0, #2]
   4004a:	808b      	strh	r3, [r1, #4]
   4004c:	6a03      	ldr	r3, [r0, #32]
   4004e:	f8c1 301a 	str.w	r3, [r1, #26]
   40052:	6b83      	ldr	r3, [r0, #56]	; 0x38
   40054:	630b      	str	r3, [r1, #48]	; 0x30
   40056:	6a43      	ldr	r3, [r0, #36]	; 0x24
   40058:	f8c1 301e 	str.w	r3, [r1, #30]
   4005c:	6b03      	ldr	r3, [r0, #48]	; 0x30
   4005e:	628b      	str	r3, [r1, #40]	; 0x28
   40060:	7803      	ldrb	r3, [r0, #0]
   40062:	708b      	strb	r3, [r1, #2]
   40064:	7c03      	ldrb	r3, [r0, #16]
   40066:	73cb      	strb	r3, [r1, #15]
   40068:	8883      	ldrh	r3, [r0, #4]
   4006a:	80cb      	strh	r3, [r1, #6]
   4006c:	8a83      	ldrh	r3, [r0, #20]
   4006e:	824b      	strh	r3, [r1, #18]
   40070:	7c43      	ldrb	r3, [r0, #17]
   40072:	740b      	strb	r3, [r1, #16]
   40074:	6983      	ldr	r3, [r0, #24]
   40076:	2040      	movs	r0, #64	; 0x40
   40078:	614b      	str	r3, [r1, #20]
   4007a:	4770      	bx	lr
   4007c:	f04f 30ff 	mov.w	r0, #4294967295
   40080:	4770      	bx	lr

00040082 <rpc_gnss_serialize_alm>:
   40082:	b340      	cbz	r0, 400d6 <rpc_gnss_serialize_alm+0x54>
   40084:	b339      	cbz	r1, 400d6 <rpc_gnss_serialize_alm+0x54>
   40086:	2303      	movs	r3, #3
   40088:	700b      	strb	r3, [r1, #0]
   4008a:	2300      	movs	r3, #0
   4008c:	704b      	strb	r3, [r1, #1]
   4008e:	8b83      	ldrh	r3, [r0, #28]
   40090:	f8a1 301d 	strh.w	r3, [r1, #29]
   40094:	8bc3      	ldrh	r3, [r0, #30]
   40096:	f8a1 301f 	strh.w	r3, [r1, #31]
   4009a:	88c3      	ldrh	r3, [r0, #6]
   4009c:	810b      	strh	r3, [r1, #8]
   4009e:	8883      	ldrh	r3, [r0, #4]
   400a0:	80cb      	strh	r3, [r1, #6]
   400a2:	78c3      	ldrb	r3, [r0, #3]
   400a4:	714b      	strb	r3, [r1, #5]
   400a6:	6983      	ldr	r3, [r0, #24]
   400a8:	f8c1 3019 	str.w	r3, [r1, #25]
   400ac:	6903      	ldr	r3, [r0, #16]
   400ae:	f8c1 3011 	str.w	r3, [r1, #17]
   400b2:	8903      	ldrh	r3, [r0, #8]
   400b4:	814b      	strh	r3, [r1, #10]
   400b6:	68c3      	ldr	r3, [r0, #12]
   400b8:	f8c1 300d 	str.w	r3, [r1, #13]
   400bc:	7a83      	ldrb	r3, [r0, #10]
   400be:	730b      	strb	r3, [r1, #12]
   400c0:	7803      	ldrb	r3, [r0, #0]
   400c2:	708b      	strb	r3, [r1, #2]
   400c4:	7883      	ldrb	r3, [r0, #2]
   400c6:	710b      	strb	r3, [r1, #4]
   400c8:	6943      	ldr	r3, [r0, #20]
   400ca:	f8c1 3015 	str.w	r3, [r1, #21]
   400ce:	7843      	ldrb	r3, [r0, #1]
   400d0:	2021      	movs	r0, #33	; 0x21
   400d2:	70cb      	strb	r3, [r1, #3]
   400d4:	4770      	bx	lr
   400d6:	f04f 30ff 	mov.w	r0, #4294967295
   400da:	4770      	bx	lr

000400dc <rpc_gnss_serialize_klob>:
   400dc:	b1b0      	cbz	r0, 4010c <rpc_gnss_serialize_klob+0x30>
   400de:	b1a9      	cbz	r1, 4010c <rpc_gnss_serialize_klob+0x30>
   400e0:	2304      	movs	r3, #4
   400e2:	700b      	strb	r3, [r1, #0]
   400e4:	2300      	movs	r3, #0
   400e6:	704b      	strb	r3, [r1, #1]
   400e8:	7803      	ldrb	r3, [r0, #0]
   400ea:	708b      	strb	r3, [r1, #2]
   400ec:	7843      	ldrb	r3, [r0, #1]
   400ee:	70cb      	strb	r3, [r1, #3]
   400f0:	7883      	ldrb	r3, [r0, #2]
   400f2:	710b      	strb	r3, [r1, #4]
   400f4:	78c3      	ldrb	r3, [r0, #3]
   400f6:	714b      	strb	r3, [r1, #5]
   400f8:	7903      	ldrb	r3, [r0, #4]
   400fa:	718b      	strb	r3, [r1, #6]
   400fc:	7943      	ldrb	r3, [r0, #5]
   400fe:	71cb      	strb	r3, [r1, #7]
   40100:	7983      	ldrb	r3, [r0, #6]
   40102:	720b      	strb	r3, [r1, #8]
   40104:	79c3      	ldrb	r3, [r0, #7]
   40106:	200a      	movs	r0, #10
   40108:	724b      	strb	r3, [r1, #9]
   4010a:	4770      	bx	lr
   4010c:	f04f 30ff 	mov.w	r0, #4294967295
   40110:	4770      	bx	lr

00040112 <rpc_gnss_serialize_nequick>:
   40112:	b180      	cbz	r0, 40136 <rpc_gnss_serialize_nequick+0x24>
   40114:	b179      	cbz	r1, 40136 <rpc_gnss_serialize_nequick+0x24>
   40116:	2305      	movs	r3, #5
   40118:	700b      	strb	r3, [r1, #0]
   4011a:	2300      	movs	r3, #0
   4011c:	704b      	strb	r3, [r1, #1]
   4011e:	8803      	ldrh	r3, [r0, #0]
   40120:	804b      	strh	r3, [r1, #2]
   40122:	8843      	ldrh	r3, [r0, #2]
   40124:	808b      	strh	r3, [r1, #4]
   40126:	8883      	ldrh	r3, [r0, #4]
   40128:	80cb      	strh	r3, [r1, #6]
   4012a:	7983      	ldrb	r3, [r0, #6]
   4012c:	720b      	strb	r3, [r1, #8]
   4012e:	79c3      	ldrb	r3, [r0, #7]
   40130:	200a      	movs	r0, #10
   40132:	724b      	strb	r3, [r1, #9]
   40134:	4770      	bx	lr
   40136:	f04f 30ff 	mov.w	r0, #4294967295
   4013a:	4770      	bx	lr

0004013c <rpc_gnss_serialize_time_and_sv_tow>:
   4013c:	b570      	push	{r4, r5, r6, lr}
   4013e:	b1e8      	cbz	r0, 4017c <rpc_gnss_serialize_time_and_sv_tow+0x40>
   40140:	b1e1      	cbz	r1, 4017c <rpc_gnss_serialize_time_and_sv_tow+0x40>
   40142:	2206      	movs	r2, #6
   40144:	2300      	movs	r3, #0
   40146:	700a      	strb	r2, [r1, #0]
   40148:	8802      	ldrh	r2, [r0, #0]
   4014a:	704b      	strb	r3, [r1, #1]
   4014c:	804a      	strh	r2, [r1, #2]
   4014e:	68c2      	ldr	r2, [r0, #12]
   40150:	f101 0410 	add.w	r4, r1, #16
   40154:	f8c1 200a 	str.w	r2, [r1, #10]
   40158:	8902      	ldrh	r2, [r0, #8]
   4015a:	810a      	strh	r2, [r1, #8]
   4015c:	6842      	ldr	r2, [r0, #4]
   4015e:	604a      	str	r2, [r1, #4]
   40160:	8a06      	ldrh	r6, [r0, #16]
   40162:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   40166:	188d      	adds	r5, r1, r2
   40168:	81ee      	strh	r6, [r5, #14]
   4016a:	7c85      	ldrb	r5, [r0, #18]
   4016c:	3301      	adds	r3, #1
   4016e:	2b20      	cmp	r3, #32
   40170:	54a5      	strb	r5, [r4, r2]
   40172:	f100 0004 	add.w	r0, r0, #4
   40176:	d1f3      	bne.n	40160 <rpc_gnss_serialize_time_and_sv_tow+0x24>
   40178:	206e      	movs	r0, #110	; 0x6e
   4017a:	bd70      	pop	{r4, r5, r6, pc}
   4017c:	f04f 30ff 	mov.w	r0, #4294967295
   40180:	e7fb      	b.n	4017a <rpc_gnss_serialize_time_and_sv_tow+0x3e>

00040182 <rpc_gnss_serialize_location>:
   40182:	b1c0      	cbz	r0, 401b6 <rpc_gnss_serialize_location+0x34>
   40184:	b1b9      	cbz	r1, 401b6 <rpc_gnss_serialize_location+0x34>
   40186:	2307      	movs	r3, #7
   40188:	700b      	strb	r3, [r1, #0]
   4018a:	2300      	movs	r3, #0
   4018c:	704b      	strb	r3, [r1, #1]
   4018e:	8903      	ldrh	r3, [r0, #8]
   40190:	814b      	strh	r3, [r1, #10]
   40192:	7b83      	ldrb	r3, [r0, #14]
   40194:	740b      	strb	r3, [r1, #16]
   40196:	6803      	ldr	r3, [r0, #0]
   40198:	f8c1 3002 	str.w	r3, [r1, #2]
   4019c:	6843      	ldr	r3, [r0, #4]
   4019e:	f8c1 3006 	str.w	r3, [r1, #6]
   401a2:	7b03      	ldrb	r3, [r0, #12]
   401a4:	738b      	strb	r3, [r1, #14]
   401a6:	7b43      	ldrb	r3, [r0, #13]
   401a8:	73cb      	strb	r3, [r1, #15]
   401aa:	7a83      	ldrb	r3, [r0, #10]
   401ac:	730b      	strb	r3, [r1, #12]
   401ae:	7ac3      	ldrb	r3, [r0, #11]
   401b0:	2011      	movs	r0, #17
   401b2:	734b      	strb	r3, [r1, #13]
   401b4:	4770      	bx	lr
   401b6:	f04f 30ff 	mov.w	r0, #4294967295
   401ba:	4770      	bx	lr

000401bc <rpc_gnss_serialize_integrity>:
   401bc:	b148      	cbz	r0, 401d2 <rpc_gnss_serialize_integrity+0x16>
   401be:	b141      	cbz	r1, 401d2 <rpc_gnss_serialize_integrity+0x16>
   401c0:	2308      	movs	r3, #8
   401c2:	700b      	strb	r3, [r1, #0]
   401c4:	2300      	movs	r3, #0
   401c6:	704b      	strb	r3, [r1, #1]
   401c8:	6803      	ldr	r3, [r0, #0]
   401ca:	2006      	movs	r0, #6
   401cc:	f8c1 3002 	str.w	r3, [r1, #2]
   401d0:	4770      	bx	lr
   401d2:	f04f 30ff 	mov.w	r0, #4294967295
   401d6:	4770      	bx	lr

000401d8 <sock_has_pkt>:
   401d8:	6840      	ldr	r0, [r0, #4]
   401da:	3800      	subs	r0, #0
   401dc:	bf18      	it	ne
   401de:	2001      	movne	r0, #1
   401e0:	4770      	bx	lr

000401e2 <sock_pkt_append>:
   401e2:	2300      	movs	r3, #0
   401e4:	600b      	str	r3, [r1, #0]
   401e6:	6883      	ldr	r3, [r0, #8]
   401e8:	b913      	cbnz	r3, 401f0 <sock_pkt_append+0xe>
   401ea:	e9c0 1101 	strd	r1, r1, [r0, #4]
   401ee:	4770      	bx	lr
   401f0:	6019      	str	r1, [r3, #0]
   401f2:	6081      	str	r1, [r0, #8]
   401f4:	4770      	bx	lr

000401f6 <sock_pkt_remove>:
   401f6:	b538      	push	{r3, r4, r5, lr}
   401f8:	4605      	mov	r5, r0
   401fa:	460c      	mov	r4, r1
   401fc:	2010      	movs	r0, #16
   401fe:	f7f2 fdc9 	bl	32d94 <nrfx_ipc_receive_event_disable>
   40202:	68aa      	ldr	r2, [r5, #8]
   40204:	6823      	ldr	r3, [r4, #0]
   40206:	4294      	cmp	r4, r2
   40208:	606b      	str	r3, [r5, #4]
   4020a:	bf08      	it	eq
   4020c:	60ab      	streq	r3, [r5, #8]
   4020e:	2300      	movs	r3, #0
   40210:	4620      	mov	r0, r4
   40212:	6023      	str	r3, [r4, #0]
   40214:	f000 f90a 	bl	4042c <pkt_free>
   40218:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   4021c:	2010      	movs	r0, #16
   4021e:	f7f2 bd9b 	b.w	32d58 <nrfx_ipc_receive_event_enable>

00040222 <sock_pkt_peek_head>:
   40222:	6840      	ldr	r0, [r0, #4]
   40224:	4770      	bx	lr

00040226 <sock_is_stream>:
   40226:	6900      	ldr	r0, [r0, #16]
   40228:	1e43      	subs	r3, r0, #1
   4022a:	4258      	negs	r0, r3
   4022c:	4158      	adcs	r0, r3
   4022e:	4770      	bx	lr

00040230 <sock_is_datagram>:
   40230:	6900      	ldr	r0, [r0, #16]
   40232:	1e83      	subs	r3, r0, #2
   40234:	4258      	negs	r0, r3
   40236:	4158      	adcs	r0, r3
   40238:	4770      	bx	lr

0004023a <sock_is_raw>:
   4023a:	6900      	ldr	r0, [r0, #16]
   4023c:	1ec3      	subs	r3, r0, #3
   4023e:	4258      	negs	r0, r3
   40240:	4158      	adcs	r0, r3
   40242:	4770      	bx	lr

00040244 <sock_proto_is_secure>:
   40244:	6940      	ldr	r0, [r0, #20]
   40246:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   4024a:	d005      	beq.n	40258 <sock_proto_is_secure+0x14>
   4024c:	f240 1311 	movw	r3, #273	; 0x111
   40250:	1ac3      	subs	r3, r0, r3
   40252:	4258      	negs	r0, r3
   40254:	4158      	adcs	r0, r3
   40256:	4770      	bx	lr
   40258:	2001      	movs	r0, #1
   4025a:	4770      	bx	lr

0004025c <sock_is_connecting>:
   4025c:	7f00      	ldrb	r0, [r0, #28]
   4025e:	f3c0 0080 	ubfx	r0, r0, #2, #1
   40262:	4770      	bx	lr

00040264 <sock_is_connected>:
   40264:	7f00      	ldrb	r0, [r0, #28]
   40266:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   4026a:	4770      	bx	lr

0004026c <sock_is_secured>:
   4026c:	7f00      	ldrb	r0, [r0, #28]
   4026e:	f3c0 1000 	ubfx	r0, r0, #4, #1
   40272:	4770      	bx	lr

00040274 <sock_is_nonblock>:
   40274:	6b40      	ldr	r0, [r0, #52]	; 0x34
   40276:	f000 0001 	and.w	r0, r0, #1
   4027a:	4770      	bx	lr

0004027c <sock_is_local_closed>:
   4027c:	7f00      	ldrb	r0, [r0, #28]
   4027e:	f000 0001 	and.w	r0, r0, #1
   40282:	4770      	bx	lr

00040284 <sock_is_closed>:
   40284:	7f00      	ldrb	r0, [r0, #28]
   40286:	f3c0 0040 	ubfx	r0, r0, #1, #1
   4028a:	4770      	bx	lr

0004028c <sock_has_error>:
   4028c:	6983      	ldr	r3, [r0, #24]
   4028e:	f033 0380 	bics.w	r3, r3, #128	; 0x80
   40292:	bf14      	ite	ne
   40294:	2001      	movne	r0, #1
   40296:	2000      	moveq	r0, #0
   40298:	4770      	bx	lr

0004029a <sock_has_flow_control>:
   4029a:	7f00      	ldrb	r0, [r0, #28]
   4029c:	f3c0 1080 	ubfx	r0, r0, #6, #1
   402a0:	4770      	bx	lr

000402a2 <sock_needs_attach>:
   402a2:	b508      	push	{r3, lr}
   402a4:	4602      	mov	r2, r0
   402a6:	f7ff ffcd 	bl	40244 <sock_proto_is_secure>
   402aa:	b128      	cbz	r0, 402b8 <sock_needs_attach+0x16>
   402ac:	7f10      	ldrb	r0, [r2, #28]
   402ae:	f3c0 1000 	ubfx	r0, r0, #4, #1
   402b2:	f080 0001 	eor.w	r0, r0, #1
   402b6:	b2c0      	uxtb	r0, r0
   402b8:	bd08      	pop	{r3, pc}

000402ba <sock_can_read>:
   402ba:	6840      	ldr	r0, [r0, #4]
   402bc:	3800      	subs	r0, #0
   402be:	bf18      	it	ne
   402c0:	2001      	movne	r0, #1
   402c2:	4770      	bx	lr

000402c4 <sock_can_accept>:
   402c4:	7f00      	ldrb	r0, [r0, #28]
   402c6:	f3c0 1040 	ubfx	r0, r0, #5, #1
   402ca:	4770      	bx	lr

000402cc <sock_can_send>:
   402cc:	b508      	push	{r3, lr}
   402ce:	6903      	ldr	r3, [r0, #16]
   402d0:	4601      	mov	r1, r0
   402d2:	2b01      	cmp	r3, #1
   402d4:	bf0a      	itet	eq
   402d6:	7f02      	ldrbeq	r2, [r0, #28]
   402d8:	2201      	movne	r2, #1
   402da:	f3c2 02c0 	ubfxeq	r2, r2, #3, #1
   402de:	f7ff ffb1 	bl	40244 <sock_proto_is_secure>
   402e2:	b180      	cbz	r0, 40306 <sock_can_send+0x3a>
   402e4:	7f08      	ldrb	r0, [r1, #28]
   402e6:	f3c0 1000 	ubfx	r0, r0, #4, #1
   402ea:	b142      	cbz	r2, 402fe <sock_can_send+0x32>
   402ec:	b148      	cbz	r0, 40302 <sock_can_send+0x36>
   402ee:	7f0a      	ldrb	r2, [r1, #28]
   402f0:	0793      	lsls	r3, r2, #30
   402f2:	d406      	bmi.n	40302 <sock_can_send+0x36>
   402f4:	f3c2 1280 	ubfx	r2, r2, #6, #1
   402f8:	f082 0201 	eor.w	r2, r2, #1
   402fc:	b2d2      	uxtb	r2, r2
   402fe:	4610      	mov	r0, r2
   40300:	bd08      	pop	{r3, pc}
   40302:	2200      	movs	r2, #0
   40304:	e7fb      	b.n	402fe <sock_can_send+0x32>
   40306:	2a00      	cmp	r2, #0
   40308:	d1f1      	bne.n	402ee <sock_can_send+0x22>
   4030a:	e7f8      	b.n	402fe <sock_can_send+0x32>

0004030c <sock_rcvtimeo_ms_get>:
   4030c:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
   40310:	ea53 0102 	orrs.w	r1, r3, r2
   40314:	d009      	beq.n	4032a <sock_rcvtimeo_ms_get+0x1e>
   40316:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   4031a:	fbb3 f0f1 	udiv	r0, r3, r1
   4031e:	fb01 0002 	mla	r0, r1, r2, r0
   40322:	2801      	cmp	r0, #1
   40324:	bfb8      	it	lt
   40326:	2001      	movlt	r0, #1
   40328:	4770      	bx	lr
   4032a:	f04f 30ff 	mov.w	r0, #4294967295
   4032e:	4770      	bx	lr

00040330 <sock_sndtimeo_ms_get>:
   40330:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   40334:	ea53 0102 	orrs.w	r1, r3, r2
   40338:	d009      	beq.n	4034e <sock_sndtimeo_ms_get+0x1e>
   4033a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   4033e:	fbb3 f0f1 	udiv	r0, r3, r1
   40342:	fb01 0002 	mla	r0, r1, r2, r0
   40346:	2801      	cmp	r0, #1
   40348:	bfb8      	it	lt
   4034a:	2001      	movlt	r0, #1
   4034c:	4770      	bx	lr
   4034e:	f04f 30ff 	mov.w	r0, #4294967295
   40352:	4770      	bx	lr

00040354 <sock_family_is_valid>:
   40354:	1e43      	subs	r3, r0, #1
   40356:	2b01      	cmp	r3, #1
   40358:	d903      	bls.n	40362 <sock_family_is_valid+0xe>
   4035a:	1f43      	subs	r3, r0, #5
   4035c:	4258      	negs	r0, r3
   4035e:	4158      	adcs	r0, r3
   40360:	4770      	bx	lr
   40362:	2001      	movs	r0, #1
   40364:	4770      	bx	lr

00040366 <sock_type_is_valid>:
   40366:	3801      	subs	r0, #1
   40368:	2802      	cmp	r0, #2
   4036a:	bf8c      	ite	hi
   4036c:	2000      	movhi	r0, #0
   4036e:	2001      	movls	r0, #1
   40370:	4770      	bx	lr

00040372 <sock_proto_is_valid>:
   40372:	b150      	cbz	r0, 4038a <sock_proto_is_valid+0x18>
   40374:	2806      	cmp	r0, #6
   40376:	d008      	beq.n	4038a <sock_proto_is_valid+0x18>
   40378:	f420 7380 	bic.w	r3, r0, #256	; 0x100
   4037c:	2b11      	cmp	r3, #17
   4037e:	d004      	beq.n	4038a <sock_proto_is_valid+0x18>
   40380:	f5a0 7381 	sub.w	r3, r0, #258	; 0x102
   40384:	4258      	negs	r0, r3
   40386:	4158      	adcs	r0, r3
   40388:	4770      	bx	lr
   4038a:	2001      	movs	r0, #1
   4038c:	4770      	bx	lr

0004038e <sock_proto_supports_type>:
   4038e:	2903      	cmp	r1, #3
   40390:	d015      	beq.n	403be <sock_proto_supports_type+0x30>
   40392:	2811      	cmp	r0, #17
   40394:	d00c      	beq.n	403b0 <sock_proto_supports_type+0x22>
   40396:	dc04      	bgt.n	403a2 <sock_proto_supports_type+0x14>
   40398:	b188      	cbz	r0, 403be <sock_proto_supports_type+0x30>
   4039a:	2806      	cmp	r0, #6
   4039c:	d00a      	beq.n	403b4 <sock_proto_supports_type+0x26>
   4039e:	2000      	movs	r0, #0
   403a0:	4770      	bx	lr
   403a2:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   403a6:	d005      	beq.n	403b4 <sock_proto_supports_type+0x26>
   403a8:	f240 1311 	movw	r3, #273	; 0x111
   403ac:	4298      	cmp	r0, r3
   403ae:	d1f6      	bne.n	4039e <sock_proto_supports_type+0x10>
   403b0:	2902      	cmp	r1, #2
   403b2:	e000      	b.n	403b6 <sock_proto_supports_type+0x28>
   403b4:	2901      	cmp	r1, #1
   403b6:	bf14      	ite	ne
   403b8:	2000      	movne	r0, #0
   403ba:	2001      	moveq	r0, #1
   403bc:	4770      	bx	lr
   403be:	2001      	movs	r0, #1
   403c0:	4770      	bx	lr

000403c2 <sock_sockaddr_len_is_valid>:
   403c2:	6843      	ldr	r3, [r0, #4]
   403c4:	2b01      	cmp	r3, #1
   403c6:	d003      	beq.n	403d0 <sock_sockaddr_len_is_valid+0xe>
   403c8:	2b02      	cmp	r3, #2
   403ca:	d009      	beq.n	403e0 <sock_sockaddr_len_is_valid+0x1e>
   403cc:	2000      	movs	r0, #0
   403ce:	4770      	bx	lr
   403d0:	7803      	ldrb	r3, [r0, #0]
   403d2:	2b10      	cmp	r3, #16
   403d4:	d1fa      	bne.n	403cc <sock_sockaddr_len_is_valid+0xa>
   403d6:	2910      	cmp	r1, #16
   403d8:	bf14      	ite	ne
   403da:	2000      	movne	r0, #0
   403dc:	2001      	moveq	r0, #1
   403de:	4770      	bx	lr
   403e0:	7803      	ldrb	r3, [r0, #0]
   403e2:	2b24      	cmp	r3, #36	; 0x24
   403e4:	d1f2      	bne.n	403cc <sock_sockaddr_len_is_valid+0xa>
   403e6:	2924      	cmp	r1, #36	; 0x24
   403e8:	e7f6      	b.n	403d8 <sock_sockaddr_len_is_valid+0x16>

000403ea <sock_sockaddr_fam_is_valid>:
   403ea:	68c3      	ldr	r3, [r0, #12]
   403ec:	2b01      	cmp	r3, #1
   403ee:	d003      	beq.n	403f8 <sock_sockaddr_fam_is_valid+0xe>
   403f0:	2b02      	cmp	r3, #2
   403f2:	d007      	beq.n	40404 <sock_sockaddr_fam_is_valid+0x1a>
   403f4:	2001      	movs	r0, #1
   403f6:	4770      	bx	lr
   403f8:	6848      	ldr	r0, [r1, #4]
   403fa:	2801      	cmp	r0, #1
   403fc:	bf14      	ite	ne
   403fe:	2000      	movne	r0, #0
   40400:	2001      	moveq	r0, #1
   40402:	4770      	bx	lr
   40404:	6848      	ldr	r0, [r1, #4]
   40406:	2802      	cmp	r0, #2
   40408:	e7f8      	b.n	403fc <sock_sockaddr_fam_is_valid+0x12>

0004040a <pkt_has_next>:
   4040a:	b100      	cbz	r0, 4040e <pkt_has_next+0x4>
   4040c:	6800      	ldr	r0, [r0, #0]
   4040e:	3800      	subs	r0, #0
   40410:	bf18      	it	ne
   40412:	2001      	movne	r0, #1
   40414:	4770      	bx	lr

00040416 <pkt_peek_next>:
   40416:	b100      	cbz	r0, 4041a <pkt_peek_next+0x4>
   40418:	6800      	ldr	r0, [r0, #0]
   4041a:	4770      	bx	lr

0004041c <pkt_bytes_get>:
   4041c:	8943      	ldrh	r3, [r0, #10]
   4041e:	6840      	ldr	r0, [r0, #4]
   40420:	4418      	add	r0, r3
   40422:	4770      	bx	lr

00040424 <pkt_bytes_left>:
   40424:	8902      	ldrh	r2, [r0, #8]
   40426:	8940      	ldrh	r0, [r0, #10]
   40428:	1a10      	subs	r0, r2, r0
   4042a:	4770      	bx	lr

0004042c <pkt_free>:
   4042c:	b510      	push	{r4, lr}
   4042e:	4604      	mov	r4, r0
   40430:	6840      	ldr	r0, [r0, #4]
   40432:	f7ff fdbd 	bl	3ffb0 <rpc_client_data_free>
   40436:	68e0      	ldr	r0, [r4, #12]
   40438:	b108      	cbz	r0, 4043e <pkt_free+0x12>
   4043a:	f7e5 fb05 	bl	25a48 <nrf_modem_os_free>
   4043e:	4620      	mov	r0, r4
   40440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   40444:	f7e5 bb00 	b.w	25a48 <nrf_modem_os_free>

00040448 <pkt_flush>:
   40448:	b510      	push	{r4, lr}
   4044a:	4604      	mov	r4, r0
   4044c:	6820      	ldr	r0, [r4, #0]
   4044e:	b900      	cbnz	r0, 40452 <pkt_flush+0xa>
   40450:	bd10      	pop	{r4, pc}
   40452:	6862      	ldr	r2, [r4, #4]
   40454:	6803      	ldr	r3, [r0, #0]
   40456:	4290      	cmp	r0, r2
   40458:	6023      	str	r3, [r4, #0]
   4045a:	bf08      	it	eq
   4045c:	6063      	streq	r3, [r4, #4]
   4045e:	f7ff ffe5 	bl	4042c <pkt_free>
   40462:	e7f3      	b.n	4044c <pkt_flush+0x4>

00040464 <on_conf_dnssrv_res>:
   40464:	f000 bce6 	b.w	40e34 <res_forward>

00040468 <nrf_freeaddrinfo>:
   40468:	b510      	push	{r4, lr}
   4046a:	4604      	mov	r4, r0
   4046c:	b160      	cbz	r0, 40488 <nrf_freeaddrinfo+0x20>
   4046e:	6940      	ldr	r0, [r0, #20]
   40470:	b108      	cbz	r0, 40476 <nrf_freeaddrinfo+0xe>
   40472:	f7e5 fae9 	bl	25a48 <nrf_modem_os_free>
   40476:	69a0      	ldr	r0, [r4, #24]
   40478:	b108      	cbz	r0, 4047e <nrf_freeaddrinfo+0x16>
   4047a:	f7e5 fae5 	bl	25a48 <nrf_modem_os_free>
   4047e:	4620      	mov	r0, r4
   40480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   40484:	f7e5 bae0 	b.w	25a48 <nrf_modem_os_free>
   40488:	bd10      	pop	{r4, pc}

0004048a <nrf_socket>:
   4048a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   4048e:	4681      	mov	r9, r0
   40490:	4688      	mov	r8, r1
   40492:	4617      	mov	r7, r2
   40494:	f7ff ff5e 	bl	40354 <sock_family_is_valid>
   40498:	b938      	cbnz	r0, 404aa <nrf_socket+0x20>
   4049a:	206a      	movs	r0, #106	; 0x6a
   4049c:	f7e5 f9f0 	bl	25880 <nrf_modem_os_errno_set>
   404a0:	f04f 30ff 	mov.w	r0, #4294967295
   404a4:	b003      	add	sp, #12
   404a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   404aa:	4638      	mov	r0, r7
   404ac:	f7ff ff61 	bl	40372 <sock_proto_is_valid>
   404b0:	b908      	cbnz	r0, 404b6 <nrf_socket+0x2c>
   404b2:	207b      	movs	r0, #123	; 0x7b
   404b4:	e7f2      	b.n	4049c <nrf_socket+0x12>
   404b6:	4640      	mov	r0, r8
   404b8:	f7ff ff55 	bl	40366 <sock_type_is_valid>
   404bc:	b908      	cbnz	r0, 404c2 <nrf_socket+0x38>
   404be:	206b      	movs	r0, #107	; 0x6b
   404c0:	e7ec      	b.n	4049c <nrf_socket+0x12>
   404c2:	4641      	mov	r1, r8
   404c4:	4638      	mov	r0, r7
   404c6:	f7ff ff62 	bl	4038e <sock_proto_supports_type>
   404ca:	2800      	cmp	r0, #0
   404cc:	d0f7      	beq.n	404be <nrf_socket+0x34>
   404ce:	f7f3 fe33 	bl	34138 <sock_open>
   404d2:	4606      	mov	r6, r0
   404d4:	b908      	cbnz	r0, 404da <nrf_socket+0x50>
   404d6:	2017      	movs	r0, #23
   404d8:	e7e0      	b.n	4049c <nrf_socket+0x12>
   404da:	2000      	movs	r0, #0
   404dc:	f7ff fd58 	bl	3ff90 <rpc_client_request_alloc>
   404e0:	4604      	mov	r4, r0
   404e2:	b920      	cbnz	r0, 404ee <nrf_socket+0x64>
   404e4:	6830      	ldr	r0, [r6, #0]
   404e6:	f7f3 fe5d 	bl	341a4 <_sock_close>
   404ea:	2069      	movs	r0, #105	; 0x69
   404ec:	e7d6      	b.n	4049c <nrf_socket+0x12>
   404ee:	2300      	movs	r3, #0
   404f0:	220c      	movs	r2, #12
   404f2:	f04f 35ff 	mov.w	r5, #4294967295
   404f6:	7202      	strb	r2, [r0, #8]
   404f8:	7243      	strb	r3, [r0, #9]
   404fa:	7283      	strb	r3, [r0, #10]
   404fc:	72c3      	strb	r3, [r0, #11]
   404fe:	7405      	strb	r5, [r0, #16]
   40500:	7445      	strb	r5, [r0, #17]
   40502:	7485      	strb	r5, [r0, #18]
   40504:	74c5      	strb	r5, [r0, #19]
   40506:	4648      	mov	r0, r9
   40508:	f000 fc37 	bl	40d7a <nrf_af_to_rpc_af>
   4050c:	6160      	str	r0, [r4, #20]
   4050e:	4640      	mov	r0, r8
   40510:	f000 fc36 	bl	40d80 <nrf_type_to_rpc_type>
   40514:	4601      	mov	r1, r0
   40516:	61a0      	str	r0, [r4, #24]
   40518:	4638      	mov	r0, r7
   4051a:	f000 fc32 	bl	40d82 <nrf_proto_to_rpc_proto>
   4051e:	4621      	mov	r1, r4
   40520:	61e0      	str	r0, [r4, #28]
   40522:	aa01      	add	r2, sp, #4
   40524:	f247 0001 	movw	r0, #28673	; 0x7001
   40528:	f7f4 fc96 	bl	34e58 <req_forward>
   4052c:	4604      	mov	r4, r0
   4052e:	b120      	cbz	r0, 4053a <nrf_socket+0xb0>
   40530:	4628      	mov	r0, r5
   40532:	f7f3 fe37 	bl	341a4 <_sock_close>
   40536:	4620      	mov	r0, r4
   40538:	e7b0      	b.n	4049c <nrf_socket+0x12>
   4053a:	9801      	ldr	r0, [sp, #4]
   4053c:	6983      	ldr	r3, [r0, #24]
   4053e:	e9c6 9803 	strd	r9, r8, [r6, #12]
   40542:	6033      	str	r3, [r6, #0]
   40544:	6177      	str	r7, [r6, #20]
   40546:	f7ff fd30 	bl	3ffaa <rpc_client_message_free>
   4054a:	6830      	ldr	r0, [r6, #0]
   4054c:	e7aa      	b.n	404a4 <nrf_socket+0x1a>

0004054e <nrf_close>:
   4054e:	b570      	push	{r4, r5, r6, lr}
   40550:	4606      	mov	r6, r0
   40552:	f7f3 fe15 	bl	34180 <sock_find>
   40556:	4605      	mov	r5, r0
   40558:	b930      	cbnz	r0, 40568 <nrf_close+0x1a>
   4055a:	2009      	movs	r0, #9
   4055c:	f7e5 f990 	bl	25880 <nrf_modem_os_errno_set>
   40560:	f04f 34ff 	mov.w	r4, #4294967295
   40564:	4620      	mov	r0, r4
   40566:	bd70      	pop	{r4, r5, r6, pc}
   40568:	f7f5 fc70 	bl	35e4c <nrf_modem_state_is_initialized>
   4056c:	4604      	mov	r4, r0
   4056e:	2800      	cmp	r0, #0
   40570:	d0f8      	beq.n	40564 <nrf_close+0x16>
   40572:	2000      	movs	r0, #0
   40574:	f7ff fd0c 	bl	3ff90 <rpc_client_request_alloc>
   40578:	4601      	mov	r1, r0
   4057a:	b908      	cbnz	r0, 40580 <nrf_close+0x32>
   4057c:	2069      	movs	r0, #105	; 0x69
   4057e:	e7ed      	b.n	4055c <nrf_close+0xe>
   40580:	7f2b      	ldrb	r3, [r5, #28]
   40582:	2200      	movs	r2, #0
   40584:	f043 0301 	orr.w	r3, r3, #1
   40588:	772b      	strb	r3, [r5, #28]
   4058a:	6106      	str	r6, [r0, #16]
   4058c:	f247 0009 	movw	r0, #28681	; 0x7009
   40590:	f7f4 fc62 	bl	34e58 <req_forward>
   40594:	4604      	mov	r4, r0
   40596:	b128      	cbz	r0, 405a4 <nrf_close+0x56>
   40598:	2816      	cmp	r0, #22
   4059a:	d007      	beq.n	405ac <nrf_close+0x5e>
   4059c:	f7e5 f970 	bl	25880 <nrf_modem_os_errno_set>
   405a0:	f04f 34ff 	mov.w	r4, #4294967295
   405a4:	4630      	mov	r0, r6
   405a6:	f7f3 fdfd 	bl	341a4 <_sock_close>
   405aa:	e7db      	b.n	40564 <nrf_close+0x16>
   405ac:	2400      	movs	r4, #0
   405ae:	e7f9      	b.n	405a4 <nrf_close+0x56>

000405b0 <nrf_bind>:
   405b0:	b538      	push	{r3, r4, r5, lr}
   405b2:	4605      	mov	r5, r0
   405b4:	460c      	mov	r4, r1
   405b6:	f7f3 fde3 	bl	34180 <sock_find>
   405ba:	b928      	cbnz	r0, 405c8 <nrf_bind+0x18>
   405bc:	2009      	movs	r0, #9
   405be:	f7e5 f95f 	bl	25880 <nrf_modem_os_errno_set>
   405c2:	f04f 33ff 	mov.w	r3, #4294967295
   405c6:	e023      	b.n	40610 <nrf_bind+0x60>
   405c8:	b90c      	cbnz	r4, 405ce <nrf_bind+0x1e>
   405ca:	200e      	movs	r0, #14
   405cc:	e7f7      	b.n	405be <nrf_bind+0xe>
   405ce:	4621      	mov	r1, r4
   405d0:	f7ff ff0b 	bl	403ea <sock_sockaddr_fam_is_valid>
   405d4:	b908      	cbnz	r0, 405da <nrf_bind+0x2a>
   405d6:	206a      	movs	r0, #106	; 0x6a
   405d8:	e7f1      	b.n	405be <nrf_bind+0xe>
   405da:	2000      	movs	r0, #0
   405dc:	f7ff fcd8 	bl	3ff90 <rpc_client_request_alloc>
   405e0:	4601      	mov	r1, r0
   405e2:	b908      	cbnz	r0, 405e8 <nrf_bind+0x38>
   405e4:	2069      	movs	r0, #105	; 0x69
   405e6:	e7ea      	b.n	405be <nrf_bind+0xe>
   405e8:	2214      	movs	r2, #20
   405ea:	2300      	movs	r3, #0
   405ec:	7202      	strb	r2, [r0, #8]
   405ee:	6862      	ldr	r2, [r4, #4]
   405f0:	6105      	str	r5, [r0, #16]
   405f2:	2a01      	cmp	r2, #1
   405f4:	7243      	strb	r3, [r0, #9]
   405f6:	7283      	strb	r3, [r0, #10]
   405f8:	72c3      	strb	r3, [r0, #11]
   405fa:	d00b      	beq.n	40614 <nrf_bind+0x64>
   405fc:	2a02      	cmp	r2, #2
   405fe:	d011      	beq.n	40624 <nrf_bind+0x74>
   40600:	2200      	movs	r2, #0
   40602:	f247 0005 	movw	r0, #28677	; 0x7005
   40606:	f7f4 fc27 	bl	34e58 <req_forward>
   4060a:	4603      	mov	r3, r0
   4060c:	2800      	cmp	r0, #0
   4060e:	d1d6      	bne.n	405be <nrf_bind+0xe>
   40610:	4618      	mov	r0, r3
   40612:	bd38      	pop	{r3, r4, r5, pc}
   40614:	8922      	ldrh	r2, [r4, #8]
   40616:	75c3      	strb	r3, [r0, #23]
   40618:	8282      	strh	r2, [r0, #20]
   4061a:	2204      	movs	r2, #4
   4061c:	7582      	strb	r2, [r0, #22]
   4061e:	68e3      	ldr	r3, [r4, #12]
   40620:	6183      	str	r3, [r0, #24]
   40622:	e7ed      	b.n	40600 <nrf_bind+0x50>
   40624:	8922      	ldrh	r2, [r4, #8]
   40626:	75c3      	strb	r3, [r0, #23]
   40628:	8282      	strh	r2, [r0, #20]
   4062a:	2210      	movs	r2, #16
   4062c:	18a3      	adds	r3, r4, r2
   4062e:	7582      	strb	r2, [r0, #22]
   40630:	3420      	adds	r4, #32
   40632:	f100 0218 	add.w	r2, r0, #24
   40636:	f853 0b04 	ldr.w	r0, [r3], #4
   4063a:	42a3      	cmp	r3, r4
   4063c:	f842 0b04 	str.w	r0, [r2], #4
   40640:	d1f9      	bne.n	40636 <nrf_bind+0x86>
   40642:	e7dd      	b.n	40600 <nrf_bind+0x50>

00040644 <nrf_listen>:
   40644:	b570      	push	{r4, r5, r6, lr}
   40646:	4606      	mov	r6, r0
   40648:	460c      	mov	r4, r1
   4064a:	f7f3 fd99 	bl	34180 <sock_find>
   4064e:	4605      	mov	r5, r0
   40650:	b918      	cbnz	r0, 4065a <nrf_listen+0x16>
   40652:	2009      	movs	r0, #9
   40654:	f7e5 f914 	bl	25880 <nrf_modem_os_errno_set>
   40658:	e016      	b.n	40688 <nrf_listen+0x44>
   4065a:	f7ff fde4 	bl	40226 <sock_is_stream>
   4065e:	b908      	cbnz	r0, 40664 <nrf_listen+0x20>
   40660:	205f      	movs	r0, #95	; 0x5f
   40662:	e7f7      	b.n	40654 <nrf_listen+0x10>
   40664:	4628      	mov	r0, r5
   40666:	f7ff fe1c 	bl	402a2 <sock_needs_attach>
   4066a:	b930      	cbnz	r0, 4067a <nrf_listen+0x36>
   4066c:	2000      	movs	r0, #0
   4066e:	f7ff fc8f 	bl	3ff90 <rpc_client_request_alloc>
   40672:	4601      	mov	r1, r0
   40674:	b958      	cbnz	r0, 4068e <nrf_listen+0x4a>
   40676:	2069      	movs	r0, #105	; 0x69
   40678:	e7ec      	b.n	40654 <nrf_listen+0x10>
   4067a:	f04f 31ff 	mov.w	r1, #4294967295
   4067e:	4628      	mov	r0, r5
   40680:	f7f4 fb66 	bl	34d50 <tls_attach>
   40684:	2800      	cmp	r0, #0
   40686:	d0f1      	beq.n	4066c <nrf_listen+0x28>
   40688:	f04f 33ff 	mov.w	r3, #4294967295
   4068c:	e010      	b.n	406b0 <nrf_listen+0x6c>
   4068e:	2200      	movs	r2, #0
   40690:	2304      	movs	r3, #4
   40692:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   40696:	7203      	strb	r3, [r0, #8]
   40698:	6106      	str	r6, [r0, #16]
   4069a:	7242      	strb	r2, [r0, #9]
   4069c:	7282      	strb	r2, [r0, #10]
   4069e:	72c2      	strb	r2, [r0, #11]
   406a0:	6144      	str	r4, [r0, #20]
   406a2:	f247 0008 	movw	r0, #28680	; 0x7008
   406a6:	f7f4 fbd7 	bl	34e58 <req_forward>
   406aa:	4603      	mov	r3, r0
   406ac:	2800      	cmp	r0, #0
   406ae:	d1d1      	bne.n	40654 <nrf_listen+0x10>
   406b0:	4618      	mov	r0, r3
   406b2:	bd70      	pop	{r4, r5, r6, pc}

000406b4 <nrf_accept>:
   406b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   406b8:	b08b      	sub	sp, #44	; 0x2c
   406ba:	4605      	mov	r5, r0
   406bc:	4689      	mov	r9, r1
   406be:	4617      	mov	r7, r2
   406c0:	f7f3 fd5e 	bl	34180 <sock_find>
   406c4:	4606      	mov	r6, r0
   406c6:	b938      	cbnz	r0, 406d8 <nrf_accept+0x24>
   406c8:	2009      	movs	r0, #9
   406ca:	f7e5 f8d9 	bl	25880 <nrf_modem_os_errno_set>
   406ce:	f04f 30ff 	mov.w	r0, #4294967295
   406d2:	b00b      	add	sp, #44	; 0x2c
   406d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   406d8:	f7ff fda5 	bl	40226 <sock_is_stream>
   406dc:	b908      	cbnz	r0, 406e2 <nrf_accept+0x2e>
   406de:	205f      	movs	r0, #95	; 0x5f
   406e0:	e7f3      	b.n	406ca <nrf_accept+0x16>
   406e2:	4630      	mov	r0, r6
   406e4:	f7ff fdc6 	bl	40274 <sock_is_nonblock>
   406e8:	b128      	cbz	r0, 406f6 <nrf_accept+0x42>
   406ea:	4630      	mov	r0, r6
   406ec:	f7ff fdea 	bl	402c4 <sock_can_accept>
   406f0:	b908      	cbnz	r0, 406f6 <nrf_accept+0x42>
   406f2:	200b      	movs	r0, #11
   406f4:	e7e9      	b.n	406ca <nrf_accept+0x16>
   406f6:	f7f3 fd1f 	bl	34138 <sock_open>
   406fa:	4604      	mov	r4, r0
   406fc:	b908      	cbnz	r0, 40702 <nrf_accept+0x4e>
   406fe:	2017      	movs	r0, #23
   40700:	e7e3      	b.n	406ca <nrf_accept+0x16>
   40702:	7f33      	ldrb	r3, [r6, #28]
   40704:	2000      	movs	r0, #0
   40706:	f36f 1345 	bfc	r3, #5, #1
   4070a:	7733      	strb	r3, [r6, #28]
   4070c:	f7ff fc40 	bl	3ff90 <rpc_client_request_alloc>
   40710:	4601      	mov	r1, r0
   40712:	b920      	cbnz	r0, 4071e <nrf_accept+0x6a>
   40714:	6820      	ldr	r0, [r4, #0]
   40716:	f7f3 fd45 	bl	341a4 <_sock_close>
   4071a:	2069      	movs	r0, #105	; 0x69
   4071c:	e7d5      	b.n	406ca <nrf_accept+0x16>
   4071e:	6105      	str	r5, [r0, #16]
   40720:	466a      	mov	r2, sp
   40722:	f247 000c 	movw	r0, #28684	; 0x700c
   40726:	f7f4 fb97 	bl	34e58 <req_forward>
   4072a:	4680      	mov	r8, r0
   4072c:	b120      	cbz	r0, 40738 <nrf_accept+0x84>
   4072e:	6820      	ldr	r0, [r4, #0]
   40730:	f7f3 fd38 	bl	341a4 <_sock_close>
   40734:	4640      	mov	r0, r8
   40736:	e7c8      	b.n	406ca <nrf_accept+0x16>
   40738:	9d00      	ldr	r5, [sp, #0]
   4073a:	69ab      	ldr	r3, [r5, #24]
   4073c:	6023      	str	r3, [r4, #0]
   4073e:	6933      	ldr	r3, [r6, #16]
   40740:	6123      	str	r3, [r4, #16]
   40742:	6973      	ldr	r3, [r6, #20]
   40744:	6163      	str	r3, [r4, #20]
   40746:	7f23      	ldrb	r3, [r4, #28]
   40748:	f043 0308 	orr.w	r3, r3, #8
   4074c:	7723      	strb	r3, [r4, #28]
   4074e:	f1b9 0f00 	cmp.w	r9, #0
   40752:	d005      	beq.n	40760 <nrf_accept+0xac>
   40754:	b127      	cbz	r7, 40760 <nrf_accept+0xac>
   40756:	8beb      	ldrh	r3, [r5, #30]
   40758:	2b04      	cmp	r3, #4
   4075a:	d006      	beq.n	4076a <nrf_accept+0xb6>
   4075c:	2b10      	cmp	r3, #16
   4075e:	d01a      	beq.n	40796 <nrf_accept+0xe2>
   40760:	4628      	mov	r0, r5
   40762:	f7ff fc22 	bl	3ffaa <rpc_client_message_free>
   40766:	6820      	ldr	r0, [r4, #0]
   40768:	e7b3      	b.n	406d2 <nrf_accept+0x1e>
   4076a:	2610      	movs	r6, #16
   4076c:	2301      	movs	r3, #1
   4076e:	9001      	str	r0, [sp, #4]
   40770:	9003      	str	r0, [sp, #12]
   40772:	f88d 6004 	strb.w	r6, [sp, #4]
   40776:	9302      	str	r3, [sp, #8]
   40778:	7f6a      	ldrb	r2, [r5, #29]
   4077a:	7f2b      	ldrb	r3, [r5, #28]
   4077c:	4648      	mov	r0, r9
   4077e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   40782:	f8ad 300c 	strh.w	r3, [sp, #12]
   40786:	6a2b      	ldr	r3, [r5, #32]
   40788:	683a      	ldr	r2, [r7, #0]
   4078a:	a901      	add	r1, sp, #4
   4078c:	9304      	str	r3, [sp, #16]
   4078e:	f000 fe09 	bl	413a4 <memcpy>
   40792:	603e      	str	r6, [r7, #0]
   40794:	e7e4      	b.n	40760 <nrf_accept+0xac>
   40796:	2624      	movs	r6, #36	; 0x24
   40798:	4601      	mov	r1, r0
   4079a:	4632      	mov	r2, r6
   4079c:	a801      	add	r0, sp, #4
   4079e:	f000 fe21 	bl	413e4 <memset>
   407a2:	2302      	movs	r3, #2
   407a4:	f88d 6004 	strb.w	r6, [sp, #4]
   407a8:	9302      	str	r3, [sp, #8]
   407aa:	7f2b      	ldrb	r3, [r5, #28]
   407ac:	7f6a      	ldrb	r2, [r5, #29]
   407ae:	ae05      	add	r6, sp, #20
   407b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   407b4:	f8ad 300c 	strh.w	r3, [sp, #12]
   407b8:	f105 0c30 	add.w	ip, r5, #48	; 0x30
   407bc:	f105 0320 	add.w	r3, r5, #32
   407c0:	4632      	mov	r2, r6
   407c2:	6818      	ldr	r0, [r3, #0]
   407c4:	6859      	ldr	r1, [r3, #4]
   407c6:	3308      	adds	r3, #8
   407c8:	c203      	stmia	r2!, {r0, r1}
   407ca:	4563      	cmp	r3, ip
   407cc:	4616      	mov	r6, r2
   407ce:	d1f7      	bne.n	407c0 <nrf_accept+0x10c>
   407d0:	4648      	mov	r0, r9
   407d2:	683a      	ldr	r2, [r7, #0]
   407d4:	a901      	add	r1, sp, #4
   407d6:	f000 fde5 	bl	413a4 <memcpy>
   407da:	2324      	movs	r3, #36	; 0x24
   407dc:	603b      	str	r3, [r7, #0]
   407de:	e7bf      	b.n	40760 <nrf_accept+0xac>

000407e0 <nrf_recvfrom>:
   407e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   407e4:	b085      	sub	sp, #20
   407e6:	4617      	mov	r7, r2
   407e8:	e9dd a80e 	ldrd	sl, r8, [sp, #56]	; 0x38
   407ec:	461e      	mov	r6, r3
   407ee:	9101      	str	r1, [sp, #4]
   407f0:	f403 7b80 	and.w	fp, r3, #256	; 0x100
   407f4:	f7f3 fcc4 	bl	34180 <sock_find>
   407f8:	4604      	mov	r4, r0
   407fa:	b940      	cbnz	r0, 4080e <nrf_recvfrom+0x2e>
   407fc:	2009      	movs	r0, #9
   407fe:	f7e5 f83f 	bl	25880 <nrf_modem_os_errno_set>
   40802:	f04f 35ff 	mov.w	r5, #4294967295
   40806:	4628      	mov	r0, r5
   40808:	b005      	add	sp, #20
   4080a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4080e:	f436 75a1 	bics.w	r5, r6, #322	; 0x142
   40812:	d001      	beq.n	40818 <nrf_recvfrom+0x38>
   40814:	205f      	movs	r0, #95	; 0x5f
   40816:	e7f2      	b.n	407fe <nrf_recvfrom+0x1e>
   40818:	f1ba 0f00 	cmp.w	sl, #0
   4081c:	d004      	beq.n	40828 <nrf_recvfrom+0x48>
   4081e:	f1b8 0f00 	cmp.w	r8, #0
   40822:	d104      	bne.n	4082e <nrf_recvfrom+0x4e>
   40824:	200e      	movs	r0, #14
   40826:	e7ea      	b.n	407fe <nrf_recvfrom+0x1e>
   40828:	f1b8 0f00 	cmp.w	r8, #0
   4082c:	d1fa      	bne.n	40824 <nrf_recvfrom+0x44>
   4082e:	4620      	mov	r0, r4
   40830:	f7ff fcf9 	bl	40226 <sock_is_stream>
   40834:	b128      	cbz	r0, 40842 <nrf_recvfrom+0x62>
   40836:	4620      	mov	r0, r4
   40838:	f7ff fd14 	bl	40264 <sock_is_connected>
   4083c:	b908      	cbnz	r0, 40842 <nrf_recvfrom+0x62>
   4083e:	2080      	movs	r0, #128	; 0x80
   40840:	e7dd      	b.n	407fe <nrf_recvfrom+0x1e>
   40842:	f1bb 0f00 	cmp.w	fp, #0
   40846:	d149      	bne.n	408dc <nrf_recvfrom+0xfc>
   40848:	4620      	mov	r0, r4
   4084a:	f7ff fd13 	bl	40274 <sock_is_nonblock>
   4084e:	2800      	cmp	r0, #0
   40850:	d147      	bne.n	408e2 <nrf_recvfrom+0x102>
   40852:	f3c6 1980 	ubfx	r9, r6, #6, #1
   40856:	4620      	mov	r0, r4
   40858:	f7ff fd58 	bl	4030c <sock_rcvtimeo_ms_get>
   4085c:	9003      	str	r0, [sp, #12]
   4085e:	4620      	mov	r0, r4
   40860:	f7ff fcba 	bl	401d8 <sock_has_pkt>
   40864:	2800      	cmp	r0, #0
   40866:	d03f      	beq.n	408e8 <nrf_recvfrom+0x108>
   40868:	4620      	mov	r0, r4
   4086a:	f7ff fcda 	bl	40222 <sock_pkt_peek_head>
   4086e:	4681      	mov	r9, r0
   40870:	f1ba 0f00 	cmp.w	sl, #0
   40874:	d00d      	beq.n	40892 <nrf_recvfrom+0xb2>
   40876:	68c1      	ldr	r1, [r0, #12]
   40878:	2900      	cmp	r1, #0
   4087a:	d059      	beq.n	40930 <nrf_recvfrom+0x150>
   4087c:	780a      	ldrb	r2, [r1, #0]
   4087e:	f8d8 3000 	ldr.w	r3, [r8]
   40882:	4650      	mov	r0, sl
   40884:	429a      	cmp	r2, r3
   40886:	bf28      	it	cs
   40888:	461a      	movcs	r2, r3
   4088a:	f8c8 2000 	str.w	r2, [r8]
   4088e:	f000 fd89 	bl	413a4 <memcpy>
   40892:	f006 0802 	and.w	r8, r6, #2
   40896:	4648      	mov	r0, r9
   40898:	f7ff fdc4 	bl	40424 <pkt_bytes_left>
   4089c:	42b8      	cmp	r0, r7
   4089e:	d84a      	bhi.n	40936 <nrf_recvfrom+0x156>
   408a0:	4648      	mov	r0, r9
   408a2:	f7ff fdbf 	bl	40424 <pkt_bytes_left>
   408a6:	4606      	mov	r6, r0
   408a8:	2e00      	cmp	r6, #0
   408aa:	d0ac      	beq.n	40806 <nrf_recvfrom+0x26>
   408ac:	9b01      	ldr	r3, [sp, #4]
   408ae:	4648      	mov	r0, r9
   408b0:	eb03 0a05 	add.w	sl, r3, r5
   408b4:	f7ff fdb2 	bl	4041c <pkt_bytes_get>
   408b8:	4632      	mov	r2, r6
   408ba:	4601      	mov	r1, r0
   408bc:	4650      	mov	r0, sl
   408be:	f000 fd71 	bl	413a4 <memcpy>
   408c2:	4620      	mov	r0, r4
   408c4:	4435      	add	r5, r6
   408c6:	f7ff fcb3 	bl	40230 <sock_is_datagram>
   408ca:	b3b0      	cbz	r0, 4093a <nrf_recvfrom+0x15a>
   408cc:	f1b8 0f00 	cmp.w	r8, #0
   408d0:	d199      	bne.n	40806 <nrf_recvfrom+0x26>
   408d2:	4649      	mov	r1, r9
   408d4:	4620      	mov	r0, r4
   408d6:	f7ff fc8e 	bl	401f6 <sock_pkt_remove>
   408da:	e794      	b.n	40806 <nrf_recvfrom+0x26>
   408dc:	f04f 0900 	mov.w	r9, #0
   408e0:	e7b9      	b.n	40856 <nrf_recvfrom+0x76>
   408e2:	f04f 0901 	mov.w	r9, #1
   408e6:	e7b6      	b.n	40856 <nrf_recvfrom+0x76>
   408e8:	4620      	mov	r0, r4
   408ea:	f7ff fccb 	bl	40284 <sock_is_closed>
   408ee:	b188      	cbz	r0, 40914 <nrf_recvfrom+0x134>
   408f0:	4620      	mov	r0, r4
   408f2:	f7ff fccb 	bl	4028c <sock_has_error>
   408f6:	b108      	cbz	r0, 408fc <nrf_recvfrom+0x11c>
   408f8:	69a0      	ldr	r0, [r4, #24]
   408fa:	e780      	b.n	407fe <nrf_recvfrom+0x1e>
   408fc:	4620      	mov	r0, r4
   408fe:	f7ff fc92 	bl	40226 <sock_is_stream>
   40902:	2800      	cmp	r0, #0
   40904:	f47f af7f 	bne.w	40806 <nrf_recvfrom+0x26>
   40908:	4620      	mov	r0, r4
   4090a:	f7ff fc91 	bl	40230 <sock_is_datagram>
   4090e:	2800      	cmp	r0, #0
   40910:	f47f af74 	bne.w	407fc <nrf_recvfrom+0x1c>
   40914:	f1b9 0f00 	cmp.w	r9, #0
   40918:	d001      	beq.n	4091e <nrf_recvfrom+0x13e>
   4091a:	200b      	movs	r0, #11
   4091c:	e76f      	b.n	407fe <nrf_recvfrom+0x1e>
   4091e:	4648      	mov	r0, r9
   40920:	a903      	add	r1, sp, #12
   40922:	f7e4 feeb 	bl	256fc <nrf_modem_os_timedwait>
   40926:	2800      	cmp	r0, #0
   40928:	d099      	beq.n	4085e <nrf_recvfrom+0x7e>
   4092a:	f000 fd15 	bl	41358 <abs>
   4092e:	e766      	b.n	407fe <nrf_recvfrom+0x1e>
   40930:	f8c8 1000 	str.w	r1, [r8]
   40934:	e7ad      	b.n	40892 <nrf_recvfrom+0xb2>
   40936:	463e      	mov	r6, r7
   40938:	e7b6      	b.n	408a8 <nrf_recvfrom+0xc8>
   4093a:	4620      	mov	r0, r4
   4093c:	f7ff fc7d 	bl	4023a <sock_is_raw>
   40940:	2800      	cmp	r0, #0
   40942:	d1c3      	bne.n	408cc <nrf_recvfrom+0xec>
   40944:	f1b8 0f00 	cmp.w	r8, #0
   40948:	d10c      	bne.n	40964 <nrf_recvfrom+0x184>
   4094a:	f8b9 300a 	ldrh.w	r3, [r9, #10]
   4094e:	4648      	mov	r0, r9
   40950:	4433      	add	r3, r6
   40952:	f8a9 300a 	strh.w	r3, [r9, #10]
   40956:	f7ff fd65 	bl	40424 <pkt_bytes_left>
   4095a:	b918      	cbnz	r0, 40964 <nrf_recvfrom+0x184>
   4095c:	4649      	mov	r1, r9
   4095e:	4620      	mov	r0, r4
   40960:	f7ff fc49 	bl	401f6 <sock_pkt_remove>
   40964:	42b7      	cmp	r7, r6
   40966:	f43f af4e 	beq.w	40806 <nrf_recvfrom+0x26>
   4096a:	f1bb 0f00 	cmp.w	fp, #0
   4096e:	d022      	beq.n	409b6 <nrf_recvfrom+0x1d6>
   40970:	f1b8 0f00 	cmp.w	r8, #0
   40974:	d016      	beq.n	409a4 <nrf_recvfrom+0x1c4>
   40976:	4648      	mov	r0, r9
   40978:	f7ff fd47 	bl	4040a <pkt_has_next>
   4097c:	b140      	cbz	r0, 40990 <nrf_recvfrom+0x1b0>
   4097e:	4648      	mov	r0, r9
   40980:	f7ff fd49 	bl	40416 <pkt_peek_next>
   40984:	4681      	mov	r9, r0
   40986:	2800      	cmp	r0, #0
   40988:	f43f af3d 	beq.w	40806 <nrf_recvfrom+0x26>
   4098c:	1bbf      	subs	r7, r7, r6
   4098e:	e782      	b.n	40896 <nrf_recvfrom+0xb6>
   40990:	2000      	movs	r0, #0
   40992:	a903      	add	r1, sp, #12
   40994:	f7e4 feb2 	bl	256fc <nrf_modem_os_timedwait>
   40998:	2800      	cmp	r0, #0
   4099a:	d0e6      	beq.n	4096a <nrf_recvfrom+0x18a>
   4099c:	2d00      	cmp	r5, #0
   4099e:	f47f af32 	bne.w	40806 <nrf_recvfrom+0x26>
   409a2:	e7c2      	b.n	4092a <nrf_recvfrom+0x14a>
   409a4:	4620      	mov	r0, r4
   409a6:	f7ff fc17 	bl	401d8 <sock_has_pkt>
   409aa:	2800      	cmp	r0, #0
   409ac:	d0f0      	beq.n	40990 <nrf_recvfrom+0x1b0>
   409ae:	4620      	mov	r0, r4
   409b0:	f7ff fc37 	bl	40222 <sock_pkt_peek_head>
   409b4:	e7e6      	b.n	40984 <nrf_recvfrom+0x1a4>
   409b6:	f1b8 0f00 	cmp.w	r8, #0
   409ba:	d1e0      	bne.n	4097e <nrf_recvfrom+0x19e>
   409bc:	e7f7      	b.n	409ae <nrf_recvfrom+0x1ce>

000409be <nrf_getsockopt>:
   409be:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   409c2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   409c4:	4681      	mov	r9, r0
   409c6:	4688      	mov	r8, r1
   409c8:	4614      	mov	r4, r2
   409ca:	461f      	mov	r7, r3
   409cc:	f7f3 fbd8 	bl	34180 <sock_find>
   409d0:	4606      	mov	r6, r0
   409d2:	b928      	cbnz	r0, 409e0 <nrf_getsockopt+0x22>
   409d4:	2009      	movs	r0, #9
   409d6:	f7e4 ff53 	bl	25880 <nrf_modem_os_errno_set>
   409da:	f04f 34ff 	mov.w	r4, #4294967295
   409de:	e05a      	b.n	40a96 <nrf_getsockopt+0xd8>
   409e0:	b107      	cbz	r7, 409e4 <nrf_getsockopt+0x26>
   409e2:	b90d      	cbnz	r5, 409e8 <nrf_getsockopt+0x2a>
   409e4:	200e      	movs	r0, #14
   409e6:	e7f6      	b.n	409d6 <nrf_getsockopt+0x18>
   409e8:	f5b8 7f8d 	cmp.w	r8, #282	; 0x11a
   409ec:	d134      	bne.n	40a58 <nrf_getsockopt+0x9a>
   409ee:	1e63      	subs	r3, r4, #1
   409f0:	2b04      	cmp	r3, #4
   409f2:	d831      	bhi.n	40a58 <nrf_getsockopt+0x9a>
   409f4:	e8df f003 	tbb	[pc, r3]
   409f8:	0f0a1403 	.word	0x0f0a1403
   409fc:	22          	.byte	0x22
   409fd:	00          	.byte	0x00
   409fe:	2304      	movs	r3, #4
   40a00:	602b      	str	r3, [r5, #0]
   40a02:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   40a06:	603b      	str	r3, [r7, #0]
   40a08:	2400      	movs	r4, #0
   40a0a:	e044      	b.n	40a96 <nrf_getsockopt+0xd8>
   40a0c:	2304      	movs	r3, #4
   40a0e:	602b      	str	r3, [r5, #0]
   40a10:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
   40a14:	e7f7      	b.n	40a06 <nrf_getsockopt+0x48>
   40a16:	2304      	movs	r3, #4
   40a18:	602b      	str	r3, [r5, #0]
   40a1a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
   40a1e:	e7f2      	b.n	40a06 <nrf_getsockopt+0x48>
   40a20:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
   40a24:	682b      	ldr	r3, [r5, #0]
   40a26:	0092      	lsls	r2, r2, #2
   40a28:	429a      	cmp	r2, r3
   40a2a:	bf28      	it	cs
   40a2c:	461a      	movcs	r2, r3
   40a2e:	f100 0140 	add.w	r1, r0, #64	; 0x40
   40a32:	602a      	str	r2, [r5, #0]
   40a34:	4638      	mov	r0, r7
   40a36:	f000 fcb5 	bl	413a4 <memcpy>
   40a3a:	e7e5      	b.n	40a08 <nrf_getsockopt+0x4a>
   40a3c:	6b80      	ldr	r0, [r0, #56]	; 0x38
   40a3e:	f7dc fc00 	bl	1d242 <strlen>
   40a42:	682a      	ldr	r2, [r5, #0]
   40a44:	3001      	adds	r0, #1
   40a46:	4290      	cmp	r0, r2
   40a48:	d203      	bcs.n	40a52 <nrf_getsockopt+0x94>
   40a4a:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   40a4c:	f7dc fbf9 	bl	1d242 <strlen>
   40a50:	1c42      	adds	r2, r0, #1
   40a52:	6bb1      	ldr	r1, [r6, #56]	; 0x38
   40a54:	602a      	str	r2, [r5, #0]
   40a56:	e7ed      	b.n	40a34 <nrf_getsockopt+0x76>
   40a58:	2c14      	cmp	r4, #20
   40a5a:	d020      	beq.n	40a9e <nrf_getsockopt+0xe0>
   40a5c:	dc0b      	bgt.n	40a76 <nrf_getsockopt+0xb8>
   40a5e:	2c04      	cmp	r4, #4
   40a60:	d014      	beq.n	40a8c <nrf_getsockopt+0xce>
   40a62:	1fa3      	subs	r3, r4, #6
   40a64:	2b02      	cmp	r3, #2
   40a66:	d80c      	bhi.n	40a82 <nrf_getsockopt+0xc4>
   40a68:	6828      	ldr	r0, [r5, #0]
   40a6a:	f7ff fa91 	bl	3ff90 <rpc_client_request_alloc>
   40a6e:	4606      	mov	r6, r0
   40a70:	bb28      	cbnz	r0, 40abe <nrf_getsockopt+0x100>
   40a72:	2069      	movs	r0, #105	; 0x69
   40a74:	e7af      	b.n	409d6 <nrf_getsockopt+0x18>
   40a76:	2c15      	cmp	r4, #21
   40a78:	d019      	beq.n	40aae <nrf_getsockopt+0xf0>
   40a7a:	2c20      	cmp	r4, #32
   40a7c:	dc03      	bgt.n	40a86 <nrf_getsockopt+0xc8>
   40a7e:	2c1d      	cmp	r4, #29
   40a80:	dcf2      	bgt.n	40a68 <nrf_getsockopt+0xaa>
   40a82:	206d      	movs	r0, #109	; 0x6d
   40a84:	e7a7      	b.n	409d6 <nrf_getsockopt+0x18>
   40a86:	2c37      	cmp	r4, #55	; 0x37
   40a88:	d0ee      	beq.n	40a68 <nrf_getsockopt+0xaa>
   40a8a:	e7fa      	b.n	40a82 <nrf_getsockopt+0xc4>
   40a8c:	602c      	str	r4, [r5, #0]
   40a8e:	2400      	movs	r4, #0
   40a90:	69b3      	ldr	r3, [r6, #24]
   40a92:	61b4      	str	r4, [r6, #24]
   40a94:	603b      	str	r3, [r7, #0]
   40a96:	4620      	mov	r0, r4
   40a98:	b003      	add	sp, #12
   40a9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   40a9e:	682a      	ldr	r2, [r5, #0]
   40aa0:	f106 0120 	add.w	r1, r6, #32
   40aa4:	2a08      	cmp	r2, #8
   40aa6:	bf28      	it	cs
   40aa8:	2208      	movcs	r2, #8
   40aaa:	602a      	str	r2, [r5, #0]
   40aac:	e7c2      	b.n	40a34 <nrf_getsockopt+0x76>
   40aae:	682a      	ldr	r2, [r5, #0]
   40ab0:	f106 0128 	add.w	r1, r6, #40	; 0x28
   40ab4:	2a08      	cmp	r2, #8
   40ab6:	bf28      	it	cs
   40ab8:	2208      	movcs	r2, #8
   40aba:	602a      	str	r2, [r5, #0]
   40abc:	e7ba      	b.n	40a34 <nrf_getsockopt+0x76>
   40abe:	2300      	movs	r3, #0
   40ac0:	2208      	movs	r2, #8
   40ac2:	7243      	strb	r3, [r0, #9]
   40ac4:	7202      	strb	r2, [r0, #8]
   40ac6:	7283      	strb	r3, [r0, #10]
   40ac8:	72c3      	strb	r3, [r0, #11]
   40aca:	f8c0 9010 	str.w	r9, [r0, #16]
   40ace:	4640      	mov	r0, r8
   40ad0:	f000 f977 	bl	40dc2 <nrf_sol_to_rpc_sol>
   40ad4:	6170      	str	r0, [r6, #20]
   40ad6:	4620      	mov	r0, r4
   40ad8:	f7f4 f9a6 	bl	34e28 <nrf_so_to_rpc_so>
   40adc:	4631      	mov	r1, r6
   40ade:	61b0      	str	r0, [r6, #24]
   40ae0:	aa01      	add	r2, sp, #4
   40ae2:	f247 0004 	movw	r0, #28676	; 0x7004
   40ae6:	f8d6 9000 	ldr.w	r9, [r6]
   40aea:	f7f4 f9b5 	bl	34e58 <req_forward>
   40aee:	4604      	mov	r4, r0
   40af0:	2800      	cmp	r0, #0
   40af2:	f47f af70 	bne.w	409d6 <nrf_getsockopt+0x18>
   40af6:	f8dd 8004 	ldr.w	r8, [sp, #4]
   40afa:	682b      	ldr	r3, [r5, #0]
   40afc:	f8d8 1000 	ldr.w	r1, [r8]
   40b00:	b181      	cbz	r1, 40b24 <nrf_getsockopt+0x166>
   40b02:	f8d8 2004 	ldr.w	r2, [r8, #4]
   40b06:	4638      	mov	r0, r7
   40b08:	429a      	cmp	r2, r3
   40b0a:	bf28      	it	cs
   40b0c:	461a      	movcs	r2, r3
   40b0e:	602a      	str	r2, [r5, #0]
   40b10:	f000 fc48 	bl	413a4 <memcpy>
   40b14:	f8d8 0000 	ldr.w	r0, [r8]
   40b18:	f7ff fa4a 	bl	3ffb0 <rpc_client_data_free>
   40b1c:	9801      	ldr	r0, [sp, #4]
   40b1e:	f7ff fa44 	bl	3ffaa <rpc_client_message_free>
   40b22:	e7b8      	b.n	40a96 <nrf_getsockopt+0xd8>
   40b24:	6872      	ldr	r2, [r6, #4]
   40b26:	4649      	mov	r1, r9
   40b28:	429a      	cmp	r2, r3
   40b2a:	bf28      	it	cs
   40b2c:	461a      	movcs	r2, r3
   40b2e:	4638      	mov	r0, r7
   40b30:	602a      	str	r2, [r5, #0]
   40b32:	f000 fc37 	bl	413a4 <memcpy>
   40b36:	4648      	mov	r0, r9
   40b38:	f7ff fa13 	bl	3ff62 <rpc_transport_local_data_free>
   40b3c:	e7ee      	b.n	40b1c <nrf_getsockopt+0x15e>

00040b3e <tls_setopt_role>:
   40b3e:	b508      	push	{r3, lr}
   40b40:	4603      	mov	r3, r0
   40b42:	b109      	cbz	r1, 40b48 <tls_setopt_role+0xa>
   40b44:	2a04      	cmp	r2, #4
   40b46:	d005      	beq.n	40b54 <tls_setopt_role+0x16>
   40b48:	2016      	movs	r0, #22
   40b4a:	f7e4 fe99 	bl	25880 <nrf_modem_os_errno_set>
   40b4e:	f04f 30ff 	mov.w	r0, #4294967295
   40b52:	e00a      	b.n	40b6a <tls_setopt_role+0x2c>
   40b54:	7808      	ldrb	r0, [r1, #0]
   40b56:	b128      	cbz	r0, 40b64 <tls_setopt_role+0x26>
   40b58:	2801      	cmp	r0, #1
   40b5a:	d1f5      	bne.n	40b48 <tls_setopt_role+0xa>
   40b5c:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
   40b60:	2000      	movs	r0, #0
   40b62:	e002      	b.n	40b6a <tls_setopt_role+0x2c>
   40b64:	2202      	movs	r2, #2
   40b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   40b6a:	bd08      	pop	{r3, pc}

00040b6c <tls_setopt_taglist>:
   40b6c:	b510      	push	{r4, lr}
   40b6e:	f012 0403 	ands.w	r4, r2, #3
   40b72:	d100      	bne.n	40b76 <tls_setopt_taglist+0xa>
   40b74:	b92a      	cbnz	r2, 40b82 <tls_setopt_taglist+0x16>
   40b76:	2016      	movs	r0, #22
   40b78:	f7e4 fe82 	bl	25880 <nrf_modem_os_errno_set>
   40b7c:	f04f 30ff 	mov.w	r0, #4294967295
   40b80:	bd10      	pop	{r4, pc}
   40b82:	0893      	lsrs	r3, r2, #2
   40b84:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
   40b88:	3040      	adds	r0, #64	; 0x40
   40b8a:	f000 fc0b 	bl	413a4 <memcpy>
   40b8e:	4620      	mov	r0, r4
   40b90:	e7f6      	b.n	40b80 <tls_setopt_taglist+0x14>

00040b92 <tls_setopt_sess_cache>:
   40b92:	b508      	push	{r3, lr}
   40b94:	b109      	cbz	r1, 40b9a <tls_setopt_sess_cache+0x8>
   40b96:	2a04      	cmp	r2, #4
   40b98:	d005      	beq.n	40ba6 <tls_setopt_sess_cache+0x14>
   40b9a:	2016      	movs	r0, #22
   40b9c:	f7e4 fe70 	bl	25880 <nrf_modem_os_errno_set>
   40ba0:	f04f 30ff 	mov.w	r0, #4294967295
   40ba4:	bd08      	pop	{r3, pc}
   40ba6:	780b      	ldrb	r3, [r1, #0]
   40ba8:	3b00      	subs	r3, #0
   40baa:	bf18      	it	ne
   40bac:	2301      	movne	r3, #1
   40bae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
   40bb2:	2000      	movs	r0, #0
   40bb4:	e7f6      	b.n	40ba4 <tls_setopt_sess_cache+0x12>

00040bb6 <tls_setopt_peer_verify>:
   40bb6:	b508      	push	{r3, lr}
   40bb8:	b109      	cbz	r1, 40bbe <tls_setopt_peer_verify+0x8>
   40bba:	2a04      	cmp	r2, #4
   40bbc:	d005      	beq.n	40bca <tls_setopt_peer_verify+0x14>
   40bbe:	2016      	movs	r0, #22
   40bc0:	f7e4 fe5e 	bl	25880 <nrf_modem_os_errno_set>
   40bc4:	f04f 30ff 	mov.w	r0, #4294967295
   40bc8:	bd08      	pop	{r3, pc}
   40bca:	680b      	ldr	r3, [r1, #0]
   40bcc:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
   40bd0:	2000      	movs	r0, #0
   40bd2:	e7f9      	b.n	40bc8 <tls_setopt_peer_verify+0x12>

00040bd4 <tls_setopt_hostname>:
   40bd4:	b570      	push	{r4, r5, r6, lr}
   40bd6:	4605      	mov	r5, r0
   40bd8:	4614      	mov	r4, r2
   40bda:	460e      	mov	r6, r1
   40bdc:	b931      	cbnz	r1, 40bec <tls_setopt_hostname+0x18>
   40bde:	b13a      	cbz	r2, 40bf0 <tls_setopt_hostname+0x1c>
   40be0:	2016      	movs	r0, #22
   40be2:	f7e4 fe4d 	bl	25880 <nrf_modem_os_errno_set>
   40be6:	f04f 30ff 	mov.w	r0, #4294967295
   40bea:	bd70      	pop	{r4, r5, r6, pc}
   40bec:	2a00      	cmp	r2, #0
   40bee:	d0f7      	beq.n	40be0 <tls_setopt_hostname+0xc>
   40bf0:	6ba8      	ldr	r0, [r5, #56]	; 0x38
   40bf2:	b108      	cbz	r0, 40bf8 <tls_setopt_hostname+0x24>
   40bf4:	f7e4 ff28 	bl	25a48 <nrf_modem_os_free>
   40bf8:	b174      	cbz	r4, 40c18 <tls_setopt_hostname+0x44>
   40bfa:	1c60      	adds	r0, r4, #1
   40bfc:	f7e4 ff1c 	bl	25a38 <nrf_modem_os_alloc>
   40c00:	63a8      	str	r0, [r5, #56]	; 0x38
   40c02:	b908      	cbnz	r0, 40c08 <tls_setopt_hostname+0x34>
   40c04:	2069      	movs	r0, #105	; 0x69
   40c06:	e7ec      	b.n	40be2 <tls_setopt_hostname+0xe>
   40c08:	4622      	mov	r2, r4
   40c0a:	4631      	mov	r1, r6
   40c0c:	f000 fbca 	bl	413a4 <memcpy>
   40c10:	2000      	movs	r0, #0
   40c12:	6bab      	ldr	r3, [r5, #56]	; 0x38
   40c14:	5518      	strb	r0, [r3, r4]
   40c16:	e7e8      	b.n	40bea <tls_setopt_hostname+0x16>
   40c18:	4620      	mov	r0, r4
   40c1a:	e7e6      	b.n	40bea <tls_setopt_hostname+0x16>

00040c1c <nrf_poll>:
   40c1c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   40c20:	4688      	mov	r8, r1
   40c22:	4607      	mov	r7, r0
   40c24:	9201      	str	r2, [sp, #4]
   40c26:	b930      	cbnz	r0, 40c36 <nrf_poll+0x1a>
   40c28:	b149      	cbz	r1, 40c3e <nrf_poll+0x22>
   40c2a:	200e      	movs	r0, #14
   40c2c:	f7e4 fe28 	bl	25880 <nrf_modem_os_errno_set>
   40c30:	f04f 35ff 	mov.w	r5, #4294967295
   40c34:	e014      	b.n	40c60 <nrf_poll+0x44>
   40c36:	2908      	cmp	r1, #8
   40c38:	d901      	bls.n	40c3e <nrf_poll+0x22>
   40c3a:	2016      	movs	r0, #22
   40c3c:	e7f6      	b.n	40c2c <nrf_poll+0x10>
   40c3e:	f04f 0900 	mov.w	r9, #0
   40c42:	f04f 0a00 	mov.w	sl, #0
   40c46:	463c      	mov	r4, r7
   40c48:	4655      	mov	r5, sl
   40c4a:	45c2      	cmp	sl, r8
   40c4c:	d10c      	bne.n	40c68 <nrf_poll+0x4c>
   40c4e:	b93d      	cbnz	r5, 40c60 <nrf_poll+0x44>
   40c50:	4628      	mov	r0, r5
   40c52:	a901      	add	r1, sp, #4
   40c54:	f7e4 fd52 	bl	256fc <nrf_modem_os_timedwait>
   40c58:	2800      	cmp	r0, #0
   40c5a:	d0f2      	beq.n	40c42 <nrf_poll+0x26>
   40c5c:	306e      	adds	r0, #110	; 0x6e
   40c5e:	d06f      	beq.n	40d40 <nrf_poll+0x124>
   40c60:	4628      	mov	r0, r5
   40c62:	b002      	add	sp, #8
   40c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   40c68:	6820      	ldr	r0, [r4, #0]
   40c6a:	f8a4 9006 	strh.w	r9, [r4, #6]
   40c6e:	2800      	cmp	r0, #0
   40c70:	db4e      	blt.n	40d10 <nrf_poll+0xf4>
   40c72:	f7f3 fa85 	bl	34180 <sock_find>
   40c76:	4606      	mov	r6, r0
   40c78:	b928      	cbnz	r0, 40c86 <nrf_poll+0x6a>
   40c7a:	88e3      	ldrh	r3, [r4, #6]
   40c7c:	f043 0320 	orr.w	r3, r3, #32
   40c80:	80e3      	strh	r3, [r4, #6]
   40c82:	3501      	adds	r5, #1
   40c84:	e044      	b.n	40d10 <nrf_poll+0xf4>
   40c86:	f7ff faf9 	bl	4027c <sock_is_local_closed>
   40c8a:	2800      	cmp	r0, #0
   40c8c:	d1f5      	bne.n	40c7a <nrf_poll+0x5e>
   40c8e:	4630      	mov	r0, r6
   40c90:	f7ff fafc 	bl	4028c <sock_has_error>
   40c94:	b348      	cbz	r0, 40cea <nrf_poll+0xce>
   40c96:	88e3      	ldrh	r3, [r4, #6]
   40c98:	f043 0308 	orr.w	r3, r3, #8
   40c9c:	80e3      	strh	r3, [r4, #6]
   40c9e:	88a3      	ldrh	r3, [r4, #4]
   40ca0:	07da      	lsls	r2, r3, #31
   40ca2:	d517      	bpl.n	40cd4 <nrf_poll+0xb8>
   40ca4:	4630      	mov	r0, r6
   40ca6:	f7ff fb08 	bl	402ba <sock_can_read>
   40caa:	b338      	cbz	r0, 40cfc <nrf_poll+0xe0>
   40cac:	88e3      	ldrh	r3, [r4, #6]
   40cae:	f043 0301 	orr.w	r3, r3, #1
   40cb2:	80e3      	strh	r3, [r4, #6]
   40cb4:	4630      	mov	r0, r6
   40cb6:	f7ff fab6 	bl	40226 <sock_is_stream>
   40cba:	b158      	cbz	r0, 40cd4 <nrf_poll+0xb8>
   40cbc:	4630      	mov	r0, r6
   40cbe:	f7ff fae1 	bl	40284 <sock_is_closed>
   40cc2:	b138      	cbz	r0, 40cd4 <nrf_poll+0xb8>
   40cc4:	4630      	mov	r0, r6
   40cc6:	f7ff fae1 	bl	4028c <sock_has_error>
   40cca:	b918      	cbnz	r0, 40cd4 <nrf_poll+0xb8>
   40ccc:	88e3      	ldrh	r3, [r4, #6]
   40cce:	f043 0301 	orr.w	r3, r3, #1
   40cd2:	80e3      	strh	r3, [r4, #6]
   40cd4:	88a3      	ldrh	r3, [r4, #4]
   40cd6:	075b      	lsls	r3, r3, #29
   40cd8:	d516      	bpl.n	40d08 <nrf_poll+0xec>
   40cda:	4630      	mov	r0, r6
   40cdc:	f7ff faf6 	bl	402cc <sock_can_send>
   40ce0:	b190      	cbz	r0, 40d08 <nrf_poll+0xec>
   40ce2:	88e3      	ldrh	r3, [r4, #6]
   40ce4:	f043 0304 	orr.w	r3, r3, #4
   40ce8:	e7ca      	b.n	40c80 <nrf_poll+0x64>
   40cea:	4630      	mov	r0, r6
   40cec:	f7ff faca 	bl	40284 <sock_is_closed>
   40cf0:	2800      	cmp	r0, #0
   40cf2:	d0d4      	beq.n	40c9e <nrf_poll+0x82>
   40cf4:	88e3      	ldrh	r3, [r4, #6]
   40cf6:	f043 0310 	orr.w	r3, r3, #16
   40cfa:	e7cf      	b.n	40c9c <nrf_poll+0x80>
   40cfc:	4630      	mov	r0, r6
   40cfe:	f7ff fae1 	bl	402c4 <sock_can_accept>
   40d02:	2800      	cmp	r0, #0
   40d04:	d1d2      	bne.n	40cac <nrf_poll+0x90>
   40d06:	e7d5      	b.n	40cb4 <nrf_poll+0x98>
   40d08:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   40d0c:	2b00      	cmp	r3, #0
   40d0e:	d1b8      	bne.n	40c82 <nrf_poll+0x66>
   40d10:	f10a 0a01 	add.w	sl, sl, #1
   40d14:	3408      	adds	r4, #8
   40d16:	e798      	b.n	40c4a <nrf_poll+0x2e>
   40d18:	f857 0034 	ldr.w	r0, [r7, r4, lsl #3]
   40d1c:	2800      	cmp	r0, #0
   40d1e:	db08      	blt.n	40d32 <nrf_poll+0x116>
   40d20:	88fb      	ldrh	r3, [r7, #6]
   40d22:	3501      	adds	r5, #1
   40d24:	f043 0308 	orr.w	r3, r3, #8
   40d28:	80fb      	strh	r3, [r7, #6]
   40d2a:	f7f3 fa29 	bl	34180 <sock_find>
   40d2e:	b100      	cbz	r0, 40d32 <nrf_poll+0x116>
   40d30:	6186      	str	r6, [r0, #24]
   40d32:	3401      	adds	r4, #1
   40d34:	4544      	cmp	r4, r8
   40d36:	d1ef      	bne.n	40d18 <nrf_poll+0xfc>
   40d38:	2d00      	cmp	r5, #0
   40d3a:	d191      	bne.n	40c60 <nrf_poll+0x44>
   40d3c:	2004      	movs	r0, #4
   40d3e:	e775      	b.n	40c2c <nrf_poll+0x10>
   40d40:	462c      	mov	r4, r5
   40d42:	266e      	movs	r6, #110	; 0x6e
   40d44:	e7f6      	b.n	40d34 <nrf_poll+0x118>

00040d46 <nrf_fcntl>:
   40d46:	b538      	push	{r3, r4, r5, lr}
   40d48:	460d      	mov	r5, r1
   40d4a:	4614      	mov	r4, r2
   40d4c:	f7f3 fa18 	bl	34180 <sock_find>
   40d50:	4603      	mov	r3, r0
   40d52:	b928      	cbnz	r0, 40d60 <nrf_fcntl+0x1a>
   40d54:	2009      	movs	r0, #9
   40d56:	f7e4 fd93 	bl	25880 <nrf_modem_os_errno_set>
   40d5a:	f04f 30ff 	mov.w	r0, #4294967295
   40d5e:	e006      	b.n	40d6e <nrf_fcntl+0x28>
   40d60:	2d03      	cmp	r5, #3
   40d62:	d003      	beq.n	40d6c <nrf_fcntl+0x26>
   40d64:	2d04      	cmp	r5, #4
   40d66:	d003      	beq.n	40d70 <nrf_fcntl+0x2a>
   40d68:	2016      	movs	r0, #22
   40d6a:	e7f4      	b.n	40d56 <nrf_fcntl+0x10>
   40d6c:	6b40      	ldr	r0, [r0, #52]	; 0x34
   40d6e:	bd38      	pop	{r3, r4, r5, pc}
   40d70:	f034 0001 	bics.w	r0, r4, #1
   40d74:	d1f8      	bne.n	40d68 <nrf_fcntl+0x22>
   40d76:	635c      	str	r4, [r3, #52]	; 0x34
   40d78:	e7f9      	b.n	40d6e <nrf_fcntl+0x28>

00040d7a <nrf_af_to_rpc_af>:
   40d7a:	4770      	bx	lr

00040d7c <rpc_af_to_nrf_af>:
   40d7c:	f7ff bffd 	b.w	40d7a <nrf_af_to_rpc_af>

00040d80 <nrf_type_to_rpc_type>:
   40d80:	4770      	bx	lr

00040d82 <nrf_proto_to_rpc_proto>:
   40d82:	2829      	cmp	r0, #41	; 0x29
   40d84:	d015      	beq.n	40db2 <nrf_proto_to_rpc_proto+0x30>
   40d86:	dc05      	bgt.n	40d94 <nrf_proto_to_rpc_proto+0x12>
   40d88:	2806      	cmp	r0, #6
   40d8a:	d014      	beq.n	40db6 <nrf_proto_to_rpc_proto+0x34>
   40d8c:	2811      	cmp	r0, #17
   40d8e:	d014      	beq.n	40dba <nrf_proto_to_rpc_proto+0x38>
   40d90:	b148      	cbz	r0, 40da6 <nrf_proto_to_rpc_proto+0x24>
   40d92:	4770      	bx	lr
   40d94:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   40d98:	d00d      	beq.n	40db6 <nrf_proto_to_rpc_proto+0x34>
   40d9a:	f240 1311 	movw	r3, #273	; 0x111
   40d9e:	4298      	cmp	r0, r3
   40da0:	d00b      	beq.n	40dba <nrf_proto_to_rpc_proto+0x38>
   40da2:	28ff      	cmp	r0, #255	; 0xff
   40da4:	d10c      	bne.n	40dc0 <nrf_proto_to_rpc_proto+0x3e>
   40da6:	2901      	cmp	r1, #1
   40da8:	d009      	beq.n	40dbe <nrf_proto_to_rpc_proto+0x3c>
   40daa:	2902      	cmp	r1, #2
   40dac:	bf08      	it	eq
   40dae:	2002      	moveq	r0, #2
   40db0:	4770      	bx	lr
   40db2:	2006      	movs	r0, #6
   40db4:	4770      	bx	lr
   40db6:	2001      	movs	r0, #1
   40db8:	4770      	bx	lr
   40dba:	2002      	movs	r0, #2
   40dbc:	4770      	bx	lr
   40dbe:	4608      	mov	r0, r1
   40dc0:	4770      	bx	lr

00040dc2 <nrf_sol_to_rpc_sol>:
   40dc2:	2829      	cmp	r0, #41	; 0x29
   40dc4:	d013      	beq.n	40dee <nrf_sol_to_rpc_sol+0x2c>
   40dc6:	dc09      	bgt.n	40ddc <nrf_sol_to_rpc_sol+0x1a>
   40dc8:	2801      	cmp	r0, #1
   40dca:	d012      	beq.n	40df2 <nrf_sol_to_rpc_sol+0x30>
   40dcc:	2806      	cmp	r0, #6
   40dce:	d012      	beq.n	40df6 <nrf_sol_to_rpc_sol+0x34>
   40dd0:	2800      	cmp	r0, #0
   40dd2:	bf14      	ite	ne
   40dd4:	f04f 30ff 	movne.w	r0, #4294967295
   40dd8:	2004      	moveq	r0, #4
   40dda:	4770      	bx	lr
   40ddc:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   40de0:	d00b      	beq.n	40dfa <nrf_sol_to_rpc_sol+0x38>
   40de2:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   40de6:	bf18      	it	ne
   40de8:	f04f 30ff 	movne.w	r0, #4294967295
   40dec:	4770      	bx	lr
   40dee:	2006      	movs	r0, #6
   40df0:	4770      	bx	lr
   40df2:	2008      	movs	r0, #8
   40df4:	4770      	bx	lr
   40df6:	2001      	movs	r0, #1
   40df8:	4770      	bx	lr
   40dfa:	f44f 7080 	mov.w	r0, #256	; 0x100
   40dfe:	4770      	bx	lr

00040e00 <rpc_error_to_nrf_gai_errno>:
   40e00:	b508      	push	{r3, lr}
   40e02:	1f03      	subs	r3, r0, #4
   40e04:	2b09      	cmp	r3, #9
   40e06:	d80f      	bhi.n	40e28 <rpc_error_to_nrf_gai_errno+0x28>
   40e08:	e8df f003 	tbb	[pc, r3]
   40e0c:	0e110508 	.word	0x0e110508
   40e10:	0e0e0e0e 	.word	0x0e0e0e0e
   40e14:	110e      	.short	0x110e
   40e16:	f44f 708a 	mov.w	r0, #276	; 0x114
   40e1a:	bd08      	pop	{r3, pc}
   40e1c:	2073      	movs	r0, #115	; 0x73
   40e1e:	f7e4 fd2f 	bl	25880 <nrf_modem_os_errno_set>
   40e22:	f240 1015 	movw	r0, #277	; 0x115
   40e26:	e7f8      	b.n	40e1a <rpc_error_to_nrf_gai_errno+0x1a>
   40e28:	f7f4 f80a 	bl	34e40 <rpc_error_to_nrf_errno>
   40e2c:	e7f7      	b.n	40e1e <rpc_error_to_nrf_gai_errno+0x1e>
   40e2e:	f240 1011 	movw	r0, #273	; 0x111
   40e32:	e7f2      	b.n	40e1a <rpc_error_to_nrf_gai_errno+0x1a>

00040e34 <res_forward>:
   40e34:	4603      	mov	r3, r0
   40e36:	68c0      	ldr	r0, [r0, #12]
   40e38:	b108      	cbz	r0, 40e3e <res_forward+0xa>
   40e3a:	6003      	str	r3, [r0, #0]
   40e3c:	2001      	movs	r0, #1
   40e3e:	4770      	bx	lr

00040e40 <nrf_modem_gnss_agps_write>:
   40e40:	b530      	push	{r4, r5, lr}
   40e42:	4615      	mov	r5, r2
   40e44:	4604      	mov	r4, r0
   40e46:	b09f      	sub	sp, #124	; 0x7c
   40e48:	2800      	cmp	r0, #0
   40e4a:	d03e      	beq.n	40eca <nrf_modem_gnss_agps_write+0x8a>
   40e4c:	2900      	cmp	r1, #0
   40e4e:	d03c      	beq.n	40eca <nrf_modem_gnss_agps_write+0x8a>
   40e50:	2272      	movs	r2, #114	; 0x72
   40e52:	2100      	movs	r1, #0
   40e54:	a801      	add	r0, sp, #4
   40e56:	f000 fac5 	bl	413e4 <memset>
   40e5a:	1e6a      	subs	r2, r5, #1
   40e5c:	2a07      	cmp	r2, #7
   40e5e:	d834      	bhi.n	40eca <nrf_modem_gnss_agps_write+0x8a>
   40e60:	e8df f002 	tbb	[pc, r2]
   40e64:	1a151004 	.word	0x1a151004
   40e68:	2e29241f 	.word	0x2e29241f
   40e6c:	4620      	mov	r0, r4
   40e6e:	a902      	add	r1, sp, #8
   40e70:	f7ff f8a0 	bl	3ffb4 <rpc_gnss_serialize_utc>
   40e74:	2272      	movs	r2, #114	; 0x72
   40e76:	f241 0005 	movw	r0, #4101	; 0x1005
   40e7a:	a901      	add	r1, sp, #4
   40e7c:	f7f4 fb3e 	bl	354fc <send_message>
   40e80:	b01f      	add	sp, #124	; 0x7c
   40e82:	bd30      	pop	{r4, r5, pc}
   40e84:	4620      	mov	r0, r4
   40e86:	a902      	add	r1, sp, #8
   40e88:	f7ff f8b1 	bl	3ffee <rpc_gnss_serialize_ephe>
   40e8c:	e7f2      	b.n	40e74 <nrf_modem_gnss_agps_write+0x34>
   40e8e:	4620      	mov	r0, r4
   40e90:	a902      	add	r1, sp, #8
   40e92:	f7ff f8f6 	bl	40082 <rpc_gnss_serialize_alm>
   40e96:	e7ed      	b.n	40e74 <nrf_modem_gnss_agps_write+0x34>
   40e98:	4620      	mov	r0, r4
   40e9a:	a902      	add	r1, sp, #8
   40e9c:	f7ff f91e 	bl	400dc <rpc_gnss_serialize_klob>
   40ea0:	e7e8      	b.n	40e74 <nrf_modem_gnss_agps_write+0x34>
   40ea2:	4620      	mov	r0, r4
   40ea4:	a902      	add	r1, sp, #8
   40ea6:	f7ff f934 	bl	40112 <rpc_gnss_serialize_nequick>
   40eaa:	e7e3      	b.n	40e74 <nrf_modem_gnss_agps_write+0x34>
   40eac:	4620      	mov	r0, r4
   40eae:	a902      	add	r1, sp, #8
   40eb0:	f7ff f944 	bl	4013c <rpc_gnss_serialize_time_and_sv_tow>
   40eb4:	e7de      	b.n	40e74 <nrf_modem_gnss_agps_write+0x34>
   40eb6:	4620      	mov	r0, r4
   40eb8:	a902      	add	r1, sp, #8
   40eba:	f7ff f962 	bl	40182 <rpc_gnss_serialize_location>
   40ebe:	e7d9      	b.n	40e74 <nrf_modem_gnss_agps_write+0x34>
   40ec0:	4620      	mov	r0, r4
   40ec2:	a902      	add	r1, sp, #8
   40ec4:	f7ff f97a 	bl	401bc <rpc_gnss_serialize_integrity>
   40ec8:	e7d4      	b.n	40e74 <nrf_modem_gnss_agps_write+0x34>
   40eca:	f06f 0015 	mvn.w	r0, #21
   40ece:	e7d7      	b.n	40e80 <nrf_modem_gnss_agps_write+0x40>

00040ed0 <nrf_modem_is_initialized>:
   40ed0:	f7f4 bfbc 	b.w	35e4c <nrf_modem_state_is_initialized>

00040ed4 <z_device_state_init>:
}
   40ed4:	4770      	bx	lr

00040ed6 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   40ed6:	b138      	cbz	r0, 40ee8 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   40ed8:	68c3      	ldr	r3, [r0, #12]
   40eda:	8818      	ldrh	r0, [r3, #0]
   40edc:	f3c0 0008 	ubfx	r0, r0, #0, #9
   40ee0:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   40ee4:	4258      	negs	r0, r3
   40ee6:	4158      	adcs	r0, r3
}
   40ee8:	4770      	bx	lr

00040eea <z_early_memset>:
   40eea:	f000 ba7b 	b.w	413e4 <memset>

00040eee <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   40eee:	f000 ba59 	b.w	413a4 <memcpy>

00040ef2 <k_heap_init>:
{
   40ef2:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   40ef4:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   40ef8:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   40efc:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   40f00:	f7e0 ba24 	b.w	2134c <sys_heap_init>

00040f04 <k_heap_alloc>:
{
   40f04:	b507      	push	{r0, r1, r2, lr}
	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   40f06:	e9cd 2300 	strd	r2, r3, [sp]
   40f0a:	460a      	mov	r2, r1
   40f0c:	2104      	movs	r1, #4
   40f0e:	f7f5 f941 	bl	36194 <k_heap_aligned_alloc>
}
   40f12:	b003      	add	sp, #12
   40f14:	f85d fb04 	ldr.w	pc, [sp], #4

00040f18 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   40f18:	f3ef 8005 	mrs	r0, IPSR
}
   40f1c:	3800      	subs	r0, #0
   40f1e:	bf18      	it	ne
   40f20:	2001      	movne	r0, #1
   40f22:	4770      	bx	lr

00040f24 <z_impl_k_thread_name_set>:
}
   40f24:	f06f 0057 	mvn.w	r0, #87	; 0x57
   40f28:	4770      	bx	lr

00040f2a <k_thread_name_get>:
}
   40f2a:	2000      	movs	r0, #0
   40f2c:	4770      	bx	lr

00040f2e <z_impl_k_thread_start>:
	z_sched_start(thread);
   40f2e:	f7f6 bf39 	b.w	37da4 <z_sched_start>

00040f32 <z_pm_save_idle_exit>:
{
   40f32:	b508      	push	{r3, lr}
	pm_system_resume();
   40f34:	f7e1 fc6e 	bl	22814 <pm_system_resume>
}
   40f38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   40f3c:	f7fd bdee 	b.w	3eb1c <sys_clock_idle_exit>

00040f40 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   40f40:	f990 300e 	ldrsb.w	r3, [r0, #14]
   40f44:	428b      	cmp	r3, r1
   40f46:	d001      	beq.n	40f4c <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   40f48:	f7f7 b8c4 	b.w	380d4 <z_set_prio>
}
   40f4c:	2000      	movs	r0, #0
   40f4e:	4770      	bx	lr

00040f50 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   40f50:	2300      	movs	r3, #0
   40f52:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
   40f56:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   40f5a:	4618      	mov	r0, r3
   40f5c:	4770      	bx	lr

00040f5e <z_queue_node_peek>:
{
   40f5e:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   40f60:	4604      	mov	r4, r0
   40f62:	b130      	cbz	r0, 40f72 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   40f64:	6802      	ldr	r2, [r0, #0]
   40f66:	0793      	lsls	r3, r2, #30
   40f68:	d003      	beq.n	40f72 <z_queue_node_peek+0x14>
		ret = anode->data;
   40f6a:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   40f6c:	b109      	cbz	r1, 40f72 <z_queue_node_peek+0x14>
			k_free(anode);
   40f6e:	f000 f988 	bl	41282 <k_free>
}
   40f72:	4620      	mov	r0, r4
   40f74:	bd10      	pop	{r4, pc}

00040f76 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   40f76:	2301      	movs	r3, #1
{
   40f78:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   40f7a:	9300      	str	r3, [sp, #0]
   40f7c:	2300      	movs	r3, #0
{
   40f7e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   40f80:	4619      	mov	r1, r3
   40f82:	f7f5 fe03 	bl	36b8c <queue_insert>
}
   40f86:	b003      	add	sp, #12
   40f88:	f85d fb04 	ldr.w	pc, [sp], #4

00040f8c <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   40f8c:	b15a      	cbz	r2, 40fa6 <z_impl_k_sem_init+0x1a>
   40f8e:	428a      	cmp	r2, r1
   40f90:	d309      	bcc.n	40fa6 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   40f92:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   40f96:	e9c0 1202 	strd	r1, r2, [r0, #8]
   40f9a:	e9c0 0000 	strd	r0, r0, [r0]
   40f9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   40fa2:	2000      	movs	r0, #0
   40fa4:	4770      	bx	lr
		return -EINVAL;
   40fa6:	f06f 0015 	mvn.w	r0, #21
}
   40faa:	4770      	bx	lr

00040fac <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   40fac:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   40fae:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   40fb0:	408b      	lsls	r3, r1
   40fb2:	ea22 0303 	bic.w	r3, r2, r3
   40fb6:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   40fb8:	fa22 f001 	lsr.w	r0, r2, r1
}
   40fbc:	f000 0001 	and.w	r0, r0, #1
   40fc0:	4770      	bx	lr

00040fc2 <unschedule_locked>:
{
   40fc2:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   40fc4:	2103      	movs	r1, #3
{
   40fc6:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   40fc8:	300c      	adds	r0, #12
   40fca:	f7ff ffef 	bl	40fac <flag_test_and_clear>
   40fce:	4604      	mov	r4, r0
   40fd0:	b118      	cbz	r0, 40fda <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   40fd2:	f105 0010 	add.w	r0, r5, #16
   40fd6:	f7f7 fd67 	bl	38aa8 <z_abort_timeout>
}
   40fda:	4620      	mov	r0, r4
   40fdc:	bd38      	pop	{r3, r4, r5, pc}

00040fde <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   40fde:	b120      	cbz	r0, 40fea <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   40fe0:	2200      	movs	r2, #0
   40fe2:	30d8      	adds	r0, #216	; 0xd8
   40fe4:	4611      	mov	r1, r2
   40fe6:	f7f7 bbcd 	b.w	38784 <z_sched_wake>
}
   40fea:	4770      	bx	lr

00040fec <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   40fec:	68c3      	ldr	r3, [r0, #12]
{
   40fee:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   40ff0:	f3c3 0540 	ubfx	r5, r3, #1, #1
   40ff4:	079b      	lsls	r3, r3, #30
{
   40ff6:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   40ff8:	d416      	bmi.n	41028 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   40ffa:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   40ffc:	2102      	movs	r1, #2
   40ffe:	300c      	adds	r0, #12
   41000:	f7ff ffd4 	bl	40fac <flag_test_and_clear>
   41004:	b180      	cbz	r0, 41028 <cancel_async_locked+0x3c>
	return list->head;
   41006:	f8d6 20d0 	ldr.w	r2, [r6, #208]	; 0xd0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4100a:	b16a      	cbz	r2, 41028 <cancel_async_locked+0x3c>
   4100c:	4294      	cmp	r4, r2
   4100e:	d11b      	bne.n	41048 <cancel_async_locked+0x5c>
	return node->next;
   41010:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   41012:	f8d6 10d4 	ldr.w	r1, [r6, #212]	; 0xd4
Z_GENLIST_REMOVE(slist, snode)
   41016:	b98d      	cbnz	r5, 4103c <cancel_async_locked+0x50>
   41018:	428c      	cmp	r4, r1
	list->head = node;
   4101a:	f8c6 20d0 	str.w	r2, [r6, #208]	; 0xd0
Z_GENLIST_REMOVE(slist, snode)
   4101e:	d101      	bne.n	41024 <cancel_async_locked+0x38>
	list->tail = node;
   41020:	f8c6 20d4 	str.w	r2, [r6, #212]	; 0xd4
	parent->next = child;
   41024:	2300      	movs	r3, #0
   41026:	6023      	str	r3, [r4, #0]
	return *flagp;
   41028:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   4102a:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   4102e:	bf1e      	ittt	ne
   41030:	f043 0302 	orrne.w	r3, r3, #2
   41034:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   41036:	f003 000f 	andne.w	r0, r3, #15
}
   4103a:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   4103c:	428c      	cmp	r4, r1
	parent->next = child;
   4103e:	602a      	str	r2, [r5, #0]
	list->tail = node;
   41040:	bf08      	it	eq
   41042:	f8c6 50d4 	streq.w	r5, [r6, #212]	; 0xd4
}
   41046:	e7ed      	b.n	41024 <cancel_async_locked+0x38>
	return node->next;
   41048:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   4104a:	6812      	ldr	r2, [r2, #0]
   4104c:	e7dd      	b.n	4100a <cancel_async_locked+0x1e>

0004104e <k_work_delayable_busy_get>:
   4104e:	f7f6 b913 	b.w	37278 <k_work_busy_get>

00041052 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   41052:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   41056:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   4105a:	4283      	cmp	r3, r0
		return b2 - b1;
   4105c:	bf14      	ite	ne
   4105e:	1ac0      	subne	r0, r0, r3
	return 0;
   41060:	2000      	moveq	r0, #0
}
   41062:	4770      	bx	lr

00041064 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   41064:	4603      	mov	r3, r0
   41066:	b920      	cbnz	r0, 41072 <z_reschedule_irqlock+0xe>
   41068:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   4106c:	b90a      	cbnz	r2, 41072 <z_reschedule_irqlock+0xe>
   4106e:	f7e1 bdf9 	b.w	22c64 <arch_swap>
   41072:	f383 8811 	msr	BASEPRI, r3
   41076:	f3bf 8f6f 	isb	sy
}
   4107a:	4770      	bx	lr

0004107c <z_reschedule_unlocked>:
	__asm__ volatile(
   4107c:	f04f 0320 	mov.w	r3, #32
   41080:	f3ef 8011 	mrs	r0, BASEPRI
   41084:	f383 8812 	msr	BASEPRI_MAX, r3
   41088:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   4108c:	f7ff bfea 	b.w	41064 <z_reschedule_irqlock>

00041090 <z_priq_dumb_best>:
	return list->head == list;
   41090:	6803      	ldr	r3, [r0, #0]
}
   41092:	4298      	cmp	r0, r3
   41094:	bf14      	ite	ne
   41096:	4618      	movne	r0, r3
   41098:	2000      	moveq	r0, #0
   4109a:	4770      	bx	lr

0004109c <z_unpend_all>:
{
   4109c:	b538      	push	{r3, r4, r5, lr}
   4109e:	4605      	mov	r5, r0
	int need_sched = 0;
   410a0:	2000      	movs	r0, #0
   410a2:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   410a4:	42a5      	cmp	r5, r4
   410a6:	d000      	beq.n	410aa <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   410a8:	b904      	cbnz	r4, 410ac <z_unpend_all+0x10>
}
   410aa:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   410ac:	4620      	mov	r0, r4
   410ae:	f7f6 fcd9 	bl	37a64 <z_unpend_thread>
		z_ready_thread(thread);
   410b2:	4620      	mov	r0, r4
   410b4:	f7f6 fe40 	bl	37d38 <z_ready_thread>
		need_sched = 1;
   410b8:	2001      	movs	r0, #1
   410ba:	e7f2      	b.n	410a2 <z_unpend_all+0x6>

000410bc <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   410bc:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   410be:	f7f7 fe7b 	bl	38db8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   410c2:	bd08      	pop	{r3, pc}

000410c4 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   410c4:	f7f7 be78 	b.w	38db8 <sys_clock_tick_get>

000410c8 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   410c8:	b108      	cbz	r0, 410ce <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   410ca:	f7e0 ba43 	b.w	21554 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   410ce:	4770      	bx	lr

000410d0 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   410d0:	f1b1 3fff 	cmp.w	r1, #4294967295
   410d4:	bf08      	it	eq
   410d6:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   410da:	b538      	push	{r3, r4, r5, lr}
   410dc:	4605      	mov	r5, r0
   410de:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   410e0:	d020      	beq.n	41124 <sys_clock_timeout_end_calc+0x54>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   410e2:	ea51 0300 	orrs.w	r3, r1, r0
   410e6:	d103      	bne.n	410f0 <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   410e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   410ec:	f7f7 be64 	b.w	38db8 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   410f0:	f06f 0301 	mvn.w	r3, #1
   410f4:	f04f 31ff 	mov.w	r1, #4294967295
   410f8:	1a1b      	subs	r3, r3, r0
   410fa:	eb61 0204 	sbc.w	r2, r1, r4
   410fe:	2a00      	cmp	r2, #0
   41100:	db02      	blt.n	41108 <sys_clock_timeout_end_calc+0x38>
			return Z_TICK_ABS(dt);
   41102:	4618      	mov	r0, r3
   41104:	4611      	mov	r1, r2
}
   41106:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
   41108:	f7f7 fe56 	bl	38db8 <sys_clock_tick_get>
   4110c:	2d01      	cmp	r5, #1
   4110e:	4622      	mov	r2, r4
   41110:	f174 0400 	sbcs.w	r4, r4, #0
   41114:	462b      	mov	r3, r5
   41116:	bfbc      	itt	lt
   41118:	2301      	movlt	r3, #1
   4111a:	2200      	movlt	r2, #0
   4111c:	1818      	adds	r0, r3, r0
   4111e:	eb41 0102 	adc.w	r1, r1, r2
   41122:	e7f0      	b.n	41106 <sys_clock_timeout_end_calc+0x36>
		return UINT64_MAX;
   41124:	f04f 30ff 	mov.w	r0, #4294967295
   41128:	4601      	mov	r1, r0
   4112a:	e7ec      	b.n	41106 <sys_clock_timeout_end_calc+0x36>

0004112c <add_event>:
{
   4112c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4112e:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   41130:	e9d0 1300 	ldrd	r1, r3, [r0]
   41134:	4288      	cmp	r0, r1
   41136:	4604      	mov	r4, r0
   41138:	d00d      	beq.n	41156 <add_event+0x2a>
	if ((pending == NULL) ||
   4113a:	b163      	cbz	r3, 41156 <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   4113c:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   4113e:	b100      	cbz	r0, 41142 <add_event+0x16>
   41140:	3860      	subs	r0, #96	; 0x60
   41142:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   41146:	4639      	mov	r1, r7
   41148:	f7ff ff83 	bl	41052 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   4114c:	2800      	cmp	r0, #0
   4114e:	dc02      	bgt.n	41156 <add_event+0x2a>
	return list->head == list;
   41150:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   41152:	42b4      	cmp	r4, r6
   41154:	d109      	bne.n	4116a <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
   41156:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   41158:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   4115c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   4115e:	6065      	str	r5, [r4, #4]
}
   41160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   41162:	6863      	ldr	r3, [r4, #4]
   41164:	42b3      	cmp	r3, r6
   41166:	d0f6      	beq.n	41156 <add_event+0x2a>
   41168:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   4116a:	2e00      	cmp	r6, #0
   4116c:	d0f3      	beq.n	41156 <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
   4116e:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   41170:	b101      	cbz	r1, 41174 <add_event+0x48>
   41172:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   41174:	4638      	mov	r0, r7
   41176:	f7ff ff6c 	bl	41052 <z_sched_prio_cmp>
   4117a:	2800      	cmp	r0, #0
   4117c:	ddf1      	ble.n	41162 <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
   4117e:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   41180:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   41184:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   41186:	6075      	str	r5, [r6, #4]
			return;
   41188:	e7ea      	b.n	41160 <add_event+0x34>

0004118a <signal_poll_event>:
{
   4118a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct z_poller *poller = event->poller;
   4118e:	6884      	ldr	r4, [r0, #8]
{
   41190:	4605      	mov	r5, r0
   41192:	460e      	mov	r6, r1
	if (poller != NULL) {
   41194:	b144      	cbz	r4, 411a8 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   41196:	7863      	ldrb	r3, [r4, #1]
   41198:	2b01      	cmp	r3, #1
   4119a:	d137      	bne.n	4120c <signal_poll_event+0x82>
	if (!z_is_thread_pending(thread)) {
   4119c:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   411a0:	f013 0302 	ands.w	r3, r3, #2
   411a4:	d10a      	bne.n	411bc <signal_poll_event+0x32>
		poller->is_polling = false;
   411a6:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   411a8:	2000      	movs	r0, #0
	event->state |= state;
   411aa:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   411ac:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   411ae:	f3c3 3145 	ubfx	r1, r3, #13, #6
   411b2:	430e      	orrs	r6, r1
   411b4:	f366 3352 	bfi	r3, r6, #13, #6
   411b8:	60eb      	str	r3, [r5, #12]
	return retcode;
   411ba:	e00b      	b.n	411d4 <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   411bc:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   411c0:	f1b3 3fff 	cmp.w	r3, #4294967295
   411c4:	bf08      	it	eq
   411c6:	f112 0f02 	cmneq.w	r2, #2
   411ca:	d106      	bne.n	411da <signal_poll_event+0x50>
		poller->is_polling = false;
   411cc:	2300      	movs	r3, #0
		return -EAGAIN;
   411ce:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   411d2:	7023      	strb	r3, [r4, #0]
}
   411d4:	b002      	add	sp, #8
   411d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   411da:	f1a4 0060 	sub.w	r0, r4, #96	; 0x60
	z_unpend_thread(thread);
   411de:	9001      	str	r0, [sp, #4]
   411e0:	f7f6 fc40 	bl	37a64 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   411e4:	2e08      	cmp	r6, #8
   411e6:	bf0c      	ite	eq
   411e8:	f06f 0303 	mvneq.w	r3, #3
   411ec:	2300      	movne	r3, #0
   411ee:	62a3      	str	r3, [r4, #40]	; 0x28
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   411f0:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   411f4:	06db      	lsls	r3, r3, #27
   411f6:	d103      	bne.n	41200 <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   411f8:	f854 7c48 	ldr.w	r7, [r4, #-72]
   411fc:	9801      	ldr	r0, [sp, #4]
   411fe:	b10f      	cbz	r7, 41204 <signal_poll_event+0x7a>
		poller->is_polling = false;
   41200:	2300      	movs	r3, #0
   41202:	e7d0      	b.n	411a6 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   41204:	f7f6 fd98 	bl	37d38 <z_ready_thread>
		poller->is_polling = false;
   41208:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   4120a:	e7cd      	b.n	411a8 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   4120c:	2b02      	cmp	r3, #2
   4120e:	d1f7      	bne.n	41200 <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   41210:	7823      	ldrb	r3, [r4, #0]
   41212:	2b00      	cmp	r3, #0
   41214:	d0c8      	beq.n	411a8 <signal_poll_event+0x1e>
   41216:	f854 7c04 	ldr.w	r7, [r4, #-4]
   4121a:	2f00      	cmp	r7, #0
   4121c:	d0f4      	beq.n	41208 <signal_poll_event+0x7e>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   4121e:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   41222:	f1a4 0114 	sub.w	r1, r4, #20
   41226:	f104 0014 	add.w	r0, r4, #20
   4122a:	9101      	str	r1, [sp, #4]
   4122c:	f7f7 fc3c 	bl	38aa8 <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
   41230:	4638      	mov	r0, r7
   41232:	9901      	ldr	r1, [sp, #4]
		twork->poll_result = 0;
   41234:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   41238:	f7f6 f854 	bl	372e4 <k_work_submit_to_queue>
		poller->is_polling = false;
   4123c:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   41240:	e7b2      	b.n	411a8 <signal_poll_event+0x1e>

00041242 <z_handle_obj_poll_events>:
{
   41242:	4603      	mov	r3, r0
	return list->head == list;
   41244:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   41246:	4283      	cmp	r3, r0
   41248:	d008      	beq.n	4125c <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   4124a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   4124e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   41250:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   41252:	2300      	movs	r3, #0
	node->prev = NULL;
   41254:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   41258:	f7ff bf97 	b.w	4118a <signal_poll_event>
}
   4125c:	4770      	bx	lr

0004125e <z_impl_k_event_post>:
	k_event_post_internal(event, events, true);
   4125e:	2201      	movs	r2, #1
   41260:	f7f8 b9e4 	b.w	3962c <k_event_post_internal>

00041264 <z_impl_k_event_set>:
	k_event_post_internal(event, events, false);
   41264:	2200      	movs	r2, #0
   41266:	f7f8 b9e1 	b.w	3962c <k_event_post_internal>

0004126a <z_impl_k_event_wait>:
 * Wait for any of the specified events
 */
uint32_t z_impl_k_event_wait(struct k_event *event, uint32_t events,
			     bool reset, k_timeout_t timeout)
{
	uint32_t options = reset ? K_EVENT_WAIT_RESET : 0;
   4126a:	2a00      	cmp	r2, #0

	return k_event_wait_internal(event, events, options, timeout);
   4126c:	bf14      	ite	ne
   4126e:	2202      	movne	r2, #2
   41270:	2200      	moveq	r2, #0
   41272:	f7f8 ba33 	b.w	396dc <k_event_wait_internal>

00041276 <z_impl_k_event_wait_all>:
 */
uint32_t z_impl_k_event_wait_all(struct k_event *event, uint32_t events,
				 bool reset, k_timeout_t timeout)
{
	uint32_t options = reset ? (K_EVENT_WAIT_RESET | K_EVENT_WAIT_ALL)
				 : K_EVENT_WAIT_ALL;
   41276:	2a00      	cmp	r2, #0

	return k_event_wait_internal(event, events, options, timeout);
   41278:	bf14      	ite	ne
   4127a:	2203      	movne	r2, #3
   4127c:	2201      	moveq	r2, #1
   4127e:	f7f8 ba2d 	b.w	396dc <k_event_wait_internal>

00041282 <k_free>:
	if (ptr != NULL) {
   41282:	b120      	cbz	r0, 4128e <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   41284:	1f01      	subs	r1, r0, #4
   41286:	f850 0c04 	ldr.w	r0, [r0, #-4]
   4128a:	f7f5 b80b 	b.w	362a4 <k_heap_free>
}
   4128e:	4770      	bx	lr

00041290 <k_malloc>:
{
   41290:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   41292:	2004      	movs	r0, #4
   41294:	f7f8 bada 	b.w	3984c <k_aligned_alloc>

00041298 <k_calloc>:
{
   41298:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   4129a:	fba0 2401 	umull	r2, r4, r0, r1
   4129e:	b94c      	cbnz	r4, 412b4 <k_calloc+0x1c>
	ret = k_malloc(bounds);
   412a0:	4610      	mov	r0, r2
   412a2:	9201      	str	r2, [sp, #4]
   412a4:	f7ff fff4 	bl	41290 <k_malloc>
	if (ret != NULL) {
   412a8:	9a01      	ldr	r2, [sp, #4]
   412aa:	4605      	mov	r5, r0
   412ac:	b920      	cbnz	r0, 412b8 <k_calloc+0x20>
}
   412ae:	4628      	mov	r0, r5
   412b0:	b003      	add	sp, #12
   412b2:	bd30      	pop	{r4, r5, pc}
		return NULL;
   412b4:	2500      	movs	r5, #0
   412b6:	e7fa      	b.n	412ae <k_calloc+0x16>
__ssp_bos_icheck3(memset, void *, int)
   412b8:	4621      	mov	r1, r4
   412ba:	f000 f893 	bl	413e4 <memset>
   412be:	e7f6      	b.n	412ae <k_calloc+0x16>

000412c0 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   412c0:	4770      	bx	lr

000412c2 <tfm_platform_mem_read>:
#include <tfm_platform_api.h>
#include <tfm_ioctl_core_api.h>

enum tfm_platform_err_t tfm_platform_mem_read(void *destination, uint32_t addr,
					      size_t len, uint32_t *result)
{
   412c2:	b510      	push	{r4, lr}
   412c4:	b088      	sub	sp, #32
   412c6:	461c      	mov	r4, r3
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_read_service_args_t args;
	struct tfm_read_service_out_t out;

	in_vec.base = (const void *)&args;
   412c8:	ab05      	add	r3, sp, #20
   412ca:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   412cc:	230c      	movs	r3, #12
   412ce:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   412d0:	2304      	movs	r3, #4

	args.destination = destination;
	args.addr = addr;
	args.len = len;
   412d2:	e9cd 1206 	strd	r1, r2, [sp, #24]
	args.destination = destination;
   412d6:	e9cd 3004 	strd	r3, r0, [sp, #16]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   412da:	eb0d 0103 	add.w	r1, sp, r3
   412de:	aa03      	add	r2, sp, #12
   412e0:	2000      	movs	r0, #0
	out_vec.base = (void *)&out;
   412e2:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   412e6:	f000 f804 	bl	412f2 <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   412ea:	9b00      	ldr	r3, [sp, #0]
   412ec:	6023      	str	r3, [r4, #0]

	return ret;
}
   412ee:	b008      	add	sp, #32
   412f0:	bd10      	pop	{r4, pc}

000412f2 <tfm_platform_ioctl>:
enum tfm_platform_err_t
tfm_platform_ioctl(tfm_platform_ioctl_req_t request,
                   psa_invec *input, psa_outvec *output)
{
    tfm_platform_ioctl_req_t req = request;
    struct psa_invec in_vec[2] = { {0} };
   412f2:	2300      	movs	r3, #0
{
   412f4:	b570      	push	{r4, r5, r6, lr}
   412f6:	b088      	sub	sp, #32
    struct psa_invec in_vec[2] = { {0} };
   412f8:	e9cd 3306 	strd	r3, r3, [sp, #24]
    size_t inlen, outlen;
    psa_status_t status = PSA_ERROR_CONNECTION_REFUSED;
    psa_handle_t handle = PSA_NULL_HANDLE;

    in_vec[0].base = &req;
   412fc:	ab03      	add	r3, sp, #12
   412fe:	9304      	str	r3, [sp, #16]
    in_vec[0].len = sizeof(req);
   41300:	2304      	movs	r3, #4
{
   41302:	4614      	mov	r4, r2
    tfm_platform_ioctl_req_t req = request;
   41304:	9003      	str	r0, [sp, #12]
    in_vec[0].len = sizeof(req);
   41306:	9305      	str	r3, [sp, #20]
    if (input != NULL) {
   41308:	b169      	cbz	r1, 41326 <tfm_platform_ioctl+0x34>
        in_vec[1].base = input->base;
        in_vec[1].len = input->len;
        inlen = 2;
   4130a:	2602      	movs	r6, #2
        in_vec[1].base = input->base;
   4130c:	680b      	ldr	r3, [r1, #0]
   4130e:	9306      	str	r3, [sp, #24]
        in_vec[1].len = input->len;
   41310:	684b      	ldr	r3, [r1, #4]
   41312:	9307      	str	r3, [sp, #28]
        outlen = 1;
    } else {
        outlen = 0;
    }

    handle = psa_connect(TFM_SP_PLATFORM_IOCTL_SID,
   41314:	2101      	movs	r1, #1
   41316:	2041      	movs	r0, #65	; 0x41
   41318:	f7f8 fb2c 	bl	39974 <psa_connect>
                         TFM_SP_PLATFORM_IOCTL_VERSION);
    if (handle <= 0) {
   4131c:	1e05      	subs	r5, r0, #0
   4131e:	dc04      	bgt.n	4132a <tfm_platform_ioctl+0x38>
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
   41320:	2001      	movs	r0, #1
    if (status < PSA_SUCCESS) {
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
    } else {
        return (enum tfm_platform_err_t) status;
    }
}
   41322:	b008      	add	sp, #32
   41324:	bd70      	pop	{r4, r5, r6, pc}
        inlen = 1;
   41326:	2601      	movs	r6, #1
   41328:	e7f4      	b.n	41314 <tfm_platform_ioctl+0x22>
    if (output != NULL) {
   4132a:	1e23      	subs	r3, r4, #0
   4132c:	bf18      	it	ne
   4132e:	2301      	movne	r3, #1
    status = psa_call(handle, PSA_IPC_CALL,
   41330:	2100      	movs	r1, #0
   41332:	e9cd 4300 	strd	r4, r3, [sp]
   41336:	aa04      	add	r2, sp, #16
   41338:	4633      	mov	r3, r6
   4133a:	f7f8 fb29 	bl	39990 <psa_call>
   4133e:	4604      	mov	r4, r0
    psa_close(handle);
   41340:	4628      	mov	r0, r5
   41342:	f7f8 fb41 	bl	399c8 <psa_close>
    if (status < PSA_SUCCESS) {
   41346:	2c00      	cmp	r4, #0
   41348:	dbea      	blt.n	41320 <tfm_platform_ioctl+0x2e>
        return (enum tfm_platform_err_t) status;
   4134a:	4620      	mov	r0, r4
   4134c:	e7e9      	b.n	41322 <tfm_platform_ioctl+0x30>

0004134e <psa_crypto_init>:
}
   4134e:	2000      	movs	r0, #0
   41350:	4770      	bx	lr

00041352 <fabs>:
   41352:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   41356:	4770      	bx	lr

00041358 <abs>:
   41358:	2800      	cmp	r0, #0
   4135a:	bfb8      	it	lt
   4135c:	4240      	neglt	r0, r0
   4135e:	4770      	bx	lr

00041360 <atoi>:
   41360:	220a      	movs	r2, #10
   41362:	2100      	movs	r1, #0
   41364:	f7f9 ba64 	b.w	3a830 <strtol>

00041368 <memchr>:
   41368:	b2c9      	uxtb	r1, r1
   4136a:	4402      	add	r2, r0
   4136c:	b510      	push	{r4, lr}
   4136e:	4290      	cmp	r0, r2
   41370:	4603      	mov	r3, r0
   41372:	d101      	bne.n	41378 <memchr+0x10>
   41374:	2300      	movs	r3, #0
   41376:	e003      	b.n	41380 <memchr+0x18>
   41378:	781c      	ldrb	r4, [r3, #0]
   4137a:	3001      	adds	r0, #1
   4137c:	428c      	cmp	r4, r1
   4137e:	d1f6      	bne.n	4136e <memchr+0x6>
   41380:	4618      	mov	r0, r3
   41382:	bd10      	pop	{r4, pc}

00041384 <memcmp>:
   41384:	3901      	subs	r1, #1
   41386:	4402      	add	r2, r0
   41388:	b510      	push	{r4, lr}
   4138a:	4290      	cmp	r0, r2
   4138c:	d101      	bne.n	41392 <memcmp+0xe>
   4138e:	2000      	movs	r0, #0
   41390:	e005      	b.n	4139e <memcmp+0x1a>
   41392:	7803      	ldrb	r3, [r0, #0]
   41394:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   41398:	42a3      	cmp	r3, r4
   4139a:	d001      	beq.n	413a0 <memcmp+0x1c>
   4139c:	1b18      	subs	r0, r3, r4
   4139e:	bd10      	pop	{r4, pc}
   413a0:	3001      	adds	r0, #1
   413a2:	e7f2      	b.n	4138a <memcmp+0x6>

000413a4 <memcpy>:
   413a4:	440a      	add	r2, r1
   413a6:	1e43      	subs	r3, r0, #1
   413a8:	4291      	cmp	r1, r2
   413aa:	d100      	bne.n	413ae <memcpy+0xa>
   413ac:	4770      	bx	lr
   413ae:	b510      	push	{r4, lr}
   413b0:	f811 4b01 	ldrb.w	r4, [r1], #1
   413b4:	4291      	cmp	r1, r2
   413b6:	f803 4f01 	strb.w	r4, [r3, #1]!
   413ba:	d1f9      	bne.n	413b0 <memcpy+0xc>
   413bc:	bd10      	pop	{r4, pc}

000413be <__memcpy_chk>:
   413be:	429a      	cmp	r2, r3
   413c0:	b508      	push	{r3, lr}
   413c2:	d901      	bls.n	413c8 <__memcpy_chk+0xa>
   413c4:	f7e2 faea 	bl	2399c <__chk_fail>
   413c8:	4281      	cmp	r1, r0
   413ca:	d804      	bhi.n	413d6 <__memcpy_chk+0x18>
   413cc:	188b      	adds	r3, r1, r2
   413ce:	4298      	cmp	r0, r3
   413d0:	d3f8      	bcc.n	413c4 <__memcpy_chk+0x6>
   413d2:	4281      	cmp	r1, r0
   413d4:	d102      	bne.n	413dc <__memcpy_chk+0x1e>
   413d6:	1883      	adds	r3, r0, r2
   413d8:	4299      	cmp	r1, r3
   413da:	d3f3      	bcc.n	413c4 <__memcpy_chk+0x6>
   413dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   413e0:	f7ff bfe0 	b.w	413a4 <memcpy>

000413e4 <memset>:
   413e4:	4402      	add	r2, r0
   413e6:	4603      	mov	r3, r0
   413e8:	4293      	cmp	r3, r2
   413ea:	d100      	bne.n	413ee <memset+0xa>
   413ec:	4770      	bx	lr
   413ee:	f803 1b01 	strb.w	r1, [r3], #1
   413f2:	e7f9      	b.n	413e8 <memset+0x4>

000413f4 <_calloc_r>:
   413f4:	434a      	muls	r2, r1
   413f6:	b513      	push	{r0, r1, r4, lr}
   413f8:	4611      	mov	r1, r2
   413fa:	9201      	str	r2, [sp, #4]
   413fc:	f7f8 fc2a 	bl	39c54 <_malloc_r>
   41400:	4604      	mov	r4, r0
   41402:	b118      	cbz	r0, 4140c <_calloc_r+0x18>
   41404:	9a01      	ldr	r2, [sp, #4]
   41406:	2100      	movs	r1, #0
   41408:	f7ff ffec 	bl	413e4 <memset>
   4140c:	4620      	mov	r0, r4
   4140e:	b002      	add	sp, #8
   41410:	bd10      	pop	{r4, pc}

00041412 <__sfputc_r>:
   41412:	6893      	ldr	r3, [r2, #8]
   41414:	3b01      	subs	r3, #1
   41416:	2b00      	cmp	r3, #0
   41418:	6093      	str	r3, [r2, #8]
   4141a:	b410      	push	{r4}
   4141c:	da08      	bge.n	41430 <__sfputc_r+0x1e>
   4141e:	6994      	ldr	r4, [r2, #24]
   41420:	42a3      	cmp	r3, r4
   41422:	db01      	blt.n	41428 <__sfputc_r+0x16>
   41424:	290a      	cmp	r1, #10
   41426:	d103      	bne.n	41430 <__sfputc_r+0x1e>
   41428:	f85d 4b04 	ldr.w	r4, [sp], #4
   4142c:	f7f9 bb82 	b.w	3ab34 <__swbuf_r>
   41430:	6813      	ldr	r3, [r2, #0]
   41432:	1c58      	adds	r0, r3, #1
   41434:	6010      	str	r0, [r2, #0]
   41436:	4608      	mov	r0, r1
   41438:	7019      	strb	r1, [r3, #0]
   4143a:	f85d 4b04 	ldr.w	r4, [sp], #4
   4143e:	4770      	bx	lr

00041440 <__sfputs_r>:
   41440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   41442:	4606      	mov	r6, r0
   41444:	460f      	mov	r7, r1
   41446:	4614      	mov	r4, r2
   41448:	18d5      	adds	r5, r2, r3
   4144a:	42ac      	cmp	r4, r5
   4144c:	d101      	bne.n	41452 <__sfputs_r+0x12>
   4144e:	2000      	movs	r0, #0
   41450:	e007      	b.n	41462 <__sfputs_r+0x22>
   41452:	463a      	mov	r2, r7
   41454:	f814 1b01 	ldrb.w	r1, [r4], #1
   41458:	4630      	mov	r0, r6
   4145a:	f7ff ffda 	bl	41412 <__sfputc_r>
   4145e:	1c43      	adds	r3, r0, #1
   41460:	d1f3      	bne.n	4144a <__sfputs_r+0xa>
   41462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00041464 <__cvt>:
   41464:	2b00      	cmp	r3, #0
   41466:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4146a:	461d      	mov	r5, r3
   4146c:	b088      	sub	sp, #32
   4146e:	bfb4      	ite	lt
   41470:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   41474:	2300      	movge	r3, #0
   41476:	4614      	mov	r4, r2
   41478:	bfbc      	itt	lt
   4147a:	4614      	movlt	r4, r2
   4147c:	461d      	movlt	r5, r3
   4147e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   41480:	bfb8      	it	lt
   41482:	232d      	movlt	r3, #45	; 0x2d
   41484:	9e10      	ldr	r6, [sp, #64]	; 0x40
   41486:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   4148a:	7013      	strb	r3, [r2, #0]
   4148c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   4148e:	f023 0820 	bic.w	r8, r3, #32
   41492:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   41496:	d005      	beq.n	414a4 <__cvt+0x40>
   41498:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   4149c:	d100      	bne.n	414a0 <__cvt+0x3c>
   4149e:	3601      	adds	r6, #1
   414a0:	2302      	movs	r3, #2
   414a2:	e000      	b.n	414a6 <__cvt+0x42>
   414a4:	2303      	movs	r3, #3
   414a6:	aa07      	add	r2, sp, #28
   414a8:	9204      	str	r2, [sp, #16]
   414aa:	aa06      	add	r2, sp, #24
   414ac:	e9cd 3600 	strd	r3, r6, [sp]
   414b0:	e9cd a202 	strd	sl, r2, [sp, #8]
   414b4:	462b      	mov	r3, r5
   414b6:	4622      	mov	r2, r4
   414b8:	f7dd fece 	bl	1f258 <_dtoa_r>
   414bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   414c0:	4607      	mov	r7, r0
   414c2:	d102      	bne.n	414ca <__cvt+0x66>
   414c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   414c6:	07db      	lsls	r3, r3, #31
   414c8:	d522      	bpl.n	41510 <__cvt+0xac>
   414ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   414ce:	eb07 0906 	add.w	r9, r7, r6
   414d2:	d110      	bne.n	414f6 <__cvt+0x92>
   414d4:	783b      	ldrb	r3, [r7, #0]
   414d6:	2b30      	cmp	r3, #48	; 0x30
   414d8:	d10a      	bne.n	414f0 <__cvt+0x8c>
   414da:	2200      	movs	r2, #0
   414dc:	2300      	movs	r3, #0
   414de:	4620      	mov	r0, r4
   414e0:	4629      	mov	r1, r5
   414e2:	f7db fbd1 	bl	1cc88 <__aeabi_dcmpeq>
   414e6:	b918      	cbnz	r0, 414f0 <__cvt+0x8c>
   414e8:	f1c6 0601 	rsb	r6, r6, #1
   414ec:	f8ca 6000 	str.w	r6, [sl]
   414f0:	f8da 3000 	ldr.w	r3, [sl]
   414f4:	4499      	add	r9, r3
   414f6:	2200      	movs	r2, #0
   414f8:	2300      	movs	r3, #0
   414fa:	4620      	mov	r0, r4
   414fc:	4629      	mov	r1, r5
   414fe:	f7db fbc3 	bl	1cc88 <__aeabi_dcmpeq>
   41502:	b108      	cbz	r0, 41508 <__cvt+0xa4>
   41504:	f8cd 901c 	str.w	r9, [sp, #28]
   41508:	2230      	movs	r2, #48	; 0x30
   4150a:	9b07      	ldr	r3, [sp, #28]
   4150c:	454b      	cmp	r3, r9
   4150e:	d307      	bcc.n	41520 <__cvt+0xbc>
   41510:	9b07      	ldr	r3, [sp, #28]
   41512:	4638      	mov	r0, r7
   41514:	9a15      	ldr	r2, [sp, #84]	; 0x54
   41516:	1bdb      	subs	r3, r3, r7
   41518:	6013      	str	r3, [r2, #0]
   4151a:	b008      	add	sp, #32
   4151c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   41520:	1c59      	adds	r1, r3, #1
   41522:	9107      	str	r1, [sp, #28]
   41524:	701a      	strb	r2, [r3, #0]
   41526:	e7f0      	b.n	4150a <__cvt+0xa6>

00041528 <__exponent>:
   41528:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4152a:	2900      	cmp	r1, #0
   4152c:	4603      	mov	r3, r0
   4152e:	bfb8      	it	lt
   41530:	4249      	neglt	r1, r1
   41532:	f803 2b02 	strb.w	r2, [r3], #2
   41536:	bfb4      	ite	lt
   41538:	222d      	movlt	r2, #45	; 0x2d
   4153a:	222b      	movge	r2, #43	; 0x2b
   4153c:	2909      	cmp	r1, #9
   4153e:	7042      	strb	r2, [r0, #1]
   41540:	dd2a      	ble.n	41598 <__exponent+0x70>
   41542:	f10d 0407 	add.w	r4, sp, #7
   41546:	270a      	movs	r7, #10
   41548:	46a4      	mov	ip, r4
   4154a:	460a      	mov	r2, r1
   4154c:	46a6      	mov	lr, r4
   4154e:	3c01      	subs	r4, #1
   41550:	2a63      	cmp	r2, #99	; 0x63
   41552:	fb91 f6f7 	sdiv	r6, r1, r7
   41556:	fb07 1516 	mls	r5, r7, r6, r1
   4155a:	4631      	mov	r1, r6
   4155c:	f105 0530 	add.w	r5, r5, #48	; 0x30
   41560:	f80e 5c01 	strb.w	r5, [lr, #-1]
   41564:	dcf1      	bgt.n	4154a <__exponent+0x22>
   41566:	3130      	adds	r1, #48	; 0x30
   41568:	f1ae 0502 	sub.w	r5, lr, #2
   4156c:	f804 1c01 	strb.w	r1, [r4, #-1]
   41570:	1c44      	adds	r4, r0, #1
   41572:	4629      	mov	r1, r5
   41574:	4561      	cmp	r1, ip
   41576:	d30a      	bcc.n	4158e <__exponent+0x66>
   41578:	f10d 0209 	add.w	r2, sp, #9
   4157c:	eba2 020e 	sub.w	r2, r2, lr
   41580:	4565      	cmp	r5, ip
   41582:	bf88      	it	hi
   41584:	2200      	movhi	r2, #0
   41586:	4413      	add	r3, r2
   41588:	1a18      	subs	r0, r3, r0
   4158a:	b003      	add	sp, #12
   4158c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   4158e:	f811 2b01 	ldrb.w	r2, [r1], #1
   41592:	f804 2f01 	strb.w	r2, [r4, #1]!
   41596:	e7ed      	b.n	41574 <__exponent+0x4c>
   41598:	2330      	movs	r3, #48	; 0x30
   4159a:	3130      	adds	r1, #48	; 0x30
   4159c:	7083      	strb	r3, [r0, #2]
   4159e:	1d03      	adds	r3, r0, #4
   415a0:	70c1      	strb	r1, [r0, #3]
   415a2:	e7f1      	b.n	41588 <__exponent+0x60>

000415a4 <_printf_common>:
   415a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   415a8:	4616      	mov	r6, r2
   415aa:	4699      	mov	r9, r3
   415ac:	688a      	ldr	r2, [r1, #8]
   415ae:	4607      	mov	r7, r0
   415b0:	690b      	ldr	r3, [r1, #16]
   415b2:	460c      	mov	r4, r1
   415b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
   415b8:	4293      	cmp	r3, r2
   415ba:	bfb8      	it	lt
   415bc:	4613      	movlt	r3, r2
   415be:	6033      	str	r3, [r6, #0]
   415c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   415c4:	b10a      	cbz	r2, 415ca <_printf_common+0x26>
   415c6:	3301      	adds	r3, #1
   415c8:	6033      	str	r3, [r6, #0]
   415ca:	6823      	ldr	r3, [r4, #0]
   415cc:	0699      	lsls	r1, r3, #26
   415ce:	bf42      	ittt	mi
   415d0:	6833      	ldrmi	r3, [r6, #0]
   415d2:	3302      	addmi	r3, #2
   415d4:	6033      	strmi	r3, [r6, #0]
   415d6:	6825      	ldr	r5, [r4, #0]
   415d8:	f015 0506 	ands.w	r5, r5, #6
   415dc:	d106      	bne.n	415ec <_printf_common+0x48>
   415de:	f104 0a19 	add.w	sl, r4, #25
   415e2:	68e3      	ldr	r3, [r4, #12]
   415e4:	6832      	ldr	r2, [r6, #0]
   415e6:	1a9b      	subs	r3, r3, r2
   415e8:	42ab      	cmp	r3, r5
   415ea:	dc29      	bgt.n	41640 <_printf_common+0x9c>
   415ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   415f0:	1e13      	subs	r3, r2, #0
   415f2:	6822      	ldr	r2, [r4, #0]
   415f4:	bf18      	it	ne
   415f6:	2301      	movne	r3, #1
   415f8:	0692      	lsls	r2, r2, #26
   415fa:	d42e      	bmi.n	4165a <_printf_common+0xb6>
   415fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
   41600:	4649      	mov	r1, r9
   41602:	4638      	mov	r0, r7
   41604:	47c0      	blx	r8
   41606:	3001      	adds	r0, #1
   41608:	d021      	beq.n	4164e <_printf_common+0xaa>
   4160a:	6823      	ldr	r3, [r4, #0]
   4160c:	341a      	adds	r4, #26
   4160e:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   41612:	f003 0306 	and.w	r3, r3, #6
   41616:	6832      	ldr	r2, [r6, #0]
   41618:	2600      	movs	r6, #0
   4161a:	2b04      	cmp	r3, #4
   4161c:	f854 3c12 	ldr.w	r3, [r4, #-18]
   41620:	bf08      	it	eq
   41622:	1aad      	subeq	r5, r5, r2
   41624:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   41628:	bf14      	ite	ne
   4162a:	2500      	movne	r5, #0
   4162c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   41630:	4293      	cmp	r3, r2
   41632:	bfc4      	itt	gt
   41634:	1a9b      	subgt	r3, r3, r2
   41636:	18ed      	addgt	r5, r5, r3
   41638:	42b5      	cmp	r5, r6
   4163a:	d11a      	bne.n	41672 <_printf_common+0xce>
   4163c:	2000      	movs	r0, #0
   4163e:	e008      	b.n	41652 <_printf_common+0xae>
   41640:	2301      	movs	r3, #1
   41642:	4652      	mov	r2, sl
   41644:	4649      	mov	r1, r9
   41646:	4638      	mov	r0, r7
   41648:	47c0      	blx	r8
   4164a:	3001      	adds	r0, #1
   4164c:	d103      	bne.n	41656 <_printf_common+0xb2>
   4164e:	f04f 30ff 	mov.w	r0, #4294967295
   41652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   41656:	3501      	adds	r5, #1
   41658:	e7c3      	b.n	415e2 <_printf_common+0x3e>
   4165a:	18e1      	adds	r1, r4, r3
   4165c:	1c5a      	adds	r2, r3, #1
   4165e:	2030      	movs	r0, #48	; 0x30
   41660:	3302      	adds	r3, #2
   41662:	4422      	add	r2, r4
   41664:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   41668:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   4166c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   41670:	e7c4      	b.n	415fc <_printf_common+0x58>
   41672:	2301      	movs	r3, #1
   41674:	4622      	mov	r2, r4
   41676:	4649      	mov	r1, r9
   41678:	4638      	mov	r0, r7
   4167a:	47c0      	blx	r8
   4167c:	3001      	adds	r0, #1
   4167e:	d0e6      	beq.n	4164e <_printf_common+0xaa>
   41680:	3601      	adds	r6, #1
   41682:	e7d9      	b.n	41638 <_printf_common+0x94>

00041684 <__sprintf_chk>:
   41684:	b408      	push	{r3}
   41686:	b517      	push	{r0, r1, r2, r4, lr}
   41688:	ab05      	add	r3, sp, #20
   4168a:	1e14      	subs	r4, r2, #0
   4168c:	f853 1b04 	ldr.w	r1, [r3], #4
   41690:	9301      	str	r3, [sp, #4]
   41692:	da07      	bge.n	416a4 <__sprintf_chk+0x20>
   41694:	461a      	mov	r2, r3
   41696:	f7f9 fa15 	bl	3aac4 <vsiprintf>
   4169a:	b003      	add	sp, #12
   4169c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   416a0:	b001      	add	sp, #4
   416a2:	4770      	bx	lr
   416a4:	460a      	mov	r2, r1
   416a6:	4621      	mov	r1, r4
   416a8:	f7f9 f9e8 	bl	3aa7c <vsniprintf>
   416ac:	2800      	cmp	r0, #0
   416ae:	dbf4      	blt.n	4169a <__sprintf_chk+0x16>
   416b0:	42a0      	cmp	r0, r4
   416b2:	d3f2      	bcc.n	4169a <__sprintf_chk+0x16>
   416b4:	f7e2 f972 	bl	2399c <__chk_fail>

000416b8 <__sread>:
   416b8:	b510      	push	{r4, lr}
   416ba:	460c      	mov	r4, r1
   416bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   416c0:	f7fa feec 	bl	3c49c <_read_r>
   416c4:	2800      	cmp	r0, #0
   416c6:	bfab      	itete	ge
   416c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   416ca:	89a3      	ldrhlt	r3, [r4, #12]
   416cc:	181b      	addge	r3, r3, r0
   416ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   416d2:	bfac      	ite	ge
   416d4:	6563      	strge	r3, [r4, #84]	; 0x54
   416d6:	81a3      	strhlt	r3, [r4, #12]
   416d8:	bd10      	pop	{r4, pc}

000416da <__seofread>:
   416da:	2000      	movs	r0, #0
   416dc:	4770      	bx	lr

000416de <__swrite>:
   416de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   416e2:	461f      	mov	r7, r3
   416e4:	898b      	ldrh	r3, [r1, #12]
   416e6:	4605      	mov	r5, r0
   416e8:	460c      	mov	r4, r1
   416ea:	05db      	lsls	r3, r3, #23
   416ec:	4616      	mov	r6, r2
   416ee:	d505      	bpl.n	416fc <__swrite+0x1e>
   416f0:	2302      	movs	r3, #2
   416f2:	2200      	movs	r2, #0
   416f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   416f8:	f7f9 fec8 	bl	3b48c <_lseek_r>
   416fc:	89a3      	ldrh	r3, [r4, #12]
   416fe:	4632      	mov	r2, r6
   41700:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   41704:	4628      	mov	r0, r5
   41706:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   4170a:	81a3      	strh	r3, [r4, #12]
   4170c:	463b      	mov	r3, r7
   4170e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   41712:	f7f9 ba61 	b.w	3abd8 <_write_r>

00041716 <__sseek>:
   41716:	b510      	push	{r4, lr}
   41718:	460c      	mov	r4, r1
   4171a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   4171e:	f7f9 feb5 	bl	3b48c <_lseek_r>
   41722:	1c43      	adds	r3, r0, #1
   41724:	89a3      	ldrh	r3, [r4, #12]
   41726:	bf15      	itete	ne
   41728:	6560      	strne	r0, [r4, #84]	; 0x54
   4172a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   4172e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   41732:	81a3      	strheq	r3, [r4, #12]
   41734:	bf18      	it	ne
   41736:	81a3      	strhne	r3, [r4, #12]
   41738:	bd10      	pop	{r4, pc}

0004173a <__sclose>:
   4173a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   4173e:	f7f9 bacb 	b.w	3acd8 <_close_r>

00041742 <strcat>:
   41742:	4602      	mov	r2, r0
   41744:	b510      	push	{r4, lr}
   41746:	7814      	ldrb	r4, [r2, #0]
   41748:	4613      	mov	r3, r2
   4174a:	3201      	adds	r2, #1
   4174c:	2c00      	cmp	r4, #0
   4174e:	d1fa      	bne.n	41746 <strcat+0x4>
   41750:	3b01      	subs	r3, #1
   41752:	f811 2b01 	ldrb.w	r2, [r1], #1
   41756:	f803 2f01 	strb.w	r2, [r3, #1]!
   4175a:	2a00      	cmp	r2, #0
   4175c:	d1f9      	bne.n	41752 <strcat+0x10>
   4175e:	bd10      	pop	{r4, pc}

00041760 <strchr>:
   41760:	b2c9      	uxtb	r1, r1
   41762:	4603      	mov	r3, r0
   41764:	f810 2b01 	ldrb.w	r2, [r0], #1
   41768:	b11a      	cbz	r2, 41772 <strchr+0x12>
   4176a:	428a      	cmp	r2, r1
   4176c:	d1f9      	bne.n	41762 <strchr+0x2>
   4176e:	4618      	mov	r0, r3
   41770:	4770      	bx	lr
   41772:	2900      	cmp	r1, #0
   41774:	bf18      	it	ne
   41776:	2300      	movne	r3, #0
   41778:	e7f9      	b.n	4176e <strchr+0xe>

0004177a <strcpy>:
   4177a:	4603      	mov	r3, r0
   4177c:	f811 2b01 	ldrb.w	r2, [r1], #1
   41780:	f803 2b01 	strb.w	r2, [r3], #1
   41784:	2a00      	cmp	r2, #0
   41786:	d1f9      	bne.n	4177c <strcpy+0x2>
   41788:	4770      	bx	lr

0004178a <strncmp>:
   4178a:	b510      	push	{r4, lr}
   4178c:	b17a      	cbz	r2, 417ae <strncmp+0x24>
   4178e:	4603      	mov	r3, r0
   41790:	3901      	subs	r1, #1
   41792:	1884      	adds	r4, r0, r2
   41794:	f813 0b01 	ldrb.w	r0, [r3], #1
   41798:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   4179c:	4290      	cmp	r0, r2
   4179e:	d101      	bne.n	417a4 <strncmp+0x1a>
   417a0:	42a3      	cmp	r3, r4
   417a2:	d101      	bne.n	417a8 <strncmp+0x1e>
   417a4:	1a80      	subs	r0, r0, r2
   417a6:	bd10      	pop	{r4, pc}
   417a8:	2800      	cmp	r0, #0
   417aa:	d1f3      	bne.n	41794 <strncmp+0xa>
   417ac:	e7fa      	b.n	417a4 <strncmp+0x1a>
   417ae:	4610      	mov	r0, r2
   417b0:	e7f9      	b.n	417a6 <strncmp+0x1c>

000417b2 <strncpy>:
   417b2:	3901      	subs	r1, #1
   417b4:	4603      	mov	r3, r0
   417b6:	b510      	push	{r4, lr}
   417b8:	b132      	cbz	r2, 417c8 <strncpy+0x16>
   417ba:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   417be:	3a01      	subs	r2, #1
   417c0:	f803 4b01 	strb.w	r4, [r3], #1
   417c4:	2c00      	cmp	r4, #0
   417c6:	d1f7      	bne.n	417b8 <strncpy+0x6>
   417c8:	441a      	add	r2, r3
   417ca:	2100      	movs	r1, #0
   417cc:	4293      	cmp	r3, r2
   417ce:	d100      	bne.n	417d2 <strncpy+0x20>
   417d0:	bd10      	pop	{r4, pc}
   417d2:	f803 1b01 	strb.w	r1, [r3], #1
   417d6:	e7f9      	b.n	417cc <strncpy+0x1a>

000417d8 <strnlen>:
   417d8:	4602      	mov	r2, r0
   417da:	4401      	add	r1, r0
   417dc:	b510      	push	{r4, lr}
   417de:	428a      	cmp	r2, r1
   417e0:	4613      	mov	r3, r2
   417e2:	d003      	beq.n	417ec <strnlen+0x14>
   417e4:	781c      	ldrb	r4, [r3, #0]
   417e6:	3201      	adds	r2, #1
   417e8:	2c00      	cmp	r4, #0
   417ea:	d1f8      	bne.n	417de <strnlen+0x6>
   417ec:	1a18      	subs	r0, r3, r0
   417ee:	bd10      	pop	{r4, pc}

000417f0 <strrchr>:
   417f0:	b538      	push	{r3, r4, r5, lr}
   417f2:	4603      	mov	r3, r0
   417f4:	460c      	mov	r4, r1
   417f6:	b969      	cbnz	r1, 41814 <strrchr+0x24>
   417f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   417fc:	f7ff bfb0 	b.w	41760 <strchr>
   41800:	1c43      	adds	r3, r0, #1
   41802:	4605      	mov	r5, r0
   41804:	4621      	mov	r1, r4
   41806:	4618      	mov	r0, r3
   41808:	f7ff ffaa 	bl	41760 <strchr>
   4180c:	2800      	cmp	r0, #0
   4180e:	d1f7      	bne.n	41800 <strrchr+0x10>
   41810:	4628      	mov	r0, r5
   41812:	bd38      	pop	{r3, r4, r5, pc}
   41814:	2500      	movs	r5, #0
   41816:	e7f5      	b.n	41804 <strrchr+0x14>

00041818 <strstr>:
   41818:	780a      	ldrb	r2, [r1, #0]
   4181a:	b570      	push	{r4, r5, r6, lr}
   4181c:	b96a      	cbnz	r2, 4183a <strstr+0x22>
   4181e:	bd70      	pop	{r4, r5, r6, pc}
   41820:	429a      	cmp	r2, r3
   41822:	d109      	bne.n	41838 <strstr+0x20>
   41824:	460c      	mov	r4, r1
   41826:	4605      	mov	r5, r0
   41828:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   4182c:	2b00      	cmp	r3, #0
   4182e:	d0f6      	beq.n	4181e <strstr+0x6>
   41830:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   41834:	429e      	cmp	r6, r3
   41836:	d0f7      	beq.n	41828 <strstr+0x10>
   41838:	3001      	adds	r0, #1
   4183a:	7803      	ldrb	r3, [r0, #0]
   4183c:	2b00      	cmp	r3, #0
   4183e:	d1ef      	bne.n	41820 <strstr+0x8>
   41840:	4618      	mov	r0, r3
   41842:	e7ec      	b.n	4181e <strstr+0x6>

00041844 <sulp>:
   41844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   41848:	4690      	mov	r8, r2
   4184a:	460f      	mov	r7, r1
   4184c:	f7fa f988 	bl	3bb60 <__ulp>
   41850:	4604      	mov	r4, r0
   41852:	460d      	mov	r5, r1
   41854:	f1b8 0f00 	cmp.w	r8, #0
   41858:	d011      	beq.n	4187e <sulp+0x3a>
   4185a:	f3c7 530a 	ubfx	r3, r7, #20, #11
   4185e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   41862:	2b00      	cmp	r3, #0
   41864:	dd0b      	ble.n	4187e <sulp+0x3a>
   41866:	051b      	lsls	r3, r3, #20
   41868:	2400      	movs	r4, #0
   4186a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   4186e:	4622      	mov	r2, r4
   41870:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   41874:	462b      	mov	r3, r5
   41876:	f7da ff9f 	bl	1c7b8 <__aeabi_dmul>
   4187a:	4604      	mov	r4, r0
   4187c:	460d      	mov	r5, r1
   4187e:	4620      	mov	r0, r4
   41880:	4629      	mov	r1, r5
   41882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00041886 <_strtol_r>:
   41886:	f7f8 bf51 	b.w	3a72c <_strtol_l.constprop.0>

0004188a <_strtoul_r>:
   4188a:	f7f9 b87b 	b.w	3a984 <_strtoul_l.constprop.0>

0004188e <_vsniprintf_r>:
   4188e:	b530      	push	{r4, r5, lr}
   41890:	4614      	mov	r4, r2
   41892:	b09b      	sub	sp, #108	; 0x6c
   41894:	4605      	mov	r5, r0
   41896:	461a      	mov	r2, r3
   41898:	2c00      	cmp	r4, #0
   4189a:	da05      	bge.n	418a8 <_vsniprintf_r+0x1a>
   4189c:	238b      	movs	r3, #139	; 0x8b
   4189e:	6003      	str	r3, [r0, #0]
   418a0:	f04f 30ff 	mov.w	r0, #4294967295
   418a4:	b01b      	add	sp, #108	; 0x6c
   418a6:	bd30      	pop	{r4, r5, pc}
   418a8:	f44f 7302 	mov.w	r3, #520	; 0x208
   418ac:	9100      	str	r1, [sp, #0]
   418ae:	9104      	str	r1, [sp, #16]
   418b0:	4669      	mov	r1, sp
   418b2:	f8ad 300c 	strh.w	r3, [sp, #12]
   418b6:	bf14      	ite	ne
   418b8:	f104 33ff 	addne.w	r3, r4, #4294967295
   418bc:	4623      	moveq	r3, r4
   418be:	9302      	str	r3, [sp, #8]
   418c0:	9305      	str	r3, [sp, #20]
   418c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   418c6:	f8ad 300e 	strh.w	r3, [sp, #14]
   418ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   418cc:	f7fa fa18 	bl	3bd00 <_svfiprintf_r>
   418d0:	1c43      	adds	r3, r0, #1
   418d2:	bfbc      	itt	lt
   418d4:	238b      	movlt	r3, #139	; 0x8b
   418d6:	602b      	strlt	r3, [r5, #0]
   418d8:	2c00      	cmp	r4, #0
   418da:	d0e3      	beq.n	418a4 <_vsniprintf_r+0x16>
   418dc:	9b00      	ldr	r3, [sp, #0]
   418de:	2200      	movs	r2, #0
   418e0:	701a      	strb	r2, [r3, #0]
   418e2:	e7df      	b.n	418a4 <_vsniprintf_r+0x16>

000418e4 <abort>:
   418e4:	2006      	movs	r0, #6
   418e6:	b508      	push	{r3, lr}
   418e8:	f7fa fdf0 	bl	3c4cc <raise>
   418ec:	2001      	movs	r0, #1
   418ee:	f7e1 ffdd 	bl	238ac <_exit>

000418f2 <quorem>:
   418f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   418f6:	6903      	ldr	r3, [r0, #16]
   418f8:	4607      	mov	r7, r0
   418fa:	690c      	ldr	r4, [r1, #16]
   418fc:	42a3      	cmp	r3, r4
   418fe:	f2c0 8085 	blt.w	41a0c <quorem+0x11a>
   41902:	3c01      	subs	r4, #1
   41904:	f100 0514 	add.w	r5, r0, #20
   41908:	f101 0814 	add.w	r8, r1, #20
   4190c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   41910:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   41914:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   41918:	9301      	str	r3, [sp, #4]
   4191a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   4191e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   41922:	3301      	adds	r3, #1
   41924:	429a      	cmp	r2, r3
   41926:	fbb2 f6f3 	udiv	r6, r2, r3
   4192a:	d333      	bcc.n	41994 <quorem+0xa2>
   4192c:	f04f 0e00 	mov.w	lr, #0
   41930:	4640      	mov	r0, r8
   41932:	46ac      	mov	ip, r5
   41934:	46f2      	mov	sl, lr
   41936:	f850 2b04 	ldr.w	r2, [r0], #4
   4193a:	b293      	uxth	r3, r2
   4193c:	4581      	cmp	r9, r0
   4193e:	ea4f 4212 	mov.w	r2, r2, lsr #16
   41942:	fb06 e303 	mla	r3, r6, r3, lr
   41946:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   4194a:	b29b      	uxth	r3, r3
   4194c:	fb06 e202 	mla	r2, r6, r2, lr
   41950:	ebaa 0303 	sub.w	r3, sl, r3
   41954:	f8dc a000 	ldr.w	sl, [ip]
   41958:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   4195c:	fa1f fa8a 	uxth.w	sl, sl
   41960:	4453      	add	r3, sl
   41962:	fa1f fa82 	uxth.w	sl, r2
   41966:	f8dc 2000 	ldr.w	r2, [ip]
   4196a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   4196e:	eb02 4223 	add.w	r2, r2, r3, asr #16
   41972:	b29b      	uxth	r3, r3
   41974:	ea4f 4a22 	mov.w	sl, r2, asr #16
   41978:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   4197c:	f84c 3b04 	str.w	r3, [ip], #4
   41980:	d2d9      	bcs.n	41936 <quorem+0x44>
   41982:	f855 300b 	ldr.w	r3, [r5, fp]
   41986:	b92b      	cbnz	r3, 41994 <quorem+0xa2>
   41988:	9b01      	ldr	r3, [sp, #4]
   4198a:	3b04      	subs	r3, #4
   4198c:	429d      	cmp	r5, r3
   4198e:	461a      	mov	r2, r3
   41990:	d330      	bcc.n	419f4 <quorem+0x102>
   41992:	613c      	str	r4, [r7, #16]
   41994:	4638      	mov	r0, r7
   41996:	f000 fa38 	bl	41e0a <__mcmp>
   4199a:	2800      	cmp	r0, #0
   4199c:	db26      	blt.n	419ec <quorem+0xfa>
   4199e:	3601      	adds	r6, #1
   419a0:	4628      	mov	r0, r5
   419a2:	f04f 0c00 	mov.w	ip, #0
   419a6:	f858 1b04 	ldr.w	r1, [r8], #4
   419aa:	f8d0 e000 	ldr.w	lr, [r0]
   419ae:	b28b      	uxth	r3, r1
   419b0:	45c1      	cmp	r9, r8
   419b2:	fa1f f28e 	uxth.w	r2, lr
   419b6:	ebac 0303 	sub.w	r3, ip, r3
   419ba:	4413      	add	r3, r2
   419bc:	ea4f 4211 	mov.w	r2, r1, lsr #16
   419c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   419c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
   419c8:	b29b      	uxth	r3, r3
   419ca:	ea4f 4c22 	mov.w	ip, r2, asr #16
   419ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   419d2:	f840 3b04 	str.w	r3, [r0], #4
   419d6:	d2e6      	bcs.n	419a6 <quorem+0xb4>
   419d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   419dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   419e0:	b922      	cbnz	r2, 419ec <quorem+0xfa>
   419e2:	3b04      	subs	r3, #4
   419e4:	429d      	cmp	r5, r3
   419e6:	461a      	mov	r2, r3
   419e8:	d30a      	bcc.n	41a00 <quorem+0x10e>
   419ea:	613c      	str	r4, [r7, #16]
   419ec:	4630      	mov	r0, r6
   419ee:	b003      	add	sp, #12
   419f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   419f4:	6812      	ldr	r2, [r2, #0]
   419f6:	3b04      	subs	r3, #4
   419f8:	2a00      	cmp	r2, #0
   419fa:	d1ca      	bne.n	41992 <quorem+0xa0>
   419fc:	3c01      	subs	r4, #1
   419fe:	e7c5      	b.n	4198c <quorem+0x9a>
   41a00:	6812      	ldr	r2, [r2, #0]
   41a02:	3b04      	subs	r3, #4
   41a04:	2a00      	cmp	r2, #0
   41a06:	d1f0      	bne.n	419ea <quorem+0xf8>
   41a08:	3c01      	subs	r4, #1
   41a0a:	e7eb      	b.n	419e4 <quorem+0xf2>
   41a0c:	2000      	movs	r0, #0
   41a0e:	e7ee      	b.n	419ee <quorem+0xfc>

00041a10 <__sfmoreglue>:
   41a10:	b570      	push	{r4, r5, r6, lr}
   41a12:	2268      	movs	r2, #104	; 0x68
   41a14:	1e4d      	subs	r5, r1, #1
   41a16:	460e      	mov	r6, r1
   41a18:	4355      	muls	r5, r2
   41a1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
   41a1e:	f7f8 f919 	bl	39c54 <_malloc_r>
   41a22:	4604      	mov	r4, r0
   41a24:	b140      	cbz	r0, 41a38 <__sfmoreglue+0x28>
   41a26:	2100      	movs	r1, #0
   41a28:	f105 0268 	add.w	r2, r5, #104	; 0x68
   41a2c:	e9c0 1600 	strd	r1, r6, [r0]
   41a30:	300c      	adds	r0, #12
   41a32:	60a0      	str	r0, [r4, #8]
   41a34:	f7ff fcd6 	bl	413e4 <memset>
   41a38:	4620      	mov	r0, r4
   41a3a:	bd70      	pop	{r4, r5, r6, pc}

00041a3c <_fwalk_reent>:
   41a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   41a40:	4606      	mov	r6, r0
   41a42:	4688      	mov	r8, r1
   41a44:	f100 0448 	add.w	r4, r0, #72	; 0x48
   41a48:	2700      	movs	r7, #0
   41a4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   41a4e:	f1b9 0901 	subs.w	r9, r9, #1
   41a52:	d505      	bpl.n	41a60 <_fwalk_reent+0x24>
   41a54:	6824      	ldr	r4, [r4, #0]
   41a56:	2c00      	cmp	r4, #0
   41a58:	d1f7      	bne.n	41a4a <_fwalk_reent+0xe>
   41a5a:	4638      	mov	r0, r7
   41a5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   41a60:	89ab      	ldrh	r3, [r5, #12]
   41a62:	2b01      	cmp	r3, #1
   41a64:	d907      	bls.n	41a76 <_fwalk_reent+0x3a>
   41a66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   41a6a:	3301      	adds	r3, #1
   41a6c:	d003      	beq.n	41a76 <_fwalk_reent+0x3a>
   41a6e:	4629      	mov	r1, r5
   41a70:	4630      	mov	r0, r6
   41a72:	47c0      	blx	r8
   41a74:	4307      	orrs	r7, r0
   41a76:	3568      	adds	r5, #104	; 0x68
   41a78:	e7e9      	b.n	41a4e <_fwalk_reent+0x12>

00041a7a <rshift>:
   41a7a:	6903      	ldr	r3, [r0, #16]
   41a7c:	114a      	asrs	r2, r1, #5
   41a7e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   41a82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   41a86:	f100 0414 	add.w	r4, r0, #20
   41a8a:	dd45      	ble.n	41b18 <rshift+0x9e>
   41a8c:	f011 011f 	ands.w	r1, r1, #31
   41a90:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   41a94:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   41a98:	d10c      	bne.n	41ab4 <rshift+0x3a>
   41a9a:	f100 0710 	add.w	r7, r0, #16
   41a9e:	4629      	mov	r1, r5
   41aa0:	42b1      	cmp	r1, r6
   41aa2:	d334      	bcc.n	41b0e <rshift+0x94>
   41aa4:	1a9b      	subs	r3, r3, r2
   41aa6:	1eea      	subs	r2, r5, #3
   41aa8:	009b      	lsls	r3, r3, #2
   41aaa:	4296      	cmp	r6, r2
   41aac:	bf38      	it	cc
   41aae:	2300      	movcc	r3, #0
   41ab0:	4423      	add	r3, r4
   41ab2:	e015      	b.n	41ae0 <rshift+0x66>
   41ab4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   41ab8:	f1c1 0820 	rsb	r8, r1, #32
   41abc:	f105 0e04 	add.w	lr, r5, #4
   41ac0:	46a1      	mov	r9, r4
   41ac2:	40cf      	lsrs	r7, r1
   41ac4:	4576      	cmp	r6, lr
   41ac6:	46f4      	mov	ip, lr
   41ac8:	d815      	bhi.n	41af6 <rshift+0x7c>
   41aca:	1a9a      	subs	r2, r3, r2
   41acc:	3501      	adds	r5, #1
   41ace:	0092      	lsls	r2, r2, #2
   41ad0:	3a04      	subs	r2, #4
   41ad2:	42ae      	cmp	r6, r5
   41ad4:	bf38      	it	cc
   41ad6:	2200      	movcc	r2, #0
   41ad8:	18a3      	adds	r3, r4, r2
   41ada:	50a7      	str	r7, [r4, r2]
   41adc:	b107      	cbz	r7, 41ae0 <rshift+0x66>
   41ade:	3304      	adds	r3, #4
   41ae0:	1b1a      	subs	r2, r3, r4
   41ae2:	42a3      	cmp	r3, r4
   41ae4:	ea4f 02a2 	mov.w	r2, r2, asr #2
   41ae8:	bf08      	it	eq
   41aea:	2300      	moveq	r3, #0
   41aec:	6102      	str	r2, [r0, #16]
   41aee:	bf08      	it	eq
   41af0:	6143      	streq	r3, [r0, #20]
   41af2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   41af6:	f8dc c000 	ldr.w	ip, [ip]
   41afa:	fa0c fc08 	lsl.w	ip, ip, r8
   41afe:	ea4c 0707 	orr.w	r7, ip, r7
   41b02:	f849 7b04 	str.w	r7, [r9], #4
   41b06:	f85e 7b04 	ldr.w	r7, [lr], #4
   41b0a:	40cf      	lsrs	r7, r1
   41b0c:	e7da      	b.n	41ac4 <rshift+0x4a>
   41b0e:	f851 cb04 	ldr.w	ip, [r1], #4
   41b12:	f847 cf04 	str.w	ip, [r7, #4]!
   41b16:	e7c3      	b.n	41aa0 <rshift+0x26>
   41b18:	4623      	mov	r3, r4
   41b1a:	e7e1      	b.n	41ae0 <rshift+0x66>

00041b1c <__hexdig_fun>:
   41b1c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   41b20:	2b09      	cmp	r3, #9
   41b22:	d802      	bhi.n	41b2a <__hexdig_fun+0xe>
   41b24:	3820      	subs	r0, #32
   41b26:	b2c0      	uxtb	r0, r0
   41b28:	4770      	bx	lr
   41b2a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   41b2e:	2b05      	cmp	r3, #5
   41b30:	d801      	bhi.n	41b36 <__hexdig_fun+0x1a>
   41b32:	3847      	subs	r0, #71	; 0x47
   41b34:	e7f7      	b.n	41b26 <__hexdig_fun+0xa>
   41b36:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   41b3a:	2b05      	cmp	r3, #5
   41b3c:	d801      	bhi.n	41b42 <__hexdig_fun+0x26>
   41b3e:	3827      	subs	r0, #39	; 0x27
   41b40:	e7f1      	b.n	41b26 <__hexdig_fun+0xa>
   41b42:	2000      	movs	r0, #0
   41b44:	4770      	bx	lr

00041b46 <L_shift>:
   41b46:	f1c2 0208 	rsb	r2, r2, #8
   41b4a:	0092      	lsls	r2, r2, #2
   41b4c:	b570      	push	{r4, r5, r6, lr}
   41b4e:	f1c2 0620 	rsb	r6, r2, #32
   41b52:	6843      	ldr	r3, [r0, #4]
   41b54:	6804      	ldr	r4, [r0, #0]
   41b56:	fa03 f506 	lsl.w	r5, r3, r6
   41b5a:	40d3      	lsrs	r3, r2
   41b5c:	432c      	orrs	r4, r5
   41b5e:	6004      	str	r4, [r0, #0]
   41b60:	f840 3f04 	str.w	r3, [r0, #4]!
   41b64:	4288      	cmp	r0, r1
   41b66:	d3f4      	bcc.n	41b52 <L_shift+0xc>
   41b68:	bd70      	pop	{r4, r5, r6, pc}

00041b6a <__match>:
   41b6a:	6803      	ldr	r3, [r0, #0]
   41b6c:	3301      	adds	r3, #1
   41b6e:	b530      	push	{r4, r5, lr}
   41b70:	f811 4b01 	ldrb.w	r4, [r1], #1
   41b74:	b914      	cbnz	r4, 41b7c <__match+0x12>
   41b76:	6003      	str	r3, [r0, #0]
   41b78:	2001      	movs	r0, #1
   41b7a:	bd30      	pop	{r4, r5, pc}
   41b7c:	f813 2b01 	ldrb.w	r2, [r3], #1
   41b80:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   41b84:	2d19      	cmp	r5, #25
   41b86:	bf98      	it	ls
   41b88:	3220      	addls	r2, #32
   41b8a:	42a2      	cmp	r2, r4
   41b8c:	d0f0      	beq.n	41b70 <__match+0x6>
   41b8e:	2000      	movs	r0, #0
   41b90:	e7f3      	b.n	41b7a <__match+0x10>

00041b92 <__hexnan>:
   41b92:	680b      	ldr	r3, [r1, #0]
   41b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   41b98:	115e      	asrs	r6, r3, #5
   41b9a:	f013 031f 	ands.w	r3, r3, #31
   41b9e:	f04f 0500 	mov.w	r5, #0
   41ba2:	b087      	sub	sp, #28
   41ba4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   41ba8:	4690      	mov	r8, r2
   41baa:	4682      	mov	sl, r0
   41bac:	6802      	ldr	r2, [r0, #0]
   41bae:	bf18      	it	ne
   41bb0:	3604      	addne	r6, #4
   41bb2:	46ab      	mov	fp, r5
   41bb4:	9301      	str	r3, [sp, #4]
   41bb6:	1f37      	subs	r7, r6, #4
   41bb8:	f846 5c04 	str.w	r5, [r6, #-4]
   41bbc:	9502      	str	r5, [sp, #8]
   41bbe:	46b9      	mov	r9, r7
   41bc0:	463c      	mov	r4, r7
   41bc2:	1c53      	adds	r3, r2, #1
   41bc4:	7851      	ldrb	r1, [r2, #1]
   41bc6:	9303      	str	r3, [sp, #12]
   41bc8:	b341      	cbz	r1, 41c1c <__hexnan+0x8a>
   41bca:	4608      	mov	r0, r1
   41bcc:	9205      	str	r2, [sp, #20]
   41bce:	9104      	str	r1, [sp, #16]
   41bd0:	f7ff ffa4 	bl	41b1c <__hexdig_fun>
   41bd4:	2800      	cmp	r0, #0
   41bd6:	d14f      	bne.n	41c78 <__hexnan+0xe6>
   41bd8:	9904      	ldr	r1, [sp, #16]
   41bda:	9a05      	ldr	r2, [sp, #20]
   41bdc:	2920      	cmp	r1, #32
   41bde:	d818      	bhi.n	41c12 <__hexnan+0x80>
   41be0:	9b02      	ldr	r3, [sp, #8]
   41be2:	459b      	cmp	fp, r3
   41be4:	dd13      	ble.n	41c0e <__hexnan+0x7c>
   41be6:	454c      	cmp	r4, r9
   41be8:	d206      	bcs.n	41bf8 <__hexnan+0x66>
   41bea:	2d07      	cmp	r5, #7
   41bec:	dc04      	bgt.n	41bf8 <__hexnan+0x66>
   41bee:	462a      	mov	r2, r5
   41bf0:	4649      	mov	r1, r9
   41bf2:	4620      	mov	r0, r4
   41bf4:	f7ff ffa7 	bl	41b46 <L_shift>
   41bf8:	4544      	cmp	r4, r8
   41bfa:	d94f      	bls.n	41c9c <__hexnan+0x10a>
   41bfc:	2300      	movs	r3, #0
   41bfe:	f1a4 0904 	sub.w	r9, r4, #4
   41c02:	f8cd b008 	str.w	fp, [sp, #8]
   41c06:	f844 3c04 	str.w	r3, [r4, #-4]
   41c0a:	461d      	mov	r5, r3
   41c0c:	464c      	mov	r4, r9
   41c0e:	9a03      	ldr	r2, [sp, #12]
   41c10:	e7d7      	b.n	41bc2 <__hexnan+0x30>
   41c12:	2929      	cmp	r1, #41	; 0x29
   41c14:	d155      	bne.n	41cc2 <__hexnan+0x130>
   41c16:	3202      	adds	r2, #2
   41c18:	f8ca 2000 	str.w	r2, [sl]
   41c1c:	f1bb 0f00 	cmp.w	fp, #0
   41c20:	d04f      	beq.n	41cc2 <__hexnan+0x130>
   41c22:	454c      	cmp	r4, r9
   41c24:	d206      	bcs.n	41c34 <__hexnan+0xa2>
   41c26:	2d07      	cmp	r5, #7
   41c28:	dc04      	bgt.n	41c34 <__hexnan+0xa2>
   41c2a:	462a      	mov	r2, r5
   41c2c:	4649      	mov	r1, r9
   41c2e:	4620      	mov	r0, r4
   41c30:	f7ff ff89 	bl	41b46 <L_shift>
   41c34:	4544      	cmp	r4, r8
   41c36:	d933      	bls.n	41ca0 <__hexnan+0x10e>
   41c38:	f1a8 0204 	sub.w	r2, r8, #4
   41c3c:	4623      	mov	r3, r4
   41c3e:	f853 1b04 	ldr.w	r1, [r3], #4
   41c42:	429f      	cmp	r7, r3
   41c44:	f842 1f04 	str.w	r1, [r2, #4]!
   41c48:	d2f9      	bcs.n	41c3e <__hexnan+0xac>
   41c4a:	1b3b      	subs	r3, r7, r4
   41c4c:	3e03      	subs	r6, #3
   41c4e:	3401      	adds	r4, #1
   41c50:	2200      	movs	r2, #0
   41c52:	f023 0303 	bic.w	r3, r3, #3
   41c56:	3304      	adds	r3, #4
   41c58:	42b4      	cmp	r4, r6
   41c5a:	bf88      	it	hi
   41c5c:	2304      	movhi	r3, #4
   41c5e:	4443      	add	r3, r8
   41c60:	f843 2b04 	str.w	r2, [r3], #4
   41c64:	429f      	cmp	r7, r3
   41c66:	d2fb      	bcs.n	41c60 <__hexnan+0xce>
   41c68:	683b      	ldr	r3, [r7, #0]
   41c6a:	b91b      	cbnz	r3, 41c74 <__hexnan+0xe2>
   41c6c:	4547      	cmp	r7, r8
   41c6e:	d126      	bne.n	41cbe <__hexnan+0x12c>
   41c70:	2301      	movs	r3, #1
   41c72:	603b      	str	r3, [r7, #0]
   41c74:	2005      	movs	r0, #5
   41c76:	e025      	b.n	41cc4 <__hexnan+0x132>
   41c78:	3501      	adds	r5, #1
   41c7a:	f10b 0b01 	add.w	fp, fp, #1
   41c7e:	2d08      	cmp	r5, #8
   41c80:	dd05      	ble.n	41c8e <__hexnan+0xfc>
   41c82:	4544      	cmp	r4, r8
   41c84:	d9c3      	bls.n	41c0e <__hexnan+0x7c>
   41c86:	2300      	movs	r3, #0
   41c88:	3c04      	subs	r4, #4
   41c8a:	2501      	movs	r5, #1
   41c8c:	6023      	str	r3, [r4, #0]
   41c8e:	6822      	ldr	r2, [r4, #0]
   41c90:	f000 000f 	and.w	r0, r0, #15
   41c94:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   41c98:	6022      	str	r2, [r4, #0]
   41c9a:	e7b8      	b.n	41c0e <__hexnan+0x7c>
   41c9c:	2508      	movs	r5, #8
   41c9e:	e7b6      	b.n	41c0e <__hexnan+0x7c>
   41ca0:	9b01      	ldr	r3, [sp, #4]
   41ca2:	2b00      	cmp	r3, #0
   41ca4:	d0e0      	beq.n	41c68 <__hexnan+0xd6>
   41ca6:	f04f 32ff 	mov.w	r2, #4294967295
   41caa:	f1c3 0320 	rsb	r3, r3, #32
   41cae:	fa22 f303 	lsr.w	r3, r2, r3
   41cb2:	f856 2c04 	ldr.w	r2, [r6, #-4]
   41cb6:	401a      	ands	r2, r3
   41cb8:	f846 2c04 	str.w	r2, [r6, #-4]
   41cbc:	e7d4      	b.n	41c68 <__hexnan+0xd6>
   41cbe:	3f04      	subs	r7, #4
   41cc0:	e7d2      	b.n	41c68 <__hexnan+0xd6>
   41cc2:	2004      	movs	r0, #4
   41cc4:	b007      	add	sp, #28
   41cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00041cca <__swhatbuf_r>:
   41cca:	b570      	push	{r4, r5, r6, lr}
   41ccc:	460e      	mov	r6, r1
   41cce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   41cd2:	b096      	sub	sp, #88	; 0x58
   41cd4:	4614      	mov	r4, r2
   41cd6:	2900      	cmp	r1, #0
   41cd8:	461d      	mov	r5, r3
   41cda:	da08      	bge.n	41cee <__swhatbuf_r+0x24>
   41cdc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
   41ce0:	2200      	movs	r2, #0
   41ce2:	602a      	str	r2, [r5, #0]
   41ce4:	061a      	lsls	r2, r3, #24
   41ce6:	d410      	bmi.n	41d0a <__swhatbuf_r+0x40>
   41ce8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   41cec:	e00e      	b.n	41d0c <__swhatbuf_r+0x42>
   41cee:	466a      	mov	r2, sp
   41cf0:	f7fa fc06 	bl	3c500 <_fstat_r>
   41cf4:	2800      	cmp	r0, #0
   41cf6:	dbf1      	blt.n	41cdc <__swhatbuf_r+0x12>
   41cf8:	9a01      	ldr	r2, [sp, #4]
   41cfa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   41cfe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   41d02:	425a      	negs	r2, r3
   41d04:	415a      	adcs	r2, r3
   41d06:	602a      	str	r2, [r5, #0]
   41d08:	e7ee      	b.n	41ce8 <__swhatbuf_r+0x1e>
   41d0a:	2340      	movs	r3, #64	; 0x40
   41d0c:	2000      	movs	r0, #0
   41d0e:	6023      	str	r3, [r4, #0]
   41d10:	b016      	add	sp, #88	; 0x58
   41d12:	bd70      	pop	{r4, r5, r6, pc}

00041d14 <__ascii_mbtowc>:
   41d14:	b082      	sub	sp, #8
   41d16:	b901      	cbnz	r1, 41d1a <__ascii_mbtowc+0x6>
   41d18:	a901      	add	r1, sp, #4
   41d1a:	b142      	cbz	r2, 41d2e <__ascii_mbtowc+0x1a>
   41d1c:	b14b      	cbz	r3, 41d32 <__ascii_mbtowc+0x1e>
   41d1e:	7813      	ldrb	r3, [r2, #0]
   41d20:	600b      	str	r3, [r1, #0]
   41d22:	7812      	ldrb	r2, [r2, #0]
   41d24:	1e10      	subs	r0, r2, #0
   41d26:	bf18      	it	ne
   41d28:	2001      	movne	r0, #1
   41d2a:	b002      	add	sp, #8
   41d2c:	4770      	bx	lr
   41d2e:	4610      	mov	r0, r2
   41d30:	e7fb      	b.n	41d2a <__ascii_mbtowc+0x16>
   41d32:	f06f 0001 	mvn.w	r0, #1
   41d36:	e7f8      	b.n	41d2a <__ascii_mbtowc+0x16>

00041d38 <memmove>:
   41d38:	4288      	cmp	r0, r1
   41d3a:	b510      	push	{r4, lr}
   41d3c:	eb01 0402 	add.w	r4, r1, r2
   41d40:	d902      	bls.n	41d48 <memmove+0x10>
   41d42:	4284      	cmp	r4, r0
   41d44:	4623      	mov	r3, r4
   41d46:	d807      	bhi.n	41d58 <memmove+0x20>
   41d48:	1e43      	subs	r3, r0, #1
   41d4a:	42a1      	cmp	r1, r4
   41d4c:	d008      	beq.n	41d60 <memmove+0x28>
   41d4e:	f811 2b01 	ldrb.w	r2, [r1], #1
   41d52:	f803 2f01 	strb.w	r2, [r3, #1]!
   41d56:	e7f8      	b.n	41d4a <memmove+0x12>
   41d58:	4402      	add	r2, r0
   41d5a:	4601      	mov	r1, r0
   41d5c:	428a      	cmp	r2, r1
   41d5e:	d100      	bne.n	41d62 <memmove+0x2a>
   41d60:	bd10      	pop	{r4, pc}
   41d62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   41d66:	f802 4d01 	strb.w	r4, [r2, #-1]!
   41d6a:	e7f7      	b.n	41d5c <memmove+0x24>

00041d6c <__hi0bits>:
   41d6c:	0c03      	lsrs	r3, r0, #16
   41d6e:	041b      	lsls	r3, r3, #16
   41d70:	b9d3      	cbnz	r3, 41da8 <__hi0bits+0x3c>
   41d72:	0400      	lsls	r0, r0, #16
   41d74:	2310      	movs	r3, #16
   41d76:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   41d7a:	bf04      	itt	eq
   41d7c:	0200      	lsleq	r0, r0, #8
   41d7e:	3308      	addeq	r3, #8
   41d80:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   41d84:	bf04      	itt	eq
   41d86:	0100      	lsleq	r0, r0, #4
   41d88:	3304      	addeq	r3, #4
   41d8a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   41d8e:	bf04      	itt	eq
   41d90:	0080      	lsleq	r0, r0, #2
   41d92:	3302      	addeq	r3, #2
   41d94:	2800      	cmp	r0, #0
   41d96:	db05      	blt.n	41da4 <__hi0bits+0x38>
   41d98:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   41d9c:	f103 0301 	add.w	r3, r3, #1
   41da0:	bf08      	it	eq
   41da2:	2320      	moveq	r3, #32
   41da4:	4618      	mov	r0, r3
   41da6:	4770      	bx	lr
   41da8:	2300      	movs	r3, #0
   41daa:	e7e4      	b.n	41d76 <__hi0bits+0xa>

00041dac <__lo0bits>:
   41dac:	6803      	ldr	r3, [r0, #0]
   41dae:	4601      	mov	r1, r0
   41db0:	f013 0207 	ands.w	r2, r3, #7
   41db4:	d00b      	beq.n	41dce <__lo0bits+0x22>
   41db6:	07da      	lsls	r2, r3, #31
   41db8:	d423      	bmi.n	41e02 <__lo0bits+0x56>
   41dba:	0798      	lsls	r0, r3, #30
   41dbc:	bf47      	ittee	mi
   41dbe:	085b      	lsrmi	r3, r3, #1
   41dc0:	2001      	movmi	r0, #1
   41dc2:	089b      	lsrpl	r3, r3, #2
   41dc4:	2002      	movpl	r0, #2
   41dc6:	bf4c      	ite	mi
   41dc8:	600b      	strmi	r3, [r1, #0]
   41dca:	600b      	strpl	r3, [r1, #0]
   41dcc:	4770      	bx	lr
   41dce:	b298      	uxth	r0, r3
   41dd0:	b9a8      	cbnz	r0, 41dfe <__lo0bits+0x52>
   41dd2:	0c1b      	lsrs	r3, r3, #16
   41dd4:	2010      	movs	r0, #16
   41dd6:	b2da      	uxtb	r2, r3
   41dd8:	b90a      	cbnz	r2, 41dde <__lo0bits+0x32>
   41dda:	3008      	adds	r0, #8
   41ddc:	0a1b      	lsrs	r3, r3, #8
   41dde:	071a      	lsls	r2, r3, #28
   41de0:	bf04      	itt	eq
   41de2:	091b      	lsreq	r3, r3, #4
   41de4:	3004      	addeq	r0, #4
   41de6:	079a      	lsls	r2, r3, #30
   41de8:	bf04      	itt	eq
   41dea:	089b      	lsreq	r3, r3, #2
   41dec:	3002      	addeq	r0, #2
   41dee:	07da      	lsls	r2, r3, #31
   41df0:	d403      	bmi.n	41dfa <__lo0bits+0x4e>
   41df2:	085b      	lsrs	r3, r3, #1
   41df4:	f100 0001 	add.w	r0, r0, #1
   41df8:	d005      	beq.n	41e06 <__lo0bits+0x5a>
   41dfa:	600b      	str	r3, [r1, #0]
   41dfc:	4770      	bx	lr
   41dfe:	4610      	mov	r0, r2
   41e00:	e7e9      	b.n	41dd6 <__lo0bits+0x2a>
   41e02:	2000      	movs	r0, #0
   41e04:	4770      	bx	lr
   41e06:	2020      	movs	r0, #32
   41e08:	4770      	bx	lr

00041e0a <__mcmp>:
   41e0a:	6902      	ldr	r2, [r0, #16]
   41e0c:	b530      	push	{r4, r5, lr}
   41e0e:	690c      	ldr	r4, [r1, #16]
   41e10:	1b12      	subs	r2, r2, r4
   41e12:	d10e      	bne.n	41e32 <__mcmp+0x28>
   41e14:	f100 0314 	add.w	r3, r0, #20
   41e18:	3114      	adds	r1, #20
   41e1a:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   41e1e:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   41e22:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   41e26:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   41e2a:	42a5      	cmp	r5, r4
   41e2c:	d003      	beq.n	41e36 <__mcmp+0x2c>
   41e2e:	d305      	bcc.n	41e3c <__mcmp+0x32>
   41e30:	2201      	movs	r2, #1
   41e32:	4610      	mov	r0, r2
   41e34:	bd30      	pop	{r4, r5, pc}
   41e36:	4283      	cmp	r3, r0
   41e38:	d3f3      	bcc.n	41e22 <__mcmp+0x18>
   41e3a:	e7fa      	b.n	41e32 <__mcmp+0x28>
   41e3c:	f04f 32ff 	mov.w	r2, #4294967295
   41e40:	e7f7      	b.n	41e32 <__mcmp+0x28>

00041e42 <__ratio>:
   41e42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   41e46:	4688      	mov	r8, r1
   41e48:	4681      	mov	r9, r0
   41e4a:	4669      	mov	r1, sp
   41e4c:	f7f9 feac 	bl	3bba8 <__b2d>
   41e50:	460f      	mov	r7, r1
   41e52:	4604      	mov	r4, r0
   41e54:	460d      	mov	r5, r1
   41e56:	4640      	mov	r0, r8
   41e58:	a901      	add	r1, sp, #4
   41e5a:	f7f9 fea5 	bl	3bba8 <__b2d>
   41e5e:	f8d9 3010 	ldr.w	r3, [r9, #16]
   41e62:	f8d8 2010 	ldr.w	r2, [r8, #16]
   41e66:	468b      	mov	fp, r1
   41e68:	eba3 0c02 	sub.w	ip, r3, r2
   41e6c:	e9dd 3200 	ldrd	r3, r2, [sp]
   41e70:	1a9b      	subs	r3, r3, r2
   41e72:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   41e76:	2b00      	cmp	r3, #0
   41e78:	bfdb      	ittet	le
   41e7a:	460a      	movle	r2, r1
   41e7c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   41e80:	462a      	movgt	r2, r5
   41e82:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   41e86:	bfc8      	it	gt
   41e88:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   41e8c:	4602      	mov	r2, r0
   41e8e:	465b      	mov	r3, fp
   41e90:	4620      	mov	r0, r4
   41e92:	4639      	mov	r1, r7
   41e94:	f7da fdba 	bl	1ca0c <__aeabi_ddiv>
   41e98:	b003      	add	sp, #12
   41e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00041e9e <__copybits>:
   41e9e:	3901      	subs	r1, #1
   41ea0:	f102 0314 	add.w	r3, r2, #20
   41ea4:	1149      	asrs	r1, r1, #5
   41ea6:	b570      	push	{r4, r5, r6, lr}
   41ea8:	3101      	adds	r1, #1
   41eaa:	6914      	ldr	r4, [r2, #16]
   41eac:	1f05      	subs	r5, r0, #4
   41eae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   41eb2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   41eb6:	42a3      	cmp	r3, r4
   41eb8:	d30c      	bcc.n	41ed4 <__copybits+0x36>
   41eba:	1aa3      	subs	r3, r4, r2
   41ebc:	3211      	adds	r2, #17
   41ebe:	3b11      	subs	r3, #17
   41ec0:	f023 0303 	bic.w	r3, r3, #3
   41ec4:	42a2      	cmp	r2, r4
   41ec6:	bf88      	it	hi
   41ec8:	2300      	movhi	r3, #0
   41eca:	4418      	add	r0, r3
   41ecc:	2300      	movs	r3, #0
   41ece:	4288      	cmp	r0, r1
   41ed0:	d305      	bcc.n	41ede <__copybits+0x40>
   41ed2:	bd70      	pop	{r4, r5, r6, pc}
   41ed4:	f853 6b04 	ldr.w	r6, [r3], #4
   41ed8:	f845 6f04 	str.w	r6, [r5, #4]!
   41edc:	e7eb      	b.n	41eb6 <__copybits+0x18>
   41ede:	f840 3b04 	str.w	r3, [r0], #4
   41ee2:	e7f4      	b.n	41ece <__copybits+0x30>

00041ee4 <__any_on>:
   41ee4:	f100 0214 	add.w	r2, r0, #20
   41ee8:	114b      	asrs	r3, r1, #5
   41eea:	6900      	ldr	r0, [r0, #16]
   41eec:	4298      	cmp	r0, r3
   41eee:	b510      	push	{r4, lr}
   41ef0:	db11      	blt.n	41f16 <__any_on+0x32>
   41ef2:	dd0a      	ble.n	41f0a <__any_on+0x26>
   41ef4:	f011 011f 	ands.w	r1, r1, #31
   41ef8:	d007      	beq.n	41f0a <__any_on+0x26>
   41efa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   41efe:	fa24 f001 	lsr.w	r0, r4, r1
   41f02:	fa00 f101 	lsl.w	r1, r0, r1
   41f06:	428c      	cmp	r4, r1
   41f08:	d10b      	bne.n	41f22 <__any_on+0x3e>
   41f0a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   41f0e:	4293      	cmp	r3, r2
   41f10:	d803      	bhi.n	41f1a <__any_on+0x36>
   41f12:	2000      	movs	r0, #0
   41f14:	bd10      	pop	{r4, pc}
   41f16:	4603      	mov	r3, r0
   41f18:	e7f7      	b.n	41f0a <__any_on+0x26>
   41f1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   41f1e:	2900      	cmp	r1, #0
   41f20:	d0f5      	beq.n	41f0e <__any_on+0x2a>
   41f22:	2001      	movs	r0, #1
   41f24:	e7f6      	b.n	41f14 <__any_on+0x30>

00041f26 <_realloc_r>:
   41f26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   41f28:	4607      	mov	r7, r0
   41f2a:	4614      	mov	r4, r2
   41f2c:	460e      	mov	r6, r1
   41f2e:	b921      	cbnz	r1, 41f3a <_realloc_r+0x14>
   41f30:	4611      	mov	r1, r2
   41f32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   41f36:	f7f7 be8d 	b.w	39c54 <_malloc_r>
   41f3a:	b922      	cbnz	r2, 41f46 <_realloc_r+0x20>
   41f3c:	4625      	mov	r5, r4
   41f3e:	f7f7 fe3d 	bl	39bbc <_free_r>
   41f42:	4628      	mov	r0, r5
   41f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   41f46:	f000 f96f 	bl	42228 <_malloc_usable_size_r>
   41f4a:	42a0      	cmp	r0, r4
   41f4c:	d20f      	bcs.n	41f6e <_realloc_r+0x48>
   41f4e:	4621      	mov	r1, r4
   41f50:	4638      	mov	r0, r7
   41f52:	f7f7 fe7f 	bl	39c54 <_malloc_r>
   41f56:	4605      	mov	r5, r0
   41f58:	2800      	cmp	r0, #0
   41f5a:	d0f2      	beq.n	41f42 <_realloc_r+0x1c>
   41f5c:	4631      	mov	r1, r6
   41f5e:	4622      	mov	r2, r4
   41f60:	f7ff fa20 	bl	413a4 <memcpy>
   41f64:	4631      	mov	r1, r6
   41f66:	4638      	mov	r0, r7
   41f68:	f7f7 fe28 	bl	39bbc <_free_r>
   41f6c:	e7e9      	b.n	41f42 <_realloc_r+0x1c>
   41f6e:	4635      	mov	r5, r6
   41f70:	e7e7      	b.n	41f42 <_realloc_r+0x1c>

00041f72 <__ssputs_r>:
   41f72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   41f76:	688e      	ldr	r6, [r1, #8]
   41f78:	4682      	mov	sl, r0
   41f7a:	460c      	mov	r4, r1
   41f7c:	4690      	mov	r8, r2
   41f7e:	429e      	cmp	r6, r3
   41f80:	461f      	mov	r7, r3
   41f82:	d838      	bhi.n	41ff6 <__ssputs_r+0x84>
   41f84:	898a      	ldrh	r2, [r1, #12]
   41f86:	f412 6f90 	tst.w	r2, #1152	; 0x480
   41f8a:	d032      	beq.n	41ff2 <__ssputs_r+0x80>
   41f8c:	6825      	ldr	r5, [r4, #0]
   41f8e:	3301      	adds	r3, #1
   41f90:	6909      	ldr	r1, [r1, #16]
   41f92:	eba5 0901 	sub.w	r9, r5, r1
   41f96:	6965      	ldr	r5, [r4, #20]
   41f98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   41f9c:	444b      	add	r3, r9
   41f9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   41fa2:	106d      	asrs	r5, r5, #1
   41fa4:	429d      	cmp	r5, r3
   41fa6:	bf38      	it	cc
   41fa8:	461d      	movcc	r5, r3
   41faa:	0553      	lsls	r3, r2, #21
   41fac:	d531      	bpl.n	42012 <__ssputs_r+0xa0>
   41fae:	4629      	mov	r1, r5
   41fb0:	f7f7 fe50 	bl	39c54 <_malloc_r>
   41fb4:	4606      	mov	r6, r0
   41fb6:	b950      	cbnz	r0, 41fce <__ssputs_r+0x5c>
   41fb8:	230c      	movs	r3, #12
   41fba:	f04f 30ff 	mov.w	r0, #4294967295
   41fbe:	f8ca 3000 	str.w	r3, [sl]
   41fc2:	89a3      	ldrh	r3, [r4, #12]
   41fc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   41fc8:	81a3      	strh	r3, [r4, #12]
   41fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   41fce:	464a      	mov	r2, r9
   41fd0:	6921      	ldr	r1, [r4, #16]
   41fd2:	f7ff f9e7 	bl	413a4 <memcpy>
   41fd6:	89a3      	ldrh	r3, [r4, #12]
   41fd8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   41fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   41fe0:	81a3      	strh	r3, [r4, #12]
   41fe2:	6126      	str	r6, [r4, #16]
   41fe4:	444e      	add	r6, r9
   41fe6:	6165      	str	r5, [r4, #20]
   41fe8:	eba5 0509 	sub.w	r5, r5, r9
   41fec:	6026      	str	r6, [r4, #0]
   41fee:	463e      	mov	r6, r7
   41ff0:	60a5      	str	r5, [r4, #8]
   41ff2:	42be      	cmp	r6, r7
   41ff4:	d900      	bls.n	41ff8 <__ssputs_r+0x86>
   41ff6:	463e      	mov	r6, r7
   41ff8:	4632      	mov	r2, r6
   41ffa:	4641      	mov	r1, r8
   41ffc:	6820      	ldr	r0, [r4, #0]
   41ffe:	f7ff fe9b 	bl	41d38 <memmove>
   42002:	68a3      	ldr	r3, [r4, #8]
   42004:	2000      	movs	r0, #0
   42006:	1b9b      	subs	r3, r3, r6
   42008:	60a3      	str	r3, [r4, #8]
   4200a:	6823      	ldr	r3, [r4, #0]
   4200c:	4433      	add	r3, r6
   4200e:	6023      	str	r3, [r4, #0]
   42010:	e7db      	b.n	41fca <__ssputs_r+0x58>
   42012:	462a      	mov	r2, r5
   42014:	f7ff ff87 	bl	41f26 <_realloc_r>
   42018:	4606      	mov	r6, r0
   4201a:	2800      	cmp	r0, #0
   4201c:	d1e1      	bne.n	41fe2 <__ssputs_r+0x70>
   4201e:	6921      	ldr	r1, [r4, #16]
   42020:	4650      	mov	r0, sl
   42022:	f7f7 fdcb 	bl	39bbc <_free_r>
   42026:	e7c7      	b.n	41fb8 <__ssputs_r+0x46>

00042028 <_sungetc_r>:
   42028:	b538      	push	{r3, r4, r5, lr}
   4202a:	1c4b      	adds	r3, r1, #1
   4202c:	4614      	mov	r4, r2
   4202e:	d103      	bne.n	42038 <_sungetc_r+0x10>
   42030:	f04f 35ff 	mov.w	r5, #4294967295
   42034:	4628      	mov	r0, r5
   42036:	bd38      	pop	{r3, r4, r5, pc}
   42038:	8993      	ldrh	r3, [r2, #12]
   4203a:	b2cd      	uxtb	r5, r1
   4203c:	f023 0320 	bic.w	r3, r3, #32
   42040:	8193      	strh	r3, [r2, #12]
   42042:	6b63      	ldr	r3, [r4, #52]	; 0x34
   42044:	6852      	ldr	r2, [r2, #4]
   42046:	b18b      	cbz	r3, 4206c <_sungetc_r+0x44>
   42048:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   4204a:	4293      	cmp	r3, r2
   4204c:	dd08      	ble.n	42060 <_sungetc_r+0x38>
   4204e:	6823      	ldr	r3, [r4, #0]
   42050:	1e5a      	subs	r2, r3, #1
   42052:	6022      	str	r2, [r4, #0]
   42054:	f803 5c01 	strb.w	r5, [r3, #-1]
   42058:	6863      	ldr	r3, [r4, #4]
   4205a:	3301      	adds	r3, #1
   4205c:	6063      	str	r3, [r4, #4]
   4205e:	e7e9      	b.n	42034 <_sungetc_r+0xc>
   42060:	4621      	mov	r1, r4
   42062:	f000 f89d 	bl	421a0 <__submore>
   42066:	2800      	cmp	r0, #0
   42068:	d0f1      	beq.n	4204e <_sungetc_r+0x26>
   4206a:	e7e1      	b.n	42030 <_sungetc_r+0x8>
   4206c:	6921      	ldr	r1, [r4, #16]
   4206e:	6823      	ldr	r3, [r4, #0]
   42070:	b151      	cbz	r1, 42088 <_sungetc_r+0x60>
   42072:	4299      	cmp	r1, r3
   42074:	d208      	bcs.n	42088 <_sungetc_r+0x60>
   42076:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   4207a:	42a9      	cmp	r1, r5
   4207c:	d104      	bne.n	42088 <_sungetc_r+0x60>
   4207e:	3b01      	subs	r3, #1
   42080:	3201      	adds	r2, #1
   42082:	6023      	str	r3, [r4, #0]
   42084:	6062      	str	r2, [r4, #4]
   42086:	e7d5      	b.n	42034 <_sungetc_r+0xc>
   42088:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
   4208c:	f104 0344 	add.w	r3, r4, #68	; 0x44
   42090:	6363      	str	r3, [r4, #52]	; 0x34
   42092:	2303      	movs	r3, #3
   42094:	63a3      	str	r3, [r4, #56]	; 0x38
   42096:	4623      	mov	r3, r4
   42098:	f803 5f46 	strb.w	r5, [r3, #70]!
   4209c:	6023      	str	r3, [r4, #0]
   4209e:	2301      	movs	r3, #1
   420a0:	e7dc      	b.n	4205c <_sungetc_r+0x34>

000420a2 <__ssrefill_r>:
   420a2:	b510      	push	{r4, lr}
   420a4:	460c      	mov	r4, r1
   420a6:	6b49      	ldr	r1, [r1, #52]	; 0x34
   420a8:	b169      	cbz	r1, 420c6 <__ssrefill_r+0x24>
   420aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
   420ae:	4299      	cmp	r1, r3
   420b0:	d001      	beq.n	420b6 <__ssrefill_r+0x14>
   420b2:	f7f7 fd83 	bl	39bbc <_free_r>
   420b6:	2000      	movs	r0, #0
   420b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
   420ba:	6360      	str	r0, [r4, #52]	; 0x34
   420bc:	6063      	str	r3, [r4, #4]
   420be:	b113      	cbz	r3, 420c6 <__ssrefill_r+0x24>
   420c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   420c2:	6023      	str	r3, [r4, #0]
   420c4:	bd10      	pop	{r4, pc}
   420c6:	6923      	ldr	r3, [r4, #16]
   420c8:	f04f 30ff 	mov.w	r0, #4294967295
   420cc:	6023      	str	r3, [r4, #0]
   420ce:	2300      	movs	r3, #0
   420d0:	6063      	str	r3, [r4, #4]
   420d2:	89a3      	ldrh	r3, [r4, #12]
   420d4:	f043 0320 	orr.w	r3, r3, #32
   420d8:	81a3      	strh	r3, [r4, #12]
   420da:	e7f3      	b.n	420c4 <__ssrefill_r+0x22>

000420dc <__sccl>:
   420dc:	b570      	push	{r4, r5, r6, lr}
   420de:	780b      	ldrb	r3, [r1, #0]
   420e0:	4604      	mov	r4, r0
   420e2:	2b5e      	cmp	r3, #94	; 0x5e
   420e4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
   420e8:	bf13      	iteet	ne
   420ea:	1c48      	addne	r0, r1, #1
   420ec:	1c88      	addeq	r0, r1, #2
   420ee:	784b      	ldrbeq	r3, [r1, #1]
   420f0:	2200      	movne	r2, #0
   420f2:	bf08      	it	eq
   420f4:	2201      	moveq	r2, #1
   420f6:	1e61      	subs	r1, r4, #1
   420f8:	f801 2f01 	strb.w	r2, [r1, #1]!
   420fc:	42a9      	cmp	r1, r5
   420fe:	d1fb      	bne.n	420f8 <__sccl+0x1c>
   42100:	b90b      	cbnz	r3, 42106 <__sccl+0x2a>
   42102:	3801      	subs	r0, #1
   42104:	bd70      	pop	{r4, r5, r6, pc}
   42106:	f082 0201 	eor.w	r2, r2, #1
   4210a:	4605      	mov	r5, r0
   4210c:	54e2      	strb	r2, [r4, r3]
   4210e:	4628      	mov	r0, r5
   42110:	f810 1b01 	ldrb.w	r1, [r0], #1
   42114:	292d      	cmp	r1, #45	; 0x2d
   42116:	d006      	beq.n	42126 <__sccl+0x4a>
   42118:	295d      	cmp	r1, #93	; 0x5d
   4211a:	d0f3      	beq.n	42104 <__sccl+0x28>
   4211c:	b909      	cbnz	r1, 42122 <__sccl+0x46>
   4211e:	4628      	mov	r0, r5
   42120:	e7f0      	b.n	42104 <__sccl+0x28>
   42122:	460b      	mov	r3, r1
   42124:	e7f1      	b.n	4210a <__sccl+0x2e>
   42126:	786e      	ldrb	r6, [r5, #1]
   42128:	2e5d      	cmp	r6, #93	; 0x5d
   4212a:	d0fa      	beq.n	42122 <__sccl+0x46>
   4212c:	42b3      	cmp	r3, r6
   4212e:	dcf8      	bgt.n	42122 <__sccl+0x46>
   42130:	3502      	adds	r5, #2
   42132:	4619      	mov	r1, r3
   42134:	3101      	adds	r1, #1
   42136:	428e      	cmp	r6, r1
   42138:	5462      	strb	r2, [r4, r1]
   4213a:	dcfb      	bgt.n	42134 <__sccl+0x58>
   4213c:	1af1      	subs	r1, r6, r3
   4213e:	1c58      	adds	r0, r3, #1
   42140:	3901      	subs	r1, #1
   42142:	42b3      	cmp	r3, r6
   42144:	bfa8      	it	ge
   42146:	2100      	movge	r1, #0
   42148:	1843      	adds	r3, r0, r1
   4214a:	e7e0      	b.n	4210e <__sccl+0x32>

0004214c <_raise_r>:
   4214c:	291f      	cmp	r1, #31
   4214e:	b538      	push	{r3, r4, r5, lr}
   42150:	4604      	mov	r4, r0
   42152:	460d      	mov	r5, r1
   42154:	d904      	bls.n	42160 <_raise_r+0x14>
   42156:	2316      	movs	r3, #22
   42158:	6003      	str	r3, [r0, #0]
   4215a:	f04f 30ff 	mov.w	r0, #4294967295
   4215e:	bd38      	pop	{r3, r4, r5, pc}
   42160:	6c42      	ldr	r2, [r0, #68]	; 0x44
   42162:	b112      	cbz	r2, 4216a <_raise_r+0x1e>
   42164:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   42168:	b94b      	cbnz	r3, 4217e <_raise_r+0x32>
   4216a:	4620      	mov	r0, r4
   4216c:	f000 f816 	bl	4219c <_getpid_r>
   42170:	462a      	mov	r2, r5
   42172:	4601      	mov	r1, r0
   42174:	4620      	mov	r0, r4
   42176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   4217a:	f7fa b9af 	b.w	3c4dc <_kill_r>
   4217e:	2b01      	cmp	r3, #1
   42180:	d00a      	beq.n	42198 <_raise_r+0x4c>
   42182:	1c59      	adds	r1, r3, #1
   42184:	d103      	bne.n	4218e <_raise_r+0x42>
   42186:	2316      	movs	r3, #22
   42188:	6003      	str	r3, [r0, #0]
   4218a:	2001      	movs	r0, #1
   4218c:	e7e7      	b.n	4215e <_raise_r+0x12>
   4218e:	2400      	movs	r4, #0
   42190:	4628      	mov	r0, r5
   42192:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   42196:	4798      	blx	r3
   42198:	2000      	movs	r0, #0
   4219a:	e7e0      	b.n	4215e <_raise_r+0x12>

0004219c <_getpid_r>:
   4219c:	f7fb bac0 	b.w	3d720 <_getpid>

000421a0 <__submore>:
   421a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   421a4:	460c      	mov	r4, r1
   421a6:	6b49      	ldr	r1, [r1, #52]	; 0x34
   421a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
   421ac:	4299      	cmp	r1, r3
   421ae:	d11a      	bne.n	421e6 <__submore+0x46>
   421b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
   421b4:	f7f7 fd4e 	bl	39c54 <_malloc_r>
   421b8:	b918      	cbnz	r0, 421c2 <__submore+0x22>
   421ba:	f04f 30ff 	mov.w	r0, #4294967295
   421be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   421c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   421c6:	6360      	str	r0, [r4, #52]	; 0x34
   421c8:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   421cc:	63a3      	str	r3, [r4, #56]	; 0x38
   421ce:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   421d2:	7083      	strb	r3, [r0, #2]
   421d4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   421d8:	7043      	strb	r3, [r0, #1]
   421da:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   421de:	7003      	strb	r3, [r0, #0]
   421e0:	6020      	str	r0, [r4, #0]
   421e2:	2000      	movs	r0, #0
   421e4:	e7eb      	b.n	421be <__submore+0x1e>
   421e6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   421e8:	0077      	lsls	r7, r6, #1
   421ea:	463a      	mov	r2, r7
   421ec:	f7ff fe9b 	bl	41f26 <_realloc_r>
   421f0:	4605      	mov	r5, r0
   421f2:	2800      	cmp	r0, #0
   421f4:	d0e1      	beq.n	421ba <__submore+0x1a>
   421f6:	eb00 0806 	add.w	r8, r0, r6
   421fa:	4601      	mov	r1, r0
   421fc:	4632      	mov	r2, r6
   421fe:	4640      	mov	r0, r8
   42200:	f7ff f8d0 	bl	413a4 <memcpy>
   42204:	f8c4 8000 	str.w	r8, [r4]
   42208:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   4220c:	e7e9      	b.n	421e2 <__submore+0x42>

0004220e <__ascii_wctomb>:
   4220e:	b149      	cbz	r1, 42224 <__ascii_wctomb+0x16>
   42210:	2aff      	cmp	r2, #255	; 0xff
   42212:	bf8d      	iteet	hi
   42214:	238a      	movhi	r3, #138	; 0x8a
   42216:	2001      	movls	r0, #1
   42218:	700a      	strbls	r2, [r1, #0]
   4221a:	6003      	strhi	r3, [r0, #0]
   4221c:	bf88      	it	hi
   4221e:	f04f 30ff 	movhi.w	r0, #4294967295
   42222:	4770      	bx	lr
   42224:	4608      	mov	r0, r1
   42226:	4770      	bx	lr

00042228 <_malloc_usable_size_r>:
   42228:	f851 3c04 	ldr.w	r3, [r1, #-4]
   4222c:	1f18      	subs	r0, r3, #4
   4222e:	2b00      	cmp	r3, #0
   42230:	bfbc      	itt	lt
   42232:	580b      	ldrlt	r3, [r1, r0]
   42234:	18c0      	addlt	r0, r0, r3
   42236:	4770      	bx	lr

00042238 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   42238:	f7ef bf70 	b.w	3211c <SystemInit>
